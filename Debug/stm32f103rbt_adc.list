
stm32f103rbt_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9b4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d2c  0800dac8  0800dac8  0001dac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7f4  0800e7f4  00020264  2**0
                  CONTENTS
  4 .ARM          00000000  0800e7f4  0800e7f4  00020264  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e7f4  0800e7f4  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7f4  0800e7f4  0001e7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7f8  0800e7f8  0001e7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800e7fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001364  20000264  0800ea60  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015c8  0800ea60  000215c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1a7  00000000  00000000  0002028d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c9d  00000000  00000000  0003b434  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001510  00000000  00000000  0003f0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001330  00000000  00000000  000405e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ba52  00000000  00000000  00041918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000188e8  00000000  00000000  0005d36a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000980ec  00000000  00000000  00075c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010dd3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062a4  00000000  00000000  0010ddbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000264 	.word	0x20000264
 800012c:	00000000 	.word	0x00000000
 8000130:	0800daac 	.word	0x0800daac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000268 	.word	0x20000268
 800014c:	0800daac 	.word	0x0800daac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <Batt_Discharge_Mode>:
				SOC_manipulasi,
				grad,
				constanta;

void Batt_Discharge_Mode(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON||
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <Batt_Discharge_Mode+0x90>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d024      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			flag_trip_overtemperature==ON||
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <Batt_Discharge_Mode+0x94>)
 800116a:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON||
 800116c:	2b01      	cmp	r3, #1
 800116e:	d020      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			flag_trip_undertemperature==ON||
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <Batt_Discharge_Mode+0x98>)
 8001172:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON||
 8001174:	2b01      	cmp	r3, #1
 8001176:	d01c      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			flag_trip_overcurrentdischarge==ON||
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <Batt_Discharge_Mode+0x9c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON||
 800117c:	2b01      	cmp	r3, #1
 800117e:	d018      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			flag_trip_SOCOverDischarge==ON||
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <Batt_Discharge_Mode+0xa0>)
 8001182:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 8001184:	2b01      	cmp	r3, #1
 8001186:	d014      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			flag_trip_shortcircuit==ON||
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <Batt_Discharge_Mode+0xa4>)
 800118a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON||
 800118c:	2b01      	cmp	r3, #1
 800118e:	d010      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			flag_trip_unbalance==ON||
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <Batt_Discharge_Mode+0xa8>)
 8001192:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON||
 8001194:	2b01      	cmp	r3, #1
 8001196:	d00c      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			flag_trip_systemfailure==ON||
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <Batt_Discharge_Mode+0xac>)
 800119a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON||
 800119c:	2b01      	cmp	r3, #1
 800119e:	d008      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			VBATT <= 48)
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <Batt_Discharge_Mode+0xb0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
			flag_trip_systemfailure==ON||
 80011a4:	491a      	ldr	r1, [pc, #104]	; (8001210 <Batt_Discharge_Mode+0xb4>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff74 	bl	8001094 <__aeabi_fcmple>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <Batt_Discharge_Mode+0x5c>
	{
		Batt_Open_Mode();
 80011b2:	f000 f8ff 	bl	80013b4 <Batt_Open_Mode>
 80011b6:	e017      	b.n	80011e8 <Batt_Discharge_Mode+0x8c>
	}
	else
	{
		HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011be:	4815      	ldr	r0, [pc, #84]	; (8001214 <Batt_Discharge_Mode+0xb8>)
 80011c0:	f008 f9dd 	bl	800957e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ca:	4813      	ldr	r0, [pc, #76]	; (8001218 <Batt_Discharge_Mode+0xbc>)
 80011cc:	f008 f9d7 	bl	800957e <HAL_GPIO_WritePin>
		BATT_State=STATE_DISCHARGE;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <Batt_Discharge_Mode+0xc0>)
 80011d2:	2202      	movs	r2, #2
 80011d4:	701a      	strb	r2, [r3, #0]

		charge_state=0;
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <Batt_Discharge_Mode+0xc4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <Batt_Discharge_Mode+0xc8>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <Batt_Discharge_Mode+0xcc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
	}


}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20001061 	.word	0x20001061
 80011f0:	20001038 	.word	0x20001038
 80011f4:	20001060 	.word	0x20001060
 80011f8:	20001070 	.word	0x20001070
 80011fc:	20001094 	.word	0x20001094
 8001200:	20000c32 	.word	0x20000c32
 8001204:	20000c30 	.word	0x20000c30
 8001208:	20001020 	.word	0x20001020
 800120c:	2000103c 	.word	0x2000103c
 8001210:	42400000 	.word	0x42400000
 8001214:	40010800 	.word	0x40010800
 8001218:	40011000 	.word	0x40011000
 800121c:	200009b0 	.word	0x200009b0
 8001220:	20000000 	.word	0x20000000
 8001224:	20000001 	.word	0x20000001
 8001228:	20000284 	.word	0x20000284

0800122c <Batt_Charge_Mode>:

void Batt_Charge_Mode(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	if(flag_trip_overvoltage==ON			||
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <Batt_Charge_Mode+0x78>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d017      	beq.n	8001268 <Batt_Charge_Mode+0x3c>
			flag_trip_overtemperature==ON	||
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <Batt_Charge_Mode+0x7c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_overvoltage==ON			||
 800123c:	2b01      	cmp	r3, #1
 800123e:	d013      	beq.n	8001268 <Batt_Charge_Mode+0x3c>
			flag_trip_undertemperature==ON	||
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <Batt_Charge_Mode+0x80>)
 8001242:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 8001244:	2b01      	cmp	r3, #1
 8001246:	d00f      	beq.n	8001268 <Batt_Charge_Mode+0x3c>
			flag_trip_overcurrentcharge==ON	||
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <Batt_Charge_Mode+0x84>)
 800124a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 800124c:	2b01      	cmp	r3, #1
 800124e:	d00b      	beq.n	8001268 <Batt_Charge_Mode+0x3c>
			flag_trip_SOCOverCharge==ON		||
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <Batt_Charge_Mode+0x88>)
 8001252:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 8001254:	2b01      	cmp	r3, #1
 8001256:	d007      	beq.n	8001268 <Batt_Charge_Mode+0x3c>
			flag_trip_shortcircuit==ON		||
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <Batt_Charge_Mode+0x8c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 800125c:	2b01      	cmp	r3, #1
 800125e:	d003      	beq.n	8001268 <Batt_Charge_Mode+0x3c>
			flag_trip_systemfailure==ON		)
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <Batt_Charge_Mode+0x90>)
 8001262:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 8001264:	2b01      	cmp	r3, #1
 8001266:	d102      	bne.n	800126e <Batt_Charge_Mode+0x42>
	{
		Batt_Open_Mode();
 8001268:	f000 f8a4 	bl	80013b4 <Batt_Open_Mode>
 800126c:	e017      	b.n	800129e <Batt_Charge_Mode+0x72>
	}
	else
	{
		HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001274:	4812      	ldr	r0, [pc, #72]	; (80012c0 <Batt_Charge_Mode+0x94>)
 8001276:	f008 f982 	bl	800957e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001280:	4810      	ldr	r0, [pc, #64]	; (80012c4 <Batt_Charge_Mode+0x98>)
 8001282:	f008 f97c 	bl	800957e <HAL_GPIO_WritePin>
		BATT_State=STATE_CHARGE;
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <Batt_Charge_Mode+0x9c>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <Batt_Charge_Mode+0xa0>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
		discharge_state=0;
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <Batt_Charge_Mode+0xa4>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <Batt_Charge_Mode+0xa8>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
	}

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200014a5 	.word	0x200014a5
 80012a8:	20001038 	.word	0x20001038
 80012ac:	20001060 	.word	0x20001060
 80012b0:	2000108c 	.word	0x2000108c
 80012b4:	20000c31 	.word	0x20000c31
 80012b8:	20000c32 	.word	0x20000c32
 80012bc:	20001020 	.word	0x20001020
 80012c0:	40010800 	.word	0x40010800
 80012c4:	40011000 	.word	0x40011000
 80012c8:	200009b0 	.word	0x200009b0
 80012cc:	20000000 	.word	0x20000000
 80012d0:	20000001 	.word	0x20000001
 80012d4:	20000284 	.word	0x20000284

080012d8 <Batt_Full_CD_Mode>:

void Batt_Full_CD_Mode(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON			||
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <Batt_Full_CD_Mode+0x98>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d027      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overvoltage==ON		||
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <Batt_Full_CD_Mode+0x9c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON			||
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d023      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overtemperature==ON	||
 80012ec:	4b22      	ldr	r3, [pc, #136]	; (8001378 <Batt_Full_CD_Mode+0xa0>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overvoltage==ON		||
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d01f      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_undertemperature==ON	||
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <Batt_Full_CD_Mode+0xa4>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d01b      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentdischarge==ON||
 80012fc:	4b20      	ldr	r3, [pc, #128]	; (8001380 <Batt_Full_CD_Mode+0xa8>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 8001300:	2b01      	cmp	r3, #1
 8001302:	d017      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentcharge==ON	||
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <Batt_Full_CD_Mode+0xac>)
 8001306:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 8001308:	2b01      	cmp	r3, #1
 800130a:	d013      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverDischarge==ON	||
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <Batt_Full_CD_Mode+0xb0>)
 800130e:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 8001310:	2b01      	cmp	r3, #1
 8001312:	d00f      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverCharge==ON		||
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <Batt_Full_CD_Mode+0xb4>)
 8001316:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON	||
 8001318:	2b01      	cmp	r3, #1
 800131a:	d00b      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_shortcircuit==ON		||
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <Batt_Full_CD_Mode+0xb8>)
 800131e:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 8001320:	2b01      	cmp	r3, #1
 8001322:	d007      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_unbalance==ON			||
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <Batt_Full_CD_Mode+0xbc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 8001328:	2b01      	cmp	r3, #1
 800132a:	d003      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_systemfailure==ON		)
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <Batt_Full_CD_Mode+0xc0>)
 800132e:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON			||
 8001330:	2b01      	cmp	r3, #1
 8001332:	d102      	bne.n	800133a <Batt_Full_CD_Mode+0x62>
	{
		Batt_Open_Mode();
 8001334:	f000 f83e 	bl	80013b4 <Batt_Open_Mode>
 8001338:	e017      	b.n	800136a <Batt_Full_CD_Mode+0x92>
	}
	else
	{
		HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001340:	4816      	ldr	r0, [pc, #88]	; (800139c <Batt_Full_CD_Mode+0xc4>)
 8001342:	f008 f91c 	bl	800957e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134c:	4814      	ldr	r0, [pc, #80]	; (80013a0 <Batt_Full_CD_Mode+0xc8>)
 800134e:	f008 f916 	bl	800957e <HAL_GPIO_WritePin>
		BATT_State=STATE_FULL_CHARGE_DISCHARGE;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <Batt_Full_CD_Mode+0xcc>)
 8001354:	2203      	movs	r2, #3
 8001356:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <Batt_Full_CD_Mode+0xd0>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <Batt_Full_CD_Mode+0xd4>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <Batt_Full_CD_Mode+0xd8>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
	}
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20001061 	.word	0x20001061
 8001374:	200014a5 	.word	0x200014a5
 8001378:	20001038 	.word	0x20001038
 800137c:	20001060 	.word	0x20001060
 8001380:	20001070 	.word	0x20001070
 8001384:	2000108c 	.word	0x2000108c
 8001388:	20001094 	.word	0x20001094
 800138c:	20000c31 	.word	0x20000c31
 8001390:	20000c32 	.word	0x20000c32
 8001394:	20000c30 	.word	0x20000c30
 8001398:	20001020 	.word	0x20001020
 800139c:	40010800 	.word	0x40010800
 80013a0:	40011000 	.word	0x40011000
 80013a4:	200009b0 	.word	0x200009b0
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000001 	.word	0x20000001
 80013b0:	20000284 	.word	0x20000284

080013b4 <Batt_Open_Mode>:

void Batt_Open_Mode(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013be:	480f      	ldr	r0, [pc, #60]	; (80013fc <Batt_Open_Mode+0x48>)
 80013c0:	f008 f8dd 	bl	800957e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ca:	480d      	ldr	r0, [pc, #52]	; (8001400 <Batt_Open_Mode+0x4c>)
 80013cc:	f008 f8d7 	bl	800957e <HAL_GPIO_WritePin>
	BATT_State=STATE_STANDBY;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <Batt_Open_Mode+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
	charge_state=0;
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <Batt_Open_Mode+0x54>)
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
	discharge_state=0;
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <Batt_Open_Mode+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
	sleep_state=1;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <Batt_Open_Mode+0x5c>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2104      	movs	r1, #4
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <Batt_Open_Mode+0x4c>)
 80013ee:	f008 f8c6 	bl	800957e <HAL_GPIO_WritePin>

	check_SOC_Based_OCV();
 80013f2:	f000 f811 	bl	8001418 <check_SOC_Based_OCV>
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40010800 	.word	0x40010800
 8001400:	40011000 	.word	0x40011000
 8001404:	200009b0 	.word	0x200009b0
 8001408:	20000000 	.word	0x20000000
 800140c:	20000001 	.word	0x20000001
 8001410:	20000284 	.word	0x20000284
 8001414:	00000000 	.word	0x00000000

08001418 <check_SOC_Based_OCV>:

void check_SOC_Based_OCV(void)
{
 8001418:	b598      	push	{r3, r4, r7, lr}
 800141a:	af00      	add	r7, sp, #0
	if(VBATT <= 51.3){
 800141c:	4bb0      	ldr	r3, [pc, #704]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f801 	bl	8000428 <__aeabi_f2d>
 8001426:	a39a      	add	r3, pc, #616	; (adr r3, 8001690 <check_SOC_Based_OCV+0x278>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff fad0 	bl	80009d0 <__aeabi_dcmple>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d025      	beq.n	8001482 <check_SOC_Based_OCV+0x6a>
		Pack_SOC = 24.03846153846*(VBATT/15.0) - 77.18750000000;
 8001436:	4baa      	ldr	r3, [pc, #680]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7fe fff4 	bl	8000428 <__aeabi_f2d>
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	4ba7      	ldr	r3, [pc, #668]	; (80016e4 <check_SOC_Based_OCV+0x2cc>)
 8001446:	f7ff f971 	bl	800072c <__aeabi_ddiv>
 800144a:	4603      	mov	r3, r0
 800144c:	460c      	mov	r4, r1
 800144e:	4618      	mov	r0, r3
 8001450:	4621      	mov	r1, r4
 8001452:	a391      	add	r3, pc, #580	; (adr r3, 8001698 <check_SOC_Based_OCV+0x280>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff f83e 	bl	80004d8 <__aeabi_dmul>
 800145c:	4603      	mov	r3, r0
 800145e:	460c      	mov	r4, r1
 8001460:	4618      	mov	r0, r3
 8001462:	4621      	mov	r1, r4
 8001464:	a38e      	add	r3, pc, #568	; (adr r3, 80016a0 <check_SOC_Based_OCV+0x288>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7fe fe7d 	bl	8000168 <__aeabi_dsub>
 800146e:	4603      	mov	r3, r0
 8001470:	460c      	mov	r4, r1
 8001472:	4618      	mov	r0, r3
 8001474:	4621      	mov	r1, r4
 8001476:	f7ff fb07 	bl	8000a88 <__aeabi_d2f>
 800147a:	4602      	mov	r2, r0
 800147c:	4b9a      	ldr	r3, [pc, #616]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e0a9      	b.n	80015d6 <check_SOC_Based_OCV+0x1be>
	}
	else if(VBATT > 51.3 &&  VBATT <= 53.5){
 8001482:	4b97      	ldr	r3, [pc, #604]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe ffce 	bl	8000428 <__aeabi_f2d>
 800148c:	a380      	add	r3, pc, #512	; (adr r3, 8001690 <check_SOC_Based_OCV+0x278>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff fab1 	bl	80009f8 <__aeabi_dcmpgt>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d02e      	beq.n	80014fa <check_SOC_Based_OCV+0xe2>
 800149c:	4b90      	ldr	r3, [pc, #576]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4992      	ldr	r1, [pc, #584]	; (80016ec <check_SOC_Based_OCV+0x2d4>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fdf6 	bl	8001094 <__aeabi_fcmple>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d025      	beq.n	80014fa <check_SOC_Based_OCV+0xe2>
		Pack_SOC = 135.26698598540*(VBATT/15.0) - 458.27213056570;
 80014ae:	4b8c      	ldr	r3, [pc, #560]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ffb8 	bl	8000428 <__aeabi_f2d>
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b89      	ldr	r3, [pc, #548]	; (80016e4 <check_SOC_Based_OCV+0x2cc>)
 80014be:	f7ff f935 	bl	800072c <__aeabi_ddiv>
 80014c2:	4603      	mov	r3, r0
 80014c4:	460c      	mov	r4, r1
 80014c6:	4618      	mov	r0, r3
 80014c8:	4621      	mov	r1, r4
 80014ca:	a377      	add	r3, pc, #476	; (adr r3, 80016a8 <check_SOC_Based_OCV+0x290>)
 80014cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d0:	f7ff f802 	bl	80004d8 <__aeabi_dmul>
 80014d4:	4603      	mov	r3, r0
 80014d6:	460c      	mov	r4, r1
 80014d8:	4618      	mov	r0, r3
 80014da:	4621      	mov	r1, r4
 80014dc:	a374      	add	r3, pc, #464	; (adr r3, 80016b0 <check_SOC_Based_OCV+0x298>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7fe fe41 	bl	8000168 <__aeabi_dsub>
 80014e6:	4603      	mov	r3, r0
 80014e8:	460c      	mov	r4, r1
 80014ea:	4618      	mov	r0, r3
 80014ec:	4621      	mov	r1, r4
 80014ee:	f7ff facb 	bl	8000a88 <__aeabi_d2f>
 80014f2:	4602      	mov	r2, r0
 80014f4:	4b7c      	ldr	r3, [pc, #496]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	e06d      	b.n	80015d6 <check_SOC_Based_OCV+0x1be>
	}
	else if(VBATT > 53.5 &&  VBATT <= 54.7){
 80014fa:	4b79      	ldr	r3, [pc, #484]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	497b      	ldr	r1, [pc, #492]	; (80016ec <check_SOC_Based_OCV+0x2d4>)
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fddb 	bl	80010bc <__aeabi_fcmpgt>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d032      	beq.n	8001572 <check_SOC_Based_OCV+0x15a>
 800150c:	4b74      	ldr	r3, [pc, #464]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe ff89 	bl	8000428 <__aeabi_f2d>
 8001516:	a368      	add	r3, pc, #416	; (adr r3, 80016b8 <check_SOC_Based_OCV+0x2a0>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff fa58 	bl	80009d0 <__aeabi_dcmple>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d025      	beq.n	8001572 <check_SOC_Based_OCV+0x15a>
		Pack_SOC = 332.88158563421*(VBATT/15.0) - 1161.98331356855;
 8001526:	4b6e      	ldr	r3, [pc, #440]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ff7c 	bl	8000428 <__aeabi_f2d>
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	4b6b      	ldr	r3, [pc, #428]	; (80016e4 <check_SOC_Based_OCV+0x2cc>)
 8001536:	f7ff f8f9 	bl	800072c <__aeabi_ddiv>
 800153a:	4603      	mov	r3, r0
 800153c:	460c      	mov	r4, r1
 800153e:	4618      	mov	r0, r3
 8001540:	4621      	mov	r1, r4
 8001542:	a35f      	add	r3, pc, #380	; (adr r3, 80016c0 <check_SOC_Based_OCV+0x2a8>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7fe ffc6 	bl	80004d8 <__aeabi_dmul>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	4618      	mov	r0, r3
 8001552:	4621      	mov	r1, r4
 8001554:	a35c      	add	r3, pc, #368	; (adr r3, 80016c8 <check_SOC_Based_OCV+0x2b0>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7fe fe05 	bl	8000168 <__aeabi_dsub>
 800155e:	4603      	mov	r3, r0
 8001560:	460c      	mov	r4, r1
 8001562:	4618      	mov	r0, r3
 8001564:	4621      	mov	r1, r4
 8001566:	f7ff fa8f 	bl	8000a88 <__aeabi_d2f>
 800156a:	4602      	mov	r2, r0
 800156c:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	e031      	b.n	80015d6 <check_SOC_Based_OCV+0x1be>
	}
	else if(VBATT > 54.7){
 8001572:	4b5b      	ldr	r3, [pc, #364]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ff56 	bl	8000428 <__aeabi_f2d>
 800157c:	a34e      	add	r3, pc, #312	; (adr r3, 80016b8 <check_SOC_Based_OCV+0x2a0>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7ff fa39 	bl	80009f8 <__aeabi_dcmpgt>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d024      	beq.n	80015d6 <check_SOC_Based_OCV+0x1be>
		Pack_SOC = 111.42655038475*(VBATT/15.0) - 353.86053305809;
 800158c:	4b54      	ldr	r3, [pc, #336]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ff49 	bl	8000428 <__aeabi_f2d>
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	4b52      	ldr	r3, [pc, #328]	; (80016e4 <check_SOC_Based_OCV+0x2cc>)
 800159c:	f7ff f8c6 	bl	800072c <__aeabi_ddiv>
 80015a0:	4603      	mov	r3, r0
 80015a2:	460c      	mov	r4, r1
 80015a4:	4618      	mov	r0, r3
 80015a6:	4621      	mov	r1, r4
 80015a8:	a349      	add	r3, pc, #292	; (adr r3, 80016d0 <check_SOC_Based_OCV+0x2b8>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7fe ff93 	bl	80004d8 <__aeabi_dmul>
 80015b2:	4603      	mov	r3, r0
 80015b4:	460c      	mov	r4, r1
 80015b6:	4618      	mov	r0, r3
 80015b8:	4621      	mov	r1, r4
 80015ba:	a347      	add	r3, pc, #284	; (adr r3, 80016d8 <check_SOC_Based_OCV+0x2c0>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7fe fdd2 	bl	8000168 <__aeabi_dsub>
 80015c4:	4603      	mov	r3, r0
 80015c6:	460c      	mov	r4, r1
 80015c8:	4618      	mov	r0, r3
 80015ca:	4621      	mov	r1, r4
 80015cc:	f7ff fa5c 	bl	8000a88 <__aeabi_d2f>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 80015d4:	601a      	str	r2, [r3, #0]
	}

//	Pack_SOC=0.226863411166458*VBATT*VBATT-18.618705166771*VBATT+378.560621625972;   //Persamaan Baterai INR 21700
//	Pack_SOC=(147.471026094008*(VBATT/15.0) - 494.687746093127);  // Persamaan Baterai EVE ICR18650/26V

	grad=(100-0)/(batas_atas-batas_bawah);
 80015d6:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <check_SOC_Based_OCV+0x2d8>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b46      	ldr	r3, [pc, #280]	; (80016f4 <check_SOC_Based_OCV+0x2dc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4619      	mov	r1, r3
 80015e0:	4610      	mov	r0, r2
 80015e2:	f7ff faa5 	bl	8000b30 <__aeabi_fsub>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4619      	mov	r1, r3
 80015ea:	4843      	ldr	r0, [pc, #268]	; (80016f8 <check_SOC_Based_OCV+0x2e0>)
 80015ec:	f7ff fc5e 	bl	8000eac <__aeabi_fdiv>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b41      	ldr	r3, [pc, #260]	; (80016fc <check_SOC_Based_OCV+0x2e4>)
 80015f6:	601a      	str	r2, [r3, #0]
	constanta=grad*batas_bawah*(-1);
 80015f8:	4b40      	ldr	r3, [pc, #256]	; (80016fc <check_SOC_Based_OCV+0x2e4>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <check_SOC_Based_OCV+0x2dc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	4610      	mov	r0, r2
 8001604:	f7ff fb9e 	bl	8000d44 <__aeabi_fmul>
 8001608:	4603      	mov	r3, r0
 800160a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800160e:	4a3c      	ldr	r2, [pc, #240]	; (8001700 <check_SOC_Based_OCV+0x2e8>)
 8001610:	6013      	str	r3, [r2, #0]
	SOC_manipulasi=grad*Pack_SOC+constanta;
 8001612:	4b3a      	ldr	r3, [pc, #232]	; (80016fc <check_SOC_Based_OCV+0x2e4>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4619      	mov	r1, r3
 800161c:	4610      	mov	r0, r2
 800161e:	f7ff fb91 	bl	8000d44 <__aeabi_fmul>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	4b36      	ldr	r3, [pc, #216]	; (8001700 <check_SOC_Based_OCV+0x2e8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4619      	mov	r1, r3
 800162c:	4610      	mov	r0, r2
 800162e:	f7ff fa81 	bl	8000b34 <__addsf3>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	4b33      	ldr	r3, [pc, #204]	; (8001704 <check_SOC_Based_OCV+0x2ec>)
 8001638:	601a      	str	r2, [r3, #0]

	if(Pack_SOC>130) Pack_SOC=100;
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4932      	ldr	r1, [pc, #200]	; (8001708 <check_SOC_Based_OCV+0x2f0>)
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fd3b 	bl	80010bc <__aeabi_fcmpgt>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <check_SOC_Based_OCV+0x23c>
 800164c:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 800164e:	4a2a      	ldr	r2, [pc, #168]	; (80016f8 <check_SOC_Based_OCV+0x2e0>)
 8001650:	601a      	str	r2, [r3, #0]
	else if(Pack_SOC>100) Pack_SOC=100;
	else if(Pack_SOC<0) Pack_SOC=0;
}
 8001652:	e01b      	b.n	800168c <check_SOC_Based_OCV+0x274>
	else if(Pack_SOC>100) Pack_SOC=100;
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4927      	ldr	r1, [pc, #156]	; (80016f8 <check_SOC_Based_OCV+0x2e0>)
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fd2e 	bl	80010bc <__aeabi_fcmpgt>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <check_SOC_Based_OCV+0x256>
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 8001668:	4a23      	ldr	r2, [pc, #140]	; (80016f8 <check_SOC_Based_OCV+0x2e0>)
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	e00e      	b.n	800168c <check_SOC_Based_OCV+0x274>
	else if(Pack_SOC<0) Pack_SOC=0;
 800166e:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fd02 	bl	8001080 <__aeabi_fcmplt>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d100      	bne.n	8001684 <check_SOC_Based_OCV+0x26c>
}
 8001682:	e003      	b.n	800168c <check_SOC_Based_OCV+0x274>
	else if(Pack_SOC<0) Pack_SOC=0;
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
}
 800168c:	bf00      	nop
 800168e:	bd98      	pop	{r3, r4, r7, pc}
 8001690:	66666666 	.word	0x66666666
 8001694:	4049a666 	.word	0x4049a666
 8001698:	9d89d6ed 	.word	0x9d89d6ed
 800169c:	403809d8 	.word	0x403809d8
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40534c00 	.word	0x40534c00
 80016a8:	26317911 	.word	0x26317911
 80016ac:	4060e88b 	.word	0x4060e88b
 80016b0:	a5947ec7 	.word	0xa5947ec7
 80016b4:	407ca45a 	.word	0x407ca45a
 80016b8:	9999999a 	.word	0x9999999a
 80016bc:	404b5999 	.word	0x404b5999
 80016c0:	f989b8e3 	.word	0xf989b8e3
 80016c4:	4074ce1a 	.word	0x4074ce1a
 80016c8:	e9c08a8b 	.word	0xe9c08a8b
 80016cc:	409227ee 	.word	0x409227ee
 80016d0:	99fc263d 	.word	0x99fc263d
 80016d4:	405bdb4c 	.word	0x405bdb4c
 80016d8:	be4fd9fa 	.word	0xbe4fd9fa
 80016dc:	40761dc4 	.word	0x40761dc4
 80016e0:	2000103c 	.word	0x2000103c
 80016e4:	402e0000 	.word	0x402e0000
 80016e8:	20000be4 	.word	0x20000be4
 80016ec:	42560000 	.word	0x42560000
 80016f0:	2000007c 	.word	0x2000007c
 80016f4:	20000080 	.word	0x20000080
 80016f8:	42c80000 	.word	0x42c80000
 80016fc:	20001078 	.word	0x20001078
 8001700:	20001044 	.word	0x20001044
 8001704:	20000bb4 	.word	0x20000bb4
 8001708:	43020000 	.word	0x43020000

0800170c <BMS_CAN_Tx>:
					Ready_toCharge = 0,
					flag_Check_SOCawal = 0,
					flag_bypass = 0;

void BMS_CAN_Tx()
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
		int i;
		Batt_voltage.m_uint16_t=VBATT*100;
 8001712:	4b7d      	ldr	r3, [pc, #500]	; (8001908 <BMS_CAN_Tx+0x1fc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	497d      	ldr	r1, [pc, #500]	; (800190c <BMS_CAN_Tx+0x200>)
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fb13 	bl	8000d44 <__aeabi_fmul>
 800171e:	4603      	mov	r3, r0
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fcfb 	bl	800111c <__aeabi_f2uiz>
 8001726:	4603      	mov	r3, r0
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b79      	ldr	r3, [pc, #484]	; (8001910 <BMS_CAN_Tx+0x204>)
 800172c:	801a      	strh	r2, [r3, #0]
		Batt_current.m_uint16_t=(IBATT+50)*100;
 800172e:	4b79      	ldr	r3, [pc, #484]	; (8001914 <BMS_CAN_Tx+0x208>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4979      	ldr	r1, [pc, #484]	; (8001918 <BMS_CAN_Tx+0x20c>)
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff f9fd 	bl	8000b34 <__addsf3>
 800173a:	4603      	mov	r3, r0
 800173c:	4973      	ldr	r1, [pc, #460]	; (800190c <BMS_CAN_Tx+0x200>)
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fb00 	bl	8000d44 <__aeabi_fmul>
 8001744:	4603      	mov	r3, r0
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fce8 	bl	800111c <__aeabi_f2uiz>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b72      	ldr	r3, [pc, #456]	; (800191c <BMS_CAN_Tx+0x210>)
 8001752:	801a      	strh	r2, [r3, #0]
		Batt_SOC.m_uint16_t=Pack_SOC*100;
 8001754:	4b72      	ldr	r3, [pc, #456]	; (8001920 <BMS_CAN_Tx+0x214>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	496c      	ldr	r1, [pc, #432]	; (800190c <BMS_CAN_Tx+0x200>)
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff faf2 	bl	8000d44 <__aeabi_fmul>
 8001760:	4603      	mov	r3, r0
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fcda 	bl	800111c <__aeabi_f2uiz>
 8001768:	4603      	mov	r3, r0
 800176a:	b29a      	uxth	r2, r3
 800176c:	4b6d      	ldr	r3, [pc, #436]	; (8001924 <BMS_CAN_Tx+0x218>)
 800176e:	801a      	strh	r2, [r3, #0]
//		Batt_SOC.m_uint16_t=(int)SOC_manipulasi;	default Data SOC

		Tmax=Suhu_T1;
 8001770:	4b6d      	ldr	r3, [pc, #436]	; (8001928 <BMS_CAN_Tx+0x21c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a6d      	ldr	r2, [pc, #436]	; (800192c <BMS_CAN_Tx+0x220>)
 8001776:	6013      	str	r3, [r2, #0]
		if(Tmax < Suhu_T2) Tmax = Suhu_T2;
 8001778:	4b6c      	ldr	r3, [pc, #432]	; (800192c <BMS_CAN_Tx+0x220>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <BMS_CAN_Tx+0x224>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	4610      	mov	r0, r2
 8001784:	f7ff fc7c 	bl	8001080 <__aeabi_fcmplt>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <BMS_CAN_Tx+0x8a>
 800178e:	4b68      	ldr	r3, [pc, #416]	; (8001930 <BMS_CAN_Tx+0x224>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a66      	ldr	r2, [pc, #408]	; (800192c <BMS_CAN_Tx+0x220>)
 8001794:	6013      	str	r3, [r2, #0]
		if(Tmax < Suhu_T3) Tmax = Suhu_T3;
 8001796:	4b65      	ldr	r3, [pc, #404]	; (800192c <BMS_CAN_Tx+0x220>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b66      	ldr	r3, [pc, #408]	; (8001934 <BMS_CAN_Tx+0x228>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4619      	mov	r1, r3
 80017a0:	4610      	mov	r0, r2
 80017a2:	f7ff fc6d 	bl	8001080 <__aeabi_fcmplt>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <BMS_CAN_Tx+0xa8>
 80017ac:	4b61      	ldr	r3, [pc, #388]	; (8001934 <BMS_CAN_Tx+0x228>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a5e      	ldr	r2, [pc, #376]	; (800192c <BMS_CAN_Tx+0x220>)
 80017b2:	6013      	str	r3, [r2, #0]
		if(Tmax < Suhu_T4) Tmax = Suhu_T4;
 80017b4:	4b5d      	ldr	r3, [pc, #372]	; (800192c <BMS_CAN_Tx+0x220>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <BMS_CAN_Tx+0x22c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	4610      	mov	r0, r2
 80017c0:	f7ff fc5e 	bl	8001080 <__aeabi_fcmplt>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <BMS_CAN_Tx+0xc6>
 80017ca:	4b5b      	ldr	r3, [pc, #364]	; (8001938 <BMS_CAN_Tx+0x22c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a57      	ldr	r2, [pc, #348]	; (800192c <BMS_CAN_Tx+0x220>)
 80017d0:	6013      	str	r3, [r2, #0]

		Batt_temp.m_uint16_t=(Tmax+40)*10;
 80017d2:	4b56      	ldr	r3, [pc, #344]	; (800192c <BMS_CAN_Tx+0x220>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4959      	ldr	r1, [pc, #356]	; (800193c <BMS_CAN_Tx+0x230>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff f9ab 	bl	8000b34 <__addsf3>
 80017de:	4603      	mov	r3, r0
 80017e0:	4957      	ldr	r1, [pc, #348]	; (8001940 <BMS_CAN_Tx+0x234>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff faae 	bl	8000d44 <__aeabi_fmul>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fc96 	bl	800111c <__aeabi_f2uiz>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	4b53      	ldr	r3, [pc, #332]	; (8001944 <BMS_CAN_Tx+0x238>)
 80017f6:	801a      	strh	r2, [r3, #0]
		Batt_capacity.m_uint16_t=Pack_Cap*100;
 80017f8:	4b53      	ldr	r3, [pc, #332]	; (8001948 <BMS_CAN_Tx+0x23c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4943      	ldr	r1, [pc, #268]	; (800190c <BMS_CAN_Tx+0x200>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff faa0 	bl	8000d44 <__aeabi_fmul>
 8001804:	4603      	mov	r3, r0
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fc88 	bl	800111c <__aeabi_f2uiz>
 800180c:	4603      	mov	r3, r0
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b4e      	ldr	r3, [pc, #312]	; (800194c <BMS_CAN_Tx+0x240>)
 8001812:	801a      	strh	r2, [r3, #0]
		Batt_SOH.m_uint16_t=(int)SOH_batt;
 8001814:	4b4e      	ldr	r3, [pc, #312]	; (8001950 <BMS_CAN_Tx+0x244>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fc59 	bl	80010d0 <__aeabi_f2iz>
 800181e:	4603      	mov	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <BMS_CAN_Tx+0x248>)
 8001824:	801a      	strh	r2, [r3, #0]
		Batt_cycle.m_uint16_t=LifeTime;
 8001826:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <BMS_CAN_Tx+0x24c>)
 8001828:	881a      	ldrh	r2, [r3, #0]
 800182a:	4b4c      	ldr	r3, [pc, #304]	; (800195c <BMS_CAN_Tx+0x250>)
 800182c:	801a      	strh	r2, [r3, #0]

		for(int mn=0;mn<15;mn++)
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	e00a      	b.n	800184a <BMS_CAN_Tx+0x13e>
		{
			vcell_15databyte[mn].m_uint16_t=vcell_15data_digi[mn];
 8001834:	4a4a      	ldr	r2, [pc, #296]	; (8001960 <BMS_CAN_Tx+0x254>)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800183c:	4a49      	ldr	r2, [pc, #292]	; (8001964 <BMS_CAN_Tx+0x258>)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		for(int mn=0;mn<15;mn++)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	2b0e      	cmp	r3, #14
 800184e:	ddf1      	ble.n	8001834 <BMS_CAN_Tx+0x128>
		}

	if(Handshaking==1){
 8001850:	4b45      	ldr	r3, [pc, #276]	; (8001968 <BMS_CAN_Tx+0x25c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	f040 81eb 	bne.w	8001c30 <BMS_CAN_Tx+0x524>
		// CAN ID transmit #1
		Tx_Header.ExtId = (0x0B0<<20|UNIQUE_Code);  //7b1
 800185a:	4b44      	ldr	r3, [pc, #272]	; (800196c <BMS_CAN_Tx+0x260>)
 800185c:	4a44      	ldr	r2, [pc, #272]	; (8001970 <BMS_CAN_Tx+0x264>)
 800185e:	605a      	str	r2, [r3, #4]
		//CAN Data #1
		Tx_data[0] = Batt_voltage.m_bytes[0];
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <BMS_CAN_Tx+0x204>)
 8001862:	781a      	ldrb	r2, [r3, #0]
 8001864:	4b43      	ldr	r3, [pc, #268]	; (8001974 <BMS_CAN_Tx+0x268>)
 8001866:	701a      	strb	r2, [r3, #0]
		Tx_data[1] = Batt_voltage.m_bytes[1];
 8001868:	4b29      	ldr	r3, [pc, #164]	; (8001910 <BMS_CAN_Tx+0x204>)
 800186a:	785a      	ldrb	r2, [r3, #1]
 800186c:	4b41      	ldr	r3, [pc, #260]	; (8001974 <BMS_CAN_Tx+0x268>)
 800186e:	705a      	strb	r2, [r3, #1]
		Tx_data[2] = Batt_current.m_bytes[0];
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <BMS_CAN_Tx+0x210>)
 8001872:	781a      	ldrb	r2, [r3, #0]
 8001874:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <BMS_CAN_Tx+0x268>)
 8001876:	709a      	strb	r2, [r3, #2]
		Tx_data[3] = Batt_current.m_bytes[1];
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <BMS_CAN_Tx+0x210>)
 800187a:	785a      	ldrb	r2, [r3, #1]
 800187c:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <BMS_CAN_Tx+0x268>)
 800187e:	70da      	strb	r2, [r3, #3]
		Tx_data[4] = Batt_SOC.m_bytes[0];
 8001880:	4b28      	ldr	r3, [pc, #160]	; (8001924 <BMS_CAN_Tx+0x218>)
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <BMS_CAN_Tx+0x268>)
 8001886:	711a      	strb	r2, [r3, #4]
		Tx_data[5] = Batt_SOC.m_bytes[1];
 8001888:	4b26      	ldr	r3, [pc, #152]	; (8001924 <BMS_CAN_Tx+0x218>)
 800188a:	785a      	ldrb	r2, [r3, #1]
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <BMS_CAN_Tx+0x268>)
 800188e:	715a      	strb	r2, [r3, #5]
		Tx_data[6] = Batt_temp.m_bytes[0];
 8001890:	4b2c      	ldr	r3, [pc, #176]	; (8001944 <BMS_CAN_Tx+0x238>)
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	4b37      	ldr	r3, [pc, #220]	; (8001974 <BMS_CAN_Tx+0x268>)
 8001896:	719a      	strb	r2, [r3, #6]
		Tx_data[7] = Batt_temp.m_bytes[1];
 8001898:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <BMS_CAN_Tx+0x238>)
 800189a:	785a      	ldrb	r2, [r3, #1]
 800189c:	4b35      	ldr	r3, [pc, #212]	; (8001974 <BMS_CAN_Tx+0x268>)
 800189e:	71da      	strb	r2, [r3, #7]

		//CAN Tx message #1
		Tx_Header.DLC = 8;
 80018a0:	4b32      	ldr	r3, [pc, #200]	; (800196c <BMS_CAN_Tx+0x260>)
 80018a2:	2208      	movs	r2, #8
 80018a4:	611a      	str	r2, [r3, #16]
		delay_TICK1 = HAL_GetTick();
 80018a6:	f005 ff41 	bl	800772c <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b32      	ldr	r3, [pc, #200]	; (8001978 <BMS_CAN_Tx+0x26c>)
 80018ae:	601a      	str	r2, [r3, #0]
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80018b0:	e00f      	b.n	80018d2 <BMS_CAN_Tx+0x1c6>
			if(HAL_GetTick() - delay_TICK1 > 1000){
 80018b2:	f005 ff3b 	bl	800772c <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <BMS_CAN_Tx+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018c2:	d906      	bls.n	80018d2 <BMS_CAN_Tx+0x1c6>
				HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80018c4:	4b2d      	ldr	r3, [pc, #180]	; (800197c <BMS_CAN_Tx+0x270>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	482d      	ldr	r0, [pc, #180]	; (8001980 <BMS_CAN_Tx+0x274>)
 80018cc:	f006 fdf8 	bl	80084c0 <HAL_CAN_AbortTxRequest>
				break;
 80018d0:	e005      	b.n	80018de <BMS_CAN_Tx+0x1d2>
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80018d2:	482b      	ldr	r0, [pc, #172]	; (8001980 <BMS_CAN_Tx+0x274>)
 80018d4:	f006 fe38 	bl	8008548 <HAL_CAN_GetTxMailboxesFreeLevel>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0e9      	beq.n	80018b2 <BMS_CAN_Tx+0x1a6>
			}
		}

		if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 80018de:	4b27      	ldr	r3, [pc, #156]	; (800197c <BMS_CAN_Tx+0x270>)
 80018e0:	4a24      	ldr	r2, [pc, #144]	; (8001974 <BMS_CAN_Tx+0x268>)
 80018e2:	4922      	ldr	r1, [pc, #136]	; (800196c <BMS_CAN_Tx+0x260>)
 80018e4:	4826      	ldr	r0, [pc, #152]	; (8001980 <BMS_CAN_Tx+0x274>)
 80018e6:	f006 fd11 	bl	800830c <HAL_CAN_AddTxMessage>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d007      	beq.n	8001900 <BMS_CAN_Tx+0x1f4>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <BMS_CAN_Tx+0x270>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4822      	ldr	r0, [pc, #136]	; (8001980 <BMS_CAN_Tx+0x274>)
 80018f8:	f006 fde2 	bl	80084c0 <HAL_CAN_AbortTxRequest>
			Error_Handler();
 80018fc:	f001 fbd0 	bl	80030a0 <Error_Handler>
		}
		i=1000;
 8001900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001904:	607b      	str	r3, [r7, #4]
		while(i>1) i--;
 8001906:	e040      	b.n	800198a <BMS_CAN_Tx+0x27e>
 8001908:	2000103c 	.word	0x2000103c
 800190c:	42c80000 	.word	0x42c80000
 8001910:	200007b4 	.word	0x200007b4
 8001914:	20001058 	.word	0x20001058
 8001918:	42480000 	.word	0x42480000
 800191c:	200006f4 	.word	0x200006f4
 8001920:	20000be4 	.word	0x20000be4
 8001924:	200006fc 	.word	0x200006fc
 8001928:	2000106c 	.word	0x2000106c
 800192c:	20000754 	.word	0x20000754
 8001930:	200014a8 	.word	0x200014a8
 8001934:	20001040 	.word	0x20001040
 8001938:	200010a0 	.word	0x200010a0
 800193c:	42200000 	.word	0x42200000
 8001940:	41200000 	.word	0x41200000
 8001944:	20000740 	.word	0x20000740
 8001948:	20000010 	.word	0x20000010
 800194c:	200007ac 	.word	0x200007ac
 8001950:	20000004 	.word	0x20000004
 8001954:	200006b8 	.word	0x200006b8
 8001958:	200009b2 	.word	0x200009b2
 800195c:	200006ec 	.word	0x200006ec
 8001960:	20000938 	.word	0x20000938
 8001964:	20000700 	.word	0x20000700
 8001968:	20000285 	.word	0x20000285
 800196c:	20000794 	.word	0x20000794
 8001970:	0b0bbbb1 	.word	0x0b0bbbb1
 8001974:	200006cc 	.word	0x200006cc
 8001978:	200006e4 	.word	0x200006e4
 800197c:	20000778 	.word	0x20000778
 8001980:	2000082c 	.word	0x2000082c
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b01      	cmp	r3, #1
 800198e:	dcf9      	bgt.n	8001984 <BMS_CAN_Tx+0x278>


		// CAN ID transmit #2
		Tx_Header.ExtId = (0x0B1<<20|UNIQUE_Code); //7b2
 8001990:	4b91      	ldr	r3, [pc, #580]	; (8001bd8 <BMS_CAN_Tx+0x4cc>)
 8001992:	4a92      	ldr	r2, [pc, #584]	; (8001bdc <BMS_CAN_Tx+0x4d0>)
 8001994:	605a      	str	r2, [r3, #4]
		//CAN Data #2
		Tx_data[0] = Batt_capacity.m_bytes[0];
 8001996:	4b92      	ldr	r3, [pc, #584]	; (8001be0 <BMS_CAN_Tx+0x4d4>)
 8001998:	781a      	ldrb	r2, [r3, #0]
 800199a:	4b92      	ldr	r3, [pc, #584]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 800199c:	701a      	strb	r2, [r3, #0]
		Tx_data[1] = Batt_capacity.m_bytes[1];
 800199e:	4b90      	ldr	r3, [pc, #576]	; (8001be0 <BMS_CAN_Tx+0x4d4>)
 80019a0:	785a      	ldrb	r2, [r3, #1]
 80019a2:	4b90      	ldr	r3, [pc, #576]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019a4:	705a      	strb	r2, [r3, #1]
		Tx_data[2] = Batt_SOH.m_bytes[0];
 80019a6:	4b90      	ldr	r3, [pc, #576]	; (8001be8 <BMS_CAN_Tx+0x4dc>)
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	4b8e      	ldr	r3, [pc, #568]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019ac:	709a      	strb	r2, [r3, #2]
		Tx_data[3] = Batt_SOH.m_bytes[1];
 80019ae:	4b8e      	ldr	r3, [pc, #568]	; (8001be8 <BMS_CAN_Tx+0x4dc>)
 80019b0:	785a      	ldrb	r2, [r3, #1]
 80019b2:	4b8c      	ldr	r3, [pc, #560]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019b4:	70da      	strb	r2, [r3, #3]
		Tx_data[4] = Batt_cycle.m_bytes[0];
 80019b6:	4b8d      	ldr	r3, [pc, #564]	; (8001bec <BMS_CAN_Tx+0x4e0>)
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	4b8a      	ldr	r3, [pc, #552]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019bc:	711a      	strb	r2, [r3, #4]
		Tx_data[5] = Batt_cycle.m_bytes[1];
 80019be:	4b8b      	ldr	r3, [pc, #556]	; (8001bec <BMS_CAN_Tx+0x4e0>)
 80019c0:	785a      	ldrb	r2, [r3, #1]
 80019c2:	4b88      	ldr	r3, [pc, #544]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019c4:	715a      	strb	r2, [r3, #5]
		Tx_data[6] = flag_trip_shortcircuit&0x01;
 80019c6:	4b8a      	ldr	r3, [pc, #552]	; (8001bf0 <BMS_CAN_Tx+0x4e4>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b84      	ldr	r3, [pc, #528]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019d2:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overcurrentdischarge&0x01)<<1;
 80019d4:	4b83      	ldr	r3, [pc, #524]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019d6:	799b      	ldrb	r3, [r3, #6]
 80019d8:	b25a      	sxtb	r2, r3
 80019da:	4b86      	ldr	r3, [pc, #536]	; (8001bf4 <BMS_CAN_Tx+0x4e8>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	4313      	orrs	r3, r2
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b7d      	ldr	r3, [pc, #500]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019f0:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overcurrentcharge&0x01)<<2;
 80019f2:	4b7c      	ldr	r3, [pc, #496]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019f4:	799b      	ldrb	r3, [r3, #6]
 80019f6:	b25a      	sxtb	r2, r3
 80019f8:	4b7f      	ldr	r3, [pc, #508]	; (8001bf8 <BMS_CAN_Tx+0x4ec>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	4313      	orrs	r3, r2
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4b75      	ldr	r3, [pc, #468]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a0e:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overtemperature&0x01)<<3;
 8001a10:	4b74      	ldr	r3, [pc, #464]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a12:	799b      	ldrb	r3, [r3, #6]
 8001a14:	b25a      	sxtb	r2, r3
 8001a16:	4b79      	ldr	r3, [pc, #484]	; (8001bfc <BMS_CAN_Tx+0x4f0>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	b25b      	sxtb	r3, r3
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	b25b      	sxtb	r3, r3
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b25b      	sxtb	r3, r3
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b6e      	ldr	r3, [pc, #440]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a2c:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_undertemperature&0x01)<<4;
 8001a2e:	4b6d      	ldr	r3, [pc, #436]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a30:	799b      	ldrb	r3, [r3, #6]
 8001a32:	b25a      	sxtb	r2, r3
 8001a34:	4b72      	ldr	r3, [pc, #456]	; (8001c00 <BMS_CAN_Tx+0x4f4>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	b25b      	sxtb	r3, r3
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	4313      	orrs	r3, r2
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b66      	ldr	r3, [pc, #408]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a4a:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overtemperature&0x01)<<5;
 8001a4c:	4b65      	ldr	r3, [pc, #404]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a4e:	799b      	ldrb	r3, [r3, #6]
 8001a50:	b25a      	sxtb	r2, r3
 8001a52:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <BMS_CAN_Tx+0x4f0>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	015b      	lsls	r3, r3, #5
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a68:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_undertemperature&0x01)<<6;
 8001a6a:	4b5e      	ldr	r3, [pc, #376]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a6c:	799b      	ldrb	r3, [r3, #6]
 8001a6e:	b25a      	sxtb	r2, r3
 8001a70:	4b63      	ldr	r3, [pc, #396]	; (8001c00 <BMS_CAN_Tx+0x4f4>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	019b      	lsls	r3, r3, #6
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b57      	ldr	r3, [pc, #348]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a86:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_unbalance&0x01)<<7;
 8001a88:	4b56      	ldr	r3, [pc, #344]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a8a:	799b      	ldrb	r3, [r3, #6]
 8001a8c:	b25a      	sxtb	r2, r3
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <BMS_CAN_Tx+0x4f8>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	01db      	lsls	r3, r3, #7
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	4313      	orrs	r3, r2
 8001a98:	b25b      	sxtb	r3, r3
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b51      	ldr	r3, [pc, #324]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a9e:	719a      	strb	r2, [r3, #6]

		Tx_data[7] =  (flag_trip_undervoltage&0x01);
 8001aa0:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <BMS_CAN_Tx+0x4fc>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4b4e      	ldr	r3, [pc, #312]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001aac:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (flag_trip_overvoltage&0x01)<<1;
 8001aae:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001ab0:	79db      	ldrb	r3, [r3, #7]
 8001ab2:	b25a      	sxtb	r2, r3
 8001ab4:	4b55      	ldr	r3, [pc, #340]	; (8001c0c <BMS_CAN_Tx+0x500>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b25b      	sxtb	r3, r3
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b46      	ldr	r3, [pc, #280]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001aca:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (flag_trip_SOCOverDischarge&0x01)<<2;
 8001acc:	4b45      	ldr	r3, [pc, #276]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001ace:	79db      	ldrb	r3, [r3, #7]
 8001ad0:	b25a      	sxtb	r2, r3
 8001ad2:	4b4f      	ldr	r3, [pc, #316]	; (8001c10 <BMS_CAN_Tx+0x504>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	b25b      	sxtb	r3, r3
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001ae8:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (flag_trip_systemfailure&0x01)<<3;
 8001aea:	4b3e      	ldr	r3, [pc, #248]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001aec:	79db      	ldrb	r3, [r3, #7]
 8001aee:	b25a      	sxtb	r2, r3
 8001af0:	4b48      	ldr	r3, [pc, #288]	; (8001c14 <BMS_CAN_Tx+0x508>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	b25b      	sxtb	r3, r3
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	b25b      	sxtb	r3, r3
 8001afe:	4313      	orrs	r3, r2
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001b06:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (charge_state&0x01)<<4;
 8001b08:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001b0a:	79db      	ldrb	r3, [r3, #7]
 8001b0c:	b25a      	sxtb	r2, r3
 8001b0e:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <BMS_CAN_Tx+0x50c>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	b25b      	sxtb	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b25b      	sxtb	r3, r3
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001b24:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (discharge_state&0x01)<<5;
 8001b26:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001b28:	79db      	ldrb	r3, [r3, #7]
 8001b2a:	b25a      	sxtb	r2, r3
 8001b2c:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <BMS_CAN_Tx+0x510>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	015b      	lsls	r3, r3, #5
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001b42:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (sleep_state&0x01)<<6;
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001b46:	79db      	ldrb	r3, [r3, #7]
 8001b48:	b25a      	sxtb	r2, r3
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <BMS_CAN_Tx+0x514>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	019b      	lsls	r3, r3, #6
 8001b50:	b25b      	sxtb	r3, r3
 8001b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b56:	b25b      	sxtb	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b25b      	sxtb	r3, r3
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001b60:	71da      	strb	r2, [r3, #7]

		//CAN Tx message #2
		Tx_Header.DLC = 8;
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <BMS_CAN_Tx+0x4cc>)
 8001b64:	2208      	movs	r2, #8
 8001b66:	611a      	str	r2, [r3, #16]
		delay_TICK2 = HAL_GetTick();
 8001b68:	f005 fde0 	bl	800772c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <BMS_CAN_Tx+0x518>)
 8001b70:	601a      	str	r2, [r3, #0]
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8001b72:	e00f      	b.n	8001b94 <BMS_CAN_Tx+0x488>
			if(HAL_GetTick() - delay_TICK2 > 1000){
 8001b74:	f005 fdda 	bl	800772c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <BMS_CAN_Tx+0x518>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b84:	d906      	bls.n	8001b94 <BMS_CAN_Tx+0x488>
				HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <BMS_CAN_Tx+0x51c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4827      	ldr	r0, [pc, #156]	; (8001c2c <BMS_CAN_Tx+0x520>)
 8001b8e:	f006 fc97 	bl	80084c0 <HAL_CAN_AbortTxRequest>
				break;
 8001b92:	e005      	b.n	8001ba0 <BMS_CAN_Tx+0x494>
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8001b94:	4825      	ldr	r0, [pc, #148]	; (8001c2c <BMS_CAN_Tx+0x520>)
 8001b96:	f006 fcd7 	bl	8008548 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0e9      	beq.n	8001b74 <BMS_CAN_Tx+0x468>
			}
		}

		if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8001ba0:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <BMS_CAN_Tx+0x51c>)
 8001ba2:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001ba4:	490c      	ldr	r1, [pc, #48]	; (8001bd8 <BMS_CAN_Tx+0x4cc>)
 8001ba6:	4821      	ldr	r0, [pc, #132]	; (8001c2c <BMS_CAN_Tx+0x520>)
 8001ba8:	f006 fbb0 	bl	800830c <HAL_CAN_AddTxMessage>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <BMS_CAN_Tx+0x4b6>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <BMS_CAN_Tx+0x51c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	481c      	ldr	r0, [pc, #112]	; (8001c2c <BMS_CAN_Tx+0x520>)
 8001bba:	f006 fc81 	bl	80084c0 <HAL_CAN_AbortTxRequest>
			Error_Handler();
 8001bbe:	f001 fa6f 	bl	80030a0 <Error_Handler>
		}
		i=1000;
 8001bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc6:	607b      	str	r3, [r7, #4]
		while(i>1) i--;
 8001bc8:	e002      	b.n	8001bd0 <BMS_CAN_Tx+0x4c4>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	dcf9      	bgt.n	8001bca <BMS_CAN_Tx+0x4be>
			i=1000;
			while(i>1) i--;
			Delay_Charger=0;
		}
	}
}
 8001bd6:	e07a      	b.n	8001cce <BMS_CAN_Tx+0x5c2>
 8001bd8:	20000794 	.word	0x20000794
 8001bdc:	0b1bbbb1 	.word	0x0b1bbbb1
 8001be0:	200007ac 	.word	0x200007ac
 8001be4:	200006cc 	.word	0x200006cc
 8001be8:	200006b8 	.word	0x200006b8
 8001bec:	200006ec 	.word	0x200006ec
 8001bf0:	20000c32 	.word	0x20000c32
 8001bf4:	20001070 	.word	0x20001070
 8001bf8:	2000108c 	.word	0x2000108c
 8001bfc:	20001038 	.word	0x20001038
 8001c00:	20001060 	.word	0x20001060
 8001c04:	20000c30 	.word	0x20000c30
 8001c08:	20001061 	.word	0x20001061
 8001c0c:	200014a5 	.word	0x200014a5
 8001c10:	20001094 	.word	0x20001094
 8001c14:	20001020 	.word	0x20001020
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000001 	.word	0x20000001
 8001c20:	20000284 	.word	0x20000284
 8001c24:	200006c8 	.word	0x200006c8
 8001c28:	20000778 	.word	0x20000778
 8001c2c:	2000082c 	.word	0x2000082c
		Delay_Charger+=1;
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <BMS_CAN_Tx+0x5cc>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <BMS_CAN_Tx+0x5cc>)
 8001c3a:	701a      	strb	r2, [r3, #0]
		if(Handshaking == 0 && identified == 0 && Delay_Charger >= 50){
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <BMS_CAN_Tx+0x5d0>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d144      	bne.n	8001cce <BMS_CAN_Tx+0x5c2>
 8001c44:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <BMS_CAN_Tx+0x5d4>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d140      	bne.n	8001cce <BMS_CAN_Tx+0x5c2>
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <BMS_CAN_Tx+0x5cc>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b31      	cmp	r3, #49	; 0x31
 8001c52:	d93c      	bls.n	8001cce <BMS_CAN_Tx+0x5c2>
			Tx_Header.ExtId = (0x0E0<<20|UNIQUE_Code); //b7
 8001c54:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <BMS_CAN_Tx+0x5d8>)
 8001c56:	4a24      	ldr	r2, [pc, #144]	; (8001ce8 <BMS_CAN_Tx+0x5dc>)
 8001c58:	605a      	str	r2, [r3, #4]
			Tx_data[0] = 0;
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
			Tx_data[1] = 0;
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	705a      	strb	r2, [r3, #1]
			Tx_data[2] = 0;
 8001c66:	4b21      	ldr	r3, [pc, #132]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	709a      	strb	r2, [r3, #2]
			Tx_data[3] = 0;
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	70da      	strb	r2, [r3, #3]
			Tx_data[4] = 0;
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	711a      	strb	r2, [r3, #4]
			Tx_data[5] = 0;
 8001c78:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	715a      	strb	r2, [r3, #5]
			Tx_data[6] = 0x55;
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c80:	2255      	movs	r2, #85	; 0x55
 8001c82:	719a      	strb	r2, [r3, #6]
			Tx_data[7] = 0;
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	71da      	strb	r2, [r3, #7]
			Tx_Header.DLC = 8;
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <BMS_CAN_Tx+0x5d8>)
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	611a      	str	r2, [r3, #16]
			while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8001c90:	bf00      	nop
 8001c92:	4817      	ldr	r0, [pc, #92]	; (8001cf0 <BMS_CAN_Tx+0x5e4>)
 8001c94:	f006 fc58 	bl	8008548 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f9      	beq.n	8001c92 <BMS_CAN_Tx+0x586>
			if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <BMS_CAN_Tx+0x5e8>)
 8001ca0:	4a12      	ldr	r2, [pc, #72]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001ca2:	4910      	ldr	r1, [pc, #64]	; (8001ce4 <BMS_CAN_Tx+0x5d8>)
 8001ca4:	4812      	ldr	r0, [pc, #72]	; (8001cf0 <BMS_CAN_Tx+0x5e4>)
 8001ca6:	f006 fb31 	bl	800830c <HAL_CAN_AddTxMessage>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <BMS_CAN_Tx+0x5a8>
 8001cb0:	f001 f9f6 	bl	80030a0 <Error_Handler>
			i=1000;
 8001cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb8:	607b      	str	r3, [r7, #4]
			while(i>1) i--;
 8001cba:	e002      	b.n	8001cc2 <BMS_CAN_Tx+0x5b6>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	dcf9      	bgt.n	8001cbc <BMS_CAN_Tx+0x5b0>
			Delay_Charger=0;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <BMS_CAN_Tx+0x5cc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000287 	.word	0x20000287
 8001cdc:	20000285 	.word	0x20000285
 8001ce0:	20000286 	.word	0x20000286
 8001ce4:	20000794 	.word	0x20000794
 8001ce8:	0e0bbbb1 	.word	0x0e0bbbb1
 8001cec:	200006cc 	.word	0x200006cc
 8001cf0:	2000082c 	.word	0x2000082c
 8001cf4:	20000778 	.word	0x20000778

08001cf8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rx_Header, Rx_data)== HAL_OK){
 8001d00:	4ba0      	ldr	r3, [pc, #640]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001d02:	4aa1      	ldr	r2, [pc, #644]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001d04:	2100      	movs	r1, #0
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f006 fc52 	bl	80085b0 <HAL_CAN_GetRxMessage>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 8129 	bne.w	8001f66 <HAL_CAN_RxFifo0MsgPendingCallback+0x26e>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001d14:	2110      	movs	r1, #16
 8001d16:	489d      	ldr	r0, [pc, #628]	; (8001f8c <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001d18:	f007 fc49 	bl	80095ae <HAL_GPIO_TogglePin>
		int i;

		if(Rx_Header.StdId==0x0E2){	//Handshaking
 8001d1c:	4b9a      	ldr	r3, [pc, #616]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2be2      	cmp	r3, #226	; 0xe2
 8001d22:	f040 8086 	bne.w	8001e32 <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
			if(Rx_data[6]==0x55 && identified==0){
 8001d26:	4b97      	ldr	r3, [pc, #604]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001d28:	799b      	ldrb	r3, [r3, #6]
 8001d2a:	2b55      	cmp	r3, #85	; 0x55
 8001d2c:	d155      	bne.n	8001dda <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
 8001d2e:	4b98      	ldr	r3, [pc, #608]	; (8001f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d151      	bne.n	8001dda <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
				identified = 1;
 8001d36:	4b96      	ldr	r3, [pc, #600]	; (8001f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
				Tx_Header.DLC = 8;
 8001d3c:	4b95      	ldr	r3, [pc, #596]	; (8001f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001d3e:	2208      	movs	r2, #8
 8001d40:	611a      	str	r2, [r3, #16]
				Tx_data[6] = 0xAA;
 8001d42:	4b95      	ldr	r3, [pc, #596]	; (8001f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001d44:	22aa      	movs	r2, #170	; 0xaa
 8001d46:	719a      	strb	r2, [r3, #6]

				while(!HAL_CAN_GetTxMailboxesFreeLevel(hcan));
 8001d48:	bf00      	nop
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f006 fbfc 	bl	8008548 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f9      	beq.n	8001d4a <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
				if(HAL_CAN_AddTxMessage(hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8001d56:	4b91      	ldr	r3, [pc, #580]	; (8001f9c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001d58:	4a8f      	ldr	r2, [pc, #572]	; (8001f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001d5a:	498e      	ldr	r1, [pc, #568]	; (8001f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f006 fad5 	bl	800830c <HAL_CAN_AddTxMessage>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 8001d68:	f001 f99a 	bl	80030a0 <Error_Handler>
				i=1000;
 8001d6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d70:	60fb      	str	r3, [r7, #12]
				while(i>1) i--;
 8001d72:	e002      	b.n	8001d7a <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	dcf9      	bgt.n	8001d74 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>

				if(Pack_SOC < 100 && flag_Check_SOCawal != 1) {
 8001d80:	4b87      	ldr	r3, [pc, #540]	; (8001fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4987      	ldr	r1, [pc, #540]	; (8001fa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f97a 	bl	8001080 <__aeabi_fcmplt>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00d      	beq.n	8001dae <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
 8001d92:	4b85      	ldr	r3, [pc, #532]	; (8001fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d009      	beq.n	8001dae <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
					Ready_toCharge = 1;
 8001d9a:	4b84      	ldr	r3, [pc, #528]	; (8001fac <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
					flag_Check_SOCawal = 1;
 8001da0:	4b81      	ldr	r3, [pc, #516]	; (8001fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
					oke=9;
 8001da6:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001da8:	2209      	movs	r2, #9
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e015      	b.n	8001dda <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
				}
				else if(Pack_SOC >= 100 && flag_Check_SOCawal != 1) {
 8001dae:	4b7c      	ldr	r3, [pc, #496]	; (8001fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	497c      	ldr	r1, [pc, #496]	; (8001fa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff f977 	bl	80010a8 <__aeabi_fcmpge>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00c      	beq.n	8001dda <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
 8001dc0:	4b79      	ldr	r3, [pc, #484]	; (8001fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d008      	beq.n	8001dda <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
					Ready_toCharge = 0;
 8001dc8:	4b78      	ldr	r3, [pc, #480]	; (8001fac <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
					flag_Check_SOCawal = 1;
 8001dce:	4b76      	ldr	r3, [pc, #472]	; (8001fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
					oke=8;
 8001dd4:	4b76      	ldr	r3, [pc, #472]	; (8001fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	601a      	str	r2, [r3, #0]
				}

			}

			if(Rx_data[6]==0xAA && identified==1){
 8001dda:	4b6a      	ldr	r3, [pc, #424]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001ddc:	799b      	ldrb	r3, [r3, #6]
 8001dde:	2baa      	cmp	r3, #170	; 0xaa
 8001de0:	d127      	bne.n	8001e32 <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 8001de2:	4b6b      	ldr	r3, [pc, #428]	; (8001f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d123      	bne.n	8001e32 <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>

				if(Ready_toCharge == 0 && flag_Check_SOCawal != 0){
 8001dea:	4b70      	ldr	r3, [pc, #448]	; (8001fac <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d115      	bne.n	8001e1e <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
 8001df2:	4b6d      	ldr	r3, [pc, #436]	; (8001fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d011      	beq.n	8001e1e <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
					if(Pack_SOC < 70){
 8001dfa:	4b69      	ldr	r3, [pc, #420]	; (8001fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	496d      	ldr	r1, [pc, #436]	; (8001fb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f93d 	bl	8001080 <__aeabi_fcmplt>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
						Ready_toCharge = 1;
 8001e0c:	4b67      	ldr	r3, [pc, #412]	; (8001fac <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
						oke=10;
 8001e12:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001e14:	220a      	movs	r2, #10
 8001e16:	601a      	str	r2, [r3, #0]
					}
					oke=12;
 8001e18:	4b65      	ldr	r3, [pc, #404]	; (8001fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	601a      	str	r2, [r3, #0]
				}
				Handshaking = 1;
 8001e1e:	4b66      	ldr	r3, [pc, #408]	; (8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
				if(Ready_toCharge == 1) BMS_mode = 2;
 8001e24:	4b61      	ldr	r3, [pc, #388]	; (8001fac <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d102      	bne.n	8001e32 <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 8001e2c:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8001e2e:	2202      	movs	r2, #2
 8001e30:	701a      	strb	r2, [r3, #0]
			}
		}

		if(Rx_Header.StdId==0x1B2 ){	//activate BMS
 8001e32:	4b55      	ldr	r3, [pc, #340]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
 8001e3a:	d153      	bne.n	8001ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>

			if((Rx_data[0]&0x01) == 1)  //without handshake
 8001e3c:	4b51      	ldr	r3, [pc, #324]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d017      	beq.n	8001e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
			{
				oke=3;
 8001e48:	4b59      	ldr	r3, [pc, #356]	; (8001fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	601a      	str	r2, [r3, #0]
				flag_start_shutdown=1;
 8001e4e:	4b5c      	ldr	r3, [pc, #368]	; (8001fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
				BMS_mode=(Rx_data[0]>>1)&0x03;
 8001e54:	4b4b      	ldr	r3, [pc, #300]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4b56      	ldr	r3, [pc, #344]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8001e64:	701a      	strb	r2, [r3, #0]
				Handshaking=1; identified=1;
 8001e66:	4b54      	ldr	r3, [pc, #336]	; (8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	4b48      	ldr	r3, [pc, #288]	; (8001f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
				flag_bypass = 1;
 8001e72:	4b54      	ldr	r3, [pc, #336]	; (8001fc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
			}

			if((Rx_data[7]&0x01) == 1 && Rx_data[1]==0 && Handshaking == 0) //with hs
 8001e78:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001e7a:	79db      	ldrb	r3, [r3, #7]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d010      	beq.n	8001ea6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ae>
 8001e84:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001e86:	785b      	ldrb	r3, [r3, #1]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10c      	bne.n	8001ea6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ae>
 8001e8c:	4b4a      	ldr	r3, [pc, #296]	; (8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d108      	bne.n	8001ea6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ae>
			{
				flag_start_shutdown=1;
 8001e94:	4b4a      	ldr	r3, [pc, #296]	; (8001fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
				BMS_mode=0;
 8001e9a:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
				oke=1;
 8001ea0:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
			}
			if((Rx_data[0]&0x01) == 0 && flag_bypass == 1){
 8001ea6:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d118      	bne.n	8001ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
 8001eb2:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d114      	bne.n	8001ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
				Rx_Header.StdId = 0;
 8001eba:	4b33      	ldr	r3, [pc, #204]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
				Handshaking=0;
 8001ec0:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
				identified=0;
 8001ec6:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
				flag_start_shutdown=0;
 8001ecc:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
				BMS_mode=0;
 8001ed2:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
				BATT_State=STATE_STANDBY;
 8001ed8:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
				flag_bypass = 0;
 8001ede:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
			}
		}

		if(Rx_Header.ExtId == ((0x1B2<<20)|UNIQUE_Code) && Handshaking == 1 ){
 8001ee4:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a38      	ldr	r2, [pc, #224]	; (8001fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d13b      	bne.n	8001f66 <HAL_CAN_RxFifo0MsgPendingCallback+0x26e>
 8001eee:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d137      	bne.n	8001f66 <HAL_CAN_RxFifo0MsgPendingCallback+0x26e>
			if(Rx_data[0]==0 && Rx_data[7]==0) {
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d118      	bne.n	8001f30 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001f00:	79db      	ldrb	r3, [r3, #7]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d114      	bne.n	8001f30 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>
				oke=2;
 8001f06:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001f08:	2202      	movs	r2, #2
 8001f0a:	601a      	str	r2, [r3, #0]
				Rx_Header.ExtId = 0;
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	605a      	str	r2, [r3, #4]
				Handshaking=0;
 8001f12:	4b29      	ldr	r3, [pc, #164]	; (8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
				identified=0;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
				flag_start_shutdown=0;
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
				BMS_mode=0;
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
				BATT_State=STATE_STANDBY;
 8001f2a:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
			}

			Rx_Header.StdId=0;
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
			Clear_Trip_overcurrentdischarge=(Rx_data[0]>>3)&&0x01;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	08db      	lsrs	r3, r3, #3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	bf14      	ite	ne
 8001f42:	2301      	movne	r3, #1
 8001f44:	2300      	moveq	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 8001f4c:	701a      	strb	r2, [r3, #0]
			Clear_Trip_undervoltage=(Rx_data[0]>>4)&&0x01;
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf14      	ite	ne
 8001f5a:	2301      	movne	r3, #1
 8001f5c:	2300      	moveq	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 8001f64:	701a      	strb	r2, [r3, #0]
		}
	}
	Rx_Header.ExtId = 0;
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
	Rx_Header.StdId = 0;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
	memset(Rx_data, 0, 8*sizeof(Rx_data[0]));
 8001f72:	2208      	movs	r2, #8
 8001f74:	2100      	movs	r1, #0
 8001f76:	4803      	ldr	r0, [pc, #12]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001f78:	f009 faee 	bl	800b558 <memset>
}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	200006d4 	.word	0x200006d4
 8001f88:	2000075c 	.word	0x2000075c
 8001f8c:	40011000 	.word	0x40011000
 8001f90:	20000286 	.word	0x20000286
 8001f94:	20000794 	.word	0x20000794
 8001f98:	200006cc 	.word	0x200006cc
 8001f9c:	20000778 	.word	0x20000778
 8001fa0:	20000be4 	.word	0x20000be4
 8001fa4:	42c80000 	.word	0x42c80000
 8001fa8:	20000289 	.word	0x20000289
 8001fac:	20000288 	.word	0x20000288
 8001fb0:	20000280 	.word	0x20000280
 8001fb4:	428c0000 	.word	0x428c0000
 8001fb8:	20000285 	.word	0x20000285
 8001fbc:	20000be0 	.word	0x20000be0
 8001fc0:	20000994 	.word	0x20000994
 8001fc4:	2000028a 	.word	0x2000028a
 8001fc8:	200009b0 	.word	0x200009b0
 8001fcc:	1b2bbbb1 	.word	0x1b2bbbb1
 8001fd0:	20001048 	.word	0x20001048
 8001fd4:	200010ac 	.word	0x200010ac

08001fd8 <BMS_CAN_Config>:


void BMS_CAN_Config()
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
	/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001fea:	2300      	movs	r3, #0
 8001fec:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001ffe:	2301      	movs	r3, #1
 8002000:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8002002:	230e      	movs	r3, #14
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) Error_Handler();
 8002006:	463b      	mov	r3, r7
 8002008:	4619      	mov	r1, r3
 800200a:	4810      	ldr	r0, [pc, #64]	; (800204c <BMS_CAN_Config+0x74>)
 800200c:	f006 f871 	bl	80080f2 <HAL_CAN_ConfigFilter>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <BMS_CAN_Config+0x42>
 8002016:	f001 f843 	bl	80030a0 <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan) != HAL_OK) Error_Handler();
 800201a:	480c      	ldr	r0, [pc, #48]	; (800204c <BMS_CAN_Config+0x74>)
 800201c:	f006 f932 	bl	8008284 <HAL_CAN_Start>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <BMS_CAN_Config+0x52>
 8002026:	f001 f83b 	bl	80030a0 <Error_Handler>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800202a:	2102      	movs	r1, #2
 800202c:	4807      	ldr	r0, [pc, #28]	; (800204c <BMS_CAN_Config+0x74>)
 800202e:	f006 fbd0 	bl	80087d2 <HAL_CAN_ActivateNotification>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <BMS_CAN_Config+0x78>)
 8002034:	2200      	movs	r2, #0
 8002036:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <BMS_CAN_Config+0x78>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_EXT;
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <BMS_CAN_Config+0x78>)
 8002040:	2204      	movs	r2, #4
 8002042:	609a      	str	r2, [r3, #8]
}
 8002044:	bf00      	nop
 8002046:	3728      	adds	r7, #40	; 0x28
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2000082c 	.word	0x2000082c
 8002050:	20000794 	.word	0x20000794

08002054 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002064:	4b3d      	ldr	r3, [pc, #244]	; (800215c <MX_ADC1_Init+0x108>)
 8002066:	4a3e      	ldr	r2, [pc, #248]	; (8002160 <MX_ADC1_Init+0x10c>)
 8002068:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800206a:	4b3c      	ldr	r3, [pc, #240]	; (800215c <MX_ADC1_Init+0x108>)
 800206c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002070:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002072:	4b3a      	ldr	r3, [pc, #232]	; (800215c <MX_ADC1_Init+0x108>)
 8002074:	2201      	movs	r2, #1
 8002076:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002078:	4b38      	ldr	r3, [pc, #224]	; (800215c <MX_ADC1_Init+0x108>)
 800207a:	2200      	movs	r2, #0
 800207c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800207e:	4b37      	ldr	r3, [pc, #220]	; (800215c <MX_ADC1_Init+0x108>)
 8002080:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002084:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002086:	4b35      	ldr	r3, [pc, #212]	; (800215c <MX_ADC1_Init+0x108>)
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 800208c:	4b33      	ldr	r3, [pc, #204]	; (800215c <MX_ADC1_Init+0x108>)
 800208e:	2206      	movs	r2, #6
 8002090:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002092:	4832      	ldr	r0, [pc, #200]	; (800215c <MX_ADC1_Init+0x108>)
 8002094:	f005 fb76 	bl	8007784 <HAL_ADC_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800209e:	f000 ffff 	bl	80030a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80020aa:	2307      	movs	r3, #7
 80020ac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	482a      	ldr	r0, [pc, #168]	; (800215c <MX_ADC1_Init+0x108>)
 80020b4:	f005 fd38 	bl	8007b28 <HAL_ADC_ConfigChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80020be:	f000 ffef 	bl	80030a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80020c2:	2305      	movs	r3, #5
 80020c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020c6:	2302      	movs	r3, #2
 80020c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4823      	ldr	r0, [pc, #140]	; (800215c <MX_ADC1_Init+0x108>)
 80020d0:	f005 fd2a 	bl	8007b28 <HAL_ADC_ConfigChannel>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80020da:	f000 ffe1 	bl	80030a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020de:	2301      	movs	r3, #1
 80020e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80020e2:	2303      	movs	r3, #3
 80020e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	4619      	mov	r1, r3
 80020ea:	481c      	ldr	r0, [pc, #112]	; (800215c <MX_ADC1_Init+0x108>)
 80020ec:	f005 fd1c 	bl	8007b28 <HAL_ADC_ConfigChannel>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80020f6:	f000 ffd3 	bl	80030a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80020fa:	2302      	movs	r3, #2
 80020fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80020fe:	2304      	movs	r3, #4
 8002100:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	4619      	mov	r1, r3
 8002106:	4815      	ldr	r0, [pc, #84]	; (800215c <MX_ADC1_Init+0x108>)
 8002108:	f005 fd0e 	bl	8007b28 <HAL_ADC_ConfigChannel>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002112:	f000 ffc5 	bl	80030a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002116:	2303      	movs	r3, #3
 8002118:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800211a:	2305      	movs	r3, #5
 800211c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800211e:	2306      	movs	r3, #6
 8002120:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	4619      	mov	r1, r3
 8002126:	480d      	ldr	r0, [pc, #52]	; (800215c <MX_ADC1_Init+0x108>)
 8002128:	f005 fcfe 	bl	8007b28 <HAL_ADC_ConfigChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8002132:	f000 ffb5 	bl	80030a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002136:	2304      	movs	r3, #4
 8002138:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800213a:	2306      	movs	r3, #6
 800213c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	4619      	mov	r1, r3
 8002142:	4806      	ldr	r0, [pc, #24]	; (800215c <MX_ADC1_Init+0x108>)
 8002144:	f005 fcf0 	bl	8007b28 <HAL_ADC_ConfigChannel>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800214e:	f000 ffa7 	bl	80030a0 <Error_Handler>
  }

}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200007b8 	.word	0x200007b8
 8002160:	40012400 	.word	0x40012400

08002164 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a28      	ldr	r2, [pc, #160]	; (8002220 <HAL_ADC_MspInit+0xbc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d149      	bne.n	8002218 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002184:	4b27      	ldr	r3, [pc, #156]	; (8002224 <HAL_ADC_MspInit+0xc0>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a26      	ldr	r2, [pc, #152]	; (8002224 <HAL_ADC_MspInit+0xc0>)
 800218a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_ADC_MspInit+0xc0>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_ADC_MspInit+0xc0>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_ADC_MspInit+0xc0>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_ADC_MspInit+0xc0>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80021b4:	233f      	movs	r3, #63	; 0x3f
 80021b6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b8:	2303      	movs	r3, #3
 80021ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	4619      	mov	r1, r3
 80021c2:	4819      	ldr	r0, [pc, #100]	; (8002228 <HAL_ADC_MspInit+0xc4>)
 80021c4:	f007 f86a 	bl	800929c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021ca:	4a19      	ldr	r2, [pc, #100]	; (8002230 <HAL_ADC_MspInit+0xcc>)
 80021cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d4:	4b15      	ldr	r3, [pc, #84]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021dc:	2280      	movs	r2, #128	; 0x80
 80021de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021f2:	2220      	movs	r2, #32
 80021f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021f6:	4b0d      	ldr	r3, [pc, #52]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021fc:	480b      	ldr	r0, [pc, #44]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021fe:	f006 fe39 	bl	8008e74 <HAL_DMA_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002208:	f000 ff4a 	bl	80030a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <HAL_ADC_MspInit+0xc8>)
 8002210:	621a      	str	r2, [r3, #32]
 8002212:	4a06      	ldr	r2, [pc, #24]	; (800222c <HAL_ADC_MspInit+0xc8>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40012400 	.word	0x40012400
 8002224:	40021000 	.word	0x40021000
 8002228:	40010800 	.word	0x40010800
 800222c:	200007e8 	.word	0x200007e8
 8002230:	40020008 	.word	0x40020008

08002234 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <MX_CAN_Init+0x64>)
 800223a:	4a18      	ldr	r2, [pc, #96]	; (800229c <MX_CAN_Init+0x68>)
 800223c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <MX_CAN_Init+0x64>)
 8002240:	2208      	movs	r2, #8
 8002242:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <MX_CAN_Init+0x64>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <MX_CAN_Init+0x64>)
 800224c:	2200      	movs	r2, #0
 800224e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <MX_CAN_Init+0x64>)
 8002252:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002256:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002258:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <MX_CAN_Init+0x64>)
 800225a:	2200      	movs	r2, #0
 800225c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800225e:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <MX_CAN_Init+0x64>)
 8002260:	2200      	movs	r2, #0
 8002262:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <MX_CAN_Init+0x64>)
 8002266:	2201      	movs	r2, #1
 8002268:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <MX_CAN_Init+0x64>)
 800226c:	2200      	movs	r2, #0
 800226e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <MX_CAN_Init+0x64>)
 8002272:	2200      	movs	r2, #0
 8002274:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <MX_CAN_Init+0x64>)
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <MX_CAN_Init+0x64>)
 800227e:	2200      	movs	r2, #0
 8002280:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002282:	4805      	ldr	r0, [pc, #20]	; (8002298 <MX_CAN_Init+0x64>)
 8002284:	f005 fe3a 	bl	8007efc <HAL_CAN_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800228e:	f000 ff07 	bl	80030a0 <Error_Handler>
  }

}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	2000082c 	.word	0x2000082c
 800229c:	40006400 	.word	0x40006400

080022a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a29      	ldr	r2, [pc, #164]	; (8002360 <HAL_CAN_MspInit+0xc0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d14b      	bne.n	8002358 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80022c0:	4b28      	ldr	r3, [pc, #160]	; (8002364 <HAL_CAN_MspInit+0xc4>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	4a27      	ldr	r2, [pc, #156]	; (8002364 <HAL_CAN_MspInit+0xc4>)
 80022c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ca:	61d3      	str	r3, [r2, #28]
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <HAL_CAN_MspInit+0xc4>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <HAL_CAN_MspInit+0xc4>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	4a21      	ldr	r2, [pc, #132]	; (8002364 <HAL_CAN_MspInit+0xc4>)
 80022de:	f043 0308 	orr.w	r3, r3, #8
 80022e2:	6193      	str	r3, [r2, #24]
 80022e4:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <HAL_CAN_MspInit+0xc4>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	4619      	mov	r1, r3
 8002304:	4818      	ldr	r0, [pc, #96]	; (8002368 <HAL_CAN_MspInit+0xc8>)
 8002306:	f006 ffc9 	bl	800929c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800230a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800230e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	4812      	ldr	r0, [pc, #72]	; (8002368 <HAL_CAN_MspInit+0xc8>)
 8002320:	f006 ffbc 	bl	800929c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_CAN_MspInit+0xcc>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <HAL_CAN_MspInit+0xcc>)
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	2014      	movs	r0, #20
 800234e:	f006 fd5a 	bl	8008e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002352:	2014      	movs	r0, #20
 8002354:	f006 fd73 	bl	8008e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002358:	bf00      	nop
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40006400 	.word	0x40006400
 8002364:	40021000 	.word	0x40021000
 8002368:	40010c00 	.word	0x40010c00
 800236c:	40010000 	.word	0x40010000

08002370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <MX_DMA_Init+0x38>)
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <MX_DMA_Init+0x38>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6153      	str	r3, [r2, #20]
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <MX_DMA_Init+0x38>)
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	200b      	movs	r0, #11
 8002394:	f006 fd37 	bl	8008e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002398:	200b      	movs	r0, #11
 800239a:	f006 fd50 	bl	8008e3e <HAL_NVIC_EnableIRQ>

}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000

080023ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c0:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	4a3e      	ldr	r2, [pc, #248]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023c6:	f043 0310 	orr.w	r3, r3, #16
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	4b3c      	ldr	r3, [pc, #240]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a38      	ldr	r2, [pc, #224]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	6193      	str	r3, [r2, #24]
 80023e4:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f0:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a32      	ldr	r2, [pc, #200]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023f6:	f043 0308 	orr.w	r3, r3, #8
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZ_Pin|LED_Pin|GPIO_PIN_5|BAT_CUT_N_Pin, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	f44f 710d 	mov.w	r1, #564	; 0x234
 800240e:	482d      	ldr	r0, [pc, #180]	; (80024c4 <MX_GPIO_Init+0x118>)
 8002410:	f007 f8b5 	bl	800957e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_SPI1_Pin|GPIO_PIN_1|MEM_WP_Pin, GPIO_PIN_RESET);
 8002414:	2200      	movs	r2, #0
 8002416:	f241 0103 	movw	r1, #4099	; 0x1003
 800241a:	482b      	ldr	r0, [pc, #172]	; (80024c8 <MX_GPIO_Init+0x11c>)
 800241c:	f007 f8af 	bl	800957e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002426:	4829      	ldr	r0, [pc, #164]	; (80024cc <MX_GPIO_Init+0x120>)
 8002428:	f007 f8a9 	bl	800957e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIP1_Pin|DIP2_Pin;
 800242c:	2303      	movs	r3, #3
 800242e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002434:	2302      	movs	r3, #2
 8002436:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002438:	f107 0310 	add.w	r3, r7, #16
 800243c:	4619      	mov	r1, r3
 800243e:	4821      	ldr	r0, [pc, #132]	; (80024c4 <MX_GPIO_Init+0x118>)
 8002440:	f006 ff2c 	bl	800929c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PC5 PCPin */
  GPIO_InitStruct.Pin = BUZZ_Pin|LED_Pin|GPIO_PIN_5|BAT_CUT_N_Pin;
 8002444:	f44f 730d 	mov.w	r3, #564	; 0x234
 8002448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244a:	2301      	movs	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2302      	movs	r3, #2
 8002454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002456:	f107 0310 	add.w	r3, r7, #16
 800245a:	4619      	mov	r1, r3
 800245c:	4819      	ldr	r0, [pc, #100]	; (80024c4 <MX_GPIO_Init+0x118>)
 800245e:	f006 ff1d 	bl	800929c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB1 PBPin */
  GPIO_InitStruct.Pin = CS_SPI1_Pin|GPIO_PIN_1|MEM_WP_Pin;
 8002462:	f241 0303 	movw	r3, #4099	; 0x1003
 8002466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002468:	2301      	movs	r3, #1
 800246a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2302      	movs	r3, #2
 8002472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4619      	mov	r1, r3
 800247a:	4813      	ldr	r0, [pc, #76]	; (80024c8 <MX_GPIO_Init+0x11c>)
 800247c:	f006 ff0e 	bl	800929c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002480:	2304      	movs	r3, #4
 8002482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 0310 	add.w	r3, r7, #16
 8002490:	4619      	mov	r1, r3
 8002492:	480d      	ldr	r0, [pc, #52]	; (80024c8 <MX_GPIO_Init+0x11c>)
 8002494:	f006 ff02 	bl	800929c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BAT_CUT_P_Pin;
 8002498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800249c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249e:	2301      	movs	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAT_CUT_P_GPIO_Port, &GPIO_InitStruct);
 80024aa:	f107 0310 	add.w	r3, r7, #16
 80024ae:	4619      	mov	r1, r3
 80024b0:	4806      	ldr	r0, [pc, #24]	; (80024cc <MX_GPIO_Init+0x120>)
 80024b2:	f006 fef3 	bl	800929c <HAL_GPIO_Init>

}
 80024b6:	bf00      	nop
 80024b8:	3720      	adds	r7, #32
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40011000 	.word	0x40011000
 80024c8:	40010c00 	.word	0x40010c00
 80024cc:	40010800 	.word	0x40010800

080024d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <MX_I2C1_Init+0x50>)
 80024d6:	4a13      	ldr	r2, [pc, #76]	; (8002524 <MX_I2C1_Init+0x54>)
 80024d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <MX_I2C1_Init+0x50>)
 80024dc:	4a12      	ldr	r2, [pc, #72]	; (8002528 <MX_I2C1_Init+0x58>)
 80024de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <MX_I2C1_Init+0x50>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <MX_I2C1_Init+0x50>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <MX_I2C1_Init+0x50>)
 80024ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <MX_I2C1_Init+0x50>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <MX_I2C1_Init+0x50>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <MX_I2C1_Init+0x50>)
 8002502:	2200      	movs	r2, #0
 8002504:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <MX_I2C1_Init+0x50>)
 8002508:	2200      	movs	r2, #0
 800250a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <MX_I2C1_Init+0x50>)
 800250e:	f007 f867 	bl	80095e0 <HAL_I2C_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002518:	f000 fdc2 	bl	80030a0 <Error_Handler>
  }

}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000854 	.word	0x20000854
 8002524:	40005400 	.word	0x40005400
 8002528:	00061a80 	.word	0x00061a80

0800252c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8002530:	4b12      	ldr	r3, [pc, #72]	; (800257c <MX_I2C2_Init+0x50>)
 8002532:	4a13      	ldr	r2, [pc, #76]	; (8002580 <MX_I2C2_Init+0x54>)
 8002534:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <MX_I2C2_Init+0x50>)
 8002538:	4a12      	ldr	r2, [pc, #72]	; (8002584 <MX_I2C2_Init+0x58>)
 800253a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <MX_I2C2_Init+0x50>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_I2C2_Init+0x50>)
 8002544:	2200      	movs	r2, #0
 8002546:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <MX_I2C2_Init+0x50>)
 800254a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800254e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002550:	4b0a      	ldr	r3, [pc, #40]	; (800257c <MX_I2C2_Init+0x50>)
 8002552:	2200      	movs	r2, #0
 8002554:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_I2C2_Init+0x50>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <MX_I2C2_Init+0x50>)
 800255e:	2200      	movs	r2, #0
 8002560:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_I2C2_Init+0x50>)
 8002564:	2200      	movs	r2, #0
 8002566:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002568:	4804      	ldr	r0, [pc, #16]	; (800257c <MX_I2C2_Init+0x50>)
 800256a:	f007 f839 	bl	80095e0 <HAL_I2C_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002574:	f000 fd94 	bl	80030a0 <Error_Handler>
  }

}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	200008a8 	.word	0x200008a8
 8002580:	40005800 	.word	0x40005800
 8002584:	000186a0 	.word	0x000186a0

08002588 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 0318 	add.w	r3, r7, #24
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2b      	ldr	r2, [pc, #172]	; (8002650 <HAL_I2C_MspInit+0xc8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d124      	bne.n	80025f2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a8:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4a29      	ldr	r2, [pc, #164]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	6193      	str	r3, [r2, #24]
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025c0:	23c0      	movs	r3, #192	; 0xc0
 80025c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c4:	2312      	movs	r3, #18
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025cc:	f107 0318 	add.w	r3, r7, #24
 80025d0:	4619      	mov	r1, r3
 80025d2:	4821      	ldr	r0, [pc, #132]	; (8002658 <HAL_I2C_MspInit+0xd0>)
 80025d4:	f006 fe62 	bl	800929c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 80025de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025e2:	61d3      	str	r3, [r2, #28]
 80025e4:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80025f0:	e029      	b.n	8002646 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_I2C_MspInit+0xd4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d124      	bne.n	8002646 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a14      	ldr	r2, [pc, #80]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002614:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800261a:	2312      	movs	r3, #18
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800261e:	2303      	movs	r3, #3
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002622:	f107 0318 	add.w	r3, r7, #24
 8002626:	4619      	mov	r1, r3
 8002628:	480b      	ldr	r0, [pc, #44]	; (8002658 <HAL_I2C_MspInit+0xd0>)
 800262a:	f006 fe37 	bl	800929c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4a08      	ldr	r2, [pc, #32]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 8002634:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002638:	61d3      	str	r3, [r2, #28]
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
}
 8002646:	bf00      	nop
 8002648:	3728      	adds	r7, #40	; 0x28
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40005400 	.word	0x40005400
 8002654:	40021000 	.word	0x40021000
 8002658:	40010c00 	.word	0x40010c00
 800265c:	40005800 	.word	0x40005800

08002660 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <MX_IWDG_Init+0x2c>)
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <MX_IWDG_Init+0x30>)
 8002668:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <MX_IWDG_Init+0x2c>)
 800266c:	2205      	movs	r2, #5
 800266e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <MX_IWDG_Init+0x2c>)
 8002672:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002676:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002678:	4804      	ldr	r0, [pc, #16]	; (800268c <MX_IWDG_Init+0x2c>)
 800267a:	f007 fd1d 	bl	800a0b8 <HAL_IWDG_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002684:	f000 fd0c 	bl	80030a0 <Error_Handler>
  }

}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200008fc 	.word	0x200008fc
 8002690:	40003000 	.word	0x40003000
 8002694:	00000000 	.word	0x00000000

08002698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800269c:	f004 ffee 	bl	800767c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026a0:	f000 f8f0 	bl	8002884 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //BMS_CAN_Config();
   HAL_FLASH_Unlock();
 80026a4:	f006 fdd4 	bl	8009250 <HAL_FLASH_Unlock>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026a8:	f7ff fe80 	bl	80023ac <MX_GPIO_Init>
  MX_DMA_Init();
 80026ac:	f7ff fe60 	bl	8002370 <MX_DMA_Init>
  MX_ADC1_Init();
 80026b0:	f7ff fcd0 	bl	8002054 <MX_ADC1_Init>
  MX_CAN_Init();
 80026b4:	f7ff fdbe 	bl	8002234 <MX_CAN_Init>
  MX_I2C2_Init();
 80026b8:	f7ff ff38 	bl	800252c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80026bc:	f004 fec8 	bl	8007450 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80026c0:	f004 fef0 	bl	80074a4 <MX_USART3_UART_Init>
  MX_IWDG_Init();
 80026c4:	f7ff ffcc 	bl	8002660 <MX_IWDG_Init>
  MX_TIM2_Init();
 80026c8:	f004 fde8 	bl	800729c <MX_TIM2_Init>
  MX_TIM3_Init();
 80026cc:	f004 fe32 	bl	8007334 <MX_TIM3_Init>
  MX_I2C1_Init();
 80026d0:	f7ff fefe 	bl	80024d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //USART3 untuk RS485, tidak digunakan untuk BOARD v1.

  ltc6812_GPIO_Config();
 80026d4:	f000 fcea 	bl	80030ac <ltc6812_GPIO_Config>
  ltc6812_SPIInit();
 80026d8:	f000 fd44 	bl	8003164 <ltc6812_SPIInit>

  HAL_Delay(10);
 80026dc:	200a      	movs	r0, #10
 80026de:	f005 f82f 	bl	8007740 <HAL_Delay>
  read_v_15cell(vcell_15data_digi, vcell_15data);
 80026e2:	495b      	ldr	r1, [pc, #364]	; (8002850 <main+0x1b8>)
 80026e4:	485b      	ldr	r0, [pc, #364]	; (8002854 <main+0x1bc>)
 80026e6:	f000 ff63 	bl	80035b0 <read_v_15cell>
  for(ij=0,v_cell_tot=0;ij<15;ij++)
 80026ea:	4b5b      	ldr	r3, [pc, #364]	; (8002858 <main+0x1c0>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	4b5a      	ldr	r3, [pc, #360]	; (800285c <main+0x1c4>)
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e013      	b.n	8002722 <main+0x8a>
  {
 	v_cell_tot+=vcell_15data[ij];
 80026fa:	4b57      	ldr	r3, [pc, #348]	; (8002858 <main+0x1c0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a54      	ldr	r2, [pc, #336]	; (8002850 <main+0x1b8>)
 8002700:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002704:	4b55      	ldr	r3, [pc, #340]	; (800285c <main+0x1c4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4619      	mov	r1, r3
 800270a:	4610      	mov	r0, r2
 800270c:	f7fe fa12 	bl	8000b34 <__addsf3>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	4b51      	ldr	r3, [pc, #324]	; (800285c <main+0x1c4>)
 8002716:	601a      	str	r2, [r3, #0]
  for(ij=0,v_cell_tot=0;ij<15;ij++)
 8002718:	4b4f      	ldr	r3, [pc, #316]	; (8002858 <main+0x1c0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	4a4e      	ldr	r2, [pc, #312]	; (8002858 <main+0x1c0>)
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	4b4d      	ldr	r3, [pc, #308]	; (8002858 <main+0x1c0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b0e      	cmp	r3, #14
 8002728:	dde7      	ble.n	80026fa <main+0x62>
  }
  HAL_Delay(10);
 800272a:	200a      	movs	r0, #10
 800272c:	f005 f808 	bl	8007740 <HAL_Delay>

  BMS_CAN_Config();
 8002730:	f7ff fc52 	bl	8001fd8 <BMS_CAN_Config>

  BMS_ON_InitBeep();
 8002734:	f000 f900 	bl	8002938 <BMS_ON_InitBeep>

  BATT_Start_Up=1;
 8002738:	4b49      	ldr	r3, [pc, #292]	; (8002860 <main+0x1c8>)
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]

  HAL_Delay(1000);
 800273e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002742:	f004 fffd 	bl	8007740 <HAL_Delay>

  flag_start_shutdown=0;
 8002746:	4b47      	ldr	r3, [pc, #284]	; (8002864 <main+0x1cc>)
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(DIP1 && !DIP2)			BMS_ScreenMode_ForceBalance();		//Mode Force Balancing
 800274c:	2101      	movs	r1, #1
 800274e:	4846      	ldr	r0, [pc, #280]	; (8002868 <main+0x1d0>)
 8002750:	f006 fefe 	bl	8009550 <HAL_GPIO_ReadPin>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <main+0xd6>
 800275a:	2102      	movs	r1, #2
 800275c:	4842      	ldr	r0, [pc, #264]	; (8002868 <main+0x1d0>)
 800275e:	f006 fef7 	bl	8009550 <HAL_GPIO_ReadPin>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <main+0xd6>
 8002768:	f000 fc12 	bl	8002f90 <BMS_ScreenMode_ForceBalance>
 800276c:	e023      	b.n	80027b6 <main+0x11e>
	  else if(!DIP1 && DIP2) 	BMS_ScreenMode_Locked_Ship();		//Mode Shipping
 800276e:	2101      	movs	r1, #1
 8002770:	483d      	ldr	r0, [pc, #244]	; (8002868 <main+0x1d0>)
 8002772:	f006 feed 	bl	8009550 <HAL_GPIO_ReadPin>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d109      	bne.n	8002790 <main+0xf8>
 800277c:	2102      	movs	r1, #2
 800277e:	483a      	ldr	r0, [pc, #232]	; (8002868 <main+0x1d0>)
 8002780:	f006 fee6 	bl	8009550 <HAL_GPIO_ReadPin>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <main+0xf8>
 800278a:	f000 fbbb 	bl	8002f04 <BMS_ScreenMode_Locked_Ship>
 800278e:	e012      	b.n	80027b6 <main+0x11e>
	  else if(DIP1 && DIP2)		BMS_ScreenMode_RUN();				//MODE RUN
 8002790:	2101      	movs	r1, #1
 8002792:	4835      	ldr	r0, [pc, #212]	; (8002868 <main+0x1d0>)
 8002794:	f006 fedc 	bl	8009550 <HAL_GPIO_ReadPin>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <main+0x11a>
 800279e:	2102      	movs	r1, #2
 80027a0:	4831      	ldr	r0, [pc, #196]	; (8002868 <main+0x1d0>)
 80027a2:	f006 fed5 	bl	8009550 <HAL_GPIO_ReadPin>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <main+0x11a>
 80027ac:	f000 f99e 	bl	8002aec <BMS_ScreenMode_RUN>
 80027b0:	e001      	b.n	80027b6 <main+0x11e>
	  else						BMS_ScreenMode_Standby();			//Mode Standby
 80027b2:	f000 f96b 	bl	8002a8c <BMS_ScreenMode_Standby>

	  HAL_IWDG_Refresh(&hiwdg);
 80027b6:	482d      	ldr	r0, [pc, #180]	; (800286c <main+0x1d4>)
 80027b8:	f007 fcb7 	bl	800a12a <HAL_IWDG_Refresh>
	  read_v_15cell(vcell_15data_digi, vcell_15data);
 80027bc:	4924      	ldr	r1, [pc, #144]	; (8002850 <main+0x1b8>)
 80027be:	4825      	ldr	r0, [pc, #148]	; (8002854 <main+0x1bc>)
 80027c0:	f000 fef6 	bl	80035b0 <read_v_15cell>

	  if(flag_start_shutdown==1)
 80027c4:	4b27      	ldr	r3, [pc, #156]	; (8002864 <main+0x1cc>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d135      	bne.n	8002838 <main+0x1a0>
	  {
		  	  //Read voltage of each cell (15cell)
		  	  if(BATT_State==STATE_CHARGE)
 80027cc:	4b28      	ldr	r3, [pc, #160]	; (8002870 <main+0x1d8>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d003      	beq.n	80027dc <main+0x144>
		  	  {
		  		 // LTC681x_MUTE_UNMUTE_emul(1);
//		  		  read_v_15cell(vcell_15data_digi, vcell_15data);
		  		  //LTC681x_MUTE_UNMUTE_emul(0);
		  	  }
		  	  else read_v_15cell(vcell_15data_digi, vcell_15data);
 80027d4:	491e      	ldr	r1, [pc, #120]	; (8002850 <main+0x1b8>)
 80027d6:	481f      	ldr	r0, [pc, #124]	; (8002854 <main+0x1bc>)
 80027d8:	f000 feea 	bl	80035b0 <read_v_15cell>

		  	  //Get Balancing Data
		  	  get_balance_status(vcell_15data);
 80027dc:	481c      	ldr	r0, [pc, #112]	; (8002850 <main+0x1b8>)
 80027de:	f001 fcb3 	bl	8004148 <get_balance_status>

		  	  // Balancing Process
		  	  if((IBATT<-0.1 && (v_cell_tot>VBATT_BALANCE_START)) || Flag_Force_Balance==1)     //arus charging 0.1 tidak perlu di balancing
 80027e2:	4b24      	ldr	r3, [pc, #144]	; (8002874 <main+0x1dc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fd fe1e 	bl	8000428 <__aeabi_f2d>
 80027ec:	a316      	add	r3, pc, #88	; (adr r3, 8002848 <main+0x1b0>)
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	f7fe f8e3 	bl	80009bc <__aeabi_dcmplt>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <main+0x176>
 80027fc:	4b17      	ldr	r3, [pc, #92]	; (800285c <main+0x1c4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	491d      	ldr	r1, [pc, #116]	; (8002878 <main+0x1e0>)
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fc5a 	bl	80010bc <__aeabi_fcmpgt>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d103      	bne.n	8002816 <main+0x17e>
 800280e:	4b1b      	ldr	r3, [pc, #108]	; (800287c <main+0x1e4>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d104      	bne.n	8002820 <main+0x188>
		  	  {
		  		  LTC681x_balance_cell(2052);
 8002816:	f640 0004 	movw	r0, #2052	; 0x804
 800281a:	f001 fc29 	bl	8004070 <LTC681x_balance_cell>
 800281e:	e005      	b.n	800282c <main+0x194>
		  	  }
		  	  else
		  	  {
		  			balance_status=0;
 8002820:	4b17      	ldr	r3, [pc, #92]	; (8002880 <main+0x1e8>)
 8002822:	2200      	movs	r2, #0
 8002824:	801a      	strh	r2, [r3, #0]
		  			LTC681x_balance_cell(0x0000);
 8002826:	2000      	movs	r0, #0
 8002828:	f001 fc22 	bl	8004070 <LTC681x_balance_cell>
		  	  }

		  	  //Calculate total Battery Voltage
		  	  Calc_vcell_tot();
 800282c:	f000 fc06 	bl	800303c <Calc_vcell_tot>

			  //Mark that System operating
			  HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8002830:	2110      	movs	r1, #16
 8002832:	480d      	ldr	r0, [pc, #52]	; (8002868 <main+0x1d0>)
 8002834:	f006 febb 	bl	80095ae <HAL_GPIO_TogglePin>
	  }

	  HAL_IWDG_Refresh(&hiwdg);
 8002838:	480c      	ldr	r0, [pc, #48]	; (800286c <main+0x1d4>)
 800283a:	f007 fc76 	bl	800a12a <HAL_IWDG_Refresh>
	  HAL_Delay(1);
 800283e:	2001      	movs	r0, #1
 8002840:	f004 ff7e 	bl	8007740 <HAL_Delay>
	  if(DIP1 && !DIP2)			BMS_ScreenMode_ForceBalance();		//Mode Force Balancing
 8002844:	e782      	b.n	800274c <main+0xb4>
 8002846:	bf00      	nop
 8002848:	9999999a 	.word	0x9999999a
 800284c:	bfb99999 	.word	0xbfb99999
 8002850:	20000958 	.word	0x20000958
 8002854:	20000938 	.word	0x20000938
 8002858:	20000908 	.word	0x20000908
 800285c:	20000bbc 	.word	0x20000bbc
 8002860:	2000028b 	.word	0x2000028b
 8002864:	20000994 	.word	0x20000994
 8002868:	40011000 	.word	0x40011000
 800286c:	200008fc 	.word	0x200008fc
 8002870:	200009b0 	.word	0x200009b0
 8002874:	20001058 	.word	0x20001058
 8002878:	425c0000 	.word	0x425c0000
 800287c:	20000bc0 	.word	0x20000bc0
 8002880:	20000bee 	.word	0x20000bee

08002884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b094      	sub	sp, #80	; 0x50
 8002888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800288a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800288e:	2228      	movs	r2, #40	; 0x28
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f008 fe60 	bl	800b558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80028b4:	230a      	movs	r3, #10
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028b8:	2301      	movs	r3, #1
 80028ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028bc:	2310      	movs	r3, #16
 80028be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80028c0:	2301      	movs	r3, #1
 80028c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028c4:	2302      	movs	r3, #2
 80028c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80028c8:	2300      	movs	r3, #0
 80028ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80028cc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80028d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028d6:	4618      	mov	r0, r3
 80028d8:	f007 fc36 	bl	800a148 <HAL_RCC_OscConfig>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80028e2:	f000 fbdd 	bl	80030a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028e6:	230f      	movs	r3, #15
 80028e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ea:	2302      	movs	r3, #2
 80028ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028f8:	2300      	movs	r3, #0
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2102      	movs	r1, #2
 8002902:	4618      	mov	r0, r3
 8002904:	f007 fea0 	bl	800a648 <HAL_RCC_ClockConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800290e:	f000 fbc7 	bl	80030a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002912:	2302      	movs	r3, #2
 8002914:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800291a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	4618      	mov	r0, r3
 8002920:	f008 f82e 	bl	800a980 <HAL_RCCEx_PeriphCLKConfig>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800292a:	f000 fbb9 	bl	80030a0 <Error_Handler>
  }
}
 800292e:	bf00      	nop
 8002930:	3750      	adds	r7, #80	; 0x50
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <BMS_ON_InitBeep>:

/* USER CODE BEGIN 4 */
void BMS_ON_InitBeep(void)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
	itoa(UNIQUE_Code, lower_UNIQUE_Code, 16);
 800293e:	2210      	movs	r2, #16
 8002940:	4945      	ldr	r1, [pc, #276]	; (8002a58 <BMS_ON_InitBeep+0x120>)
 8002942:	4846      	ldr	r0, [pc, #280]	; (8002a5c <BMS_ON_InitBeep+0x124>)
 8002944:	f008 fde6 	bl	800b514 <itoa>
	int ii=0;
 8002948:	2300      	movs	r3, #0
 800294a:	607b      	str	r3, [r7, #4]
	while(ii<6){
 800294c:	e01c      	b.n	8002988 <BMS_ON_InitBeep+0x50>
		UPPER_UNIQUE_Code[ii] = toupper(lower_UNIQUE_Code[ii]);
 800294e:	4a42      	ldr	r2, [pc, #264]	; (8002a58 <BMS_ON_InitBeep+0x120>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4413      	add	r3, r2
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	70fb      	strb	r3, [r7, #3]
 8002958:	f008 fdde 	bl	800b518 <__locale_ctype_ptr>
 800295c:	4602      	mov	r2, r0
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	3301      	adds	r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d102      	bne.n	8002974 <BMS_ON_InitBeep+0x3c>
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	3b20      	subs	r3, #32
 8002972:	e000      	b.n	8002976 <BMS_ON_InitBeep+0x3e>
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	b2d9      	uxtb	r1, r3
 8002978:	4a39      	ldr	r2, [pc, #228]	; (8002a60 <BMS_ON_InitBeep+0x128>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	460a      	mov	r2, r1
 8002980:	701a      	strb	r2, [r3, #0]
		ii++;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3301      	adds	r3, #1
 8002986:	607b      	str	r3, [r7, #4]
	while(ii<6){
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b05      	cmp	r3, #5
 800298c:	dddf      	ble.n	800294e <BMS_ON_InitBeep+0x16>
	}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc_val, 6);
 800298e:	2206      	movs	r2, #6
 8002990:	4934      	ldr	r1, [pc, #208]	; (8002a64 <BMS_ON_InitBeep+0x12c>)
 8002992:	4835      	ldr	r0, [pc, #212]	; (8002a68 <BMS_ON_InitBeep+0x130>)
 8002994:	f004 ffce 	bl	8007934 <HAL_ADC_Start_DMA>

	SSD1306_Init();
 8002998:	f001 fc8a 	bl	80042b0 <SSD1306_Init>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800299c:	2000      	movs	r0, #0
 800299e:	f001 fd73 	bl	8004488 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80029a2:	f001 fd43 	bl	800442c <SSD1306_UpdateScreen>

	HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 80029a6:	2201      	movs	r2, #1
 80029a8:	2104      	movs	r1, #4
 80029aa:	4830      	ldr	r0, [pc, #192]	; (8002a6c <BMS_ON_InitBeep+0x134>)
 80029ac:	f006 fde7 	bl	800957e <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80029b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029b4:	f004 fec4 	bl	8007740 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80029b8:	2104      	movs	r1, #4
 80029ba:	482c      	ldr	r0, [pc, #176]	; (8002a6c <BMS_ON_InitBeep+0x134>)
 80029bc:	f006 fdf7 	bl	80095ae <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80029c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029c4:	f004 febc 	bl	8007740 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80029c8:	2104      	movs	r1, #4
 80029ca:	4828      	ldr	r0, [pc, #160]	; (8002a6c <BMS_ON_InitBeep+0x134>)
 80029cc:	f006 fdef 	bl	80095ae <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80029d0:	2064      	movs	r0, #100	; 0x64
 80029d2:	f004 feb5 	bl	8007740 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80029d6:	2104      	movs	r1, #4
 80029d8:	4824      	ldr	r0, [pc, #144]	; (8002a6c <BMS_ON_InitBeep+0x134>)
 80029da:	f006 fde8 	bl	80095ae <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80029de:	2064      	movs	r0, #100	; 0x64
 80029e0:	f004 feae 	bl	8007740 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80029e4:	2104      	movs	r1, #4
 80029e6:	4821      	ldr	r0, [pc, #132]	; (8002a6c <BMS_ON_InitBeep+0x134>)
 80029e8:	f006 fde1 	bl	80095ae <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80029ec:	2064      	movs	r0, #100	; 0x64
 80029ee:	f004 fea7 	bl	8007740 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80029f2:	2104      	movs	r1, #4
 80029f4:	481d      	ldr	r0, [pc, #116]	; (8002a6c <BMS_ON_InitBeep+0x134>)
 80029f6:	f006 fdda 	bl	80095ae <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80029fa:	2064      	movs	r0, #100	; 0x64
 80029fc:	f004 fea0 	bl	8007740 <HAL_Delay>

	sprintf(pesan,"BMS - Gen.V2");
 8002a00:	4a1b      	ldr	r2, [pc, #108]	; (8002a70 <BMS_ON_InitBeep+0x138>)
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <BMS_ON_InitBeep+0x13c>)
 8002a04:	4614      	mov	r4, r2
 8002a06:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002a08:	6020      	str	r0, [r4, #0]
 8002a0a:	6061      	str	r1, [r4, #4]
 8002a0c:	60a2      	str	r2, [r4, #8]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	7323      	strb	r3, [r4, #12]
	SSD1306_GotoXY(5,0);
 8002a12:	2100      	movs	r1, #0
 8002a14:	2005      	movs	r0, #5
 8002a16:	f001 fdad 	bl	8004574 <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	4916      	ldr	r1, [pc, #88]	; (8002a78 <BMS_ON_InitBeep+0x140>)
 8002a1e:	4814      	ldr	r0, [pc, #80]	; (8002a70 <BMS_ON_InitBeep+0x138>)
 8002a20:	f001 fe3e 	bl	80046a0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002a24:	f001 fd02 	bl	800442c <SSD1306_UpdateScreen>

	HAL_TIM_Base_Start_IT(&htim2);
 8002a28:	4814      	ldr	r0, [pc, #80]	; (8002a7c <BMS_ON_InitBeep+0x144>)
 8002a2a:	f008 f8af 	bl	800ab8c <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 8002a2e:	4814      	ldr	r0, [pc, #80]	; (8002a80 <BMS_ON_InitBeep+0x148>)
 8002a30:	f008 f8ac 	bl	800ab8c <HAL_TIM_Base_Start_IT>

	HAL_Delay(1000);
 8002a34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a38:	f004 fe82 	bl	8007740 <HAL_Delay>

	BATT_State=STATE_STANDBY;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <BMS_ON_InitBeep+0x14c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
	Batt_Open_Mode();
 8002a42:	f7fe fcb7 	bl	80013b4 <Batt_Open_Mode>
	AH_Total=0;
 8002a46:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <BMS_ON_InitBeep+0x150>)
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]


}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd90      	pop	{r4, r7, pc}
 8002a56:	bf00      	nop
 8002a58:	2000099c 	.word	0x2000099c
 8002a5c:	000bbbb1 	.word	0x000bbbb1
 8002a60:	20000920 	.word	0x20000920
 8002a64:	2000090c 	.word	0x2000090c
 8002a68:	200007b8 	.word	0x200007b8
 8002a6c:	40011000 	.word	0x40011000
 8002a70:	20000bc4 	.word	0x20000bc4
 8002a74:	0800dac8 	.word	0x0800dac8
 8002a78:	20000008 	.word	0x20000008
 8002a7c:	200014f8 	.word	0x200014f8
 8002a80:	200014b0 	.word	0x200014b0
 8002a84:	200009b0 	.word	0x200009b0
 8002a88:	20000698 	.word	0x20000698

08002a8c <BMS_ScreenMode_Standby>:

void BMS_ScreenMode_Standby(void)
{
 8002a8c:	b598      	push	{r3, r4, r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
	 Flag_Battery_Locked_for_Ship=0;
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <BMS_ScreenMode_Standby+0x4c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
	 Flag_Force_Balance=0;
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <BMS_ScreenMode_Standby+0x50>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]


	 SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f001 fcf3 	bl	8004488 <SSD1306_Fill>
	 sprintf(pesan,"BMS - Gen.V2");
 8002aa2:	4a0f      	ldr	r2, [pc, #60]	; (8002ae0 <BMS_ScreenMode_Standby+0x54>)
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <BMS_ScreenMode_Standby+0x58>)
 8002aa6:	4614      	mov	r4, r2
 8002aa8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002aaa:	6020      	str	r0, [r4, #0]
 8002aac:	6061      	str	r1, [r4, #4]
 8002aae:	60a2      	str	r2, [r4, #8]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	7323      	strb	r3, [r4, #12]
	 SSD1306_GotoXY(20,28);
 8002ab4:	211c      	movs	r1, #28
 8002ab6:	2014      	movs	r0, #20
 8002ab8:	f001 fd5c 	bl	8004574 <SSD1306_GotoXY>
	 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002abc:	2201      	movs	r2, #1
 8002abe:	490a      	ldr	r1, [pc, #40]	; (8002ae8 <BMS_ScreenMode_Standby+0x5c>)
 8002ac0:	4807      	ldr	r0, [pc, #28]	; (8002ae0 <BMS_ScreenMode_Standby+0x54>)
 8002ac2:	f001 fded 	bl	80046a0 <SSD1306_Puts>
	 SSD1306_UpdateScreen();
 8002ac6:	f001 fcb1 	bl	800442c <SSD1306_UpdateScreen>
	 Batt_Open_Mode();
 8002aca:	f7fe fc73 	bl	80013b4 <Batt_Open_Mode>

	 HAL_Delay(1);
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f004 fe36 	bl	8007740 <HAL_Delay>
}
 8002ad4:	bf00      	nop
 8002ad6:	bd98      	pop	{r3, r4, r7, pc}
 8002ad8:	20000934 	.word	0x20000934
 8002adc:	20000bc0 	.word	0x20000bc0
 8002ae0:	20000bc4 	.word	0x20000bc4
 8002ae4:	0800dac8 	.word	0x0800dac8
 8002ae8:	20000008 	.word	0x20000008

08002aec <BMS_ScreenMode_RUN>:

void BMS_ScreenMode_RUN(void)
{
 8002aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af0:	b087      	sub	sp, #28
 8002af2:	af06      	add	r7, sp, #24
	Flag_Battery_Locked_for_Ship=0;
 8002af4:	4b55      	ldr	r3, [pc, #340]	; (8002c4c <BMS_ScreenMode_RUN+0x160>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
	Flag_Force_Balance=0;
 8002afa:	4b55      	ldr	r3, [pc, #340]	; (8002c50 <BMS_ScreenMode_RUN+0x164>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]

	if(flag_start_shutdown==0)
 8002b00:	4b54      	ldr	r3, [pc, #336]	; (8002c54 <BMS_ScreenMode_RUN+0x168>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d158      	bne.n	8002bba <BMS_ScreenMode_RUN+0xce>
	{
		 SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f001 fcbd 	bl	8004488 <SSD1306_Fill>
			 sprintf(pesan,"BMS - Gen.V2 - RUN");
 8002b0e:	4a52      	ldr	r2, [pc, #328]	; (8002c58 <BMS_ScreenMode_RUN+0x16c>)
 8002b10:	4b52      	ldr	r3, [pc, #328]	; (8002c5c <BMS_ScreenMode_RUN+0x170>)
 8002b12:	4615      	mov	r5, r2
 8002b14:	461c      	mov	r4, r3
 8002b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b18:	6028      	str	r0, [r5, #0]
 8002b1a:	6069      	str	r1, [r5, #4]
 8002b1c:	60aa      	str	r2, [r5, #8]
 8002b1e:	60eb      	str	r3, [r5, #12]
 8002b20:	8823      	ldrh	r3, [r4, #0]
 8002b22:	78a2      	ldrb	r2, [r4, #2]
 8002b24:	822b      	strh	r3, [r5, #16]
 8002b26:	4613      	mov	r3, r2
 8002b28:	74ab      	strb	r3, [r5, #18]
			 SSD1306_GotoXY(0,18);
 8002b2a:	2112      	movs	r1, #18
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f001 fd21 	bl	8004574 <SSD1306_GotoXY>
			 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002b32:	2201      	movs	r2, #1
 8002b34:	494a      	ldr	r1, [pc, #296]	; (8002c60 <BMS_ScreenMode_RUN+0x174>)
 8002b36:	4848      	ldr	r0, [pc, #288]	; (8002c58 <BMS_ScreenMode_RUN+0x16c>)
 8002b38:	f001 fdb2 	bl	80046a0 <SSD1306_Puts>

			 sprintf(pesan,"SLEEP_STATE");
 8002b3c:	4a46      	ldr	r2, [pc, #280]	; (8002c58 <BMS_ScreenMode_RUN+0x16c>)
 8002b3e:	4b49      	ldr	r3, [pc, #292]	; (8002c64 <BMS_ScreenMode_RUN+0x178>)
 8002b40:	4614      	mov	r4, r2
 8002b42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b44:	6020      	str	r0, [r4, #0]
 8002b46:	6061      	str	r1, [r4, #4]
 8002b48:	60a2      	str	r2, [r4, #8]
			 SSD1306_GotoXY(0,38);
 8002b4a:	2126      	movs	r1, #38	; 0x26
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f001 fd11 	bl	8004574 <SSD1306_GotoXY>
			 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002b52:	2201      	movs	r2, #1
 8002b54:	4942      	ldr	r1, [pc, #264]	; (8002c60 <BMS_ScreenMode_RUN+0x174>)
 8002b56:	4840      	ldr	r0, [pc, #256]	; (8002c58 <BMS_ScreenMode_RUN+0x16c>)
 8002b58:	f001 fda2 	bl	80046a0 <SSD1306_Puts>
			 SSD1306_UpdateScreen();
 8002b5c:	f001 fc66 	bl	800442c <SSD1306_UpdateScreen>
			 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002b60:	2200      	movs	r2, #0
 8002b62:	2110      	movs	r1, #16
 8002b64:	4840      	ldr	r0, [pc, #256]	; (8002c68 <BMS_ScreenMode_RUN+0x17c>)
 8002b66:	f006 fd0a 	bl	800957e <HAL_GPIO_WritePin>
			 Batt_Open_Mode();
 8002b6a:	f7fe fc23 	bl	80013b4 <Batt_Open_Mode>
			 flag_trip_overtemperature=OFF;
 8002b6e:	4b3f      	ldr	r3, [pc, #252]	; (8002c6c <BMS_ScreenMode_RUN+0x180>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
			 flag_trip_undertemperature=OFF;
 8002b74:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <BMS_ScreenMode_RUN+0x184>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
			 flag_trip_SOCOverDischarge=OFF;
 8002b7a:	4b3e      	ldr	r3, [pc, #248]	; (8002c74 <BMS_ScreenMode_RUN+0x188>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
			 flag_trip_SOCOverCharge=OFF;			//di tiada kan..!
 8002b80:	4b3d      	ldr	r3, [pc, #244]	; (8002c78 <BMS_ScreenMode_RUN+0x18c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
			 flag_trip_undervoltage=OFF;
 8002b86:	4b3d      	ldr	r3, [pc, #244]	; (8002c7c <BMS_ScreenMode_RUN+0x190>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
			 flag_trip_overvoltage=OFF;
 8002b8c:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <BMS_ScreenMode_RUN+0x194>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
			 flag_trip_overcurrentdischarge=OFF;
 8002b92:	4b3c      	ldr	r3, [pc, #240]	; (8002c84 <BMS_ScreenMode_RUN+0x198>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
			 flag_trip_overcurrentcharge=OFF;
 8002b98:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <BMS_ScreenMode_RUN+0x19c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
			 flag_trip_shortcircuit=OFF;
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <BMS_ScreenMode_RUN+0x1a0>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
			 flag_trip_systemfailure=OFF;
 8002ba4:	4b3a      	ldr	r3, [pc, #232]	; (8002c90 <BMS_ScreenMode_RUN+0x1a4>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	701a      	strb	r2, [r3, #0]
			 flag_trip_unbalance=OFF;
 8002baa:	4b3a      	ldr	r3, [pc, #232]	; (8002c94 <BMS_ScreenMode_RUN+0x1a8>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]
			 OFFSET_SENSOR_ARUS=IBATT_for_offset_cal;
 8002bb0:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <BMS_ScreenMode_RUN+0x1ac>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a39      	ldr	r2, [pc, #228]	; (8002c9c <BMS_ScreenMode_RUN+0x1b0>)
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	e16a      	b.n	8002e90 <BMS_ScreenMode_RUN+0x3a4>
	}
	else
	{
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f001 fc64 	bl	8004488 <SSD1306_Fill>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002bc0:	2110      	movs	r1, #16
 8002bc2:	4829      	ldr	r0, [pc, #164]	; (8002c68 <BMS_ScreenMode_RUN+0x17c>)
 8002bc4:	f006 fcf3 	bl	80095ae <HAL_GPIO_TogglePin>

		if(BATT_State==STATE_CHARGE)
 8002bc8:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <BMS_ScreenMode_RUN+0x1b4>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d10e      	bne.n	8002bee <BMS_ScreenMode_RUN+0x102>
		{
			sprintf(pesan,"RUN (C) - %s", UPPER_UNIQUE_Code);
 8002bd0:	4a34      	ldr	r2, [pc, #208]	; (8002ca4 <BMS_ScreenMode_RUN+0x1b8>)
 8002bd2:	4935      	ldr	r1, [pc, #212]	; (8002ca8 <BMS_ScreenMode_RUN+0x1bc>)
 8002bd4:	4820      	ldr	r0, [pc, #128]	; (8002c58 <BMS_ScreenMode_RUN+0x16c>)
 8002bd6:	f009 f917 	bl	800be08 <siprintf>
			SSD1306_GotoXY(0,0);
 8002bda:	2100      	movs	r1, #0
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f001 fcc9 	bl	8004574 <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002be2:	2201      	movs	r2, #1
 8002be4:	491e      	ldr	r1, [pc, #120]	; (8002c60 <BMS_ScreenMode_RUN+0x174>)
 8002be6:	481c      	ldr	r0, [pc, #112]	; (8002c58 <BMS_ScreenMode_RUN+0x16c>)
 8002be8:	f001 fd5a 	bl	80046a0 <SSD1306_Puts>
 8002bec:	e07a      	b.n	8002ce4 <BMS_ScreenMode_RUN+0x1f8>
		}
		else if(BATT_State==STATE_DISCHARGE)
 8002bee:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <BMS_ScreenMode_RUN+0x1b4>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d10e      	bne.n	8002c14 <BMS_ScreenMode_RUN+0x128>
		{
			sprintf(pesan,"RUN (D) - %s", UPPER_UNIQUE_Code);
 8002bf6:	4a2b      	ldr	r2, [pc, #172]	; (8002ca4 <BMS_ScreenMode_RUN+0x1b8>)
 8002bf8:	492c      	ldr	r1, [pc, #176]	; (8002cac <BMS_ScreenMode_RUN+0x1c0>)
 8002bfa:	4817      	ldr	r0, [pc, #92]	; (8002c58 <BMS_ScreenMode_RUN+0x16c>)
 8002bfc:	f009 f904 	bl	800be08 <siprintf>
			SSD1306_GotoXY(0,0);
 8002c00:	2100      	movs	r1, #0
 8002c02:	2000      	movs	r0, #0
 8002c04:	f001 fcb6 	bl	8004574 <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4915      	ldr	r1, [pc, #84]	; (8002c60 <BMS_ScreenMode_RUN+0x174>)
 8002c0c:	4812      	ldr	r0, [pc, #72]	; (8002c58 <BMS_ScreenMode_RUN+0x16c>)
 8002c0e:	f001 fd47 	bl	80046a0 <SSD1306_Puts>
 8002c12:	e067      	b.n	8002ce4 <BMS_ScreenMode_RUN+0x1f8>
		}
		else if(BATT_State==STATE_FULL_CHARGE_DISCHARGE)
 8002c14:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <BMS_ScreenMode_RUN+0x1b4>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d14b      	bne.n	8002cb4 <BMS_ScreenMode_RUN+0x1c8>
		{
			sprintf(pesan,"BMS-RUN (Full C/D)");
 8002c1c:	4a0e      	ldr	r2, [pc, #56]	; (8002c58 <BMS_ScreenMode_RUN+0x16c>)
 8002c1e:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <BMS_ScreenMode_RUN+0x1c4>)
 8002c20:	4615      	mov	r5, r2
 8002c22:	461c      	mov	r4, r3
 8002c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c26:	6028      	str	r0, [r5, #0]
 8002c28:	6069      	str	r1, [r5, #4]
 8002c2a:	60aa      	str	r2, [r5, #8]
 8002c2c:	60eb      	str	r3, [r5, #12]
 8002c2e:	8823      	ldrh	r3, [r4, #0]
 8002c30:	78a2      	ldrb	r2, [r4, #2]
 8002c32:	822b      	strh	r3, [r5, #16]
 8002c34:	4613      	mov	r3, r2
 8002c36:	74ab      	strb	r3, [r5, #18]
			SSD1306_GotoXY(0,0);
 8002c38:	2100      	movs	r1, #0
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f001 fc9a 	bl	8004574 <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002c40:	2201      	movs	r2, #1
 8002c42:	4907      	ldr	r1, [pc, #28]	; (8002c60 <BMS_ScreenMode_RUN+0x174>)
 8002c44:	4804      	ldr	r0, [pc, #16]	; (8002c58 <BMS_ScreenMode_RUN+0x16c>)
 8002c46:	f001 fd2b 	bl	80046a0 <SSD1306_Puts>
 8002c4a:	e04b      	b.n	8002ce4 <BMS_ScreenMode_RUN+0x1f8>
 8002c4c:	20000934 	.word	0x20000934
 8002c50:	20000bc0 	.word	0x20000bc0
 8002c54:	20000994 	.word	0x20000994
 8002c58:	20000bc4 	.word	0x20000bc4
 8002c5c:	0800dad8 	.word	0x0800dad8
 8002c60:	20000008 	.word	0x20000008
 8002c64:	0800daec 	.word	0x0800daec
 8002c68:	40011000 	.word	0x40011000
 8002c6c:	20001038 	.word	0x20001038
 8002c70:	20001060 	.word	0x20001060
 8002c74:	20001094 	.word	0x20001094
 8002c78:	20000c31 	.word	0x20000c31
 8002c7c:	20001061 	.word	0x20001061
 8002c80:	200014a5 	.word	0x200014a5
 8002c84:	20001070 	.word	0x20001070
 8002c88:	2000108c 	.word	0x2000108c
 8002c8c:	20000c32 	.word	0x20000c32
 8002c90:	20001020 	.word	0x20001020
 8002c94:	20000c30 	.word	0x20000c30
 8002c98:	200010b8 	.word	0x200010b8
 8002c9c:	200010b4 	.word	0x200010b4
 8002ca0:	200009b0 	.word	0x200009b0
 8002ca4:	20000920 	.word	0x20000920
 8002ca8:	0800daf8 	.word	0x0800daf8
 8002cac:	0800db08 	.word	0x0800db08
 8002cb0:	0800db18 	.word	0x0800db18
		}
		else if(BATT_State==STATE_STANDBY)
 8002cb4:	4b7a      	ldr	r3, [pc, #488]	; (8002ea0 <BMS_ScreenMode_RUN+0x3b4>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d113      	bne.n	8002ce4 <BMS_ScreenMode_RUN+0x1f8>
		{
			sprintf(pesan,"BMS-RUN (Open)");
 8002cbc:	4a79      	ldr	r2, [pc, #484]	; (8002ea4 <BMS_ScreenMode_RUN+0x3b8>)
 8002cbe:	4b7a      	ldr	r3, [pc, #488]	; (8002ea8 <BMS_ScreenMode_RUN+0x3bc>)
 8002cc0:	4614      	mov	r4, r2
 8002cc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002cc4:	6020      	str	r0, [r4, #0]
 8002cc6:	6061      	str	r1, [r4, #4]
 8002cc8:	60a2      	str	r2, [r4, #8]
 8002cca:	881a      	ldrh	r2, [r3, #0]
 8002ccc:	789b      	ldrb	r3, [r3, #2]
 8002cce:	81a2      	strh	r2, [r4, #12]
 8002cd0:	73a3      	strb	r3, [r4, #14]
			SSD1306_GotoXY(0,0);
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	f001 fc4d 	bl	8004574 <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4973      	ldr	r1, [pc, #460]	; (8002eac <BMS_ScreenMode_RUN+0x3c0>)
 8002cde:	4871      	ldr	r0, [pc, #452]	; (8002ea4 <BMS_ScreenMode_RUN+0x3b8>)
 8002ce0:	f001 fcde 	bl	80046a0 <SSD1306_Puts>
		}

		sprintf(pesan,"V=%6.2f I=%6.2f",VBATT,IBATT);
 8002ce4:	4b72      	ldr	r3, [pc, #456]	; (8002eb0 <BMS_ScreenMode_RUN+0x3c4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fb9d 	bl	8000428 <__aeabi_f2d>
 8002cee:	4605      	mov	r5, r0
 8002cf0:	460e      	mov	r6, r1
 8002cf2:	4b70      	ldr	r3, [pc, #448]	; (8002eb4 <BMS_ScreenMode_RUN+0x3c8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fb96 	bl	8000428 <__aeabi_f2d>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	460c      	mov	r4, r1
 8002d00:	e9cd 3400 	strd	r3, r4, [sp]
 8002d04:	462a      	mov	r2, r5
 8002d06:	4633      	mov	r3, r6
 8002d08:	496b      	ldr	r1, [pc, #428]	; (8002eb8 <BMS_ScreenMode_RUN+0x3cc>)
 8002d0a:	4866      	ldr	r0, [pc, #408]	; (8002ea4 <BMS_ScreenMode_RUN+0x3b8>)
 8002d0c:	f009 f87c 	bl	800be08 <siprintf>
		SSD1306_GotoXY(0,10);
 8002d10:	210a      	movs	r1, #10
 8002d12:	2000      	movs	r0, #0
 8002d14:	f001 fc2e 	bl	8004574 <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4964      	ldr	r1, [pc, #400]	; (8002eac <BMS_ScreenMode_RUN+0x3c0>)
 8002d1c:	4861      	ldr	r0, [pc, #388]	; (8002ea4 <BMS_ScreenMode_RUN+0x3b8>)
 8002d1e:	f001 fcbf 	bl	80046a0 <SSD1306_Puts>
		sprintf(pesan,"T=%3.0f|%3.0f|%3.0f|%3.0f",Suhu_T1,Suhu_T2,Suhu_T3,Suhu_T4);
 8002d22:	4b66      	ldr	r3, [pc, #408]	; (8002ebc <BMS_ScreenMode_RUN+0x3d0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fb7e 	bl	8000428 <__aeabi_f2d>
 8002d2c:	4682      	mov	sl, r0
 8002d2e:	468b      	mov	fp, r1
 8002d30:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <BMS_ScreenMode_RUN+0x3d4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fb77 	bl	8000428 <__aeabi_f2d>
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	460d      	mov	r5, r1
 8002d3e:	4b61      	ldr	r3, [pc, #388]	; (8002ec4 <BMS_ScreenMode_RUN+0x3d8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fb70 	bl	8000428 <__aeabi_f2d>
 8002d48:	4680      	mov	r8, r0
 8002d4a:	4689      	mov	r9, r1
 8002d4c:	4b5e      	ldr	r3, [pc, #376]	; (8002ec8 <BMS_ScreenMode_RUN+0x3dc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fb69 	bl	8000428 <__aeabi_f2d>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d5e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002d62:	e9cd 4500 	strd	r4, r5, [sp]
 8002d66:	4652      	mov	r2, sl
 8002d68:	465b      	mov	r3, fp
 8002d6a:	4958      	ldr	r1, [pc, #352]	; (8002ecc <BMS_ScreenMode_RUN+0x3e0>)
 8002d6c:	484d      	ldr	r0, [pc, #308]	; (8002ea4 <BMS_ScreenMode_RUN+0x3b8>)
 8002d6e:	f009 f84b 	bl	800be08 <siprintf>
		SSD1306_GotoXY(0,20);
 8002d72:	2114      	movs	r1, #20
 8002d74:	2000      	movs	r0, #0
 8002d76:	f001 fbfd 	bl	8004574 <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	494b      	ldr	r1, [pc, #300]	; (8002eac <BMS_ScreenMode_RUN+0x3c0>)
 8002d7e:	4849      	ldr	r0, [pc, #292]	; (8002ea4 <BMS_ScreenMode_RUN+0x3b8>)
 8002d80:	f001 fc8e 	bl	80046a0 <SSD1306_Puts>
		sprintf(pesan,"C=%5.1f%%--%5.1f%%",Pack_SOC,SOC_manipulasi);
 8002d84:	4b52      	ldr	r3, [pc, #328]	; (8002ed0 <BMS_ScreenMode_RUN+0x3e4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fb4d 	bl	8000428 <__aeabi_f2d>
 8002d8e:	4605      	mov	r5, r0
 8002d90:	460e      	mov	r6, r1
 8002d92:	4b50      	ldr	r3, [pc, #320]	; (8002ed4 <BMS_ScreenMode_RUN+0x3e8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fb46 	bl	8000428 <__aeabi_f2d>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	460c      	mov	r4, r1
 8002da0:	e9cd 3400 	strd	r3, r4, [sp]
 8002da4:	462a      	mov	r2, r5
 8002da6:	4633      	mov	r3, r6
 8002da8:	494b      	ldr	r1, [pc, #300]	; (8002ed8 <BMS_ScreenMode_RUN+0x3ec>)
 8002daa:	483e      	ldr	r0, [pc, #248]	; (8002ea4 <BMS_ScreenMode_RUN+0x3b8>)
 8002dac:	f009 f82c 	bl	800be08 <siprintf>
		SSD1306_GotoXY(0,30);
 8002db0:	211e      	movs	r1, #30
 8002db2:	2000      	movs	r0, #0
 8002db4:	f001 fbde 	bl	8004574 <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002db8:	2201      	movs	r2, #1
 8002dba:	493c      	ldr	r1, [pc, #240]	; (8002eac <BMS_ScreenMode_RUN+0x3c0>)
 8002dbc:	4839      	ldr	r0, [pc, #228]	; (8002ea4 <BMS_ScreenMode_RUN+0x3b8>)
 8002dbe:	f001 fc6f 	bl	80046a0 <SSD1306_Puts>
		sprintf(pesan,"B=%5d, %4.1f-%4.2f",balance_status,persen_imbalance, OFFSET_SENSOR_ARUS);
 8002dc2:	4b46      	ldr	r3, [pc, #280]	; (8002edc <BMS_ScreenMode_RUN+0x3f0>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	461e      	mov	r6, r3
 8002dc8:	4b45      	ldr	r3, [pc, #276]	; (8002ee0 <BMS_ScreenMode_RUN+0x3f4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fb2b 	bl	8000428 <__aeabi_f2d>
 8002dd2:	4604      	mov	r4, r0
 8002dd4:	460d      	mov	r5, r1
 8002dd6:	4b43      	ldr	r3, [pc, #268]	; (8002ee4 <BMS_ScreenMode_RUN+0x3f8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fd fb24 	bl	8000428 <__aeabi_f2d>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002de8:	e9cd 4500 	strd	r4, r5, [sp]
 8002dec:	4632      	mov	r2, r6
 8002dee:	493e      	ldr	r1, [pc, #248]	; (8002ee8 <BMS_ScreenMode_RUN+0x3fc>)
 8002df0:	482c      	ldr	r0, [pc, #176]	; (8002ea4 <BMS_ScreenMode_RUN+0x3b8>)
 8002df2:	f009 f809 	bl	800be08 <siprintf>
		SSD1306_GotoXY(0,40);
 8002df6:	2128      	movs	r1, #40	; 0x28
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f001 fbbb 	bl	8004574 <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002dfe:	2201      	movs	r2, #1
 8002e00:	492a      	ldr	r1, [pc, #168]	; (8002eac <BMS_ScreenMode_RUN+0x3c0>)
 8002e02:	4828      	ldr	r0, [pc, #160]	; (8002ea4 <BMS_ScreenMode_RUN+0x3b8>)
 8002e04:	f001 fc4c 	bl	80046a0 <SSD1306_Puts>


		sprintf(pesan,"%d-%d--%4.2f| %5.0f",fault_code,last_fault_code,Isc, AH_Total);
 8002e08:	4b38      	ldr	r3, [pc, #224]	; (8002eec <BMS_ScreenMode_RUN+0x400>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	461e      	mov	r6, r3
 8002e0e:	4b38      	ldr	r3, [pc, #224]	; (8002ef0 <BMS_ScreenMode_RUN+0x404>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	4698      	mov	r8, r3
 8002e14:	4b37      	ldr	r3, [pc, #220]	; (8002ef4 <BMS_ScreenMode_RUN+0x408>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fd fb05 	bl	8000428 <__aeabi_f2d>
 8002e1e:	4604      	mov	r4, r0
 8002e20:	460d      	mov	r5, r1
 8002e22:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <BMS_ScreenMode_RUN+0x40c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fafe 	bl	8000428 <__aeabi_f2d>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e34:	e9cd 4500 	strd	r4, r5, [sp]
 8002e38:	4643      	mov	r3, r8
 8002e3a:	4632      	mov	r2, r6
 8002e3c:	492f      	ldr	r1, [pc, #188]	; (8002efc <BMS_ScreenMode_RUN+0x410>)
 8002e3e:	4819      	ldr	r0, [pc, #100]	; (8002ea4 <BMS_ScreenMode_RUN+0x3b8>)
 8002e40:	f008 ffe2 	bl	800be08 <siprintf>
		SSD1306_GotoXY(0,50);
 8002e44:	2132      	movs	r1, #50	; 0x32
 8002e46:	2000      	movs	r0, #0
 8002e48:	f001 fb94 	bl	8004574 <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	4917      	ldr	r1, [pc, #92]	; (8002eac <BMS_ScreenMode_RUN+0x3c0>)
 8002e50:	4814      	ldr	r0, [pc, #80]	; (8002ea4 <BMS_ScreenMode_RUN+0x3b8>)
 8002e52:	f001 fc25 	bl	80046a0 <SSD1306_Puts>


		SSD1306_UpdateScreen();
 8002e56:	f001 fae9 	bl	800442c <SSD1306_UpdateScreen>

		if(BMS_mode==0) Batt_Open_Mode();
 8002e5a:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <BMS_ScreenMode_RUN+0x414>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <BMS_ScreenMode_RUN+0x37c>
 8002e62:	f7fe faa7 	bl	80013b4 <Batt_Open_Mode>
 8002e66:	e013      	b.n	8002e90 <BMS_ScreenMode_RUN+0x3a4>
		else if(BMS_mode==1) Batt_Discharge_Mode();
 8002e68:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <BMS_ScreenMode_RUN+0x414>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d102      	bne.n	8002e76 <BMS_ScreenMode_RUN+0x38a>
 8002e70:	f7fe f974 	bl	800115c <Batt_Discharge_Mode>
 8002e74:	e00c      	b.n	8002e90 <BMS_ScreenMode_RUN+0x3a4>
		else if(BMS_mode==2) Batt_Charge_Mode();
 8002e76:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <BMS_ScreenMode_RUN+0x414>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d102      	bne.n	8002e84 <BMS_ScreenMode_RUN+0x398>
 8002e7e:	f7fe f9d5 	bl	800122c <Batt_Charge_Mode>
 8002e82:	e005      	b.n	8002e90 <BMS_ScreenMode_RUN+0x3a4>
		else if(BMS_mode==3) Batt_Full_CD_Mode();
 8002e84:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <BMS_ScreenMode_RUN+0x414>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d101      	bne.n	8002e90 <BMS_ScreenMode_RUN+0x3a4>
 8002e8c:	f7fe fa24 	bl	80012d8 <Batt_Full_CD_Mode>

	}

	HAL_Delay(1);
 8002e90:	2001      	movs	r0, #1
 8002e92:	f004 fc55 	bl	8007740 <HAL_Delay>
}
 8002e96:	bf00      	nop
 8002e98:	3704      	adds	r7, #4
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ea0:	200009b0 	.word	0x200009b0
 8002ea4:	20000bc4 	.word	0x20000bc4
 8002ea8:	0800db2c 	.word	0x0800db2c
 8002eac:	20000008 	.word	0x20000008
 8002eb0:	2000103c 	.word	0x2000103c
 8002eb4:	20001058 	.word	0x20001058
 8002eb8:	0800db3c 	.word	0x0800db3c
 8002ebc:	2000106c 	.word	0x2000106c
 8002ec0:	200014a8 	.word	0x200014a8
 8002ec4:	20001040 	.word	0x20001040
 8002ec8:	200010a0 	.word	0x200010a0
 8002ecc:	0800db4c 	.word	0x0800db4c
 8002ed0:	20000be4 	.word	0x20000be4
 8002ed4:	20000bb4 	.word	0x20000bb4
 8002ed8:	0800db68 	.word	0x0800db68
 8002edc:	20000bee 	.word	0x20000bee
 8002ee0:	20000bb8 	.word	0x20000bb8
 8002ee4:	200010b4 	.word	0x200010b4
 8002ee8:	0800db7c 	.word	0x0800db7c
 8002eec:	20001068 	.word	0x20001068
 8002ef0:	200014a4 	.word	0x200014a4
 8002ef4:	2000104c 	.word	0x2000104c
 8002ef8:	20000698 	.word	0x20000698
 8002efc:	0800db90 	.word	0x0800db90
 8002f00:	20000be0 	.word	0x20000be0

08002f04 <BMS_ScreenMode_Locked_Ship>:

void BMS_ScreenMode_Locked_Ship(void)
{
 8002f04:	b5b0      	push	{r4, r5, r7, lr}
 8002f06:	af00      	add	r7, sp, #0
	 Flag_Battery_Locked_for_Ship=1;
 8002f08:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <BMS_ScreenMode_Locked_Ship+0x74>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
	 Flag_Force_Balance=0;
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <BMS_ScreenMode_Locked_Ship+0x78>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]

	 SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002f14:	2000      	movs	r0, #0
 8002f16:	f001 fab7 	bl	8004488 <SSD1306_Fill>
	 sprintf(pesan,"BMS - Gen.V2");
 8002f1a:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <BMS_ScreenMode_Locked_Ship+0x80>)
 8002f1e:	4614      	mov	r4, r2
 8002f20:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f22:	6020      	str	r0, [r4, #0]
 8002f24:	6061      	str	r1, [r4, #4]
 8002f26:	60a2      	str	r2, [r4, #8]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	7323      	strb	r3, [r4, #12]
	 SSD1306_GotoXY(20,18);
 8002f2c:	2112      	movs	r1, #18
 8002f2e:	2014      	movs	r0, #20
 8002f30:	f001 fb20 	bl	8004574 <SSD1306_GotoXY>
	 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002f34:	2201      	movs	r2, #1
 8002f36:	4914      	ldr	r1, [pc, #80]	; (8002f88 <BMS_ScreenMode_Locked_Ship+0x84>)
 8002f38:	4811      	ldr	r0, [pc, #68]	; (8002f80 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002f3a:	f001 fbb1 	bl	80046a0 <SSD1306_Puts>

	 sprintf(pesan,"Pack Ready Shipped");
 8002f3e:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <BMS_ScreenMode_Locked_Ship+0x88>)
 8002f42:	4615      	mov	r5, r2
 8002f44:	461c      	mov	r4, r3
 8002f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f48:	6028      	str	r0, [r5, #0]
 8002f4a:	6069      	str	r1, [r5, #4]
 8002f4c:	60aa      	str	r2, [r5, #8]
 8002f4e:	60eb      	str	r3, [r5, #12]
 8002f50:	8823      	ldrh	r3, [r4, #0]
 8002f52:	78a2      	ldrb	r2, [r4, #2]
 8002f54:	822b      	strh	r3, [r5, #16]
 8002f56:	4613      	mov	r3, r2
 8002f58:	74ab      	strb	r3, [r5, #18]
	 SSD1306_GotoXY(0,38);
 8002f5a:	2126      	movs	r1, #38	; 0x26
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f001 fb09 	bl	8004574 <SSD1306_GotoXY>
	 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002f62:	2201      	movs	r2, #1
 8002f64:	4908      	ldr	r1, [pc, #32]	; (8002f88 <BMS_ScreenMode_Locked_Ship+0x84>)
 8002f66:	4806      	ldr	r0, [pc, #24]	; (8002f80 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002f68:	f001 fb9a 	bl	80046a0 <SSD1306_Puts>
	 SSD1306_UpdateScreen();
 8002f6c:	f001 fa5e 	bl	800442c <SSD1306_UpdateScreen>
	 Batt_Open_Mode();
 8002f70:	f7fe fa20 	bl	80013b4 <Batt_Open_Mode>
}
 8002f74:	bf00      	nop
 8002f76:	bdb0      	pop	{r4, r5, r7, pc}
 8002f78:	20000934 	.word	0x20000934
 8002f7c:	20000bc0 	.word	0x20000bc0
 8002f80:	20000bc4 	.word	0x20000bc4
 8002f84:	0800dac8 	.word	0x0800dac8
 8002f88:	20000008 	.word	0x20000008
 8002f8c:	0800dba4 	.word	0x0800dba4

08002f90 <BMS_ScreenMode_ForceBalance>:

void BMS_ScreenMode_ForceBalance(void)
{
 8002f90:	b598      	push	{r3, r4, r7, lr}
 8002f92:	af00      	add	r7, sp, #0
	Flag_Battery_Locked_for_Ship=0;
 8002f94:	4b21      	ldr	r3, [pc, #132]	; (800301c <BMS_ScreenMode_ForceBalance+0x8c>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
	Flag_Force_Balance=1;
 8002f9a:	4b21      	ldr	r3, [pc, #132]	; (8003020 <BMS_ScreenMode_ForceBalance+0x90>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]

	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f001 fa71 	bl	8004488 <SSD1306_Fill>
	sprintf(pesan,"BMS - Gen.V2");
 8002fa6:	4a1f      	ldr	r2, [pc, #124]	; (8003024 <BMS_ScreenMode_ForceBalance+0x94>)
 8002fa8:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <BMS_ScreenMode_ForceBalance+0x98>)
 8002faa:	4614      	mov	r4, r2
 8002fac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002fae:	6020      	str	r0, [r4, #0]
 8002fb0:	6061      	str	r1, [r4, #4]
 8002fb2:	60a2      	str	r2, [r4, #8]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	7323      	strb	r3, [r4, #12]
	SSD1306_GotoXY(20,0);
 8002fb8:	2100      	movs	r1, #0
 8002fba:	2014      	movs	r0, #20
 8002fbc:	f001 fada 	bl	8004574 <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	491a      	ldr	r1, [pc, #104]	; (800302c <BMS_ScreenMode_ForceBalance+0x9c>)
 8002fc4:	4817      	ldr	r0, [pc, #92]	; (8003024 <BMS_ScreenMode_ForceBalance+0x94>)
 8002fc6:	f001 fb6b 	bl	80046a0 <SSD1306_Puts>

	sprintf(pesan,"Force Balance");
 8002fca:	4a16      	ldr	r2, [pc, #88]	; (8003024 <BMS_ScreenMode_ForceBalance+0x94>)
 8002fcc:	4b18      	ldr	r3, [pc, #96]	; (8003030 <BMS_ScreenMode_ForceBalance+0xa0>)
 8002fce:	4614      	mov	r4, r2
 8002fd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002fd2:	6020      	str	r0, [r4, #0]
 8002fd4:	6061      	str	r1, [r4, #4]
 8002fd6:	60a2      	str	r2, [r4, #8]
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	81a3      	strh	r3, [r4, #12]
	SSD1306_GotoXY(0,10);
 8002fdc:	210a      	movs	r1, #10
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f001 fac8 	bl	8004574 <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	4911      	ldr	r1, [pc, #68]	; (800302c <BMS_ScreenMode_ForceBalance+0x9c>)
 8002fe8:	480e      	ldr	r0, [pc, #56]	; (8003024 <BMS_ScreenMode_ForceBalance+0x94>)
 8002fea:	f001 fb59 	bl	80046a0 <SSD1306_Puts>

	sprintf(pesan,"B=%5d",balance_status);
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <BMS_ScreenMode_ForceBalance+0xa4>)
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4910      	ldr	r1, [pc, #64]	; (8003038 <BMS_ScreenMode_ForceBalance+0xa8>)
 8002ff6:	480b      	ldr	r0, [pc, #44]	; (8003024 <BMS_ScreenMode_ForceBalance+0x94>)
 8002ff8:	f008 ff06 	bl	800be08 <siprintf>
	SSD1306_GotoXY(0,40);
 8002ffc:	2128      	movs	r1, #40	; 0x28
 8002ffe:	2000      	movs	r0, #0
 8003000:	f001 fab8 	bl	8004574 <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8003004:	2201      	movs	r2, #1
 8003006:	4909      	ldr	r1, [pc, #36]	; (800302c <BMS_ScreenMode_ForceBalance+0x9c>)
 8003008:	4806      	ldr	r0, [pc, #24]	; (8003024 <BMS_ScreenMode_ForceBalance+0x94>)
 800300a:	f001 fb49 	bl	80046a0 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 800300e:	f001 fa0d 	bl	800442c <SSD1306_UpdateScreen>
	Batt_Open_Mode();
 8003012:	f7fe f9cf 	bl	80013b4 <Batt_Open_Mode>
}
 8003016:	bf00      	nop
 8003018:	bd98      	pop	{r3, r4, r7, pc}
 800301a:	bf00      	nop
 800301c:	20000934 	.word	0x20000934
 8003020:	20000bc0 	.word	0x20000bc0
 8003024:	20000bc4 	.word	0x20000bc4
 8003028:	0800dac8 	.word	0x0800dac8
 800302c:	20000008 	.word	0x20000008
 8003030:	0800dbb8 	.word	0x0800dbb8
 8003034:	20000bee 	.word	0x20000bee
 8003038:	0800dbc8 	.word	0x0800dbc8

0800303c <Calc_vcell_tot>:

void Calc_vcell_tot(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
	float v_cell_temporary;
	for(ij=0;ij<15;ij++)
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <Calc_vcell_tot+0x54>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	e00f      	b.n	800306a <Calc_vcell_tot+0x2e>
	{
		v_cell_temporary+=vcell_15data[ij];
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <Calc_vcell_tot+0x54>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a11      	ldr	r2, [pc, #68]	; (8003094 <Calc_vcell_tot+0x58>)
 8003050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fd fd6c 	bl	8000b34 <__addsf3>
 800305c:	4603      	mov	r3, r0
 800305e:	607b      	str	r3, [r7, #4]
	for(ij=0;ij<15;ij++)
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <Calc_vcell_tot+0x54>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <Calc_vcell_tot+0x54>)
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <Calc_vcell_tot+0x54>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b0e      	cmp	r3, #14
 8003070:	ddeb      	ble.n	800304a <Calc_vcell_tot+0xe>
	}

	if(v_cell_temporary>10)
 8003072:	4909      	ldr	r1, [pc, #36]	; (8003098 <Calc_vcell_tot+0x5c>)
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7fe f821 	bl	80010bc <__aeabi_fcmpgt>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d100      	bne.n	8003082 <Calc_vcell_tot+0x46>
	{
		v_cell_tot=v_cell_temporary;
	}

}
 8003080:	e002      	b.n	8003088 <Calc_vcell_tot+0x4c>
		v_cell_tot=v_cell_temporary;
 8003082:	4a06      	ldr	r2, [pc, #24]	; (800309c <Calc_vcell_tot+0x60>)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6013      	str	r3, [r2, #0]
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000908 	.word	0x20000908
 8003094:	20000958 	.word	0x20000958
 8003098:	41200000 	.word	0x41200000
 800309c:	20000bbc 	.word	0x20000bbc

080030a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <ltc6812_GPIO_Config>:
void ltc6812_SPIInit(void);
void ltc6812_Delay(volatile uint32_t nCount);


void ltc6812_GPIO_Config(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIO clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80030b2:	4b2a      	ldr	r3, [pc, #168]	; (800315c <ltc6812_GPIO_Config+0xb0>)
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	4a29      	ldr	r2, [pc, #164]	; (800315c <ltc6812_GPIO_Config+0xb0>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	6193      	str	r3, [r2, #24]
 80030be:	4b27      	ldr	r3, [pc, #156]	; (800315c <ltc6812_GPIO_Config+0xb0>)
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80030ca:	4b24      	ldr	r3, [pc, #144]	; (800315c <ltc6812_GPIO_Config+0xb0>)
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	4a23      	ldr	r2, [pc, #140]	; (800315c <ltc6812_GPIO_Config+0xb0>)
 80030d0:	f043 0308 	orr.w	r3, r3, #8
 80030d4:	6193      	str	r3, [r2, #24]
 80030d6:	4b21      	ldr	r3, [pc, #132]	; (800315c <ltc6812_GPIO_Config+0xb0>)
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80030e2:	4b1e      	ldr	r3, [pc, #120]	; (800315c <ltc6812_GPIO_Config+0xb0>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	4a1d      	ldr	r2, [pc, #116]	; (800315c <ltc6812_GPIO_Config+0xb0>)
 80030e8:	f043 0310 	orr.w	r3, r3, #16
 80030ec:	6193      	str	r3, [r2, #24]
 80030ee:	4b1b      	ldr	r3, [pc, #108]	; (800315c <ltc6812_GPIO_Config+0xb0>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin       = ltc6812_CS_PIN;
 80030fa:	2301      	movs	r3, #1
 80030fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 80030fe:	2301      	movs	r3, #1
 8003100:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003106:	2303      	movs	r3, #3
 8003108:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6812_CS_PORT, &GPIO_InitStructure);
 800310a:	f107 0310 	add.w	r3, r7, #16
 800310e:	4619      	mov	r1, r3
 8003110:	4813      	ldr	r0, [pc, #76]	; (8003160 <ltc6812_GPIO_Config+0xb4>)
 8003112:	f006 f8c3 	bl	800929c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6812_SCK_PIN;
 8003116:	2308      	movs	r3, #8
 8003118:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6812_SCK_PORT, &GPIO_InitStructure);
 800311a:	f107 0310 	add.w	r3, r7, #16
 800311e:	4619      	mov	r1, r3
 8003120:	480f      	ldr	r0, [pc, #60]	; (8003160 <ltc6812_GPIO_Config+0xb4>)
 8003122:	f006 f8bb 	bl	800929c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6812_MOSI_PIN;
 8003126:	2320      	movs	r3, #32
 8003128:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6812_MOSI_PORT, &GPIO_InitStructure);
 800312a:	f107 0310 	add.w	r3, r7, #16
 800312e:	4619      	mov	r1, r3
 8003130:	480b      	ldr	r0, [pc, #44]	; (8003160 <ltc6812_GPIO_Config+0xb4>)
 8003132:	f006 f8b3 	bl	800929c <HAL_GPIO_Init>

	

	GPIO_InitStructure.Pin       = ltc6812_MISO_PIN;
 8003136:	2310      	movs	r3, #16
 8003138:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_INPUT;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003142:	2301      	movs	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6812_MISO_PORT, &GPIO_InitStructure);
 8003146:	f107 0310 	add.w	r3, r7, #16
 800314a:	4619      	mov	r1, r3
 800314c:	4804      	ldr	r0, [pc, #16]	; (8003160 <ltc6812_GPIO_Config+0xb4>)
 800314e:	f006 f8a5 	bl	800929c <HAL_GPIO_Init>
}
 8003152:	bf00      	nop
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	40010c00 	.word	0x40010c00

08003164 <ltc6812_SPIInit>:

void ltc6812_SPIInit(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
	ltc6812_CS_SET(ltc6812_CS_PIN);
 8003168:	2201      	movs	r2, #1
 800316a:	2101      	movs	r1, #1
 800316c:	482a      	ldr	r0, [pc, #168]	; (8003218 <ltc6812_SPIInit+0xb4>)
 800316e:	f006 fa06 	bl	800957e <HAL_GPIO_WritePin>
	ltc6812_RESET_HIGH;
 8003172:	2201      	movs	r2, #1
 8003174:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003178:	4828      	ldr	r0, [pc, #160]	; (800321c <ltc6812_SPIInit+0xb8>)
 800317a:	f006 fa00 	bl	800957e <HAL_GPIO_WritePin>
	ltc6812_Delay(10);
 800317e:	200a      	movs	r0, #10
 8003180:	f000 f84e 	bl	8003220 <ltc6812_Delay>
	ltc6812_RESET_LOW;
 8003184:	2200      	movs	r2, #0
 8003186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800318a:	4824      	ldr	r0, [pc, #144]	; (800321c <ltc6812_SPIInit+0xb8>)
 800318c:	f006 f9f7 	bl	800957e <HAL_GPIO_WritePin>
	ltc6812_Delay(2000);
 8003190:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003194:	f000 f844 	bl	8003220 <ltc6812_Delay>
	ltc6812_RESET_HIGH;
 8003198:	2201      	movs	r2, #1
 800319a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800319e:	481f      	ldr	r0, [pc, #124]	; (800321c <ltc6812_SPIInit+0xb8>)
 80031a0:	f006 f9ed 	bl	800957e <HAL_GPIO_WritePin>
	ltc6812_Delay(10);
 80031a4:	200a      	movs	r0, #10
 80031a6:	f000 f83b 	bl	8003220 <ltc6812_Delay>

	//toggle CS 3 times to enter SPI Mode
	ltc6812_CS_RESET(ltc6812_CS_PIN);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2101      	movs	r1, #1
 80031ae:	481a      	ldr	r0, [pc, #104]	; (8003218 <ltc6812_SPIInit+0xb4>)
 80031b0:	f006 f9e5 	bl	800957e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 80031b4:	2064      	movs	r0, #100	; 0x64
 80031b6:	f000 f833 	bl	8003220 <ltc6812_Delay>
	ltc6812_CS_SET(ltc6812_CS_PIN);
 80031ba:	2201      	movs	r2, #1
 80031bc:	2101      	movs	r1, #1
 80031be:	4816      	ldr	r0, [pc, #88]	; (8003218 <ltc6812_SPIInit+0xb4>)
 80031c0:	f006 f9dd 	bl	800957e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 80031c4:	2064      	movs	r0, #100	; 0x64
 80031c6:	f000 f82b 	bl	8003220 <ltc6812_Delay>
	ltc6812_CS_RESET(ltc6812_CS_PIN);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2101      	movs	r1, #1
 80031ce:	4812      	ldr	r0, [pc, #72]	; (8003218 <ltc6812_SPIInit+0xb4>)
 80031d0:	f006 f9d5 	bl	800957e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 80031d4:	2064      	movs	r0, #100	; 0x64
 80031d6:	f000 f823 	bl	8003220 <ltc6812_Delay>
	ltc6812_CS_SET(ltc6812_CS_PIN);
 80031da:	2201      	movs	r2, #1
 80031dc:	2101      	movs	r1, #1
 80031de:	480e      	ldr	r0, [pc, #56]	; (8003218 <ltc6812_SPIInit+0xb4>)
 80031e0:	f006 f9cd 	bl	800957e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 80031e4:	2064      	movs	r0, #100	; 0x64
 80031e6:	f000 f81b 	bl	8003220 <ltc6812_Delay>
	ltc6812_CS_RESET(ltc6812_CS_PIN);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2101      	movs	r1, #1
 80031ee:	480a      	ldr	r0, [pc, #40]	; (8003218 <ltc6812_SPIInit+0xb4>)
 80031f0:	f006 f9c5 	bl	800957e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 80031f4:	2064      	movs	r0, #100	; 0x64
 80031f6:	f000 f813 	bl	8003220 <ltc6812_Delay>
	ltc6812_CS_SET(ltc6812_CS_PIN);
 80031fa:	2201      	movs	r2, #1
 80031fc:	2101      	movs	r1, #1
 80031fe:	4806      	ldr	r0, [pc, #24]	; (8003218 <ltc6812_SPIInit+0xb4>)
 8003200:	f006 f9bd 	bl	800957e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 8003204:	2064      	movs	r0, #100	; 0x64
 8003206:	f000 f80b 	bl	8003220 <ltc6812_Delay>

	ltc6812_Delay(20000);
 800320a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800320e:	f000 f807 	bl	8003220 <ltc6812_Delay>
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40010c00 	.word	0x40010c00
 800321c:	40011000 	.word	0x40011000

08003220 <ltc6812_Delay>:

void ltc6812_Delay(volatile uint32_t nCount)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	while(nCount > 0) { nCount--; }
 8003228:	e002      	b.n	8003230 <ltc6812_Delay+0x10>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3b01      	subs	r3, #1
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f9      	bne.n	800322a <ltc6812_Delay+0xa>
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <ltc6812_Write8>:

void ltc6812_Write8(uint8_t out)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	//ltc6812_CS_SET(CS_Pin);
	//ltc6812_MOSI_RESET;
	ltc6812_SCK_RESET;
 800324a:	2200      	movs	r2, #0
 800324c:	2108      	movs	r1, #8
 800324e:	481a      	ldr	r0, [pc, #104]	; (80032b8 <ltc6812_Write8+0x78>)
 8003250:	f006 f995 	bl	800957e <HAL_GPIO_WritePin>
	//ltc6812_CS_RESET(CS_Pin);
	//ltc6812_Delay(10);
	for (i = 0; i < 8; i++) {
 8003254:	2300      	movs	r3, #0
 8003256:	73fb      	strb	r3, [r7, #15]
 8003258:	e027      	b.n	80032aa <ltc6812_Write8+0x6a>
		if ((out >> (7-i)) & 0x01) {
 800325a:	79fa      	ldrb	r2, [r7, #7]
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	f1c3 0307 	rsb	r3, r3, #7
 8003262:	fa42 f303 	asr.w	r3, r2, r3
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <ltc6812_Write8+0x3a>
			ltc6812_MOSI_SET;
 800326e:	2201      	movs	r2, #1
 8003270:	2120      	movs	r1, #32
 8003272:	4811      	ldr	r0, [pc, #68]	; (80032b8 <ltc6812_Write8+0x78>)
 8003274:	f006 f983 	bl	800957e <HAL_GPIO_WritePin>
 8003278:	e004      	b.n	8003284 <ltc6812_Write8+0x44>
		} else {
			ltc6812_MOSI_RESET;
 800327a:	2200      	movs	r2, #0
 800327c:	2120      	movs	r1, #32
 800327e:	480e      	ldr	r0, [pc, #56]	; (80032b8 <ltc6812_Write8+0x78>)
 8003280:	f006 f97d 	bl	800957e <HAL_GPIO_WritePin>
		}
		ltc6812_Delay(10);
 8003284:	200a      	movs	r0, #10
 8003286:	f7ff ffcb 	bl	8003220 <ltc6812_Delay>
		ltc6812_SCK_SET;
 800328a:	2201      	movs	r2, #1
 800328c:	2108      	movs	r1, #8
 800328e:	480a      	ldr	r0, [pc, #40]	; (80032b8 <ltc6812_Write8+0x78>)
 8003290:	f006 f975 	bl	800957e <HAL_GPIO_WritePin>
		ltc6812_Delay(10);
 8003294:	200a      	movs	r0, #10
 8003296:	f7ff ffc3 	bl	8003220 <ltc6812_Delay>
		ltc6812_SCK_RESET;
 800329a:	2200      	movs	r2, #0
 800329c:	2108      	movs	r1, #8
 800329e:	4806      	ldr	r0, [pc, #24]	; (80032b8 <ltc6812_Write8+0x78>)
 80032a0:	f006 f96d 	bl	800957e <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	3301      	adds	r3, #1
 80032a8:	73fb      	strb	r3, [r7, #15]
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	2b07      	cmp	r3, #7
 80032ae:	d9d4      	bls.n	800325a <ltc6812_Write8+0x1a>
	}
}
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40010c00 	.word	0x40010c00

080032bc <ltc6812_Read8>:
		ltc6812_SCK_SET;
	}
}

uint8_t ltc6812_Read8()
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t temp = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	71bb      	strb	r3, [r7, #6]
	//ltc6812_Delay(10);
	//ltc6812_CS_RESET(CS_Pin);
	ltc6812_MOSI_RESET;
 80032c6:	2200      	movs	r2, #0
 80032c8:	2120      	movs	r1, #32
 80032ca:	481e      	ldr	r0, [pc, #120]	; (8003344 <ltc6812_Read8+0x88>)
 80032cc:	f006 f957 	bl	800957e <HAL_GPIO_WritePin>
	ltc6812_SCK_RESET;
 80032d0:	2200      	movs	r2, #0
 80032d2:	2108      	movs	r1, #8
 80032d4:	481b      	ldr	r0, [pc, #108]	; (8003344 <ltc6812_Read8+0x88>)
 80032d6:	f006 f952 	bl	800957e <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 80032da:	2300      	movs	r3, #0
 80032dc:	71fb      	strb	r3, [r7, #7]
 80032de:	e028      	b.n	8003332 <ltc6812_Read8+0x76>
		ltc6812_Delay(10);
 80032e0:	200a      	movs	r0, #10
 80032e2:	f7ff ff9d 	bl	8003220 <ltc6812_Delay>
		ltc6812_SCK_SET;
 80032e6:	2201      	movs	r2, #1
 80032e8:	2108      	movs	r1, #8
 80032ea:	4816      	ldr	r0, [pc, #88]	; (8003344 <ltc6812_Read8+0x88>)
 80032ec:	f006 f947 	bl	800957e <HAL_GPIO_WritePin>
		ltc6812_Delay(10);
 80032f0:	200a      	movs	r0, #10
 80032f2:	f7ff ff95 	bl	8003220 <ltc6812_Delay>
		if (ltc6812_MISO == GPIO_PIN_SET) {
 80032f6:	2110      	movs	r1, #16
 80032f8:	4812      	ldr	r0, [pc, #72]	; (8003344 <ltc6812_Read8+0x88>)
 80032fa:	f006 f929 	bl	8009550 <HAL_GPIO_ReadPin>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10b      	bne.n	800331c <ltc6812_Read8+0x60>
			temp |= (1 << (7-i));
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	f1c3 0307 	rsb	r3, r3, #7
 800330a:	2201      	movs	r2, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	b25a      	sxtb	r2, r3
 8003312:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003316:	4313      	orrs	r3, r2
 8003318:	b25b      	sxtb	r3, r3
 800331a:	71bb      	strb	r3, [r7, #6]
		}
		ltc6812_Delay(10);
 800331c:	200a      	movs	r0, #10
 800331e:	f7ff ff7f 	bl	8003220 <ltc6812_Delay>
		ltc6812_SCK_RESET;
 8003322:	2200      	movs	r2, #0
 8003324:	2108      	movs	r1, #8
 8003326:	4807      	ldr	r0, [pc, #28]	; (8003344 <ltc6812_Read8+0x88>)
 8003328:	f006 f929 	bl	800957e <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	3301      	adds	r3, #1
 8003330:	71fb      	strb	r3, [r7, #7]
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	2b07      	cmp	r3, #7
 8003336:	d9d3      	bls.n	80032e0 <ltc6812_Read8+0x24>
	}
	//ltc6812_CS_SET(CS_Pin);

	return temp;
 8003338:	79bb      	ldrb	r3, [r7, #6]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40010c00 	.word	0x40010c00

08003348 <LTC681x_adcv_emul>:

void LTC681x_adcv_emul( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH //Cell Channels to be measured
                 )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	71fb      	strb	r3, [r7, #7]
 8003352:	460b      	mov	r3, r1
 8003354:	71bb      	strb	r3, [r7, #6]
 8003356:	4613      	mov	r3, r2
 8003358:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;
	
	md_bits = (MD & 0x02) >> 1;
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	105b      	asrs	r3, r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	3302      	adds	r3, #2
 800336a:	b2db      	uxtb	r3, r3
 800336c:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	01db      	lsls	r3, r3, #7
 8003372:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8003374:	79bb      	ldrb	r3, [r7, #6]
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	b2da      	uxtb	r2, r3
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	4413      	add	r3, r2
 800337e:	b2da      	uxtb	r2, r3
 8003380:	797b      	ldrb	r3, [r7, #5]
 8003382:	4413      	add	r3, r2
 8003384:	b2db      	uxtb	r3, r3
 8003386:	3360      	adds	r3, #96	; 0x60
 8003388:	b2db      	uxtb	r3, r3
 800338a:	737b      	strb	r3, [r7, #13]
	
	cmd_68_emul(cmd);
 800338c:	f107 030c 	add.w	r3, r7, #12
 8003390:	4618      	mov	r0, r3
 8003392:	f000 f805 	bl	80033a0 <cmd_68_emul>
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <cmd_68_emul>:

void cmd_68_emul(uint8_t tx_cmd[2])
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4];
    uint16_t cmd_pec;
//    uint8_t md_bits;

    cmd[0] = tx_cmd[0];
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	723b      	strb	r3, [r7, #8]
    cmd[1] =  tx_cmd[1];
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	785b      	ldrb	r3, [r3, #1]
 80033b2:	727b      	strb	r3, [r7, #9]
    cmd_pec = pec15_calc_emul(2, cmd);
 80033b4:	f107 0308 	add.w	r3, r7, #8
 80033b8:	4619      	mov	r1, r3
 80033ba:	2002      	movs	r0, #2
 80033bc:	f000 f82a 	bl	8003414 <pec15_calc_emul>
 80033c0:	4603      	mov	r3, r0
 80033c2:	81fb      	strh	r3, [r7, #14]
    cmd[2] = (uint8_t)(cmd_pec >> 8);
 80033c4:	89fb      	ldrh	r3, [r7, #14]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t)(cmd_pec);
 80033ce:	89fb      	ldrh	r3, [r7, #14]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	72fb      	strb	r3, [r7, #11]
    ltc6812_CS_RESET(ltc6812_CS_PIN);
 80033d4:	2200      	movs	r2, #0
 80033d6:	2101      	movs	r1, #1
 80033d8:	480d      	ldr	r0, [pc, #52]	; (8003410 <cmd_68_emul+0x70>)
 80033da:	f006 f8d0 	bl	800957e <HAL_GPIO_WritePin>
    ltc6812_Write8(cmd[0]);
 80033de:	7a3b      	ldrb	r3, [r7, #8]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff2d 	bl	8003240 <ltc6812_Write8>
		ltc6812_Write8(cmd[1]);
 80033e6:	7a7b      	ldrb	r3, [r7, #9]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ff29 	bl	8003240 <ltc6812_Write8>
		ltc6812_Write8(cmd[2]);
 80033ee:	7abb      	ldrb	r3, [r7, #10]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff25 	bl	8003240 <ltc6812_Write8>
		ltc6812_Write8(cmd[3]);
 80033f6:	7afb      	ldrb	r3, [r7, #11]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff21 	bl	8003240 <ltc6812_Write8>
    ltc6812_CS_SET(ltc6812_CS_PIN);
 80033fe:	2201      	movs	r2, #1
 8003400:	2101      	movs	r1, #1
 8003402:	4803      	ldr	r0, [pc, #12]	; (8003410 <cmd_68_emul+0x70>)
 8003404:	f006 f8bb 	bl	800957e <HAL_GPIO_WritePin>

}
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40010c00 	.word	0x40010c00

08003414 <pec15_calc_emul>:


uint16_t pec15_calc_emul(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	6039      	str	r1, [r7, #0]
 800341e:	71fb      	strb	r3, [r7, #7]
    uint16_t remainder,addr;

    remainder = 16;//initialize the PEC
 8003420:	2310      	movs	r3, #16
 8003422:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i<len; i++) { // loops for each byte in data array
 8003424:	2300      	movs	r3, #0
 8003426:	737b      	strb	r3, [r7, #13]
 8003428:	e019      	b.n	800345e <pec15_calc_emul+0x4a>
        addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 800342a:	89fb      	ldrh	r3, [r7, #14]
 800342c:	09db      	lsrs	r3, r3, #7
 800342e:	b29a      	uxth	r2, r3
 8003430:	7b7b      	ldrb	r3, [r7, #13]
 8003432:	6839      	ldr	r1, [r7, #0]
 8003434:	440b      	add	r3, r1
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	4053      	eors	r3, r2
 800343c:	b29b      	uxth	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	817b      	strh	r3, [r7, #10]
//#ifdef MBED
        remainder = (remainder<<8)^crc15Table[addr];
 8003442:	89fb      	ldrh	r3, [r7, #14]
 8003444:	021b      	lsls	r3, r3, #8
 8003446:	b21a      	sxth	r2, r3
 8003448:	897b      	ldrh	r3, [r7, #10]
 800344a:	490b      	ldr	r1, [pc, #44]	; (8003478 <pec15_calc_emul+0x64>)
 800344c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003450:	b21b      	sxth	r3, r3
 8003452:	4053      	eors	r3, r2
 8003454:	b21b      	sxth	r3, r3
 8003456:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i<len; i++) { // loops for each byte in data array
 8003458:	7b7b      	ldrb	r3, [r7, #13]
 800345a:	3301      	adds	r3, #1
 800345c:	737b      	strb	r3, [r7, #13]
 800345e:	7b7a      	ldrb	r2, [r7, #13]
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	429a      	cmp	r2, r3
 8003464:	d3e1      	bcc.n	800342a <pec15_calc_emul+0x16>
//#else
//        remainder = (remainder<<8)^pgm_read_word_near(crc15Table+addr);
//#endif
    }
    return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8003466:	89fb      	ldrh	r3, [r7, #14]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	b29b      	uxth	r3, r3
}
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	0800e350 	.word	0x0800e350

0800347c <LTC681x_rdcv_reg_emul>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg_emul(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t data_out[8] //An array of the unparsed cell codes
                     )
{
 800347c:	b590      	push	{r4, r7, lr}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	603a      	str	r2, [r7, #0]
 8003486:	71fb      	strb	r3, [r7, #7]
 8003488:	460b      	mov	r3, r1
 800348a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d104      	bne.n	800349c <LTC681x_rdcv_reg_emul+0x20>
	{
		cmd[1] = 0x04;  //alamat asli 0x04
 8003492:	2304      	movs	r3, #4
 8003494:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003496:	2300      	movs	r3, #0
 8003498:	723b      	strb	r3, [r7, #8]
 800349a:	e026      	b.n	80034ea <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 2) //2: RDCVB
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d104      	bne.n	80034ac <LTC681x_rdcv_reg_emul+0x30>
	{
		cmd[1] = 0x06;
 80034a2:	2306      	movs	r3, #6
 80034a4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80034a6:	2300      	movs	r3, #0
 80034a8:	723b      	strb	r3, [r7, #8]
 80034aa:	e01e      	b.n	80034ea <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 3) //3: RDCVC
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d104      	bne.n	80034bc <LTC681x_rdcv_reg_emul+0x40>
	{
		cmd[1] = 0x08;
 80034b2:	2308      	movs	r3, #8
 80034b4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80034b6:	2300      	movs	r3, #0
 80034b8:	723b      	strb	r3, [r7, #8]
 80034ba:	e016      	b.n	80034ea <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 4) //4: RDCVD
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d104      	bne.n	80034cc <LTC681x_rdcv_reg_emul+0x50>
	{
		cmd[1] = 0x0A;
 80034c2:	230a      	movs	r3, #10
 80034c4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80034c6:	2300      	movs	r3, #0
 80034c8:	723b      	strb	r3, [r7, #8]
 80034ca:	e00e      	b.n	80034ea <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 5) //4: RDCVE
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d104      	bne.n	80034dc <LTC681x_rdcv_reg_emul+0x60>
	{
		cmd[1] = 0x09;
 80034d2:	2309      	movs	r3, #9
 80034d4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80034d6:	2300      	movs	r3, #0
 80034d8:	723b      	strb	r3, [r7, #8]
 80034da:	e006      	b.n	80034ea <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 6) //4: RDCVF
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d103      	bne.n	80034ea <LTC681x_rdcv_reg_emul+0x6e>
	{
		cmd[1] = 0x0B;
 80034e2:	230b      	movs	r3, #11
 80034e4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80034e6:	2300      	movs	r3, #0
 80034e8:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc_emul(2, cmd);
 80034ea:	f107 0308 	add.w	r3, r7, #8
 80034ee:	4619      	mov	r1, r3
 80034f0:	2002      	movs	r0, #2
 80034f2:	f7ff ff8f 	bl	8003414 <pec15_calc_emul>
 80034f6:	4603      	mov	r3, r0
 80034f8:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80034fa:	89fb      	ldrh	r3, [r7, #14]
 80034fc:	0a1b      	lsrs	r3, r3, #8
 80034fe:	b29b      	uxth	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8003504:	89fb      	ldrh	r3, [r7, #14]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	72fb      	strb	r3, [r7, #11]

	ltc6812_CS_RESET(ltc6812_CS_PIN);
 800350a:	2200      	movs	r2, #0
 800350c:	2101      	movs	r1, #1
 800350e:	4826      	ldr	r0, [pc, #152]	; (80035a8 <LTC681x_rdcv_reg_emul+0x12c>)
 8003510:	f006 f835 	bl	800957e <HAL_GPIO_WritePin>
  ltc6812_Write8(cmd[0]);
 8003514:	7a3b      	ldrb	r3, [r7, #8]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fe92 	bl	8003240 <ltc6812_Write8>
	ltc6812_Write8(cmd[1]);
 800351c:	7a7b      	ldrb	r3, [r7, #9]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fe8e 	bl	8003240 <ltc6812_Write8>
	ltc6812_Write8(cmd[2]);
 8003524:	7abb      	ldrb	r3, [r7, #10]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fe8a 	bl	8003240 <ltc6812_Write8>
	ltc6812_Write8(cmd[3]);
 800352c:	7afb      	ldrb	r3, [r7, #11]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fe86 	bl	8003240 <ltc6812_Write8>
	
	data_out[0]= ltc6812_Read8();
 8003534:	f7ff fec2 	bl	80032bc <ltc6812_Read8>
 8003538:	4603      	mov	r3, r0
 800353a:	461a      	mov	r2, r3
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	701a      	strb	r2, [r3, #0]
	data_out[1]= ltc6812_Read8();
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	1c5c      	adds	r4, r3, #1
 8003544:	f7ff feba 	bl	80032bc <ltc6812_Read8>
 8003548:	4603      	mov	r3, r0
 800354a:	7023      	strb	r3, [r4, #0]
	data_out[2]= ltc6812_Read8();
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	1c9c      	adds	r4, r3, #2
 8003550:	f7ff feb4 	bl	80032bc <ltc6812_Read8>
 8003554:	4603      	mov	r3, r0
 8003556:	7023      	strb	r3, [r4, #0]
	data_out[3]= ltc6812_Read8();
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	1cdc      	adds	r4, r3, #3
 800355c:	f7ff feae 	bl	80032bc <ltc6812_Read8>
 8003560:	4603      	mov	r3, r0
 8003562:	7023      	strb	r3, [r4, #0]
	data_out[4]= ltc6812_Read8();
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	1d1c      	adds	r4, r3, #4
 8003568:	f7ff fea8 	bl	80032bc <ltc6812_Read8>
 800356c:	4603      	mov	r3, r0
 800356e:	7023      	strb	r3, [r4, #0]
	data_out[5]= ltc6812_Read8();
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	1d5c      	adds	r4, r3, #5
 8003574:	f7ff fea2 	bl	80032bc <ltc6812_Read8>
 8003578:	4603      	mov	r3, r0
 800357a:	7023      	strb	r3, [r4, #0]
	data_out[6]= ltc6812_Read8();
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	1d9c      	adds	r4, r3, #6
 8003580:	f7ff fe9c 	bl	80032bc <ltc6812_Read8>
 8003584:	4603      	mov	r3, r0
 8003586:	7023      	strb	r3, [r4, #0]
	data_out[7]= ltc6812_Read8();
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	1ddc      	adds	r4, r3, #7
 800358c:	f7ff fe96 	bl	80032bc <ltc6812_Read8>
 8003590:	4603      	mov	r3, r0
 8003592:	7023      	strb	r3, [r4, #0]
	
  ltc6812_CS_SET(ltc6812_CS_PIN);
 8003594:	2201      	movs	r2, #1
 8003596:	2101      	movs	r1, #1
 8003598:	4803      	ldr	r0, [pc, #12]	; (80035a8 <LTC681x_rdcv_reg_emul+0x12c>)
 800359a:	f005 fff0 	bl	800957e <HAL_GPIO_WritePin>
	
}
 800359e:	bf00      	nop
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd90      	pop	{r4, r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40010c00 	.word	0x40010c00
 80035ac:	00000000 	.word	0x00000000

080035b0 <read_v_15cell>:
	cell_data[ccc]=v_cell_digi*0.0001;
	
}

void read_v_15cell(uint16_t v_cell_digi[15],float vcell_data[15])
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
		uint8_t cmd_v[8];
		uint8_t cc=0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	75fb      	strb	r3, [r7, #23]
		
		HAL_GPIO_WritePin(CS_SPI1_GPIO_Port,CS_SPI1_Pin,GPIO_PIN_RESET);
 80035be:	2200      	movs	r2, #0
 80035c0:	2101      	movs	r1, #1
 80035c2:	48c7      	ldr	r0, [pc, #796]	; (80038e0 <read_v_15cell+0x330>)
 80035c4:	f005 ffdb 	bl	800957e <HAL_GPIO_WritePin>
		cmd2[0]=0x07;
 80035c8:	4bc6      	ldr	r3, [pc, #792]	; (80038e4 <read_v_15cell+0x334>)
 80035ca:	2207      	movs	r2, #7
 80035cc:	701a      	strb	r2, [r3, #0]
		cmd2[1]=0x23;
 80035ce:	4bc5      	ldr	r3, [pc, #788]	; (80038e4 <read_v_15cell+0x334>)
 80035d0:	2223      	movs	r2, #35	; 0x23
 80035d2:	705a      	strb	r2, [r3, #1]
		cmd_68_emul(cmd2);	
 80035d4:	48c3      	ldr	r0, [pc, #780]	; (80038e4 <read_v_15cell+0x334>)
 80035d6:	f7ff fee3 	bl	80033a0 <cmd_68_emul>
		HAL_Delay(1);
 80035da:	2001      	movs	r0, #1
 80035dc:	f004 f8b0 	bl	8007740 <HAL_Delay>
		LTC681x_adcv_emul(0,1,0);
 80035e0:	2200      	movs	r2, #0
 80035e2:	2101      	movs	r1, #1
 80035e4:	2000      	movs	r0, #0
 80035e6:	f7ff feaf 	bl	8003348 <LTC681x_adcv_emul>
		HAL_Delay(700);
 80035ea:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80035ee:	f004 f8a7 	bl	8007740 <HAL_Delay>
	
		LTC681x_rdcv_reg_emul(1,1,cmd_v);
 80035f2:	f107 030c 	add.w	r3, r7, #12
 80035f6:	461a      	mov	r2, r3
 80035f8:	2101      	movs	r1, #1
 80035fa:	2001      	movs	r0, #1
 80035fc:	f7ff ff3e 	bl	800347c <LTC681x_rdcv_reg_emul>
		
		v_cell_digi[cc]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc];
 8003600:	7dfb      	ldrb	r3, [r7, #23]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	3301      	adds	r3, #1
 8003606:	f107 0218 	add.w	r2, r7, #24
 800360a:	4413      	add	r3, r2
 800360c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	7dfa      	ldrb	r2, [r7, #23]
 8003614:	0052      	lsls	r2, r2, #1
 8003616:	f107 0118 	add.w	r1, r7, #24
 800361a:	440a      	add	r2, r1
 800361c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003620:	4313      	orrs	r3, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f7fd fb3a 	bl	8000c9c <__aeabi_i2f>
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	4aaf      	ldr	r2, [pc, #700]	; (80038e8 <read_v_15cell+0x338>)
 800362c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003630:	4619      	mov	r1, r3
 8003632:	f7fd fa7d 	bl	8000b30 <__aeabi_fsub>
 8003636:	4603      	mov	r3, r0
 8003638:	4619      	mov	r1, r3
 800363a:	7dfb      	ldrb	r3, [r7, #23]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	18d4      	adds	r4, r2, r3
 8003642:	4608      	mov	r0, r1
 8003644:	f7fd fd6a 	bl	800111c <__aeabi_f2uiz>
 8003648:	4603      	mov	r3, r0
 800364a:	b29b      	uxth	r3, r3
 800364c:	8023      	strh	r3, [r4, #0]
		vcell_data[cc]=v_cell_digi[cc]*0.0001;
 800364e:	7dfb      	ldrb	r3, [r7, #23]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fc fed3 	bl	8000404 <__aeabi_i2d>
 800365e:	a39e      	add	r3, pc, #632	; (adr r3, 80038d8 <read_v_15cell+0x328>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f7fc ff38 	bl	80004d8 <__aeabi_dmul>
 8003668:	4603      	mov	r3, r0
 800366a:	460c      	mov	r4, r1
 800366c:	4618      	mov	r0, r3
 800366e:	4621      	mov	r1, r4
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	18d4      	adds	r4, r2, r3
 8003678:	f7fd fa06 	bl	8000a88 <__aeabi_d2f>
 800367c:	4603      	mov	r3, r0
 800367e:	6023      	str	r3, [r4, #0]
		cc++;
 8003680:	7dfb      	ldrb	r3, [r7, #23]
 8003682:	3301      	adds	r3, #1
 8003684:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc];
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	3301      	adds	r3, #1
 800368c:	f107 0218 	add.w	r2, r7, #24
 8003690:	4413      	add	r3, r2
 8003692:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	7dfa      	ldrb	r2, [r7, #23]
 800369a:	0052      	lsls	r2, r2, #1
 800369c:	f107 0118 	add.w	r1, r7, #24
 80036a0:	440a      	add	r2, r1
 80036a2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fd faf7 	bl	8000c9c <__aeabi_i2f>
 80036ae:	7dfb      	ldrb	r3, [r7, #23]
 80036b0:	4a8d      	ldr	r2, [pc, #564]	; (80038e8 <read_v_15cell+0x338>)
 80036b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b6:	4619      	mov	r1, r3
 80036b8:	f7fd fa3a 	bl	8000b30 <__aeabi_fsub>
 80036bc:	4603      	mov	r3, r0
 80036be:	4619      	mov	r1, r3
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	18d4      	adds	r4, r2, r3
 80036c8:	4608      	mov	r0, r1
 80036ca:	f7fd fd27 	bl	800111c <__aeabi_f2uiz>
 80036ce:	4603      	mov	r3, r0
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	8023      	strh	r3, [r4, #0]
		vcell_data[cc]=v_cell_digi[cc]*0.0001;
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fc fe90 	bl	8000404 <__aeabi_i2d>
 80036e4:	a37c      	add	r3, pc, #496	; (adr r3, 80038d8 <read_v_15cell+0x328>)
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	f7fc fef5 	bl	80004d8 <__aeabi_dmul>
 80036ee:	4603      	mov	r3, r0
 80036f0:	460c      	mov	r4, r1
 80036f2:	4618      	mov	r0, r3
 80036f4:	4621      	mov	r1, r4
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	18d4      	adds	r4, r2, r3
 80036fe:	f7fd f9c3 	bl	8000a88 <__aeabi_d2f>
 8003702:	4603      	mov	r3, r0
 8003704:	6023      	str	r3, [r4, #0]
		cc++;
 8003706:	7dfb      	ldrb	r3, [r7, #23]
 8003708:	3301      	adds	r3, #1
 800370a:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc];
 800370c:	7dfb      	ldrb	r3, [r7, #23]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	3301      	adds	r3, #1
 8003712:	f107 0218 	add.w	r2, r7, #24
 8003716:	4413      	add	r3, r2
 8003718:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	7dfa      	ldrb	r2, [r7, #23]
 8003720:	0052      	lsls	r2, r2, #1
 8003722:	f107 0118 	add.w	r1, r7, #24
 8003726:	440a      	add	r2, r1
 8003728:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800372c:	4313      	orrs	r3, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f7fd fab4 	bl	8000c9c <__aeabi_i2f>
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	4a6c      	ldr	r2, [pc, #432]	; (80038e8 <read_v_15cell+0x338>)
 8003738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373c:	4619      	mov	r1, r3
 800373e:	f7fd f9f7 	bl	8000b30 <__aeabi_fsub>
 8003742:	4603      	mov	r3, r0
 8003744:	4619      	mov	r1, r3
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	18d4      	adds	r4, r2, r3
 800374e:	4608      	mov	r0, r1
 8003750:	f7fd fce4 	bl	800111c <__aeabi_f2uiz>
 8003754:	4603      	mov	r3, r0
 8003756:	b29b      	uxth	r3, r3
 8003758:	8023      	strh	r3, [r4, #0]
		vcell_data[cc]=v_cell_digi[cc]*0.0001;
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fc fe4d 	bl	8000404 <__aeabi_i2d>
 800376a:	a35b      	add	r3, pc, #364	; (adr r3, 80038d8 <read_v_15cell+0x328>)
 800376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003770:	f7fc feb2 	bl	80004d8 <__aeabi_dmul>
 8003774:	4603      	mov	r3, r0
 8003776:	460c      	mov	r4, r1
 8003778:	4618      	mov	r0, r3
 800377a:	4621      	mov	r1, r4
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	18d4      	adds	r4, r2, r3
 8003784:	f7fd f980 	bl	8000a88 <__aeabi_d2f>
 8003788:	4603      	mov	r3, r0
 800378a:	6023      	str	r3, [r4, #0]
		cc++;
 800378c:	7dfb      	ldrb	r3, [r7, #23]
 800378e:	3301      	adds	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(2,1,cmd_v);
 8003792:	f107 030c 	add.w	r3, r7, #12
 8003796:	461a      	mov	r2, r3
 8003798:	2101      	movs	r1, #1
 800379a:	2002      	movs	r0, #2
 800379c:	f7ff fe6e 	bl	800347c <LTC681x_rdcv_reg_emul>
		cc=0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+3]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+3];
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	3301      	adds	r3, #1
 80037aa:	f107 0218 	add.w	r2, r7, #24
 80037ae:	4413      	add	r3, r2
 80037b0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	7dfa      	ldrb	r2, [r7, #23]
 80037b8:	0052      	lsls	r2, r2, #1
 80037ba:	f107 0118 	add.w	r1, r7, #24
 80037be:	440a      	add	r2, r1
 80037c0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd fa68 	bl	8000c9c <__aeabi_i2f>
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
 80037ce:	3303      	adds	r3, #3
 80037d0:	4a45      	ldr	r2, [pc, #276]	; (80038e8 <read_v_15cell+0x338>)
 80037d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d6:	4619      	mov	r1, r3
 80037d8:	f7fd f9aa 	bl	8000b30 <__aeabi_fsub>
 80037dc:	4603      	mov	r3, r0
 80037de:	4619      	mov	r1, r3
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
 80037e2:	3303      	adds	r3, #3
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	18d4      	adds	r4, r2, r3
 80037ea:	4608      	mov	r0, r1
 80037ec:	f7fd fc96 	bl	800111c <__aeabi_f2uiz>
 80037f0:	4603      	mov	r3, r0
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+3]=v_cell_digi[cc+3]*0.0001;
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	3303      	adds	r3, #3
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	4413      	add	r3, r2
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fc fdfe 	bl	8000404 <__aeabi_i2d>
 8003808:	a333      	add	r3, pc, #204	; (adr r3, 80038d8 <read_v_15cell+0x328>)
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f7fc fe63 	bl	80004d8 <__aeabi_dmul>
 8003812:	4603      	mov	r3, r0
 8003814:	460c      	mov	r4, r1
 8003816:	4618      	mov	r0, r3
 8003818:	4621      	mov	r1, r4
 800381a:	7dfb      	ldrb	r3, [r7, #23]
 800381c:	3303      	adds	r3, #3
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	18d4      	adds	r4, r2, r3
 8003824:	f7fd f930 	bl	8000a88 <__aeabi_d2f>
 8003828:	4603      	mov	r3, r0
 800382a:	6023      	str	r3, [r4, #0]
		cc++;
 800382c:	7dfb      	ldrb	r3, [r7, #23]
 800382e:	3301      	adds	r3, #1
 8003830:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+3]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+3];
 8003832:	7dfb      	ldrb	r3, [r7, #23]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	3301      	adds	r3, #1
 8003838:	f107 0218 	add.w	r2, r7, #24
 800383c:	4413      	add	r3, r2
 800383e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	7dfa      	ldrb	r2, [r7, #23]
 8003846:	0052      	lsls	r2, r2, #1
 8003848:	f107 0118 	add.w	r1, r7, #24
 800384c:	440a      	add	r2, r1
 800384e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003852:	4313      	orrs	r3, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fa21 	bl	8000c9c <__aeabi_i2f>
 800385a:	7dfb      	ldrb	r3, [r7, #23]
 800385c:	3303      	adds	r3, #3
 800385e:	4a22      	ldr	r2, [pc, #136]	; (80038e8 <read_v_15cell+0x338>)
 8003860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003864:	4619      	mov	r1, r3
 8003866:	f7fd f963 	bl	8000b30 <__aeabi_fsub>
 800386a:	4603      	mov	r3, r0
 800386c:	4619      	mov	r1, r3
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	3303      	adds	r3, #3
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	18d4      	adds	r4, r2, r3
 8003878:	4608      	mov	r0, r1
 800387a:	f7fd fc4f 	bl	800111c <__aeabi_f2uiz>
 800387e:	4603      	mov	r3, r0
 8003880:	b29b      	uxth	r3, r3
 8003882:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+3]=v_cell_digi[cc+3]*0.0001;
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	3303      	adds	r3, #3
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4413      	add	r3, r2
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7fc fdb7 	bl	8000404 <__aeabi_i2d>
 8003896:	a310      	add	r3, pc, #64	; (adr r3, 80038d8 <read_v_15cell+0x328>)
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	f7fc fe1c 	bl	80004d8 <__aeabi_dmul>
 80038a0:	4603      	mov	r3, r0
 80038a2:	460c      	mov	r4, r1
 80038a4:	4618      	mov	r0, r3
 80038a6:	4621      	mov	r1, r4
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
 80038aa:	3303      	adds	r3, #3
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	18d4      	adds	r4, r2, r3
 80038b2:	f7fd f8e9 	bl	8000a88 <__aeabi_d2f>
 80038b6:	4603      	mov	r3, r0
 80038b8:	6023      	str	r3, [r4, #0]
		cc++;
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	3301      	adds	r3, #1
 80038be:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+3]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+3];
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	3301      	adds	r3, #1
 80038c6:	f107 0218 	add.w	r2, r7, #24
 80038ca:	4413      	add	r3, r2
 80038cc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	e00b      	b.n	80038ec <read_v_15cell+0x33c>
 80038d4:	f3af 8000 	nop.w
 80038d8:	eb1c432d 	.word	0xeb1c432d
 80038dc:	3f1a36e2 	.word	0x3f1a36e2
 80038e0:	40010c00 	.word	0x40010c00
 80038e4:	20000bec 	.word	0x20000bec
 80038e8:	20000014 	.word	0x20000014
 80038ec:	7dfa      	ldrb	r2, [r7, #23]
 80038ee:	0052      	lsls	r2, r2, #1
 80038f0:	f107 0118 	add.w	r1, r7, #24
 80038f4:	440a      	add	r2, r1
 80038f6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fd f9cd 	bl	8000c9c <__aeabi_i2f>
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	3303      	adds	r3, #3
 8003906:	4ac6      	ldr	r2, [pc, #792]	; (8003c20 <read_v_15cell+0x670>)
 8003908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390c:	4619      	mov	r1, r3
 800390e:	f7fd f90f 	bl	8000b30 <__aeabi_fsub>
 8003912:	4603      	mov	r3, r0
 8003914:	4619      	mov	r1, r3
 8003916:	7dfb      	ldrb	r3, [r7, #23]
 8003918:	3303      	adds	r3, #3
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	18d4      	adds	r4, r2, r3
 8003920:	4608      	mov	r0, r1
 8003922:	f7fd fbfb 	bl	800111c <__aeabi_f2uiz>
 8003926:	4603      	mov	r3, r0
 8003928:	b29b      	uxth	r3, r3
 800392a:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+3]=v_cell_digi[cc+3]*0.0001;
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	3303      	adds	r3, #3
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7fc fd63 	bl	8000404 <__aeabi_i2d>
 800393e:	a3b6      	add	r3, pc, #728	; (adr r3, 8003c18 <read_v_15cell+0x668>)
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f7fc fdc8 	bl	80004d8 <__aeabi_dmul>
 8003948:	4603      	mov	r3, r0
 800394a:	460c      	mov	r4, r1
 800394c:	4618      	mov	r0, r3
 800394e:	4621      	mov	r1, r4
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	3303      	adds	r3, #3
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	18d4      	adds	r4, r2, r3
 800395a:	f7fd f895 	bl	8000a88 <__aeabi_d2f>
 800395e:	4603      	mov	r3, r0
 8003960:	6023      	str	r3, [r4, #0]
		cc++;
 8003962:	7dfb      	ldrb	r3, [r7, #23]
 8003964:	3301      	adds	r3, #1
 8003966:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(3,1,cmd_v);
 8003968:	f107 030c 	add.w	r3, r7, #12
 800396c:	461a      	mov	r2, r3
 800396e:	2101      	movs	r1, #1
 8003970:	2003      	movs	r0, #3
 8003972:	f7ff fd83 	bl	800347c <LTC681x_rdcv_reg_emul>
		cc=0;
 8003976:	2300      	movs	r3, #0
 8003978:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+6]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+6];
 800397a:	7dfb      	ldrb	r3, [r7, #23]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	3301      	adds	r3, #1
 8003980:	f107 0218 	add.w	r2, r7, #24
 8003984:	4413      	add	r3, r2
 8003986:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	7dfa      	ldrb	r2, [r7, #23]
 800398e:	0052      	lsls	r2, r2, #1
 8003990:	f107 0118 	add.w	r1, r7, #24
 8003994:	440a      	add	r2, r1
 8003996:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800399a:	4313      	orrs	r3, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f7fd f97d 	bl	8000c9c <__aeabi_i2f>
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
 80039a4:	3306      	adds	r3, #6
 80039a6:	4a9e      	ldr	r2, [pc, #632]	; (8003c20 <read_v_15cell+0x670>)
 80039a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ac:	4619      	mov	r1, r3
 80039ae:	f7fd f8bf 	bl	8000b30 <__aeabi_fsub>
 80039b2:	4603      	mov	r3, r0
 80039b4:	4619      	mov	r1, r3
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
 80039b8:	3306      	adds	r3, #6
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	18d4      	adds	r4, r2, r3
 80039c0:	4608      	mov	r0, r1
 80039c2:	f7fd fbab 	bl	800111c <__aeabi_f2uiz>
 80039c6:	4603      	mov	r3, r0
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+6]=v_cell_digi[cc+6]*0.0001;
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
 80039ce:	3306      	adds	r3, #6
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	4413      	add	r3, r2
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fc fd13 	bl	8000404 <__aeabi_i2d>
 80039de:	a38e      	add	r3, pc, #568	; (adr r3, 8003c18 <read_v_15cell+0x668>)
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f7fc fd78 	bl	80004d8 <__aeabi_dmul>
 80039e8:	4603      	mov	r3, r0
 80039ea:	460c      	mov	r4, r1
 80039ec:	4618      	mov	r0, r3
 80039ee:	4621      	mov	r1, r4
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
 80039f2:	3306      	adds	r3, #6
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	18d4      	adds	r4, r2, r3
 80039fa:	f7fd f845 	bl	8000a88 <__aeabi_d2f>
 80039fe:	4603      	mov	r3, r0
 8003a00:	6023      	str	r3, [r4, #0]
		cc++;
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
 8003a04:	3301      	adds	r3, #1
 8003a06:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+6]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+6];
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f107 0218 	add.w	r2, r7, #24
 8003a12:	4413      	add	r3, r2
 8003a14:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003a18:	021b      	lsls	r3, r3, #8
 8003a1a:	7dfa      	ldrb	r2, [r7, #23]
 8003a1c:	0052      	lsls	r2, r2, #1
 8003a1e:	f107 0118 	add.w	r1, r7, #24
 8003a22:	440a      	add	r2, r1
 8003a24:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd f936 	bl	8000c9c <__aeabi_i2f>
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	3306      	adds	r3, #6
 8003a34:	4a7a      	ldr	r2, [pc, #488]	; (8003c20 <read_v_15cell+0x670>)
 8003a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	f7fd f878 	bl	8000b30 <__aeabi_fsub>
 8003a40:	4603      	mov	r3, r0
 8003a42:	4619      	mov	r1, r3
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
 8003a46:	3306      	adds	r3, #6
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	18d4      	adds	r4, r2, r3
 8003a4e:	4608      	mov	r0, r1
 8003a50:	f7fd fb64 	bl	800111c <__aeabi_f2uiz>
 8003a54:	4603      	mov	r3, r0
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+6]=v_cell_digi[cc+6]*0.0001;
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
 8003a5c:	3306      	adds	r3, #6
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4413      	add	r3, r2
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fc fccc 	bl	8000404 <__aeabi_i2d>
 8003a6c:	a36a      	add	r3, pc, #424	; (adr r3, 8003c18 <read_v_15cell+0x668>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	f7fc fd31 	bl	80004d8 <__aeabi_dmul>
 8003a76:	4603      	mov	r3, r0
 8003a78:	460c      	mov	r4, r1
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	7dfb      	ldrb	r3, [r7, #23]
 8003a80:	3306      	adds	r3, #6
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	18d4      	adds	r4, r2, r3
 8003a88:	f7fc fffe 	bl	8000a88 <__aeabi_d2f>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	6023      	str	r3, [r4, #0]
		cc++;
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	3301      	adds	r3, #1
 8003a94:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+6]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+6];
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f107 0218 	add.w	r2, r7, #24
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	7dfa      	ldrb	r2, [r7, #23]
 8003aaa:	0052      	lsls	r2, r2, #1
 8003aac:	f107 0118 	add.w	r1, r7, #24
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fd f8ef 	bl	8000c9c <__aeabi_i2f>
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
 8003ac0:	3306      	adds	r3, #6
 8003ac2:	4a57      	ldr	r2, [pc, #348]	; (8003c20 <read_v_15cell+0x670>)
 8003ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f7fd f831 	bl	8000b30 <__aeabi_fsub>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	3306      	adds	r3, #6
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	18d4      	adds	r4, r2, r3
 8003adc:	4608      	mov	r0, r1
 8003ade:	f7fd fb1d 	bl	800111c <__aeabi_f2uiz>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+6]=v_cell_digi[cc+6]*0.0001;
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	3306      	adds	r3, #6
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fc fc85 	bl	8000404 <__aeabi_i2d>
 8003afa:	a347      	add	r3, pc, #284	; (adr r3, 8003c18 <read_v_15cell+0x668>)
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	f7fc fcea 	bl	80004d8 <__aeabi_dmul>
 8003b04:	4603      	mov	r3, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	4618      	mov	r0, r3
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	3306      	adds	r3, #6
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	18d4      	adds	r4, r2, r3
 8003b16:	f7fc ffb7 	bl	8000a88 <__aeabi_d2f>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	6023      	str	r3, [r4, #0]
		cc++;
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
 8003b20:	3301      	adds	r3, #1
 8003b22:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(4,1,cmd_v);
 8003b24:	f107 030c 	add.w	r3, r7, #12
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	2004      	movs	r0, #4
 8003b2e:	f7ff fca5 	bl	800347c <LTC681x_rdcv_reg_emul>
		cc=0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+9]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+9];
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f107 0218 	add.w	r2, r7, #24
 8003b40:	4413      	add	r3, r2
 8003b42:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	7dfa      	ldrb	r2, [r7, #23]
 8003b4a:	0052      	lsls	r2, r2, #1
 8003b4c:	f107 0118 	add.w	r1, r7, #24
 8003b50:	440a      	add	r2, r1
 8003b52:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fd f89f 	bl	8000c9c <__aeabi_i2f>
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
 8003b60:	3309      	adds	r3, #9
 8003b62:	4a2f      	ldr	r2, [pc, #188]	; (8003c20 <read_v_15cell+0x670>)
 8003b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	f7fc ffe1 	bl	8000b30 <__aeabi_fsub>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4619      	mov	r1, r3
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
 8003b74:	3309      	adds	r3, #9
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	18d4      	adds	r4, r2, r3
 8003b7c:	4608      	mov	r0, r1
 8003b7e:	f7fd facd 	bl	800111c <__aeabi_f2uiz>
 8003b82:	4603      	mov	r3, r0
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+9]=v_cell_digi[cc+9]*0.0001;
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
 8003b8a:	3309      	adds	r3, #9
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4413      	add	r3, r2
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fc fc35 	bl	8000404 <__aeabi_i2d>
 8003b9a:	a31f      	add	r3, pc, #124	; (adr r3, 8003c18 <read_v_15cell+0x668>)
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	f7fc fc9a 	bl	80004d8 <__aeabi_dmul>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	4618      	mov	r0, r3
 8003baa:	4621      	mov	r1, r4
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	3309      	adds	r3, #9
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	18d4      	adds	r4, r2, r3
 8003bb6:	f7fc ff67 	bl	8000a88 <__aeabi_d2f>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	6023      	str	r3, [r4, #0]
		cc++;
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+9]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+9];
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	3301      	adds	r3, #1
 8003bca:	f107 0218 	add.w	r2, r7, #24
 8003bce:	4413      	add	r3, r2
 8003bd0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	7dfa      	ldrb	r2, [r7, #23]
 8003bd8:	0052      	lsls	r2, r2, #1
 8003bda:	f107 0118 	add.w	r1, r7, #24
 8003bde:	440a      	add	r2, r1
 8003be0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fd f858 	bl	8000c9c <__aeabi_i2f>
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	3309      	adds	r3, #9
 8003bf0:	4a0b      	ldr	r2, [pc, #44]	; (8003c20 <read_v_15cell+0x670>)
 8003bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f7fc ff9a 	bl	8000b30 <__aeabi_fsub>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4619      	mov	r1, r3
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
 8003c02:	3309      	adds	r3, #9
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	18d4      	adds	r4, r2, r3
 8003c0a:	4608      	mov	r0, r1
 8003c0c:	f7fd fa86 	bl	800111c <__aeabi_f2uiz>
 8003c10:	4603      	mov	r3, r0
 8003c12:	e007      	b.n	8003c24 <read_v_15cell+0x674>
 8003c14:	f3af 8000 	nop.w
 8003c18:	eb1c432d 	.word	0xeb1c432d
 8003c1c:	3f1a36e2 	.word	0x3f1a36e2
 8003c20:	20000014 	.word	0x20000014
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+9]=v_cell_digi[cc+9]*0.0001;
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	3309      	adds	r3, #9
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fc fbe5 	bl	8000404 <__aeabi_i2d>
 8003c3a:	a3a1      	add	r3, pc, #644	; (adr r3, 8003ec0 <read_v_15cell+0x910>)
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f7fc fc4a 	bl	80004d8 <__aeabi_dmul>
 8003c44:	4603      	mov	r3, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	4618      	mov	r0, r3
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	3309      	adds	r3, #9
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	18d4      	adds	r4, r2, r3
 8003c56:	f7fc ff17 	bl	8000a88 <__aeabi_d2f>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	6023      	str	r3, [r4, #0]
		cc++;
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
 8003c60:	3301      	adds	r3, #1
 8003c62:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+9]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+9];
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	3301      	adds	r3, #1
 8003c6a:	f107 0218 	add.w	r2, r7, #24
 8003c6e:	4413      	add	r3, r2
 8003c70:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	7dfa      	ldrb	r2, [r7, #23]
 8003c78:	0052      	lsls	r2, r2, #1
 8003c7a:	f107 0118 	add.w	r1, r7, #24
 8003c7e:	440a      	add	r2, r1
 8003c80:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fd f808 	bl	8000c9c <__aeabi_i2f>
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	3309      	adds	r3, #9
 8003c90:	4a8d      	ldr	r2, [pc, #564]	; (8003ec8 <read_v_15cell+0x918>)
 8003c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c96:	4619      	mov	r1, r3
 8003c98:	f7fc ff4a 	bl	8000b30 <__aeabi_fsub>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
 8003ca2:	3309      	adds	r3, #9
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	18d4      	adds	r4, r2, r3
 8003caa:	4608      	mov	r0, r1
 8003cac:	f7fd fa36 	bl	800111c <__aeabi_f2uiz>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+9]=v_cell_digi[cc+9]*0.0001;
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
 8003cb8:	3309      	adds	r3, #9
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fc fb9e 	bl	8000404 <__aeabi_i2d>
 8003cc8:	a37d      	add	r3, pc, #500	; (adr r3, 8003ec0 <read_v_15cell+0x910>)
 8003cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cce:	f7fc fc03 	bl	80004d8 <__aeabi_dmul>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	460c      	mov	r4, r1
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	4621      	mov	r1, r4
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
 8003cdc:	3309      	adds	r3, #9
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	18d4      	adds	r4, r2, r3
 8003ce4:	f7fc fed0 	bl	8000a88 <__aeabi_d2f>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	6023      	str	r3, [r4, #0]
		cc++;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(5,1,cmd_v);
 8003cf2:	f107 030c 	add.w	r3, r7, #12
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	2005      	movs	r0, #5
 8003cfc:	f7ff fbbe 	bl	800347c <LTC681x_rdcv_reg_emul>
		cc=0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+12]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+12];
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f107 0218 	add.w	r2, r7, #24
 8003d0e:	4413      	add	r3, r2
 8003d10:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	7dfa      	ldrb	r2, [r7, #23]
 8003d18:	0052      	lsls	r2, r2, #1
 8003d1a:	f107 0118 	add.w	r1, r7, #24
 8003d1e:	440a      	add	r2, r1
 8003d20:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fc ffb8 	bl	8000c9c <__aeabi_i2f>
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	330c      	adds	r3, #12
 8003d30:	4a65      	ldr	r2, [pc, #404]	; (8003ec8 <read_v_15cell+0x918>)
 8003d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d36:	4619      	mov	r1, r3
 8003d38:	f7fc fefa 	bl	8000b30 <__aeabi_fsub>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4619      	mov	r1, r3
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	330c      	adds	r3, #12
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	18d4      	adds	r4, r2, r3
 8003d4a:	4608      	mov	r0, r1
 8003d4c:	f7fd f9e6 	bl	800111c <__aeabi_f2uiz>
 8003d50:	4603      	mov	r3, r0
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+12]=v_cell_digi[cc+12]*0.0001;
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4413      	add	r3, r2
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fc fb4e 	bl	8000404 <__aeabi_i2d>
 8003d68:	a355      	add	r3, pc, #340	; (adr r3, 8003ec0 <read_v_15cell+0x910>)
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f7fc fbb3 	bl	80004d8 <__aeabi_dmul>
 8003d72:	4603      	mov	r3, r0
 8003d74:	460c      	mov	r4, r1
 8003d76:	4618      	mov	r0, r3
 8003d78:	4621      	mov	r1, r4
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	18d4      	adds	r4, r2, r3
 8003d84:	f7fc fe80 	bl	8000a88 <__aeabi_d2f>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	6023      	str	r3, [r4, #0]
		cc++;
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+12]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+12];
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	3301      	adds	r3, #1
 8003d98:	f107 0218 	add.w	r2, r7, #24
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	7dfa      	ldrb	r2, [r7, #23]
 8003da6:	0052      	lsls	r2, r2, #1
 8003da8:	f107 0118 	add.w	r1, r7, #24
 8003dac:	440a      	add	r2, r1
 8003dae:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fc ff71 	bl	8000c9c <__aeabi_i2f>
 8003dba:	7dfb      	ldrb	r3, [r7, #23]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	4a42      	ldr	r2, [pc, #264]	; (8003ec8 <read_v_15cell+0x918>)
 8003dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	f7fc feb3 	bl	8000b30 <__aeabi_fsub>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4619      	mov	r1, r3
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	18d4      	adds	r4, r2, r3
 8003dd8:	4608      	mov	r0, r1
 8003dda:	f7fd f99f 	bl	800111c <__aeabi_f2uiz>
 8003dde:	4603      	mov	r3, r0
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+12]=v_cell_digi[cc+12]*0.0001;
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
 8003de6:	330c      	adds	r3, #12
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fc fb07 	bl	8000404 <__aeabi_i2d>
 8003df6:	a332      	add	r3, pc, #200	; (adr r3, 8003ec0 <read_v_15cell+0x910>)
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f7fc fb6c 	bl	80004d8 <__aeabi_dmul>
 8003e00:	4603      	mov	r3, r0
 8003e02:	460c      	mov	r4, r1
 8003e04:	4618      	mov	r0, r3
 8003e06:	4621      	mov	r1, r4
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	18d4      	adds	r4, r2, r3
 8003e12:	f7fc fe39 	bl	8000a88 <__aeabi_d2f>
 8003e16:	4603      	mov	r3, r0
 8003e18:	6023      	str	r3, [r4, #0]
		cc++;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+12]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+12];
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	3301      	adds	r3, #1
 8003e26:	f107 0218 	add.w	r2, r7, #24
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	7dfa      	ldrb	r2, [r7, #23]
 8003e34:	0052      	lsls	r2, r2, #1
 8003e36:	f107 0118 	add.w	r1, r7, #24
 8003e3a:	440a      	add	r2, r1
 8003e3c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fc ff2a 	bl	8000c9c <__aeabi_i2f>
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	330c      	adds	r3, #12
 8003e4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ec8 <read_v_15cell+0x918>)
 8003e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e52:	4619      	mov	r1, r3
 8003e54:	f7fc fe6c 	bl	8000b30 <__aeabi_fsub>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	18d4      	adds	r4, r2, r3
 8003e66:	4608      	mov	r0, r1
 8003e68:	f7fd f958 	bl	800111c <__aeabi_f2uiz>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+12]=v_cell_digi[cc+12]*0.0001;
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
 8003e74:	330c      	adds	r3, #12
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fc fac0 	bl	8000404 <__aeabi_i2d>
 8003e84:	a30e      	add	r3, pc, #56	; (adr r3, 8003ec0 <read_v_15cell+0x910>)
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f7fc fb25 	bl	80004d8 <__aeabi_dmul>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	460c      	mov	r4, r1
 8003e92:	4618      	mov	r0, r3
 8003e94:	4621      	mov	r1, r4
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	18d4      	adds	r4, r2, r3
 8003ea0:	f7fc fdf2 	bl	8000a88 <__aeabi_d2f>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	6023      	str	r3, [r4, #0]
		cc++;
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
		
		HAL_GPIO_WritePin(CS_SPI1_GPIO_Port,CS_SPI1_Pin,GPIO_PIN_SET);
 8003eae:	2201      	movs	r2, #1
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	4806      	ldr	r0, [pc, #24]	; (8003ecc <read_v_15cell+0x91c>)
 8003eb4:	f005 fb63 	bl	800957e <HAL_GPIO_WritePin>
}
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd90      	pop	{r4, r7, pc}
 8003ec0:	eb1c432d 	.word	0xeb1c432d
 8003ec4:	3f1a36e2 	.word	0x3f1a36e2
 8003ec8:	20000014 	.word	0x20000014
 8003ecc:	40010c00 	.word	0x40010c00

08003ed0 <LTC681x_wrcfga_reg_emul>:
	
}

void LTC681x_wrcfga_reg_emul( uint8_t CFGA4, uint8_t CFGA5
                     )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	460a      	mov	r2, r1
 8003eda:	71fb      	strb	r3, [r7, #7]
 8003edc:	4613      	mov	r3, r2
 8003ede:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t data_in[8];

	cmd[1] = 0x01;  //WRCFGA
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	757b      	strb	r3, [r7, #21]
	cmd[0] = 0x00;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	753b      	strb	r3, [r7, #20]
	
	cmd_pec = pec15_calc_emul(2, cmd);
 8003ee8:	f107 0314 	add.w	r3, r7, #20
 8003eec:	4619      	mov	r1, r3
 8003eee:	2002      	movs	r0, #2
 8003ef0:	f7ff fa90 	bl	8003414 <pec15_calc_emul>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	837b      	strh	r3, [r7, #26]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003ef8:	8b7b      	ldrh	r3, [r7, #26]
 8003efa:	0a1b      	lsrs	r3, r3, #8
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t)(cmd_pec);
 8003f02:	8b7b      	ldrh	r3, [r7, #26]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	75fb      	strb	r3, [r7, #23]

	ltc6812_CS_RESET(ltc6812_CS_PIN);
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	4824      	ldr	r0, [pc, #144]	; (8003fa0 <LTC681x_wrcfga_reg_emul+0xd0>)
 8003f0e:	f005 fb36 	bl	800957e <HAL_GPIO_WritePin>
  ltc6812_Write8(cmd[0]);
 8003f12:	7d3b      	ldrb	r3, [r7, #20]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff f993 	bl	8003240 <ltc6812_Write8>
	ltc6812_Write8(cmd[1]);
 8003f1a:	7d7b      	ldrb	r3, [r7, #21]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff f98f 	bl	8003240 <ltc6812_Write8>
	ltc6812_Write8(cmd[2]);
 8003f22:	7dbb      	ldrb	r3, [r7, #22]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff f98b 	bl	8003240 <ltc6812_Write8>
	ltc6812_Write8(cmd[3]);
 8003f2a:	7dfb      	ldrb	r3, [r7, #23]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff f987 	bl	8003240 <ltc6812_Write8>
	
	data_in[0]= 0x00;
 8003f32:	2300      	movs	r3, #0
 8003f34:	733b      	strb	r3, [r7, #12]
	data_in[1]= 0x00;
 8003f36:	2300      	movs	r3, #0
 8003f38:	737b      	strb	r3, [r7, #13]
	data_in[2]= 0x00;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73bb      	strb	r3, [r7, #14]
	data_in[3]= 0x00;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	73fb      	strb	r3, [r7, #15]
	data_in[4]= CFGA4;
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	743b      	strb	r3, [r7, #16]
	data_in[5]= CFGA5;
 8003f46:	79bb      	ldrb	r3, [r7, #6]
 8003f48:	747b      	strb	r3, [r7, #17]
	cmd_pec=pec15_calc_emul(6,data_in);
 8003f4a:	f107 030c 	add.w	r3, r7, #12
 8003f4e:	4619      	mov	r1, r3
 8003f50:	2006      	movs	r0, #6
 8003f52:	f7ff fa5f 	bl	8003414 <pec15_calc_emul>
 8003f56:	4603      	mov	r3, r0
 8003f58:	837b      	strh	r3, [r7, #26]
	data_in[6]= (uint8_t)(cmd_pec >> 8);
 8003f5a:	8b7b      	ldrh	r3, [r7, #26]
 8003f5c:	0a1b      	lsrs	r3, r3, #8
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	74bb      	strb	r3, [r7, #18]
	data_in[7]= (uint8_t)(cmd_pec);
 8003f64:	8b7b      	ldrh	r3, [r7, #26]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	74fb      	strb	r3, [r7, #19]
	
	for(int kl=0;kl<8;kl++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	e00a      	b.n	8003f86 <LTC681x_wrcfga_reg_emul+0xb6>
	{
		ltc6812_Write8(data_in[kl]);
 8003f70:	f107 020c 	add.w	r2, r7, #12
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	4413      	add	r3, r2
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff f960 	bl	8003240 <ltc6812_Write8>
	for(int kl=0;kl<8;kl++)
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	3301      	adds	r3, #1
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	2b07      	cmp	r3, #7
 8003f8a:	ddf1      	ble.n	8003f70 <LTC681x_wrcfga_reg_emul+0xa0>
	}
	
  ltc6812_CS_SET(ltc6812_CS_PIN);
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	2101      	movs	r1, #1
 8003f90:	4803      	ldr	r0, [pc, #12]	; (8003fa0 <LTC681x_wrcfga_reg_emul+0xd0>)
 8003f92:	f005 faf4 	bl	800957e <HAL_GPIO_WritePin>
	
}
 8003f96:	bf00      	nop
 8003f98:	3720      	adds	r7, #32
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40010c00 	.word	0x40010c00

08003fa4 <LTC681x_wrcfgb_reg_emul>:

void LTC681x_wrcfgb_reg_emul( uint8_t CFGB0
                     )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t data_in[8];

	cmd[1] = 0x24;  //WRCFGB
 8003fae:	2324      	movs	r3, #36	; 0x24
 8003fb0:	757b      	strb	r3, [r7, #21]
	cmd[0] = 0x00;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	753b      	strb	r3, [r7, #20]

	cmd_pec = pec15_calc_emul(2, cmd);
 8003fb6:	f107 0314 	add.w	r3, r7, #20
 8003fba:	4619      	mov	r1, r3
 8003fbc:	2002      	movs	r0, #2
 8003fbe:	f7ff fa29 	bl	8003414 <pec15_calc_emul>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	837b      	strh	r3, [r7, #26]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003fc6:	8b7b      	ldrh	r3, [r7, #26]
 8003fc8:	0a1b      	lsrs	r3, r3, #8
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t)(cmd_pec);
 8003fd0:	8b7b      	ldrh	r3, [r7, #26]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	75fb      	strb	r3, [r7, #23]

	ltc6812_CS_RESET(ltc6812_CS_PIN);
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2101      	movs	r1, #1
 8003fda:	4824      	ldr	r0, [pc, #144]	; (800406c <LTC681x_wrcfgb_reg_emul+0xc8>)
 8003fdc:	f005 facf 	bl	800957e <HAL_GPIO_WritePin>
  ltc6812_Write8(cmd[0]);
 8003fe0:	7d3b      	ldrb	r3, [r7, #20]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff f92c 	bl	8003240 <ltc6812_Write8>
	ltc6812_Write8(cmd[1]);
 8003fe8:	7d7b      	ldrb	r3, [r7, #21]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff f928 	bl	8003240 <ltc6812_Write8>
	ltc6812_Write8(cmd[2]);
 8003ff0:	7dbb      	ldrb	r3, [r7, #22]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff f924 	bl	8003240 <ltc6812_Write8>
	ltc6812_Write8(cmd[3]);
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff f920 	bl	8003240 <ltc6812_Write8>

	data_in[0]= CFGB0;
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	733b      	strb	r3, [r7, #12]
	data_in[1]= 0x00;
 8004004:	2300      	movs	r3, #0
 8004006:	737b      	strb	r3, [r7, #13]
	data_in[2]= 0x00;
 8004008:	2300      	movs	r3, #0
 800400a:	73bb      	strb	r3, [r7, #14]
	data_in[3]= 0x00;
 800400c:	2300      	movs	r3, #0
 800400e:	73fb      	strb	r3, [r7, #15]
	data_in[4]= 0x00;
 8004010:	2300      	movs	r3, #0
 8004012:	743b      	strb	r3, [r7, #16]
	data_in[5]= 0x00;
 8004014:	2300      	movs	r3, #0
 8004016:	747b      	strb	r3, [r7, #17]
	cmd_pec=pec15_calc_emul(6,data_in);
 8004018:	f107 030c 	add.w	r3, r7, #12
 800401c:	4619      	mov	r1, r3
 800401e:	2006      	movs	r0, #6
 8004020:	f7ff f9f8 	bl	8003414 <pec15_calc_emul>
 8004024:	4603      	mov	r3, r0
 8004026:	837b      	strh	r3, [r7, #26]
	data_in[6]= (uint8_t)(cmd_pec >> 8);
 8004028:	8b7b      	ldrh	r3, [r7, #26]
 800402a:	0a1b      	lsrs	r3, r3, #8
 800402c:	b29b      	uxth	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	74bb      	strb	r3, [r7, #18]
	data_in[7]= (uint8_t)(cmd_pec);
 8004032:	8b7b      	ldrh	r3, [r7, #26]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	74fb      	strb	r3, [r7, #19]

	for(int kl=0;kl<8;kl++)
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]
 800403c:	e00a      	b.n	8004054 <LTC681x_wrcfgb_reg_emul+0xb0>
	{
		ltc6812_Write8(data_in[kl]);
 800403e:	f107 020c 	add.w	r2, r7, #12
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff f8f9 	bl	8003240 <ltc6812_Write8>
	for(int kl=0;kl<8;kl++)
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	3301      	adds	r3, #1
 8004052:	61fb      	str	r3, [r7, #28]
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	2b07      	cmp	r3, #7
 8004058:	ddf1      	ble.n	800403e <LTC681x_wrcfgb_reg_emul+0x9a>
	}

  ltc6812_CS_SET(ltc6812_CS_PIN);
 800405a:	2201      	movs	r2, #1
 800405c:	2101      	movs	r1, #1
 800405e:	4803      	ldr	r0, [pc, #12]	; (800406c <LTC681x_wrcfgb_reg_emul+0xc8>)
 8004060:	f005 fa8d 	bl	800957e <HAL_GPIO_WritePin>

}
 8004064:	bf00      	nop
 8004066:	3720      	adds	r7, #32
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40010c00 	.word	0x40010c00

08004070 <LTC681x_balance_cell>:
  ltc6812_CS_SET(ltc6812_CS_PIN);
	
}

void LTC681x_balance_cell(uint16_t Cell_to_balance)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	80fb      	strh	r3, [r7, #6]
	uint8_t cell_balance_status;
	uint16_t temp_var;
	CFGAR4=0x00;
 800407a:	4b2f      	ldr	r3, [pc, #188]	; (8004138 <LTC681x_balance_cell+0xc8>)
 800407c:	2200      	movs	r2, #0
 800407e:	701a      	strb	r2, [r3, #0]
	CFGAR5=0x00;
 8004080:	4b2e      	ldr	r3, [pc, #184]	; (800413c <LTC681x_balance_cell+0xcc>)
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
	CFGBR0=0x00;
 8004086:	4b2e      	ldr	r3, [pc, #184]	; (8004140 <LTC681x_balance_cell+0xd0>)
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]

	for(int lm=0;lm<15;lm++)
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	e03d      	b.n	800410e <LTC681x_balance_cell+0x9e>
	{
		cell_balance_status=Cell_to_balance>>lm & 0x0001;
 8004092:	88fa      	ldrh	r2, [r7, #6]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	fa42 f303 	asr.w	r3, r2, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	72fb      	strb	r3, [r7, #11]
		if(lm<8)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b07      	cmp	r3, #7
 80040a6:	dc0d      	bgt.n	80040c4 <LTC681x_balance_cell+0x54>
		{
			temp_var=cell_balance_status<<lm;
 80040a8:	7afa      	ldrb	r2, [r7, #11]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	813b      	strh	r3, [r7, #8]
			CFGAR4+=temp_var;
 80040b2:	893b      	ldrh	r3, [r7, #8]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4b20      	ldr	r3, [pc, #128]	; (8004138 <LTC681x_balance_cell+0xc8>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	4413      	add	r3, r2
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <LTC681x_balance_cell+0xc8>)
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e01f      	b.n	8004104 <LTC681x_balance_cell+0x94>
		}
		else if(lm<12)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b0b      	cmp	r3, #11
 80040c8:	dc0e      	bgt.n	80040e8 <LTC681x_balance_cell+0x78>
		{
			temp_var=cell_balance_status<<(lm-8);
 80040ca:	7afa      	ldrb	r2, [r7, #11]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3b08      	subs	r3, #8
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	813b      	strh	r3, [r7, #8]
			CFGAR5+=temp_var;
 80040d6:	893b      	ldrh	r3, [r7, #8]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	4b18      	ldr	r3, [pc, #96]	; (800413c <LTC681x_balance_cell+0xcc>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	4413      	add	r3, r2
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	4b16      	ldr	r3, [pc, #88]	; (800413c <LTC681x_balance_cell+0xcc>)
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e00d      	b.n	8004104 <LTC681x_balance_cell+0x94>
		}
		else
		{
			temp_var=cell_balance_status<<(lm-8);
 80040e8:	7afa      	ldrb	r2, [r7, #11]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3b08      	subs	r3, #8
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	813b      	strh	r3, [r7, #8]
			CFGBR0+=temp_var;
 80040f4:	893b      	ldrh	r3, [r7, #8]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <LTC681x_balance_cell+0xd0>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	4413      	add	r3, r2
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	4b0f      	ldr	r3, [pc, #60]	; (8004140 <LTC681x_balance_cell+0xd0>)
 8004102:	701a      	strb	r2, [r3, #0]
		}
		temp_var=0;
 8004104:	2300      	movs	r3, #0
 8004106:	813b      	strh	r3, [r7, #8]
	for(int lm=0;lm<15;lm++)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3301      	adds	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b0e      	cmp	r3, #14
 8004112:	ddbe      	ble.n	8004092 <LTC681x_balance_cell+0x22>
	}

	LTC681x_wrcfga_reg_emul(CFGAR4, CFGAR5);
 8004114:	4b08      	ldr	r3, [pc, #32]	; (8004138 <LTC681x_balance_cell+0xc8>)
 8004116:	781a      	ldrb	r2, [r3, #0]
 8004118:	4b08      	ldr	r3, [pc, #32]	; (800413c <LTC681x_balance_cell+0xcc>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	4619      	mov	r1, r3
 800411e:	4610      	mov	r0, r2
 8004120:	f7ff fed6 	bl	8003ed0 <LTC681x_wrcfga_reg_emul>
	LTC681x_wrcfgb_reg_emul(CFGBR0);
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <LTC681x_balance_cell+0xd0>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff ff3b 	bl	8003fa4 <LTC681x_wrcfgb_reg_emul>

}
 800412e:	bf00      	nop
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	2000028c 	.word	0x2000028c
 800413c:	2000028d 	.word	0x2000028d
 8004140:	2000028e 	.word	0x2000028e
 8004144:	00000000 	.word	0x00000000

08004148 <get_balance_status>:

void get_balance_status(float Cell_Voltage_15data[15])
{
 8004148:	b590      	push	{r4, r7, lr}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	Cell_Voltage_Lowest=4.2;
 8004150:	4b4f      	ldr	r3, [pc, #316]	; (8004290 <get_balance_status+0x148>)
 8004152:	4a50      	ldr	r2, [pc, #320]	; (8004294 <get_balance_status+0x14c>)
 8004154:	601a      	str	r2, [r3, #0]
	balance_status=0x0000;
 8004156:	4b50      	ldr	r3, [pc, #320]	; (8004298 <get_balance_status+0x150>)
 8004158:	2200      	movs	r2, #0
 800415a:	801a      	strh	r2, [r3, #0]
	uint16_t temp_dat;
	float buffer_imbalance;


		for(int ik=0;ik<15;ik++)
 800415c:	2300      	movs	r3, #0
 800415e:	613b      	str	r3, [r7, #16]
 8004160:	e017      	b.n	8004192 <get_balance_status+0x4a>
		{
			if(Cell_Voltage_15data[ik]<Cell_Voltage_Lowest) Cell_Voltage_Lowest=Cell_Voltage_15data[ik];
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	4413      	add	r3, r2
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b48      	ldr	r3, [pc, #288]	; (8004290 <get_balance_status+0x148>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4619      	mov	r1, r3
 8004172:	4610      	mov	r0, r2
 8004174:	f7fc ff84 	bl	8001080 <__aeabi_fcmplt>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d006      	beq.n	800418c <get_balance_status+0x44>
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	4413      	add	r3, r2
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a41      	ldr	r2, [pc, #260]	; (8004290 <get_balance_status+0x148>)
 800418a:	6013      	str	r3, [r2, #0]
		for(int ik=0;ik<15;ik++)
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	3301      	adds	r3, #1
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b0e      	cmp	r3, #14
 8004196:	dde4      	ble.n	8004162 <get_balance_status+0x1a>
		}

		for(int ik=0;ik<15;ik++)
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e04a      	b.n	8004234 <get_balance_status+0xec>
		{
		   delta_vbatt[ik] = Cell_Voltage_15data[ik] - Cell_Voltage_Lowest;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	4413      	add	r3, r2
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	4b39      	ldr	r3, [pc, #228]	; (8004290 <get_balance_status+0x148>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4619      	mov	r1, r3
 80041ae:	4610      	mov	r0, r2
 80041b0:	f7fc fcbe 	bl	8000b30 <__aeabi_fsub>
 80041b4:	4603      	mov	r3, r0
 80041b6:	4619      	mov	r1, r3
 80041b8:	4a38      	ldr	r2, [pc, #224]	; (800429c <get_balance_status+0x154>)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		   buffer_imbalance+=delta_vbatt[ik];
 80041c0:	4a36      	ldr	r2, [pc, #216]	; (800429c <get_balance_status+0x154>)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c8:	4619      	mov	r1, r3
 80041ca:	6978      	ldr	r0, [r7, #20]
 80041cc:	f7fc fcb2 	bl	8000b34 <__addsf3>
 80041d0:	4603      	mov	r3, r0
 80041d2:	617b      	str	r3, [r7, #20]

		   if(delta_vbatt[ik]> 0.025 && Cell_Voltage_15data[ik]>VCELL_BALANCE_PERMITTED)
 80041d4:	4a31      	ldr	r2, [pc, #196]	; (800429c <get_balance_status+0x154>)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fc f923 	bl	8000428 <__aeabi_f2d>
 80041e2:	a327      	add	r3, pc, #156	; (adr r3, 8004280 <get_balance_status+0x138>)
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f7fc fc06 	bl	80009f8 <__aeabi_dcmpgt>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01d      	beq.n	800422e <get_balance_status+0xe6>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	4413      	add	r3, r2
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fc f913 	bl	8000428 <__aeabi_f2d>
 8004202:	a321      	add	r3, pc, #132	; (adr r3, 8004288 <get_balance_status+0x140>)
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	f7fc fbf6 	bl	80009f8 <__aeabi_dcmpgt>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00d      	beq.n	800422e <get_balance_status+0xe6>
		   {
			   temp_dat = 0x01;
 8004212:	2301      	movs	r3, #1
 8004214:	817b      	strh	r3, [r7, #10]
			   temp_dat = temp_dat << ik;
 8004216:	897a      	ldrh	r2, [r7, #10]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	817b      	strh	r3, [r7, #10]
			   balance_status= balance_status+temp_dat;
 8004220:	4b1d      	ldr	r3, [pc, #116]	; (8004298 <get_balance_status+0x150>)
 8004222:	881a      	ldrh	r2, [r3, #0]
 8004224:	897b      	ldrh	r3, [r7, #10]
 8004226:	4413      	add	r3, r2
 8004228:	b29a      	uxth	r2, r3
 800422a:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <get_balance_status+0x150>)
 800422c:	801a      	strh	r2, [r3, #0]
		for(int ik=0;ik<15;ik++)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3301      	adds	r3, #1
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b0e      	cmp	r3, #14
 8004238:	ddb1      	ble.n	800419e <get_balance_status+0x56>
		   }

		}
		persen_imbalance=buffer_imbalance*100/14.0/1.2;
 800423a:	4919      	ldr	r1, [pc, #100]	; (80042a0 <get_balance_status+0x158>)
 800423c:	6978      	ldr	r0, [r7, #20]
 800423e:	f7fc fd81 	bl	8000d44 <__aeabi_fmul>
 8004242:	4603      	mov	r3, r0
 8004244:	4618      	mov	r0, r3
 8004246:	f7fc f8ef 	bl	8000428 <__aeabi_f2d>
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <get_balance_status+0x15c>)
 8004250:	f7fc fa6c 	bl	800072c <__aeabi_ddiv>
 8004254:	4603      	mov	r3, r0
 8004256:	460c      	mov	r4, r1
 8004258:	4618      	mov	r0, r3
 800425a:	4621      	mov	r1, r4
 800425c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <get_balance_status+0x160>)
 8004262:	f7fc fa63 	bl	800072c <__aeabi_ddiv>
 8004266:	4603      	mov	r3, r0
 8004268:	460c      	mov	r4, r1
 800426a:	4618      	mov	r0, r3
 800426c:	4621      	mov	r1, r4
 800426e:	f7fc fc0b 	bl	8000a88 <__aeabi_d2f>
 8004272:	4602      	mov	r2, r0
 8004274:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <get_balance_status+0x164>)
 8004276:	601a      	str	r2, [r3, #0]


}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	bd90      	pop	{r4, r7, pc}
 8004280:	9999999a 	.word	0x9999999a
 8004284:	3f999999 	.word	0x3f999999
 8004288:	33333333 	.word	0x33333333
 800428c:	400b3333 	.word	0x400b3333
 8004290:	20000c2c 	.word	0x20000c2c
 8004294:	40866666 	.word	0x40866666
 8004298:	20000bee 	.word	0x20000bee
 800429c:	20000bf0 	.word	0x20000bf0
 80042a0:	42c80000 	.word	0x42c80000
 80042a4:	402c0000 	.word	0x402c0000
 80042a8:	3ff33333 	.word	0x3ff33333
 80042ac:	20000bb8 	.word	0x20000bb8

080042b0 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80042b6:	f000 fa19 	bl	80046ec <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80042ba:	f644 6320 	movw	r3, #20000	; 0x4e20
 80042be:	2201      	movs	r2, #1
 80042c0:	2178      	movs	r1, #120	; 0x78
 80042c2:	4858      	ldr	r0, [pc, #352]	; (8004424 <SSD1306_Init+0x174>)
 80042c4:	f005 fbc2 	bl	8009a4c <HAL_I2C_IsDeviceReady>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	e0a4      	b.n	800441c <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80042d2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80042d6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80042d8:	e002      	b.n	80042e0 <SSD1306_Init+0x30>
		p--;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3b01      	subs	r3, #1
 80042de:	607b      	str	r3, [r7, #4]
	while(p>0)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f9      	bne.n	80042da <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80042e6:	22ae      	movs	r2, #174	; 0xae
 80042e8:	2100      	movs	r1, #0
 80042ea:	2078      	movs	r0, #120	; 0x78
 80042ec:	f000 fa6c 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80042f0:	2220      	movs	r2, #32
 80042f2:	2100      	movs	r1, #0
 80042f4:	2078      	movs	r0, #120	; 0x78
 80042f6:	f000 fa67 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80042fa:	2210      	movs	r2, #16
 80042fc:	2100      	movs	r1, #0
 80042fe:	2078      	movs	r0, #120	; 0x78
 8004300:	f000 fa62 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004304:	22b0      	movs	r2, #176	; 0xb0
 8004306:	2100      	movs	r1, #0
 8004308:	2078      	movs	r0, #120	; 0x78
 800430a:	f000 fa5d 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800430e:	22c8      	movs	r2, #200	; 0xc8
 8004310:	2100      	movs	r1, #0
 8004312:	2078      	movs	r0, #120	; 0x78
 8004314:	f000 fa58 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8004318:	2200      	movs	r2, #0
 800431a:	2100      	movs	r1, #0
 800431c:	2078      	movs	r0, #120	; 0x78
 800431e:	f000 fa53 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8004322:	2210      	movs	r2, #16
 8004324:	2100      	movs	r1, #0
 8004326:	2078      	movs	r0, #120	; 0x78
 8004328:	f000 fa4e 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800432c:	2240      	movs	r2, #64	; 0x40
 800432e:	2100      	movs	r1, #0
 8004330:	2078      	movs	r0, #120	; 0x78
 8004332:	f000 fa49 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8004336:	2281      	movs	r2, #129	; 0x81
 8004338:	2100      	movs	r1, #0
 800433a:	2078      	movs	r0, #120	; 0x78
 800433c:	f000 fa44 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004340:	22ff      	movs	r2, #255	; 0xff
 8004342:	2100      	movs	r1, #0
 8004344:	2078      	movs	r0, #120	; 0x78
 8004346:	f000 fa3f 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800434a:	22a1      	movs	r2, #161	; 0xa1
 800434c:	2100      	movs	r1, #0
 800434e:	2078      	movs	r0, #120	; 0x78
 8004350:	f000 fa3a 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004354:	22a6      	movs	r2, #166	; 0xa6
 8004356:	2100      	movs	r1, #0
 8004358:	2078      	movs	r0, #120	; 0x78
 800435a:	f000 fa35 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800435e:	22a8      	movs	r2, #168	; 0xa8
 8004360:	2100      	movs	r1, #0
 8004362:	2078      	movs	r0, #120	; 0x78
 8004364:	f000 fa30 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8004368:	223f      	movs	r2, #63	; 0x3f
 800436a:	2100      	movs	r1, #0
 800436c:	2078      	movs	r0, #120	; 0x78
 800436e:	f000 fa2b 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004372:	22a4      	movs	r2, #164	; 0xa4
 8004374:	2100      	movs	r1, #0
 8004376:	2078      	movs	r0, #120	; 0x78
 8004378:	f000 fa26 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800437c:	22d3      	movs	r2, #211	; 0xd3
 800437e:	2100      	movs	r1, #0
 8004380:	2078      	movs	r0, #120	; 0x78
 8004382:	f000 fa21 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8004386:	2200      	movs	r2, #0
 8004388:	2100      	movs	r1, #0
 800438a:	2078      	movs	r0, #120	; 0x78
 800438c:	f000 fa1c 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004390:	22d5      	movs	r2, #213	; 0xd5
 8004392:	2100      	movs	r1, #0
 8004394:	2078      	movs	r0, #120	; 0x78
 8004396:	f000 fa17 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800439a:	22f0      	movs	r2, #240	; 0xf0
 800439c:	2100      	movs	r1, #0
 800439e:	2078      	movs	r0, #120	; 0x78
 80043a0:	f000 fa12 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80043a4:	22d9      	movs	r2, #217	; 0xd9
 80043a6:	2100      	movs	r1, #0
 80043a8:	2078      	movs	r0, #120	; 0x78
 80043aa:	f000 fa0d 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80043ae:	2222      	movs	r2, #34	; 0x22
 80043b0:	2100      	movs	r1, #0
 80043b2:	2078      	movs	r0, #120	; 0x78
 80043b4:	f000 fa08 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80043b8:	22da      	movs	r2, #218	; 0xda
 80043ba:	2100      	movs	r1, #0
 80043bc:	2078      	movs	r0, #120	; 0x78
 80043be:	f000 fa03 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80043c2:	2212      	movs	r2, #18
 80043c4:	2100      	movs	r1, #0
 80043c6:	2078      	movs	r0, #120	; 0x78
 80043c8:	f000 f9fe 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80043cc:	22db      	movs	r2, #219	; 0xdb
 80043ce:	2100      	movs	r1, #0
 80043d0:	2078      	movs	r0, #120	; 0x78
 80043d2:	f000 f9f9 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80043d6:	2220      	movs	r2, #32
 80043d8:	2100      	movs	r1, #0
 80043da:	2078      	movs	r0, #120	; 0x78
 80043dc:	f000 f9f4 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80043e0:	228d      	movs	r2, #141	; 0x8d
 80043e2:	2100      	movs	r1, #0
 80043e4:	2078      	movs	r0, #120	; 0x78
 80043e6:	f000 f9ef 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80043ea:	2214      	movs	r2, #20
 80043ec:	2100      	movs	r1, #0
 80043ee:	2078      	movs	r0, #120	; 0x78
 80043f0:	f000 f9ea 	bl	80047c8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80043f4:	22af      	movs	r2, #175	; 0xaf
 80043f6:	2100      	movs	r1, #0
 80043f8:	2078      	movs	r0, #120	; 0x78
 80043fa:	f000 f9e5 	bl	80047c8 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80043fe:	2000      	movs	r0, #0
 8004400:	f000 f842 	bl	8004488 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8004404:	f000 f812 	bl	800442c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8004408:	4b07      	ldr	r3, [pc, #28]	; (8004428 <SSD1306_Init+0x178>)
 800440a:	2200      	movs	r2, #0
 800440c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <SSD1306_Init+0x178>)
 8004410:	2200      	movs	r2, #0
 8004412:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8004414:	4b04      	ldr	r3, [pc, #16]	; (8004428 <SSD1306_Init+0x178>)
 8004416:	2201      	movs	r2, #1
 8004418:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800441a:	2301      	movs	r3, #1
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000854 	.word	0x20000854
 8004428:	20000690 	.word	0x20000690

0800442c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8004432:	2300      	movs	r3, #0
 8004434:	71fb      	strb	r3, [r7, #7]
 8004436:	e01d      	b.n	8004474 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	3b50      	subs	r3, #80	; 0x50
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	2100      	movs	r1, #0
 8004442:	2078      	movs	r0, #120	; 0x78
 8004444:	f000 f9c0 	bl	80047c8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004448:	2200      	movs	r2, #0
 800444a:	2100      	movs	r1, #0
 800444c:	2078      	movs	r0, #120	; 0x78
 800444e:	f000 f9bb 	bl	80047c8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004452:	2210      	movs	r2, #16
 8004454:	2100      	movs	r1, #0
 8004456:	2078      	movs	r0, #120	; 0x78
 8004458:	f000 f9b6 	bl	80047c8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	01db      	lsls	r3, r3, #7
 8004460:	4a08      	ldr	r2, [pc, #32]	; (8004484 <SSD1306_UpdateScreen+0x58>)
 8004462:	441a      	add	r2, r3
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	2140      	movs	r1, #64	; 0x40
 8004468:	2078      	movs	r0, #120	; 0x78
 800446a:	f000 f953 	bl	8004714 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	3301      	adds	r3, #1
 8004472:	71fb      	strb	r3, [r7, #7]
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	2b07      	cmp	r3, #7
 8004478:	d9de      	bls.n	8004438 <SSD1306_UpdateScreen+0xc>
	}
}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000290 	.word	0x20000290

08004488 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0x100, sizeof(SSD1306_Buffer));
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <SSD1306_Fill+0x14>
 8004498:	2300      	movs	r3, #0
 800449a:	e001      	b.n	80044a0 <SSD1306_Fill+0x18>
 800449c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044a4:	4619      	mov	r1, r3
 80044a6:	4803      	ldr	r0, [pc, #12]	; (80044b4 <SSD1306_Fill+0x2c>)
 80044a8:	f007 f856 	bl	800b558 <memset>
}
 80044ac:	bf00      	nop
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20000290 	.word	0x20000290

080044b8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	80fb      	strh	r3, [r7, #6]
 80044c2:	460b      	mov	r3, r1
 80044c4:	80bb      	strh	r3, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	70fb      	strb	r3, [r7, #3]
	if (
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	2b7f      	cmp	r3, #127	; 0x7f
 80044ce:	d848      	bhi.n	8004562 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80044d0:	88bb      	ldrh	r3, [r7, #4]
 80044d2:	2b3f      	cmp	r3, #63	; 0x3f
 80044d4:	d845      	bhi.n	8004562 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80044d6:	4b25      	ldr	r3, [pc, #148]	; (800456c <SSD1306_DrawPixel+0xb4>)
 80044d8:	791b      	ldrb	r3, [r3, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d006      	beq.n	80044ec <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d11a      	bne.n	8004528 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80044f2:	88fa      	ldrh	r2, [r7, #6]
 80044f4:	88bb      	ldrh	r3, [r7, #4]
 80044f6:	08db      	lsrs	r3, r3, #3
 80044f8:	b298      	uxth	r0, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	01db      	lsls	r3, r3, #7
 80044fe:	4413      	add	r3, r2
 8004500:	4a1b      	ldr	r2, [pc, #108]	; (8004570 <SSD1306_DrawPixel+0xb8>)
 8004502:	5cd3      	ldrb	r3, [r2, r3]
 8004504:	b25a      	sxtb	r2, r3
 8004506:	88bb      	ldrh	r3, [r7, #4]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	2101      	movs	r1, #1
 800450e:	fa01 f303 	lsl.w	r3, r1, r3
 8004512:	b25b      	sxtb	r3, r3
 8004514:	4313      	orrs	r3, r2
 8004516:	b259      	sxtb	r1, r3
 8004518:	88fa      	ldrh	r2, [r7, #6]
 800451a:	4603      	mov	r3, r0
 800451c:	01db      	lsls	r3, r3, #7
 800451e:	4413      	add	r3, r2
 8004520:	b2c9      	uxtb	r1, r1
 8004522:	4a13      	ldr	r2, [pc, #76]	; (8004570 <SSD1306_DrawPixel+0xb8>)
 8004524:	54d1      	strb	r1, [r2, r3]
 8004526:	e01d      	b.n	8004564 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004528:	88fa      	ldrh	r2, [r7, #6]
 800452a:	88bb      	ldrh	r3, [r7, #4]
 800452c:	08db      	lsrs	r3, r3, #3
 800452e:	b298      	uxth	r0, r3
 8004530:	4603      	mov	r3, r0
 8004532:	01db      	lsls	r3, r3, #7
 8004534:	4413      	add	r3, r2
 8004536:	4a0e      	ldr	r2, [pc, #56]	; (8004570 <SSD1306_DrawPixel+0xb8>)
 8004538:	5cd3      	ldrb	r3, [r2, r3]
 800453a:	b25a      	sxtb	r2, r3
 800453c:	88bb      	ldrh	r3, [r7, #4]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	2101      	movs	r1, #1
 8004544:	fa01 f303 	lsl.w	r3, r1, r3
 8004548:	b25b      	sxtb	r3, r3
 800454a:	43db      	mvns	r3, r3
 800454c:	b25b      	sxtb	r3, r3
 800454e:	4013      	ands	r3, r2
 8004550:	b259      	sxtb	r1, r3
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	4603      	mov	r3, r0
 8004556:	01db      	lsls	r3, r3, #7
 8004558:	4413      	add	r3, r2
 800455a:	b2c9      	uxtb	r1, r1
 800455c:	4a04      	ldr	r2, [pc, #16]	; (8004570 <SSD1306_DrawPixel+0xb8>)
 800455e:	54d1      	strb	r1, [r2, r3]
 8004560:	e000      	b.n	8004564 <SSD1306_DrawPixel+0xac>
		return;
 8004562:	bf00      	nop
	}
}
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	20000690 	.word	0x20000690
 8004570:	20000290 	.word	0x20000290

08004574 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	460a      	mov	r2, r1
 800457e:	80fb      	strh	r3, [r7, #6]
 8004580:	4613      	mov	r3, r2
 8004582:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004584:	4a05      	ldr	r2, [pc, #20]	; (800459c <SSD1306_GotoXY+0x28>)
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800458a:	4a04      	ldr	r2, [pc, #16]	; (800459c <SSD1306_GotoXY+0x28>)
 800458c:	88bb      	ldrh	r3, [r7, #4]
 800458e:	8053      	strh	r3, [r2, #2]
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000690 	.word	0x20000690

080045a0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	6039      	str	r1, [r7, #0]
 80045aa:	71fb      	strb	r3, [r7, #7]
 80045ac:	4613      	mov	r3, r2
 80045ae:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80045b0:	4b3a      	ldr	r3, [pc, #232]	; (800469c <SSD1306_Putc+0xfc>)
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	4413      	add	r3, r2
	if (
 80045bc:	2b7f      	cmp	r3, #127	; 0x7f
 80045be:	dc07      	bgt.n	80045d0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80045c0:	4b36      	ldr	r3, [pc, #216]	; (800469c <SSD1306_Putc+0xfc>)
 80045c2:	885b      	ldrh	r3, [r3, #2]
 80045c4:	461a      	mov	r2, r3
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	785b      	ldrb	r3, [r3, #1]
 80045ca:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80045cc:	2b3f      	cmp	r3, #63	; 0x3f
 80045ce:	dd01      	ble.n	80045d4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e05e      	b.n	8004692 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	e04b      	b.n	8004672 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	3b20      	subs	r3, #32
 80045e2:	6839      	ldr	r1, [r7, #0]
 80045e4:	7849      	ldrb	r1, [r1, #1]
 80045e6:	fb01 f303 	mul.w	r3, r1, r3
 80045ea:	4619      	mov	r1, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	440b      	add	r3, r1
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	4413      	add	r3, r2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80045f8:	2300      	movs	r3, #0
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	e030      	b.n	8004660 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d010      	beq.n	8004630 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800460e:	4b23      	ldr	r3, [pc, #140]	; (800469c <SSD1306_Putc+0xfc>)
 8004610:	881a      	ldrh	r2, [r3, #0]
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	b29b      	uxth	r3, r3
 8004616:	4413      	add	r3, r2
 8004618:	b298      	uxth	r0, r3
 800461a:	4b20      	ldr	r3, [pc, #128]	; (800469c <SSD1306_Putc+0xfc>)
 800461c:	885a      	ldrh	r2, [r3, #2]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	b29b      	uxth	r3, r3
 8004622:	4413      	add	r3, r2
 8004624:	b29b      	uxth	r3, r3
 8004626:	79ba      	ldrb	r2, [r7, #6]
 8004628:	4619      	mov	r1, r3
 800462a:	f7ff ff45 	bl	80044b8 <SSD1306_DrawPixel>
 800462e:	e014      	b.n	800465a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8004630:	4b1a      	ldr	r3, [pc, #104]	; (800469c <SSD1306_Putc+0xfc>)
 8004632:	881a      	ldrh	r2, [r3, #0]
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	b29b      	uxth	r3, r3
 8004638:	4413      	add	r3, r2
 800463a:	b298      	uxth	r0, r3
 800463c:	4b17      	ldr	r3, [pc, #92]	; (800469c <SSD1306_Putc+0xfc>)
 800463e:	885a      	ldrh	r2, [r3, #2]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	b29b      	uxth	r3, r3
 8004644:	4413      	add	r3, r2
 8004646:	b299      	uxth	r1, r3
 8004648:	79bb      	ldrb	r3, [r7, #6]
 800464a:	2b00      	cmp	r3, #0
 800464c:	bf0c      	ite	eq
 800464e:	2301      	moveq	r3, #1
 8004650:	2300      	movne	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	461a      	mov	r2, r3
 8004656:	f7ff ff2f 	bl	80044b8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3301      	adds	r3, #1
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4293      	cmp	r3, r2
 800466a:	d3c8      	bcc.n	80045fe <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	3301      	adds	r3, #1
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	785b      	ldrb	r3, [r3, #1]
 8004676:	461a      	mov	r2, r3
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	4293      	cmp	r3, r2
 800467c:	d3ad      	bcc.n	80045da <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800467e:	4b07      	ldr	r3, [pc, #28]	; (800469c <SSD1306_Putc+0xfc>)
 8004680:	881a      	ldrh	r2, [r3, #0]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	4413      	add	r3, r2
 800468a:	b29a      	uxth	r2, r3
 800468c:	4b03      	ldr	r3, [pc, #12]	; (800469c <SSD1306_Putc+0xfc>)
 800468e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8004690:	79fb      	ldrb	r3, [r7, #7]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000690 	.word	0x20000690

080046a0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	4613      	mov	r3, r2
 80046ac:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80046ae:	e012      	b.n	80046d6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	79fa      	ldrb	r2, [r7, #7]
 80046b6:	68b9      	ldr	r1, [r7, #8]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ff71 	bl	80045a0 <SSD1306_Putc>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d002      	beq.n	80046d0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	e008      	b.n	80046e2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3301      	adds	r3, #1
 80046d4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e8      	bne.n	80046b0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	781b      	ldrb	r3, [r3, #0]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80046f2:	4b07      	ldr	r3, [pc, #28]	; (8004710 <ssd1306_I2C_Init+0x24>)
 80046f4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80046f6:	e002      	b.n	80046fe <ssd1306_I2C_Init+0x12>
		p--;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f9      	bne.n	80046f8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	0003d090 	.word	0x0003d090

08004714 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004714:	b5b0      	push	{r4, r5, r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af02      	add	r7, sp, #8
 800471a:	603a      	str	r2, [r7, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	4603      	mov	r3, r0
 8004720:	71fb      	strb	r3, [r7, #7]
 8004722:	460b      	mov	r3, r1
 8004724:	71bb      	strb	r3, [r7, #6]
 8004726:	4613      	mov	r3, r2
 8004728:	80bb      	strh	r3, [r7, #4]
 800472a:	466b      	mov	r3, sp
 800472c:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 800472e:	88bb      	ldrh	r3, [r7, #4]
 8004730:	1c58      	adds	r0, r3, #1
 8004732:	1e43      	subs	r3, r0, #1
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	4603      	mov	r3, r0
 8004738:	4619      	mov	r1, r3
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	f04f 0400 	mov.w	r4, #0
 8004746:	00d4      	lsls	r4, r2, #3
 8004748:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800474c:	00cb      	lsls	r3, r1, #3
 800474e:	4603      	mov	r3, r0
 8004750:	4619      	mov	r1, r3
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	f04f 0400 	mov.w	r4, #0
 800475e:	00d4      	lsls	r4, r2, #3
 8004760:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004764:	00cb      	lsls	r3, r1, #3
 8004766:	4603      	mov	r3, r0
 8004768:	3307      	adds	r3, #7
 800476a:	08db      	lsrs	r3, r3, #3
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	ebad 0d03 	sub.w	sp, sp, r3
 8004772:	ab02      	add	r3, sp, #8
 8004774:	3300      	adds	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	79ba      	ldrb	r2, [r7, #6]
 800477c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 800477e:	2301      	movs	r3, #1
 8004780:	75fb      	strb	r3, [r7, #23]
 8004782:	e00a      	b.n	800479a <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8004784:	7dfb      	ldrb	r3, [r7, #23]
 8004786:	3b01      	subs	r3, #1
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	441a      	add	r2, r3
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	7811      	ldrb	r1, [r2, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	3301      	adds	r3, #1
 8004798:	75fb      	strb	r3, [r7, #23]
 800479a:	7dfb      	ldrb	r3, [r7, #23]
 800479c:	b29b      	uxth	r3, r3
 800479e:	88ba      	ldrh	r2, [r7, #4]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d2ef      	bcs.n	8004784 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	b299      	uxth	r1, r3
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	88b8      	ldrh	r0, [r7, #4]
 80047ac:	230a      	movs	r3, #10
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	4603      	mov	r3, r0
 80047b2:	4804      	ldr	r0, [pc, #16]	; (80047c4 <ssd1306_I2C_WriteMulti+0xb0>)
 80047b4:	f005 f84c 	bl	8009850 <HAL_I2C_Master_Transmit>
 80047b8:	46ad      	mov	sp, r5
}
 80047ba:	bf00      	nop
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bdb0      	pop	{r4, r5, r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000854 	.word	0x20000854

080047c8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	4603      	mov	r3, r0
 80047d0:	71fb      	strb	r3, [r7, #7]
 80047d2:	460b      	mov	r3, r1
 80047d4:	71bb      	strb	r3, [r7, #6]
 80047d6:	4613      	mov	r3, r2
 80047d8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80047da:	79bb      	ldrb	r3, [r7, #6]
 80047dc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80047de:	797b      	ldrb	r3, [r7, #5]
 80047e0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	b299      	uxth	r1, r3
 80047e6:	f107 020c 	add.w	r2, r7, #12
 80047ea:	230a      	movs	r3, #10
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	2302      	movs	r3, #2
 80047f0:	4803      	ldr	r0, [pc, #12]	; (8004800 <ssd1306_I2C_Write+0x38>)
 80047f2:	f005 f82d 	bl	8009850 <HAL_I2C_Master_Transmit>
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20000854 	.word	0x20000854

08004804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800480a:	4b15      	ldr	r3, [pc, #84]	; (8004860 <HAL_MspInit+0x5c>)
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	4a14      	ldr	r2, [pc, #80]	; (8004860 <HAL_MspInit+0x5c>)
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	6193      	str	r3, [r2, #24]
 8004816:	4b12      	ldr	r3, [pc, #72]	; (8004860 <HAL_MspInit+0x5c>)
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004822:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <HAL_MspInit+0x5c>)
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	4a0e      	ldr	r2, [pc, #56]	; (8004860 <HAL_MspInit+0x5c>)
 8004828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482c:	61d3      	str	r3, [r2, #28]
 800482e:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <HAL_MspInit+0x5c>)
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004836:	607b      	str	r3, [r7, #4]
 8004838:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <HAL_MspInit+0x60>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	4a04      	ldr	r2, [pc, #16]	; (8004864 <HAL_MspInit+0x60>)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004856:	bf00      	nop
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	40021000 	.word	0x40021000
 8004864:	40010000 	.word	0x40010000

08004868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800486c:	bf00      	nop
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr

08004874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004878:	e7fe      	b.n	8004878 <HardFault_Handler+0x4>

0800487a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800487a:	b480      	push	{r7}
 800487c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800487e:	e7fe      	b.n	800487e <MemManage_Handler+0x4>

08004880 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004884:	e7fe      	b.n	8004884 <BusFault_Handler+0x4>

08004886 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800488a:	e7fe      	b.n	800488a <UsageFault_Handler+0x4>

0800488c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004890:	bf00      	nop
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800489c:	bf00      	nop
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr

080048b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048b4:	f002 ff28 	bl	8007708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 80048b8:	bf00      	nop
 80048ba:	bd80      	pop	{r7, pc}

080048bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80048c0:	4802      	ldr	r0, [pc, #8]	; (80048cc <DMA1_Channel1_IRQHandler+0x10>)
 80048c2:	f004 fb91 	bl	8008fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	200007e8 	.word	0x200007e8

080048d0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80048d4:	4802      	ldr	r0, [pc, #8]	; (80048e0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80048d6:	f003 ffa1 	bl	800881c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	2000082c 	.word	0x2000082c
 80048e4:	00000000 	.word	0x00000000

080048e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048e8:	b5b0      	push	{r4, r5, r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048ec:	48ba      	ldr	r0, [pc, #744]	; (8004bd8 <TIM2_IRQHandler+0x2f0>)
 80048ee:	f006 f99f 	bl	800ac30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  test_tim2++;
 80048f2:	4bba      	ldr	r3, [pc, #744]	; (8004bdc <TIM2_IRQHandler+0x2f4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	4ab8      	ldr	r2, [pc, #736]	; (8004bdc <TIM2_IRQHandler+0x2f4>)
 80048fa:	6013      	str	r3, [r2, #0]
  hitung_suhu++;
 80048fc:	4bb8      	ldr	r3, [pc, #736]	; (8004be0 <TIM2_IRQHandler+0x2f8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3301      	adds	r3, #1
 8004902:	4ab7      	ldr	r2, [pc, #732]	; (8004be0 <TIM2_IRQHandler+0x2f8>)
 8004904:	6013      	str	r3, [r2, #0]

  sumI=sumI-i_arrdata[i];
 8004906:	4bb7      	ldr	r3, [pc, #732]	; (8004be4 <TIM2_IRQHandler+0x2fc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4ab7      	ldr	r2, [pc, #732]	; (8004be8 <TIM2_IRQHandler+0x300>)
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	49b7      	ldr	r1, [pc, #732]	; (8004bec <TIM2_IRQHandler+0x304>)
 8004910:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	4ab3      	ldr	r2, [pc, #716]	; (8004be4 <TIM2_IRQHandler+0x2fc>)
 8004918:	6013      	str	r3, [r2, #0]
  sumRef=sumRef-ref_arrdata[i];
 800491a:	4bb5      	ldr	r3, [pc, #724]	; (8004bf0 <TIM2_IRQHandler+0x308>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4ab2      	ldr	r2, [pc, #712]	; (8004be8 <TIM2_IRQHandler+0x300>)
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	49b4      	ldr	r1, [pc, #720]	; (8004bf4 <TIM2_IRQHandler+0x30c>)
 8004924:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	4ab1      	ldr	r2, [pc, #708]	; (8004bf0 <TIM2_IRQHandler+0x308>)
 800492c:	6013      	str	r3, [r2, #0]

  i_arrdata[i]=adc_val[0];
 800492e:	4bae      	ldr	r3, [pc, #696]	; (8004be8 <TIM2_IRQHandler+0x300>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4ab1      	ldr	r2, [pc, #708]	; (8004bf8 <TIM2_IRQHandler+0x310>)
 8004934:	8811      	ldrh	r1, [r2, #0]
 8004936:	4aad      	ldr	r2, [pc, #692]	; (8004bec <TIM2_IRQHandler+0x304>)
 8004938:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  ref_arrdata[i]=adc_val[1];
 800493c:	4baa      	ldr	r3, [pc, #680]	; (8004be8 <TIM2_IRQHandler+0x300>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4aad      	ldr	r2, [pc, #692]	; (8004bf8 <TIM2_IRQHandler+0x310>)
 8004942:	8851      	ldrh	r1, [r2, #2]
 8004944:	4aab      	ldr	r2, [pc, #684]	; (8004bf4 <TIM2_IRQHandler+0x30c>)
 8004946:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

  sumI=sumI+i_arrdata[i];
 800494a:	4ba7      	ldr	r3, [pc, #668]	; (8004be8 <TIM2_IRQHandler+0x300>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4aa7      	ldr	r2, [pc, #668]	; (8004bec <TIM2_IRQHandler+0x304>)
 8004950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004954:	461a      	mov	r2, r3
 8004956:	4ba3      	ldr	r3, [pc, #652]	; (8004be4 <TIM2_IRQHandler+0x2fc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4413      	add	r3, r2
 800495c:	4aa1      	ldr	r2, [pc, #644]	; (8004be4 <TIM2_IRQHandler+0x2fc>)
 800495e:	6013      	str	r3, [r2, #0]
  sumRef=sumRef+ref_arrdata[i];
 8004960:	4ba1      	ldr	r3, [pc, #644]	; (8004be8 <TIM2_IRQHandler+0x300>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4aa3      	ldr	r2, [pc, #652]	; (8004bf4 <TIM2_IRQHandler+0x30c>)
 8004966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800496a:	461a      	mov	r2, r3
 800496c:	4ba0      	ldr	r3, [pc, #640]	; (8004bf0 <TIM2_IRQHandler+0x308>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4413      	add	r3, r2
 8004972:	4a9f      	ldr	r2, [pc, #636]	; (8004bf0 <TIM2_IRQHandler+0x308>)
 8004974:	6013      	str	r3, [r2, #0]

  i_datadigi=sumI/maxdata;
 8004976:	4b9b      	ldr	r3, [pc, #620]	; (8004be4 <TIM2_IRQHandler+0x2fc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4aa0      	ldr	r2, [pc, #640]	; (8004bfc <TIM2_IRQHandler+0x314>)
 800497c:	fb82 1203 	smull	r1, r2, r2, r3
 8004980:	1152      	asrs	r2, r2, #5
 8004982:	17db      	asrs	r3, r3, #31
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	4618      	mov	r0, r3
 8004988:	f7fc f988 	bl	8000c9c <__aeabi_i2f>
 800498c:	4602      	mov	r2, r0
 800498e:	4b9c      	ldr	r3, [pc, #624]	; (8004c00 <TIM2_IRQHandler+0x318>)
 8004990:	601a      	str	r2, [r3, #0]
  ref_datadigi=sumRef/maxdata;
 8004992:	4b97      	ldr	r3, [pc, #604]	; (8004bf0 <TIM2_IRQHandler+0x308>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a99      	ldr	r2, [pc, #612]	; (8004bfc <TIM2_IRQHandler+0x314>)
 8004998:	fb82 1203 	smull	r1, r2, r2, r3
 800499c:	1152      	asrs	r2, r2, #5
 800499e:	17db      	asrs	r3, r3, #31
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fc f97a 	bl	8000c9c <__aeabi_i2f>
 80049a8:	4602      	mov	r2, r0
 80049aa:	4b96      	ldr	r3, [pc, #600]	; (8004c04 <TIM2_IRQHandler+0x31c>)
 80049ac:	601a      	str	r2, [r3, #0]


  // *************PROSES Konversi dari DATA ADC ke Data Real *******************************/////

  VBATT=v_cell_tot;
 80049ae:	4b96      	ldr	r3, [pc, #600]	; (8004c08 <TIM2_IRQHandler+0x320>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a96      	ldr	r2, [pc, #600]	; (8004c0c <TIM2_IRQHandler+0x324>)
 80049b4:	6013      	str	r3, [r2, #0]
  if(VBATT<0) VBATT=-1;
 80049b6:	4b95      	ldr	r3, [pc, #596]	; (8004c0c <TIM2_IRQHandler+0x324>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f04f 0100 	mov.w	r1, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fc fb5e 	bl	8001080 <__aeabi_fcmplt>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <TIM2_IRQHandler+0xe8>
 80049ca:	4b90      	ldr	r3, [pc, #576]	; (8004c0c <TIM2_IRQHandler+0x324>)
 80049cc:	4a90      	ldr	r2, [pc, #576]	; (8004c10 <TIM2_IRQHandler+0x328>)
 80049ce:	601a      	str	r2, [r3, #0]
//	  IBATT = -0.06309346733668010*i_datadigi + 121.153903517579 - OFFSET_SENSOR_ARUS; //modul A fix
//	  IBATT_for_offset_cal = -0.06309346733668010*i_datadigi + 121.153903517579;
//	  IBATT=0.95556329728489100*IBATT + 0.06243330788446070;// Modul A Recalibrate
  }
  else if (UNIQUE_Code == 0xBBBB1){
	  IBATT=-0.0391033588118257*i_datadigi + 77.0576930186035 - OFFSET_SENSOR_ARUS; // Modul B fix
 80049d0:	4b8b      	ldr	r3, [pc, #556]	; (8004c00 <TIM2_IRQHandler+0x318>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fb fd27 	bl	8000428 <__aeabi_f2d>
 80049da:	a373      	add	r3, pc, #460	; (adr r3, 8004ba8 <TIM2_IRQHandler+0x2c0>)
 80049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e0:	f7fb fd7a 	bl	80004d8 <__aeabi_dmul>
 80049e4:	4603      	mov	r3, r0
 80049e6:	460c      	mov	r4, r1
 80049e8:	4618      	mov	r0, r3
 80049ea:	4621      	mov	r1, r4
 80049ec:	a370      	add	r3, pc, #448	; (adr r3, 8004bb0 <TIM2_IRQHandler+0x2c8>)
 80049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f2:	f7fb fbbb 	bl	800016c <__adddf3>
 80049f6:	4603      	mov	r3, r0
 80049f8:	460c      	mov	r4, r1
 80049fa:	4625      	mov	r5, r4
 80049fc:	461c      	mov	r4, r3
 80049fe:	4b85      	ldr	r3, [pc, #532]	; (8004c14 <TIM2_IRQHandler+0x32c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fb fd10 	bl	8000428 <__aeabi_f2d>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	4629      	mov	r1, r5
 8004a10:	f7fb fbaa 	bl	8000168 <__aeabi_dsub>
 8004a14:	4603      	mov	r3, r0
 8004a16:	460c      	mov	r4, r1
 8004a18:	4618      	mov	r0, r3
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	f7fc f834 	bl	8000a88 <__aeabi_d2f>
 8004a20:	4602      	mov	r2, r0
 8004a22:	4b7d      	ldr	r3, [pc, #500]	; (8004c18 <TIM2_IRQHandler+0x330>)
 8004a24:	601a      	str	r2, [r3, #0]
	  IBATT_for_offset_cal= -0.0391033588118257*i_datadigi + 77.0576930186035;
 8004a26:	4b76      	ldr	r3, [pc, #472]	; (8004c00 <TIM2_IRQHandler+0x318>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fb fcfc 	bl	8000428 <__aeabi_f2d>
 8004a30:	a35d      	add	r3, pc, #372	; (adr r3, 8004ba8 <TIM2_IRQHandler+0x2c0>)
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	f7fb fd4f 	bl	80004d8 <__aeabi_dmul>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	4618      	mov	r0, r3
 8004a40:	4621      	mov	r1, r4
 8004a42:	a35b      	add	r3, pc, #364	; (adr r3, 8004bb0 <TIM2_IRQHandler+0x2c8>)
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f7fb fb90 	bl	800016c <__adddf3>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	460c      	mov	r4, r1
 8004a50:	4618      	mov	r0, r3
 8004a52:	4621      	mov	r1, r4
 8004a54:	f7fc f818 	bl	8000a88 <__aeabi_d2f>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	4b70      	ldr	r3, [pc, #448]	; (8004c1c <TIM2_IRQHandler+0x334>)
 8004a5c:	601a      	str	r2, [r3, #0]

//	  IBATT=-0.0399033588118257*i_datadigi + 77.0576930186035 - OFFSET_SENSOR_ARUS; // Modul B fix
//	  IBATT_for_offset_cal= -0.0399033588118257*i_datadigi + 77.0576930186035;
	  IBATT = 0.78010345267720400*IBATT + 0.02604389098500030; //recalibrate module B
 8004a5e:	4b6e      	ldr	r3, [pc, #440]	; (8004c18 <TIM2_IRQHandler+0x330>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fb fce0 	bl	8000428 <__aeabi_f2d>
 8004a68:	a353      	add	r3, pc, #332	; (adr r3, 8004bb8 <TIM2_IRQHandler+0x2d0>)
 8004a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6e:	f7fb fd33 	bl	80004d8 <__aeabi_dmul>
 8004a72:	4603      	mov	r3, r0
 8004a74:	460c      	mov	r4, r1
 8004a76:	4618      	mov	r0, r3
 8004a78:	4621      	mov	r1, r4
 8004a7a:	a351      	add	r3, pc, #324	; (adr r3, 8004bc0 <TIM2_IRQHandler+0x2d8>)
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	f7fb fb74 	bl	800016c <__adddf3>
 8004a84:	4603      	mov	r3, r0
 8004a86:	460c      	mov	r4, r1
 8004a88:	4618      	mov	r0, r3
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	f7fb fffc 	bl	8000a88 <__aeabi_d2f>
 8004a90:	4602      	mov	r2, r0
 8004a92:	4b61      	ldr	r3, [pc, #388]	; (8004c18 <TIM2_IRQHandler+0x330>)
 8004a94:	601a      	str	r2, [r3, #0]
  }

  if(hitung_suhu>=max_hitung_suhu)
 8004a96:	4b52      	ldr	r3, [pc, #328]	; (8004be0 <TIM2_IRQHandler+0x2f8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b09      	cmp	r3, #9
 8004a9c:	f340 8153 	ble.w	8004d46 <TIM2_IRQHandler+0x45e>
  {
	  hitung_suhu=0;
 8004aa0:	4b4f      	ldr	r3, [pc, #316]	; (8004be0 <TIM2_IRQHandler+0x2f8>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
	  Res_T1=adc_val[2]*10000/(3900-adc_val[2]); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 8004aa6:	4b54      	ldr	r3, [pc, #336]	; (8004bf8 <TIM2_IRQHandler+0x310>)
 8004aa8:	889b      	ldrh	r3, [r3, #4]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f242 7310 	movw	r3, #10000	; 0x2710
 8004ab0:	fb03 f202 	mul.w	r2, r3, r2
 8004ab4:	4b50      	ldr	r3, [pc, #320]	; (8004bf8 <TIM2_IRQHandler+0x310>)
 8004ab6:	889b      	ldrh	r3, [r3, #4]
 8004ab8:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004abc:	330c      	adds	r3, #12
 8004abe:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fc f8ea 	bl	8000c9c <__aeabi_i2f>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b55      	ldr	r3, [pc, #340]	; (8004c20 <TIM2_IRQHandler+0x338>)
 8004acc:	601a      	str	r2, [r3, #0]
	  Suhu_T1= -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8004ace:	4b54      	ldr	r3, [pc, #336]	; (8004c20 <TIM2_IRQHandler+0x338>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fb fca8 	bl	8000428 <__aeabi_f2d>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	460c      	mov	r4, r1
 8004adc:	4618      	mov	r0, r3
 8004ade:	4621      	mov	r1, r4
 8004ae0:	f008 fdae 	bl	800d640 <log>
 8004ae4:	a338      	add	r3, pc, #224	; (adr r3, 8004bc8 <TIM2_IRQHandler+0x2e0>)
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	f7fb fcf5 	bl	80004d8 <__aeabi_dmul>
 8004aee:	4603      	mov	r3, r0
 8004af0:	460c      	mov	r4, r1
 8004af2:	4618      	mov	r0, r3
 8004af4:	4621      	mov	r1, r4
 8004af6:	a336      	add	r3, pc, #216	; (adr r3, 8004bd0 <TIM2_IRQHandler+0x2e8>)
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f7fb fb36 	bl	800016c <__adddf3>
 8004b00:	4603      	mov	r3, r0
 8004b02:	460c      	mov	r4, r1
 8004b04:	4618      	mov	r0, r3
 8004b06:	4621      	mov	r1, r4
 8004b08:	f7fb ffbe 	bl	8000a88 <__aeabi_d2f>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	4b45      	ldr	r3, [pc, #276]	; (8004c24 <TIM2_IRQHandler+0x33c>)
 8004b10:	601a      	str	r2, [r3, #0]
	  Res_T2=adc_val[3]*10000/(3900-adc_val[3]);
 8004b12:	4b39      	ldr	r3, [pc, #228]	; (8004bf8 <TIM2_IRQHandler+0x310>)
 8004b14:	88db      	ldrh	r3, [r3, #6]
 8004b16:	461a      	mov	r2, r3
 8004b18:	f242 7310 	movw	r3, #10000	; 0x2710
 8004b1c:	fb03 f202 	mul.w	r2, r3, r2
 8004b20:	4b35      	ldr	r3, [pc, #212]	; (8004bf8 <TIM2_IRQHandler+0x310>)
 8004b22:	88db      	ldrh	r3, [r3, #6]
 8004b24:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004b28:	330c      	adds	r3, #12
 8004b2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fc f8b4 	bl	8000c9c <__aeabi_i2f>
 8004b34:	4602      	mov	r2, r0
 8004b36:	4b3c      	ldr	r3, [pc, #240]	; (8004c28 <TIM2_IRQHandler+0x340>)
 8004b38:	601a      	str	r2, [r3, #0]
	  Suhu_T2= -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8004b3a:	4b3b      	ldr	r3, [pc, #236]	; (8004c28 <TIM2_IRQHandler+0x340>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fb fc72 	bl	8000428 <__aeabi_f2d>
 8004b44:	4603      	mov	r3, r0
 8004b46:	460c      	mov	r4, r1
 8004b48:	4618      	mov	r0, r3
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	f008 fd78 	bl	800d640 <log>
 8004b50:	a31d      	add	r3, pc, #116	; (adr r3, 8004bc8 <TIM2_IRQHandler+0x2e0>)
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	f7fb fcbf 	bl	80004d8 <__aeabi_dmul>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	460c      	mov	r4, r1
 8004b5e:	4618      	mov	r0, r3
 8004b60:	4621      	mov	r1, r4
 8004b62:	a31b      	add	r3, pc, #108	; (adr r3, 8004bd0 <TIM2_IRQHandler+0x2e8>)
 8004b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b68:	f7fb fb00 	bl	800016c <__adddf3>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	460c      	mov	r4, r1
 8004b70:	4618      	mov	r0, r3
 8004b72:	4621      	mov	r1, r4
 8004b74:	f7fb ff88 	bl	8000a88 <__aeabi_d2f>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4b2c      	ldr	r3, [pc, #176]	; (8004c2c <TIM2_IRQHandler+0x344>)
 8004b7c:	601a      	str	r2, [r3, #0]
	  Res_T3=adc_val[4]*10000/(3900-adc_val[4]);
 8004b7e:	4b1e      	ldr	r3, [pc, #120]	; (8004bf8 <TIM2_IRQHandler+0x310>)
 8004b80:	891b      	ldrh	r3, [r3, #8]
 8004b82:	461a      	mov	r2, r3
 8004b84:	f242 7310 	movw	r3, #10000	; 0x2710
 8004b88:	fb03 f202 	mul.w	r2, r3, r2
 8004b8c:	4b1a      	ldr	r3, [pc, #104]	; (8004bf8 <TIM2_IRQHandler+0x310>)
 8004b8e:	891b      	ldrh	r3, [r3, #8]
 8004b90:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004b94:	330c      	adds	r3, #12
 8004b96:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fc f87e 	bl	8000c9c <__aeabi_i2f>
 8004ba0:	e046      	b.n	8004c30 <TIM2_IRQHandler+0x348>
 8004ba2:	bf00      	nop
 8004ba4:	f3af 8000 	nop.w
 8004ba8:	fe856621 	.word	0xfe856621
 8004bac:	bfa4055a 	.word	0xbfa4055a
 8004bb0:	3e0f0703 	.word	0x3e0f0703
 8004bb4:	405343b1 	.word	0x405343b1
 8004bb8:	8417d94b 	.word	0x8417d94b
 8004bbc:	3fe8f69b 	.word	0x3fe8f69b
 8004bc0:	f02a274b 	.word	0xf02a274b
 8004bc4:	3f9aab3f 	.word	0x3f9aab3f
 8004bc8:	cccccccd 	.word	0xcccccccd
 8004bcc:	c0380ccc 	.word	0xc0380ccc
 8004bd0:	b851eb85 	.word	0xb851eb85
 8004bd4:	406ecd1e 	.word	0x406ecd1e
 8004bd8:	200014f8 	.word	0x200014f8
 8004bdc:	20000bdc 	.word	0x20000bdc
 8004be0:	200010a8 	.word	0x200010a8
 8004be4:	2000109c 	.word	0x2000109c
 8004be8:	20001064 	.word	0x20001064
 8004bec:	20000c34 	.word	0x20000c34
 8004bf0:	2000102c 	.word	0x2000102c
 8004bf4:	200010bc 	.word	0x200010bc
 8004bf8:	2000090c 	.word	0x2000090c
 8004bfc:	10624dd3 	.word	0x10624dd3
 8004c00:	20001034 	.word	0x20001034
 8004c04:	20001054 	.word	0x20001054
 8004c08:	20000bbc 	.word	0x20000bbc
 8004c0c:	2000103c 	.word	0x2000103c
 8004c10:	bf800000 	.word	0xbf800000
 8004c14:	200010b4 	.word	0x200010b4
 8004c18:	20001058 	.word	0x20001058
 8004c1c:	200010b8 	.word	0x200010b8
 8004c20:	20001050 	.word	0x20001050
 8004c24:	2000106c 	.word	0x2000106c
 8004c28:	20001098 	.word	0x20001098
 8004c2c:	200014a8 	.word	0x200014a8
 8004c30:	4602      	mov	r2, r0
 8004c32:	4b53      	ldr	r3, [pc, #332]	; (8004d80 <TIM2_IRQHandler+0x498>)
 8004c34:	601a      	str	r2, [r3, #0]
	  Suhu_T3= -24.05*log(Res_T3) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8004c36:	4b52      	ldr	r3, [pc, #328]	; (8004d80 <TIM2_IRQHandler+0x498>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fb fbf4 	bl	8000428 <__aeabi_f2d>
 8004c40:	4603      	mov	r3, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	4618      	mov	r0, r3
 8004c46:	4621      	mov	r1, r4
 8004c48:	f008 fcfa 	bl	800d640 <log>
 8004c4c:	a348      	add	r3, pc, #288	; (adr r3, 8004d70 <TIM2_IRQHandler+0x488>)
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	f7fb fc41 	bl	80004d8 <__aeabi_dmul>
 8004c56:	4603      	mov	r3, r0
 8004c58:	460c      	mov	r4, r1
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	a346      	add	r3, pc, #280	; (adr r3, 8004d78 <TIM2_IRQHandler+0x490>)
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f7fb fa82 	bl	800016c <__adddf3>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	4621      	mov	r1, r4
 8004c70:	f7fb ff0a 	bl	8000a88 <__aeabi_d2f>
 8004c74:	4602      	mov	r2, r0
 8004c76:	4b43      	ldr	r3, [pc, #268]	; (8004d84 <TIM2_IRQHandler+0x49c>)
 8004c78:	601a      	str	r2, [r3, #0]
	  Res_T4=adc_val[5]*10000/(3900-adc_val[5]);
 8004c7a:	4b43      	ldr	r3, [pc, #268]	; (8004d88 <TIM2_IRQHandler+0x4a0>)
 8004c7c:	895b      	ldrh	r3, [r3, #10]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f242 7310 	movw	r3, #10000	; 0x2710
 8004c84:	fb03 f202 	mul.w	r2, r3, r2
 8004c88:	4b3f      	ldr	r3, [pc, #252]	; (8004d88 <TIM2_IRQHandler+0x4a0>)
 8004c8a:	895b      	ldrh	r3, [r3, #10]
 8004c8c:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004c90:	330c      	adds	r3, #12
 8004c92:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fc f800 	bl	8000c9c <__aeabi_i2f>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	4b3b      	ldr	r3, [pc, #236]	; (8004d8c <TIM2_IRQHandler+0x4a4>)
 8004ca0:	601a      	str	r2, [r3, #0]
	  Suhu_T4= -24.05*log(Res_T4) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8004ca2:	4b3a      	ldr	r3, [pc, #232]	; (8004d8c <TIM2_IRQHandler+0x4a4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fb fbbe 	bl	8000428 <__aeabi_f2d>
 8004cac:	4603      	mov	r3, r0
 8004cae:	460c      	mov	r4, r1
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	f008 fcc4 	bl	800d640 <log>
 8004cb8:	a32d      	add	r3, pc, #180	; (adr r3, 8004d70 <TIM2_IRQHandler+0x488>)
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f7fb fc0b 	bl	80004d8 <__aeabi_dmul>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	460c      	mov	r4, r1
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	4621      	mov	r1, r4
 8004cca:	a32b      	add	r3, pc, #172	; (adr r3, 8004d78 <TIM2_IRQHandler+0x490>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb fa4c 	bl	800016c <__adddf3>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	4618      	mov	r0, r3
 8004cda:	4621      	mov	r1, r4
 8004cdc:	f7fb fed4 	bl	8000a88 <__aeabi_d2f>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	4b2b      	ldr	r3, [pc, #172]	; (8004d90 <TIM2_IRQHandler+0x4a8>)
 8004ce4:	601a      	str	r2, [r3, #0]

	  if(Suhu_T1>=130) Suhu_T1 = 130;
 8004ce6:	4b2b      	ldr	r3, [pc, #172]	; (8004d94 <TIM2_IRQHandler+0x4ac>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	492b      	ldr	r1, [pc, #172]	; (8004d98 <TIM2_IRQHandler+0x4b0>)
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fc f9db 	bl	80010a8 <__aeabi_fcmpge>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <TIM2_IRQHandler+0x416>
 8004cf8:	4b26      	ldr	r3, [pc, #152]	; (8004d94 <TIM2_IRQHandler+0x4ac>)
 8004cfa:	4a27      	ldr	r2, [pc, #156]	; (8004d98 <TIM2_IRQHandler+0x4b0>)
 8004cfc:	601a      	str	r2, [r3, #0]
	  if(Suhu_T2>=130) Suhu_T2 = 130;
 8004cfe:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <TIM2_IRQHandler+0x4b4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4925      	ldr	r1, [pc, #148]	; (8004d98 <TIM2_IRQHandler+0x4b0>)
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fc f9cf 	bl	80010a8 <__aeabi_fcmpge>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <TIM2_IRQHandler+0x42e>
 8004d10:	4b22      	ldr	r3, [pc, #136]	; (8004d9c <TIM2_IRQHandler+0x4b4>)
 8004d12:	4a21      	ldr	r2, [pc, #132]	; (8004d98 <TIM2_IRQHandler+0x4b0>)
 8004d14:	601a      	str	r2, [r3, #0]
	  if(Suhu_T3>=130) Suhu_T3 = 130;
 8004d16:	4b1b      	ldr	r3, [pc, #108]	; (8004d84 <TIM2_IRQHandler+0x49c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	491f      	ldr	r1, [pc, #124]	; (8004d98 <TIM2_IRQHandler+0x4b0>)
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fc f9c3 	bl	80010a8 <__aeabi_fcmpge>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <TIM2_IRQHandler+0x446>
 8004d28:	4b16      	ldr	r3, [pc, #88]	; (8004d84 <TIM2_IRQHandler+0x49c>)
 8004d2a:	4a1b      	ldr	r2, [pc, #108]	; (8004d98 <TIM2_IRQHandler+0x4b0>)
 8004d2c:	601a      	str	r2, [r3, #0]
	  if(Suhu_T4>=130) Suhu_T4 = 130;
 8004d2e:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <TIM2_IRQHandler+0x4a8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4919      	ldr	r1, [pc, #100]	; (8004d98 <TIM2_IRQHandler+0x4b0>)
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fc f9b7 	bl	80010a8 <__aeabi_fcmpge>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <TIM2_IRQHandler+0x45e>
 8004d40:	4b13      	ldr	r3, [pc, #76]	; (8004d90 <TIM2_IRQHandler+0x4a8>)
 8004d42:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <TIM2_IRQHandler+0x4b0>)
 8004d44:	601a      	str	r2, [r3, #0]
  }

  if(BATT_Start_Up==1)
 8004d46:	4b16      	ldr	r3, [pc, #88]	; (8004da0 <TIM2_IRQHandler+0x4b8>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	f040 80cd 	bne.w	8004eea <TIM2_IRQHandler+0x602>
  {
	  if(BATT_State==STATE_DISCHARGE)
 8004d50:	4b14      	ldr	r3, [pc, #80]	; (8004da4 <TIM2_IRQHandler+0x4bc>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d102      	bne.n	8004d5e <TIM2_IRQHandler+0x476>
	  {
		 Batt_Protection_when_discharge();
 8004d58:	f000 f9fe 	bl	8005158 <Batt_Protection_when_discharge>
 8004d5c:	e02a      	b.n	8004db4 <TIM2_IRQHandler+0x4cc>
	  }

	  else if(BATT_State==STATE_CHARGE)
 8004d5e:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <TIM2_IRQHandler+0x4bc>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d120      	bne.n	8004da8 <TIM2_IRQHandler+0x4c0>
	  {
		  Batt_Protection_when_charge();
 8004d66:	f001 f82f 	bl	8005dc8 <Batt_Protection_when_charge>
 8004d6a:	e023      	b.n	8004db4 <TIM2_IRQHandler+0x4cc>
 8004d6c:	f3af 8000 	nop.w
 8004d70:	cccccccd 	.word	0xcccccccd
 8004d74:	c0380ccc 	.word	0xc0380ccc
 8004d78:	b851eb85 	.word	0xb851eb85
 8004d7c:	406ecd1e 	.word	0x406ecd1e
 8004d80:	200010b0 	.word	0x200010b0
 8004d84:	20001040 	.word	0x20001040
 8004d88:	2000090c 	.word	0x2000090c
 8004d8c:	2000105c 	.word	0x2000105c
 8004d90:	200010a0 	.word	0x200010a0
 8004d94:	2000106c 	.word	0x2000106c
 8004d98:	43020000 	.word	0x43020000
 8004d9c:	200014a8 	.word	0x200014a8
 8004da0:	2000028b 	.word	0x2000028b
 8004da4:	200009b0 	.word	0x200009b0
	  }

	  else if(BATT_State==STATE_FULL_CHARGE_DISCHARGE)
 8004da8:	4ba3      	ldr	r3, [pc, #652]	; (8005038 <TIM2_IRQHandler+0x750>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d101      	bne.n	8004db4 <TIM2_IRQHandler+0x4cc>
	  {
		  Batt_Protection_when_chargedischarge();
 8004db0:	f001 fbde 	bl	8006570 <Batt_Protection_when_chargedischarge>
	  }


	  //********************* Clearing protection status *****************************////
	  // ---> Clearing UnderVoltage
	  if(((Clear_Trip_undervoltage==1)||(VBATT>54))&&flag_trip_undervoltage==ON)
 8004db4:	4ba1      	ldr	r3, [pc, #644]	; (800503c <TIM2_IRQHandler+0x754>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d008      	beq.n	8004dce <TIM2_IRQHandler+0x4e6>
 8004dbc:	4ba0      	ldr	r3, [pc, #640]	; (8005040 <TIM2_IRQHandler+0x758>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	49a0      	ldr	r1, [pc, #640]	; (8005044 <TIM2_IRQHandler+0x75c>)
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fc f97a 	bl	80010bc <__aeabi_fcmpgt>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <TIM2_IRQHandler+0x4fa>
 8004dce:	4b9e      	ldr	r3, [pc, #632]	; (8005048 <TIM2_IRQHandler+0x760>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d105      	bne.n	8004de2 <TIM2_IRQHandler+0x4fa>
	  {
		  flag_trip_undervoltage=OFF;
 8004dd6:	4b9c      	ldr	r3, [pc, #624]	; (8005048 <TIM2_IRQHandler+0x760>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
		  Clear_Trip_undervoltage=0;
 8004ddc:	4b97      	ldr	r3, [pc, #604]	; (800503c <TIM2_IRQHandler+0x754>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverCurrent Discharge
	  if(flag_trip_overcurrentdischarge==ON && Clear_Trip_overcurrentdischarge==1)
 8004de2:	4b9a      	ldr	r3, [pc, #616]	; (800504c <TIM2_IRQHandler+0x764>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d109      	bne.n	8004dfe <TIM2_IRQHandler+0x516>
 8004dea:	4b99      	ldr	r3, [pc, #612]	; (8005050 <TIM2_IRQHandler+0x768>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d105      	bne.n	8004dfe <TIM2_IRQHandler+0x516>
	  {
		  flag_trip_overcurrentdischarge=OFF;
 8004df2:	4b96      	ldr	r3, [pc, #600]	; (800504c <TIM2_IRQHandler+0x764>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
		  Clear_Trip_overcurrentdischarge=0;
 8004df8:	4b95      	ldr	r3, [pc, #596]	; (8005050 <TIM2_IRQHandler+0x768>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverTemperature
	  if(flag_trip_overtemperature==ON && (Suhu_T1<40)&&(Suhu_T2<50)&&(Suhu_T3<40)&&(Suhu_T4<50))
 8004dfe:	4b95      	ldr	r3, [pc, #596]	; (8005054 <TIM2_IRQHandler+0x76c>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d126      	bne.n	8004e54 <TIM2_IRQHandler+0x56c>
 8004e06:	4b94      	ldr	r3, [pc, #592]	; (8005058 <TIM2_IRQHandler+0x770>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4994      	ldr	r1, [pc, #592]	; (800505c <TIM2_IRQHandler+0x774>)
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fc f937 	bl	8001080 <__aeabi_fcmplt>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01d      	beq.n	8004e54 <TIM2_IRQHandler+0x56c>
 8004e18:	4b91      	ldr	r3, [pc, #580]	; (8005060 <TIM2_IRQHandler+0x778>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4991      	ldr	r1, [pc, #580]	; (8005064 <TIM2_IRQHandler+0x77c>)
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fc f92e 	bl	8001080 <__aeabi_fcmplt>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d014      	beq.n	8004e54 <TIM2_IRQHandler+0x56c>
 8004e2a:	4b8f      	ldr	r3, [pc, #572]	; (8005068 <TIM2_IRQHandler+0x780>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	498b      	ldr	r1, [pc, #556]	; (800505c <TIM2_IRQHandler+0x774>)
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fc f925 	bl	8001080 <__aeabi_fcmplt>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00b      	beq.n	8004e54 <TIM2_IRQHandler+0x56c>
 8004e3c:	4b8b      	ldr	r3, [pc, #556]	; (800506c <TIM2_IRQHandler+0x784>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4988      	ldr	r1, [pc, #544]	; (8005064 <TIM2_IRQHandler+0x77c>)
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fc f91c 	bl	8001080 <__aeabi_fcmplt>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <TIM2_IRQHandler+0x56c>
	  {
		  flag_trip_overtemperature=OFF;
 8004e4e:	4b81      	ldr	r3, [pc, #516]	; (8005054 <TIM2_IRQHandler+0x76c>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing UnderTemperature
	  if(flag_trip_undertemperature==ON && (Suhu_T1>20)&&(Suhu_T2>20)&&(Suhu_T3>20)&&(Suhu_T4>20))
 8004e54:	4b86      	ldr	r3, [pc, #536]	; (8005070 <TIM2_IRQHandler+0x788>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d126      	bne.n	8004eaa <TIM2_IRQHandler+0x5c2>
 8004e5c:	4b7e      	ldr	r3, [pc, #504]	; (8005058 <TIM2_IRQHandler+0x770>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4984      	ldr	r1, [pc, #528]	; (8005074 <TIM2_IRQHandler+0x78c>)
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fc f92a 	bl	80010bc <__aeabi_fcmpgt>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01d      	beq.n	8004eaa <TIM2_IRQHandler+0x5c2>
 8004e6e:	4b7c      	ldr	r3, [pc, #496]	; (8005060 <TIM2_IRQHandler+0x778>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4980      	ldr	r1, [pc, #512]	; (8005074 <TIM2_IRQHandler+0x78c>)
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fc f921 	bl	80010bc <__aeabi_fcmpgt>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d014      	beq.n	8004eaa <TIM2_IRQHandler+0x5c2>
 8004e80:	4b79      	ldr	r3, [pc, #484]	; (8005068 <TIM2_IRQHandler+0x780>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	497b      	ldr	r1, [pc, #492]	; (8005074 <TIM2_IRQHandler+0x78c>)
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fc f918 	bl	80010bc <__aeabi_fcmpgt>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00b      	beq.n	8004eaa <TIM2_IRQHandler+0x5c2>
 8004e92:	4b76      	ldr	r3, [pc, #472]	; (800506c <TIM2_IRQHandler+0x784>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4977      	ldr	r1, [pc, #476]	; (8005074 <TIM2_IRQHandler+0x78c>)
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fc f90f 	bl	80010bc <__aeabi_fcmpgt>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <TIM2_IRQHandler+0x5c2>
	  {
		  flag_trip_undertemperature=OFF;
 8004ea4:	4b72      	ldr	r3, [pc, #456]	; (8005070 <TIM2_IRQHandler+0x788>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverDischarge
	   if(flag_trip_SOCOverDischarge==ON && Pack_SOC>20)
 8004eaa:	4b73      	ldr	r3, [pc, #460]	; (8005078 <TIM2_IRQHandler+0x790>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d10b      	bne.n	8004eca <TIM2_IRQHandler+0x5e2>
 8004eb2:	4b72      	ldr	r3, [pc, #456]	; (800507c <TIM2_IRQHandler+0x794>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	496f      	ldr	r1, [pc, #444]	; (8005074 <TIM2_IRQHandler+0x78c>)
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fc f8ff 	bl	80010bc <__aeabi_fcmpgt>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <TIM2_IRQHandler+0x5e2>
	   {
		  flag_trip_SOCOverDischarge=OFF;
 8004ec4:	4b6c      	ldr	r3, [pc, #432]	; (8005078 <TIM2_IRQHandler+0x790>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	701a      	strb	r2, [r3, #0]
	   }
	   // ---> Clearing OverCharge
	   if(flag_trip_SOCOverCharge==ON && Pack_SOC<70)
 8004eca:	4b6d      	ldr	r3, [pc, #436]	; (8005080 <TIM2_IRQHandler+0x798>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d10b      	bne.n	8004eea <TIM2_IRQHandler+0x602>
 8004ed2:	4b6a      	ldr	r3, [pc, #424]	; (800507c <TIM2_IRQHandler+0x794>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	496b      	ldr	r1, [pc, #428]	; (8005084 <TIM2_IRQHandler+0x79c>)
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fc f8d1 	bl	8001080 <__aeabi_fcmplt>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <TIM2_IRQHandler+0x602>
	   {
		  flag_trip_SOCOverCharge=OFF;
 8004ee4:	4b66      	ldr	r3, [pc, #408]	; (8005080 <TIM2_IRQHandler+0x798>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	701a      	strb	r2, [r3, #0]
	   }
  }
	  i++;
 8004eea:	4b67      	ldr	r3, [pc, #412]	; (8005088 <TIM2_IRQHandler+0x7a0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	4a65      	ldr	r2, [pc, #404]	; (8005088 <TIM2_IRQHandler+0x7a0>)
 8004ef2:	6013      	str	r3, [r2, #0]
	  i=i%maxdata;
 8004ef4:	4b64      	ldr	r3, [pc, #400]	; (8005088 <TIM2_IRQHandler+0x7a0>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	4b64      	ldr	r3, [pc, #400]	; (800508c <TIM2_IRQHandler+0x7a4>)
 8004efa:	fb83 1302 	smull	r1, r3, r3, r2
 8004efe:	1159      	asrs	r1, r3, #5
 8004f00:	17d3      	asrs	r3, r2, #31
 8004f02:	1acb      	subs	r3, r1, r3
 8004f04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004f08:	fb01 f303 	mul.w	r3, r1, r3
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	4a5e      	ldr	r2, [pc, #376]	; (8005088 <TIM2_IRQHandler+0x7a0>)
 8004f10:	6013      	str	r3, [r2, #0]

  //////////// Bagian Hitung SOC /////// SOC akan dihitung berdasarkan state baterai (Jika charge maupun discharge)
  if(BATT_State==STATE_CHARGE||BATT_State==STATE_DISCHARGE||BATT_State==STATE_FULL_CHARGE_DISCHARGE||BATT_State==STATE_STANDBY)
 8004f12:	4b49      	ldr	r3, [pc, #292]	; (8005038 <TIM2_IRQHandler+0x750>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d00c      	beq.n	8004f34 <TIM2_IRQHandler+0x64c>
 8004f1a:	4b47      	ldr	r3, [pc, #284]	; (8005038 <TIM2_IRQHandler+0x750>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d008      	beq.n	8004f34 <TIM2_IRQHandler+0x64c>
 8004f22:	4b45      	ldr	r3, [pc, #276]	; (8005038 <TIM2_IRQHandler+0x750>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d004      	beq.n	8004f34 <TIM2_IRQHandler+0x64c>
 8004f2a:	4b43      	ldr	r3, [pc, #268]	; (8005038 <TIM2_IRQHandler+0x750>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f040 80f0 	bne.w	8005114 <TIM2_IRQHandler+0x82c>
  {
	  time_soc++;
 8004f34:	4b56      	ldr	r3, [pc, #344]	; (8005090 <TIM2_IRQHandler+0x7a8>)
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	4b54      	ldr	r3, [pc, #336]	; (8005090 <TIM2_IRQHandler+0x7a8>)
 8004f3e:	801a      	strh	r2, [r3, #0]
	  sum_current+=IBATT;
 8004f40:	4b54      	ldr	r3, [pc, #336]	; (8005094 <TIM2_IRQHandler+0x7ac>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	4b54      	ldr	r3, [pc, #336]	; (8005098 <TIM2_IRQHandler+0x7b0>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f7fb fdf2 	bl	8000b34 <__addsf3>
 8004f50:	4603      	mov	r3, r0
 8004f52:	461a      	mov	r2, r3
 8004f54:	4b4f      	ldr	r3, [pc, #316]	; (8005094 <TIM2_IRQHandler+0x7ac>)
 8004f56:	601a      	str	r2, [r3, #0]
	  if(time_soc>999)
 8004f58:	4b4d      	ldr	r3, [pc, #308]	; (8005090 <TIM2_IRQHandler+0x7a8>)
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f60:	f0c0 80d8 	bcc.w	8005114 <TIM2_IRQHandler+0x82c>
	  {
		  AH_Consumption = (-1*sum_current/1000*(1.0/3600.0))/Pack_Cap*100; //Konsumsi System 4e-5
 8004f64:	4b4b      	ldr	r3, [pc, #300]	; (8005094 <TIM2_IRQHandler+0x7ac>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004f6c:	494b      	ldr	r1, [pc, #300]	; (800509c <TIM2_IRQHandler+0x7b4>)
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fb ff9c 	bl	8000eac <__aeabi_fdiv>
 8004f74:	4603      	mov	r3, r0
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fb fa56 	bl	8000428 <__aeabi_f2d>
 8004f7c:	a32c      	add	r3, pc, #176	; (adr r3, 8005030 <TIM2_IRQHandler+0x748>)
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	f7fb faa9 	bl	80004d8 <__aeabi_dmul>
 8004f86:	4603      	mov	r3, r0
 8004f88:	460c      	mov	r4, r1
 8004f8a:	4625      	mov	r5, r4
 8004f8c:	461c      	mov	r4, r3
 8004f8e:	4b44      	ldr	r3, [pc, #272]	; (80050a0 <TIM2_IRQHandler+0x7b8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fb fa48 	bl	8000428 <__aeabi_f2d>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	f7fb fbc4 	bl	800072c <__aeabi_ddiv>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	4618      	mov	r0, r3
 8004faa:	4621      	mov	r1, r4
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	4b3c      	ldr	r3, [pc, #240]	; (80050a4 <TIM2_IRQHandler+0x7bc>)
 8004fb2:	f7fb fa91 	bl	80004d8 <__aeabi_dmul>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	4618      	mov	r0, r3
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	f7fb fd63 	bl	8000a88 <__aeabi_d2f>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	4b38      	ldr	r3, [pc, #224]	; (80050a8 <TIM2_IRQHandler+0x7c0>)
 8004fc6:	601a      	str	r2, [r3, #0]
		  AH_Total = AH_Total + (sum_current/3600);
 8004fc8:	4b32      	ldr	r3, [pc, #200]	; (8005094 <TIM2_IRQHandler+0x7ac>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4937      	ldr	r1, [pc, #220]	; (80050ac <TIM2_IRQHandler+0x7c4>)
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fb ff6c 	bl	8000eac <__aeabi_fdiv>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	4b35      	ldr	r3, [pc, #212]	; (80050b0 <TIM2_IRQHandler+0x7c8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f7fb fda8 	bl	8000b34 <__addsf3>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4b31      	ldr	r3, [pc, #196]	; (80050b0 <TIM2_IRQHandler+0x7c8>)
 8004fea:	601a      	str	r2, [r3, #0]
		  Pack_SOC=Pack_SOC+AH_Consumption;
 8004fec:	4b23      	ldr	r3, [pc, #140]	; (800507c <TIM2_IRQHandler+0x794>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <TIM2_IRQHandler+0x7c0>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f7fb fd9c 	bl	8000b34 <__addsf3>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	461a      	mov	r2, r3
 8005000:	4b1e      	ldr	r3, [pc, #120]	; (800507c <TIM2_IRQHandler+0x794>)
 8005002:	601a      	str	r2, [r3, #0]
		  time_soc=0;
 8005004:	4b22      	ldr	r3, [pc, #136]	; (8005090 <TIM2_IRQHandler+0x7a8>)
 8005006:	2200      	movs	r2, #0
 8005008:	801a      	strh	r2, [r3, #0]
		  sum_current=0;
 800500a:	4b22      	ldr	r3, [pc, #136]	; (8005094 <TIM2_IRQHandler+0x7ac>)
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
		  cek_CC++;
 8005012:	4b28      	ldr	r3, [pc, #160]	; (80050b4 <TIM2_IRQHandler+0x7cc>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3301      	adds	r3, #1
 8005018:	4a26      	ldr	r2, [pc, #152]	; (80050b4 <TIM2_IRQHandler+0x7cc>)
 800501a:	6013      	str	r3, [r2, #0]

		  grad=(100-0)/(batas_atas-batas_bawah);
 800501c:	4b26      	ldr	r3, [pc, #152]	; (80050b8 <TIM2_IRQHandler+0x7d0>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4b26      	ldr	r3, [pc, #152]	; (80050bc <TIM2_IRQHandler+0x7d4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f7fb fd82 	bl	8000b30 <__aeabi_fsub>
 800502c:	e048      	b.n	80050c0 <TIM2_IRQHandler+0x7d8>
 800502e:	bf00      	nop
 8005030:	789abcdf 	.word	0x789abcdf
 8005034:	3f323456 	.word	0x3f323456
 8005038:	200009b0 	.word	0x200009b0
 800503c:	200010ac 	.word	0x200010ac
 8005040:	2000103c 	.word	0x2000103c
 8005044:	42580000 	.word	0x42580000
 8005048:	20001061 	.word	0x20001061
 800504c:	20001070 	.word	0x20001070
 8005050:	20001048 	.word	0x20001048
 8005054:	20001038 	.word	0x20001038
 8005058:	2000106c 	.word	0x2000106c
 800505c:	42200000 	.word	0x42200000
 8005060:	200014a8 	.word	0x200014a8
 8005064:	42480000 	.word	0x42480000
 8005068:	20001040 	.word	0x20001040
 800506c:	200010a0 	.word	0x200010a0
 8005070:	20001060 	.word	0x20001060
 8005074:	41a00000 	.word	0x41a00000
 8005078:	20001094 	.word	0x20001094
 800507c:	20000be4 	.word	0x20000be4
 8005080:	20000c31 	.word	0x20000c31
 8005084:	428c0000 	.word	0x428c0000
 8005088:	20001064 	.word	0x20001064
 800508c:	10624dd3 	.word	0x10624dd3
 8005090:	2000103a 	.word	0x2000103a
 8005094:	200014ac 	.word	0x200014ac
 8005098:	20001058 	.word	0x20001058
 800509c:	447a0000 	.word	0x447a0000
 80050a0:	20000010 	.word	0x20000010
 80050a4:	40590000 	.word	0x40590000
 80050a8:	2000101c 	.word	0x2000101c
 80050ac:	45610000 	.word	0x45610000
 80050b0:	20000698 	.word	0x20000698
 80050b4:	2000069c 	.word	0x2000069c
 80050b8:	2000007c 	.word	0x2000007c
 80050bc:	20000080 	.word	0x20000080
 80050c0:	4603      	mov	r3, r0
 80050c2:	4619      	mov	r1, r3
 80050c4:	4814      	ldr	r0, [pc, #80]	; (8005118 <TIM2_IRQHandler+0x830>)
 80050c6:	f7fb fef1 	bl	8000eac <__aeabi_fdiv>
 80050ca:	4603      	mov	r3, r0
 80050cc:	461a      	mov	r2, r3
 80050ce:	4b13      	ldr	r3, [pc, #76]	; (800511c <TIM2_IRQHandler+0x834>)
 80050d0:	601a      	str	r2, [r3, #0]
		  constanta=grad*batas_bawah*(-1);
 80050d2:	4b12      	ldr	r3, [pc, #72]	; (800511c <TIM2_IRQHandler+0x834>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <TIM2_IRQHandler+0x838>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4619      	mov	r1, r3
 80050dc:	4610      	mov	r0, r2
 80050de:	f7fb fe31 	bl	8000d44 <__aeabi_fmul>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80050e8:	4a0e      	ldr	r2, [pc, #56]	; (8005124 <TIM2_IRQHandler+0x83c>)
 80050ea:	6013      	str	r3, [r2, #0]
		  SOC_manipulasi=grad*Pack_SOC+constanta;
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <TIM2_IRQHandler+0x834>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	4b0d      	ldr	r3, [pc, #52]	; (8005128 <TIM2_IRQHandler+0x840>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f7fb fe24 	bl	8000d44 <__aeabi_fmul>
 80050fc:	4603      	mov	r3, r0
 80050fe:	461a      	mov	r2, r3
 8005100:	4b08      	ldr	r3, [pc, #32]	; (8005124 <TIM2_IRQHandler+0x83c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4619      	mov	r1, r3
 8005106:	4610      	mov	r0, r2
 8005108:	f7fb fd14 	bl	8000b34 <__addsf3>
 800510c:	4603      	mov	r3, r0
 800510e:	461a      	mov	r2, r3
 8005110:	4b06      	ldr	r3, [pc, #24]	; (800512c <TIM2_IRQHandler+0x844>)
 8005112:	601a      	str	r2, [r3, #0]
	  }
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8005114:	bf00      	nop
 8005116:	bdb0      	pop	{r4, r5, r7, pc}
 8005118:	42c80000 	.word	0x42c80000
 800511c:	20001078 	.word	0x20001078
 8005120:	20000080 	.word	0x20000080
 8005124:	20001044 	.word	0x20001044
 8005128:	20000be4 	.word	0x20000be4
 800512c:	20000bb4 	.word	0x20000bb4

08005130 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005134:	4805      	ldr	r0, [pc, #20]	; (800514c <TIM3_IRQHandler+0x1c>)
 8005136:	f005 fd7b 	bl	800ac30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(flag_start_shutdown==1)
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <TIM3_IRQHandler+0x20>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <TIM3_IRQHandler+0x16>
  {
	  BMS_CAN_Tx();
 8005142:	f7fc fae3 	bl	800170c <BMS_CAN_Tx>
  }
//  BMS_CAN_Rx();
  /* USER CODE END TIM3_IRQn 1 */
}
 8005146:	bf00      	nop
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	200014b0 	.word	0x200014b0
 8005150:	20000994 	.word	0x20000994
 8005154:	00000000 	.word	0x00000000

08005158 <Batt_Protection_when_discharge>:

/* USER CODE BEGIN 1 */
void Batt_Protection_when_discharge(void)
{
 8005158:	b5b0      	push	{r4, r5, r7, lr}
 800515a:	af00      	add	r7, sp, #0
	///////////////////// Short Circuit //////////////////////////////////////
			  	  if(IBATT>(VBATT/0.9))
 800515c:	4b82      	ldr	r3, [pc, #520]	; (8005368 <Batt_Protection_when_discharge+0x210>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f7fb f961 	bl	8000428 <__aeabi_f2d>
 8005166:	4604      	mov	r4, r0
 8005168:	460d      	mov	r5, r1
 800516a:	4b80      	ldr	r3, [pc, #512]	; (800536c <Batt_Protection_when_discharge+0x214>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f7fb f95a 	bl	8000428 <__aeabi_f2d>
 8005174:	a378      	add	r3, pc, #480	; (adr r3, 8005358 <Batt_Protection_when_discharge+0x200>)
 8005176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517a:	f7fb fad7 	bl	800072c <__aeabi_ddiv>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4620      	mov	r0, r4
 8005184:	4629      	mov	r1, r5
 8005186:	f7fb fc37 	bl	80009f8 <__aeabi_dcmpgt>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d016      	beq.n	80051be <Batt_Protection_when_discharge+0x66>
	 		  	  {
			  		  Isc=IBATT;
 8005190:	4b75      	ldr	r3, [pc, #468]	; (8005368 <Batt_Protection_when_discharge+0x210>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a76      	ldr	r2, [pc, #472]	; (8005370 <Batt_Protection_when_discharge+0x218>)
 8005196:	6013      	str	r3, [r2, #0]
			  		  Vsc=VBATT;
 8005198:	4b74      	ldr	r3, [pc, #464]	; (800536c <Batt_Protection_when_discharge+0x214>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a75      	ldr	r2, [pc, #468]	; (8005374 <Batt_Protection_when_discharge+0x21c>)
 800519e:	6013      	str	r3, [r2, #0]
	 		  		  fault_code=12;
 80051a0:	4b75      	ldr	r3, [pc, #468]	; (8005378 <Batt_Protection_when_discharge+0x220>)
 80051a2:	220c      	movs	r2, #12
 80051a4:	701a      	strb	r2, [r3, #0]
	 		  		  Batt_Open_Mode();
 80051a6:	f7fc f905 	bl	80013b4 <Batt_Open_Mode>
	 		  		  flag_trip_shortcircuit=ON;
 80051aa:	4b74      	ldr	r3, [pc, #464]	; (800537c <Batt_Protection_when_discharge+0x224>)
 80051ac:	2201      	movs	r2, #1
 80051ae:	701a      	strb	r2, [r3, #0]
	 		  		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80051b0:	2200      	movs	r2, #0
 80051b2:	2104      	movs	r1, #4
 80051b4:	4872      	ldr	r0, [pc, #456]	; (8005380 <Batt_Protection_when_discharge+0x228>)
 80051b6:	f004 f9e2 	bl	800957e <HAL_GPIO_WritePin>
			  		  T_trip_cycle=T_trip_cycle-0.001;
			  		  T_I_Over_trip_cycle-=0.001;
			  		  if(T_trip_cycle<0) T_trip_cycle=0;
			  		if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
			  	  }
}
 80051ba:	f000 bddd 	b.w	8005d78 <Batt_Protection_when_discharge+0xc20>
			  	  else if(VBATT<V_Under_Set && flag_trip_undervoltage==OFF )   //Indikasi terjadi Undervoltage
 80051be:	4b6b      	ldr	r3, [pc, #428]	; (800536c <Batt_Protection_when_discharge+0x214>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4b70      	ldr	r3, [pc, #448]	; (8005384 <Batt_Protection_when_discharge+0x22c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f7fb ff59 	bl	8001080 <__aeabi_fcmplt>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80eb 	beq.w	80053ac <Batt_Protection_when_discharge+0x254>
 80051d6:	4b6c      	ldr	r3, [pc, #432]	; (8005388 <Batt_Protection_when_discharge+0x230>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f040 80e6 	bne.w	80053ac <Batt_Protection_when_discharge+0x254>
			  		fault_code=1;
 80051e0:	4b65      	ldr	r3, [pc, #404]	; (8005378 <Batt_Protection_when_discharge+0x220>)
 80051e2:	2201      	movs	r2, #1
 80051e4:	701a      	strb	r2, [r3, #0]
			  		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 80051e6:	4b69      	ldr	r3, [pc, #420]	; (800538c <Batt_Protection_when_discharge+0x234>)
 80051e8:	681c      	ldr	r4, [r3, #0]
 80051ea:	4b60      	ldr	r3, [pc, #384]	; (800536c <Batt_Protection_when_discharge+0x214>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4b65      	ldr	r3, [pc, #404]	; (8005384 <Batt_Protection_when_discharge+0x22c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f7fb fe59 	bl	8000eac <__aeabi_fdiv>
 80051fa:	4603      	mov	r3, r0
 80051fc:	4619      	mov	r1, r3
 80051fe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005202:	f7fb fc95 	bl	8000b30 <__aeabi_fsub>
 8005206:	4603      	mov	r3, r0
 8005208:	4619      	mov	r1, r3
 800520a:	4620      	mov	r0, r4
 800520c:	f7fb fe4e 	bl	8000eac <__aeabi_fdiv>
 8005210:	4603      	mov	r3, r0
 8005212:	461a      	mov	r2, r3
 8005214:	4b5e      	ldr	r3, [pc, #376]	; (8005390 <Batt_Protection_when_discharge+0x238>)
 8005216:	601a      	str	r2, [r3, #0]
			  		T_trip_cycle+=0.001;
 8005218:	4b5e      	ldr	r3, [pc, #376]	; (8005394 <Batt_Protection_when_discharge+0x23c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f7fb f903 	bl	8000428 <__aeabi_f2d>
 8005222:	a34f      	add	r3, pc, #316	; (adr r3, 8005360 <Batt_Protection_when_discharge+0x208>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fa ffa0 	bl	800016c <__adddf3>
 800522c:	4603      	mov	r3, r0
 800522e:	460c      	mov	r4, r1
 8005230:	4618      	mov	r0, r3
 8005232:	4621      	mov	r1, r4
 8005234:	f7fb fc28 	bl	8000a88 <__aeabi_d2f>
 8005238:	4602      	mov	r2, r0
 800523a:	4b56      	ldr	r3, [pc, #344]	; (8005394 <Batt_Protection_when_discharge+0x23c>)
 800523c:	601a      	str	r2, [r3, #0]
			  		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF)
 800523e:	4b55      	ldr	r3, [pc, #340]	; (8005394 <Batt_Protection_when_discharge+0x23c>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b53      	ldr	r3, [pc, #332]	; (8005390 <Batt_Protection_when_discharge+0x238>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4619      	mov	r1, r3
 8005248:	4610      	mov	r0, r2
 800524a:	f7fb ff37 	bl	80010bc <__aeabi_fcmpgt>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d011      	beq.n	8005278 <Batt_Protection_when_discharge+0x120>
 8005254:	4b4c      	ldr	r3, [pc, #304]	; (8005388 <Batt_Protection_when_discharge+0x230>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10d      	bne.n	8005278 <Batt_Protection_when_discharge+0x120>
			  			Batt_Open_Mode();
 800525c:	f7fc f8aa 	bl	80013b4 <Batt_Open_Mode>
			  			T_trip_cycle=T_Under_trip;
 8005260:	4b4b      	ldr	r3, [pc, #300]	; (8005390 <Batt_Protection_when_discharge+0x238>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a4b      	ldr	r2, [pc, #300]	; (8005394 <Batt_Protection_when_discharge+0x23c>)
 8005266:	6013      	str	r3, [r2, #0]
			  			flag_trip_undervoltage=ON;
 8005268:	4b47      	ldr	r3, [pc, #284]	; (8005388 <Batt_Protection_when_discharge+0x230>)
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
			  			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 800526e:	2200      	movs	r2, #0
 8005270:	2104      	movs	r1, #4
 8005272:	4843      	ldr	r0, [pc, #268]	; (8005380 <Batt_Protection_when_discharge+0x228>)
 8005274:	f004 f983 	bl	800957e <HAL_GPIO_WritePin>
			  		if(flag_trip_undervoltage==OFF)
 8005278:	4b43      	ldr	r3, [pc, #268]	; (8005388 <Batt_Protection_when_discharge+0x230>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	f040 8578 	bne.w	8005d72 <Batt_Protection_when_discharge+0xc1a>
			  			if(T_Under_trip-T_trip_cycle>15)
 8005282:	4b43      	ldr	r3, [pc, #268]	; (8005390 <Batt_Protection_when_discharge+0x238>)
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	4b43      	ldr	r3, [pc, #268]	; (8005394 <Batt_Protection_when_discharge+0x23c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4619      	mov	r1, r3
 800528c:	4610      	mov	r0, r2
 800528e:	f7fb fc4f 	bl	8000b30 <__aeabi_fsub>
 8005292:	4603      	mov	r3, r0
 8005294:	4940      	ldr	r1, [pc, #256]	; (8005398 <Batt_Protection_when_discharge+0x240>)
 8005296:	4618      	mov	r0, r3
 8005298:	f7fb ff10 	bl	80010bc <__aeabi_fcmpgt>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d018      	beq.n	80052d4 <Batt_Protection_when_discharge+0x17c>
			  				if((test_tim2%1000)==0)
 80052a2:	4b3e      	ldr	r3, [pc, #248]	; (800539c <Batt_Protection_when_discharge+0x244>)
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4b3e      	ldr	r3, [pc, #248]	; (80053a0 <Batt_Protection_when_discharge+0x248>)
 80052a8:	fb83 1302 	smull	r1, r3, r3, r2
 80052ac:	1199      	asrs	r1, r3, #6
 80052ae:	17d3      	asrs	r3, r2, #31
 80052b0:	1acb      	subs	r3, r1, r3
 80052b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80052b6:	fb01 f303 	mul.w	r3, r1, r3
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f040 8558 	bne.w	8005d72 <Batt_Protection_when_discharge+0xc1a>
			  					BUZZ_Toggle;
 80052c2:	2104      	movs	r1, #4
 80052c4:	482e      	ldr	r0, [pc, #184]	; (8005380 <Batt_Protection_when_discharge+0x228>)
 80052c6:	f004 f972 	bl	80095ae <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 80052ca:	4b34      	ldr	r3, [pc, #208]	; (800539c <Batt_Protection_when_discharge+0x244>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_undervoltage==OFF)
 80052d0:	f000 bd4f 	b.w	8005d72 <Batt_Protection_when_discharge+0xc1a>
			  			else if(T_Under_trip-T_trip_cycle>10)
 80052d4:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <Batt_Protection_when_discharge+0x238>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	4b2e      	ldr	r3, [pc, #184]	; (8005394 <Batt_Protection_when_discharge+0x23c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f7fb fc26 	bl	8000b30 <__aeabi_fsub>
 80052e4:	4603      	mov	r3, r0
 80052e6:	492f      	ldr	r1, [pc, #188]	; (80053a4 <Batt_Protection_when_discharge+0x24c>)
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fb fee7 	bl	80010bc <__aeabi_fcmpgt>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d017      	beq.n	8005324 <Batt_Protection_when_discharge+0x1cc>
			  				if((test_tim2%100)==0)
 80052f4:	4b29      	ldr	r3, [pc, #164]	; (800539c <Batt_Protection_when_discharge+0x244>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	4b2b      	ldr	r3, [pc, #172]	; (80053a8 <Batt_Protection_when_discharge+0x250>)
 80052fa:	fb83 1302 	smull	r1, r3, r3, r2
 80052fe:	1159      	asrs	r1, r3, #5
 8005300:	17d3      	asrs	r3, r2, #31
 8005302:	1acb      	subs	r3, r1, r3
 8005304:	2164      	movs	r1, #100	; 0x64
 8005306:	fb01 f303 	mul.w	r3, r1, r3
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	f040 8530 	bne.w	8005d72 <Batt_Protection_when_discharge+0xc1a>
			  					BUZZ_Toggle;
 8005312:	2104      	movs	r1, #4
 8005314:	481a      	ldr	r0, [pc, #104]	; (8005380 <Batt_Protection_when_discharge+0x228>)
 8005316:	f004 f94a 	bl	80095ae <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 800531a:	4b20      	ldr	r3, [pc, #128]	; (800539c <Batt_Protection_when_discharge+0x244>)
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_undervoltage==OFF)
 8005320:	f000 bd27 	b.w	8005d72 <Batt_Protection_when_discharge+0xc1a>
			  			else if(T_Under_trip-T_trip_cycle>1)
 8005324:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <Batt_Protection_when_discharge+0x238>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	4b1a      	ldr	r3, [pc, #104]	; (8005394 <Batt_Protection_when_discharge+0x23c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4619      	mov	r1, r3
 800532e:	4610      	mov	r0, r2
 8005330:	f7fb fbfe 	bl	8000b30 <__aeabi_fsub>
 8005334:	4603      	mov	r3, r0
 8005336:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800533a:	4618      	mov	r0, r3
 800533c:	f7fb febe 	bl	80010bc <__aeabi_fcmpgt>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <Batt_Protection_when_discharge+0x1f2>
			  		if(flag_trip_undervoltage==OFF)
 8005346:	f000 bd14 	b.w	8005d72 <Batt_Protection_when_discharge+0xc1a>
			  				HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 800534a:	2201      	movs	r2, #1
 800534c:	2104      	movs	r1, #4
 800534e:	480c      	ldr	r0, [pc, #48]	; (8005380 <Batt_Protection_when_discharge+0x228>)
 8005350:	f004 f915 	bl	800957e <HAL_GPIO_WritePin>
			  		if(flag_trip_undervoltage==OFF)
 8005354:	f000 bd0d 	b.w	8005d72 <Batt_Protection_when_discharge+0xc1a>
 8005358:	cccccccd 	.word	0xcccccccd
 800535c:	3feccccc 	.word	0x3feccccc
 8005360:	d2f1a9fc 	.word	0xd2f1a9fc
 8005364:	3f50624d 	.word	0x3f50624d
 8005368:	20001058 	.word	0x20001058
 800536c:	2000103c 	.word	0x2000103c
 8005370:	2000104c 	.word	0x2000104c
 8005374:	2000107c 	.word	0x2000107c
 8005378:	20001068 	.word	0x20001068
 800537c:	20000c32 	.word	0x20000c32
 8005380:	40011000 	.word	0x40011000
 8005384:	20000070 	.word	0x20000070
 8005388:	20001061 	.word	0x20001061
 800538c:	20000050 	.word	0x20000050
 8005390:	20001028 	.word	0x20001028
 8005394:	20001074 	.word	0x20001074
 8005398:	41700000 	.word	0x41700000
 800539c:	20000bdc 	.word	0x20000bdc
 80053a0:	10624dd3 	.word	0x10624dd3
 80053a4:	41200000 	.word	0x41200000
 80053a8:	51eb851f 	.word	0x51eb851f
			  	  else if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF)   //Indikasi terjadi Over Current
 80053ac:	4ba8      	ldr	r3, [pc, #672]	; (8005650 <Batt_Protection_when_discharge+0x4f8>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4ba8      	ldr	r3, [pc, #672]	; (8005654 <Batt_Protection_when_discharge+0x4fc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4619      	mov	r1, r3
 80053b6:	4610      	mov	r0, r2
 80053b8:	f7fb fbba 	bl	8000b30 <__aeabi_fsub>
 80053bc:	4603      	mov	r3, r0
 80053be:	f04f 0100 	mov.w	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fb fe7a 	bl	80010bc <__aeabi_fcmpgt>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 80c1 	beq.w	8005552 <Batt_Protection_when_discharge+0x3fa>
 80053d0:	4ba1      	ldr	r3, [pc, #644]	; (8005658 <Batt_Protection_when_discharge+0x500>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f040 80bc 	bne.w	8005552 <Batt_Protection_when_discharge+0x3fa>
			  		fault_code=2;
 80053da:	4ba0      	ldr	r3, [pc, #640]	; (800565c <Batt_Protection_when_discharge+0x504>)
 80053dc:	2202      	movs	r2, #2
 80053de:	701a      	strb	r2, [r3, #0]
			  		T_I_Over_trip=TMS_I_Over/((IBATT/I_Over_Set)-1);
 80053e0:	4b9f      	ldr	r3, [pc, #636]	; (8005660 <Batt_Protection_when_discharge+0x508>)
 80053e2:	681c      	ldr	r4, [r3, #0]
 80053e4:	4b9a      	ldr	r3, [pc, #616]	; (8005650 <Batt_Protection_when_discharge+0x4f8>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	4b9a      	ldr	r3, [pc, #616]	; (8005654 <Batt_Protection_when_discharge+0x4fc>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4619      	mov	r1, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	f7fb fd5c 	bl	8000eac <__aeabi_fdiv>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fb fb98 	bl	8000b30 <__aeabi_fsub>
 8005400:	4603      	mov	r3, r0
 8005402:	4619      	mov	r1, r3
 8005404:	4620      	mov	r0, r4
 8005406:	f7fb fd51 	bl	8000eac <__aeabi_fdiv>
 800540a:	4603      	mov	r3, r0
 800540c:	461a      	mov	r2, r3
 800540e:	4b95      	ldr	r3, [pc, #596]	; (8005664 <Batt_Protection_when_discharge+0x50c>)
 8005410:	601a      	str	r2, [r3, #0]
			  		T_I_Over_trip_cycle+=0.001;
 8005412:	4b95      	ldr	r3, [pc, #596]	; (8005668 <Batt_Protection_when_discharge+0x510>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f7fb f806 	bl	8000428 <__aeabi_f2d>
 800541c:	a38a      	add	r3, pc, #552	; (adr r3, 8005648 <Batt_Protection_when_discharge+0x4f0>)
 800541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005422:	f7fa fea3 	bl	800016c <__adddf3>
 8005426:	4603      	mov	r3, r0
 8005428:	460c      	mov	r4, r1
 800542a:	4618      	mov	r0, r3
 800542c:	4621      	mov	r1, r4
 800542e:	f7fb fb2b 	bl	8000a88 <__aeabi_d2f>
 8005432:	4602      	mov	r2, r0
 8005434:	4b8c      	ldr	r3, [pc, #560]	; (8005668 <Batt_Protection_when_discharge+0x510>)
 8005436:	601a      	str	r2, [r3, #0]
			  		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF)
 8005438:	4b8b      	ldr	r3, [pc, #556]	; (8005668 <Batt_Protection_when_discharge+0x510>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	4b89      	ldr	r3, [pc, #548]	; (8005664 <Batt_Protection_when_discharge+0x50c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f7fb fe3a 	bl	80010bc <__aeabi_fcmpgt>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d011      	beq.n	8005472 <Batt_Protection_when_discharge+0x31a>
 800544e:	4b82      	ldr	r3, [pc, #520]	; (8005658 <Batt_Protection_when_discharge+0x500>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10d      	bne.n	8005472 <Batt_Protection_when_discharge+0x31a>
			  			Batt_Open_Mode();
 8005456:	f7fb ffad 	bl	80013b4 <Batt_Open_Mode>
			  			T_I_Over_trip_cycle=T_I_Over_trip;
 800545a:	4b82      	ldr	r3, [pc, #520]	; (8005664 <Batt_Protection_when_discharge+0x50c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a82      	ldr	r2, [pc, #520]	; (8005668 <Batt_Protection_when_discharge+0x510>)
 8005460:	6013      	str	r3, [r2, #0]
			  			flag_trip_overcurrentdischarge=ON;
 8005462:	4b7d      	ldr	r3, [pc, #500]	; (8005658 <Batt_Protection_when_discharge+0x500>)
 8005464:	2201      	movs	r2, #1
 8005466:	701a      	strb	r2, [r3, #0]
			  			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005468:	2200      	movs	r2, #0
 800546a:	2104      	movs	r1, #4
 800546c:	487f      	ldr	r0, [pc, #508]	; (800566c <Batt_Protection_when_discharge+0x514>)
 800546e:	f004 f886 	bl	800957e <HAL_GPIO_WritePin>
			  		if(flag_trip_overcurrentdischarge==OFF)
 8005472:	4b79      	ldr	r3, [pc, #484]	; (8005658 <Batt_Protection_when_discharge+0x500>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	f040 847d 	bne.w	8005d76 <Batt_Protection_when_discharge+0xc1e>
		  				if(T_I_Over_trip-T_I_Over_trip_cycle>15)
 800547c:	4b79      	ldr	r3, [pc, #484]	; (8005664 <Batt_Protection_when_discharge+0x50c>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	4b79      	ldr	r3, [pc, #484]	; (8005668 <Batt_Protection_when_discharge+0x510>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4619      	mov	r1, r3
 8005486:	4610      	mov	r0, r2
 8005488:	f7fb fb52 	bl	8000b30 <__aeabi_fsub>
 800548c:	4603      	mov	r3, r0
 800548e:	4978      	ldr	r1, [pc, #480]	; (8005670 <Batt_Protection_when_discharge+0x518>)
 8005490:	4618      	mov	r0, r3
 8005492:	f7fb fe13 	bl	80010bc <__aeabi_fcmpgt>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d018      	beq.n	80054ce <Batt_Protection_when_discharge+0x376>
		  					if((test_tim2%1000)==0)
 800549c:	4b75      	ldr	r3, [pc, #468]	; (8005674 <Batt_Protection_when_discharge+0x51c>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	4b75      	ldr	r3, [pc, #468]	; (8005678 <Batt_Protection_when_discharge+0x520>)
 80054a2:	fb83 1302 	smull	r1, r3, r3, r2
 80054a6:	1199      	asrs	r1, r3, #6
 80054a8:	17d3      	asrs	r3, r2, #31
 80054aa:	1acb      	subs	r3, r1, r3
 80054ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80054b0:	fb01 f303 	mul.w	r3, r1, r3
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f040 845d 	bne.w	8005d76 <Batt_Protection_when_discharge+0xc1e>
			  					BUZZ_Toggle;
 80054bc:	2104      	movs	r1, #4
 80054be:	486b      	ldr	r0, [pc, #428]	; (800566c <Batt_Protection_when_discharge+0x514>)
 80054c0:	f004 f875 	bl	80095ae <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 80054c4:	4b6b      	ldr	r3, [pc, #428]	; (8005674 <Batt_Protection_when_discharge+0x51c>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_overcurrentdischarge==OFF)
 80054ca:	f000 bc54 	b.w	8005d76 <Batt_Protection_when_discharge+0xc1e>
			  			else if(T_I_Over_trip-T_I_Over_trip_cycle>10)
 80054ce:	4b65      	ldr	r3, [pc, #404]	; (8005664 <Batt_Protection_when_discharge+0x50c>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4b65      	ldr	r3, [pc, #404]	; (8005668 <Batt_Protection_when_discharge+0x510>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f7fb fb29 	bl	8000b30 <__aeabi_fsub>
 80054de:	4603      	mov	r3, r0
 80054e0:	4966      	ldr	r1, [pc, #408]	; (800567c <Batt_Protection_when_discharge+0x524>)
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fb fdea 	bl	80010bc <__aeabi_fcmpgt>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d017      	beq.n	800551e <Batt_Protection_when_discharge+0x3c6>
			  				if((test_tim2%100)==0)
 80054ee:	4b61      	ldr	r3, [pc, #388]	; (8005674 <Batt_Protection_when_discharge+0x51c>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	4b63      	ldr	r3, [pc, #396]	; (8005680 <Batt_Protection_when_discharge+0x528>)
 80054f4:	fb83 1302 	smull	r1, r3, r3, r2
 80054f8:	1159      	asrs	r1, r3, #5
 80054fa:	17d3      	asrs	r3, r2, #31
 80054fc:	1acb      	subs	r3, r1, r3
 80054fe:	2164      	movs	r1, #100	; 0x64
 8005500:	fb01 f303 	mul.w	r3, r1, r3
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	f040 8435 	bne.w	8005d76 <Batt_Protection_when_discharge+0xc1e>
			  					BUZZ_Toggle;
 800550c:	2104      	movs	r1, #4
 800550e:	4857      	ldr	r0, [pc, #348]	; (800566c <Batt_Protection_when_discharge+0x514>)
 8005510:	f004 f84d 	bl	80095ae <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 8005514:	4b57      	ldr	r3, [pc, #348]	; (8005674 <Batt_Protection_when_discharge+0x51c>)
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_overcurrentdischarge==OFF)
 800551a:	f000 bc2c 	b.w	8005d76 <Batt_Protection_when_discharge+0xc1e>
			  			else if(T_I_Over_trip-T_I_Over_trip_cycle>1)
 800551e:	4b51      	ldr	r3, [pc, #324]	; (8005664 <Batt_Protection_when_discharge+0x50c>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b51      	ldr	r3, [pc, #324]	; (8005668 <Batt_Protection_when_discharge+0x510>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4619      	mov	r1, r3
 8005528:	4610      	mov	r0, r2
 800552a:	f7fb fb01 	bl	8000b30 <__aeabi_fsub>
 800552e:	4603      	mov	r3, r0
 8005530:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005534:	4618      	mov	r0, r3
 8005536:	f7fb fdc1 	bl	80010bc <__aeabi_fcmpgt>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <Batt_Protection_when_discharge+0x3ec>
			  		if(flag_trip_overcurrentdischarge==OFF)
 8005540:	f000 bc19 	b.w	8005d76 <Batt_Protection_when_discharge+0xc1e>
			  				HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 8005544:	2201      	movs	r2, #1
 8005546:	2104      	movs	r1, #4
 8005548:	4848      	ldr	r0, [pc, #288]	; (800566c <Batt_Protection_when_discharge+0x514>)
 800554a:	f004 f818 	bl	800957e <HAL_GPIO_WritePin>
			  		if(flag_trip_overcurrentdischarge==OFF)
 800554e:	f000 bc12 	b.w	8005d76 <Batt_Protection_when_discharge+0xc1e>
			  	  else if(((50-Suhu_T1<10)||(85-Suhu_T2<10)||(50-Suhu_T3<10)||(85-Suhu_T4<10)) && flag_trip_overtemperature==OFF)
 8005552:	4b4c      	ldr	r3, [pc, #304]	; (8005684 <Batt_Protection_when_discharge+0x52c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4619      	mov	r1, r3
 8005558:	484b      	ldr	r0, [pc, #300]	; (8005688 <Batt_Protection_when_discharge+0x530>)
 800555a:	f7fb fae9 	bl	8000b30 <__aeabi_fsub>
 800555e:	4603      	mov	r3, r0
 8005560:	4946      	ldr	r1, [pc, #280]	; (800567c <Batt_Protection_when_discharge+0x524>)
 8005562:	4618      	mov	r0, r3
 8005564:	f7fb fd8c 	bl	8001080 <__aeabi_fcmplt>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d12a      	bne.n	80055c4 <Batt_Protection_when_discharge+0x46c>
 800556e:	4b47      	ldr	r3, [pc, #284]	; (800568c <Batt_Protection_when_discharge+0x534>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4619      	mov	r1, r3
 8005574:	4846      	ldr	r0, [pc, #280]	; (8005690 <Batt_Protection_when_discharge+0x538>)
 8005576:	f7fb fadb 	bl	8000b30 <__aeabi_fsub>
 800557a:	4603      	mov	r3, r0
 800557c:	493f      	ldr	r1, [pc, #252]	; (800567c <Batt_Protection_when_discharge+0x524>)
 800557e:	4618      	mov	r0, r3
 8005580:	f7fb fd7e 	bl	8001080 <__aeabi_fcmplt>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d11c      	bne.n	80055c4 <Batt_Protection_when_discharge+0x46c>
 800558a:	4b42      	ldr	r3, [pc, #264]	; (8005694 <Batt_Protection_when_discharge+0x53c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4619      	mov	r1, r3
 8005590:	483d      	ldr	r0, [pc, #244]	; (8005688 <Batt_Protection_when_discharge+0x530>)
 8005592:	f7fb facd 	bl	8000b30 <__aeabi_fsub>
 8005596:	4603      	mov	r3, r0
 8005598:	4938      	ldr	r1, [pc, #224]	; (800567c <Batt_Protection_when_discharge+0x524>)
 800559a:	4618      	mov	r0, r3
 800559c:	f7fb fd70 	bl	8001080 <__aeabi_fcmplt>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10e      	bne.n	80055c4 <Batt_Protection_when_discharge+0x46c>
 80055a6:	4b3c      	ldr	r3, [pc, #240]	; (8005698 <Batt_Protection_when_discharge+0x540>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4619      	mov	r1, r3
 80055ac:	4838      	ldr	r0, [pc, #224]	; (8005690 <Batt_Protection_when_discharge+0x538>)
 80055ae:	f7fb fabf 	bl	8000b30 <__aeabi_fsub>
 80055b2:	4603      	mov	r3, r0
 80055b4:	4931      	ldr	r1, [pc, #196]	; (800567c <Batt_Protection_when_discharge+0x524>)
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fb fd62 	bl	8001080 <__aeabi_fcmplt>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 8111 	beq.w	80057e6 <Batt_Protection_when_discharge+0x68e>
 80055c4:	4b35      	ldr	r3, [pc, #212]	; (800569c <Batt_Protection_when_discharge+0x544>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f040 810c 	bne.w	80057e6 <Batt_Protection_when_discharge+0x68e>
			  		  fault_code=3;
 80055ce:	4b23      	ldr	r3, [pc, #140]	; (800565c <Batt_Protection_when_discharge+0x504>)
 80055d0:	2203      	movs	r2, #3
 80055d2:	701a      	strb	r2, [r3, #0]
			  		  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 80055d4:	4b32      	ldr	r3, [pc, #200]	; (80056a0 <Batt_Protection_when_discharge+0x548>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4928      	ldr	r1, [pc, #160]	; (800567c <Batt_Protection_when_discharge+0x524>)
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fb faa8 	bl	8000b30 <__aeabi_fsub>
 80055e0:	4603      	mov	r3, r0
 80055e2:	461a      	mov	r2, r3
 80055e4:	4b27      	ldr	r3, [pc, #156]	; (8005684 <Batt_Protection_when_discharge+0x52c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f7fb fd48 	bl	8001080 <__aeabi_fcmplt>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d058      	beq.n	80056a8 <Batt_Protection_when_discharge+0x550>
 80055f6:	4b2a      	ldr	r3, [pc, #168]	; (80056a0 <Batt_Protection_when_discharge+0x548>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	492a      	ldr	r1, [pc, #168]	; (80056a4 <Batt_Protection_when_discharge+0x54c>)
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fb fa97 	bl	8000b30 <__aeabi_fsub>
 8005602:	4603      	mov	r3, r0
 8005604:	461a      	mov	r2, r3
 8005606:	4b1f      	ldr	r3, [pc, #124]	; (8005684 <Batt_Protection_when_discharge+0x52c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f7fb fd4b 	bl	80010a8 <__aeabi_fcmpge>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d047      	beq.n	80056a8 <Batt_Protection_when_discharge+0x550>
			  			  if((test_tim2%1000)==0)
 8005618:	4b16      	ldr	r3, [pc, #88]	; (8005674 <Batt_Protection_when_discharge+0x51c>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4b16      	ldr	r3, [pc, #88]	; (8005678 <Batt_Protection_when_discharge+0x520>)
 800561e:	fb83 1302 	smull	r1, r3, r3, r2
 8005622:	1199      	asrs	r1, r3, #6
 8005624:	17d3      	asrs	r3, r2, #31
 8005626:	1acb      	subs	r3, r1, r3
 8005628:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	f040 80d6 	bne.w	80057e4 <Batt_Protection_when_discharge+0x68c>
			  				  BUZZ_Toggle;
 8005638:	2104      	movs	r1, #4
 800563a:	480c      	ldr	r0, [pc, #48]	; (800566c <Batt_Protection_when_discharge+0x514>)
 800563c:	f003 ffb7 	bl	80095ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005640:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <Batt_Protection_when_discharge+0x51c>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%1000)==0)
 8005646:	e0cd      	b.n	80057e4 <Batt_Protection_when_discharge+0x68c>
 8005648:	d2f1a9fc 	.word	0xd2f1a9fc
 800564c:	3f50624d 	.word	0x3f50624d
 8005650:	20001058 	.word	0x20001058
 8005654:	20000058 	.word	0x20000058
 8005658:	20001070 	.word	0x20001070
 800565c:	20001068 	.word	0x20001068
 8005660:	20000054 	.word	0x20000054
 8005664:	20001024 	.word	0x20001024
 8005668:	200010a4 	.word	0x200010a4
 800566c:	40011000 	.word	0x40011000
 8005670:	41700000 	.word	0x41700000
 8005674:	20000bdc 	.word	0x20000bdc
 8005678:	10624dd3 	.word	0x10624dd3
 800567c:	41200000 	.word	0x41200000
 8005680:	51eb851f 	.word	0x51eb851f
 8005684:	2000106c 	.word	0x2000106c
 8005688:	42480000 	.word	0x42480000
 800568c:	200014a8 	.word	0x200014a8
 8005690:	42aa0000 	.word	0x42aa0000
 8005694:	20001040 	.word	0x20001040
 8005698:	200010a0 	.word	0x200010a0
 800569c:	20001038 	.word	0x20001038
 80056a0:	20000060 	.word	0x20000060
 80056a4:	40a00000 	.word	0x40a00000
			  		  else if(Suhu_T1>Temp_Over_Set-5 && Suhu_T1<=Temp_Over_Set-2)
 80056a8:	4b90      	ldr	r3, [pc, #576]	; (80058ec <Batt_Protection_when_discharge+0x794>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4990      	ldr	r1, [pc, #576]	; (80058f0 <Batt_Protection_when_discharge+0x798>)
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fb fa3e 	bl	8000b30 <__aeabi_fsub>
 80056b4:	4603      	mov	r3, r0
 80056b6:	461a      	mov	r2, r3
 80056b8:	4b8e      	ldr	r3, [pc, #568]	; (80058f4 <Batt_Protection_when_discharge+0x79c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4619      	mov	r1, r3
 80056be:	4610      	mov	r0, r2
 80056c0:	f7fb fcde 	bl	8001080 <__aeabi_fcmplt>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d028      	beq.n	800571c <Batt_Protection_when_discharge+0x5c4>
 80056ca:	4b88      	ldr	r3, [pc, #544]	; (80058ec <Batt_Protection_when_discharge+0x794>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fb fa2c 	bl	8000b30 <__aeabi_fsub>
 80056d8:	4603      	mov	r3, r0
 80056da:	461a      	mov	r2, r3
 80056dc:	4b85      	ldr	r3, [pc, #532]	; (80058f4 <Batt_Protection_when_discharge+0x79c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4619      	mov	r1, r3
 80056e2:	4610      	mov	r0, r2
 80056e4:	f7fb fce0 	bl	80010a8 <__aeabi_fcmpge>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d016      	beq.n	800571c <Batt_Protection_when_discharge+0x5c4>
			  			  if((test_tim2%500)==0)
 80056ee:	4b82      	ldr	r3, [pc, #520]	; (80058f8 <Batt_Protection_when_discharge+0x7a0>)
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	4b82      	ldr	r3, [pc, #520]	; (80058fc <Batt_Protection_when_discharge+0x7a4>)
 80056f4:	fb83 1302 	smull	r1, r3, r3, r2
 80056f8:	1159      	asrs	r1, r3, #5
 80056fa:	17d3      	asrs	r3, r2, #31
 80056fc:	1acb      	subs	r3, r1, r3
 80056fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005702:	fb01 f303 	mul.w	r3, r1, r3
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d16b      	bne.n	80057e4 <Batt_Protection_when_discharge+0x68c>
			  				  BUZZ_Toggle;
 800570c:	2104      	movs	r1, #4
 800570e:	487c      	ldr	r0, [pc, #496]	; (8005900 <Batt_Protection_when_discharge+0x7a8>)
 8005710:	f003 ff4d 	bl	80095ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005714:	4b78      	ldr	r3, [pc, #480]	; (80058f8 <Batt_Protection_when_discharge+0x7a0>)
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 800571a:	e063      	b.n	80057e4 <Batt_Protection_when_discharge+0x68c>
			  		  else if(Suhu_T1>Temp_Over_Set-2 && Suhu_T1<=Temp_Over_Set)
 800571c:	4b73      	ldr	r3, [pc, #460]	; (80058ec <Batt_Protection_when_discharge+0x794>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005724:	4618      	mov	r0, r3
 8005726:	f7fb fa03 	bl	8000b30 <__aeabi_fsub>
 800572a:	4603      	mov	r3, r0
 800572c:	461a      	mov	r2, r3
 800572e:	4b71      	ldr	r3, [pc, #452]	; (80058f4 <Batt_Protection_when_discharge+0x79c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f7fb fca3 	bl	8001080 <__aeabi_fcmplt>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d021      	beq.n	8005784 <Batt_Protection_when_discharge+0x62c>
 8005740:	4b6c      	ldr	r3, [pc, #432]	; (80058f4 <Batt_Protection_when_discharge+0x79c>)
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	4b69      	ldr	r3, [pc, #420]	; (80058ec <Batt_Protection_when_discharge+0x794>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4619      	mov	r1, r3
 800574a:	4610      	mov	r0, r2
 800574c:	f7fb fca2 	bl	8001094 <__aeabi_fcmple>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d016      	beq.n	8005784 <Batt_Protection_when_discharge+0x62c>
			  			  if((test_tim2%500)==0)
 8005756:	4b68      	ldr	r3, [pc, #416]	; (80058f8 <Batt_Protection_when_discharge+0x7a0>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4b68      	ldr	r3, [pc, #416]	; (80058fc <Batt_Protection_when_discharge+0x7a4>)
 800575c:	fb83 1302 	smull	r1, r3, r3, r2
 8005760:	1159      	asrs	r1, r3, #5
 8005762:	17d3      	asrs	r3, r2, #31
 8005764:	1acb      	subs	r3, r1, r3
 8005766:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800576a:	fb01 f303 	mul.w	r3, r1, r3
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d137      	bne.n	80057e4 <Batt_Protection_when_discharge+0x68c>
			  				  BUZZ_Toggle;
 8005774:	2104      	movs	r1, #4
 8005776:	4862      	ldr	r0, [pc, #392]	; (8005900 <Batt_Protection_when_discharge+0x7a8>)
 8005778:	f003 ff19 	bl	80095ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 800577c:	4b5e      	ldr	r3, [pc, #376]	; (80058f8 <Batt_Protection_when_discharge+0x7a0>)
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005782:	e02f      	b.n	80057e4 <Batt_Protection_when_discharge+0x68c>
			  		  else if(Suhu_T1>50||Suhu_T2>85||Suhu_T3>50||Suhu_T4>85)
 8005784:	4b5b      	ldr	r3, [pc, #364]	; (80058f4 <Batt_Protection_when_discharge+0x79c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	495e      	ldr	r1, [pc, #376]	; (8005904 <Batt_Protection_when_discharge+0x7ac>)
 800578a:	4618      	mov	r0, r3
 800578c:	f7fb fc96 	bl	80010bc <__aeabi_fcmpgt>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11b      	bne.n	80057ce <Batt_Protection_when_discharge+0x676>
 8005796:	4b5c      	ldr	r3, [pc, #368]	; (8005908 <Batt_Protection_when_discharge+0x7b0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	495c      	ldr	r1, [pc, #368]	; (800590c <Batt_Protection_when_discharge+0x7b4>)
 800579c:	4618      	mov	r0, r3
 800579e:	f7fb fc8d 	bl	80010bc <__aeabi_fcmpgt>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d112      	bne.n	80057ce <Batt_Protection_when_discharge+0x676>
 80057a8:	4b59      	ldr	r3, [pc, #356]	; (8005910 <Batt_Protection_when_discharge+0x7b8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4955      	ldr	r1, [pc, #340]	; (8005904 <Batt_Protection_when_discharge+0x7ac>)
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fb fc84 	bl	80010bc <__aeabi_fcmpgt>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <Batt_Protection_when_discharge+0x676>
 80057ba:	4b56      	ldr	r3, [pc, #344]	; (8005914 <Batt_Protection_when_discharge+0x7bc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4953      	ldr	r1, [pc, #332]	; (800590c <Batt_Protection_when_discharge+0x7b4>)
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fb fc7b 	bl	80010bc <__aeabi_fcmpgt>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d100      	bne.n	80057ce <Batt_Protection_when_discharge+0x676>
			  		  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 80057cc:	e2d4      	b.n	8005d78 <Batt_Protection_when_discharge+0xc20>
			  			  Batt_Open_Mode();
 80057ce:	f7fb fdf1 	bl	80013b4 <Batt_Open_Mode>
			  			  flag_trip_overtemperature=ON;
 80057d2:	4b51      	ldr	r3, [pc, #324]	; (8005918 <Batt_Protection_when_discharge+0x7c0>)
 80057d4:	2201      	movs	r2, #1
 80057d6:	701a      	strb	r2, [r3, #0]
			  			  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80057d8:	2200      	movs	r2, #0
 80057da:	2104      	movs	r1, #4
 80057dc:	4848      	ldr	r0, [pc, #288]	; (8005900 <Batt_Protection_when_discharge+0x7a8>)
 80057de:	f003 fece 	bl	800957e <HAL_GPIO_WritePin>
			  		  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 80057e2:	e2c9      	b.n	8005d78 <Batt_Protection_when_discharge+0xc20>
 80057e4:	e2c8      	b.n	8005d78 <Batt_Protection_when_discharge+0xc20>
			  	  else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF)
 80057e6:	4b43      	ldr	r3, [pc, #268]	; (80058f4 <Batt_Protection_when_discharge+0x79c>)
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	4b4c      	ldr	r3, [pc, #304]	; (800591c <Batt_Protection_when_discharge+0x7c4>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4619      	mov	r1, r3
 80057f0:	4610      	mov	r0, r2
 80057f2:	f7fb f99d 	bl	8000b30 <__aeabi_fsub>
 80057f6:	4603      	mov	r3, r0
 80057f8:	4949      	ldr	r1, [pc, #292]	; (8005920 <Batt_Protection_when_discharge+0x7c8>)
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fb fc4a 	bl	8001094 <__aeabi_fcmple>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d130      	bne.n	8005868 <Batt_Protection_when_discharge+0x710>
 8005806:	4b40      	ldr	r3, [pc, #256]	; (8005908 <Batt_Protection_when_discharge+0x7b0>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	4b44      	ldr	r3, [pc, #272]	; (800591c <Batt_Protection_when_discharge+0x7c4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4619      	mov	r1, r3
 8005810:	4610      	mov	r0, r2
 8005812:	f7fb f98d 	bl	8000b30 <__aeabi_fsub>
 8005816:	4603      	mov	r3, r0
 8005818:	4941      	ldr	r1, [pc, #260]	; (8005920 <Batt_Protection_when_discharge+0x7c8>)
 800581a:	4618      	mov	r0, r3
 800581c:	f7fb fc3a 	bl	8001094 <__aeabi_fcmple>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d120      	bne.n	8005868 <Batt_Protection_when_discharge+0x710>
 8005826:	4b3a      	ldr	r3, [pc, #232]	; (8005910 <Batt_Protection_when_discharge+0x7b8>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	4b3c      	ldr	r3, [pc, #240]	; (800591c <Batt_Protection_when_discharge+0x7c4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4619      	mov	r1, r3
 8005830:	4610      	mov	r0, r2
 8005832:	f7fb f97d 	bl	8000b30 <__aeabi_fsub>
 8005836:	4603      	mov	r3, r0
 8005838:	4939      	ldr	r1, [pc, #228]	; (8005920 <Batt_Protection_when_discharge+0x7c8>)
 800583a:	4618      	mov	r0, r3
 800583c:	f7fb fc2a 	bl	8001094 <__aeabi_fcmple>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d110      	bne.n	8005868 <Batt_Protection_when_discharge+0x710>
 8005846:	4b33      	ldr	r3, [pc, #204]	; (8005914 <Batt_Protection_when_discharge+0x7bc>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b34      	ldr	r3, [pc, #208]	; (800591c <Batt_Protection_when_discharge+0x7c4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4619      	mov	r1, r3
 8005850:	4610      	mov	r0, r2
 8005852:	f7fb f96d 	bl	8000b30 <__aeabi_fsub>
 8005856:	4603      	mov	r3, r0
 8005858:	4931      	ldr	r1, [pc, #196]	; (8005920 <Batt_Protection_when_discharge+0x7c8>)
 800585a:	4618      	mov	r0, r3
 800585c:	f7fb fc1a 	bl	8001094 <__aeabi_fcmple>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 8109 	beq.w	8005a7a <Batt_Protection_when_discharge+0x922>
 8005868:	4b2e      	ldr	r3, [pc, #184]	; (8005924 <Batt_Protection_when_discharge+0x7cc>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f040 8104 	bne.w	8005a7a <Batt_Protection_when_discharge+0x922>
			  		  fault_code=4;
 8005872:	4b2d      	ldr	r3, [pc, #180]	; (8005928 <Batt_Protection_when_discharge+0x7d0>)
 8005874:	2204      	movs	r2, #4
 8005876:	701a      	strb	r2, [r3, #0]
			  		  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8005878:	4b28      	ldr	r3, [pc, #160]	; (800591c <Batt_Protection_when_discharge+0x7c4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4928      	ldr	r1, [pc, #160]	; (8005920 <Batt_Protection_when_discharge+0x7c8>)
 800587e:	4618      	mov	r0, r3
 8005880:	f7fb f958 	bl	8000b34 <__addsf3>
 8005884:	4603      	mov	r3, r0
 8005886:	461a      	mov	r2, r3
 8005888:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <Batt_Protection_when_discharge+0x79c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f7fb fc0a 	bl	80010a8 <__aeabi_fcmpge>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d048      	beq.n	800592c <Batt_Protection_when_discharge+0x7d4>
 800589a:	4b20      	ldr	r3, [pc, #128]	; (800591c <Batt_Protection_when_discharge+0x7c4>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4914      	ldr	r1, [pc, #80]	; (80058f0 <Batt_Protection_when_discharge+0x798>)
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fb f947 	bl	8000b34 <__addsf3>
 80058a6:	4603      	mov	r3, r0
 80058a8:	461a      	mov	r2, r3
 80058aa:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <Batt_Protection_when_discharge+0x79c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f7fb fbe5 	bl	8001080 <__aeabi_fcmplt>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d037      	beq.n	800592c <Batt_Protection_when_discharge+0x7d4>
			  			  if((test_tim2%1000)==0)
 80058bc:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <Batt_Protection_when_discharge+0x7a0>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	4b0e      	ldr	r3, [pc, #56]	; (80058fc <Batt_Protection_when_discharge+0x7a4>)
 80058c2:	fb83 1302 	smull	r1, r3, r3, r2
 80058c6:	1199      	asrs	r1, r3, #6
 80058c8:	17d3      	asrs	r3, r2, #31
 80058ca:	1acb      	subs	r3, r1, r3
 80058cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f040 80ce 	bne.w	8005a78 <Batt_Protection_when_discharge+0x920>
			  				  BUZZ_Toggle;
 80058dc:	2104      	movs	r1, #4
 80058de:	4808      	ldr	r0, [pc, #32]	; (8005900 <Batt_Protection_when_discharge+0x7a8>)
 80058e0:	f003 fe65 	bl	80095ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 80058e4:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <Batt_Protection_when_discharge+0x7a0>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%1000)==0)
 80058ea:	e0c5      	b.n	8005a78 <Batt_Protection_when_discharge+0x920>
 80058ec:	20000060 	.word	0x20000060
 80058f0:	40a00000 	.word	0x40a00000
 80058f4:	2000106c 	.word	0x2000106c
 80058f8:	20000bdc 	.word	0x20000bdc
 80058fc:	10624dd3 	.word	0x10624dd3
 8005900:	40011000 	.word	0x40011000
 8005904:	42480000 	.word	0x42480000
 8005908:	200014a8 	.word	0x200014a8
 800590c:	42aa0000 	.word	0x42aa0000
 8005910:	20001040 	.word	0x20001040
 8005914:	200010a0 	.word	0x200010a0
 8005918:	20001038 	.word	0x20001038
 800591c:	20000064 	.word	0x20000064
 8005920:	41200000 	.word	0x41200000
 8005924:	20001060 	.word	0x20001060
 8005928:	20001068 	.word	0x20001068
			  		  else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2)
 800592c:	4b9c      	ldr	r3, [pc, #624]	; (8005ba0 <Batt_Protection_when_discharge+0xa48>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	499c      	ldr	r1, [pc, #624]	; (8005ba4 <Batt_Protection_when_discharge+0xa4c>)
 8005932:	4618      	mov	r0, r3
 8005934:	f7fb f8fe 	bl	8000b34 <__addsf3>
 8005938:	4603      	mov	r3, r0
 800593a:	461a      	mov	r2, r3
 800593c:	4b9a      	ldr	r3, [pc, #616]	; (8005ba8 <Batt_Protection_when_discharge+0xa50>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4619      	mov	r1, r3
 8005942:	4610      	mov	r0, r2
 8005944:	f7fb fbb0 	bl	80010a8 <__aeabi_fcmpge>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d028      	beq.n	80059a0 <Batt_Protection_when_discharge+0x848>
 800594e:	4b94      	ldr	r3, [pc, #592]	; (8005ba0 <Batt_Protection_when_discharge+0xa48>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005956:	4618      	mov	r0, r3
 8005958:	f7fb f8ec 	bl	8000b34 <__addsf3>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	4b91      	ldr	r3, [pc, #580]	; (8005ba8 <Batt_Protection_when_discharge+0xa50>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f7fb fb8a 	bl	8001080 <__aeabi_fcmplt>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d016      	beq.n	80059a0 <Batt_Protection_when_discharge+0x848>
			  			  if((test_tim2%500)==0)
 8005972:	4b8e      	ldr	r3, [pc, #568]	; (8005bac <Batt_Protection_when_discharge+0xa54>)
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	4b8e      	ldr	r3, [pc, #568]	; (8005bb0 <Batt_Protection_when_discharge+0xa58>)
 8005978:	fb83 1302 	smull	r1, r3, r3, r2
 800597c:	1159      	asrs	r1, r3, #5
 800597e:	17d3      	asrs	r3, r2, #31
 8005980:	1acb      	subs	r3, r1, r3
 8005982:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005986:	fb01 f303 	mul.w	r3, r1, r3
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d173      	bne.n	8005a78 <Batt_Protection_when_discharge+0x920>
			  				  BUZZ_Toggle;
 8005990:	2104      	movs	r1, #4
 8005992:	4888      	ldr	r0, [pc, #544]	; (8005bb4 <Batt_Protection_when_discharge+0xa5c>)
 8005994:	f003 fe0b 	bl	80095ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005998:	4b84      	ldr	r3, [pc, #528]	; (8005bac <Batt_Protection_when_discharge+0xa54>)
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 800599e:	e06b      	b.n	8005a78 <Batt_Protection_when_discharge+0x920>
			  		  else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set)
 80059a0:	4b7f      	ldr	r3, [pc, #508]	; (8005ba0 <Batt_Protection_when_discharge+0xa48>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fb f8c3 	bl	8000b34 <__addsf3>
 80059ae:	4603      	mov	r3, r0
 80059b0:	461a      	mov	r2, r3
 80059b2:	4b7d      	ldr	r3, [pc, #500]	; (8005ba8 <Batt_Protection_when_discharge+0xa50>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4619      	mov	r1, r3
 80059b8:	4610      	mov	r0, r2
 80059ba:	f7fb fb7f 	bl	80010bc <__aeabi_fcmpgt>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d021      	beq.n	8005a08 <Batt_Protection_when_discharge+0x8b0>
 80059c4:	4b78      	ldr	r3, [pc, #480]	; (8005ba8 <Batt_Protection_when_discharge+0xa50>)
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	4b75      	ldr	r3, [pc, #468]	; (8005ba0 <Batt_Protection_when_discharge+0xa48>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4619      	mov	r1, r3
 80059ce:	4610      	mov	r0, r2
 80059d0:	f7fb fb6a 	bl	80010a8 <__aeabi_fcmpge>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d016      	beq.n	8005a08 <Batt_Protection_when_discharge+0x8b0>
			  			  if((test_tim2%500)==0)
 80059da:	4b74      	ldr	r3, [pc, #464]	; (8005bac <Batt_Protection_when_discharge+0xa54>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4b74      	ldr	r3, [pc, #464]	; (8005bb0 <Batt_Protection_when_discharge+0xa58>)
 80059e0:	fb83 1302 	smull	r1, r3, r3, r2
 80059e4:	1159      	asrs	r1, r3, #5
 80059e6:	17d3      	asrs	r3, r2, #31
 80059e8:	1acb      	subs	r3, r1, r3
 80059ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80059ee:	fb01 f303 	mul.w	r3, r1, r3
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d13f      	bne.n	8005a78 <Batt_Protection_when_discharge+0x920>
			  				  BUZZ_Toggle;
 80059f8:	2104      	movs	r1, #4
 80059fa:	486e      	ldr	r0, [pc, #440]	; (8005bb4 <Batt_Protection_when_discharge+0xa5c>)
 80059fc:	f003 fdd7 	bl	80095ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005a00:	4b6a      	ldr	r3, [pc, #424]	; (8005bac <Batt_Protection_when_discharge+0xa54>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005a06:	e037      	b.n	8005a78 <Batt_Protection_when_discharge+0x920>
			  		  else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set)
 8005a08:	4b67      	ldr	r3, [pc, #412]	; (8005ba8 <Batt_Protection_when_discharge+0xa50>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	4b64      	ldr	r3, [pc, #400]	; (8005ba0 <Batt_Protection_when_discharge+0xa48>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f7fb fb34 	bl	8001080 <__aeabi_fcmplt>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d121      	bne.n	8005a62 <Batt_Protection_when_discharge+0x90a>
 8005a1e:	4b66      	ldr	r3, [pc, #408]	; (8005bb8 <Batt_Protection_when_discharge+0xa60>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4b5f      	ldr	r3, [pc, #380]	; (8005ba0 <Batt_Protection_when_discharge+0xa48>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4619      	mov	r1, r3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	f7fb fb29 	bl	8001080 <__aeabi_fcmplt>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d116      	bne.n	8005a62 <Batt_Protection_when_discharge+0x90a>
 8005a34:	4b61      	ldr	r3, [pc, #388]	; (8005bbc <Batt_Protection_when_discharge+0xa64>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	4b59      	ldr	r3, [pc, #356]	; (8005ba0 <Batt_Protection_when_discharge+0xa48>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f7fb fb1e 	bl	8001080 <__aeabi_fcmplt>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10b      	bne.n	8005a62 <Batt_Protection_when_discharge+0x90a>
 8005a4a:	4b5d      	ldr	r3, [pc, #372]	; (8005bc0 <Batt_Protection_when_discharge+0xa68>)
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	4b54      	ldr	r3, [pc, #336]	; (8005ba0 <Batt_Protection_when_discharge+0xa48>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f7fb fb13 	bl	8001080 <__aeabi_fcmplt>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d100      	bne.n	8005a62 <Batt_Protection_when_discharge+0x90a>
			  		  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8005a60:	e18a      	b.n	8005d78 <Batt_Protection_when_discharge+0xc20>
			  			  Batt_Open_Mode();
 8005a62:	f7fb fca7 	bl	80013b4 <Batt_Open_Mode>
			  			  flag_trip_undertemperature=ON;
 8005a66:	4b57      	ldr	r3, [pc, #348]	; (8005bc4 <Batt_Protection_when_discharge+0xa6c>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	701a      	strb	r2, [r3, #0]
			  			  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2104      	movs	r1, #4
 8005a70:	4850      	ldr	r0, [pc, #320]	; (8005bb4 <Batt_Protection_when_discharge+0xa5c>)
 8005a72:	f003 fd84 	bl	800957e <HAL_GPIO_WritePin>
			  		  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8005a76:	e17f      	b.n	8005d78 <Batt_Protection_when_discharge+0xc20>
 8005a78:	e17e      	b.n	8005d78 <Batt_Protection_when_discharge+0xc20>
			  	  else if(Pack_SOC-SOC_Under_Set<=10 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE)
 8005a7a:	4b53      	ldr	r3, [pc, #332]	; (8005bc8 <Batt_Protection_when_discharge+0xa70>)
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4b53      	ldr	r3, [pc, #332]	; (8005bcc <Batt_Protection_when_discharge+0xa74>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f7fb f853 	bl	8000b30 <__aeabi_fsub>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	4950      	ldr	r1, [pc, #320]	; (8005bd0 <Batt_Protection_when_discharge+0xa78>)
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fb fb00 	bl	8001094 <__aeabi_fcmple>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80ee 	beq.w	8005c78 <Batt_Protection_when_discharge+0xb20>
 8005a9c:	4b4d      	ldr	r3, [pc, #308]	; (8005bd4 <Batt_Protection_when_discharge+0xa7c>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f040 80e9 	bne.w	8005c78 <Batt_Protection_when_discharge+0xb20>
 8005aa6:	4b4c      	ldr	r3, [pc, #304]	; (8005bd8 <Batt_Protection_when_discharge+0xa80>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	f040 80e4 	bne.w	8005c78 <Batt_Protection_when_discharge+0xb20>
			  		  fault_code=5;
 8005ab0:	4b4a      	ldr	r3, [pc, #296]	; (8005bdc <Batt_Protection_when_discharge+0xa84>)
 8005ab2:	2205      	movs	r2, #5
 8005ab4:	701a      	strb	r2, [r3, #0]
			  		  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 8005ab6:	4b45      	ldr	r3, [pc, #276]	; (8005bcc <Batt_Protection_when_discharge+0xa74>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4945      	ldr	r1, [pc, #276]	; (8005bd0 <Batt_Protection_when_discharge+0xa78>)
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fb f839 	bl	8000b34 <__addsf3>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4b40      	ldr	r3, [pc, #256]	; (8005bc8 <Batt_Protection_when_discharge+0xa70>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f7fb faeb 	bl	80010a8 <__aeabi_fcmpge>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d028      	beq.n	8005b2a <Batt_Protection_when_discharge+0x9d2>
 8005ad8:	4b3c      	ldr	r3, [pc, #240]	; (8005bcc <Batt_Protection_when_discharge+0xa74>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4931      	ldr	r1, [pc, #196]	; (8005ba4 <Batt_Protection_when_discharge+0xa4c>)
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fb f828 	bl	8000b34 <__addsf3>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	4b37      	ldr	r3, [pc, #220]	; (8005bc8 <Batt_Protection_when_discharge+0xa70>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f7fb fac6 	bl	8001080 <__aeabi_fcmplt>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d017      	beq.n	8005b2a <Batt_Protection_when_discharge+0x9d2>
			  			  if((test_tim2%1000)==0)
 8005afa:	4b2c      	ldr	r3, [pc, #176]	; (8005bac <Batt_Protection_when_discharge+0xa54>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	4b2c      	ldr	r3, [pc, #176]	; (8005bb0 <Batt_Protection_when_discharge+0xa58>)
 8005b00:	fb83 1302 	smull	r1, r3, r3, r2
 8005b04:	1199      	asrs	r1, r3, #6
 8005b06:	17d3      	asrs	r3, r2, #31
 8005b08:	1acb      	subs	r3, r1, r3
 8005b0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005b0e:	fb01 f303 	mul.w	r3, r1, r3
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f040 80ae 	bne.w	8005c76 <Batt_Protection_when_discharge+0xb1e>
			  				  BUZZ_Toggle;
 8005b1a:	2104      	movs	r1, #4
 8005b1c:	4825      	ldr	r0, [pc, #148]	; (8005bb4 <Batt_Protection_when_discharge+0xa5c>)
 8005b1e:	f003 fd46 	bl	80095ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005b22:	4b22      	ldr	r3, [pc, #136]	; (8005bac <Batt_Protection_when_discharge+0xa54>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%1000)==0)
 8005b28:	e0a5      	b.n	8005c76 <Batt_Protection_when_discharge+0xb1e>
			  		  else if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+2)
 8005b2a:	4b28      	ldr	r3, [pc, #160]	; (8005bcc <Batt_Protection_when_discharge+0xa74>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	491d      	ldr	r1, [pc, #116]	; (8005ba4 <Batt_Protection_when_discharge+0xa4c>)
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fa ffff 	bl	8000b34 <__addsf3>
 8005b36:	4603      	mov	r3, r0
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4b23      	ldr	r3, [pc, #140]	; (8005bc8 <Batt_Protection_when_discharge+0xa70>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f7fb fab1 	bl	80010a8 <__aeabi_fcmpge>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d049      	beq.n	8005be0 <Batt_Protection_when_discharge+0xa88>
 8005b4c:	4b1f      	ldr	r3, [pc, #124]	; (8005bcc <Batt_Protection_when_discharge+0xa74>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fa ffed 	bl	8000b34 <__addsf3>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <Batt_Protection_when_discharge+0xa70>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4619      	mov	r1, r3
 8005b64:	4610      	mov	r0, r2
 8005b66:	f7fb fa8b 	bl	8001080 <__aeabi_fcmplt>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d037      	beq.n	8005be0 <Batt_Protection_when_discharge+0xa88>
			  			  if((test_tim2%500)==0)
 8005b70:	4b0e      	ldr	r3, [pc, #56]	; (8005bac <Batt_Protection_when_discharge+0xa54>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <Batt_Protection_when_discharge+0xa58>)
 8005b76:	fb83 1302 	smull	r1, r3, r3, r2
 8005b7a:	1159      	asrs	r1, r3, #5
 8005b7c:	17d3      	asrs	r3, r2, #31
 8005b7e:	1acb      	subs	r3, r1, r3
 8005b80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005b84:	fb01 f303 	mul.w	r3, r1, r3
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d173      	bne.n	8005c76 <Batt_Protection_when_discharge+0xb1e>
			  				  BUZZ_Toggle;
 8005b8e:	2104      	movs	r1, #4
 8005b90:	4808      	ldr	r0, [pc, #32]	; (8005bb4 <Batt_Protection_when_discharge+0xa5c>)
 8005b92:	f003 fd0c 	bl	80095ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005b96:	4b05      	ldr	r3, [pc, #20]	; (8005bac <Batt_Protection_when_discharge+0xa54>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005b9c:	e06b      	b.n	8005c76 <Batt_Protection_when_discharge+0xb1e>
 8005b9e:	bf00      	nop
 8005ba0:	20000064 	.word	0x20000064
 8005ba4:	40a00000 	.word	0x40a00000
 8005ba8:	2000106c 	.word	0x2000106c
 8005bac:	20000bdc 	.word	0x20000bdc
 8005bb0:	10624dd3 	.word	0x10624dd3
 8005bb4:	40011000 	.word	0x40011000
 8005bb8:	200014a8 	.word	0x200014a8
 8005bbc:	20001040 	.word	0x20001040
 8005bc0:	200010a0 	.word	0x200010a0
 8005bc4:	20001060 	.word	0x20001060
 8005bc8:	20000be4 	.word	0x20000be4
 8005bcc:	20000068 	.word	0x20000068
 8005bd0:	41200000 	.word	0x41200000
 8005bd4:	20001094 	.word	0x20001094
 8005bd8:	200009b0 	.word	0x200009b0
 8005bdc:	20001068 	.word	0x20001068
			  		  else if(Pack_SOC<SOC_Under_Set+2 && Pack_SOC>=SOC_Under_Set)
 8005be0:	4b69      	ldr	r3, [pc, #420]	; (8005d88 <Batt_Protection_when_discharge+0xc30>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fa ffa3 	bl	8000b34 <__addsf3>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4b66      	ldr	r3, [pc, #408]	; (8005d8c <Batt_Protection_when_discharge+0xc34>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	f7fb fa5f 	bl	80010bc <__aeabi_fcmpgt>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d021      	beq.n	8005c48 <Batt_Protection_when_discharge+0xaf0>
 8005c04:	4b61      	ldr	r3, [pc, #388]	; (8005d8c <Batt_Protection_when_discharge+0xc34>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	4b5f      	ldr	r3, [pc, #380]	; (8005d88 <Batt_Protection_when_discharge+0xc30>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4610      	mov	r0, r2
 8005c10:	f7fb fa4a 	bl	80010a8 <__aeabi_fcmpge>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d016      	beq.n	8005c48 <Batt_Protection_when_discharge+0xaf0>
			  			  if((test_tim2%500)==0)
 8005c1a:	4b5d      	ldr	r3, [pc, #372]	; (8005d90 <Batt_Protection_when_discharge+0xc38>)
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	4b5d      	ldr	r3, [pc, #372]	; (8005d94 <Batt_Protection_when_discharge+0xc3c>)
 8005c20:	fb83 1302 	smull	r1, r3, r3, r2
 8005c24:	1159      	asrs	r1, r3, #5
 8005c26:	17d3      	asrs	r3, r2, #31
 8005c28:	1acb      	subs	r3, r1, r3
 8005c2a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005c2e:	fb01 f303 	mul.w	r3, r1, r3
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d11e      	bne.n	8005c76 <Batt_Protection_when_discharge+0xb1e>
			  				  BUZZ_Toggle;
 8005c38:	2104      	movs	r1, #4
 8005c3a:	4857      	ldr	r0, [pc, #348]	; (8005d98 <Batt_Protection_when_discharge+0xc40>)
 8005c3c:	f003 fcb7 	bl	80095ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005c40:	4b53      	ldr	r3, [pc, #332]	; (8005d90 <Batt_Protection_when_discharge+0xc38>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005c46:	e016      	b.n	8005c76 <Batt_Protection_when_discharge+0xb1e>
			  		  else if(Pack_SOC<SOC_Under_Set)
 8005c48:	4b50      	ldr	r3, [pc, #320]	; (8005d8c <Batt_Protection_when_discharge+0xc34>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	4b4e      	ldr	r3, [pc, #312]	; (8005d88 <Batt_Protection_when_discharge+0xc30>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4619      	mov	r1, r3
 8005c52:	4610      	mov	r0, r2
 8005c54:	f7fb fa14 	bl	8001080 <__aeabi_fcmplt>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d100      	bne.n	8005c60 <Batt_Protection_when_discharge+0xb08>
			  		  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 8005c5e:	e08b      	b.n	8005d78 <Batt_Protection_when_discharge+0xc20>
			  			  Batt_Open_Mode();
 8005c60:	f7fb fba8 	bl	80013b4 <Batt_Open_Mode>
			  			  flag_trip_SOCOverDischarge=ON;
 8005c64:	4b4d      	ldr	r3, [pc, #308]	; (8005d9c <Batt_Protection_when_discharge+0xc44>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	701a      	strb	r2, [r3, #0]
			  			  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2104      	movs	r1, #4
 8005c6e:	484a      	ldr	r0, [pc, #296]	; (8005d98 <Batt_Protection_when_discharge+0xc40>)
 8005c70:	f003 fc85 	bl	800957e <HAL_GPIO_WritePin>
			  		  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 8005c74:	e080      	b.n	8005d78 <Batt_Protection_when_discharge+0xc20>
 8005c76:	e07f      	b.n	8005d78 <Batt_Protection_when_discharge+0xc20>
			  	  else if(Persen_Imbalance_Set-persen_imbalance<10)
 8005c78:	4b49      	ldr	r3, [pc, #292]	; (8005da0 <Batt_Protection_when_discharge+0xc48>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	4b49      	ldr	r3, [pc, #292]	; (8005da4 <Batt_Protection_when_discharge+0xc4c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4619      	mov	r1, r3
 8005c82:	4610      	mov	r0, r2
 8005c84:	f7fa ff54 	bl	8000b30 <__aeabi_fsub>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	4947      	ldr	r1, [pc, #284]	; (8005da8 <Batt_Protection_when_discharge+0xc50>)
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fb f9f7 	bl	8001080 <__aeabi_fcmplt>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d014      	beq.n	8005cc2 <Batt_Protection_when_discharge+0xb6a>
			  		  fault_code=6;
 8005c98:	4b44      	ldr	r3, [pc, #272]	; (8005dac <Batt_Protection_when_discharge+0xc54>)
 8005c9a:	2206      	movs	r2, #6
 8005c9c:	701a      	strb	r2, [r3, #0]
			  		  if(persen_imbalance>Persen_Imbalance_Set)
 8005c9e:	4b41      	ldr	r3, [pc, #260]	; (8005da4 <Batt_Protection_when_discharge+0xc4c>)
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	4b3f      	ldr	r3, [pc, #252]	; (8005da0 <Batt_Protection_when_discharge+0xc48>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4610      	mov	r0, r2
 8005caa:	f7fb fa07 	bl	80010bc <__aeabi_fcmpgt>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d100      	bne.n	8005cb6 <Batt_Protection_when_discharge+0xb5e>
}
 8005cb4:	e060      	b.n	8005d78 <Batt_Protection_when_discharge+0xc20>
			  			flag_trip_unbalance=ON;
 8005cb6:	4b3e      	ldr	r3, [pc, #248]	; (8005db0 <Batt_Protection_when_discharge+0xc58>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	701a      	strb	r2, [r3, #0]
			  			Batt_Open_Mode();
 8005cbc:	f7fb fb7a 	bl	80013b4 <Batt_Open_Mode>
}
 8005cc0:	e05a      	b.n	8005d78 <Batt_Protection_when_discharge+0xc20>
			  		  if(fault_code!=0) last_fault_code=fault_code;
 8005cc2:	4b3a      	ldr	r3, [pc, #232]	; (8005dac <Batt_Protection_when_discharge+0xc54>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <Batt_Protection_when_discharge+0xb7a>
 8005cca:	4b38      	ldr	r3, [pc, #224]	; (8005dac <Batt_Protection_when_discharge+0xc54>)
 8005ccc:	781a      	ldrb	r2, [r3, #0]
 8005cce:	4b39      	ldr	r3, [pc, #228]	; (8005db4 <Batt_Protection_when_discharge+0xc5c>)
 8005cd0:	701a      	strb	r2, [r3, #0]
			  		  fault_code=0;
 8005cd2:	4b36      	ldr	r3, [pc, #216]	; (8005dac <Batt_Protection_when_discharge+0xc54>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	701a      	strb	r2, [r3, #0]
			  		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2104      	movs	r1, #4
 8005cdc:	482e      	ldr	r0, [pc, #184]	; (8005d98 <Batt_Protection_when_discharge+0xc40>)
 8005cde:	f003 fc4e 	bl	800957e <HAL_GPIO_WritePin>
			  		  T_Under_trip=0;
 8005ce2:	4b35      	ldr	r3, [pc, #212]	; (8005db8 <Batt_Protection_when_discharge+0xc60>)
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]
			  		  T_trip_cycle=T_trip_cycle-0.001;
 8005cea:	4b34      	ldr	r3, [pc, #208]	; (8005dbc <Batt_Protection_when_discharge+0xc64>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fa fb9a 	bl	8000428 <__aeabi_f2d>
 8005cf4:	a322      	add	r3, pc, #136	; (adr r3, 8005d80 <Batt_Protection_when_discharge+0xc28>)
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	f7fa fa35 	bl	8000168 <__aeabi_dsub>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	460c      	mov	r4, r1
 8005d02:	4618      	mov	r0, r3
 8005d04:	4621      	mov	r1, r4
 8005d06:	f7fa febf 	bl	8000a88 <__aeabi_d2f>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	4b2b      	ldr	r3, [pc, #172]	; (8005dbc <Batt_Protection_when_discharge+0xc64>)
 8005d0e:	601a      	str	r2, [r3, #0]
			  		  T_I_Over_trip_cycle-=0.001;
 8005d10:	4b2b      	ldr	r3, [pc, #172]	; (8005dc0 <Batt_Protection_when_discharge+0xc68>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fa fb87 	bl	8000428 <__aeabi_f2d>
 8005d1a:	a319      	add	r3, pc, #100	; (adr r3, 8005d80 <Batt_Protection_when_discharge+0xc28>)
 8005d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d20:	f7fa fa22 	bl	8000168 <__aeabi_dsub>
 8005d24:	4603      	mov	r3, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	4618      	mov	r0, r3
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	f7fa feac 	bl	8000a88 <__aeabi_d2f>
 8005d30:	4602      	mov	r2, r0
 8005d32:	4b23      	ldr	r3, [pc, #140]	; (8005dc0 <Batt_Protection_when_discharge+0xc68>)
 8005d34:	601a      	str	r2, [r3, #0]
			  		  if(T_trip_cycle<0) T_trip_cycle=0;
 8005d36:	4b21      	ldr	r3, [pc, #132]	; (8005dbc <Batt_Protection_when_discharge+0xc64>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f04f 0100 	mov.w	r1, #0
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fb f99e 	bl	8001080 <__aeabi_fcmplt>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <Batt_Protection_when_discharge+0xbfa>
 8005d4a:	4b1c      	ldr	r3, [pc, #112]	; (8005dbc <Batt_Protection_when_discharge+0xc64>)
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
			  		if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 8005d52:	4b1b      	ldr	r3, [pc, #108]	; (8005dc0 <Batt_Protection_when_discharge+0xc68>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f04f 0100 	mov.w	r1, #0
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fb f990 	bl	8001080 <__aeabi_fcmplt>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d100      	bne.n	8005d68 <Batt_Protection_when_discharge+0xc10>
}
 8005d66:	e007      	b.n	8005d78 <Batt_Protection_when_discharge+0xc20>
			  		if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 8005d68:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <Batt_Protection_when_discharge+0xc68>)
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]
}
 8005d70:	e002      	b.n	8005d78 <Batt_Protection_when_discharge+0xc20>
			  		if(flag_trip_undervoltage==OFF)
 8005d72:	bf00      	nop
 8005d74:	e000      	b.n	8005d78 <Batt_Protection_when_discharge+0xc20>
			  		if(flag_trip_overcurrentdischarge==OFF)
 8005d76:	bf00      	nop
}
 8005d78:	bf00      	nop
 8005d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8005d7c:	f3af 8000 	nop.w
 8005d80:	d2f1a9fc 	.word	0xd2f1a9fc
 8005d84:	3f50624d 	.word	0x3f50624d
 8005d88:	20000068 	.word	0x20000068
 8005d8c:	20000be4 	.word	0x20000be4
 8005d90:	20000bdc 	.word	0x20000bdc
 8005d94:	10624dd3 	.word	0x10624dd3
 8005d98:	40011000 	.word	0x40011000
 8005d9c:	20001094 	.word	0x20001094
 8005da0:	20000078 	.word	0x20000078
 8005da4:	20000bb8 	.word	0x20000bb8
 8005da8:	41200000 	.word	0x41200000
 8005dac:	20001068 	.word	0x20001068
 8005db0:	20000c30 	.word	0x20000c30
 8005db4:	200014a4 	.word	0x200014a4
 8005db8:	20001028 	.word	0x20001028
 8005dbc:	20001074 	.word	0x20001074
 8005dc0:	200010a4 	.word	0x200010a4
 8005dc4:	00000000 	.word	0x00000000

08005dc8 <Batt_Protection_when_charge>:



void Batt_Protection_when_charge(void)
{
 8005dc8:	b5b0      	push	{r4, r5, r7, lr}
 8005dca:	af00      	add	r7, sp, #0
					///////////////////// Short Circuit //////////////////////////////////////
					if(fabs(IBATT)>VBATT)
 8005dcc:	4ba1      	ldr	r3, [pc, #644]	; (8006054 <Batt_Protection_when_charge+0x28c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005dd4:	4ba0      	ldr	r3, [pc, #640]	; (8006058 <Batt_Protection_when_charge+0x290>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	f7fb f96e 	bl	80010bc <__aeabi_fcmpgt>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d015      	beq.n	8005e12 <Batt_Protection_when_charge+0x4a>
				  	{
						Isc=IBATT;
 8005de6:	4b9b      	ldr	r3, [pc, #620]	; (8006054 <Batt_Protection_when_charge+0x28c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a9c      	ldr	r2, [pc, #624]	; (800605c <Batt_Protection_when_charge+0x294>)
 8005dec:	6013      	str	r3, [r2, #0]
			  		  	Vsc=VBATT;
 8005dee:	4b9a      	ldr	r3, [pc, #616]	; (8006058 <Batt_Protection_when_charge+0x290>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a9b      	ldr	r2, [pc, #620]	; (8006060 <Batt_Protection_when_charge+0x298>)
 8005df4:	6013      	str	r3, [r2, #0]
				  		fault_code=12;
 8005df6:	4b9b      	ldr	r3, [pc, #620]	; (8006064 <Batt_Protection_when_charge+0x29c>)
 8005df8:	220c      	movs	r2, #12
 8005dfa:	701a      	strb	r2, [r3, #0]
				  		Batt_Open_Mode();
 8005dfc:	f7fb fada 	bl	80013b4 <Batt_Open_Mode>
				  		flag_trip_shortcircuit=ON;
 8005e00:	4b99      	ldr	r3, [pc, #612]	; (8006068 <Batt_Protection_when_charge+0x2a0>)
 8005e02:	2201      	movs	r2, #1
 8005e04:	701a      	strb	r2, [r3, #0]
				  		HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005e06:	2200      	movs	r2, #0
 8005e08:	2104      	movs	r1, #4
 8005e0a:	4898      	ldr	r0, [pc, #608]	; (800606c <Batt_Protection_when_charge+0x2a4>)
 8005e0c:	f003 fbb7 	bl	800957e <HAL_GPIO_WritePin>
				    	  T_trip_cycle=T_trip_cycle-0.001;
				    	  T_I_Over_trip_cycle-=0.001;
				    	  if(T_trip_cycle<0) T_trip_cycle=0;
				    	  if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
				     }
}
 8005e10:	e3a8      	b.n	8006564 <Batt_Protection_when_charge+0x79c>
					else if(SOC_Over_Set-Pack_SOC<=10 && flag_trip_SOCOverCharge==OFF)
 8005e12:	4b97      	ldr	r3, [pc, #604]	; (8006070 <Batt_Protection_when_charge+0x2a8>)
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b97      	ldr	r3, [pc, #604]	; (8006074 <Batt_Protection_when_charge+0x2ac>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	f7fa fe87 	bl	8000b30 <__aeabi_fsub>
 8005e22:	4603      	mov	r3, r0
 8005e24:	4994      	ldr	r1, [pc, #592]	; (8006078 <Batt_Protection_when_charge+0x2b0>)
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fb f934 	bl	8001094 <__aeabi_fcmple>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d01d      	beq.n	8005e6e <Batt_Protection_when_charge+0xa6>
 8005e32:	4b92      	ldr	r3, [pc, #584]	; (800607c <Batt_Protection_when_charge+0x2b4>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d119      	bne.n	8005e6e <Batt_Protection_when_charge+0xa6>
			  		  fault_code=7;
 8005e3a:	4b8a      	ldr	r3, [pc, #552]	; (8006064 <Batt_Protection_when_charge+0x29c>)
 8005e3c:	2207      	movs	r2, #7
 8005e3e:	701a      	strb	r2, [r3, #0]
			  		  if(Pack_SOC>SOC_Over_Set)
 8005e40:	4b8c      	ldr	r3, [pc, #560]	; (8006074 <Batt_Protection_when_charge+0x2ac>)
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	4b8a      	ldr	r3, [pc, #552]	; (8006070 <Batt_Protection_when_charge+0x2a8>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f7fb f936 	bl	80010bc <__aeabi_fcmpgt>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 8386 	beq.w	8006564 <Batt_Protection_when_charge+0x79c>
			  				  Batt_Open_Mode();
 8005e58:	f7fb faac 	bl	80013b4 <Batt_Open_Mode>
			  				  flag_trip_SOCOverCharge=ON;
 8005e5c:	4b87      	ldr	r3, [pc, #540]	; (800607c <Batt_Protection_when_charge+0x2b4>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	701a      	strb	r2, [r3, #0]
			  				  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005e62:	2200      	movs	r2, #0
 8005e64:	2104      	movs	r1, #4
 8005e66:	4881      	ldr	r0, [pc, #516]	; (800606c <Batt_Protection_when_charge+0x2a4>)
 8005e68:	f003 fb89 	bl	800957e <HAL_GPIO_WritePin>
			  		  if(Pack_SOC>SOC_Over_Set)
 8005e6c:	e37a      	b.n	8006564 <Batt_Protection_when_charge+0x79c>
			  		else if(((45-Suhu_T1<5)||(80-Suhu_T2<10)||(45-Suhu_T3<5)||(80-Suhu_T4<10)) && (flag_trip_overtemperature==OFF)) // Warning Over Temperature Charge 40 65 40 65
 8005e6e:	4b84      	ldr	r3, [pc, #528]	; (8006080 <Batt_Protection_when_charge+0x2b8>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4619      	mov	r1, r3
 8005e74:	4883      	ldr	r0, [pc, #524]	; (8006084 <Batt_Protection_when_charge+0x2bc>)
 8005e76:	f7fa fe5b 	bl	8000b30 <__aeabi_fsub>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4982      	ldr	r1, [pc, #520]	; (8006088 <Batt_Protection_when_charge+0x2c0>)
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fb f8fe 	bl	8001080 <__aeabi_fcmplt>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d129      	bne.n	8005ede <Batt_Protection_when_charge+0x116>
 8005e8a:	4b80      	ldr	r3, [pc, #512]	; (800608c <Batt_Protection_when_charge+0x2c4>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4619      	mov	r1, r3
 8005e90:	487f      	ldr	r0, [pc, #508]	; (8006090 <Batt_Protection_when_charge+0x2c8>)
 8005e92:	f7fa fe4d 	bl	8000b30 <__aeabi_fsub>
 8005e96:	4603      	mov	r3, r0
 8005e98:	4977      	ldr	r1, [pc, #476]	; (8006078 <Batt_Protection_when_charge+0x2b0>)
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fb f8f0 	bl	8001080 <__aeabi_fcmplt>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d11b      	bne.n	8005ede <Batt_Protection_when_charge+0x116>
 8005ea6:	4b7b      	ldr	r3, [pc, #492]	; (8006094 <Batt_Protection_when_charge+0x2cc>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4875      	ldr	r0, [pc, #468]	; (8006084 <Batt_Protection_when_charge+0x2bc>)
 8005eae:	f7fa fe3f 	bl	8000b30 <__aeabi_fsub>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	4974      	ldr	r1, [pc, #464]	; (8006088 <Batt_Protection_when_charge+0x2c0>)
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fb f8e2 	bl	8001080 <__aeabi_fcmplt>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10d      	bne.n	8005ede <Batt_Protection_when_charge+0x116>
 8005ec2:	4b75      	ldr	r3, [pc, #468]	; (8006098 <Batt_Protection_when_charge+0x2d0>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4871      	ldr	r0, [pc, #452]	; (8006090 <Batt_Protection_when_charge+0x2c8>)
 8005eca:	f7fa fe31 	bl	8000b30 <__aeabi_fsub>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4969      	ldr	r1, [pc, #420]	; (8006078 <Batt_Protection_when_charge+0x2b0>)
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fb f8d4 	bl	8001080 <__aeabi_fcmplt>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d036      	beq.n	8005f4c <Batt_Protection_when_charge+0x184>
 8005ede:	4b6f      	ldr	r3, [pc, #444]	; (800609c <Batt_Protection_when_charge+0x2d4>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d132      	bne.n	8005f4c <Batt_Protection_when_charge+0x184>
			  			  fault_code=8;
 8005ee6:	4b5f      	ldr	r3, [pc, #380]	; (8006064 <Batt_Protection_when_charge+0x29c>)
 8005ee8:	2208      	movs	r2, #8
 8005eea:	701a      	strb	r2, [r3, #0]
			  			  if((Suhu_T1>45)||(Suhu_T2>80)||(Suhu_T3>45)||(Suhu_T4>80))
 8005eec:	4b64      	ldr	r3, [pc, #400]	; (8006080 <Batt_Protection_when_charge+0x2b8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4964      	ldr	r1, [pc, #400]	; (8006084 <Batt_Protection_when_charge+0x2bc>)
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fb f8e2 	bl	80010bc <__aeabi_fcmpgt>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d11b      	bne.n	8005f36 <Batt_Protection_when_charge+0x16e>
 8005efe:	4b63      	ldr	r3, [pc, #396]	; (800608c <Batt_Protection_when_charge+0x2c4>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4963      	ldr	r1, [pc, #396]	; (8006090 <Batt_Protection_when_charge+0x2c8>)
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fb f8d9 	bl	80010bc <__aeabi_fcmpgt>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d112      	bne.n	8005f36 <Batt_Protection_when_charge+0x16e>
 8005f10:	4b60      	ldr	r3, [pc, #384]	; (8006094 <Batt_Protection_when_charge+0x2cc>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	495b      	ldr	r1, [pc, #364]	; (8006084 <Batt_Protection_when_charge+0x2bc>)
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fb f8d0 	bl	80010bc <__aeabi_fcmpgt>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <Batt_Protection_when_charge+0x16e>
 8005f22:	4b5d      	ldr	r3, [pc, #372]	; (8006098 <Batt_Protection_when_charge+0x2d0>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	495a      	ldr	r1, [pc, #360]	; (8006090 <Batt_Protection_when_charge+0x2c8>)
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fb f8c7 	bl	80010bc <__aeabi_fcmpgt>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d100      	bne.n	8005f36 <Batt_Protection_when_charge+0x16e>
 8005f34:	e316      	b.n	8006564 <Batt_Protection_when_charge+0x79c>
			  				  	  Batt_Open_Mode();
 8005f36:	f7fb fa3d 	bl	80013b4 <Batt_Open_Mode>
			  				  	  flag_trip_overtemperature=ON;
 8005f3a:	4b58      	ldr	r3, [pc, #352]	; (800609c <Batt_Protection_when_charge+0x2d4>)
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	701a      	strb	r2, [r3, #0]
			  				  	  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005f40:	2200      	movs	r2, #0
 8005f42:	2104      	movs	r1, #4
 8005f44:	4849      	ldr	r0, [pc, #292]	; (800606c <Batt_Protection_when_charge+0x2a4>)
 8005f46:	f003 fb1a 	bl	800957e <HAL_GPIO_WritePin>
			  			  if((Suhu_T1>45)||(Suhu_T2>80)||(Suhu_T3>45)||(Suhu_T4>80))
 8005f4a:	e30b      	b.n	8006564 <Batt_Protection_when_charge+0x79c>
			  		else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF)
 8005f4c:	4b4c      	ldr	r3, [pc, #304]	; (8006080 <Batt_Protection_when_charge+0x2b8>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	4b53      	ldr	r3, [pc, #332]	; (80060a0 <Batt_Protection_when_charge+0x2d8>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4619      	mov	r1, r3
 8005f56:	4610      	mov	r0, r2
 8005f58:	f7fa fdea 	bl	8000b30 <__aeabi_fsub>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	4946      	ldr	r1, [pc, #280]	; (8006078 <Batt_Protection_when_charge+0x2b0>)
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fb f897 	bl	8001094 <__aeabi_fcmple>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d130      	bne.n	8005fce <Batt_Protection_when_charge+0x206>
 8005f6c:	4b47      	ldr	r3, [pc, #284]	; (800608c <Batt_Protection_when_charge+0x2c4>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	4b4b      	ldr	r3, [pc, #300]	; (80060a0 <Batt_Protection_when_charge+0x2d8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4619      	mov	r1, r3
 8005f76:	4610      	mov	r0, r2
 8005f78:	f7fa fdda 	bl	8000b30 <__aeabi_fsub>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	493e      	ldr	r1, [pc, #248]	; (8006078 <Batt_Protection_when_charge+0x2b0>)
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fb f887 	bl	8001094 <__aeabi_fcmple>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d120      	bne.n	8005fce <Batt_Protection_when_charge+0x206>
 8005f8c:	4b41      	ldr	r3, [pc, #260]	; (8006094 <Batt_Protection_when_charge+0x2cc>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	4b43      	ldr	r3, [pc, #268]	; (80060a0 <Batt_Protection_when_charge+0x2d8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f7fa fdca 	bl	8000b30 <__aeabi_fsub>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	4936      	ldr	r1, [pc, #216]	; (8006078 <Batt_Protection_when_charge+0x2b0>)
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fb f877 	bl	8001094 <__aeabi_fcmple>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d110      	bne.n	8005fce <Batt_Protection_when_charge+0x206>
 8005fac:	4b3a      	ldr	r3, [pc, #232]	; (8006098 <Batt_Protection_when_charge+0x2d0>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	4b3b      	ldr	r3, [pc, #236]	; (80060a0 <Batt_Protection_when_charge+0x2d8>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f7fa fdba 	bl	8000b30 <__aeabi_fsub>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	492e      	ldr	r1, [pc, #184]	; (8006078 <Batt_Protection_when_charge+0x2b0>)
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fb f867 	bl	8001094 <__aeabi_fcmple>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 812d 	beq.w	8006228 <Batt_Protection_when_charge+0x460>
 8005fce:	4b35      	ldr	r3, [pc, #212]	; (80060a4 <Batt_Protection_when_charge+0x2dc>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f040 8128 	bne.w	8006228 <Batt_Protection_when_charge+0x460>
			  			  fault_code=9;
 8005fd8:	4b22      	ldr	r3, [pc, #136]	; (8006064 <Batt_Protection_when_charge+0x29c>)
 8005fda:	2209      	movs	r2, #9
 8005fdc:	701a      	strb	r2, [r3, #0]
			  			  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8005fde:	4b30      	ldr	r3, [pc, #192]	; (80060a0 <Batt_Protection_when_charge+0x2d8>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4925      	ldr	r1, [pc, #148]	; (8006078 <Batt_Protection_when_charge+0x2b0>)
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fa fda5 	bl	8000b34 <__addsf3>
 8005fea:	4603      	mov	r3, r0
 8005fec:	461a      	mov	r2, r3
 8005fee:	4b24      	ldr	r3, [pc, #144]	; (8006080 <Batt_Protection_when_charge+0x2b8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	f7fb f857 	bl	80010a8 <__aeabi_fcmpge>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d057      	beq.n	80060b0 <Batt_Protection_when_charge+0x2e8>
 8006000:	4b27      	ldr	r3, [pc, #156]	; (80060a0 <Batt_Protection_when_charge+0x2d8>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4920      	ldr	r1, [pc, #128]	; (8006088 <Batt_Protection_when_charge+0x2c0>)
 8006006:	4618      	mov	r0, r3
 8006008:	f7fa fd94 	bl	8000b34 <__addsf3>
 800600c:	4603      	mov	r3, r0
 800600e:	461a      	mov	r2, r3
 8006010:	4b1b      	ldr	r3, [pc, #108]	; (8006080 <Batt_Protection_when_charge+0x2b8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4619      	mov	r1, r3
 8006016:	4610      	mov	r0, r2
 8006018:	f7fb f832 	bl	8001080 <__aeabi_fcmplt>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d046      	beq.n	80060b0 <Batt_Protection_when_charge+0x2e8>
			  				  if((test_tim2%1000)==0)
 8006022:	4b21      	ldr	r3, [pc, #132]	; (80060a8 <Batt_Protection_when_charge+0x2e0>)
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4b21      	ldr	r3, [pc, #132]	; (80060ac <Batt_Protection_when_charge+0x2e4>)
 8006028:	fb83 1302 	smull	r1, r3, r3, r2
 800602c:	1199      	asrs	r1, r3, #6
 800602e:	17d3      	asrs	r3, r2, #31
 8006030:	1acb      	subs	r3, r1, r3
 8006032:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006036:	fb01 f303 	mul.w	r3, r1, r3
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	f040 80dd 	bne.w	80061fc <Batt_Protection_when_charge+0x434>
			  					  BUZZ_Toggle;
 8006042:	2104      	movs	r1, #4
 8006044:	4809      	ldr	r0, [pc, #36]	; (800606c <Batt_Protection_when_charge+0x2a4>)
 8006046:	f003 fab2 	bl	80095ae <HAL_GPIO_TogglePin>
			  					  test_tim2=0;
 800604a:	4b17      	ldr	r3, [pc, #92]	; (80060a8 <Batt_Protection_when_charge+0x2e0>)
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]
			  				  if((test_tim2%1000)==0)
 8006050:	e0d4      	b.n	80061fc <Batt_Protection_when_charge+0x434>
 8006052:	bf00      	nop
 8006054:	20001058 	.word	0x20001058
 8006058:	2000103c 	.word	0x2000103c
 800605c:	2000104c 	.word	0x2000104c
 8006060:	2000107c 	.word	0x2000107c
 8006064:	20001068 	.word	0x20001068
 8006068:	20000c32 	.word	0x20000c32
 800606c:	40011000 	.word	0x40011000
 8006070:	2000006c 	.word	0x2000006c
 8006074:	20000be4 	.word	0x20000be4
 8006078:	41200000 	.word	0x41200000
 800607c:	20000c31 	.word	0x20000c31
 8006080:	2000106c 	.word	0x2000106c
 8006084:	42340000 	.word	0x42340000
 8006088:	40a00000 	.word	0x40a00000
 800608c:	200014a8 	.word	0x200014a8
 8006090:	42a00000 	.word	0x42a00000
 8006094:	20001040 	.word	0x20001040
 8006098:	200010a0 	.word	0x200010a0
 800609c:	20001038 	.word	0x20001038
 80060a0:	20000064 	.word	0x20000064
 80060a4:	20001060 	.word	0x20001060
 80060a8:	20000bdc 	.word	0x20000bdc
 80060ac:	10624dd3 	.word	0x10624dd3
			  			  else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2)
 80060b0:	4b53      	ldr	r3, [pc, #332]	; (8006200 <Batt_Protection_when_charge+0x438>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4953      	ldr	r1, [pc, #332]	; (8006204 <Batt_Protection_when_charge+0x43c>)
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fa fd3c 	bl	8000b34 <__addsf3>
 80060bc:	4603      	mov	r3, r0
 80060be:	461a      	mov	r2, r3
 80060c0:	4b51      	ldr	r3, [pc, #324]	; (8006208 <Batt_Protection_when_charge+0x440>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f7fa ffee 	bl	80010a8 <__aeabi_fcmpge>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d028      	beq.n	8006124 <Batt_Protection_when_charge+0x35c>
 80060d2:	4b4b      	ldr	r3, [pc, #300]	; (8006200 <Batt_Protection_when_charge+0x438>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fa fd2a 	bl	8000b34 <__addsf3>
 80060e0:	4603      	mov	r3, r0
 80060e2:	461a      	mov	r2, r3
 80060e4:	4b48      	ldr	r3, [pc, #288]	; (8006208 <Batt_Protection_when_charge+0x440>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4619      	mov	r1, r3
 80060ea:	4610      	mov	r0, r2
 80060ec:	f7fa ffc8 	bl	8001080 <__aeabi_fcmplt>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d016      	beq.n	8006124 <Batt_Protection_when_charge+0x35c>
			  				  if((test_tim2%500)==0)
 80060f6:	4b45      	ldr	r3, [pc, #276]	; (800620c <Batt_Protection_when_charge+0x444>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	4b45      	ldr	r3, [pc, #276]	; (8006210 <Batt_Protection_when_charge+0x448>)
 80060fc:	fb83 1302 	smull	r1, r3, r3, r2
 8006100:	1159      	asrs	r1, r3, #5
 8006102:	17d3      	asrs	r3, r2, #31
 8006104:	1acb      	subs	r3, r1, r3
 8006106:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800610a:	fb01 f303 	mul.w	r3, r1, r3
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d173      	bne.n	80061fc <Batt_Protection_when_charge+0x434>
			  					  BUZZ_Toggle;
 8006114:	2104      	movs	r1, #4
 8006116:	483f      	ldr	r0, [pc, #252]	; (8006214 <Batt_Protection_when_charge+0x44c>)
 8006118:	f003 fa49 	bl	80095ae <HAL_GPIO_TogglePin>
			  					  test_tim2=0;
 800611c:	4b3b      	ldr	r3, [pc, #236]	; (800620c <Batt_Protection_when_charge+0x444>)
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
			  				  if((test_tim2%500)==0)
 8006122:	e06b      	b.n	80061fc <Batt_Protection_when_charge+0x434>
			  			  else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set)
 8006124:	4b36      	ldr	r3, [pc, #216]	; (8006200 <Batt_Protection_when_charge+0x438>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800612c:	4618      	mov	r0, r3
 800612e:	f7fa fd01 	bl	8000b34 <__addsf3>
 8006132:	4603      	mov	r3, r0
 8006134:	461a      	mov	r2, r3
 8006136:	4b34      	ldr	r3, [pc, #208]	; (8006208 <Batt_Protection_when_charge+0x440>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4619      	mov	r1, r3
 800613c:	4610      	mov	r0, r2
 800613e:	f7fa ffbd 	bl	80010bc <__aeabi_fcmpgt>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d021      	beq.n	800618c <Batt_Protection_when_charge+0x3c4>
 8006148:	4b2f      	ldr	r3, [pc, #188]	; (8006208 <Batt_Protection_when_charge+0x440>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	4b2c      	ldr	r3, [pc, #176]	; (8006200 <Batt_Protection_when_charge+0x438>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4619      	mov	r1, r3
 8006152:	4610      	mov	r0, r2
 8006154:	f7fa ffa8 	bl	80010a8 <__aeabi_fcmpge>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d016      	beq.n	800618c <Batt_Protection_when_charge+0x3c4>
			  				  if((test_tim2%500)==0)
 800615e:	4b2b      	ldr	r3, [pc, #172]	; (800620c <Batt_Protection_when_charge+0x444>)
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b2b      	ldr	r3, [pc, #172]	; (8006210 <Batt_Protection_when_charge+0x448>)
 8006164:	fb83 1302 	smull	r1, r3, r3, r2
 8006168:	1159      	asrs	r1, r3, #5
 800616a:	17d3      	asrs	r3, r2, #31
 800616c:	1acb      	subs	r3, r1, r3
 800616e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006172:	fb01 f303 	mul.w	r3, r1, r3
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d13f      	bne.n	80061fc <Batt_Protection_when_charge+0x434>
			  					  BUZZ_Toggle;
 800617c:	2104      	movs	r1, #4
 800617e:	4825      	ldr	r0, [pc, #148]	; (8006214 <Batt_Protection_when_charge+0x44c>)
 8006180:	f003 fa15 	bl	80095ae <HAL_GPIO_TogglePin>
			  					  test_tim2=0;
 8006184:	4b21      	ldr	r3, [pc, #132]	; (800620c <Batt_Protection_when_charge+0x444>)
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]
			  				  if((test_tim2%500)==0)
 800618a:	e037      	b.n	80061fc <Batt_Protection_when_charge+0x434>
			  			  else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set)
 800618c:	4b1e      	ldr	r3, [pc, #120]	; (8006208 <Batt_Protection_when_charge+0x440>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b1b      	ldr	r3, [pc, #108]	; (8006200 <Batt_Protection_when_charge+0x438>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4619      	mov	r1, r3
 8006196:	4610      	mov	r0, r2
 8006198:	f7fa ff72 	bl	8001080 <__aeabi_fcmplt>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d121      	bne.n	80061e6 <Batt_Protection_when_charge+0x41e>
 80061a2:	4b1d      	ldr	r3, [pc, #116]	; (8006218 <Batt_Protection_when_charge+0x450>)
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4b16      	ldr	r3, [pc, #88]	; (8006200 <Batt_Protection_when_charge+0x438>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f7fa ff67 	bl	8001080 <__aeabi_fcmplt>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d116      	bne.n	80061e6 <Batt_Protection_when_charge+0x41e>
 80061b8:	4b18      	ldr	r3, [pc, #96]	; (800621c <Batt_Protection_when_charge+0x454>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	4b10      	ldr	r3, [pc, #64]	; (8006200 <Batt_Protection_when_charge+0x438>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4619      	mov	r1, r3
 80061c2:	4610      	mov	r0, r2
 80061c4:	f7fa ff5c 	bl	8001080 <__aeabi_fcmplt>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10b      	bne.n	80061e6 <Batt_Protection_when_charge+0x41e>
 80061ce:	4b14      	ldr	r3, [pc, #80]	; (8006220 <Batt_Protection_when_charge+0x458>)
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <Batt_Protection_when_charge+0x438>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4619      	mov	r1, r3
 80061d8:	4610      	mov	r0, r2
 80061da:	f7fa ff51 	bl	8001080 <__aeabi_fcmplt>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d100      	bne.n	80061e6 <Batt_Protection_when_charge+0x41e>
			  			  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 80061e4:	e1be      	b.n	8006564 <Batt_Protection_when_charge+0x79c>
			  				  Batt_Open_Mode();
 80061e6:	f7fb f8e5 	bl	80013b4 <Batt_Open_Mode>
			  				  flag_trip_undertemperature=ON;
 80061ea:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <Batt_Protection_when_charge+0x45c>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	701a      	strb	r2, [r3, #0]
			  				  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80061f0:	2200      	movs	r2, #0
 80061f2:	2104      	movs	r1, #4
 80061f4:	4807      	ldr	r0, [pc, #28]	; (8006214 <Batt_Protection_when_charge+0x44c>)
 80061f6:	f003 f9c2 	bl	800957e <HAL_GPIO_WritePin>
			  			  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 80061fa:	e1b3      	b.n	8006564 <Batt_Protection_when_charge+0x79c>
 80061fc:	e1b2      	b.n	8006564 <Batt_Protection_when_charge+0x79c>
 80061fe:	bf00      	nop
 8006200:	20000064 	.word	0x20000064
 8006204:	40a00000 	.word	0x40a00000
 8006208:	2000106c 	.word	0x2000106c
 800620c:	20000bdc 	.word	0x20000bdc
 8006210:	10624dd3 	.word	0x10624dd3
 8006214:	40011000 	.word	0x40011000
 8006218:	200014a8 	.word	0x200014a8
 800621c:	20001040 	.word	0x20001040
 8006220:	200010a0 	.word	0x200010a0
 8006224:	20001060 	.word	0x20001060
			  		else if((fabs(IBATT)-I_Over_Set_Charge)>0 && flag_trip_overcurrentcharge==OFF)   //Indikasi terjadi Over Current
 8006228:	4bb7      	ldr	r3, [pc, #732]	; (8006508 <Batt_Protection_when_charge+0x740>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006230:	4618      	mov	r0, r3
 8006232:	f7fa f8f9 	bl	8000428 <__aeabi_f2d>
 8006236:	4604      	mov	r4, r0
 8006238:	460d      	mov	r5, r1
 800623a:	4bb4      	ldr	r3, [pc, #720]	; (800650c <Batt_Protection_when_charge+0x744>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f7fa f8f2 	bl	8000428 <__aeabi_f2d>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4620      	mov	r0, r4
 800624a:	4629      	mov	r1, r5
 800624c:	f7f9 ff8c 	bl	8000168 <__aeabi_dsub>
 8006250:	4603      	mov	r3, r0
 8006252:	460c      	mov	r4, r1
 8006254:	4618      	mov	r0, r3
 8006256:	4621      	mov	r1, r4
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	f04f 0300 	mov.w	r3, #0
 8006260:	f7fa fbca 	bl	80009f8 <__aeabi_dcmpgt>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 80dd 	beq.w	8006426 <Batt_Protection_when_charge+0x65e>
 800626c:	4ba8      	ldr	r3, [pc, #672]	; (8006510 <Batt_Protection_when_charge+0x748>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f040 80d8 	bne.w	8006426 <Batt_Protection_when_charge+0x65e>
				    	fault_code=10;
 8006276:	4ba7      	ldr	r3, [pc, #668]	; (8006514 <Batt_Protection_when_charge+0x74c>)
 8006278:	220a      	movs	r2, #10
 800627a:	701a      	strb	r2, [r3, #0]
				    	T_I_Over_trip=14.5/(((IBATT/6.9)*(IBATT/6.9))-1);
 800627c:	4ba2      	ldr	r3, [pc, #648]	; (8006508 <Batt_Protection_when_charge+0x740>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	f7fa f8d1 	bl	8000428 <__aeabi_f2d>
 8006286:	a39c      	add	r3, pc, #624	; (adr r3, 80064f8 <Batt_Protection_when_charge+0x730>)
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	f7fa fa4e 	bl	800072c <__aeabi_ddiv>
 8006290:	4603      	mov	r3, r0
 8006292:	460c      	mov	r4, r1
 8006294:	4625      	mov	r5, r4
 8006296:	461c      	mov	r4, r3
 8006298:	4b9b      	ldr	r3, [pc, #620]	; (8006508 <Batt_Protection_when_charge+0x740>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4618      	mov	r0, r3
 800629e:	f7fa f8c3 	bl	8000428 <__aeabi_f2d>
 80062a2:	a395      	add	r3, pc, #596	; (adr r3, 80064f8 <Batt_Protection_when_charge+0x730>)
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f7fa fa40 	bl	800072c <__aeabi_ddiv>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4620      	mov	r0, r4
 80062b2:	4629      	mov	r1, r5
 80062b4:	f7fa f910 	bl	80004d8 <__aeabi_dmul>
 80062b8:	4603      	mov	r3, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	4618      	mov	r0, r3
 80062be:	4621      	mov	r1, r4
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	4b94      	ldr	r3, [pc, #592]	; (8006518 <Batt_Protection_when_charge+0x750>)
 80062c6:	f7f9 ff4f 	bl	8000168 <__aeabi_dsub>
 80062ca:	4603      	mov	r3, r0
 80062cc:	460c      	mov	r4, r1
 80062ce:	461a      	mov	r2, r3
 80062d0:	4623      	mov	r3, r4
 80062d2:	f04f 0000 	mov.w	r0, #0
 80062d6:	4991      	ldr	r1, [pc, #580]	; (800651c <Batt_Protection_when_charge+0x754>)
 80062d8:	f7fa fa28 	bl	800072c <__aeabi_ddiv>
 80062dc:	4603      	mov	r3, r0
 80062de:	460c      	mov	r4, r1
 80062e0:	4618      	mov	r0, r3
 80062e2:	4621      	mov	r1, r4
 80062e4:	f7fa fbd0 	bl	8000a88 <__aeabi_d2f>
 80062e8:	4602      	mov	r2, r0
 80062ea:	4b8d      	ldr	r3, [pc, #564]	; (8006520 <Batt_Protection_when_charge+0x758>)
 80062ec:	601a      	str	r2, [r3, #0]
				    	T_I_Over_trip_cycle+=0.001;
 80062ee:	4b8d      	ldr	r3, [pc, #564]	; (8006524 <Batt_Protection_when_charge+0x75c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fa f898 	bl	8000428 <__aeabi_f2d>
 80062f8:	a381      	add	r3, pc, #516	; (adr r3, 8006500 <Batt_Protection_when_charge+0x738>)
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	f7f9 ff35 	bl	800016c <__adddf3>
 8006302:	4603      	mov	r3, r0
 8006304:	460c      	mov	r4, r1
 8006306:	4618      	mov	r0, r3
 8006308:	4621      	mov	r1, r4
 800630a:	f7fa fbbd 	bl	8000a88 <__aeabi_d2f>
 800630e:	4602      	mov	r2, r0
 8006310:	4b84      	ldr	r3, [pc, #528]	; (8006524 <Batt_Protection_when_charge+0x75c>)
 8006312:	601a      	str	r2, [r3, #0]
	    		  		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentcharge==OFF)
 8006314:	4b83      	ldr	r3, [pc, #524]	; (8006524 <Batt_Protection_when_charge+0x75c>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	4b81      	ldr	r3, [pc, #516]	; (8006520 <Batt_Protection_when_charge+0x758>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4619      	mov	r1, r3
 800631e:	4610      	mov	r0, r2
 8006320:	f7fa fecc 	bl	80010bc <__aeabi_fcmpgt>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d011      	beq.n	800634e <Batt_Protection_when_charge+0x586>
 800632a:	4b79      	ldr	r3, [pc, #484]	; (8006510 <Batt_Protection_when_charge+0x748>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10d      	bne.n	800634e <Batt_Protection_when_charge+0x586>
	    		  			Batt_Open_Mode();
 8006332:	f7fb f83f 	bl	80013b4 <Batt_Open_Mode>
	    		  			T_I_Over_trip_cycle=T_I_Over_trip;
 8006336:	4b7a      	ldr	r3, [pc, #488]	; (8006520 <Batt_Protection_when_charge+0x758>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a7a      	ldr	r2, [pc, #488]	; (8006524 <Batt_Protection_when_charge+0x75c>)
 800633c:	6013      	str	r3, [r2, #0]
	    		  			flag_trip_overcurrentcharge=ON;
 800633e:	4b74      	ldr	r3, [pc, #464]	; (8006510 <Batt_Protection_when_charge+0x748>)
 8006340:	2201      	movs	r2, #1
 8006342:	701a      	strb	r2, [r3, #0]
	    		  			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8006344:	2200      	movs	r2, #0
 8006346:	2104      	movs	r1, #4
 8006348:	4877      	ldr	r0, [pc, #476]	; (8006528 <Batt_Protection_when_charge+0x760>)
 800634a:	f003 f918 	bl	800957e <HAL_GPIO_WritePin>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 800634e:	4b70      	ldr	r3, [pc, #448]	; (8006510 <Batt_Protection_when_charge+0x748>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	f040 8105 	bne.w	8006562 <Batt_Protection_when_charge+0x79a>
				    		if(T_I_Over_trip-T_I_Over_trip_cycle>15)
 8006358:	4b71      	ldr	r3, [pc, #452]	; (8006520 <Batt_Protection_when_charge+0x758>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	4b71      	ldr	r3, [pc, #452]	; (8006524 <Batt_Protection_when_charge+0x75c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4619      	mov	r1, r3
 8006362:	4610      	mov	r0, r2
 8006364:	f7fa fbe4 	bl	8000b30 <__aeabi_fsub>
 8006368:	4603      	mov	r3, r0
 800636a:	4970      	ldr	r1, [pc, #448]	; (800652c <Batt_Protection_when_charge+0x764>)
 800636c:	4618      	mov	r0, r3
 800636e:	f7fa fea5 	bl	80010bc <__aeabi_fcmpgt>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d017      	beq.n	80063a8 <Batt_Protection_when_charge+0x5e0>
				    			if((test_tim2%1000)==0)
 8006378:	4b6d      	ldr	r3, [pc, #436]	; (8006530 <Batt_Protection_when_charge+0x768>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	4b6d      	ldr	r3, [pc, #436]	; (8006534 <Batt_Protection_when_charge+0x76c>)
 800637e:	fb83 1302 	smull	r1, r3, r3, r2
 8006382:	1199      	asrs	r1, r3, #6
 8006384:	17d3      	asrs	r3, r2, #31
 8006386:	1acb      	subs	r3, r1, r3
 8006388:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800638c:	fb01 f303 	mul.w	r3, r1, r3
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	f040 80e5 	bne.w	8006562 <Batt_Protection_when_charge+0x79a>
				    				BUZZ_Toggle;
 8006398:	2104      	movs	r1, #4
 800639a:	4863      	ldr	r0, [pc, #396]	; (8006528 <Batt_Protection_when_charge+0x760>)
 800639c:	f003 f907 	bl	80095ae <HAL_GPIO_TogglePin>
				    				test_tim2=0;
 80063a0:	4b63      	ldr	r3, [pc, #396]	; (8006530 <Batt_Protection_when_charge+0x768>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
	    		  		if(flag_trip_overcurrentcharge==OFF)
 80063a6:	e0dc      	b.n	8006562 <Batt_Protection_when_charge+0x79a>
				    		else if(T_I_Over_trip-T_I_Over_trip_cycle>10)
 80063a8:	4b5d      	ldr	r3, [pc, #372]	; (8006520 <Batt_Protection_when_charge+0x758>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	4b5d      	ldr	r3, [pc, #372]	; (8006524 <Batt_Protection_when_charge+0x75c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4619      	mov	r1, r3
 80063b2:	4610      	mov	r0, r2
 80063b4:	f7fa fbbc 	bl	8000b30 <__aeabi_fsub>
 80063b8:	4603      	mov	r3, r0
 80063ba:	495f      	ldr	r1, [pc, #380]	; (8006538 <Batt_Protection_when_charge+0x770>)
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fa fe7d 	bl	80010bc <__aeabi_fcmpgt>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d016      	beq.n	80063f6 <Batt_Protection_when_charge+0x62e>
				    			if((test_tim2%100)==0)
 80063c8:	4b59      	ldr	r3, [pc, #356]	; (8006530 <Batt_Protection_when_charge+0x768>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4b5b      	ldr	r3, [pc, #364]	; (800653c <Batt_Protection_when_charge+0x774>)
 80063ce:	fb83 1302 	smull	r1, r3, r3, r2
 80063d2:	1159      	asrs	r1, r3, #5
 80063d4:	17d3      	asrs	r3, r2, #31
 80063d6:	1acb      	subs	r3, r1, r3
 80063d8:	2164      	movs	r1, #100	; 0x64
 80063da:	fb01 f303 	mul.w	r3, r1, r3
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f040 80be 	bne.w	8006562 <Batt_Protection_when_charge+0x79a>
				    				BUZZ_Toggle;
 80063e6:	2104      	movs	r1, #4
 80063e8:	484f      	ldr	r0, [pc, #316]	; (8006528 <Batt_Protection_when_charge+0x760>)
 80063ea:	f003 f8e0 	bl	80095ae <HAL_GPIO_TogglePin>
				    				test_tim2=0;
 80063ee:	4b50      	ldr	r3, [pc, #320]	; (8006530 <Batt_Protection_when_charge+0x768>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
	    		  		if(flag_trip_overcurrentcharge==OFF)
 80063f4:	e0b5      	b.n	8006562 <Batt_Protection_when_charge+0x79a>
				    		else if(T_I_Over_trip-T_I_Over_trip_cycle>1)
 80063f6:	4b4a      	ldr	r3, [pc, #296]	; (8006520 <Batt_Protection_when_charge+0x758>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	4b4a      	ldr	r3, [pc, #296]	; (8006524 <Batt_Protection_when_charge+0x75c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4619      	mov	r1, r3
 8006400:	4610      	mov	r0, r2
 8006402:	f7fa fb95 	bl	8000b30 <__aeabi_fsub>
 8006406:	4603      	mov	r3, r0
 8006408:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800640c:	4618      	mov	r0, r3
 800640e:	f7fa fe55 	bl	80010bc <__aeabi_fcmpgt>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d100      	bne.n	800641a <Batt_Protection_when_charge+0x652>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 8006418:	e0a3      	b.n	8006562 <Batt_Protection_when_charge+0x79a>
				    			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 800641a:	2201      	movs	r2, #1
 800641c:	2104      	movs	r1, #4
 800641e:	4842      	ldr	r0, [pc, #264]	; (8006528 <Batt_Protection_when_charge+0x760>)
 8006420:	f003 f8ad 	bl	800957e <HAL_GPIO_WritePin>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 8006424:	e09d      	b.n	8006562 <Batt_Protection_when_charge+0x79a>
			  		else if(VBATT>V_Over_Set)
 8006426:	4b46      	ldr	r3, [pc, #280]	; (8006540 <Batt_Protection_when_charge+0x778>)
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4b46      	ldr	r3, [pc, #280]	; (8006544 <Batt_Protection_when_charge+0x77c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4619      	mov	r1, r3
 8006430:	4610      	mov	r0, r2
 8006432:	f7fa fe43 	bl	80010bc <__aeabi_fcmpgt>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d008      	beq.n	800644e <Batt_Protection_when_charge+0x686>
			  			fault_code=11;
 800643c:	4b35      	ldr	r3, [pc, #212]	; (8006514 <Batt_Protection_when_charge+0x74c>)
 800643e:	220b      	movs	r2, #11
 8006440:	701a      	strb	r2, [r3, #0]
			  			flag_trip_overvoltage=ON;
 8006442:	4b41      	ldr	r3, [pc, #260]	; (8006548 <Batt_Protection_when_charge+0x780>)
 8006444:	2201      	movs	r2, #1
 8006446:	701a      	strb	r2, [r3, #0]
			  			Batt_Open_Mode();
 8006448:	f7fa ffb4 	bl	80013b4 <Batt_Open_Mode>
}
 800644c:	e08a      	b.n	8006564 <Batt_Protection_when_charge+0x79c>
				    	  if(fault_code!=0) last_fault_code=fault_code;
 800644e:	4b31      	ldr	r3, [pc, #196]	; (8006514 <Batt_Protection_when_charge+0x74c>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <Batt_Protection_when_charge+0x696>
 8006456:	4b2f      	ldr	r3, [pc, #188]	; (8006514 <Batt_Protection_when_charge+0x74c>)
 8006458:	781a      	ldrb	r2, [r3, #0]
 800645a:	4b3c      	ldr	r3, [pc, #240]	; (800654c <Batt_Protection_when_charge+0x784>)
 800645c:	701a      	strb	r2, [r3, #0]
				    	  fault_code=0;
 800645e:	4b2d      	ldr	r3, [pc, #180]	; (8006514 <Batt_Protection_when_charge+0x74c>)
 8006460:	2200      	movs	r2, #0
 8006462:	701a      	strb	r2, [r3, #0]
				    	  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8006464:	2200      	movs	r2, #0
 8006466:	2104      	movs	r1, #4
 8006468:	482f      	ldr	r0, [pc, #188]	; (8006528 <Batt_Protection_when_charge+0x760>)
 800646a:	f003 f888 	bl	800957e <HAL_GPIO_WritePin>
				    	  T_Under_trip=0;
 800646e:	4b38      	ldr	r3, [pc, #224]	; (8006550 <Batt_Protection_when_charge+0x788>)
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
				    	  T_trip_cycle=T_trip_cycle-0.001;
 8006476:	4b37      	ldr	r3, [pc, #220]	; (8006554 <Batt_Protection_when_charge+0x78c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f7f9 ffd4 	bl	8000428 <__aeabi_f2d>
 8006480:	a31f      	add	r3, pc, #124	; (adr r3, 8006500 <Batt_Protection_when_charge+0x738>)
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	f7f9 fe6f 	bl	8000168 <__aeabi_dsub>
 800648a:	4603      	mov	r3, r0
 800648c:	460c      	mov	r4, r1
 800648e:	4618      	mov	r0, r3
 8006490:	4621      	mov	r1, r4
 8006492:	f7fa faf9 	bl	8000a88 <__aeabi_d2f>
 8006496:	4602      	mov	r2, r0
 8006498:	4b2e      	ldr	r3, [pc, #184]	; (8006554 <Batt_Protection_when_charge+0x78c>)
 800649a:	601a      	str	r2, [r3, #0]
				    	  T_I_Over_trip_cycle-=0.001;
 800649c:	4b21      	ldr	r3, [pc, #132]	; (8006524 <Batt_Protection_when_charge+0x75c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7f9 ffc1 	bl	8000428 <__aeabi_f2d>
 80064a6:	a316      	add	r3, pc, #88	; (adr r3, 8006500 <Batt_Protection_when_charge+0x738>)
 80064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ac:	f7f9 fe5c 	bl	8000168 <__aeabi_dsub>
 80064b0:	4603      	mov	r3, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	4618      	mov	r0, r3
 80064b6:	4621      	mov	r1, r4
 80064b8:	f7fa fae6 	bl	8000a88 <__aeabi_d2f>
 80064bc:	4602      	mov	r2, r0
 80064be:	4b19      	ldr	r3, [pc, #100]	; (8006524 <Batt_Protection_when_charge+0x75c>)
 80064c0:	601a      	str	r2, [r3, #0]
				    	  if(T_trip_cycle<0) T_trip_cycle=0;
 80064c2:	4b24      	ldr	r3, [pc, #144]	; (8006554 <Batt_Protection_when_charge+0x78c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f04f 0100 	mov.w	r1, #0
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fa fdd8 	bl	8001080 <__aeabi_fcmplt>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <Batt_Protection_when_charge+0x716>
 80064d6:	4b1f      	ldr	r3, [pc, #124]	; (8006554 <Batt_Protection_when_charge+0x78c>)
 80064d8:	f04f 0200 	mov.w	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]
				    	  if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 80064de:	4b11      	ldr	r3, [pc, #68]	; (8006524 <Batt_Protection_when_charge+0x75c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f04f 0100 	mov.w	r1, #0
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fa fdca 	bl	8001080 <__aeabi_fcmplt>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d132      	bne.n	8006558 <Batt_Protection_when_charge+0x790>
}
 80064f2:	e037      	b.n	8006564 <Batt_Protection_when_charge+0x79c>
 80064f4:	f3af 8000 	nop.w
 80064f8:	9999999a 	.word	0x9999999a
 80064fc:	401b9999 	.word	0x401b9999
 8006500:	d2f1a9fc 	.word	0xd2f1a9fc
 8006504:	3f50624d 	.word	0x3f50624d
 8006508:	20001058 	.word	0x20001058
 800650c:	2000005c 	.word	0x2000005c
 8006510:	2000108c 	.word	0x2000108c
 8006514:	20001068 	.word	0x20001068
 8006518:	3ff00000 	.word	0x3ff00000
 800651c:	402d0000 	.word	0x402d0000
 8006520:	20001024 	.word	0x20001024
 8006524:	200010a4 	.word	0x200010a4
 8006528:	40011000 	.word	0x40011000
 800652c:	41700000 	.word	0x41700000
 8006530:	20000bdc 	.word	0x20000bdc
 8006534:	10624dd3 	.word	0x10624dd3
 8006538:	41200000 	.word	0x41200000
 800653c:	51eb851f 	.word	0x51eb851f
 8006540:	2000103c 	.word	0x2000103c
 8006544:	20000074 	.word	0x20000074
 8006548:	200014a5 	.word	0x200014a5
 800654c:	200014a4 	.word	0x200014a4
 8006550:	20001028 	.word	0x20001028
 8006554:	20001074 	.word	0x20001074
				    	  if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 8006558:	4b03      	ldr	r3, [pc, #12]	; (8006568 <Batt_Protection_when_charge+0x7a0>)
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	601a      	str	r2, [r3, #0]
}
 8006560:	e000      	b.n	8006564 <Batt_Protection_when_charge+0x79c>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 8006562:	bf00      	nop
}
 8006564:	bf00      	nop
 8006566:	bdb0      	pop	{r4, r5, r7, pc}
 8006568:	200010a4 	.word	0x200010a4
 800656c:	00000000 	.word	0x00000000

08006570 <Batt_Protection_when_chargedischarge>:

void Batt_Protection_when_chargedischarge(void)
{
 8006570:	b5b0      	push	{r4, r5, r7, lr}
 8006572:	af00      	add	r7, sp, #0
	// Short circuit protection
	if(IBATT > (VBATT/0.9)) {
 8006574:	4b82      	ldr	r3, [pc, #520]	; (8006780 <Batt_Protection_when_chargedischarge+0x210>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4618      	mov	r0, r3
 800657a:	f7f9 ff55 	bl	8000428 <__aeabi_f2d>
 800657e:	4604      	mov	r4, r0
 8006580:	460d      	mov	r5, r1
 8006582:	4b80      	ldr	r3, [pc, #512]	; (8006784 <Batt_Protection_when_chargedischarge+0x214>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f7f9 ff4e 	bl	8000428 <__aeabi_f2d>
 800658c:	a378      	add	r3, pc, #480	; (adr r3, 8006770 <Batt_Protection_when_chargedischarge+0x200>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f7fa f8cb 	bl	800072c <__aeabi_ddiv>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	4620      	mov	r0, r4
 800659c:	4629      	mov	r1, r5
 800659e:	f7fa fa2b 	bl	80009f8 <__aeabi_dcmpgt>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d016      	beq.n	80065d6 <Batt_Protection_when_chargedischarge+0x66>
		Isc=IBATT;
 80065a8:	4b75      	ldr	r3, [pc, #468]	; (8006780 <Batt_Protection_when_chargedischarge+0x210>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a76      	ldr	r2, [pc, #472]	; (8006788 <Batt_Protection_when_chargedischarge+0x218>)
 80065ae:	6013      	str	r3, [r2, #0]
		Vsc=VBATT;
 80065b0:	4b74      	ldr	r3, [pc, #464]	; (8006784 <Batt_Protection_when_chargedischarge+0x214>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a75      	ldr	r2, [pc, #468]	; (800678c <Batt_Protection_when_chargedischarge+0x21c>)
 80065b6:	6013      	str	r3, [r2, #0]
		fault_code=12;
 80065b8:	4b75      	ldr	r3, [pc, #468]	; (8006790 <Batt_Protection_when_chargedischarge+0x220>)
 80065ba:	220c      	movs	r2, #12
 80065bc:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 80065be:	f7fa fef9 	bl	80013b4 <Batt_Open_Mode>
		flag_trip_shortcircuit=ON;
 80065c2:	4b74      	ldr	r3, [pc, #464]	; (8006794 <Batt_Protection_when_chargedischarge+0x224>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80065c8:	2200      	movs	r2, #0
 80065ca:	2104      	movs	r1, #4
 80065cc:	4872      	ldr	r0, [pc, #456]	; (8006798 <Batt_Protection_when_chargedischarge+0x228>)
 80065ce:	f002 ffd6 	bl	800957e <HAL_GPIO_WritePin>
		  T_I_Over_trip_cycle=0;
	}



}
 80065d2:	f000 bddd 	b.w	8007190 <Batt_Protection_when_chargedischarge+0xc20>
	else if(VBATT < V_Under_Set && flag_trip_undervoltage == OFF ) { //Indikasi terjadi Undervoltage
 80065d6:	4b6b      	ldr	r3, [pc, #428]	; (8006784 <Batt_Protection_when_chargedischarge+0x214>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b70      	ldr	r3, [pc, #448]	; (800679c <Batt_Protection_when_chargedischarge+0x22c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4619      	mov	r1, r3
 80065e0:	4610      	mov	r0, r2
 80065e2:	f7fa fd4d 	bl	8001080 <__aeabi_fcmplt>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 80eb 	beq.w	80067c4 <Batt_Protection_when_chargedischarge+0x254>
 80065ee:	4b6c      	ldr	r3, [pc, #432]	; (80067a0 <Batt_Protection_when_chargedischarge+0x230>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f040 80e6 	bne.w	80067c4 <Batt_Protection_when_chargedischarge+0x254>
		fault_code=1;
 80065f8:	4b65      	ldr	r3, [pc, #404]	; (8006790 <Batt_Protection_when_chargedischarge+0x220>)
 80065fa:	2201      	movs	r2, #1
 80065fc:	701a      	strb	r2, [r3, #0]
		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 80065fe:	4b69      	ldr	r3, [pc, #420]	; (80067a4 <Batt_Protection_when_chargedischarge+0x234>)
 8006600:	681c      	ldr	r4, [r3, #0]
 8006602:	4b60      	ldr	r3, [pc, #384]	; (8006784 <Batt_Protection_when_chargedischarge+0x214>)
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	4b65      	ldr	r3, [pc, #404]	; (800679c <Batt_Protection_when_chargedischarge+0x22c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4619      	mov	r1, r3
 800660c:	4610      	mov	r0, r2
 800660e:	f7fa fc4d 	bl	8000eac <__aeabi_fdiv>
 8006612:	4603      	mov	r3, r0
 8006614:	4619      	mov	r1, r3
 8006616:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800661a:	f7fa fa89 	bl	8000b30 <__aeabi_fsub>
 800661e:	4603      	mov	r3, r0
 8006620:	4619      	mov	r1, r3
 8006622:	4620      	mov	r0, r4
 8006624:	f7fa fc42 	bl	8000eac <__aeabi_fdiv>
 8006628:	4603      	mov	r3, r0
 800662a:	461a      	mov	r2, r3
 800662c:	4b5e      	ldr	r3, [pc, #376]	; (80067a8 <Batt_Protection_when_chargedischarge+0x238>)
 800662e:	601a      	str	r2, [r3, #0]
		T_trip_cycle+=0.001;
 8006630:	4b5e      	ldr	r3, [pc, #376]	; (80067ac <Batt_Protection_when_chargedischarge+0x23c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f7f9 fef7 	bl	8000428 <__aeabi_f2d>
 800663a:	a34f      	add	r3, pc, #316	; (adr r3, 8006778 <Batt_Protection_when_chargedischarge+0x208>)
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	f7f9 fd94 	bl	800016c <__adddf3>
 8006644:	4603      	mov	r3, r0
 8006646:	460c      	mov	r4, r1
 8006648:	4618      	mov	r0, r3
 800664a:	4621      	mov	r1, r4
 800664c:	f7fa fa1c 	bl	8000a88 <__aeabi_d2f>
 8006650:	4602      	mov	r2, r0
 8006652:	4b56      	ldr	r3, [pc, #344]	; (80067ac <Batt_Protection_when_chargedischarge+0x23c>)
 8006654:	601a      	str	r2, [r3, #0]
		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8006656:	4b55      	ldr	r3, [pc, #340]	; (80067ac <Batt_Protection_when_chargedischarge+0x23c>)
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4b53      	ldr	r3, [pc, #332]	; (80067a8 <Batt_Protection_when_chargedischarge+0x238>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4619      	mov	r1, r3
 8006660:	4610      	mov	r0, r2
 8006662:	f7fa fd2b 	bl	80010bc <__aeabi_fcmpgt>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d011      	beq.n	8006690 <Batt_Protection_when_chargedischarge+0x120>
 800666c:	4b4c      	ldr	r3, [pc, #304]	; (80067a0 <Batt_Protection_when_chargedischarge+0x230>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10d      	bne.n	8006690 <Batt_Protection_when_chargedischarge+0x120>
			Batt_Open_Mode();
 8006674:	f7fa fe9e 	bl	80013b4 <Batt_Open_Mode>
			T_trip_cycle=T_Under_trip;
 8006678:	4b4b      	ldr	r3, [pc, #300]	; (80067a8 <Batt_Protection_when_chargedischarge+0x238>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a4b      	ldr	r2, [pc, #300]	; (80067ac <Batt_Protection_when_chargedischarge+0x23c>)
 800667e:	6013      	str	r3, [r2, #0]
			flag_trip_undervoltage=ON;
 8006680:	4b47      	ldr	r3, [pc, #284]	; (80067a0 <Batt_Protection_when_chargedischarge+0x230>)
 8006682:	2201      	movs	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8006686:	2200      	movs	r2, #0
 8006688:	2104      	movs	r1, #4
 800668a:	4843      	ldr	r0, [pc, #268]	; (8006798 <Batt_Protection_when_chargedischarge+0x228>)
 800668c:	f002 ff77 	bl	800957e <HAL_GPIO_WritePin>
		if(flag_trip_undervoltage==OFF) {
 8006690:	4b43      	ldr	r3, [pc, #268]	; (80067a0 <Batt_Protection_when_chargedischarge+0x230>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	f040 8578 	bne.w	800718a <Batt_Protection_when_chargedischarge+0xc1a>
			if(T_Under_trip-T_trip_cycle>15) {
 800669a:	4b43      	ldr	r3, [pc, #268]	; (80067a8 <Batt_Protection_when_chargedischarge+0x238>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b43      	ldr	r3, [pc, #268]	; (80067ac <Batt_Protection_when_chargedischarge+0x23c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4619      	mov	r1, r3
 80066a4:	4610      	mov	r0, r2
 80066a6:	f7fa fa43 	bl	8000b30 <__aeabi_fsub>
 80066aa:	4603      	mov	r3, r0
 80066ac:	4940      	ldr	r1, [pc, #256]	; (80067b0 <Batt_Protection_when_chargedischarge+0x240>)
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fa fd04 	bl	80010bc <__aeabi_fcmpgt>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d018      	beq.n	80066ec <Batt_Protection_when_chargedischarge+0x17c>
				if((test_tim2%1000)==0)
 80066ba:	4b3e      	ldr	r3, [pc, #248]	; (80067b4 <Batt_Protection_when_chargedischarge+0x244>)
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b3e      	ldr	r3, [pc, #248]	; (80067b8 <Batt_Protection_when_chargedischarge+0x248>)
 80066c0:	fb83 1302 	smull	r1, r3, r3, r2
 80066c4:	1199      	asrs	r1, r3, #6
 80066c6:	17d3      	asrs	r3, r2, #31
 80066c8:	1acb      	subs	r3, r1, r3
 80066ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80066ce:	fb01 f303 	mul.w	r3, r1, r3
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f040 8558 	bne.w	800718a <Batt_Protection_when_chargedischarge+0xc1a>
					BUZZ_Toggle;
 80066da:	2104      	movs	r1, #4
 80066dc:	482e      	ldr	r0, [pc, #184]	; (8006798 <Batt_Protection_when_chargedischarge+0x228>)
 80066de:	f002 ff66 	bl	80095ae <HAL_GPIO_TogglePin>
					test_tim2=0;
 80066e2:	4b34      	ldr	r3, [pc, #208]	; (80067b4 <Batt_Protection_when_chargedischarge+0x244>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]
		if(flag_trip_undervoltage==OFF) {
 80066e8:	f000 bd4f 	b.w	800718a <Batt_Protection_when_chargedischarge+0xc1a>
			else if(T_Under_trip-T_trip_cycle>10)
 80066ec:	4b2e      	ldr	r3, [pc, #184]	; (80067a8 <Batt_Protection_when_chargedischarge+0x238>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	4b2e      	ldr	r3, [pc, #184]	; (80067ac <Batt_Protection_when_chargedischarge+0x23c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4619      	mov	r1, r3
 80066f6:	4610      	mov	r0, r2
 80066f8:	f7fa fa1a 	bl	8000b30 <__aeabi_fsub>
 80066fc:	4603      	mov	r3, r0
 80066fe:	492f      	ldr	r1, [pc, #188]	; (80067bc <Batt_Protection_when_chargedischarge+0x24c>)
 8006700:	4618      	mov	r0, r3
 8006702:	f7fa fcdb 	bl	80010bc <__aeabi_fcmpgt>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d017      	beq.n	800673c <Batt_Protection_when_chargedischarge+0x1cc>
				if((test_tim2%100)==0)
 800670c:	4b29      	ldr	r3, [pc, #164]	; (80067b4 <Batt_Protection_when_chargedischarge+0x244>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4b2b      	ldr	r3, [pc, #172]	; (80067c0 <Batt_Protection_when_chargedischarge+0x250>)
 8006712:	fb83 1302 	smull	r1, r3, r3, r2
 8006716:	1159      	asrs	r1, r3, #5
 8006718:	17d3      	asrs	r3, r2, #31
 800671a:	1acb      	subs	r3, r1, r3
 800671c:	2164      	movs	r1, #100	; 0x64
 800671e:	fb01 f303 	mul.w	r3, r1, r3
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	f040 8530 	bne.w	800718a <Batt_Protection_when_chargedischarge+0xc1a>
					BUZZ_Toggle;
 800672a:	2104      	movs	r1, #4
 800672c:	481a      	ldr	r0, [pc, #104]	; (8006798 <Batt_Protection_when_chargedischarge+0x228>)
 800672e:	f002 ff3e 	bl	80095ae <HAL_GPIO_TogglePin>
					test_tim2=0;
 8006732:	4b20      	ldr	r3, [pc, #128]	; (80067b4 <Batt_Protection_when_chargedischarge+0x244>)
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]
		if(flag_trip_undervoltage==OFF) {
 8006738:	f000 bd27 	b.w	800718a <Batt_Protection_when_chargedischarge+0xc1a>
			else if(T_Under_trip-T_trip_cycle>1)
 800673c:	4b1a      	ldr	r3, [pc, #104]	; (80067a8 <Batt_Protection_when_chargedischarge+0x238>)
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	4b1a      	ldr	r3, [pc, #104]	; (80067ac <Batt_Protection_when_chargedischarge+0x23c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4619      	mov	r1, r3
 8006746:	4610      	mov	r0, r2
 8006748:	f7fa f9f2 	bl	8000b30 <__aeabi_fsub>
 800674c:	4603      	mov	r3, r0
 800674e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006752:	4618      	mov	r0, r3
 8006754:	f7fa fcb2 	bl	80010bc <__aeabi_fcmpgt>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <Batt_Protection_when_chargedischarge+0x1f2>
		if(flag_trip_undervoltage==OFF) {
 800675e:	f000 bd14 	b.w	800718a <Batt_Protection_when_chargedischarge+0xc1a>
				HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 8006762:	2201      	movs	r2, #1
 8006764:	2104      	movs	r1, #4
 8006766:	480c      	ldr	r0, [pc, #48]	; (8006798 <Batt_Protection_when_chargedischarge+0x228>)
 8006768:	f002 ff09 	bl	800957e <HAL_GPIO_WritePin>
		if(flag_trip_undervoltage==OFF) {
 800676c:	f000 bd0d 	b.w	800718a <Batt_Protection_when_chargedischarge+0xc1a>
 8006770:	cccccccd 	.word	0xcccccccd
 8006774:	3feccccc 	.word	0x3feccccc
 8006778:	d2f1a9fc 	.word	0xd2f1a9fc
 800677c:	3f50624d 	.word	0x3f50624d
 8006780:	20001058 	.word	0x20001058
 8006784:	2000103c 	.word	0x2000103c
 8006788:	2000104c 	.word	0x2000104c
 800678c:	2000107c 	.word	0x2000107c
 8006790:	20001068 	.word	0x20001068
 8006794:	20000c32 	.word	0x20000c32
 8006798:	40011000 	.word	0x40011000
 800679c:	20000070 	.word	0x20000070
 80067a0:	20001061 	.word	0x20001061
 80067a4:	20000050 	.word	0x20000050
 80067a8:	20001028 	.word	0x20001028
 80067ac:	20001074 	.word	0x20001074
 80067b0:	41700000 	.word	0x41700000
 80067b4:	20000bdc 	.word	0x20000bdc
 80067b8:	10624dd3 	.word	0x10624dd3
 80067bc:	41200000 	.word	0x41200000
 80067c0:	51eb851f 	.word	0x51eb851f
	else if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF)   //Indikasi terjadi Over Current
 80067c4:	4ba8      	ldr	r3, [pc, #672]	; (8006a68 <Batt_Protection_when_chargedischarge+0x4f8>)
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	4ba8      	ldr	r3, [pc, #672]	; (8006a6c <Batt_Protection_when_chargedischarge+0x4fc>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4619      	mov	r1, r3
 80067ce:	4610      	mov	r0, r2
 80067d0:	f7fa f9ae 	bl	8000b30 <__aeabi_fsub>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f04f 0100 	mov.w	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fa fc6e 	bl	80010bc <__aeabi_fcmpgt>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 80c1 	beq.w	800696a <Batt_Protection_when_chargedischarge+0x3fa>
 80067e8:	4ba1      	ldr	r3, [pc, #644]	; (8006a70 <Batt_Protection_when_chargedischarge+0x500>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f040 80bc 	bne.w	800696a <Batt_Protection_when_chargedischarge+0x3fa>
		fault_code=2;
 80067f2:	4ba0      	ldr	r3, [pc, #640]	; (8006a74 <Batt_Protection_when_chargedischarge+0x504>)
 80067f4:	2202      	movs	r2, #2
 80067f6:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=TMS_I_Over/((IBATT/I_Over_Set)-1);
 80067f8:	4b9f      	ldr	r3, [pc, #636]	; (8006a78 <Batt_Protection_when_chargedischarge+0x508>)
 80067fa:	681c      	ldr	r4, [r3, #0]
 80067fc:	4b9a      	ldr	r3, [pc, #616]	; (8006a68 <Batt_Protection_when_chargedischarge+0x4f8>)
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	4b9a      	ldr	r3, [pc, #616]	; (8006a6c <Batt_Protection_when_chargedischarge+0x4fc>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f7fa fb50 	bl	8000eac <__aeabi_fdiv>
 800680c:	4603      	mov	r3, r0
 800680e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006812:	4618      	mov	r0, r3
 8006814:	f7fa f98c 	bl	8000b30 <__aeabi_fsub>
 8006818:	4603      	mov	r3, r0
 800681a:	4619      	mov	r1, r3
 800681c:	4620      	mov	r0, r4
 800681e:	f7fa fb45 	bl	8000eac <__aeabi_fdiv>
 8006822:	4603      	mov	r3, r0
 8006824:	461a      	mov	r2, r3
 8006826:	4b95      	ldr	r3, [pc, #596]	; (8006a7c <Batt_Protection_when_chargedischarge+0x50c>)
 8006828:	601a      	str	r2, [r3, #0]
		T_I_Over_trip_cycle+=0.001;
 800682a:	4b95      	ldr	r3, [pc, #596]	; (8006a80 <Batt_Protection_when_chargedischarge+0x510>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f7f9 fdfa 	bl	8000428 <__aeabi_f2d>
 8006834:	a38a      	add	r3, pc, #552	; (adr r3, 8006a60 <Batt_Protection_when_chargedischarge+0x4f0>)
 8006836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683a:	f7f9 fc97 	bl	800016c <__adddf3>
 800683e:	4603      	mov	r3, r0
 8006840:	460c      	mov	r4, r1
 8006842:	4618      	mov	r0, r3
 8006844:	4621      	mov	r1, r4
 8006846:	f7fa f91f 	bl	8000a88 <__aeabi_d2f>
 800684a:	4602      	mov	r2, r0
 800684c:	4b8c      	ldr	r3, [pc, #560]	; (8006a80 <Batt_Protection_when_chargedischarge+0x510>)
 800684e:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF)
 8006850:	4b8b      	ldr	r3, [pc, #556]	; (8006a80 <Batt_Protection_when_chargedischarge+0x510>)
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	4b89      	ldr	r3, [pc, #548]	; (8006a7c <Batt_Protection_when_chargedischarge+0x50c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4619      	mov	r1, r3
 800685a:	4610      	mov	r0, r2
 800685c:	f7fa fc2e 	bl	80010bc <__aeabi_fcmpgt>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d011      	beq.n	800688a <Batt_Protection_when_chargedischarge+0x31a>
 8006866:	4b82      	ldr	r3, [pc, #520]	; (8006a70 <Batt_Protection_when_chargedischarge+0x500>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10d      	bne.n	800688a <Batt_Protection_when_chargedischarge+0x31a>
			Batt_Open_Mode();
 800686e:	f7fa fda1 	bl	80013b4 <Batt_Open_Mode>
			T_I_Over_trip_cycle=T_I_Over_trip;
 8006872:	4b82      	ldr	r3, [pc, #520]	; (8006a7c <Batt_Protection_when_chargedischarge+0x50c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a82      	ldr	r2, [pc, #520]	; (8006a80 <Batt_Protection_when_chargedischarge+0x510>)
 8006878:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentdischarge=ON;
 800687a:	4b7d      	ldr	r3, [pc, #500]	; (8006a70 <Batt_Protection_when_chargedischarge+0x500>)
 800687c:	2201      	movs	r2, #1
 800687e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8006880:	2200      	movs	r2, #0
 8006882:	2104      	movs	r1, #4
 8006884:	487f      	ldr	r0, [pc, #508]	; (8006a84 <Batt_Protection_when_chargedischarge+0x514>)
 8006886:	f002 fe7a 	bl	800957e <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF)
 800688a:	4b79      	ldr	r3, [pc, #484]	; (8006a70 <Batt_Protection_when_chargedischarge+0x500>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f040 847d 	bne.w	800718e <Batt_Protection_when_chargedischarge+0xc1e>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15)
 8006894:	4b79      	ldr	r3, [pc, #484]	; (8006a7c <Batt_Protection_when_chargedischarge+0x50c>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	4b79      	ldr	r3, [pc, #484]	; (8006a80 <Batt_Protection_when_chargedischarge+0x510>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4619      	mov	r1, r3
 800689e:	4610      	mov	r0, r2
 80068a0:	f7fa f946 	bl	8000b30 <__aeabi_fsub>
 80068a4:	4603      	mov	r3, r0
 80068a6:	4978      	ldr	r1, [pc, #480]	; (8006a88 <Batt_Protection_when_chargedischarge+0x518>)
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fa fc07 	bl	80010bc <__aeabi_fcmpgt>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d018      	beq.n	80068e6 <Batt_Protection_when_chargedischarge+0x376>
				if((test_tim2%1000)==0)
 80068b4:	4b75      	ldr	r3, [pc, #468]	; (8006a8c <Batt_Protection_when_chargedischarge+0x51c>)
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	4b75      	ldr	r3, [pc, #468]	; (8006a90 <Batt_Protection_when_chargedischarge+0x520>)
 80068ba:	fb83 1302 	smull	r1, r3, r3, r2
 80068be:	1199      	asrs	r1, r3, #6
 80068c0:	17d3      	asrs	r3, r2, #31
 80068c2:	1acb      	subs	r3, r1, r3
 80068c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80068c8:	fb01 f303 	mul.w	r3, r1, r3
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f040 845d 	bne.w	800718e <Batt_Protection_when_chargedischarge+0xc1e>
					BUZZ_Toggle;
 80068d4:	2104      	movs	r1, #4
 80068d6:	486b      	ldr	r0, [pc, #428]	; (8006a84 <Batt_Protection_when_chargedischarge+0x514>)
 80068d8:	f002 fe69 	bl	80095ae <HAL_GPIO_TogglePin>
					test_tim2=0;
 80068dc:	4b6b      	ldr	r3, [pc, #428]	; (8006a8c <Batt_Protection_when_chargedischarge+0x51c>)
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF)
 80068e2:	f000 bc54 	b.w	800718e <Batt_Protection_when_chargedischarge+0xc1e>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10)
 80068e6:	4b65      	ldr	r3, [pc, #404]	; (8006a7c <Batt_Protection_when_chargedischarge+0x50c>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	4b65      	ldr	r3, [pc, #404]	; (8006a80 <Batt_Protection_when_chargedischarge+0x510>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4619      	mov	r1, r3
 80068f0:	4610      	mov	r0, r2
 80068f2:	f7fa f91d 	bl	8000b30 <__aeabi_fsub>
 80068f6:	4603      	mov	r3, r0
 80068f8:	4966      	ldr	r1, [pc, #408]	; (8006a94 <Batt_Protection_when_chargedischarge+0x524>)
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fa fbde 	bl	80010bc <__aeabi_fcmpgt>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d017      	beq.n	8006936 <Batt_Protection_when_chargedischarge+0x3c6>
				if((test_tim2%100)==0)
 8006906:	4b61      	ldr	r3, [pc, #388]	; (8006a8c <Batt_Protection_when_chargedischarge+0x51c>)
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	4b63      	ldr	r3, [pc, #396]	; (8006a98 <Batt_Protection_when_chargedischarge+0x528>)
 800690c:	fb83 1302 	smull	r1, r3, r3, r2
 8006910:	1159      	asrs	r1, r3, #5
 8006912:	17d3      	asrs	r3, r2, #31
 8006914:	1acb      	subs	r3, r1, r3
 8006916:	2164      	movs	r1, #100	; 0x64
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	f040 8435 	bne.w	800718e <Batt_Protection_when_chargedischarge+0xc1e>
					BUZZ_Toggle;
 8006924:	2104      	movs	r1, #4
 8006926:	4857      	ldr	r0, [pc, #348]	; (8006a84 <Batt_Protection_when_chargedischarge+0x514>)
 8006928:	f002 fe41 	bl	80095ae <HAL_GPIO_TogglePin>
					test_tim2=0;
 800692c:	4b57      	ldr	r3, [pc, #348]	; (8006a8c <Batt_Protection_when_chargedischarge+0x51c>)
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF)
 8006932:	f000 bc2c 	b.w	800718e <Batt_Protection_when_chargedischarge+0xc1e>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1)
 8006936:	4b51      	ldr	r3, [pc, #324]	; (8006a7c <Batt_Protection_when_chargedischarge+0x50c>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	4b51      	ldr	r3, [pc, #324]	; (8006a80 <Batt_Protection_when_chargedischarge+0x510>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4619      	mov	r1, r3
 8006940:	4610      	mov	r0, r2
 8006942:	f7fa f8f5 	bl	8000b30 <__aeabi_fsub>
 8006946:	4603      	mov	r3, r0
 8006948:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800694c:	4618      	mov	r0, r3
 800694e:	f7fa fbb5 	bl	80010bc <__aeabi_fcmpgt>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <Batt_Protection_when_chargedischarge+0x3ec>
		if(flag_trip_overcurrentdischarge==OFF)
 8006958:	f000 bc19 	b.w	800718e <Batt_Protection_when_chargedischarge+0xc1e>
				HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 800695c:	2201      	movs	r2, #1
 800695e:	2104      	movs	r1, #4
 8006960:	4848      	ldr	r0, [pc, #288]	; (8006a84 <Batt_Protection_when_chargedischarge+0x514>)
 8006962:	f002 fe0c 	bl	800957e <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF)
 8006966:	f000 bc12 	b.w	800718e <Batt_Protection_when_chargedischarge+0xc1e>
	else if(((50-Suhu_T1 < 10)||(85-Suhu_T2 < 10)||(50-Suhu_T3 < 10)||(85-Suhu_T4 < 10)) && flag_trip_overtemperature==OFF)
 800696a:	4b4c      	ldr	r3, [pc, #304]	; (8006a9c <Batt_Protection_when_chargedischarge+0x52c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4619      	mov	r1, r3
 8006970:	484b      	ldr	r0, [pc, #300]	; (8006aa0 <Batt_Protection_when_chargedischarge+0x530>)
 8006972:	f7fa f8dd 	bl	8000b30 <__aeabi_fsub>
 8006976:	4603      	mov	r3, r0
 8006978:	4946      	ldr	r1, [pc, #280]	; (8006a94 <Batt_Protection_when_chargedischarge+0x524>)
 800697a:	4618      	mov	r0, r3
 800697c:	f7fa fb80 	bl	8001080 <__aeabi_fcmplt>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d12a      	bne.n	80069dc <Batt_Protection_when_chargedischarge+0x46c>
 8006986:	4b47      	ldr	r3, [pc, #284]	; (8006aa4 <Batt_Protection_when_chargedischarge+0x534>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4619      	mov	r1, r3
 800698c:	4846      	ldr	r0, [pc, #280]	; (8006aa8 <Batt_Protection_when_chargedischarge+0x538>)
 800698e:	f7fa f8cf 	bl	8000b30 <__aeabi_fsub>
 8006992:	4603      	mov	r3, r0
 8006994:	493f      	ldr	r1, [pc, #252]	; (8006a94 <Batt_Protection_when_chargedischarge+0x524>)
 8006996:	4618      	mov	r0, r3
 8006998:	f7fa fb72 	bl	8001080 <__aeabi_fcmplt>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d11c      	bne.n	80069dc <Batt_Protection_when_chargedischarge+0x46c>
 80069a2:	4b42      	ldr	r3, [pc, #264]	; (8006aac <Batt_Protection_when_chargedischarge+0x53c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4619      	mov	r1, r3
 80069a8:	483d      	ldr	r0, [pc, #244]	; (8006aa0 <Batt_Protection_when_chargedischarge+0x530>)
 80069aa:	f7fa f8c1 	bl	8000b30 <__aeabi_fsub>
 80069ae:	4603      	mov	r3, r0
 80069b0:	4938      	ldr	r1, [pc, #224]	; (8006a94 <Batt_Protection_when_chargedischarge+0x524>)
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fa fb64 	bl	8001080 <__aeabi_fcmplt>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10e      	bne.n	80069dc <Batt_Protection_when_chargedischarge+0x46c>
 80069be:	4b3c      	ldr	r3, [pc, #240]	; (8006ab0 <Batt_Protection_when_chargedischarge+0x540>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4619      	mov	r1, r3
 80069c4:	4838      	ldr	r0, [pc, #224]	; (8006aa8 <Batt_Protection_when_chargedischarge+0x538>)
 80069c6:	f7fa f8b3 	bl	8000b30 <__aeabi_fsub>
 80069ca:	4603      	mov	r3, r0
 80069cc:	4931      	ldr	r1, [pc, #196]	; (8006a94 <Batt_Protection_when_chargedischarge+0x524>)
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fa fb56 	bl	8001080 <__aeabi_fcmplt>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 8111 	beq.w	8006bfe <Batt_Protection_when_chargedischarge+0x68e>
 80069dc:	4b35      	ldr	r3, [pc, #212]	; (8006ab4 <Batt_Protection_when_chargedischarge+0x544>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f040 810c 	bne.w	8006bfe <Batt_Protection_when_chargedischarge+0x68e>
	  fault_code=3;
 80069e6:	4b23      	ldr	r3, [pc, #140]	; (8006a74 <Batt_Protection_when_chargedischarge+0x504>)
 80069e8:	2203      	movs	r2, #3
 80069ea:	701a      	strb	r2, [r3, #0]
	  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 80069ec:	4b32      	ldr	r3, [pc, #200]	; (8006ab8 <Batt_Protection_when_chargedischarge+0x548>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4928      	ldr	r1, [pc, #160]	; (8006a94 <Batt_Protection_when_chargedischarge+0x524>)
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fa f89c 	bl	8000b30 <__aeabi_fsub>
 80069f8:	4603      	mov	r3, r0
 80069fa:	461a      	mov	r2, r3
 80069fc:	4b27      	ldr	r3, [pc, #156]	; (8006a9c <Batt_Protection_when_chargedischarge+0x52c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4619      	mov	r1, r3
 8006a02:	4610      	mov	r0, r2
 8006a04:	f7fa fb3c 	bl	8001080 <__aeabi_fcmplt>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d058      	beq.n	8006ac0 <Batt_Protection_when_chargedischarge+0x550>
 8006a0e:	4b2a      	ldr	r3, [pc, #168]	; (8006ab8 <Batt_Protection_when_chargedischarge+0x548>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	492a      	ldr	r1, [pc, #168]	; (8006abc <Batt_Protection_when_chargedischarge+0x54c>)
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fa f88b 	bl	8000b30 <__aeabi_fsub>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4b1f      	ldr	r3, [pc, #124]	; (8006a9c <Batt_Protection_when_chargedischarge+0x52c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4619      	mov	r1, r3
 8006a24:	4610      	mov	r0, r2
 8006a26:	f7fa fb3f 	bl	80010a8 <__aeabi_fcmpge>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d047      	beq.n	8006ac0 <Batt_Protection_when_chargedischarge+0x550>
		  if((test_tim2%1000)==0)
 8006a30:	4b16      	ldr	r3, [pc, #88]	; (8006a8c <Batt_Protection_when_chargedischarge+0x51c>)
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	4b16      	ldr	r3, [pc, #88]	; (8006a90 <Batt_Protection_when_chargedischarge+0x520>)
 8006a36:	fb83 1302 	smull	r1, r3, r3, r2
 8006a3a:	1199      	asrs	r1, r3, #6
 8006a3c:	17d3      	asrs	r3, r2, #31
 8006a3e:	1acb      	subs	r3, r1, r3
 8006a40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f040 80d6 	bne.w	8006bfc <Batt_Protection_when_chargedischarge+0x68c>
			  BUZZ_Toggle;
 8006a50:	2104      	movs	r1, #4
 8006a52:	480c      	ldr	r0, [pc, #48]	; (8006a84 <Batt_Protection_when_chargedischarge+0x514>)
 8006a54:	f002 fdab 	bl	80095ae <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8006a58:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <Batt_Protection_when_chargedischarge+0x51c>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]
		  if((test_tim2%1000)==0)
 8006a5e:	e0cd      	b.n	8006bfc <Batt_Protection_when_chargedischarge+0x68c>
 8006a60:	d2f1a9fc 	.word	0xd2f1a9fc
 8006a64:	3f50624d 	.word	0x3f50624d
 8006a68:	20001058 	.word	0x20001058
 8006a6c:	20000058 	.word	0x20000058
 8006a70:	20001070 	.word	0x20001070
 8006a74:	20001068 	.word	0x20001068
 8006a78:	20000054 	.word	0x20000054
 8006a7c:	20001024 	.word	0x20001024
 8006a80:	200010a4 	.word	0x200010a4
 8006a84:	40011000 	.word	0x40011000
 8006a88:	41700000 	.word	0x41700000
 8006a8c:	20000bdc 	.word	0x20000bdc
 8006a90:	10624dd3 	.word	0x10624dd3
 8006a94:	41200000 	.word	0x41200000
 8006a98:	51eb851f 	.word	0x51eb851f
 8006a9c:	2000106c 	.word	0x2000106c
 8006aa0:	42480000 	.word	0x42480000
 8006aa4:	200014a8 	.word	0x200014a8
 8006aa8:	42aa0000 	.word	0x42aa0000
 8006aac:	20001040 	.word	0x20001040
 8006ab0:	200010a0 	.word	0x200010a0
 8006ab4:	20001038 	.word	0x20001038
 8006ab8:	20000060 	.word	0x20000060
 8006abc:	40a00000 	.word	0x40a00000
	  else if(Suhu_T1>Temp_Over_Set-5 && Suhu_T1<=Temp_Over_Set-2)
 8006ac0:	4b90      	ldr	r3, [pc, #576]	; (8006d04 <Batt_Protection_when_chargedischarge+0x794>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4990      	ldr	r1, [pc, #576]	; (8006d08 <Batt_Protection_when_chargedischarge+0x798>)
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fa f832 	bl	8000b30 <__aeabi_fsub>
 8006acc:	4603      	mov	r3, r0
 8006ace:	461a      	mov	r2, r3
 8006ad0:	4b8e      	ldr	r3, [pc, #568]	; (8006d0c <Batt_Protection_when_chargedischarge+0x79c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f7fa fad2 	bl	8001080 <__aeabi_fcmplt>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d028      	beq.n	8006b34 <Batt_Protection_when_chargedischarge+0x5c4>
 8006ae2:	4b88      	ldr	r3, [pc, #544]	; (8006d04 <Batt_Protection_when_chargedischarge+0x794>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fa f820 	bl	8000b30 <__aeabi_fsub>
 8006af0:	4603      	mov	r3, r0
 8006af2:	461a      	mov	r2, r3
 8006af4:	4b85      	ldr	r3, [pc, #532]	; (8006d0c <Batt_Protection_when_chargedischarge+0x79c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4619      	mov	r1, r3
 8006afa:	4610      	mov	r0, r2
 8006afc:	f7fa fad4 	bl	80010a8 <__aeabi_fcmpge>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d016      	beq.n	8006b34 <Batt_Protection_when_chargedischarge+0x5c4>
		  if((test_tim2%500)==0)
 8006b06:	4b82      	ldr	r3, [pc, #520]	; (8006d10 <Batt_Protection_when_chargedischarge+0x7a0>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	4b82      	ldr	r3, [pc, #520]	; (8006d14 <Batt_Protection_when_chargedischarge+0x7a4>)
 8006b0c:	fb83 1302 	smull	r1, r3, r3, r2
 8006b10:	1159      	asrs	r1, r3, #5
 8006b12:	17d3      	asrs	r3, r2, #31
 8006b14:	1acb      	subs	r3, r1, r3
 8006b16:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006b1a:	fb01 f303 	mul.w	r3, r1, r3
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d16b      	bne.n	8006bfc <Batt_Protection_when_chargedischarge+0x68c>
			  BUZZ_Toggle;
 8006b24:	2104      	movs	r1, #4
 8006b26:	487c      	ldr	r0, [pc, #496]	; (8006d18 <Batt_Protection_when_chargedischarge+0x7a8>)
 8006b28:	f002 fd41 	bl	80095ae <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8006b2c:	4b78      	ldr	r3, [pc, #480]	; (8006d10 <Batt_Protection_when_chargedischarge+0x7a0>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]
		  if((test_tim2%500)==0)
 8006b32:	e063      	b.n	8006bfc <Batt_Protection_when_chargedischarge+0x68c>
	  else if(Suhu_T1>Temp_Over_Set-2 && Suhu_T1<=Temp_Over_Set)
 8006b34:	4b73      	ldr	r3, [pc, #460]	; (8006d04 <Batt_Protection_when_chargedischarge+0x794>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7f9 fff7 	bl	8000b30 <__aeabi_fsub>
 8006b42:	4603      	mov	r3, r0
 8006b44:	461a      	mov	r2, r3
 8006b46:	4b71      	ldr	r3, [pc, #452]	; (8006d0c <Batt_Protection_when_chargedischarge+0x79c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	f7fa fa97 	bl	8001080 <__aeabi_fcmplt>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d021      	beq.n	8006b9c <Batt_Protection_when_chargedischarge+0x62c>
 8006b58:	4b6c      	ldr	r3, [pc, #432]	; (8006d0c <Batt_Protection_when_chargedischarge+0x79c>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	4b69      	ldr	r3, [pc, #420]	; (8006d04 <Batt_Protection_when_chargedischarge+0x794>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4619      	mov	r1, r3
 8006b62:	4610      	mov	r0, r2
 8006b64:	f7fa fa96 	bl	8001094 <__aeabi_fcmple>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d016      	beq.n	8006b9c <Batt_Protection_when_chargedischarge+0x62c>
		  if((test_tim2%500)==0)
 8006b6e:	4b68      	ldr	r3, [pc, #416]	; (8006d10 <Batt_Protection_when_chargedischarge+0x7a0>)
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b68      	ldr	r3, [pc, #416]	; (8006d14 <Batt_Protection_when_chargedischarge+0x7a4>)
 8006b74:	fb83 1302 	smull	r1, r3, r3, r2
 8006b78:	1159      	asrs	r1, r3, #5
 8006b7a:	17d3      	asrs	r3, r2, #31
 8006b7c:	1acb      	subs	r3, r1, r3
 8006b7e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006b82:	fb01 f303 	mul.w	r3, r1, r3
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d137      	bne.n	8006bfc <Batt_Protection_when_chargedischarge+0x68c>
			  BUZZ_Toggle;
 8006b8c:	2104      	movs	r1, #4
 8006b8e:	4862      	ldr	r0, [pc, #392]	; (8006d18 <Batt_Protection_when_chargedischarge+0x7a8>)
 8006b90:	f002 fd0d 	bl	80095ae <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8006b94:	4b5e      	ldr	r3, [pc, #376]	; (8006d10 <Batt_Protection_when_chargedischarge+0x7a0>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]
		  if((test_tim2%500)==0)
 8006b9a:	e02f      	b.n	8006bfc <Batt_Protection_when_chargedischarge+0x68c>
	  else if(Suhu_T1>50||Suhu_T2>85||Suhu_T3>50||Suhu_T4>85)
 8006b9c:	4b5b      	ldr	r3, [pc, #364]	; (8006d0c <Batt_Protection_when_chargedischarge+0x79c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	495e      	ldr	r1, [pc, #376]	; (8006d1c <Batt_Protection_when_chargedischarge+0x7ac>)
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fa fa8a 	bl	80010bc <__aeabi_fcmpgt>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d11b      	bne.n	8006be6 <Batt_Protection_when_chargedischarge+0x676>
 8006bae:	4b5c      	ldr	r3, [pc, #368]	; (8006d20 <Batt_Protection_when_chargedischarge+0x7b0>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	495c      	ldr	r1, [pc, #368]	; (8006d24 <Batt_Protection_when_chargedischarge+0x7b4>)
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fa fa81 	bl	80010bc <__aeabi_fcmpgt>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d112      	bne.n	8006be6 <Batt_Protection_when_chargedischarge+0x676>
 8006bc0:	4b59      	ldr	r3, [pc, #356]	; (8006d28 <Batt_Protection_when_chargedischarge+0x7b8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4955      	ldr	r1, [pc, #340]	; (8006d1c <Batt_Protection_when_chargedischarge+0x7ac>)
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fa fa78 	bl	80010bc <__aeabi_fcmpgt>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d109      	bne.n	8006be6 <Batt_Protection_when_chargedischarge+0x676>
 8006bd2:	4b56      	ldr	r3, [pc, #344]	; (8006d2c <Batt_Protection_when_chargedischarge+0x7bc>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4953      	ldr	r1, [pc, #332]	; (8006d24 <Batt_Protection_when_chargedischarge+0x7b4>)
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fa fa6f 	bl	80010bc <__aeabi_fcmpgt>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d100      	bne.n	8006be6 <Batt_Protection_when_chargedischarge+0x676>
	  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 8006be4:	e2d4      	b.n	8007190 <Batt_Protection_when_chargedischarge+0xc20>
		  Batt_Open_Mode();
 8006be6:	f7fa fbe5 	bl	80013b4 <Batt_Open_Mode>
		  flag_trip_overtemperature=ON;
 8006bea:	4b51      	ldr	r3, [pc, #324]	; (8006d30 <Batt_Protection_when_chargedischarge+0x7c0>)
 8006bec:	2201      	movs	r2, #1
 8006bee:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2104      	movs	r1, #4
 8006bf4:	4848      	ldr	r0, [pc, #288]	; (8006d18 <Batt_Protection_when_chargedischarge+0x7a8>)
 8006bf6:	f002 fcc2 	bl	800957e <HAL_GPIO_WritePin>
	  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 8006bfa:	e2c9      	b.n	8007190 <Batt_Protection_when_chargedischarge+0xc20>
 8006bfc:	e2c8      	b.n	8007190 <Batt_Protection_when_chargedischarge+0xc20>
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF)
 8006bfe:	4b43      	ldr	r3, [pc, #268]	; (8006d0c <Batt_Protection_when_chargedischarge+0x79c>)
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4b4c      	ldr	r3, [pc, #304]	; (8006d34 <Batt_Protection_when_chargedischarge+0x7c4>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4619      	mov	r1, r3
 8006c08:	4610      	mov	r0, r2
 8006c0a:	f7f9 ff91 	bl	8000b30 <__aeabi_fsub>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	4949      	ldr	r1, [pc, #292]	; (8006d38 <Batt_Protection_when_chargedischarge+0x7c8>)
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fa fa3e 	bl	8001094 <__aeabi_fcmple>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d130      	bne.n	8006c80 <Batt_Protection_when_chargedischarge+0x710>
 8006c1e:	4b40      	ldr	r3, [pc, #256]	; (8006d20 <Batt_Protection_when_chargedischarge+0x7b0>)
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	4b44      	ldr	r3, [pc, #272]	; (8006d34 <Batt_Protection_when_chargedischarge+0x7c4>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4619      	mov	r1, r3
 8006c28:	4610      	mov	r0, r2
 8006c2a:	f7f9 ff81 	bl	8000b30 <__aeabi_fsub>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	4941      	ldr	r1, [pc, #260]	; (8006d38 <Batt_Protection_when_chargedischarge+0x7c8>)
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fa fa2e 	bl	8001094 <__aeabi_fcmple>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d120      	bne.n	8006c80 <Batt_Protection_when_chargedischarge+0x710>
 8006c3e:	4b3a      	ldr	r3, [pc, #232]	; (8006d28 <Batt_Protection_when_chargedischarge+0x7b8>)
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	4b3c      	ldr	r3, [pc, #240]	; (8006d34 <Batt_Protection_when_chargedischarge+0x7c4>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4619      	mov	r1, r3
 8006c48:	4610      	mov	r0, r2
 8006c4a:	f7f9 ff71 	bl	8000b30 <__aeabi_fsub>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	4939      	ldr	r1, [pc, #228]	; (8006d38 <Batt_Protection_when_chargedischarge+0x7c8>)
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fa fa1e 	bl	8001094 <__aeabi_fcmple>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d110      	bne.n	8006c80 <Batt_Protection_when_chargedischarge+0x710>
 8006c5e:	4b33      	ldr	r3, [pc, #204]	; (8006d2c <Batt_Protection_when_chargedischarge+0x7bc>)
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4b34      	ldr	r3, [pc, #208]	; (8006d34 <Batt_Protection_when_chargedischarge+0x7c4>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4619      	mov	r1, r3
 8006c68:	4610      	mov	r0, r2
 8006c6a:	f7f9 ff61 	bl	8000b30 <__aeabi_fsub>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	4931      	ldr	r1, [pc, #196]	; (8006d38 <Batt_Protection_when_chargedischarge+0x7c8>)
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fa fa0e 	bl	8001094 <__aeabi_fcmple>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 8109 	beq.w	8006e92 <Batt_Protection_when_chargedischarge+0x922>
 8006c80:	4b2e      	ldr	r3, [pc, #184]	; (8006d3c <Batt_Protection_when_chargedischarge+0x7cc>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f040 8104 	bne.w	8006e92 <Batt_Protection_when_chargedischarge+0x922>
	  fault_code=4;
 8006c8a:	4b2d      	ldr	r3, [pc, #180]	; (8006d40 <Batt_Protection_when_chargedischarge+0x7d0>)
 8006c8c:	2204      	movs	r2, #4
 8006c8e:	701a      	strb	r2, [r3, #0]
	  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8006c90:	4b28      	ldr	r3, [pc, #160]	; (8006d34 <Batt_Protection_when_chargedischarge+0x7c4>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4928      	ldr	r1, [pc, #160]	; (8006d38 <Batt_Protection_when_chargedischarge+0x7c8>)
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7f9 ff4c 	bl	8000b34 <__addsf3>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	4b1a      	ldr	r3, [pc, #104]	; (8006d0c <Batt_Protection_when_chargedischarge+0x79c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	f7fa f9fe 	bl	80010a8 <__aeabi_fcmpge>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d048      	beq.n	8006d44 <Batt_Protection_when_chargedischarge+0x7d4>
 8006cb2:	4b20      	ldr	r3, [pc, #128]	; (8006d34 <Batt_Protection_when_chargedischarge+0x7c4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4914      	ldr	r1, [pc, #80]	; (8006d08 <Batt_Protection_when_chargedischarge+0x798>)
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7f9 ff3b 	bl	8000b34 <__addsf3>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4b12      	ldr	r3, [pc, #72]	; (8006d0c <Batt_Protection_when_chargedischarge+0x79c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4610      	mov	r0, r2
 8006cca:	f7fa f9d9 	bl	8001080 <__aeabi_fcmplt>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d037      	beq.n	8006d44 <Batt_Protection_when_chargedischarge+0x7d4>
		  if((test_tim2%1000)==0)
 8006cd4:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <Batt_Protection_when_chargedischarge+0x7a0>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	4b0e      	ldr	r3, [pc, #56]	; (8006d14 <Batt_Protection_when_chargedischarge+0x7a4>)
 8006cda:	fb83 1302 	smull	r1, r3, r3, r2
 8006cde:	1199      	asrs	r1, r3, #6
 8006ce0:	17d3      	asrs	r3, r2, #31
 8006ce2:	1acb      	subs	r3, r1, r3
 8006ce4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ce8:	fb01 f303 	mul.w	r3, r1, r3
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f040 80ce 	bne.w	8006e90 <Batt_Protection_when_chargedischarge+0x920>
			  BUZZ_Toggle;
 8006cf4:	2104      	movs	r1, #4
 8006cf6:	4808      	ldr	r0, [pc, #32]	; (8006d18 <Batt_Protection_when_chargedischarge+0x7a8>)
 8006cf8:	f002 fc59 	bl	80095ae <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8006cfc:	4b04      	ldr	r3, [pc, #16]	; (8006d10 <Batt_Protection_when_chargedischarge+0x7a0>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]
		  if((test_tim2%1000)==0)
 8006d02:	e0c5      	b.n	8006e90 <Batt_Protection_when_chargedischarge+0x920>
 8006d04:	20000060 	.word	0x20000060
 8006d08:	40a00000 	.word	0x40a00000
 8006d0c:	2000106c 	.word	0x2000106c
 8006d10:	20000bdc 	.word	0x20000bdc
 8006d14:	10624dd3 	.word	0x10624dd3
 8006d18:	40011000 	.word	0x40011000
 8006d1c:	42480000 	.word	0x42480000
 8006d20:	200014a8 	.word	0x200014a8
 8006d24:	42aa0000 	.word	0x42aa0000
 8006d28:	20001040 	.word	0x20001040
 8006d2c:	200010a0 	.word	0x200010a0
 8006d30:	20001038 	.word	0x20001038
 8006d34:	20000064 	.word	0x20000064
 8006d38:	41200000 	.word	0x41200000
 8006d3c:	20001060 	.word	0x20001060
 8006d40:	20001068 	.word	0x20001068
	  else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2)
 8006d44:	4b9c      	ldr	r3, [pc, #624]	; (8006fb8 <Batt_Protection_when_chargedischarge+0xa48>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	499c      	ldr	r1, [pc, #624]	; (8006fbc <Batt_Protection_when_chargedischarge+0xa4c>)
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7f9 fef2 	bl	8000b34 <__addsf3>
 8006d50:	4603      	mov	r3, r0
 8006d52:	461a      	mov	r2, r3
 8006d54:	4b9a      	ldr	r3, [pc, #616]	; (8006fc0 <Batt_Protection_when_chargedischarge+0xa50>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	f7fa f9a4 	bl	80010a8 <__aeabi_fcmpge>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d028      	beq.n	8006db8 <Batt_Protection_when_chargedischarge+0x848>
 8006d66:	4b94      	ldr	r3, [pc, #592]	; (8006fb8 <Batt_Protection_when_chargedischarge+0xa48>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7f9 fee0 	bl	8000b34 <__addsf3>
 8006d74:	4603      	mov	r3, r0
 8006d76:	461a      	mov	r2, r3
 8006d78:	4b91      	ldr	r3, [pc, #580]	; (8006fc0 <Batt_Protection_when_chargedischarge+0xa50>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	4610      	mov	r0, r2
 8006d80:	f7fa f97e 	bl	8001080 <__aeabi_fcmplt>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d016      	beq.n	8006db8 <Batt_Protection_when_chargedischarge+0x848>
		  if((test_tim2%500)==0)
 8006d8a:	4b8e      	ldr	r3, [pc, #568]	; (8006fc4 <Batt_Protection_when_chargedischarge+0xa54>)
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	4b8e      	ldr	r3, [pc, #568]	; (8006fc8 <Batt_Protection_when_chargedischarge+0xa58>)
 8006d90:	fb83 1302 	smull	r1, r3, r3, r2
 8006d94:	1159      	asrs	r1, r3, #5
 8006d96:	17d3      	asrs	r3, r2, #31
 8006d98:	1acb      	subs	r3, r1, r3
 8006d9a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006d9e:	fb01 f303 	mul.w	r3, r1, r3
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d173      	bne.n	8006e90 <Batt_Protection_when_chargedischarge+0x920>
			  BUZZ_Toggle;
 8006da8:	2104      	movs	r1, #4
 8006daa:	4888      	ldr	r0, [pc, #544]	; (8006fcc <Batt_Protection_when_chargedischarge+0xa5c>)
 8006dac:	f002 fbff 	bl	80095ae <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8006db0:	4b84      	ldr	r3, [pc, #528]	; (8006fc4 <Batt_Protection_when_chargedischarge+0xa54>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
		  if((test_tim2%500)==0)
 8006db6:	e06b      	b.n	8006e90 <Batt_Protection_when_chargedischarge+0x920>
	  else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set)
 8006db8:	4b7f      	ldr	r3, [pc, #508]	; (8006fb8 <Batt_Protection_when_chargedischarge+0xa48>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7f9 feb7 	bl	8000b34 <__addsf3>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4b7d      	ldr	r3, [pc, #500]	; (8006fc0 <Batt_Protection_when_chargedischarge+0xa50>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f7fa f973 	bl	80010bc <__aeabi_fcmpgt>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d021      	beq.n	8006e20 <Batt_Protection_when_chargedischarge+0x8b0>
 8006ddc:	4b78      	ldr	r3, [pc, #480]	; (8006fc0 <Batt_Protection_when_chargedischarge+0xa50>)
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	4b75      	ldr	r3, [pc, #468]	; (8006fb8 <Batt_Protection_when_chargedischarge+0xa48>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4619      	mov	r1, r3
 8006de6:	4610      	mov	r0, r2
 8006de8:	f7fa f95e 	bl	80010a8 <__aeabi_fcmpge>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d016      	beq.n	8006e20 <Batt_Protection_when_chargedischarge+0x8b0>
		  if((test_tim2%500)==0)
 8006df2:	4b74      	ldr	r3, [pc, #464]	; (8006fc4 <Batt_Protection_when_chargedischarge+0xa54>)
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	4b74      	ldr	r3, [pc, #464]	; (8006fc8 <Batt_Protection_when_chargedischarge+0xa58>)
 8006df8:	fb83 1302 	smull	r1, r3, r3, r2
 8006dfc:	1159      	asrs	r1, r3, #5
 8006dfe:	17d3      	asrs	r3, r2, #31
 8006e00:	1acb      	subs	r3, r1, r3
 8006e02:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006e06:	fb01 f303 	mul.w	r3, r1, r3
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d13f      	bne.n	8006e90 <Batt_Protection_when_chargedischarge+0x920>
			  BUZZ_Toggle;
 8006e10:	2104      	movs	r1, #4
 8006e12:	486e      	ldr	r0, [pc, #440]	; (8006fcc <Batt_Protection_when_chargedischarge+0xa5c>)
 8006e14:	f002 fbcb 	bl	80095ae <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8006e18:	4b6a      	ldr	r3, [pc, #424]	; (8006fc4 <Batt_Protection_when_chargedischarge+0xa54>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]
		  if((test_tim2%500)==0)
 8006e1e:	e037      	b.n	8006e90 <Batt_Protection_when_chargedischarge+0x920>
	  else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set)
 8006e20:	4b67      	ldr	r3, [pc, #412]	; (8006fc0 <Batt_Protection_when_chargedischarge+0xa50>)
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	4b64      	ldr	r3, [pc, #400]	; (8006fb8 <Batt_Protection_when_chargedischarge+0xa48>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f7fa f928 	bl	8001080 <__aeabi_fcmplt>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d121      	bne.n	8006e7a <Batt_Protection_when_chargedischarge+0x90a>
 8006e36:	4b66      	ldr	r3, [pc, #408]	; (8006fd0 <Batt_Protection_when_chargedischarge+0xa60>)
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	4b5f      	ldr	r3, [pc, #380]	; (8006fb8 <Batt_Protection_when_chargedischarge+0xa48>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4610      	mov	r0, r2
 8006e42:	f7fa f91d 	bl	8001080 <__aeabi_fcmplt>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d116      	bne.n	8006e7a <Batt_Protection_when_chargedischarge+0x90a>
 8006e4c:	4b61      	ldr	r3, [pc, #388]	; (8006fd4 <Batt_Protection_when_chargedischarge+0xa64>)
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	4b59      	ldr	r3, [pc, #356]	; (8006fb8 <Batt_Protection_when_chargedischarge+0xa48>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4619      	mov	r1, r3
 8006e56:	4610      	mov	r0, r2
 8006e58:	f7fa f912 	bl	8001080 <__aeabi_fcmplt>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10b      	bne.n	8006e7a <Batt_Protection_when_chargedischarge+0x90a>
 8006e62:	4b5d      	ldr	r3, [pc, #372]	; (8006fd8 <Batt_Protection_when_chargedischarge+0xa68>)
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4b54      	ldr	r3, [pc, #336]	; (8006fb8 <Batt_Protection_when_chargedischarge+0xa48>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	f7fa f907 	bl	8001080 <__aeabi_fcmplt>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d100      	bne.n	8006e7a <Batt_Protection_when_chargedischarge+0x90a>
	  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8006e78:	e18a      	b.n	8007190 <Batt_Protection_when_chargedischarge+0xc20>
		  Batt_Open_Mode();
 8006e7a:	f7fa fa9b 	bl	80013b4 <Batt_Open_Mode>
		  flag_trip_undertemperature=ON;
 8006e7e:	4b57      	ldr	r3, [pc, #348]	; (8006fdc <Batt_Protection_when_chargedischarge+0xa6c>)
 8006e80:	2201      	movs	r2, #1
 8006e82:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8006e84:	2200      	movs	r2, #0
 8006e86:	2104      	movs	r1, #4
 8006e88:	4850      	ldr	r0, [pc, #320]	; (8006fcc <Batt_Protection_when_chargedischarge+0xa5c>)
 8006e8a:	f002 fb78 	bl	800957e <HAL_GPIO_WritePin>
	  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8006e8e:	e17f      	b.n	8007190 <Batt_Protection_when_chargedischarge+0xc20>
 8006e90:	e17e      	b.n	8007190 <Batt_Protection_when_chargedischarge+0xc20>
	else if(Pack_SOC-SOC_Under_Set<=10 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE)
 8006e92:	4b53      	ldr	r3, [pc, #332]	; (8006fe0 <Batt_Protection_when_chargedischarge+0xa70>)
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4b53      	ldr	r3, [pc, #332]	; (8006fe4 <Batt_Protection_when_chargedischarge+0xa74>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f7f9 fe47 	bl	8000b30 <__aeabi_fsub>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	4950      	ldr	r1, [pc, #320]	; (8006fe8 <Batt_Protection_when_chargedischarge+0xa78>)
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fa f8f4 	bl	8001094 <__aeabi_fcmple>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80ee 	beq.w	8007090 <Batt_Protection_when_chargedischarge+0xb20>
 8006eb4:	4b4d      	ldr	r3, [pc, #308]	; (8006fec <Batt_Protection_when_chargedischarge+0xa7c>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f040 80e9 	bne.w	8007090 <Batt_Protection_when_chargedischarge+0xb20>
 8006ebe:	4b4c      	ldr	r3, [pc, #304]	; (8006ff0 <Batt_Protection_when_chargedischarge+0xa80>)
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	f040 80e4 	bne.w	8007090 <Batt_Protection_when_chargedischarge+0xb20>
	  fault_code=5;
 8006ec8:	4b4a      	ldr	r3, [pc, #296]	; (8006ff4 <Batt_Protection_when_chargedischarge+0xa84>)
 8006eca:	2205      	movs	r2, #5
 8006ecc:	701a      	strb	r2, [r3, #0]
	  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 8006ece:	4b45      	ldr	r3, [pc, #276]	; (8006fe4 <Batt_Protection_when_chargedischarge+0xa74>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4945      	ldr	r1, [pc, #276]	; (8006fe8 <Batt_Protection_when_chargedischarge+0xa78>)
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7f9 fe2d 	bl	8000b34 <__addsf3>
 8006eda:	4603      	mov	r3, r0
 8006edc:	461a      	mov	r2, r3
 8006ede:	4b40      	ldr	r3, [pc, #256]	; (8006fe0 <Batt_Protection_when_chargedischarge+0xa70>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	f7fa f8df 	bl	80010a8 <__aeabi_fcmpge>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d028      	beq.n	8006f42 <Batt_Protection_when_chargedischarge+0x9d2>
 8006ef0:	4b3c      	ldr	r3, [pc, #240]	; (8006fe4 <Batt_Protection_when_chargedischarge+0xa74>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4931      	ldr	r1, [pc, #196]	; (8006fbc <Batt_Protection_when_chargedischarge+0xa4c>)
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7f9 fe1c 	bl	8000b34 <__addsf3>
 8006efc:	4603      	mov	r3, r0
 8006efe:	461a      	mov	r2, r3
 8006f00:	4b37      	ldr	r3, [pc, #220]	; (8006fe0 <Batt_Protection_when_chargedischarge+0xa70>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4619      	mov	r1, r3
 8006f06:	4610      	mov	r0, r2
 8006f08:	f7fa f8ba 	bl	8001080 <__aeabi_fcmplt>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d017      	beq.n	8006f42 <Batt_Protection_when_chargedischarge+0x9d2>
		  if((test_tim2%1000)==0)
 8006f12:	4b2c      	ldr	r3, [pc, #176]	; (8006fc4 <Batt_Protection_when_chargedischarge+0xa54>)
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	4b2c      	ldr	r3, [pc, #176]	; (8006fc8 <Batt_Protection_when_chargedischarge+0xa58>)
 8006f18:	fb83 1302 	smull	r1, r3, r3, r2
 8006f1c:	1199      	asrs	r1, r3, #6
 8006f1e:	17d3      	asrs	r3, r2, #31
 8006f20:	1acb      	subs	r3, r1, r3
 8006f22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006f26:	fb01 f303 	mul.w	r3, r1, r3
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 80ae 	bne.w	800708e <Batt_Protection_when_chargedischarge+0xb1e>
			  BUZZ_Toggle;
 8006f32:	2104      	movs	r1, #4
 8006f34:	4825      	ldr	r0, [pc, #148]	; (8006fcc <Batt_Protection_when_chargedischarge+0xa5c>)
 8006f36:	f002 fb3a 	bl	80095ae <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8006f3a:	4b22      	ldr	r3, [pc, #136]	; (8006fc4 <Batt_Protection_when_chargedischarge+0xa54>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	601a      	str	r2, [r3, #0]
		  if((test_tim2%1000)==0)
 8006f40:	e0a5      	b.n	800708e <Batt_Protection_when_chargedischarge+0xb1e>
	  else if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+2)
 8006f42:	4b28      	ldr	r3, [pc, #160]	; (8006fe4 <Batt_Protection_when_chargedischarge+0xa74>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	491d      	ldr	r1, [pc, #116]	; (8006fbc <Batt_Protection_when_chargedischarge+0xa4c>)
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7f9 fdf3 	bl	8000b34 <__addsf3>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	461a      	mov	r2, r3
 8006f52:	4b23      	ldr	r3, [pc, #140]	; (8006fe0 <Batt_Protection_when_chargedischarge+0xa70>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4619      	mov	r1, r3
 8006f58:	4610      	mov	r0, r2
 8006f5a:	f7fa f8a5 	bl	80010a8 <__aeabi_fcmpge>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d049      	beq.n	8006ff8 <Batt_Protection_when_chargedischarge+0xa88>
 8006f64:	4b1f      	ldr	r3, [pc, #124]	; (8006fe4 <Batt_Protection_when_chargedischarge+0xa74>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7f9 fde1 	bl	8000b34 <__addsf3>
 8006f72:	4603      	mov	r3, r0
 8006f74:	461a      	mov	r2, r3
 8006f76:	4b1a      	ldr	r3, [pc, #104]	; (8006fe0 <Batt_Protection_when_chargedischarge+0xa70>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	f7fa f87f 	bl	8001080 <__aeabi_fcmplt>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d037      	beq.n	8006ff8 <Batt_Protection_when_chargedischarge+0xa88>
		  if((test_tim2%500)==0)
 8006f88:	4b0e      	ldr	r3, [pc, #56]	; (8006fc4 <Batt_Protection_when_chargedischarge+0xa54>)
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	4b0e      	ldr	r3, [pc, #56]	; (8006fc8 <Batt_Protection_when_chargedischarge+0xa58>)
 8006f8e:	fb83 1302 	smull	r1, r3, r3, r2
 8006f92:	1159      	asrs	r1, r3, #5
 8006f94:	17d3      	asrs	r3, r2, #31
 8006f96:	1acb      	subs	r3, r1, r3
 8006f98:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006f9c:	fb01 f303 	mul.w	r3, r1, r3
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d173      	bne.n	800708e <Batt_Protection_when_chargedischarge+0xb1e>
			  BUZZ_Toggle;
 8006fa6:	2104      	movs	r1, #4
 8006fa8:	4808      	ldr	r0, [pc, #32]	; (8006fcc <Batt_Protection_when_chargedischarge+0xa5c>)
 8006faa:	f002 fb00 	bl	80095ae <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8006fae:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <Batt_Protection_when_chargedischarge+0xa54>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]
		  if((test_tim2%500)==0)
 8006fb4:	e06b      	b.n	800708e <Batt_Protection_when_chargedischarge+0xb1e>
 8006fb6:	bf00      	nop
 8006fb8:	20000064 	.word	0x20000064
 8006fbc:	40a00000 	.word	0x40a00000
 8006fc0:	2000106c 	.word	0x2000106c
 8006fc4:	20000bdc 	.word	0x20000bdc
 8006fc8:	10624dd3 	.word	0x10624dd3
 8006fcc:	40011000 	.word	0x40011000
 8006fd0:	200014a8 	.word	0x200014a8
 8006fd4:	20001040 	.word	0x20001040
 8006fd8:	200010a0 	.word	0x200010a0
 8006fdc:	20001060 	.word	0x20001060
 8006fe0:	20000be4 	.word	0x20000be4
 8006fe4:	20000068 	.word	0x20000068
 8006fe8:	41200000 	.word	0x41200000
 8006fec:	20001094 	.word	0x20001094
 8006ff0:	200009b0 	.word	0x200009b0
 8006ff4:	20001068 	.word	0x20001068
	  else if(Pack_SOC<SOC_Under_Set+2 && Pack_SOC>=SOC_Under_Set)
 8006ff8:	4b69      	ldr	r3, [pc, #420]	; (80071a0 <Batt_Protection_when_chargedischarge+0xc30>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007000:	4618      	mov	r0, r3
 8007002:	f7f9 fd97 	bl	8000b34 <__addsf3>
 8007006:	4603      	mov	r3, r0
 8007008:	461a      	mov	r2, r3
 800700a:	4b66      	ldr	r3, [pc, #408]	; (80071a4 <Batt_Protection_when_chargedischarge+0xc34>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4619      	mov	r1, r3
 8007010:	4610      	mov	r0, r2
 8007012:	f7fa f853 	bl	80010bc <__aeabi_fcmpgt>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d021      	beq.n	8007060 <Batt_Protection_when_chargedischarge+0xaf0>
 800701c:	4b61      	ldr	r3, [pc, #388]	; (80071a4 <Batt_Protection_when_chargedischarge+0xc34>)
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	4b5f      	ldr	r3, [pc, #380]	; (80071a0 <Batt_Protection_when_chargedischarge+0xc30>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4619      	mov	r1, r3
 8007026:	4610      	mov	r0, r2
 8007028:	f7fa f83e 	bl	80010a8 <__aeabi_fcmpge>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d016      	beq.n	8007060 <Batt_Protection_when_chargedischarge+0xaf0>
		  if((test_tim2%500)==0)
 8007032:	4b5d      	ldr	r3, [pc, #372]	; (80071a8 <Batt_Protection_when_chargedischarge+0xc38>)
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	4b5d      	ldr	r3, [pc, #372]	; (80071ac <Batt_Protection_when_chargedischarge+0xc3c>)
 8007038:	fb83 1302 	smull	r1, r3, r3, r2
 800703c:	1159      	asrs	r1, r3, #5
 800703e:	17d3      	asrs	r3, r2, #31
 8007040:	1acb      	subs	r3, r1, r3
 8007042:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007046:	fb01 f303 	mul.w	r3, r1, r3
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d11e      	bne.n	800708e <Batt_Protection_when_chargedischarge+0xb1e>
			  BUZZ_Toggle;
 8007050:	2104      	movs	r1, #4
 8007052:	4857      	ldr	r0, [pc, #348]	; (80071b0 <Batt_Protection_when_chargedischarge+0xc40>)
 8007054:	f002 faab 	bl	80095ae <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8007058:	4b53      	ldr	r3, [pc, #332]	; (80071a8 <Batt_Protection_when_chargedischarge+0xc38>)
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
		  if((test_tim2%500)==0)
 800705e:	e016      	b.n	800708e <Batt_Protection_when_chargedischarge+0xb1e>
	  else if(Pack_SOC<SOC_Under_Set)
 8007060:	4b50      	ldr	r3, [pc, #320]	; (80071a4 <Batt_Protection_when_chargedischarge+0xc34>)
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	4b4e      	ldr	r3, [pc, #312]	; (80071a0 <Batt_Protection_when_chargedischarge+0xc30>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4619      	mov	r1, r3
 800706a:	4610      	mov	r0, r2
 800706c:	f7fa f808 	bl	8001080 <__aeabi_fcmplt>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d100      	bne.n	8007078 <Batt_Protection_when_chargedischarge+0xb08>
	  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 8007076:	e08b      	b.n	8007190 <Batt_Protection_when_chargedischarge+0xc20>
		  Batt_Open_Mode();
 8007078:	f7fa f99c 	bl	80013b4 <Batt_Open_Mode>
		  flag_trip_SOCOverDischarge=ON;
 800707c:	4b4d      	ldr	r3, [pc, #308]	; (80071b4 <Batt_Protection_when_chargedischarge+0xc44>)
 800707e:	2201      	movs	r2, #1
 8007080:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8007082:	2200      	movs	r2, #0
 8007084:	2104      	movs	r1, #4
 8007086:	484a      	ldr	r0, [pc, #296]	; (80071b0 <Batt_Protection_when_chargedischarge+0xc40>)
 8007088:	f002 fa79 	bl	800957e <HAL_GPIO_WritePin>
	  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 800708c:	e080      	b.n	8007190 <Batt_Protection_when_chargedischarge+0xc20>
 800708e:	e07f      	b.n	8007190 <Batt_Protection_when_chargedischarge+0xc20>
	else if(Persen_Imbalance_Set-persen_imbalance<10)
 8007090:	4b49      	ldr	r3, [pc, #292]	; (80071b8 <Batt_Protection_when_chargedischarge+0xc48>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	4b49      	ldr	r3, [pc, #292]	; (80071bc <Batt_Protection_when_chargedischarge+0xc4c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4619      	mov	r1, r3
 800709a:	4610      	mov	r0, r2
 800709c:	f7f9 fd48 	bl	8000b30 <__aeabi_fsub>
 80070a0:	4603      	mov	r3, r0
 80070a2:	4947      	ldr	r1, [pc, #284]	; (80071c0 <Batt_Protection_when_chargedischarge+0xc50>)
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7f9 ffeb 	bl	8001080 <__aeabi_fcmplt>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d014      	beq.n	80070da <Batt_Protection_when_chargedischarge+0xb6a>
	  fault_code=6;
 80070b0:	4b44      	ldr	r3, [pc, #272]	; (80071c4 <Batt_Protection_when_chargedischarge+0xc54>)
 80070b2:	2206      	movs	r2, #6
 80070b4:	701a      	strb	r2, [r3, #0]
	  if(persen_imbalance>Persen_Imbalance_Set)
 80070b6:	4b41      	ldr	r3, [pc, #260]	; (80071bc <Batt_Protection_when_chargedischarge+0xc4c>)
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4b3f      	ldr	r3, [pc, #252]	; (80071b8 <Batt_Protection_when_chargedischarge+0xc48>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4619      	mov	r1, r3
 80070c0:	4610      	mov	r0, r2
 80070c2:	f7f9 fffb 	bl	80010bc <__aeabi_fcmpgt>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d100      	bne.n	80070ce <Batt_Protection_when_chargedischarge+0xb5e>
}
 80070cc:	e060      	b.n	8007190 <Batt_Protection_when_chargedischarge+0xc20>
		flag_trip_unbalance=ON;
 80070ce:	4b3e      	ldr	r3, [pc, #248]	; (80071c8 <Batt_Protection_when_chargedischarge+0xc58>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 80070d4:	f7fa f96e 	bl	80013b4 <Batt_Open_Mode>
}
 80070d8:	e05a      	b.n	8007190 <Batt_Protection_when_chargedischarge+0xc20>
	  if(fault_code!=0) last_fault_code=fault_code;
 80070da:	4b3a      	ldr	r3, [pc, #232]	; (80071c4 <Batt_Protection_when_chargedischarge+0xc54>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <Batt_Protection_when_chargedischarge+0xb7a>
 80070e2:	4b38      	ldr	r3, [pc, #224]	; (80071c4 <Batt_Protection_when_chargedischarge+0xc54>)
 80070e4:	781a      	ldrb	r2, [r3, #0]
 80070e6:	4b39      	ldr	r3, [pc, #228]	; (80071cc <Batt_Protection_when_chargedischarge+0xc5c>)
 80070e8:	701a      	strb	r2, [r3, #0]
	  fault_code=0;
 80070ea:	4b36      	ldr	r3, [pc, #216]	; (80071c4 <Batt_Protection_when_chargedischarge+0xc54>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80070f0:	2200      	movs	r2, #0
 80070f2:	2104      	movs	r1, #4
 80070f4:	482e      	ldr	r0, [pc, #184]	; (80071b0 <Batt_Protection_when_chargedischarge+0xc40>)
 80070f6:	f002 fa42 	bl	800957e <HAL_GPIO_WritePin>
	  T_Under_trip=0;
 80070fa:	4b35      	ldr	r3, [pc, #212]	; (80071d0 <Batt_Protection_when_chargedischarge+0xc60>)
 80070fc:	f04f 0200 	mov.w	r2, #0
 8007100:	601a      	str	r2, [r3, #0]
	  T_trip_cycle=T_trip_cycle-0.001;
 8007102:	4b34      	ldr	r3, [pc, #208]	; (80071d4 <Batt_Protection_when_chargedischarge+0xc64>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4618      	mov	r0, r3
 8007108:	f7f9 f98e 	bl	8000428 <__aeabi_f2d>
 800710c:	a322      	add	r3, pc, #136	; (adr r3, 8007198 <Batt_Protection_when_chargedischarge+0xc28>)
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	f7f9 f829 	bl	8000168 <__aeabi_dsub>
 8007116:	4603      	mov	r3, r0
 8007118:	460c      	mov	r4, r1
 800711a:	4618      	mov	r0, r3
 800711c:	4621      	mov	r1, r4
 800711e:	f7f9 fcb3 	bl	8000a88 <__aeabi_d2f>
 8007122:	4602      	mov	r2, r0
 8007124:	4b2b      	ldr	r3, [pc, #172]	; (80071d4 <Batt_Protection_when_chargedischarge+0xc64>)
 8007126:	601a      	str	r2, [r3, #0]
	  T_I_Over_trip_cycle-=0.001;
 8007128:	4b2b      	ldr	r3, [pc, #172]	; (80071d8 <Batt_Protection_when_chargedischarge+0xc68>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4618      	mov	r0, r3
 800712e:	f7f9 f97b 	bl	8000428 <__aeabi_f2d>
 8007132:	a319      	add	r3, pc, #100	; (adr r3, 8007198 <Batt_Protection_when_chargedischarge+0xc28>)
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	f7f9 f816 	bl	8000168 <__aeabi_dsub>
 800713c:	4603      	mov	r3, r0
 800713e:	460c      	mov	r4, r1
 8007140:	4618      	mov	r0, r3
 8007142:	4621      	mov	r1, r4
 8007144:	f7f9 fca0 	bl	8000a88 <__aeabi_d2f>
 8007148:	4602      	mov	r2, r0
 800714a:	4b23      	ldr	r3, [pc, #140]	; (80071d8 <Batt_Protection_when_chargedischarge+0xc68>)
 800714c:	601a      	str	r2, [r3, #0]
	  if(T_trip_cycle < 0)
 800714e:	4b21      	ldr	r3, [pc, #132]	; (80071d4 <Batt_Protection_when_chargedischarge+0xc64>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f04f 0100 	mov.w	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f7f9 ff92 	bl	8001080 <__aeabi_fcmplt>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <Batt_Protection_when_chargedischarge+0xbfa>
		  T_trip_cycle=0;
 8007162:	4b1c      	ldr	r3, [pc, #112]	; (80071d4 <Batt_Protection_when_chargedischarge+0xc64>)
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	601a      	str	r2, [r3, #0]
	  if(T_I_Over_trip_cycle < 0)
 800716a:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <Batt_Protection_when_chargedischarge+0xc68>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f04f 0100 	mov.w	r1, #0
 8007172:	4618      	mov	r0, r3
 8007174:	f7f9 ff84 	bl	8001080 <__aeabi_fcmplt>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d100      	bne.n	8007180 <Batt_Protection_when_chargedischarge+0xc10>
}
 800717e:	e007      	b.n	8007190 <Batt_Protection_when_chargedischarge+0xc20>
		  T_I_Over_trip_cycle=0;
 8007180:	4b15      	ldr	r3, [pc, #84]	; (80071d8 <Batt_Protection_when_chargedischarge+0xc68>)
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	601a      	str	r2, [r3, #0]
}
 8007188:	e002      	b.n	8007190 <Batt_Protection_when_chargedischarge+0xc20>
		if(flag_trip_undervoltage==OFF) {
 800718a:	bf00      	nop
 800718c:	e000      	b.n	8007190 <Batt_Protection_when_chargedischarge+0xc20>
		if(flag_trip_overcurrentdischarge==OFF)
 800718e:	bf00      	nop
}
 8007190:	bf00      	nop
 8007192:	bdb0      	pop	{r4, r5, r7, pc}
 8007194:	f3af 8000 	nop.w
 8007198:	d2f1a9fc 	.word	0xd2f1a9fc
 800719c:	3f50624d 	.word	0x3f50624d
 80071a0:	20000068 	.word	0x20000068
 80071a4:	20000be4 	.word	0x20000be4
 80071a8:	20000bdc 	.word	0x20000bdc
 80071ac:	10624dd3 	.word	0x10624dd3
 80071b0:	40011000 	.word	0x40011000
 80071b4:	20001094 	.word	0x20001094
 80071b8:	20000078 	.word	0x20000078
 80071bc:	20000bb8 	.word	0x20000bb8
 80071c0:	41200000 	.word	0x41200000
 80071c4:	20001068 	.word	0x20001068
 80071c8:	20000c30 	.word	0x20000c30
 80071cc:	200014a4 	.word	0x200014a4
 80071d0:	20001028 	.word	0x20001028
 80071d4:	20001074 	.word	0x20001074
 80071d8:	200010a4 	.word	0x200010a4

080071dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80071e4:	4b11      	ldr	r3, [pc, #68]	; (800722c <_sbrk+0x50>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d102      	bne.n	80071f2 <_sbrk+0x16>
		heap_end = &end;
 80071ec:	4b0f      	ldr	r3, [pc, #60]	; (800722c <_sbrk+0x50>)
 80071ee:	4a10      	ldr	r2, [pc, #64]	; (8007230 <_sbrk+0x54>)
 80071f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80071f2:	4b0e      	ldr	r3, [pc, #56]	; (800722c <_sbrk+0x50>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80071f8:	4b0c      	ldr	r3, [pc, #48]	; (800722c <_sbrk+0x50>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4413      	add	r3, r2
 8007200:	466a      	mov	r2, sp
 8007202:	4293      	cmp	r3, r2
 8007204:	d907      	bls.n	8007216 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007206:	f004 f943 	bl	800b490 <__errno>
 800720a:	4602      	mov	r2, r0
 800720c:	230c      	movs	r3, #12
 800720e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007210:	f04f 33ff 	mov.w	r3, #4294967295
 8007214:	e006      	b.n	8007224 <_sbrk+0x48>
	}

	heap_end += incr;
 8007216:	4b05      	ldr	r3, [pc, #20]	; (800722c <_sbrk+0x50>)
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	4a03      	ldr	r2, [pc, #12]	; (800722c <_sbrk+0x50>)
 8007220:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007222:	68fb      	ldr	r3, [r7, #12]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	200006a0 	.word	0x200006a0
 8007230:	200015c8 	.word	0x200015c8

08007234 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8007238:	4b15      	ldr	r3, [pc, #84]	; (8007290 <SystemInit+0x5c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a14      	ldr	r2, [pc, #80]	; (8007290 <SystemInit+0x5c>)
 800723e:	f043 0301 	orr.w	r3, r3, #1
 8007242:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8007244:	4b12      	ldr	r3, [pc, #72]	; (8007290 <SystemInit+0x5c>)
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	4911      	ldr	r1, [pc, #68]	; (8007290 <SystemInit+0x5c>)
 800724a:	4b12      	ldr	r3, [pc, #72]	; (8007294 <SystemInit+0x60>)
 800724c:	4013      	ands	r3, r2
 800724e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8007250:	4b0f      	ldr	r3, [pc, #60]	; (8007290 <SystemInit+0x5c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a0e      	ldr	r2, [pc, #56]	; (8007290 <SystemInit+0x5c>)
 8007256:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800725a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800725e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007260:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <SystemInit+0x5c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a0a      	ldr	r2, [pc, #40]	; (8007290 <SystemInit+0x5c>)
 8007266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800726a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800726c:	4b08      	ldr	r3, [pc, #32]	; (8007290 <SystemInit+0x5c>)
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	4a07      	ldr	r2, [pc, #28]	; (8007290 <SystemInit+0x5c>)
 8007272:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007276:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <SystemInit+0x5c>)
 800727a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800727e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007280:	4b05      	ldr	r3, [pc, #20]	; (8007298 <SystemInit+0x64>)
 8007282:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007286:	609a      	str	r2, [r3, #8]
#endif 
}
 8007288:	bf00      	nop
 800728a:	46bd      	mov	sp, r7
 800728c:	bc80      	pop	{r7}
 800728e:	4770      	bx	lr
 8007290:	40021000 	.word	0x40021000
 8007294:	f8ff0000 	.word	0xf8ff0000
 8007298:	e000ed00 	.word	0xe000ed00

0800729c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80072a2:	f107 0308 	add.w	r3, r7, #8
 80072a6:	2200      	movs	r2, #0
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	605a      	str	r2, [r3, #4]
 80072ac:	609a      	str	r2, [r3, #8]
 80072ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80072b0:	463b      	mov	r3, r7
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80072b8:	4b1d      	ldr	r3, [pc, #116]	; (8007330 <MX_TIM2_Init+0x94>)
 80072ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80072be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80072c0:	4b1b      	ldr	r3, [pc, #108]	; (8007330 <MX_TIM2_Init+0x94>)
 80072c2:	223f      	movs	r2, #63	; 0x3f
 80072c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072c6:	4b1a      	ldr	r3, [pc, #104]	; (8007330 <MX_TIM2_Init+0x94>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80072cc:	4b18      	ldr	r3, [pc, #96]	; (8007330 <MX_TIM2_Init+0x94>)
 80072ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80072d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072d4:	4b16      	ldr	r3, [pc, #88]	; (8007330 <MX_TIM2_Init+0x94>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072da:	4b15      	ldr	r3, [pc, #84]	; (8007330 <MX_TIM2_Init+0x94>)
 80072dc:	2200      	movs	r2, #0
 80072de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80072e0:	4813      	ldr	r0, [pc, #76]	; (8007330 <MX_TIM2_Init+0x94>)
 80072e2:	f003 fc03 	bl	800aaec <HAL_TIM_Base_Init>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80072ec:	f7fb fed8 	bl	80030a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80072f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80072f6:	f107 0308 	add.w	r3, r7, #8
 80072fa:	4619      	mov	r1, r3
 80072fc:	480c      	ldr	r0, [pc, #48]	; (8007330 <MX_TIM2_Init+0x94>)
 80072fe:	f003 fd9f 	bl	800ae40 <HAL_TIM_ConfigClockSource>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007308:	f7fb feca 	bl	80030a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800730c:	2300      	movs	r3, #0
 800730e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007310:	2300      	movs	r3, #0
 8007312:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007314:	463b      	mov	r3, r7
 8007316:	4619      	mov	r1, r3
 8007318:	4805      	ldr	r0, [pc, #20]	; (8007330 <MX_TIM2_Init+0x94>)
 800731a:	f003 ff6d 	bl	800b1f8 <HAL_TIMEx_MasterConfigSynchronization>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007324:	f7fb febc 	bl	80030a0 <Error_Handler>
  }

}
 8007328:	bf00      	nop
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	200014f8 	.word	0x200014f8

08007334 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800733a:	f107 0308 	add.w	r3, r7, #8
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]
 8007342:	605a      	str	r2, [r3, #4]
 8007344:	609a      	str	r2, [r3, #8]
 8007346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007348:	463b      	mov	r3, r7
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8007350:	4b1d      	ldr	r3, [pc, #116]	; (80073c8 <MX_TIM3_Init+0x94>)
 8007352:	4a1e      	ldr	r2, [pc, #120]	; (80073cc <MX_TIM3_Init+0x98>)
 8007354:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8007356:	4b1c      	ldr	r3, [pc, #112]	; (80073c8 <MX_TIM3_Init+0x94>)
 8007358:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800735c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800735e:	4b1a      	ldr	r3, [pc, #104]	; (80073c8 <MX_TIM3_Init+0x94>)
 8007360:	2200      	movs	r2, #0
 8007362:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8007364:	4b18      	ldr	r3, [pc, #96]	; (80073c8 <MX_TIM3_Init+0x94>)
 8007366:	2263      	movs	r2, #99	; 0x63
 8007368:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800736a:	4b17      	ldr	r3, [pc, #92]	; (80073c8 <MX_TIM3_Init+0x94>)
 800736c:	2200      	movs	r2, #0
 800736e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007370:	4b15      	ldr	r3, [pc, #84]	; (80073c8 <MX_TIM3_Init+0x94>)
 8007372:	2200      	movs	r2, #0
 8007374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007376:	4814      	ldr	r0, [pc, #80]	; (80073c8 <MX_TIM3_Init+0x94>)
 8007378:	f003 fbb8 	bl	800aaec <HAL_TIM_Base_Init>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8007382:	f7fb fe8d 	bl	80030a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800738a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800738c:	f107 0308 	add.w	r3, r7, #8
 8007390:	4619      	mov	r1, r3
 8007392:	480d      	ldr	r0, [pc, #52]	; (80073c8 <MX_TIM3_Init+0x94>)
 8007394:	f003 fd54 	bl	800ae40 <HAL_TIM_ConfigClockSource>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800739e:	f7fb fe7f 	bl	80030a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073a2:	2300      	movs	r3, #0
 80073a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073a6:	2300      	movs	r3, #0
 80073a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80073aa:	463b      	mov	r3, r7
 80073ac:	4619      	mov	r1, r3
 80073ae:	4806      	ldr	r0, [pc, #24]	; (80073c8 <MX_TIM3_Init+0x94>)
 80073b0:	f003 ff22 	bl	800b1f8 <HAL_TIMEx_MasterConfigSynchronization>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80073ba:	f7fb fe71 	bl	80030a0 <Error_Handler>
  }

}
 80073be:	bf00      	nop
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	200014b0 	.word	0x200014b0
 80073cc:	40000400 	.word	0x40000400

080073d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e0:	d114      	bne.n	800740c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80073e2:	4b19      	ldr	r3, [pc, #100]	; (8007448 <HAL_TIM_Base_MspInit+0x78>)
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	4a18      	ldr	r2, [pc, #96]	; (8007448 <HAL_TIM_Base_MspInit+0x78>)
 80073e8:	f043 0301 	orr.w	r3, r3, #1
 80073ec:	61d3      	str	r3, [r2, #28]
 80073ee:	4b16      	ldr	r3, [pc, #88]	; (8007448 <HAL_TIM_Base_MspInit+0x78>)
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80073fa:	2200      	movs	r2, #0
 80073fc:	2102      	movs	r1, #2
 80073fe:	201c      	movs	r0, #28
 8007400:	f001 fd01 	bl	8008e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007404:	201c      	movs	r0, #28
 8007406:	f001 fd1a 	bl	8008e3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800740a:	e018      	b.n	800743e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a0e      	ldr	r2, [pc, #56]	; (800744c <HAL_TIM_Base_MspInit+0x7c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d113      	bne.n	800743e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007416:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <HAL_TIM_Base_MspInit+0x78>)
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	4a0b      	ldr	r2, [pc, #44]	; (8007448 <HAL_TIM_Base_MspInit+0x78>)
 800741c:	f043 0302 	orr.w	r3, r3, #2
 8007420:	61d3      	str	r3, [r2, #28]
 8007422:	4b09      	ldr	r3, [pc, #36]	; (8007448 <HAL_TIM_Base_MspInit+0x78>)
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	60bb      	str	r3, [r7, #8]
 800742c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800742e:	2200      	movs	r2, #0
 8007430:	2101      	movs	r1, #1
 8007432:	201d      	movs	r0, #29
 8007434:	f001 fce7 	bl	8008e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007438:	201d      	movs	r0, #29
 800743a:	f001 fd00 	bl	8008e3e <HAL_NVIC_EnableIRQ>
}
 800743e:	bf00      	nop
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	40021000 	.word	0x40021000
 800744c:	40000400 	.word	0x40000400

08007450 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007454:	4b11      	ldr	r3, [pc, #68]	; (800749c <MX_USART1_UART_Init+0x4c>)
 8007456:	4a12      	ldr	r2, [pc, #72]	; (80074a0 <MX_USART1_UART_Init+0x50>)
 8007458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800745a:	4b10      	ldr	r3, [pc, #64]	; (800749c <MX_USART1_UART_Init+0x4c>)
 800745c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007462:	4b0e      	ldr	r3, [pc, #56]	; (800749c <MX_USART1_UART_Init+0x4c>)
 8007464:	2200      	movs	r2, #0
 8007466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007468:	4b0c      	ldr	r3, [pc, #48]	; (800749c <MX_USART1_UART_Init+0x4c>)
 800746a:	2200      	movs	r2, #0
 800746c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800746e:	4b0b      	ldr	r3, [pc, #44]	; (800749c <MX_USART1_UART_Init+0x4c>)
 8007470:	2200      	movs	r2, #0
 8007472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007474:	4b09      	ldr	r3, [pc, #36]	; (800749c <MX_USART1_UART_Init+0x4c>)
 8007476:	220c      	movs	r2, #12
 8007478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800747a:	4b08      	ldr	r3, [pc, #32]	; (800749c <MX_USART1_UART_Init+0x4c>)
 800747c:	2200      	movs	r2, #0
 800747e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007480:	4b06      	ldr	r3, [pc, #24]	; (800749c <MX_USART1_UART_Init+0x4c>)
 8007482:	2200      	movs	r2, #0
 8007484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007486:	4805      	ldr	r0, [pc, #20]	; (800749c <MX_USART1_UART_Init+0x4c>)
 8007488:	f003 ff26 	bl	800b2d8 <HAL_UART_Init>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007492:	f7fb fe05 	bl	80030a0 <Error_Handler>
  }

}
 8007496:	bf00      	nop
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	20001580 	.word	0x20001580
 80074a0:	40013800 	.word	0x40013800

080074a4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80074a8:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <MX_USART3_UART_Init+0x4c>)
 80074aa:	4a12      	ldr	r2, [pc, #72]	; (80074f4 <MX_USART3_UART_Init+0x50>)
 80074ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80074ae:	4b10      	ldr	r3, [pc, #64]	; (80074f0 <MX_USART3_UART_Init+0x4c>)
 80074b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80074b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80074b6:	4b0e      	ldr	r3, [pc, #56]	; (80074f0 <MX_USART3_UART_Init+0x4c>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80074bc:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <MX_USART3_UART_Init+0x4c>)
 80074be:	2200      	movs	r2, #0
 80074c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80074c2:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <MX_USART3_UART_Init+0x4c>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80074c8:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <MX_USART3_UART_Init+0x4c>)
 80074ca:	220c      	movs	r2, #12
 80074cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074ce:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <MX_USART3_UART_Init+0x4c>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80074d4:	4b06      	ldr	r3, [pc, #24]	; (80074f0 <MX_USART3_UART_Init+0x4c>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80074da:	4805      	ldr	r0, [pc, #20]	; (80074f0 <MX_USART3_UART_Init+0x4c>)
 80074dc:	f003 fefc 	bl	800b2d8 <HAL_UART_Init>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80074e6:	f7fb fddb 	bl	80030a0 <Error_Handler>
  }

}
 80074ea:	bf00      	nop
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20001540 	.word	0x20001540
 80074f4:	40004800 	.word	0x40004800

080074f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08c      	sub	sp, #48	; 0x30
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007500:	f107 031c 	add.w	r3, r7, #28
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	605a      	str	r2, [r3, #4]
 800750a:	609a      	str	r2, [r3, #8]
 800750c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a41      	ldr	r2, [pc, #260]	; (8007618 <HAL_UART_MspInit+0x120>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d132      	bne.n	800757e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007518:	4b40      	ldr	r3, [pc, #256]	; (800761c <HAL_UART_MspInit+0x124>)
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	4a3f      	ldr	r2, [pc, #252]	; (800761c <HAL_UART_MspInit+0x124>)
 800751e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007522:	6193      	str	r3, [r2, #24]
 8007524:	4b3d      	ldr	r3, [pc, #244]	; (800761c <HAL_UART_MspInit+0x124>)
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007530:	4b3a      	ldr	r3, [pc, #232]	; (800761c <HAL_UART_MspInit+0x124>)
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	4a39      	ldr	r2, [pc, #228]	; (800761c <HAL_UART_MspInit+0x124>)
 8007536:	f043 0304 	orr.w	r3, r3, #4
 800753a:	6193      	str	r3, [r2, #24]
 800753c:	4b37      	ldr	r3, [pc, #220]	; (800761c <HAL_UART_MspInit+0x124>)
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	617b      	str	r3, [r7, #20]
 8007546:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800754c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800754e:	2302      	movs	r3, #2
 8007550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007552:	2303      	movs	r3, #3
 8007554:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007556:	f107 031c 	add.w	r3, r7, #28
 800755a:	4619      	mov	r1, r3
 800755c:	4830      	ldr	r0, [pc, #192]	; (8007620 <HAL_UART_MspInit+0x128>)
 800755e:	f001 fe9d 	bl	800929c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007568:	2300      	movs	r3, #0
 800756a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756c:	2300      	movs	r3, #0
 800756e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007570:	f107 031c 	add.w	r3, r7, #28
 8007574:	4619      	mov	r1, r3
 8007576:	482a      	ldr	r0, [pc, #168]	; (8007620 <HAL_UART_MspInit+0x128>)
 8007578:	f001 fe90 	bl	800929c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800757c:	e048      	b.n	8007610 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a28      	ldr	r2, [pc, #160]	; (8007624 <HAL_UART_MspInit+0x12c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d143      	bne.n	8007610 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007588:	4b24      	ldr	r3, [pc, #144]	; (800761c <HAL_UART_MspInit+0x124>)
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	4a23      	ldr	r2, [pc, #140]	; (800761c <HAL_UART_MspInit+0x124>)
 800758e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007592:	61d3      	str	r3, [r2, #28]
 8007594:	4b21      	ldr	r3, [pc, #132]	; (800761c <HAL_UART_MspInit+0x124>)
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800759c:	613b      	str	r3, [r7, #16]
 800759e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075a0:	4b1e      	ldr	r3, [pc, #120]	; (800761c <HAL_UART_MspInit+0x124>)
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	4a1d      	ldr	r2, [pc, #116]	; (800761c <HAL_UART_MspInit+0x124>)
 80075a6:	f043 0310 	orr.w	r3, r3, #16
 80075aa:	6193      	str	r3, [r2, #24]
 80075ac:	4b1b      	ldr	r3, [pc, #108]	; (800761c <HAL_UART_MspInit+0x124>)
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	f003 0310 	and.w	r3, r3, #16
 80075b4:	60fb      	str	r3, [r7, #12]
 80075b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80075b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075be:	2302      	movs	r3, #2
 80075c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80075c2:	2303      	movs	r3, #3
 80075c4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075c6:	f107 031c 	add.w	r3, r7, #28
 80075ca:	4619      	mov	r1, r3
 80075cc:	4816      	ldr	r0, [pc, #88]	; (8007628 <HAL_UART_MspInit+0x130>)
 80075ce:	f001 fe65 	bl	800929c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80075d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075d8:	2300      	movs	r3, #0
 80075da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075dc:	2300      	movs	r3, #0
 80075de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075e0:	f107 031c 	add.w	r3, r7, #28
 80075e4:	4619      	mov	r1, r3
 80075e6:	4810      	ldr	r0, [pc, #64]	; (8007628 <HAL_UART_MspInit+0x130>)
 80075e8:	f001 fe58 	bl	800929c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80075ec:	4b0f      	ldr	r3, [pc, #60]	; (800762c <HAL_UART_MspInit+0x134>)
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80075f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8007600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	f043 0310 	orr.w	r3, r3, #16
 8007608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800760a:	4a08      	ldr	r2, [pc, #32]	; (800762c <HAL_UART_MspInit+0x134>)
 800760c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760e:	6053      	str	r3, [r2, #4]
}
 8007610:	bf00      	nop
 8007612:	3730      	adds	r7, #48	; 0x30
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	40013800 	.word	0x40013800
 800761c:	40021000 	.word	0x40021000
 8007620:	40010800 	.word	0x40010800
 8007624:	40004800 	.word	0x40004800
 8007628:	40011000 	.word	0x40011000
 800762c:	40010000 	.word	0x40010000

08007630 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007630:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007632:	e003      	b.n	800763c <LoopCopyDataInit>

08007634 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007634:	4b0b      	ldr	r3, [pc, #44]	; (8007664 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007636:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007638:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800763a:	3104      	adds	r1, #4

0800763c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800763c:	480a      	ldr	r0, [pc, #40]	; (8007668 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800763e:	4b0b      	ldr	r3, [pc, #44]	; (800766c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007640:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007642:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007644:	d3f6      	bcc.n	8007634 <CopyDataInit>
  ldr r2, =_sbss
 8007646:	4a0a      	ldr	r2, [pc, #40]	; (8007670 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007648:	e002      	b.n	8007650 <LoopFillZerobss>

0800764a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800764a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800764c:	f842 3b04 	str.w	r3, [r2], #4

08007650 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007650:	4b08      	ldr	r3, [pc, #32]	; (8007674 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007652:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007654:	d3f9      	bcc.n	800764a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007656:	f7ff fded 	bl	8007234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800765a:	f003 ff1f 	bl	800b49c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800765e:	f7fb f81b 	bl	8002698 <main>
  bx lr
 8007662:	4770      	bx	lr
  ldr r3, =_sidata
 8007664:	0800e7fc 	.word	0x0800e7fc
  ldr r0, =_sdata
 8007668:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800766c:	20000264 	.word	0x20000264
  ldr r2, =_sbss
 8007670:	20000264 	.word	0x20000264
  ldr r3, = _ebss
 8007674:	200015c8 	.word	0x200015c8

08007678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007678:	e7fe      	b.n	8007678 <ADC1_2_IRQHandler>
	...

0800767c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007680:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <HAL_Init+0x28>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a07      	ldr	r2, [pc, #28]	; (80076a4 <HAL_Init+0x28>)
 8007686:	f043 0310 	orr.w	r3, r3, #16
 800768a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800768c:	2003      	movs	r0, #3
 800768e:	f001 fbaf 	bl	8008df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007692:	2000      	movs	r0, #0
 8007694:	f000 f808 	bl	80076a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007698:	f7fd f8b4 	bl	8004804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40022000 	.word	0x40022000

080076a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80076b0:	4b12      	ldr	r3, [pc, #72]	; (80076fc <HAL_InitTick+0x54>)
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	4b12      	ldr	r3, [pc, #72]	; (8007700 <HAL_InitTick+0x58>)
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	4619      	mov	r1, r3
 80076ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076be:	fbb3 f3f1 	udiv	r3, r3, r1
 80076c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c6:	4618      	mov	r0, r3
 80076c8:	f001 fbc7 	bl	8008e5a <HAL_SYSTICK_Config>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e00e      	b.n	80076f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b0f      	cmp	r3, #15
 80076da:	d80a      	bhi.n	80076f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80076dc:	2200      	movs	r2, #0
 80076de:	6879      	ldr	r1, [r7, #4]
 80076e0:	f04f 30ff 	mov.w	r0, #4294967295
 80076e4:	f001 fb8f 	bl	8008e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80076e8:	4a06      	ldr	r2, [pc, #24]	; (8007704 <HAL_InitTick+0x5c>)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	e000      	b.n	80076f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000084 	.word	0x20000084
 8007700:	2000008c 	.word	0x2000008c
 8007704:	20000088 	.word	0x20000088

08007708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800770c:	4b05      	ldr	r3, [pc, #20]	; (8007724 <HAL_IncTick+0x1c>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	4b05      	ldr	r3, [pc, #20]	; (8007728 <HAL_IncTick+0x20>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4413      	add	r3, r2
 8007718:	4a03      	ldr	r2, [pc, #12]	; (8007728 <HAL_IncTick+0x20>)
 800771a:	6013      	str	r3, [r2, #0]
}
 800771c:	bf00      	nop
 800771e:	46bd      	mov	sp, r7
 8007720:	bc80      	pop	{r7}
 8007722:	4770      	bx	lr
 8007724:	2000008c 	.word	0x2000008c
 8007728:	200015c0 	.word	0x200015c0

0800772c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
  return uwTick;
 8007730:	4b02      	ldr	r3, [pc, #8]	; (800773c <HAL_GetTick+0x10>)
 8007732:	681b      	ldr	r3, [r3, #0]
}
 8007734:	4618      	mov	r0, r3
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr
 800773c:	200015c0 	.word	0x200015c0

08007740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007748:	f7ff fff0 	bl	800772c <HAL_GetTick>
 800774c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007758:	d005      	beq.n	8007766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800775a:	4b09      	ldr	r3, [pc, #36]	; (8007780 <HAL_Delay+0x40>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	461a      	mov	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4413      	add	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007766:	bf00      	nop
 8007768:	f7ff ffe0 	bl	800772c <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	429a      	cmp	r2, r3
 8007776:	d8f7      	bhi.n	8007768 <HAL_Delay+0x28>
  {
  }
}
 8007778:	bf00      	nop
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	2000008c 	.word	0x2000008c

08007784 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e0be      	b.n	8007924 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d109      	bne.n	80077c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7fa fcce 	bl	8002164 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 faf7 	bl	8007dbc <ADC_ConversionStop_Disable>
 80077ce:	4603      	mov	r3, r0
 80077d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f040 8099 	bne.w	8007912 <HAL_ADC_Init+0x18e>
 80077e0:	7dfb      	ldrb	r3, [r7, #23]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f040 8095 	bne.w	8007912 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80077f0:	f023 0302 	bic.w	r3, r3, #2
 80077f4:	f043 0202 	orr.w	r2, r3, #2
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007804:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7b1b      	ldrb	r3, [r3, #12]
 800780a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800780c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	4313      	orrs	r3, r2
 8007812:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800781c:	d003      	beq.n	8007826 <HAL_ADC_Init+0xa2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d102      	bne.n	800782c <HAL_ADC_Init+0xa8>
 8007826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800782a:	e000      	b.n	800782e <HAL_ADC_Init+0xaa>
 800782c:	2300      	movs	r3, #0
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4313      	orrs	r3, r2
 8007832:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7d1b      	ldrb	r3, [r3, #20]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d119      	bne.n	8007870 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	7b1b      	ldrb	r3, [r3, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d109      	bne.n	8007858 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	3b01      	subs	r3, #1
 800784a:	035a      	lsls	r2, r3, #13
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007854:	613b      	str	r3, [r7, #16]
 8007856:	e00b      	b.n	8007870 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785c:	f043 0220 	orr.w	r2, r3, #32
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	f043 0201 	orr.w	r2, r3, #1
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	430a      	orrs	r2, r1
 8007882:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	4b28      	ldr	r3, [pc, #160]	; (800792c <HAL_ADC_Init+0x1a8>)
 800788c:	4013      	ands	r3, r2
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6812      	ldr	r2, [r2, #0]
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	430b      	orrs	r3, r1
 8007896:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078a0:	d003      	beq.n	80078aa <HAL_ADC_Init+0x126>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d104      	bne.n	80078b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	3b01      	subs	r3, #1
 80078b0:	051b      	lsls	r3, r3, #20
 80078b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	4b18      	ldr	r3, [pc, #96]	; (8007930 <HAL_ADC_Init+0x1ac>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d10b      	bne.n	80078f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e2:	f023 0303 	bic.w	r3, r3, #3
 80078e6:	f043 0201 	orr.w	r2, r3, #1
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80078ee:	e018      	b.n	8007922 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f4:	f023 0312 	bic.w	r3, r3, #18
 80078f8:	f043 0210 	orr.w	r2, r3, #16
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	f043 0201 	orr.w	r2, r3, #1
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007910:	e007      	b.n	8007922 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	f043 0210 	orr.w	r2, r3, #16
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007922:	7dfb      	ldrb	r3, [r7, #23]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	ffe1f7fd 	.word	0xffe1f7fd
 8007930:	ff1f0efe 	.word	0xff1f0efe

08007934 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007940:	2300      	movs	r3, #0
 8007942:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a64      	ldr	r2, [pc, #400]	; (8007adc <HAL_ADC_Start_DMA+0x1a8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d004      	beq.n	8007958 <HAL_ADC_Start_DMA+0x24>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a63      	ldr	r2, [pc, #396]	; (8007ae0 <HAL_ADC_Start_DMA+0x1ac>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d106      	bne.n	8007966 <HAL_ADC_Start_DMA+0x32>
 8007958:	4b60      	ldr	r3, [pc, #384]	; (8007adc <HAL_ADC_Start_DMA+0x1a8>)
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007960:	2b00      	cmp	r3, #0
 8007962:	f040 80b3 	bne.w	8007acc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <HAL_ADC_Start_DMA+0x40>
 8007970:	2302      	movs	r3, #2
 8007972:	e0ae      	b.n	8007ad2 <HAL_ADC_Start_DMA+0x19e>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f000 f9cb 	bl	8007d18 <ADC_Enable>
 8007982:	4603      	mov	r3, r0
 8007984:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007986:	7dfb      	ldrb	r3, [r7, #23]
 8007988:	2b00      	cmp	r3, #0
 800798a:	f040 809a 	bne.w	8007ac2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007992:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007996:	f023 0301 	bic.w	r3, r3, #1
 800799a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a4e      	ldr	r2, [pc, #312]	; (8007ae0 <HAL_ADC_Start_DMA+0x1ac>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d105      	bne.n	80079b8 <HAL_ADC_Start_DMA+0x84>
 80079ac:	4b4b      	ldr	r3, [pc, #300]	; (8007adc <HAL_ADC_Start_DMA+0x1a8>)
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d115      	bne.n	80079e4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d026      	beq.n	8007a20 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80079da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80079e2:	e01d      	b.n	8007a20 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a39      	ldr	r2, [pc, #228]	; (8007adc <HAL_ADC_Start_DMA+0x1a8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d004      	beq.n	8007a04 <HAL_ADC_Start_DMA+0xd0>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a38      	ldr	r2, [pc, #224]	; (8007ae0 <HAL_ADC_Start_DMA+0x1ac>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d10d      	bne.n	8007a20 <HAL_ADC_Start_DMA+0xec>
 8007a04:	4b35      	ldr	r3, [pc, #212]	; (8007adc <HAL_ADC_Start_DMA+0x1a8>)
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d007      	beq.n	8007a20 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007a18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d006      	beq.n	8007a3a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	f023 0206 	bic.w	r2, r3, #6
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a38:	e002      	b.n	8007a40 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	4a25      	ldr	r2, [pc, #148]	; (8007ae4 <HAL_ADC_Start_DMA+0x1b0>)
 8007a4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	4a24      	ldr	r2, [pc, #144]	; (8007ae8 <HAL_ADC_Start_DMA+0x1b4>)
 8007a56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	4a23      	ldr	r2, [pc, #140]	; (8007aec <HAL_ADC_Start_DMA+0x1b8>)
 8007a5e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f06f 0202 	mvn.w	r2, #2
 8007a68:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a78:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6a18      	ldr	r0, [r3, #32]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	334c      	adds	r3, #76	; 0x4c
 8007a84:	4619      	mov	r1, r3
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f001 fa4d 	bl	8008f28 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007a98:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007a9c:	d108      	bne.n	8007ab0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8007aac:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8007aae:	e00f      	b.n	8007ad0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689a      	ldr	r2, [r3, #8]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007abe:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8007ac0:	e006      	b.n	8007ad0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8007aca:	e001      	b.n	8007ad0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	40012400 	.word	0x40012400
 8007ae0:	40012800 	.word	0x40012800
 8007ae4:	08007e31 	.word	0x08007e31
 8007ae8:	08007ead 	.word	0x08007ead
 8007aec:	08007ec9 	.word	0x08007ec9

08007af0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr

08007b02 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bc80      	pop	{r7}
 8007b12:	4770      	bx	lr

08007b14 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr
	...

08007b28 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d101      	bne.n	8007b48 <HAL_ADC_ConfigChannel+0x20>
 8007b44:	2302      	movs	r3, #2
 8007b46:	e0dc      	b.n	8007d02 <HAL_ADC_ConfigChannel+0x1da>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	2b06      	cmp	r3, #6
 8007b56:	d81c      	bhi.n	8007b92 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	3b05      	subs	r3, #5
 8007b6a:	221f      	movs	r2, #31
 8007b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b70:	43db      	mvns	r3, r3
 8007b72:	4019      	ands	r1, r3
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	3b05      	subs	r3, #5
 8007b84:	fa00 f203 	lsl.w	r2, r0, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	635a      	str	r2, [r3, #52]	; 0x34
 8007b90:	e03c      	b.n	8007c0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2b0c      	cmp	r3, #12
 8007b98:	d81c      	bhi.n	8007bd4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	685a      	ldr	r2, [r3, #4]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	3b23      	subs	r3, #35	; 0x23
 8007bac:	221f      	movs	r2, #31
 8007bae:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb2:	43db      	mvns	r3, r3
 8007bb4:	4019      	ands	r1, r3
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	6818      	ldr	r0, [r3, #0]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	3b23      	subs	r3, #35	; 0x23
 8007bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8007bd2:	e01b      	b.n	8007c0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	4613      	mov	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	3b41      	subs	r3, #65	; 0x41
 8007be6:	221f      	movs	r2, #31
 8007be8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bec:	43db      	mvns	r3, r3
 8007bee:	4019      	ands	r1, r3
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	6818      	ldr	r0, [r3, #0]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	3b41      	subs	r3, #65	; 0x41
 8007c00:	fa00 f203 	lsl.w	r2, r0, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b09      	cmp	r3, #9
 8007c12:	d91c      	bls.n	8007c4e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68d9      	ldr	r1, [r3, #12]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	4413      	add	r3, r2
 8007c24:	3b1e      	subs	r3, #30
 8007c26:	2207      	movs	r2, #7
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	4019      	ands	r1, r3
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	6898      	ldr	r0, [r3, #8]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	4413      	add	r3, r2
 8007c3e:	3b1e      	subs	r3, #30
 8007c40:	fa00 f203 	lsl.w	r2, r0, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	60da      	str	r2, [r3, #12]
 8007c4c:	e019      	b.n	8007c82 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6919      	ldr	r1, [r3, #16]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	4413      	add	r3, r2
 8007c5e:	2207      	movs	r2, #7
 8007c60:	fa02 f303 	lsl.w	r3, r2, r3
 8007c64:	43db      	mvns	r3, r3
 8007c66:	4019      	ands	r1, r3
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	6898      	ldr	r0, [r3, #8]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	4613      	mov	r3, r2
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	4413      	add	r3, r2
 8007c76:	fa00 f203 	lsl.w	r2, r0, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b10      	cmp	r3, #16
 8007c88:	d003      	beq.n	8007c92 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007c8e:	2b11      	cmp	r3, #17
 8007c90:	d132      	bne.n	8007cf8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a1d      	ldr	r2, [pc, #116]	; (8007d0c <HAL_ADC_ConfigChannel+0x1e4>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d125      	bne.n	8007ce8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d126      	bne.n	8007cf8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689a      	ldr	r2, [r3, #8]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007cb8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b10      	cmp	r3, #16
 8007cc0:	d11a      	bne.n	8007cf8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007cc2:	4b13      	ldr	r3, [pc, #76]	; (8007d10 <HAL_ADC_ConfigChannel+0x1e8>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a13      	ldr	r2, [pc, #76]	; (8007d14 <HAL_ADC_ConfigChannel+0x1ec>)
 8007cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ccc:	0c9a      	lsrs	r2, r3, #18
 8007cce:	4613      	mov	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007cd8:	e002      	b.n	8007ce0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1f9      	bne.n	8007cda <HAL_ADC_ConfigChannel+0x1b2>
 8007ce6:	e007      	b.n	8007cf8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cec:	f043 0220 	orr.w	r2, r3, #32
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bc80      	pop	{r7}
 8007d0a:	4770      	bx	lr
 8007d0c:	40012400 	.word	0x40012400
 8007d10:	20000084 	.word	0x20000084
 8007d14:	431bde83 	.word	0x431bde83

08007d18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d039      	beq.n	8007daa <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f042 0201 	orr.w	r2, r2, #1
 8007d44:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007d46:	4b1b      	ldr	r3, [pc, #108]	; (8007db4 <ADC_Enable+0x9c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a1b      	ldr	r2, [pc, #108]	; (8007db8 <ADC_Enable+0xa0>)
 8007d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d50:	0c9b      	lsrs	r3, r3, #18
 8007d52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007d54:	e002      	b.n	8007d5c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f9      	bne.n	8007d56 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007d62:	f7ff fce3 	bl	800772c <HAL_GetTick>
 8007d66:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007d68:	e018      	b.n	8007d9c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007d6a:	f7ff fcdf 	bl	800772c <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d911      	bls.n	8007d9c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7c:	f043 0210 	orr.w	r2, r3, #16
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	f043 0201 	orr.w	r2, r3, #1
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e007      	b.n	8007dac <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d1df      	bne.n	8007d6a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20000084 	.word	0x20000084
 8007db8:	431bde83 	.word	0x431bde83

08007dbc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d127      	bne.n	8007e26 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 0201 	bic.w	r2, r2, #1
 8007de4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007de6:	f7ff fca1 	bl	800772c <HAL_GetTick>
 8007dea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007dec:	e014      	b.n	8007e18 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007dee:	f7ff fc9d 	bl	800772c <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d90d      	bls.n	8007e18 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e00:	f043 0210 	orr.w	r2, r3, #16
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0c:	f043 0201 	orr.w	r2, r3, #1
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e007      	b.n	8007e28 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d0e3      	beq.n	8007dee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d127      	bne.n	8007e9a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007e60:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007e64:	d115      	bne.n	8007e92 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d111      	bne.n	8007e92 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d105      	bne.n	8007e92 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8a:	f043 0201 	orr.w	r2, r3, #1
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7ff fe2c 	bl	8007af0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8007e98:	e004      	b.n	8007ea4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	4798      	blx	r3
}
 8007ea4:	bf00      	nop
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7ff fe21 	bl	8007b02 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007ec0:	bf00      	nop
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee6:	f043 0204 	orr.w	r2, r3, #4
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f7ff fe10 	bl	8007b14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007ef4:	bf00      	nop
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e0ed      	b.n	80080ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d102      	bne.n	8007f20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7fa f9c0 	bl	80022a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0202 	bic.w	r2, r2, #2
 8007f2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f30:	f7ff fbfc 	bl	800772c <HAL_GetTick>
 8007f34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007f36:	e012      	b.n	8007f5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007f38:	f7ff fbf8 	bl	800772c <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	2b0a      	cmp	r3, #10
 8007f44:	d90b      	bls.n	8007f5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2205      	movs	r2, #5
 8007f56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e0c5      	b.n	80080ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f003 0302 	and.w	r3, r3, #2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1e5      	bne.n	8007f38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0201 	orr.w	r2, r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f7c:	f7ff fbd6 	bl	800772c <HAL_GetTick>
 8007f80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007f82:	e012      	b.n	8007faa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007f84:	f7ff fbd2 	bl	800772c <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b0a      	cmp	r3, #10
 8007f90:	d90b      	bls.n	8007faa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2205      	movs	r2, #5
 8007fa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e09f      	b.n	80080ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d0e5      	beq.n	8007f84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	7e1b      	ldrb	r3, [r3, #24]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d108      	bne.n	8007fd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	e007      	b.n	8007fe2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	7e5b      	ldrb	r3, [r3, #25]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d108      	bne.n	8007ffc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	e007      	b.n	800800c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800800a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	7e9b      	ldrb	r3, [r3, #26]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d108      	bne.n	8008026 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0220 	orr.w	r2, r2, #32
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	e007      	b.n	8008036 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0220 	bic.w	r2, r2, #32
 8008034:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	7edb      	ldrb	r3, [r3, #27]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d108      	bne.n	8008050 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0210 	bic.w	r2, r2, #16
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	e007      	b.n	8008060 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0210 	orr.w	r2, r2, #16
 800805e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	7f1b      	ldrb	r3, [r3, #28]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d108      	bne.n	800807a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0208 	orr.w	r2, r2, #8
 8008076:	601a      	str	r2, [r3, #0]
 8008078:	e007      	b.n	800808a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0208 	bic.w	r2, r2, #8
 8008088:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	7f5b      	ldrb	r3, [r3, #29]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d108      	bne.n	80080a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f042 0204 	orr.w	r2, r2, #4
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	e007      	b.n	80080b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0204 	bic.w	r2, r2, #4
 80080b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689a      	ldr	r2, [r3, #8]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	431a      	orrs	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	431a      	orrs	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	ea42 0103 	orr.w	r1, r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	1e5a      	subs	r2, r3, #1
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	430a      	orrs	r2, r1
 80080d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b087      	sub	sp, #28
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008108:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800810a:	7cfb      	ldrb	r3, [r7, #19]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d003      	beq.n	8008118 <HAL_CAN_ConfigFilter+0x26>
 8008110:	7cfb      	ldrb	r3, [r7, #19]
 8008112:	2b02      	cmp	r3, #2
 8008114:	f040 80aa 	bne.w	800826c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800811e:	f043 0201 	orr.w	r2, r3, #1
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	f003 031f 	and.w	r3, r3, #31
 8008130:	2201      	movs	r2, #1
 8008132:	fa02 f303 	lsl.w	r3, r2, r3
 8008136:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	43db      	mvns	r3, r3
 8008142:	401a      	ands	r2, r3
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d123      	bne.n	800819a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	43db      	mvns	r3, r3
 800815c:	401a      	ands	r2, r3
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008174:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	3248      	adds	r2, #72	; 0x48
 800817a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800818e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008190:	6979      	ldr	r1, [r7, #20]
 8008192:	3348      	adds	r3, #72	; 0x48
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	440b      	add	r3, r1
 8008198:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d122      	bne.n	80081e8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	431a      	orrs	r2, r3
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80081c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	3248      	adds	r2, #72	; 0x48
 80081c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80081dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80081de:	6979      	ldr	r1, [r7, #20]
 80081e0:	3348      	adds	r3, #72	; 0x48
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	440b      	add	r3, r1
 80081e6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d109      	bne.n	8008204 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	43db      	mvns	r3, r3
 80081fa:	401a      	ands	r2, r3
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8008202:	e007      	b.n	8008214 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	431a      	orrs	r2, r3
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d109      	bne.n	8008230 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	43db      	mvns	r3, r3
 8008226:	401a      	ands	r2, r3
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800822e:	e007      	b.n	8008240 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	431a      	orrs	r2, r3
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d107      	bne.n	8008258 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	431a      	orrs	r2, r3
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800825e:	f023 0201 	bic.w	r2, r3, #1
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	e006      	b.n	800827a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
  }
}
 800827a:	4618      	mov	r0, r3
 800827c:	371c      	adds	r7, #28
 800827e:	46bd      	mov	sp, r7
 8008280:	bc80      	pop	{r7}
 8008282:	4770      	bx	lr

08008284 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b01      	cmp	r3, #1
 8008296:	d12e      	bne.n	80082f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0201 	bic.w	r2, r2, #1
 80082ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80082b0:	f7ff fa3c 	bl	800772c <HAL_GetTick>
 80082b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80082b6:	e012      	b.n	80082de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80082b8:	f7ff fa38 	bl	800772c <HAL_GetTick>
 80082bc:	4602      	mov	r2, r0
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	2b0a      	cmp	r3, #10
 80082c4:	d90b      	bls.n	80082de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2205      	movs	r2, #5
 80082d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e012      	b.n	8008304 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1e5      	bne.n	80082b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	e006      	b.n	8008304 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
  }
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800830c:	b480      	push	{r7}
 800830e:	b089      	sub	sp, #36	; 0x24
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
 8008318:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008320:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800832a:	7ffb      	ldrb	r3, [r7, #31]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d003      	beq.n	8008338 <HAL_CAN_AddTxMessage+0x2c>
 8008330:	7ffb      	ldrb	r3, [r7, #31]
 8008332:	2b02      	cmp	r3, #2
 8008334:	f040 80b8 	bne.w	80084a8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10a      	bne.n	8008358 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008348:	2b00      	cmp	r3, #0
 800834a:	d105      	bne.n	8008358 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 80a0 	beq.w	8008498 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	0e1b      	lsrs	r3, r3, #24
 800835c:	f003 0303 	and.w	r3, r3, #3
 8008360:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2b02      	cmp	r3, #2
 8008366:	d907      	bls.n	8008378 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e09e      	b.n	80084b6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8008378:	2201      	movs	r2, #1
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	409a      	lsls	r2, r3
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10d      	bne.n	80083a6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008394:	68f9      	ldr	r1, [r7, #12]
 8008396:	6809      	ldr	r1, [r1, #0]
 8008398:	431a      	orrs	r2, r3
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	3318      	adds	r3, #24
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	440b      	add	r3, r1
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	e00f      	b.n	80083c6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80083b0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80083b6:	68f9      	ldr	r1, [r7, #12]
 80083b8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80083ba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	3318      	adds	r3, #24
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	440b      	add	r3, r1
 80083c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6819      	ldr	r1, [r3, #0]
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	691a      	ldr	r2, [r3, #16]
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	3318      	adds	r3, #24
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	440b      	add	r3, r1
 80083d6:	3304      	adds	r3, #4
 80083d8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	7d1b      	ldrb	r3, [r3, #20]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d111      	bne.n	8008406 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	3318      	adds	r3, #24
 80083ea:	011b      	lsls	r3, r3, #4
 80083ec:	4413      	add	r3, r2
 80083ee:	3304      	adds	r3, #4
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	6811      	ldr	r1, [r2, #0]
 80083f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	3318      	adds	r3, #24
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	440b      	add	r3, r1
 8008402:	3304      	adds	r3, #4
 8008404:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	3307      	adds	r3, #7
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	061a      	lsls	r2, r3, #24
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3306      	adds	r3, #6
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	041b      	lsls	r3, r3, #16
 8008416:	431a      	orrs	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3305      	adds	r3, #5
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	021b      	lsls	r3, r3, #8
 8008420:	4313      	orrs	r3, r2
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	3204      	adds	r2, #4
 8008426:	7812      	ldrb	r2, [r2, #0]
 8008428:	4610      	mov	r0, r2
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	6811      	ldr	r1, [r2, #0]
 800842e:	ea43 0200 	orr.w	r2, r3, r0
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	011b      	lsls	r3, r3, #4
 8008436:	440b      	add	r3, r1
 8008438:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800843c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3303      	adds	r3, #3
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	061a      	lsls	r2, r3, #24
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3302      	adds	r3, #2
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	041b      	lsls	r3, r3, #16
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3301      	adds	r3, #1
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	021b      	lsls	r3, r3, #8
 8008458:	4313      	orrs	r3, r2
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	7812      	ldrb	r2, [r2, #0]
 800845e:	4610      	mov	r0, r2
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	6811      	ldr	r1, [r2, #0]
 8008464:	ea43 0200 	orr.w	r2, r3, r0
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	011b      	lsls	r3, r3, #4
 800846c:	440b      	add	r3, r1
 800846e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8008472:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	3318      	adds	r3, #24
 800847c:	011b      	lsls	r3, r3, #4
 800847e:	4413      	add	r3, r2
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	6811      	ldr	r1, [r2, #0]
 8008486:	f043 0201 	orr.w	r2, r3, #1
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	3318      	adds	r3, #24
 800848e:	011b      	lsls	r3, r3, #4
 8008490:	440b      	add	r3, r1
 8008492:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	e00e      	b.n	80084b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e006      	b.n	80084b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
  }
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3724      	adds	r7, #36	; 0x24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bc80      	pop	{r7}
 80084be:	4770      	bx	lr

080084c0 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084d0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d002      	beq.n	80084de <HAL_CAN_AbortTxRequest+0x1e>
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d128      	bne.n	8008530 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	f003 0301 	and.w	r3, r3, #1
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d007      	beq.n	80084f8 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689a      	ldr	r2, [r3, #8]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084f6:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d007      	beq.n	8008512 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008510:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	d007      	beq.n	800852c <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689a      	ldr	r2, [r3, #8]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800852a:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	e006      	b.n	800853e <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008534:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
  }
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	bc80      	pop	{r7}
 8008546:	4770      	bx	lr

08008548 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 3020 	ldrb.w	r3, [r3, #32]
 800855a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800855c:	7afb      	ldrb	r3, [r7, #11]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d002      	beq.n	8008568 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8008562:	7afb      	ldrb	r3, [r7, #11]
 8008564:	2b02      	cmp	r3, #2
 8008566:	d11d      	bne.n	80085a4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3301      	adds	r3, #1
 800857a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	3301      	adds	r3, #1
 800858e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3301      	adds	r3, #1
 80085a2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80085a4:	68fb      	ldr	r3, [r7, #12]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bc80      	pop	{r7}
 80085ae:	4770      	bx	lr

080085b0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085c4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80085c6:	7dfb      	ldrb	r3, [r7, #23]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d003      	beq.n	80085d4 <HAL_CAN_GetRxMessage+0x24>
 80085cc:	7dfb      	ldrb	r3, [r7, #23]
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	f040 80f3 	bne.w	80087ba <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10e      	bne.n	80085f8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	f003 0303 	and.w	r3, r3, #3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d116      	bne.n	8008616 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e0e7      	b.n	80087c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	f003 0303 	and.w	r3, r3, #3
 8008602:	2b00      	cmp	r3, #0
 8008604:	d107      	bne.n	8008616 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e0d8      	b.n	80087c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	331b      	adds	r3, #27
 800861e:	011b      	lsls	r3, r3, #4
 8008620:	4413      	add	r3, r2
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0204 	and.w	r2, r3, #4
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10c      	bne.n	800864e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	331b      	adds	r3, #27
 800863c:	011b      	lsls	r3, r3, #4
 800863e:	4413      	add	r3, r2
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	0d5b      	lsrs	r3, r3, #21
 8008644:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	e00b      	b.n	8008666 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	331b      	adds	r3, #27
 8008656:	011b      	lsls	r3, r3, #4
 8008658:	4413      	add	r3, r2
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	08db      	lsrs	r3, r3, #3
 800865e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	331b      	adds	r3, #27
 800866e:	011b      	lsls	r3, r3, #4
 8008670:	4413      	add	r3, r2
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0202 	and.w	r2, r3, #2
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	331b      	adds	r3, #27
 8008684:	011b      	lsls	r3, r3, #4
 8008686:	4413      	add	r3, r2
 8008688:	3304      	adds	r3, #4
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 020f 	and.w	r2, r3, #15
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	331b      	adds	r3, #27
 800869c:	011b      	lsls	r3, r3, #4
 800869e:	4413      	add	r3, r2
 80086a0:	3304      	adds	r3, #4
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	0a1b      	lsrs	r3, r3, #8
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	331b      	adds	r3, #27
 80086b4:	011b      	lsls	r3, r3, #4
 80086b6:	4413      	add	r3, r2
 80086b8:	3304      	adds	r3, #4
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	0c1b      	lsrs	r3, r3, #16
 80086be:	b29a      	uxth	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	011b      	lsls	r3, r3, #4
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	011b      	lsls	r3, r3, #4
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	0a1a      	lsrs	r2, r3, #8
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	3301      	adds	r3, #1
 80086f0:	b2d2      	uxtb	r2, r2
 80086f2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	011b      	lsls	r3, r3, #4
 80086fc:	4413      	add	r3, r2
 80086fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	0c1a      	lsrs	r2, r3, #16
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	3302      	adds	r3, #2
 800870a:	b2d2      	uxtb	r2, r2
 800870c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	011b      	lsls	r3, r3, #4
 8008716:	4413      	add	r3, r2
 8008718:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	0e1a      	lsrs	r2, r3, #24
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	3303      	adds	r3, #3
 8008724:	b2d2      	uxtb	r2, r2
 8008726:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	4413      	add	r3, r2
 8008732:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	3304      	adds	r3, #4
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	4413      	add	r3, r2
 800874a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	0a1a      	lsrs	r2, r3, #8
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	3305      	adds	r3, #5
 8008756:	b2d2      	uxtb	r2, r2
 8008758:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	011b      	lsls	r3, r3, #4
 8008762:	4413      	add	r3, r2
 8008764:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	0c1a      	lsrs	r2, r3, #16
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	3306      	adds	r3, #6
 8008770:	b2d2      	uxtb	r2, r2
 8008772:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	011b      	lsls	r3, r3, #4
 800877c:	4413      	add	r3, r2
 800877e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	0e1a      	lsrs	r2, r3, #24
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	3307      	adds	r3, #7
 800878a:	b2d2      	uxtb	r2, r2
 800878c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d108      	bne.n	80087a6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0220 	orr.w	r2, r2, #32
 80087a2:	60da      	str	r2, [r3, #12]
 80087a4:	e007      	b.n	80087b6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	691a      	ldr	r2, [r3, #16]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f042 0220 	orr.w	r2, r2, #32
 80087b4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	e006      	b.n	80087c8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
  }
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	371c      	adds	r7, #28
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bc80      	pop	{r7}
 80087d0:	4770      	bx	lr

080087d2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b085      	sub	sp, #20
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087e2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d002      	beq.n	80087f0 <HAL_CAN_ActivateNotification+0x1e>
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d109      	bne.n	8008804 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6959      	ldr	r1, [r3, #20]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	430a      	orrs	r2, r1
 80087fe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	e006      	b.n	8008812 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
  }
}
 8008812:	4618      	mov	r0, r3
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	bc80      	pop	{r7}
 800881a:	4770      	bx	lr

0800881c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	; 0x28
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8008824:	2300      	movs	r3, #0
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d07c      	beq.n	800895c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	d023      	beq.n	80088b4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2201      	movs	r2, #1
 8008872:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	f003 0302 	and.w	r3, r3, #2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f97d 	bl	8008b7e <HAL_CAN_TxMailbox0CompleteCallback>
 8008884:	e016      	b.n	80088b4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	f003 0304 	and.w	r3, r3, #4
 800888c:	2b00      	cmp	r3, #0
 800888e:	d004      	beq.n	800889a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008896:	627b      	str	r3, [r7, #36]	; 0x24
 8008898:	e00c      	b.n	80088b4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	f003 0308 	and.w	r3, r3, #8
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d004      	beq.n	80088ae <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088aa:	627b      	str	r3, [r7, #36]	; 0x24
 80088ac:	e002      	b.n	80088b4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f980 	bl	8008bb4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d024      	beq.n	8008908 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f95c 	bl	8008b90 <HAL_CAN_TxMailbox1CompleteCallback>
 80088d8:	e016      	b.n	8008908 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d004      	beq.n	80088ee <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80088ea:	627b      	str	r3, [r7, #36]	; 0x24
 80088ec:	e00c      	b.n	8008908 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d004      	beq.n	8008902 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008900:	e002      	b.n	8008908 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f95f 	bl	8008bc6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d024      	beq.n	800895c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800891a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d003      	beq.n	800892e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f93b 	bl	8008ba2 <HAL_CAN_TxMailbox2CompleteCallback>
 800892c:	e016      	b.n	800895c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d004      	beq.n	8008942 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800893e:	627b      	str	r3, [r7, #36]	; 0x24
 8008940:	e00c      	b.n	800895c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d004      	beq.n	8008956 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
 8008954:	e002      	b.n	800895c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f93e 	bl	8008bd8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	f003 0308 	and.w	r3, r3, #8
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00c      	beq.n	8008980 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	f003 0310 	and.w	r3, r3, #16
 800896c:	2b00      	cmp	r3, #0
 800896e:	d007      	beq.n	8008980 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008976:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2210      	movs	r2, #16
 800897e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	f003 0304 	and.w	r3, r3, #4
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00b      	beq.n	80089a2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f003 0308 	and.w	r3, r3, #8
 8008990:	2b00      	cmp	r3, #0
 8008992:	d006      	beq.n	80089a2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2208      	movs	r2, #8
 800899a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f924 	bl	8008bea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80089a2:	6a3b      	ldr	r3, [r7, #32]
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d009      	beq.n	80089c0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7f9 f99c 	bl	8001cf8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00c      	beq.n	80089e4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f003 0310 	and.w	r3, r3, #16
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d007      	beq.n	80089e4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80089da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2210      	movs	r2, #16
 80089e2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	f003 0320 	and.w	r3, r3, #32
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00b      	beq.n	8008a06 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f003 0308 	and.w	r3, r3, #8
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d006      	beq.n	8008a06 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2208      	movs	r2, #8
 80089fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f904 	bl	8008c0e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	f003 0310 	and.w	r3, r3, #16
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d009      	beq.n	8008a24 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	f003 0303 	and.w	r3, r3, #3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f8ec 	bl	8008bfc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00b      	beq.n	8008a46 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	f003 0310 	and.w	r3, r3, #16
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d006      	beq.n	8008a46 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2210      	movs	r2, #16
 8008a3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f8ed 	bl	8008c20 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00b      	beq.n	8008a68 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	f003 0308 	and.w	r3, r3, #8
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d006      	beq.n	8008a68 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2208      	movs	r2, #8
 8008a60:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f8e5 	bl	8008c32 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d075      	beq.n	8008b5e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d06c      	beq.n	8008b56 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d008      	beq.n	8008a98 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	f043 0301 	orr.w	r3, r3, #1
 8008a96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d008      	beq.n	8008ab4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	f043 0302 	orr.w	r3, r3, #2
 8008ab2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d008      	beq.n	8008ad0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d003      	beq.n	8008ad0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	f043 0304 	orr.w	r3, r3, #4
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d03d      	beq.n	8008b56 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d038      	beq.n	8008b56 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008aea:	2b30      	cmp	r3, #48	; 0x30
 8008aec:	d017      	beq.n	8008b1e <HAL_CAN_IRQHandler+0x302>
 8008aee:	2b30      	cmp	r3, #48	; 0x30
 8008af0:	d804      	bhi.n	8008afc <HAL_CAN_IRQHandler+0x2e0>
 8008af2:	2b10      	cmp	r3, #16
 8008af4:	d009      	beq.n	8008b0a <HAL_CAN_IRQHandler+0x2ee>
 8008af6:	2b20      	cmp	r3, #32
 8008af8:	d00c      	beq.n	8008b14 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8008afa:	e024      	b.n	8008b46 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8008afc:	2b50      	cmp	r3, #80	; 0x50
 8008afe:	d018      	beq.n	8008b32 <HAL_CAN_IRQHandler+0x316>
 8008b00:	2b60      	cmp	r3, #96	; 0x60
 8008b02:	d01b      	beq.n	8008b3c <HAL_CAN_IRQHandler+0x320>
 8008b04:	2b40      	cmp	r3, #64	; 0x40
 8008b06:	d00f      	beq.n	8008b28 <HAL_CAN_IRQHandler+0x30c>
            break;
 8008b08:	e01d      	b.n	8008b46 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	f043 0308 	orr.w	r3, r3, #8
 8008b10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008b12:	e018      	b.n	8008b46 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	f043 0310 	orr.w	r3, r3, #16
 8008b1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008b1c:	e013      	b.n	8008b46 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	f043 0320 	orr.w	r3, r3, #32
 8008b24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008b26:	e00e      	b.n	8008b46 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008b30:	e009      	b.n	8008b46 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008b3a:	e004      	b.n	8008b46 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008b44:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	699a      	ldr	r2, [r3, #24]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008b54:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2204      	movs	r2, #4
 8008b5c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d008      	beq.n	8008b76 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f867 	bl	8008c44 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008b76:	bf00      	nop
 8008b78:	3728      	adds	r7, #40	; 0x28
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bc80      	pop	{r7}
 8008b8e:	4770      	bx	lr

08008b90 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bc80      	pop	{r7}
 8008ba0:	4770      	bx	lr

08008ba2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b083      	sub	sp, #12
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008baa:	bf00      	nop
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bc80      	pop	{r7}
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bc80      	pop	{r7}
 8008bc4:	4770      	bx	lr

08008bc6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b083      	sub	sp, #12
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008bce:	bf00      	nop
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bc80      	pop	{r7}
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bc80      	pop	{r7}
 8008be8:	4770      	bx	lr

08008bea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008bf2:	bf00      	nop
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bc80      	pop	{r7}
 8008bfa:	4770      	bx	lr

08008bfc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bc80      	pop	{r7}
 8008c0c:	4770      	bx	lr

08008c0e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bc80      	pop	{r7}
 8008c1e:	4770      	bx	lr

08008c20 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bc80      	pop	{r7}
 8008c30:	4770      	bx	lr

08008c32 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bc80      	pop	{r7}
 8008c42:	4770      	bx	lr

08008c44 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bc80      	pop	{r7}
 8008c54:	4770      	bx	lr
	...

08008c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f003 0307 	and.w	r3, r3, #7
 8008c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c68:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <__NVIC_SetPriorityGrouping+0x44>)
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008c74:	4013      	ands	r3, r2
 8008c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c8a:	4a04      	ldr	r2, [pc, #16]	; (8008c9c <__NVIC_SetPriorityGrouping+0x44>)
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	60d3      	str	r3, [r2, #12]
}
 8008c90:	bf00      	nop
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bc80      	pop	{r7}
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	e000ed00 	.word	0xe000ed00

08008ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ca4:	4b04      	ldr	r3, [pc, #16]	; (8008cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	0a1b      	lsrs	r3, r3, #8
 8008caa:	f003 0307 	and.w	r3, r3, #7
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bc80      	pop	{r7}
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	e000ed00 	.word	0xe000ed00

08008cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	db0b      	blt.n	8008ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008cce:	79fb      	ldrb	r3, [r7, #7]
 8008cd0:	f003 021f 	and.w	r2, r3, #31
 8008cd4:	4906      	ldr	r1, [pc, #24]	; (8008cf0 <__NVIC_EnableIRQ+0x34>)
 8008cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cda:	095b      	lsrs	r3, r3, #5
 8008cdc:	2001      	movs	r0, #1
 8008cde:	fa00 f202 	lsl.w	r2, r0, r2
 8008ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008ce6:	bf00      	nop
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bc80      	pop	{r7}
 8008cee:	4770      	bx	lr
 8008cf0:	e000e100 	.word	0xe000e100

08008cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	6039      	str	r1, [r7, #0]
 8008cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	db0a      	blt.n	8008d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	490c      	ldr	r1, [pc, #48]	; (8008d40 <__NVIC_SetPriority+0x4c>)
 8008d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d12:	0112      	lsls	r2, r2, #4
 8008d14:	b2d2      	uxtb	r2, r2
 8008d16:	440b      	add	r3, r1
 8008d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008d1c:	e00a      	b.n	8008d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	4908      	ldr	r1, [pc, #32]	; (8008d44 <__NVIC_SetPriority+0x50>)
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	f003 030f 	and.w	r3, r3, #15
 8008d2a:	3b04      	subs	r3, #4
 8008d2c:	0112      	lsls	r2, r2, #4
 8008d2e:	b2d2      	uxtb	r2, r2
 8008d30:	440b      	add	r3, r1
 8008d32:	761a      	strb	r2, [r3, #24]
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bc80      	pop	{r7}
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	e000e100 	.word	0xe000e100
 8008d44:	e000ed00 	.word	0xe000ed00

08008d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b089      	sub	sp, #36	; 0x24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f003 0307 	and.w	r3, r3, #7
 8008d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	f1c3 0307 	rsb	r3, r3, #7
 8008d62:	2b04      	cmp	r3, #4
 8008d64:	bf28      	it	cs
 8008d66:	2304      	movcs	r3, #4
 8008d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	2b06      	cmp	r3, #6
 8008d70:	d902      	bls.n	8008d78 <NVIC_EncodePriority+0x30>
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	3b03      	subs	r3, #3
 8008d76:	e000      	b.n	8008d7a <NVIC_EncodePriority+0x32>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	fa02 f303 	lsl.w	r3, r2, r3
 8008d86:	43da      	mvns	r2, r3
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	401a      	ands	r2, r3
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d90:	f04f 31ff 	mov.w	r1, #4294967295
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9a:	43d9      	mvns	r1, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008da0:	4313      	orrs	r3, r2
         );
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3724      	adds	r7, #36	; 0x24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bc80      	pop	{r7}
 8008daa:	4770      	bx	lr

08008dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008dbc:	d301      	bcc.n	8008dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e00f      	b.n	8008de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008dc2:	4a0a      	ldr	r2, [pc, #40]	; (8008dec <SysTick_Config+0x40>)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008dca:	210f      	movs	r1, #15
 8008dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd0:	f7ff ff90 	bl	8008cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008dd4:	4b05      	ldr	r3, [pc, #20]	; (8008dec <SysTick_Config+0x40>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008dda:	4b04      	ldr	r3, [pc, #16]	; (8008dec <SysTick_Config+0x40>)
 8008ddc:	2207      	movs	r2, #7
 8008dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	e000e010 	.word	0xe000e010

08008df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7ff ff2d 	bl	8008c58 <__NVIC_SetPriorityGrouping>
}
 8008dfe:	bf00      	nop
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b086      	sub	sp, #24
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	60b9      	str	r1, [r7, #8]
 8008e10:	607a      	str	r2, [r7, #4]
 8008e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008e18:	f7ff ff42 	bl	8008ca0 <__NVIC_GetPriorityGrouping>
 8008e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	68b9      	ldr	r1, [r7, #8]
 8008e22:	6978      	ldr	r0, [r7, #20]
 8008e24:	f7ff ff90 	bl	8008d48 <NVIC_EncodePriority>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e2e:	4611      	mov	r1, r2
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7ff ff5f 	bl	8008cf4 <__NVIC_SetPriority>
}
 8008e36:	bf00      	nop
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b082      	sub	sp, #8
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	4603      	mov	r3, r0
 8008e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7ff ff35 	bl	8008cbc <__NVIC_EnableIRQ>
}
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7ff ffa2 	bl	8008dac <SysTick_Config>
 8008e68:	4603      	mov	r3, r0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
	...

08008e74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e043      	b.n	8008f12 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	4b22      	ldr	r3, [pc, #136]	; (8008f1c <HAL_DMA_Init+0xa8>)
 8008e92:	4413      	add	r3, r2
 8008e94:	4a22      	ldr	r2, [pc, #136]	; (8008f20 <HAL_DMA_Init+0xac>)
 8008e96:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9a:	091b      	lsrs	r3, r3, #4
 8008e9c:	009a      	lsls	r2, r3, #2
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a1f      	ldr	r2, [pc, #124]	; (8008f24 <HAL_DMA_Init+0xb0>)
 8008ea6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008ebe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008ec2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ee4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bc80      	pop	{r7}
 8008f1a:	4770      	bx	lr
 8008f1c:	bffdfff8 	.word	0xbffdfff8
 8008f20:	cccccccd 	.word	0xcccccccd
 8008f24:	40020000 	.word	0x40020000

08008f28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
 8008f34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d101      	bne.n	8008f48 <HAL_DMA_Start_IT+0x20>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e04a      	b.n	8008fde <HAL_DMA_Start_IT+0xb6>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d13a      	bne.n	8008fd0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f022 0201 	bic.w	r2, r2, #1
 8008f76:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	68b9      	ldr	r1, [r7, #8]
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f000 f938 	bl	80091f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d008      	beq.n	8008f9e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f042 020e 	orr.w	r2, r2, #14
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	e00f      	b.n	8008fbe <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f022 0204 	bic.w	r2, r2, #4
 8008fac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f042 020a 	orr.w	r2, r2, #10
 8008fbc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f042 0201 	orr.w	r2, r2, #1
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	e005      	b.n	8008fdc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008fd8:	2302      	movs	r3, #2
 8008fda:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009004:	2204      	movs	r2, #4
 8009006:	409a      	lsls	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d04f      	beq.n	80090b0 <HAL_DMA_IRQHandler+0xc8>
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	f003 0304 	and.w	r3, r3, #4
 8009016:	2b00      	cmp	r3, #0
 8009018:	d04a      	beq.n	80090b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0320 	and.w	r3, r3, #32
 8009024:	2b00      	cmp	r3, #0
 8009026:	d107      	bne.n	8009038 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f022 0204 	bic.w	r2, r2, #4
 8009036:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a66      	ldr	r2, [pc, #408]	; (80091d8 <HAL_DMA_IRQHandler+0x1f0>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d029      	beq.n	8009096 <HAL_DMA_IRQHandler+0xae>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a65      	ldr	r2, [pc, #404]	; (80091dc <HAL_DMA_IRQHandler+0x1f4>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d022      	beq.n	8009092 <HAL_DMA_IRQHandler+0xaa>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a63      	ldr	r2, [pc, #396]	; (80091e0 <HAL_DMA_IRQHandler+0x1f8>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d01a      	beq.n	800908c <HAL_DMA_IRQHandler+0xa4>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a62      	ldr	r2, [pc, #392]	; (80091e4 <HAL_DMA_IRQHandler+0x1fc>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d012      	beq.n	8009086 <HAL_DMA_IRQHandler+0x9e>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a60      	ldr	r2, [pc, #384]	; (80091e8 <HAL_DMA_IRQHandler+0x200>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d00a      	beq.n	8009080 <HAL_DMA_IRQHandler+0x98>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a5f      	ldr	r2, [pc, #380]	; (80091ec <HAL_DMA_IRQHandler+0x204>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d102      	bne.n	800907a <HAL_DMA_IRQHandler+0x92>
 8009074:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009078:	e00e      	b.n	8009098 <HAL_DMA_IRQHandler+0xb0>
 800907a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800907e:	e00b      	b.n	8009098 <HAL_DMA_IRQHandler+0xb0>
 8009080:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009084:	e008      	b.n	8009098 <HAL_DMA_IRQHandler+0xb0>
 8009086:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800908a:	e005      	b.n	8009098 <HAL_DMA_IRQHandler+0xb0>
 800908c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009090:	e002      	b.n	8009098 <HAL_DMA_IRQHandler+0xb0>
 8009092:	2340      	movs	r3, #64	; 0x40
 8009094:	e000      	b.n	8009098 <HAL_DMA_IRQHandler+0xb0>
 8009096:	2304      	movs	r3, #4
 8009098:	4a55      	ldr	r2, [pc, #340]	; (80091f0 <HAL_DMA_IRQHandler+0x208>)
 800909a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 8094 	beq.w	80091ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80090ae:	e08e      	b.n	80091ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b4:	2202      	movs	r2, #2
 80090b6:	409a      	lsls	r2, r3
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4013      	ands	r3, r2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d056      	beq.n	800916e <HAL_DMA_IRQHandler+0x186>
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	f003 0302 	and.w	r3, r3, #2
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d051      	beq.n	800916e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0320 	and.w	r3, r3, #32
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10b      	bne.n	80090f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f022 020a 	bic.w	r2, r2, #10
 80090e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a38      	ldr	r2, [pc, #224]	; (80091d8 <HAL_DMA_IRQHandler+0x1f0>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d029      	beq.n	800914e <HAL_DMA_IRQHandler+0x166>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a37      	ldr	r2, [pc, #220]	; (80091dc <HAL_DMA_IRQHandler+0x1f4>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d022      	beq.n	800914a <HAL_DMA_IRQHandler+0x162>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a35      	ldr	r2, [pc, #212]	; (80091e0 <HAL_DMA_IRQHandler+0x1f8>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d01a      	beq.n	8009144 <HAL_DMA_IRQHandler+0x15c>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a34      	ldr	r2, [pc, #208]	; (80091e4 <HAL_DMA_IRQHandler+0x1fc>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d012      	beq.n	800913e <HAL_DMA_IRQHandler+0x156>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a32      	ldr	r2, [pc, #200]	; (80091e8 <HAL_DMA_IRQHandler+0x200>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d00a      	beq.n	8009138 <HAL_DMA_IRQHandler+0x150>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a31      	ldr	r2, [pc, #196]	; (80091ec <HAL_DMA_IRQHandler+0x204>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d102      	bne.n	8009132 <HAL_DMA_IRQHandler+0x14a>
 800912c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009130:	e00e      	b.n	8009150 <HAL_DMA_IRQHandler+0x168>
 8009132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009136:	e00b      	b.n	8009150 <HAL_DMA_IRQHandler+0x168>
 8009138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800913c:	e008      	b.n	8009150 <HAL_DMA_IRQHandler+0x168>
 800913e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009142:	e005      	b.n	8009150 <HAL_DMA_IRQHandler+0x168>
 8009144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009148:	e002      	b.n	8009150 <HAL_DMA_IRQHandler+0x168>
 800914a:	2320      	movs	r3, #32
 800914c:	e000      	b.n	8009150 <HAL_DMA_IRQHandler+0x168>
 800914e:	2302      	movs	r3, #2
 8009150:	4a27      	ldr	r2, [pc, #156]	; (80091f0 <HAL_DMA_IRQHandler+0x208>)
 8009152:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009160:	2b00      	cmp	r3, #0
 8009162:	d034      	beq.n	80091ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800916c:	e02f      	b.n	80091ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009172:	2208      	movs	r2, #8
 8009174:	409a      	lsls	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4013      	ands	r3, r2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d028      	beq.n	80091d0 <HAL_DMA_IRQHandler+0x1e8>
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f003 0308 	and.w	r3, r3, #8
 8009184:	2b00      	cmp	r3, #0
 8009186:	d023      	beq.n	80091d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f022 020e 	bic.w	r2, r2, #14
 8009196:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a0:	2101      	movs	r1, #1
 80091a2:	fa01 f202 	lsl.w	r2, r1, r2
 80091a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d004      	beq.n	80091d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	4798      	blx	r3
    }
  }
  return;
 80091ce:	bf00      	nop
 80091d0:	bf00      	nop
}
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	40020008 	.word	0x40020008
 80091dc:	4002001c 	.word	0x4002001c
 80091e0:	40020030 	.word	0x40020030
 80091e4:	40020044 	.word	0x40020044
 80091e8:	40020058 	.word	0x40020058
 80091ec:	4002006c 	.word	0x4002006c
 80091f0:	40020000 	.word	0x40020000

080091f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920a:	2101      	movs	r1, #1
 800920c:	fa01 f202 	lsl.w	r2, r1, r2
 8009210:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	2b10      	cmp	r3, #16
 8009220:	d108      	bne.n	8009234 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009232:	e007      	b.n	8009244 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	60da      	str	r2, [r3, #12]
}
 8009244:	bf00      	nop
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	bc80      	pop	{r7}
 800924c:	4770      	bx	lr
	...

08009250 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800925a:	4b0d      	ldr	r3, [pc, #52]	; (8009290 <HAL_FLASH_Unlock+0x40>)
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00d      	beq.n	8009282 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009266:	4b0a      	ldr	r3, [pc, #40]	; (8009290 <HAL_FLASH_Unlock+0x40>)
 8009268:	4a0a      	ldr	r2, [pc, #40]	; (8009294 <HAL_FLASH_Unlock+0x44>)
 800926a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800926c:	4b08      	ldr	r3, [pc, #32]	; (8009290 <HAL_FLASH_Unlock+0x40>)
 800926e:	4a0a      	ldr	r2, [pc, #40]	; (8009298 <HAL_FLASH_Unlock+0x48>)
 8009270:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009272:	4b07      	ldr	r3, [pc, #28]	; (8009290 <HAL_FLASH_Unlock+0x40>)
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8009282:	79fb      	ldrb	r3, [r7, #7]
}
 8009284:	4618      	mov	r0, r3
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	bc80      	pop	{r7}
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	40022000 	.word	0x40022000
 8009294:	45670123 	.word	0x45670123
 8009298:	cdef89ab 	.word	0xcdef89ab

0800929c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800929c:	b480      	push	{r7}
 800929e:	b08b      	sub	sp, #44	; 0x2c
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80092a6:	2300      	movs	r3, #0
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80092aa:	2300      	movs	r3, #0
 80092ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80092ae:	e127      	b.n	8009500 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80092b0:	2201      	movs	r2, #1
 80092b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b4:	fa02 f303 	lsl.w	r3, r2, r3
 80092b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	69fa      	ldr	r2, [r7, #28]
 80092c0:	4013      	ands	r3, r2
 80092c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80092c4:	69ba      	ldr	r2, [r7, #24]
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	f040 8116 	bne.w	80094fa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	2b12      	cmp	r3, #18
 80092d4:	d034      	beq.n	8009340 <HAL_GPIO_Init+0xa4>
 80092d6:	2b12      	cmp	r3, #18
 80092d8:	d80d      	bhi.n	80092f6 <HAL_GPIO_Init+0x5a>
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d02b      	beq.n	8009336 <HAL_GPIO_Init+0x9a>
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d804      	bhi.n	80092ec <HAL_GPIO_Init+0x50>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d031      	beq.n	800934a <HAL_GPIO_Init+0xae>
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d01c      	beq.n	8009324 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80092ea:	e048      	b.n	800937e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d043      	beq.n	8009378 <HAL_GPIO_Init+0xdc>
 80092f0:	2b11      	cmp	r3, #17
 80092f2:	d01b      	beq.n	800932c <HAL_GPIO_Init+0x90>
          break;
 80092f4:	e043      	b.n	800937e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80092f6:	4a89      	ldr	r2, [pc, #548]	; (800951c <HAL_GPIO_Init+0x280>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d026      	beq.n	800934a <HAL_GPIO_Init+0xae>
 80092fc:	4a87      	ldr	r2, [pc, #540]	; (800951c <HAL_GPIO_Init+0x280>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d806      	bhi.n	8009310 <HAL_GPIO_Init+0x74>
 8009302:	4a87      	ldr	r2, [pc, #540]	; (8009520 <HAL_GPIO_Init+0x284>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d020      	beq.n	800934a <HAL_GPIO_Init+0xae>
 8009308:	4a86      	ldr	r2, [pc, #536]	; (8009524 <HAL_GPIO_Init+0x288>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d01d      	beq.n	800934a <HAL_GPIO_Init+0xae>
          break;
 800930e:	e036      	b.n	800937e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8009310:	4a85      	ldr	r2, [pc, #532]	; (8009528 <HAL_GPIO_Init+0x28c>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d019      	beq.n	800934a <HAL_GPIO_Init+0xae>
 8009316:	4a85      	ldr	r2, [pc, #532]	; (800952c <HAL_GPIO_Init+0x290>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d016      	beq.n	800934a <HAL_GPIO_Init+0xae>
 800931c:	4a84      	ldr	r2, [pc, #528]	; (8009530 <HAL_GPIO_Init+0x294>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d013      	beq.n	800934a <HAL_GPIO_Init+0xae>
          break;
 8009322:	e02c      	b.n	800937e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	623b      	str	r3, [r7, #32]
          break;
 800932a:	e028      	b.n	800937e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	3304      	adds	r3, #4
 8009332:	623b      	str	r3, [r7, #32]
          break;
 8009334:	e023      	b.n	800937e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	3308      	adds	r3, #8
 800933c:	623b      	str	r3, [r7, #32]
          break;
 800933e:	e01e      	b.n	800937e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	330c      	adds	r3, #12
 8009346:	623b      	str	r3, [r7, #32]
          break;
 8009348:	e019      	b.n	800937e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d102      	bne.n	8009358 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009352:	2304      	movs	r3, #4
 8009354:	623b      	str	r3, [r7, #32]
          break;
 8009356:	e012      	b.n	800937e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d105      	bne.n	800936c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009360:	2308      	movs	r3, #8
 8009362:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	69fa      	ldr	r2, [r7, #28]
 8009368:	611a      	str	r2, [r3, #16]
          break;
 800936a:	e008      	b.n	800937e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800936c:	2308      	movs	r3, #8
 800936e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	69fa      	ldr	r2, [r7, #28]
 8009374:	615a      	str	r2, [r3, #20]
          break;
 8009376:	e002      	b.n	800937e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009378:	2300      	movs	r3, #0
 800937a:	623b      	str	r3, [r7, #32]
          break;
 800937c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	2bff      	cmp	r3, #255	; 0xff
 8009382:	d801      	bhi.n	8009388 <HAL_GPIO_Init+0xec>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	e001      	b.n	800938c <HAL_GPIO_Init+0xf0>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	3304      	adds	r3, #4
 800938c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	2bff      	cmp	r3, #255	; 0xff
 8009392:	d802      	bhi.n	800939a <HAL_GPIO_Init+0xfe>
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	e002      	b.n	80093a0 <HAL_GPIO_Init+0x104>
 800939a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939c:	3b08      	subs	r3, #8
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	210f      	movs	r1, #15
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	fa01 f303 	lsl.w	r3, r1, r3
 80093ae:	43db      	mvns	r3, r3
 80093b0:	401a      	ands	r2, r3
 80093b2:	6a39      	ldr	r1, [r7, #32]
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	fa01 f303 	lsl.w	r3, r1, r3
 80093ba:	431a      	orrs	r2, r3
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 8096 	beq.w	80094fa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80093ce:	4b59      	ldr	r3, [pc, #356]	; (8009534 <HAL_GPIO_Init+0x298>)
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	4a58      	ldr	r2, [pc, #352]	; (8009534 <HAL_GPIO_Init+0x298>)
 80093d4:	f043 0301 	orr.w	r3, r3, #1
 80093d8:	6193      	str	r3, [r2, #24]
 80093da:	4b56      	ldr	r3, [pc, #344]	; (8009534 <HAL_GPIO_Init+0x298>)
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	60bb      	str	r3, [r7, #8]
 80093e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80093e6:	4a54      	ldr	r2, [pc, #336]	; (8009538 <HAL_GPIO_Init+0x29c>)
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	089b      	lsrs	r3, r3, #2
 80093ec:	3302      	adds	r3, #2
 80093ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093f2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	f003 0303 	and.w	r3, r3, #3
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	220f      	movs	r2, #15
 80093fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009402:	43db      	mvns	r3, r3
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	4013      	ands	r3, r2
 8009408:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a4b      	ldr	r2, [pc, #300]	; (800953c <HAL_GPIO_Init+0x2a0>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d013      	beq.n	800943a <HAL_GPIO_Init+0x19e>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a4a      	ldr	r2, [pc, #296]	; (8009540 <HAL_GPIO_Init+0x2a4>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d00d      	beq.n	8009436 <HAL_GPIO_Init+0x19a>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a49      	ldr	r2, [pc, #292]	; (8009544 <HAL_GPIO_Init+0x2a8>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d007      	beq.n	8009432 <HAL_GPIO_Init+0x196>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a48      	ldr	r2, [pc, #288]	; (8009548 <HAL_GPIO_Init+0x2ac>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d101      	bne.n	800942e <HAL_GPIO_Init+0x192>
 800942a:	2303      	movs	r3, #3
 800942c:	e006      	b.n	800943c <HAL_GPIO_Init+0x1a0>
 800942e:	2304      	movs	r3, #4
 8009430:	e004      	b.n	800943c <HAL_GPIO_Init+0x1a0>
 8009432:	2302      	movs	r3, #2
 8009434:	e002      	b.n	800943c <HAL_GPIO_Init+0x1a0>
 8009436:	2301      	movs	r3, #1
 8009438:	e000      	b.n	800943c <HAL_GPIO_Init+0x1a0>
 800943a:	2300      	movs	r3, #0
 800943c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800943e:	f002 0203 	and.w	r2, r2, #3
 8009442:	0092      	lsls	r2, r2, #2
 8009444:	4093      	lsls	r3, r2
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	4313      	orrs	r3, r2
 800944a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800944c:	493a      	ldr	r1, [pc, #232]	; (8009538 <HAL_GPIO_Init+0x29c>)
 800944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009450:	089b      	lsrs	r3, r3, #2
 8009452:	3302      	adds	r3, #2
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d006      	beq.n	8009474 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009466:	4b39      	ldr	r3, [pc, #228]	; (800954c <HAL_GPIO_Init+0x2b0>)
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	4938      	ldr	r1, [pc, #224]	; (800954c <HAL_GPIO_Init+0x2b0>)
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	4313      	orrs	r3, r2
 8009470:	600b      	str	r3, [r1, #0]
 8009472:	e006      	b.n	8009482 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009474:	4b35      	ldr	r3, [pc, #212]	; (800954c <HAL_GPIO_Init+0x2b0>)
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	43db      	mvns	r3, r3
 800947c:	4933      	ldr	r1, [pc, #204]	; (800954c <HAL_GPIO_Init+0x2b0>)
 800947e:	4013      	ands	r3, r2
 8009480:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d006      	beq.n	800949c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800948e:	4b2f      	ldr	r3, [pc, #188]	; (800954c <HAL_GPIO_Init+0x2b0>)
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	492e      	ldr	r1, [pc, #184]	; (800954c <HAL_GPIO_Init+0x2b0>)
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	4313      	orrs	r3, r2
 8009498:	604b      	str	r3, [r1, #4]
 800949a:	e006      	b.n	80094aa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800949c:	4b2b      	ldr	r3, [pc, #172]	; (800954c <HAL_GPIO_Init+0x2b0>)
 800949e:	685a      	ldr	r2, [r3, #4]
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	43db      	mvns	r3, r3
 80094a4:	4929      	ldr	r1, [pc, #164]	; (800954c <HAL_GPIO_Init+0x2b0>)
 80094a6:	4013      	ands	r3, r2
 80094a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d006      	beq.n	80094c4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80094b6:	4b25      	ldr	r3, [pc, #148]	; (800954c <HAL_GPIO_Init+0x2b0>)
 80094b8:	689a      	ldr	r2, [r3, #8]
 80094ba:	4924      	ldr	r1, [pc, #144]	; (800954c <HAL_GPIO_Init+0x2b0>)
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	4313      	orrs	r3, r2
 80094c0:	608b      	str	r3, [r1, #8]
 80094c2:	e006      	b.n	80094d2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80094c4:	4b21      	ldr	r3, [pc, #132]	; (800954c <HAL_GPIO_Init+0x2b0>)
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	43db      	mvns	r3, r3
 80094cc:	491f      	ldr	r1, [pc, #124]	; (800954c <HAL_GPIO_Init+0x2b0>)
 80094ce:	4013      	ands	r3, r2
 80094d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d006      	beq.n	80094ec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80094de:	4b1b      	ldr	r3, [pc, #108]	; (800954c <HAL_GPIO_Init+0x2b0>)
 80094e0:	68da      	ldr	r2, [r3, #12]
 80094e2:	491a      	ldr	r1, [pc, #104]	; (800954c <HAL_GPIO_Init+0x2b0>)
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	60cb      	str	r3, [r1, #12]
 80094ea:	e006      	b.n	80094fa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80094ec:	4b17      	ldr	r3, [pc, #92]	; (800954c <HAL_GPIO_Init+0x2b0>)
 80094ee:	68da      	ldr	r2, [r3, #12]
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	43db      	mvns	r3, r3
 80094f4:	4915      	ldr	r1, [pc, #84]	; (800954c <HAL_GPIO_Init+0x2b0>)
 80094f6:	4013      	ands	r3, r2
 80094f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	3301      	adds	r3, #1
 80094fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	fa22 f303 	lsr.w	r3, r2, r3
 800950a:	2b00      	cmp	r3, #0
 800950c:	f47f aed0 	bne.w	80092b0 <HAL_GPIO_Init+0x14>
  }
}
 8009510:	bf00      	nop
 8009512:	372c      	adds	r7, #44	; 0x2c
 8009514:	46bd      	mov	sp, r7
 8009516:	bc80      	pop	{r7}
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	10210000 	.word	0x10210000
 8009520:	10110000 	.word	0x10110000
 8009524:	10120000 	.word	0x10120000
 8009528:	10310000 	.word	0x10310000
 800952c:	10320000 	.word	0x10320000
 8009530:	10220000 	.word	0x10220000
 8009534:	40021000 	.word	0x40021000
 8009538:	40010000 	.word	0x40010000
 800953c:	40010800 	.word	0x40010800
 8009540:	40010c00 	.word	0x40010c00
 8009544:	40011000 	.word	0x40011000
 8009548:	40011400 	.word	0x40011400
 800954c:	40010400 	.word	0x40010400

08009550 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689a      	ldr	r2, [r3, #8]
 8009560:	887b      	ldrh	r3, [r7, #2]
 8009562:	4013      	ands	r3, r2
 8009564:	2b00      	cmp	r3, #0
 8009566:	d002      	beq.n	800956e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009568:	2301      	movs	r3, #1
 800956a:	73fb      	strb	r3, [r7, #15]
 800956c:	e001      	b.n	8009572 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800956e:	2300      	movs	r3, #0
 8009570:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009572:	7bfb      	ldrb	r3, [r7, #15]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	bc80      	pop	{r7}
 800957c:	4770      	bx	lr

0800957e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800957e:	b480      	push	{r7}
 8009580:	b083      	sub	sp, #12
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	460b      	mov	r3, r1
 8009588:	807b      	strh	r3, [r7, #2]
 800958a:	4613      	mov	r3, r2
 800958c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800958e:	787b      	ldrb	r3, [r7, #1]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d003      	beq.n	800959c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009594:	887a      	ldrh	r2, [r7, #2]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800959a:	e003      	b.n	80095a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800959c:	887b      	ldrh	r3, [r7, #2]
 800959e:	041a      	lsls	r2, r3, #16
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	611a      	str	r2, [r3, #16]
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bc80      	pop	{r7}
 80095ac:	4770      	bx	lr

080095ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b085      	sub	sp, #20
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	460b      	mov	r3, r1
 80095b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80095c0:	887a      	ldrh	r2, [r7, #2]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	4013      	ands	r3, r2
 80095c6:	041a      	lsls	r2, r3, #16
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	43d9      	mvns	r1, r3
 80095cc:	887b      	ldrh	r3, [r7, #2]
 80095ce:	400b      	ands	r3, r1
 80095d0:	431a      	orrs	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	611a      	str	r2, [r3, #16]
}
 80095d6:	bf00      	nop
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	bc80      	pop	{r7}
 80095de:	4770      	bx	lr

080095e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e11f      	b.n	8009832 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d106      	bne.n	800960c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f7f8 ffbe 	bl	8002588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2224      	movs	r2, #36	; 0x24
 8009610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f022 0201 	bic.w	r2, r2, #1
 8009622:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009632:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009642:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009644:	f001 f956 	bl	800a8f4 <HAL_RCC_GetPCLK1Freq>
 8009648:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	4a7b      	ldr	r2, [pc, #492]	; (800983c <HAL_I2C_Init+0x25c>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d807      	bhi.n	8009664 <HAL_I2C_Init+0x84>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4a7a      	ldr	r2, [pc, #488]	; (8009840 <HAL_I2C_Init+0x260>)
 8009658:	4293      	cmp	r3, r2
 800965a:	bf94      	ite	ls
 800965c:	2301      	movls	r3, #1
 800965e:	2300      	movhi	r3, #0
 8009660:	b2db      	uxtb	r3, r3
 8009662:	e006      	b.n	8009672 <HAL_I2C_Init+0x92>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4a77      	ldr	r2, [pc, #476]	; (8009844 <HAL_I2C_Init+0x264>)
 8009668:	4293      	cmp	r3, r2
 800966a:	bf94      	ite	ls
 800966c:	2301      	movls	r3, #1
 800966e:	2300      	movhi	r3, #0
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e0db      	b.n	8009832 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	4a72      	ldr	r2, [pc, #456]	; (8009848 <HAL_I2C_Init+0x268>)
 800967e:	fba2 2303 	umull	r2, r3, r2, r3
 8009682:	0c9b      	lsrs	r3, r3, #18
 8009684:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	430a      	orrs	r2, r1
 8009698:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	4a64      	ldr	r2, [pc, #400]	; (800983c <HAL_I2C_Init+0x25c>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d802      	bhi.n	80096b4 <HAL_I2C_Init+0xd4>
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	3301      	adds	r3, #1
 80096b2:	e009      	b.n	80096c8 <HAL_I2C_Init+0xe8>
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80096ba:	fb02 f303 	mul.w	r3, r2, r3
 80096be:	4a63      	ldr	r2, [pc, #396]	; (800984c <HAL_I2C_Init+0x26c>)
 80096c0:	fba2 2303 	umull	r2, r3, r2, r3
 80096c4:	099b      	lsrs	r3, r3, #6
 80096c6:	3301      	adds	r3, #1
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	6812      	ldr	r2, [r2, #0]
 80096cc:	430b      	orrs	r3, r1
 80096ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80096da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	4956      	ldr	r1, [pc, #344]	; (800983c <HAL_I2C_Init+0x25c>)
 80096e4:	428b      	cmp	r3, r1
 80096e6:	d80d      	bhi.n	8009704 <HAL_I2C_Init+0x124>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	1e59      	subs	r1, r3, #1
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	005b      	lsls	r3, r3, #1
 80096f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80096f6:	3301      	adds	r3, #1
 80096f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096fc:	2b04      	cmp	r3, #4
 80096fe:	bf38      	it	cc
 8009700:	2304      	movcc	r3, #4
 8009702:	e04f      	b.n	80097a4 <HAL_I2C_Init+0x1c4>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d111      	bne.n	8009730 <HAL_I2C_Init+0x150>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	1e58      	subs	r0, r3, #1
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6859      	ldr	r1, [r3, #4]
 8009714:	460b      	mov	r3, r1
 8009716:	005b      	lsls	r3, r3, #1
 8009718:	440b      	add	r3, r1
 800971a:	fbb0 f3f3 	udiv	r3, r0, r3
 800971e:	3301      	adds	r3, #1
 8009720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009724:	2b00      	cmp	r3, #0
 8009726:	bf0c      	ite	eq
 8009728:	2301      	moveq	r3, #1
 800972a:	2300      	movne	r3, #0
 800972c:	b2db      	uxtb	r3, r3
 800972e:	e012      	b.n	8009756 <HAL_I2C_Init+0x176>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	1e58      	subs	r0, r3, #1
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6859      	ldr	r1, [r3, #4]
 8009738:	460b      	mov	r3, r1
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	440b      	add	r3, r1
 800973e:	0099      	lsls	r1, r3, #2
 8009740:	440b      	add	r3, r1
 8009742:	fbb0 f3f3 	udiv	r3, r0, r3
 8009746:	3301      	adds	r3, #1
 8009748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800974c:	2b00      	cmp	r3, #0
 800974e:	bf0c      	ite	eq
 8009750:	2301      	moveq	r3, #1
 8009752:	2300      	movne	r3, #0
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <HAL_I2C_Init+0x17e>
 800975a:	2301      	movs	r3, #1
 800975c:	e022      	b.n	80097a4 <HAL_I2C_Init+0x1c4>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10e      	bne.n	8009784 <HAL_I2C_Init+0x1a4>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	1e58      	subs	r0, r3, #1
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6859      	ldr	r1, [r3, #4]
 800976e:	460b      	mov	r3, r1
 8009770:	005b      	lsls	r3, r3, #1
 8009772:	440b      	add	r3, r1
 8009774:	fbb0 f3f3 	udiv	r3, r0, r3
 8009778:	3301      	adds	r3, #1
 800977a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800977e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009782:	e00f      	b.n	80097a4 <HAL_I2C_Init+0x1c4>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	1e58      	subs	r0, r3, #1
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6859      	ldr	r1, [r3, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	440b      	add	r3, r1
 8009792:	0099      	lsls	r1, r3, #2
 8009794:	440b      	add	r3, r1
 8009796:	fbb0 f3f3 	udiv	r3, r0, r3
 800979a:	3301      	adds	r3, #1
 800979c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	6809      	ldr	r1, [r1, #0]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	69da      	ldr	r2, [r3, #28]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	431a      	orrs	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	430a      	orrs	r2, r1
 80097c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80097d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	6911      	ldr	r1, [r2, #16]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	68d2      	ldr	r2, [r2, #12]
 80097de:	4311      	orrs	r1, r2
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	6812      	ldr	r2, [r2, #0]
 80097e4:	430b      	orrs	r3, r1
 80097e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	695a      	ldr	r2, [r3, #20]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	431a      	orrs	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	430a      	orrs	r2, r1
 8009802:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f042 0201 	orr.w	r2, r2, #1
 8009812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2220      	movs	r2, #32
 800981e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	000186a0 	.word	0x000186a0
 8009840:	001e847f 	.word	0x001e847f
 8009844:	003d08ff 	.word	0x003d08ff
 8009848:	431bde83 	.word	0x431bde83
 800984c:	10624dd3 	.word	0x10624dd3

08009850 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b088      	sub	sp, #32
 8009854:	af02      	add	r7, sp, #8
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	607a      	str	r2, [r7, #4]
 800985a:	461a      	mov	r2, r3
 800985c:	460b      	mov	r3, r1
 800985e:	817b      	strh	r3, [r7, #10]
 8009860:	4613      	mov	r3, r2
 8009862:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009864:	f7fd ff62 	bl	800772c <HAL_GetTick>
 8009868:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b20      	cmp	r3, #32
 8009874:	f040 80e0 	bne.w	8009a38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	2319      	movs	r3, #25
 800987e:	2201      	movs	r2, #1
 8009880:	4970      	ldr	r1, [pc, #448]	; (8009a44 <HAL_I2C_Master_Transmit+0x1f4>)
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f000 fa92 	bl	8009dac <I2C_WaitOnFlagUntilTimeout>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800988e:	2302      	movs	r3, #2
 8009890:	e0d3      	b.n	8009a3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009898:	2b01      	cmp	r3, #1
 800989a:	d101      	bne.n	80098a0 <HAL_I2C_Master_Transmit+0x50>
 800989c:	2302      	movs	r3, #2
 800989e:	e0cc      	b.n	8009a3a <HAL_I2C_Master_Transmit+0x1ea>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d007      	beq.n	80098c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f042 0201 	orr.w	r2, r2, #1
 80098c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2221      	movs	r2, #33	; 0x21
 80098da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2210      	movs	r2, #16
 80098e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	893a      	ldrh	r2, [r7, #8]
 80098f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	4a50      	ldr	r2, [pc, #320]	; (8009a48 <HAL_I2C_Master_Transmit+0x1f8>)
 8009906:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009908:	8979      	ldrh	r1, [r7, #10]
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	6a3a      	ldr	r2, [r7, #32]
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f000 f9ca 	bl	8009ca8 <I2C_MasterRequestWrite>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d001      	beq.n	800991e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e08d      	b.n	8009a3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800991e:	2300      	movs	r3, #0
 8009920:	613b      	str	r3, [r7, #16]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	695b      	ldr	r3, [r3, #20]
 8009928:	613b      	str	r3, [r7, #16]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	613b      	str	r3, [r7, #16]
 8009932:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009934:	e066      	b.n	8009a04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	6a39      	ldr	r1, [r7, #32]
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f000 fb0c 	bl	8009f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00d      	beq.n	8009962 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994a:	2b04      	cmp	r3, #4
 800994c:	d107      	bne.n	800995e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800995c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e06b      	b.n	8009a3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	781a      	ldrb	r2, [r3, #0]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009972:	1c5a      	adds	r2, r3, #1
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800997c:	b29b      	uxth	r3, r3
 800997e:	3b01      	subs	r3, #1
 8009980:	b29a      	uxth	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800998a:	3b01      	subs	r3, #1
 800998c:	b29a      	uxth	r2, r3
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	f003 0304 	and.w	r3, r3, #4
 800999c:	2b04      	cmp	r3, #4
 800999e:	d11b      	bne.n	80099d8 <HAL_I2C_Master_Transmit+0x188>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d017      	beq.n	80099d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	781a      	ldrb	r2, [r3, #0]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b8:	1c5a      	adds	r2, r3, #1
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	3b01      	subs	r3, #1
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d0:	3b01      	subs	r3, #1
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	6a39      	ldr	r1, [r7, #32]
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f000 fafc 	bl	8009fda <I2C_WaitOnBTFFlagUntilTimeout>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00d      	beq.n	8009a04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ec:	2b04      	cmp	r3, #4
 80099ee:	d107      	bne.n	8009a00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	e01a      	b.n	8009a3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d194      	bne.n	8009936 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2220      	movs	r2, #32
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	e000      	b.n	8009a3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009a38:	2302      	movs	r3, #2
  }
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	00100002 	.word	0x00100002
 8009a48:	ffff0000 	.word	0xffff0000

08009a4c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08a      	sub	sp, #40	; 0x28
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	607a      	str	r2, [r7, #4]
 8009a56:	603b      	str	r3, [r7, #0]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009a5c:	f7fd fe66 	bl	800772c <HAL_GetTick>
 8009a60:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8009a62:	2301      	movs	r3, #1
 8009a64:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b20      	cmp	r3, #32
 8009a70:	f040 8111 	bne.w	8009c96 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	2319      	movs	r3, #25
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	4988      	ldr	r1, [pc, #544]	; (8009ca0 <HAL_I2C_IsDeviceReady+0x254>)
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f000 f994 	bl	8009dac <I2C_WaitOnFlagUntilTimeout>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	e104      	b.n	8009c98 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d101      	bne.n	8009a9c <HAL_I2C_IsDeviceReady+0x50>
 8009a98:	2302      	movs	r3, #2
 8009a9a:	e0fd      	b.n	8009c98 <HAL_I2C_IsDeviceReady+0x24c>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d007      	beq.n	8009ac2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f042 0201 	orr.w	r2, r2, #1
 8009ac0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ad0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2224      	movs	r2, #36	; 0x24
 8009ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	4a70      	ldr	r2, [pc, #448]	; (8009ca4 <HAL_I2C_IsDeviceReady+0x258>)
 8009ae4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009af4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 f952 	bl	8009dac <I2C_WaitOnFlagUntilTimeout>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00d      	beq.n	8009b2a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b1c:	d103      	bne.n	8009b26 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b24:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e0b6      	b.n	8009c98 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b2a:	897b      	ldrh	r3, [r7, #10]
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	461a      	mov	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b38:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009b3a:	f7fd fdf7 	bl	800772c <HAL_GetTick>
 8009b3e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	f003 0302 	and.w	r3, r3, #2
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	bf0c      	ite	eq
 8009b4e:	2301      	moveq	r3, #1
 8009b50:	2300      	movne	r3, #0
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	695b      	ldr	r3, [r3, #20]
 8009b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b64:	bf0c      	ite	eq
 8009b66:	2301      	moveq	r3, #1
 8009b68:	2300      	movne	r3, #0
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009b6e:	e025      	b.n	8009bbc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009b70:	f7fd fddc 	bl	800772c <HAL_GetTick>
 8009b74:	4602      	mov	r2, r0
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d302      	bcc.n	8009b86 <HAL_I2C_IsDeviceReady+0x13a>
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d103      	bne.n	8009b8e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	22a0      	movs	r2, #160	; 0xa0
 8009b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	695b      	ldr	r3, [r3, #20]
 8009b94:	f003 0302 	and.w	r3, r3, #2
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	bf0c      	ite	eq
 8009b9c:	2301      	moveq	r3, #1
 8009b9e:	2300      	movne	r3, #0
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	695b      	ldr	r3, [r3, #20]
 8009baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bb2:	bf0c      	ite	eq
 8009bb4:	2301      	moveq	r3, #1
 8009bb6:	2300      	movne	r3, #0
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2ba0      	cmp	r3, #160	; 0xa0
 8009bc6:	d005      	beq.n	8009bd4 <HAL_I2C_IsDeviceReady+0x188>
 8009bc8:	7dfb      	ldrb	r3, [r7, #23]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d102      	bne.n	8009bd4 <HAL_I2C_IsDeviceReady+0x188>
 8009bce:	7dbb      	ldrb	r3, [r7, #22]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d0cd      	beq.n	8009b70 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2220      	movs	r2, #32
 8009bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	f003 0302 	and.w	r3, r3, #2
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d129      	bne.n	8009c3e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bf8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	613b      	str	r3, [r7, #16]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	695b      	ldr	r3, [r3, #20]
 8009c04:	613b      	str	r3, [r7, #16]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	613b      	str	r3, [r7, #16]
 8009c0e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	2319      	movs	r3, #25
 8009c16:	2201      	movs	r2, #1
 8009c18:	4921      	ldr	r1, [pc, #132]	; (8009ca0 <HAL_I2C_IsDeviceReady+0x254>)
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f000 f8c6 	bl	8009dac <I2C_WaitOnFlagUntilTimeout>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e036      	b.n	8009c98 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2220      	movs	r2, #32
 8009c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	e02c      	b.n	8009c98 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c4c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c56:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	2319      	movs	r3, #25
 8009c5e:	2201      	movs	r2, #1
 8009c60:	490f      	ldr	r1, [pc, #60]	; (8009ca0 <HAL_I2C_IsDeviceReady+0x254>)
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 f8a2 	bl	8009dac <I2C_WaitOnFlagUntilTimeout>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e012      	b.n	8009c98 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	3301      	adds	r3, #1
 8009c76:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009c78:	69ba      	ldr	r2, [r7, #24]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	f4ff af32 	bcc.w	8009ae6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2220      	movs	r2, #32
 8009c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e000      	b.n	8009c98 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8009c96:	2302      	movs	r3, #2
  }
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3720      	adds	r7, #32
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	00100002 	.word	0x00100002
 8009ca4:	ffff0000 	.word	0xffff0000

08009ca8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b088      	sub	sp, #32
 8009cac:	af02      	add	r7, sp, #8
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	607a      	str	r2, [r7, #4]
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2b08      	cmp	r3, #8
 8009cc2:	d006      	beq.n	8009cd2 <I2C_MasterRequestWrite+0x2a>
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d003      	beq.n	8009cd2 <I2C_MasterRequestWrite+0x2a>
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009cd0:	d108      	bne.n	8009ce4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ce0:	601a      	str	r2, [r3, #0]
 8009ce2:	e00b      	b.n	8009cfc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce8:	2b12      	cmp	r3, #18
 8009cea:	d107      	bne.n	8009cfc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f000 f84f 	bl	8009dac <I2C_WaitOnFlagUntilTimeout>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00d      	beq.n	8009d30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d22:	d103      	bne.n	8009d2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e035      	b.n	8009d9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d38:	d108      	bne.n	8009d4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009d3a:	897b      	ldrh	r3, [r7, #10]
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	461a      	mov	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009d48:	611a      	str	r2, [r3, #16]
 8009d4a:	e01b      	b.n	8009d84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009d4c:	897b      	ldrh	r3, [r7, #10]
 8009d4e:	11db      	asrs	r3, r3, #7
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	f003 0306 	and.w	r3, r3, #6
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	f063 030f 	orn	r3, r3, #15
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	490e      	ldr	r1, [pc, #56]	; (8009da4 <I2C_MasterRequestWrite+0xfc>)
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f875 	bl	8009e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e010      	b.n	8009d9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009d7a:	897b      	ldrh	r3, [r7, #10]
 8009d7c:	b2da      	uxtb	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	4907      	ldr	r1, [pc, #28]	; (8009da8 <I2C_MasterRequestWrite+0x100>)
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f000 f865 	bl	8009e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d001      	beq.n	8009d9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	e000      	b.n	8009d9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3718      	adds	r7, #24
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	00010008 	.word	0x00010008
 8009da8:	00010002 	.word	0x00010002

08009dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	4613      	mov	r3, r2
 8009dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009dbc:	e025      	b.n	8009e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc4:	d021      	beq.n	8009e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dc6:	f7fd fcb1 	bl	800772c <HAL_GetTick>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d302      	bcc.n	8009ddc <I2C_WaitOnFlagUntilTimeout+0x30>
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d116      	bne.n	8009e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2220      	movs	r2, #32
 8009de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df6:	f043 0220 	orr.w	r2, r3, #32
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e023      	b.n	8009e52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	0c1b      	lsrs	r3, r3, #16
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d10d      	bne.n	8009e30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	43da      	mvns	r2, r3
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	4013      	ands	r3, r2
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	bf0c      	ite	eq
 8009e26:	2301      	moveq	r3, #1
 8009e28:	2300      	movne	r3, #0
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	e00c      	b.n	8009e4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	699b      	ldr	r3, [r3, #24]
 8009e36:	43da      	mvns	r2, r3
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	bf0c      	ite	eq
 8009e42:	2301      	moveq	r3, #1
 8009e44:	2300      	movne	r3, #0
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	461a      	mov	r2, r3
 8009e4a:	79fb      	ldrb	r3, [r7, #7]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d0b6      	beq.n	8009dbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	60b9      	str	r1, [r7, #8]
 8009e64:	607a      	str	r2, [r7, #4]
 8009e66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009e68:	e051      	b.n	8009f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e78:	d123      	bne.n	8009ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eae:	f043 0204 	orr.w	r2, r3, #4
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e046      	b.n	8009f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec8:	d021      	beq.n	8009f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eca:	f7fd fc2f 	bl	800772c <HAL_GetTick>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	1ad3      	subs	r3, r2, r3
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d302      	bcc.n	8009ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d116      	bne.n	8009f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2220      	movs	r2, #32
 8009eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efa:	f043 0220 	orr.w	r2, r3, #32
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e020      	b.n	8009f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	0c1b      	lsrs	r3, r3, #16
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d10c      	bne.n	8009f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	43da      	mvns	r2, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	4013      	ands	r3, r2
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	bf14      	ite	ne
 8009f2a:	2301      	movne	r3, #1
 8009f2c:	2300      	moveq	r3, #0
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	e00b      	b.n	8009f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	43da      	mvns	r2, r3
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	bf14      	ite	ne
 8009f44:	2301      	movne	r3, #1
 8009f46:	2300      	moveq	r3, #0
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d18d      	bne.n	8009e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f64:	e02d      	b.n	8009fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f000 f878 	bl	800a05c <I2C_IsAcknowledgeFailed>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e02d      	b.n	8009fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7c:	d021      	beq.n	8009fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f7e:	f7fd fbd5 	bl	800772c <HAL_GetTick>
 8009f82:	4602      	mov	r2, r0
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d302      	bcc.n	8009f94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d116      	bne.n	8009fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fae:	f043 0220 	orr.w	r2, r3, #32
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e007      	b.n	8009fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fcc:	2b80      	cmp	r3, #128	; 0x80
 8009fce:	d1ca      	bne.n	8009f66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b084      	sub	sp, #16
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	60f8      	str	r0, [r7, #12]
 8009fe2:	60b9      	str	r1, [r7, #8]
 8009fe4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009fe6:	e02d      	b.n	800a044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 f837 	bl	800a05c <I2C_IsAcknowledgeFailed>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e02d      	b.n	800a054 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffe:	d021      	beq.n	800a044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a000:	f7fd fb94 	bl	800772c <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d302      	bcc.n	800a016 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d116      	bne.n	800a044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2220      	movs	r2, #32
 800a020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a030:	f043 0220 	orr.w	r2, r3, #32
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e007      	b.n	800a054 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	f003 0304 	and.w	r3, r3, #4
 800a04e:	2b04      	cmp	r3, #4
 800a050:	d1ca      	bne.n	8009fe8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	695b      	ldr	r3, [r3, #20]
 800a06a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a06e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a072:	d11b      	bne.n	800a0ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a07c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2220      	movs	r2, #32
 800a088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a098:	f043 0204 	orr.w	r2, r3, #4
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e000      	b.n	800a0ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bc80      	pop	{r7}
 800a0b6:	4770      	bx	lr

0800a0b8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e02b      	b.n	800a122 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a0d2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f245 5255 	movw	r2, #21845	; 0x5555
 800a0dc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	6852      	ldr	r2, [r2, #4]
 800a0e6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	6892      	ldr	r2, [r2, #8]
 800a0f0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a0f2:	f7fd fb1b 	bl	800772c <HAL_GetTick>
 800a0f6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800a0f8:	e008      	b.n	800a10c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a0fa:	f7fd fb17 	bl	800772c <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	2b26      	cmp	r3, #38	; 0x26
 800a106:	d901      	bls.n	800a10c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e00a      	b.n	800a122 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1f1      	bne.n	800a0fa <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a11e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a13a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	bc80      	pop	{r7}
 800a146:	4770      	bx	lr

0800a148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e26c      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f003 0301 	and.w	r3, r3, #1
 800a162:	2b00      	cmp	r3, #0
 800a164:	f000 8087 	beq.w	800a276 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a168:	4b92      	ldr	r3, [pc, #584]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f003 030c 	and.w	r3, r3, #12
 800a170:	2b04      	cmp	r3, #4
 800a172:	d00c      	beq.n	800a18e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a174:	4b8f      	ldr	r3, [pc, #572]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	f003 030c 	and.w	r3, r3, #12
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d112      	bne.n	800a1a6 <HAL_RCC_OscConfig+0x5e>
 800a180:	4b8c      	ldr	r3, [pc, #560]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a18c:	d10b      	bne.n	800a1a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a18e:	4b89      	ldr	r3, [pc, #548]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a196:	2b00      	cmp	r3, #0
 800a198:	d06c      	beq.n	800a274 <HAL_RCC_OscConfig+0x12c>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d168      	bne.n	800a274 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e246      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1ae:	d106      	bne.n	800a1be <HAL_RCC_OscConfig+0x76>
 800a1b0:	4b80      	ldr	r3, [pc, #512]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a7f      	ldr	r2, [pc, #508]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a1b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	e02e      	b.n	800a21c <HAL_RCC_OscConfig+0xd4>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10c      	bne.n	800a1e0 <HAL_RCC_OscConfig+0x98>
 800a1c6:	4b7b      	ldr	r3, [pc, #492]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a7a      	ldr	r2, [pc, #488]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a1cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1d0:	6013      	str	r3, [r2, #0]
 800a1d2:	4b78      	ldr	r3, [pc, #480]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a77      	ldr	r2, [pc, #476]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a1d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1dc:	6013      	str	r3, [r2, #0]
 800a1de:	e01d      	b.n	800a21c <HAL_RCC_OscConfig+0xd4>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a1e8:	d10c      	bne.n	800a204 <HAL_RCC_OscConfig+0xbc>
 800a1ea:	4b72      	ldr	r3, [pc, #456]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a71      	ldr	r2, [pc, #452]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a1f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a1f4:	6013      	str	r3, [r2, #0]
 800a1f6:	4b6f      	ldr	r3, [pc, #444]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a6e      	ldr	r2, [pc, #440]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a1fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a200:	6013      	str	r3, [r2, #0]
 800a202:	e00b      	b.n	800a21c <HAL_RCC_OscConfig+0xd4>
 800a204:	4b6b      	ldr	r3, [pc, #428]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a6a      	ldr	r2, [pc, #424]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a20a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a20e:	6013      	str	r3, [r2, #0]
 800a210:	4b68      	ldr	r3, [pc, #416]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a67      	ldr	r2, [pc, #412]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a21a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d013      	beq.n	800a24c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a224:	f7fd fa82 	bl	800772c <HAL_GetTick>
 800a228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a22a:	e008      	b.n	800a23e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a22c:	f7fd fa7e 	bl	800772c <HAL_GetTick>
 800a230:	4602      	mov	r2, r0
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	2b64      	cmp	r3, #100	; 0x64
 800a238:	d901      	bls.n	800a23e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a23a:	2303      	movs	r3, #3
 800a23c:	e1fa      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a23e:	4b5d      	ldr	r3, [pc, #372]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d0f0      	beq.n	800a22c <HAL_RCC_OscConfig+0xe4>
 800a24a:	e014      	b.n	800a276 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a24c:	f7fd fa6e 	bl	800772c <HAL_GetTick>
 800a250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a252:	e008      	b.n	800a266 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a254:	f7fd fa6a 	bl	800772c <HAL_GetTick>
 800a258:	4602      	mov	r2, r0
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	2b64      	cmp	r3, #100	; 0x64
 800a260:	d901      	bls.n	800a266 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e1e6      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a266:	4b53      	ldr	r3, [pc, #332]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1f0      	bne.n	800a254 <HAL_RCC_OscConfig+0x10c>
 800a272:	e000      	b.n	800a276 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 0302 	and.w	r3, r3, #2
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d063      	beq.n	800a34a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a282:	4b4c      	ldr	r3, [pc, #304]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f003 030c 	and.w	r3, r3, #12
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00b      	beq.n	800a2a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a28e:	4b49      	ldr	r3, [pc, #292]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	f003 030c 	and.w	r3, r3, #12
 800a296:	2b08      	cmp	r3, #8
 800a298:	d11c      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x18c>
 800a29a:	4b46      	ldr	r3, [pc, #280]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d116      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2a6:	4b43      	ldr	r3, [pc, #268]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0302 	and.w	r3, r3, #2
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d005      	beq.n	800a2be <HAL_RCC_OscConfig+0x176>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d001      	beq.n	800a2be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e1ba      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2be:	4b3d      	ldr	r3, [pc, #244]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	695b      	ldr	r3, [r3, #20]
 800a2ca:	00db      	lsls	r3, r3, #3
 800a2cc:	4939      	ldr	r1, [pc, #228]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2d2:	e03a      	b.n	800a34a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d020      	beq.n	800a31e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a2dc:	4b36      	ldr	r3, [pc, #216]	; (800a3b8 <HAL_RCC_OscConfig+0x270>)
 800a2de:	2201      	movs	r2, #1
 800a2e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2e2:	f7fd fa23 	bl	800772c <HAL_GetTick>
 800a2e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2e8:	e008      	b.n	800a2fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2ea:	f7fd fa1f 	bl	800772c <HAL_GetTick>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d901      	bls.n	800a2fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e19b      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2fc:	4b2d      	ldr	r3, [pc, #180]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 0302 	and.w	r3, r3, #2
 800a304:	2b00      	cmp	r3, #0
 800a306:	d0f0      	beq.n	800a2ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a308:	4b2a      	ldr	r3, [pc, #168]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	695b      	ldr	r3, [r3, #20]
 800a314:	00db      	lsls	r3, r3, #3
 800a316:	4927      	ldr	r1, [pc, #156]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	600b      	str	r3, [r1, #0]
 800a31c:	e015      	b.n	800a34a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a31e:	4b26      	ldr	r3, [pc, #152]	; (800a3b8 <HAL_RCC_OscConfig+0x270>)
 800a320:	2200      	movs	r2, #0
 800a322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a324:	f7fd fa02 	bl	800772c <HAL_GetTick>
 800a328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a32a:	e008      	b.n	800a33e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a32c:	f7fd f9fe 	bl	800772c <HAL_GetTick>
 800a330:	4602      	mov	r2, r0
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	1ad3      	subs	r3, r2, r3
 800a336:	2b02      	cmp	r3, #2
 800a338:	d901      	bls.n	800a33e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e17a      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a33e:	4b1d      	ldr	r3, [pc, #116]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 0302 	and.w	r3, r3, #2
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1f0      	bne.n	800a32c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 0308 	and.w	r3, r3, #8
 800a352:	2b00      	cmp	r3, #0
 800a354:	d03a      	beq.n	800a3cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d019      	beq.n	800a392 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a35e:	4b17      	ldr	r3, [pc, #92]	; (800a3bc <HAL_RCC_OscConfig+0x274>)
 800a360:	2201      	movs	r2, #1
 800a362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a364:	f7fd f9e2 	bl	800772c <HAL_GetTick>
 800a368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a36a:	e008      	b.n	800a37e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a36c:	f7fd f9de 	bl	800772c <HAL_GetTick>
 800a370:	4602      	mov	r2, r0
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	1ad3      	subs	r3, r2, r3
 800a376:	2b02      	cmp	r3, #2
 800a378:	d901      	bls.n	800a37e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e15a      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a37e:	4b0d      	ldr	r3, [pc, #52]	; (800a3b4 <HAL_RCC_OscConfig+0x26c>)
 800a380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a382:	f003 0302 	and.w	r3, r3, #2
 800a386:	2b00      	cmp	r3, #0
 800a388:	d0f0      	beq.n	800a36c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a38a:	2001      	movs	r0, #1
 800a38c:	f000 fada 	bl	800a944 <RCC_Delay>
 800a390:	e01c      	b.n	800a3cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a392:	4b0a      	ldr	r3, [pc, #40]	; (800a3bc <HAL_RCC_OscConfig+0x274>)
 800a394:	2200      	movs	r2, #0
 800a396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a398:	f7fd f9c8 	bl	800772c <HAL_GetTick>
 800a39c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a39e:	e00f      	b.n	800a3c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3a0:	f7fd f9c4 	bl	800772c <HAL_GetTick>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d908      	bls.n	800a3c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	e140      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
 800a3b2:	bf00      	nop
 800a3b4:	40021000 	.word	0x40021000
 800a3b8:	42420000 	.word	0x42420000
 800a3bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3c0:	4b9e      	ldr	r3, [pc, #632]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	f003 0302 	and.w	r3, r3, #2
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1e9      	bne.n	800a3a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 0304 	and.w	r3, r3, #4
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f000 80a6 	beq.w	800a526 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3de:	4b97      	ldr	r3, [pc, #604]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a3e0:	69db      	ldr	r3, [r3, #28]
 800a3e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d10d      	bne.n	800a406 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3ea:	4b94      	ldr	r3, [pc, #592]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	4a93      	ldr	r2, [pc, #588]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a3f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3f4:	61d3      	str	r3, [r2, #28]
 800a3f6:	4b91      	ldr	r3, [pc, #580]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a3f8:	69db      	ldr	r3, [r3, #28]
 800a3fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3fe:	60bb      	str	r3, [r7, #8]
 800a400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a402:	2301      	movs	r3, #1
 800a404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a406:	4b8e      	ldr	r3, [pc, #568]	; (800a640 <HAL_RCC_OscConfig+0x4f8>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d118      	bne.n	800a444 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a412:	4b8b      	ldr	r3, [pc, #556]	; (800a640 <HAL_RCC_OscConfig+0x4f8>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a8a      	ldr	r2, [pc, #552]	; (800a640 <HAL_RCC_OscConfig+0x4f8>)
 800a418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a41c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a41e:	f7fd f985 	bl	800772c <HAL_GetTick>
 800a422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a424:	e008      	b.n	800a438 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a426:	f7fd f981 	bl	800772c <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	2b64      	cmp	r3, #100	; 0x64
 800a432:	d901      	bls.n	800a438 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a434:	2303      	movs	r3, #3
 800a436:	e0fd      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a438:	4b81      	ldr	r3, [pc, #516]	; (800a640 <HAL_RCC_OscConfig+0x4f8>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a440:	2b00      	cmp	r3, #0
 800a442:	d0f0      	beq.n	800a426 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d106      	bne.n	800a45a <HAL_RCC_OscConfig+0x312>
 800a44c:	4b7b      	ldr	r3, [pc, #492]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a44e:	6a1b      	ldr	r3, [r3, #32]
 800a450:	4a7a      	ldr	r2, [pc, #488]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a452:	f043 0301 	orr.w	r3, r3, #1
 800a456:	6213      	str	r3, [r2, #32]
 800a458:	e02d      	b.n	800a4b6 <HAL_RCC_OscConfig+0x36e>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10c      	bne.n	800a47c <HAL_RCC_OscConfig+0x334>
 800a462:	4b76      	ldr	r3, [pc, #472]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a464:	6a1b      	ldr	r3, [r3, #32]
 800a466:	4a75      	ldr	r2, [pc, #468]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a468:	f023 0301 	bic.w	r3, r3, #1
 800a46c:	6213      	str	r3, [r2, #32]
 800a46e:	4b73      	ldr	r3, [pc, #460]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a470:	6a1b      	ldr	r3, [r3, #32]
 800a472:	4a72      	ldr	r2, [pc, #456]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a474:	f023 0304 	bic.w	r3, r3, #4
 800a478:	6213      	str	r3, [r2, #32]
 800a47a:	e01c      	b.n	800a4b6 <HAL_RCC_OscConfig+0x36e>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	2b05      	cmp	r3, #5
 800a482:	d10c      	bne.n	800a49e <HAL_RCC_OscConfig+0x356>
 800a484:	4b6d      	ldr	r3, [pc, #436]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a486:	6a1b      	ldr	r3, [r3, #32]
 800a488:	4a6c      	ldr	r2, [pc, #432]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a48a:	f043 0304 	orr.w	r3, r3, #4
 800a48e:	6213      	str	r3, [r2, #32]
 800a490:	4b6a      	ldr	r3, [pc, #424]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a492:	6a1b      	ldr	r3, [r3, #32]
 800a494:	4a69      	ldr	r2, [pc, #420]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a496:	f043 0301 	orr.w	r3, r3, #1
 800a49a:	6213      	str	r3, [r2, #32]
 800a49c:	e00b      	b.n	800a4b6 <HAL_RCC_OscConfig+0x36e>
 800a49e:	4b67      	ldr	r3, [pc, #412]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	4a66      	ldr	r2, [pc, #408]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a4a4:	f023 0301 	bic.w	r3, r3, #1
 800a4a8:	6213      	str	r3, [r2, #32]
 800a4aa:	4b64      	ldr	r3, [pc, #400]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a4ac:	6a1b      	ldr	r3, [r3, #32]
 800a4ae:	4a63      	ldr	r2, [pc, #396]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a4b0:	f023 0304 	bic.w	r3, r3, #4
 800a4b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d015      	beq.n	800a4ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4be:	f7fd f935 	bl	800772c <HAL_GetTick>
 800a4c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4c4:	e00a      	b.n	800a4dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4c6:	f7fd f931 	bl	800772c <HAL_GetTick>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	1ad3      	subs	r3, r2, r3
 800a4d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d901      	bls.n	800a4dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e0ab      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4dc:	4b57      	ldr	r3, [pc, #348]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a4de:	6a1b      	ldr	r3, [r3, #32]
 800a4e0:	f003 0302 	and.w	r3, r3, #2
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d0ee      	beq.n	800a4c6 <HAL_RCC_OscConfig+0x37e>
 800a4e8:	e014      	b.n	800a514 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4ea:	f7fd f91f 	bl	800772c <HAL_GetTick>
 800a4ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4f0:	e00a      	b.n	800a508 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4f2:	f7fd f91b 	bl	800772c <HAL_GetTick>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	1ad3      	subs	r3, r2, r3
 800a4fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a500:	4293      	cmp	r3, r2
 800a502:	d901      	bls.n	800a508 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a504:	2303      	movs	r3, #3
 800a506:	e095      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a508:	4b4c      	ldr	r3, [pc, #304]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a50a:	6a1b      	ldr	r3, [r3, #32]
 800a50c:	f003 0302 	and.w	r3, r3, #2
 800a510:	2b00      	cmp	r3, #0
 800a512:	d1ee      	bne.n	800a4f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a514:	7dfb      	ldrb	r3, [r7, #23]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d105      	bne.n	800a526 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a51a:	4b48      	ldr	r3, [pc, #288]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	4a47      	ldr	r2, [pc, #284]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a524:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	69db      	ldr	r3, [r3, #28]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f000 8081 	beq.w	800a632 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a530:	4b42      	ldr	r3, [pc, #264]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	f003 030c 	and.w	r3, r3, #12
 800a538:	2b08      	cmp	r3, #8
 800a53a:	d061      	beq.n	800a600 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	69db      	ldr	r3, [r3, #28]
 800a540:	2b02      	cmp	r3, #2
 800a542:	d146      	bne.n	800a5d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a544:	4b3f      	ldr	r3, [pc, #252]	; (800a644 <HAL_RCC_OscConfig+0x4fc>)
 800a546:	2200      	movs	r2, #0
 800a548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a54a:	f7fd f8ef 	bl	800772c <HAL_GetTick>
 800a54e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a550:	e008      	b.n	800a564 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a552:	f7fd f8eb 	bl	800772c <HAL_GetTick>
 800a556:	4602      	mov	r2, r0
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d901      	bls.n	800a564 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a560:	2303      	movs	r3, #3
 800a562:	e067      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a564:	4b35      	ldr	r3, [pc, #212]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1f0      	bne.n	800a552 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a1b      	ldr	r3, [r3, #32]
 800a574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a578:	d108      	bne.n	800a58c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a57a:	4b30      	ldr	r3, [pc, #192]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	492d      	ldr	r1, [pc, #180]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a588:	4313      	orrs	r3, r2
 800a58a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a58c:	4b2b      	ldr	r3, [pc, #172]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6a19      	ldr	r1, [r3, #32]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59c:	430b      	orrs	r3, r1
 800a59e:	4927      	ldr	r1, [pc, #156]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5a4:	4b27      	ldr	r3, [pc, #156]	; (800a644 <HAL_RCC_OscConfig+0x4fc>)
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5aa:	f7fd f8bf 	bl	800772c <HAL_GetTick>
 800a5ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a5b0:	e008      	b.n	800a5c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5b2:	f7fd f8bb 	bl	800772c <HAL_GetTick>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d901      	bls.n	800a5c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e037      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a5c4:	4b1d      	ldr	r3, [pc, #116]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d0f0      	beq.n	800a5b2 <HAL_RCC_OscConfig+0x46a>
 800a5d0:	e02f      	b.n	800a632 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5d2:	4b1c      	ldr	r3, [pc, #112]	; (800a644 <HAL_RCC_OscConfig+0x4fc>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5d8:	f7fd f8a8 	bl	800772c <HAL_GetTick>
 800a5dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a5de:	e008      	b.n	800a5f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5e0:	f7fd f8a4 	bl	800772c <HAL_GetTick>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d901      	bls.n	800a5f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e020      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a5f2:	4b12      	ldr	r3, [pc, #72]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1f0      	bne.n	800a5e0 <HAL_RCC_OscConfig+0x498>
 800a5fe:	e018      	b.n	800a632 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	69db      	ldr	r3, [r3, #28]
 800a604:	2b01      	cmp	r3, #1
 800a606:	d101      	bne.n	800a60c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e013      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a60c:	4b0b      	ldr	r3, [pc, #44]	; (800a63c <HAL_RCC_OscConfig+0x4f4>)
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a1b      	ldr	r3, [r3, #32]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d106      	bne.n	800a62e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d001      	beq.n	800a632 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e000      	b.n	800a634 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3718      	adds	r7, #24
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	40021000 	.word	0x40021000
 800a640:	40007000 	.word	0x40007000
 800a644:	42420060 	.word	0x42420060

0800a648 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d101      	bne.n	800a65c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	e0d0      	b.n	800a7fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a65c:	4b6a      	ldr	r3, [pc, #424]	; (800a808 <HAL_RCC_ClockConfig+0x1c0>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 0307 	and.w	r3, r3, #7
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	429a      	cmp	r2, r3
 800a668:	d910      	bls.n	800a68c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a66a:	4b67      	ldr	r3, [pc, #412]	; (800a808 <HAL_RCC_ClockConfig+0x1c0>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f023 0207 	bic.w	r2, r3, #7
 800a672:	4965      	ldr	r1, [pc, #404]	; (800a808 <HAL_RCC_ClockConfig+0x1c0>)
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	4313      	orrs	r3, r2
 800a678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a67a:	4b63      	ldr	r3, [pc, #396]	; (800a808 <HAL_RCC_ClockConfig+0x1c0>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0307 	and.w	r3, r3, #7
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	429a      	cmp	r2, r3
 800a686:	d001      	beq.n	800a68c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	e0b8      	b.n	800a7fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 0302 	and.w	r3, r3, #2
 800a694:	2b00      	cmp	r3, #0
 800a696:	d020      	beq.n	800a6da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f003 0304 	and.w	r3, r3, #4
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d005      	beq.n	800a6b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a6a4:	4b59      	ldr	r3, [pc, #356]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	4a58      	ldr	r2, [pc, #352]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a6aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a6ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0308 	and.w	r3, r3, #8
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d005      	beq.n	800a6c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a6bc:	4b53      	ldr	r3, [pc, #332]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	4a52      	ldr	r2, [pc, #328]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a6c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a6c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6c8:	4b50      	ldr	r3, [pc, #320]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	494d      	ldr	r1, [pc, #308]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 0301 	and.w	r3, r3, #1
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d040      	beq.n	800a768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d107      	bne.n	800a6fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6ee:	4b47      	ldr	r3, [pc, #284]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d115      	bne.n	800a726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e07f      	b.n	800a7fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	2b02      	cmp	r3, #2
 800a704:	d107      	bne.n	800a716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a706:	4b41      	ldr	r3, [pc, #260]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d109      	bne.n	800a726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	e073      	b.n	800a7fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a716:	4b3d      	ldr	r3, [pc, #244]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f003 0302 	and.w	r3, r3, #2
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d101      	bne.n	800a726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	e06b      	b.n	800a7fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a726:	4b39      	ldr	r3, [pc, #228]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	f023 0203 	bic.w	r2, r3, #3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	4936      	ldr	r1, [pc, #216]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a734:	4313      	orrs	r3, r2
 800a736:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a738:	f7fc fff8 	bl	800772c <HAL_GetTick>
 800a73c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a73e:	e00a      	b.n	800a756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a740:	f7fc fff4 	bl	800772c <HAL_GetTick>
 800a744:	4602      	mov	r2, r0
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a74e:	4293      	cmp	r3, r2
 800a750:	d901      	bls.n	800a756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e053      	b.n	800a7fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a756:	4b2d      	ldr	r3, [pc, #180]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	f003 020c 	and.w	r2, r3, #12
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	429a      	cmp	r2, r3
 800a766:	d1eb      	bne.n	800a740 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a768:	4b27      	ldr	r3, [pc, #156]	; (800a808 <HAL_RCC_ClockConfig+0x1c0>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 0307 	and.w	r3, r3, #7
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	429a      	cmp	r2, r3
 800a774:	d210      	bcs.n	800a798 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a776:	4b24      	ldr	r3, [pc, #144]	; (800a808 <HAL_RCC_ClockConfig+0x1c0>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f023 0207 	bic.w	r2, r3, #7
 800a77e:	4922      	ldr	r1, [pc, #136]	; (800a808 <HAL_RCC_ClockConfig+0x1c0>)
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	4313      	orrs	r3, r2
 800a784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a786:	4b20      	ldr	r3, [pc, #128]	; (800a808 <HAL_RCC_ClockConfig+0x1c0>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 0307 	and.w	r3, r3, #7
 800a78e:	683a      	ldr	r2, [r7, #0]
 800a790:	429a      	cmp	r2, r3
 800a792:	d001      	beq.n	800a798 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e032      	b.n	800a7fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f003 0304 	and.w	r3, r3, #4
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d008      	beq.n	800a7b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a7a4:	4b19      	ldr	r3, [pc, #100]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	4916      	ldr	r1, [pc, #88]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 0308 	and.w	r3, r3, #8
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d009      	beq.n	800a7d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a7c2:	4b12      	ldr	r3, [pc, #72]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	00db      	lsls	r3, r3, #3
 800a7d0:	490e      	ldr	r1, [pc, #56]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a7d6:	f000 f821 	bl	800a81c <HAL_RCC_GetSysClockFreq>
 800a7da:	4601      	mov	r1, r0
 800a7dc:	4b0b      	ldr	r3, [pc, #44]	; (800a80c <HAL_RCC_ClockConfig+0x1c4>)
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	091b      	lsrs	r3, r3, #4
 800a7e2:	f003 030f 	and.w	r3, r3, #15
 800a7e6:	4a0a      	ldr	r2, [pc, #40]	; (800a810 <HAL_RCC_ClockConfig+0x1c8>)
 800a7e8:	5cd3      	ldrb	r3, [r2, r3]
 800a7ea:	fa21 f303 	lsr.w	r3, r1, r3
 800a7ee:	4a09      	ldr	r2, [pc, #36]	; (800a814 <HAL_RCC_ClockConfig+0x1cc>)
 800a7f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a7f2:	4b09      	ldr	r3, [pc, #36]	; (800a818 <HAL_RCC_ClockConfig+0x1d0>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fc ff56 	bl	80076a8 <HAL_InitTick>

  return HAL_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	40022000 	.word	0x40022000
 800a80c:	40021000 	.word	0x40021000
 800a810:	0800e550 	.word	0x0800e550
 800a814:	20000084 	.word	0x20000084
 800a818:	20000088 	.word	0x20000088

0800a81c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a81c:	b490      	push	{r4, r7}
 800a81e:	b08a      	sub	sp, #40	; 0x28
 800a820:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800a822:	4b2a      	ldr	r3, [pc, #168]	; (800a8cc <HAL_RCC_GetSysClockFreq+0xb0>)
 800a824:	1d3c      	adds	r4, r7, #4
 800a826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800a82c:	4b28      	ldr	r3, [pc, #160]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800a82e:	881b      	ldrh	r3, [r3, #0]
 800a830:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	61fb      	str	r3, [r7, #28]
 800a836:	2300      	movs	r3, #0
 800a838:	61bb      	str	r3, [r7, #24]
 800a83a:	2300      	movs	r3, #0
 800a83c:	627b      	str	r3, [r7, #36]	; 0x24
 800a83e:	2300      	movs	r3, #0
 800a840:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a842:	2300      	movs	r3, #0
 800a844:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a846:	4b23      	ldr	r3, [pc, #140]	; (800a8d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	f003 030c 	and.w	r3, r3, #12
 800a852:	2b04      	cmp	r3, #4
 800a854:	d002      	beq.n	800a85c <HAL_RCC_GetSysClockFreq+0x40>
 800a856:	2b08      	cmp	r3, #8
 800a858:	d003      	beq.n	800a862 <HAL_RCC_GetSysClockFreq+0x46>
 800a85a:	e02d      	b.n	800a8b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a85c:	4b1e      	ldr	r3, [pc, #120]	; (800a8d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a85e:	623b      	str	r3, [r7, #32]
      break;
 800a860:	e02d      	b.n	800a8be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	0c9b      	lsrs	r3, r3, #18
 800a866:	f003 030f 	and.w	r3, r3, #15
 800a86a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a86e:	4413      	add	r3, r2
 800a870:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800a874:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d013      	beq.n	800a8a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a880:	4b14      	ldr	r3, [pc, #80]	; (800a8d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	0c5b      	lsrs	r3, r3, #17
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a88e:	4413      	add	r3, r2
 800a890:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a894:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	4a0f      	ldr	r2, [pc, #60]	; (800a8d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a89a:	fb02 f203 	mul.w	r2, r2, r3
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a8a6:	e004      	b.n	800a8b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	4a0c      	ldr	r2, [pc, #48]	; (800a8dc <HAL_RCC_GetSysClockFreq+0xc0>)
 800a8ac:	fb02 f303 	mul.w	r3, r2, r3
 800a8b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b4:	623b      	str	r3, [r7, #32]
      break;
 800a8b6:	e002      	b.n	800a8be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a8b8:	4b07      	ldr	r3, [pc, #28]	; (800a8d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a8ba:	623b      	str	r3, [r7, #32]
      break;
 800a8bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a8be:	6a3b      	ldr	r3, [r7, #32]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3728      	adds	r7, #40	; 0x28
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bc90      	pop	{r4, r7}
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	0800dbd0 	.word	0x0800dbd0
 800a8d0:	0800dbe0 	.word	0x0800dbe0
 800a8d4:	40021000 	.word	0x40021000
 800a8d8:	007a1200 	.word	0x007a1200
 800a8dc:	003d0900 	.word	0x003d0900

0800a8e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a8e4:	4b02      	ldr	r3, [pc, #8]	; (800a8f0 <HAL_RCC_GetHCLKFreq+0x10>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bc80      	pop	{r7}
 800a8ee:	4770      	bx	lr
 800a8f0:	20000084 	.word	0x20000084

0800a8f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a8f8:	f7ff fff2 	bl	800a8e0 <HAL_RCC_GetHCLKFreq>
 800a8fc:	4601      	mov	r1, r0
 800a8fe:	4b05      	ldr	r3, [pc, #20]	; (800a914 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	0a1b      	lsrs	r3, r3, #8
 800a904:	f003 0307 	and.w	r3, r3, #7
 800a908:	4a03      	ldr	r2, [pc, #12]	; (800a918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a90a:	5cd3      	ldrb	r3, [r2, r3]
 800a90c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a910:	4618      	mov	r0, r3
 800a912:	bd80      	pop	{r7, pc}
 800a914:	40021000 	.word	0x40021000
 800a918:	0800e560 	.word	0x0800e560

0800a91c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a920:	f7ff ffde 	bl	800a8e0 <HAL_RCC_GetHCLKFreq>
 800a924:	4601      	mov	r1, r0
 800a926:	4b05      	ldr	r3, [pc, #20]	; (800a93c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	0adb      	lsrs	r3, r3, #11
 800a92c:	f003 0307 	and.w	r3, r3, #7
 800a930:	4a03      	ldr	r2, [pc, #12]	; (800a940 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a932:	5cd3      	ldrb	r3, [r2, r3]
 800a934:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a938:	4618      	mov	r0, r3
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	40021000 	.word	0x40021000
 800a940:	0800e560 	.word	0x0800e560

0800a944 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a94c:	4b0a      	ldr	r3, [pc, #40]	; (800a978 <RCC_Delay+0x34>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a0a      	ldr	r2, [pc, #40]	; (800a97c <RCC_Delay+0x38>)
 800a952:	fba2 2303 	umull	r2, r3, r2, r3
 800a956:	0a5b      	lsrs	r3, r3, #9
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	fb02 f303 	mul.w	r3, r2, r3
 800a95e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a960:	bf00      	nop
  }
  while (Delay --);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	1e5a      	subs	r2, r3, #1
 800a966:	60fa      	str	r2, [r7, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1f9      	bne.n	800a960 <RCC_Delay+0x1c>
}
 800a96c:	bf00      	nop
 800a96e:	3714      	adds	r7, #20
 800a970:	46bd      	mov	sp, r7
 800a972:	bc80      	pop	{r7}
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	20000084 	.word	0x20000084
 800a97c:	10624dd3 	.word	0x10624dd3

0800a980 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800a988:	2300      	movs	r3, #0
 800a98a:	613b      	str	r3, [r7, #16]
 800a98c:	2300      	movs	r3, #0
 800a98e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 0301 	and.w	r3, r3, #1
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d07d      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800a99c:	2300      	movs	r3, #0
 800a99e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9a0:	4b4f      	ldr	r3, [pc, #316]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9a2:	69db      	ldr	r3, [r3, #28]
 800a9a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10d      	bne.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9ac:	4b4c      	ldr	r3, [pc, #304]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9ae:	69db      	ldr	r3, [r3, #28]
 800a9b0:	4a4b      	ldr	r2, [pc, #300]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9b6:	61d3      	str	r3, [r2, #28]
 800a9b8:	4b49      	ldr	r3, [pc, #292]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9ba:	69db      	ldr	r3, [r3, #28]
 800a9bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9c0:	60bb      	str	r3, [r7, #8]
 800a9c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9c8:	4b46      	ldr	r3, [pc, #280]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d118      	bne.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9d4:	4b43      	ldr	r3, [pc, #268]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a42      	ldr	r2, [pc, #264]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a9da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9e0:	f7fc fea4 	bl	800772c <HAL_GetTick>
 800a9e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9e6:	e008      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9e8:	f7fc fea0 	bl	800772c <HAL_GetTick>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	2b64      	cmp	r3, #100	; 0x64
 800a9f4:	d901      	bls.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e06d      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9fa:	4b3a      	ldr	r3, [pc, #232]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d0f0      	beq.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800aa06:	4b36      	ldr	r3, [pc, #216]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d02e      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d027      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aa24:	4b2e      	ldr	r3, [pc, #184]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa26:	6a1b      	ldr	r3, [r3, #32]
 800aa28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800aa2e:	4b2e      	ldr	r3, [pc, #184]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800aa30:	2201      	movs	r2, #1
 800aa32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800aa34:	4b2c      	ldr	r3, [pc, #176]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800aa3a:	4a29      	ldr	r2, [pc, #164]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d014      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa4a:	f7fc fe6f 	bl	800772c <HAL_GetTick>
 800aa4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa50:	e00a      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa52:	f7fc fe6b 	bl	800772c <HAL_GetTick>
 800aa56:	4602      	mov	r2, r0
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d901      	bls.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800aa64:	2303      	movs	r3, #3
 800aa66:	e036      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa68:	4b1d      	ldr	r3, [pc, #116]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa6a:	6a1b      	ldr	r3, [r3, #32]
 800aa6c:	f003 0302 	and.w	r3, r3, #2
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d0ee      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa74:	4b1a      	ldr	r3, [pc, #104]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa76:	6a1b      	ldr	r3, [r3, #32]
 800aa78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	4917      	ldr	r1, [pc, #92]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa82:	4313      	orrs	r3, r2
 800aa84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d105      	bne.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa8c:	4b14      	ldr	r3, [pc, #80]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa8e:	69db      	ldr	r3, [r3, #28]
 800aa90:	4a13      	ldr	r2, [pc, #76]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0302 	and.w	r3, r3, #2
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d008      	beq.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aaa4:	4b0e      	ldr	r3, [pc, #56]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	490b      	ldr	r1, [pc, #44]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aab2:	4313      	orrs	r3, r2
 800aab4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 0310 	and.w	r3, r3, #16
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d008      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aac2:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	4904      	ldr	r1, [pc, #16]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aad0:	4313      	orrs	r3, r2
 800aad2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3718      	adds	r7, #24
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	40021000 	.word	0x40021000
 800aae4:	40007000 	.word	0x40007000
 800aae8:	42420440 	.word	0x42420440

0800aaec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d101      	bne.n	800aafe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e041      	b.n	800ab82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d106      	bne.n	800ab18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7fc fc5c 	bl	80073d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2202      	movs	r2, #2
 800ab1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	3304      	adds	r3, #4
 800ab28:	4619      	mov	r1, r3
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	f000 fa6c 	bl	800b008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2201      	movs	r2, #1
 800ab54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
	...

0800ab8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d001      	beq.n	800aba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e03a      	b.n	800ac1a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2202      	movs	r2, #2
 800aba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68da      	ldr	r2, [r3, #12]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f042 0201 	orr.w	r2, r2, #1
 800abba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a18      	ldr	r2, [pc, #96]	; (800ac24 <HAL_TIM_Base_Start_IT+0x98>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d00e      	beq.n	800abe4 <HAL_TIM_Base_Start_IT+0x58>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abce:	d009      	beq.n	800abe4 <HAL_TIM_Base_Start_IT+0x58>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a14      	ldr	r2, [pc, #80]	; (800ac28 <HAL_TIM_Base_Start_IT+0x9c>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d004      	beq.n	800abe4 <HAL_TIM_Base_Start_IT+0x58>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a13      	ldr	r2, [pc, #76]	; (800ac2c <HAL_TIM_Base_Start_IT+0xa0>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d111      	bne.n	800ac08 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	f003 0307 	and.w	r3, r3, #7
 800abee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2b06      	cmp	r3, #6
 800abf4:	d010      	beq.n	800ac18 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f042 0201 	orr.w	r2, r2, #1
 800ac04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac06:	e007      	b.n	800ac18 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f042 0201 	orr.w	r2, r2, #1
 800ac16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bc80      	pop	{r7}
 800ac22:	4770      	bx	lr
 800ac24:	40012c00 	.word	0x40012c00
 800ac28:	40000400 	.word	0x40000400
 800ac2c:	40000800 	.word	0x40000800

0800ac30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	f003 0302 	and.w	r3, r3, #2
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d122      	bne.n	800ac8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	f003 0302 	and.w	r3, r3, #2
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d11b      	bne.n	800ac8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f06f 0202 	mvn.w	r2, #2
 800ac5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2201      	movs	r2, #1
 800ac62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	f003 0303 	and.w	r3, r3, #3
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d003      	beq.n	800ac7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f9ad 	bl	800afd2 <HAL_TIM_IC_CaptureCallback>
 800ac78:	e005      	b.n	800ac86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f9a0 	bl	800afc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 f9af 	bl	800afe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	f003 0304 	and.w	r3, r3, #4
 800ac96:	2b04      	cmp	r3, #4
 800ac98:	d122      	bne.n	800ace0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	f003 0304 	and.w	r3, r3, #4
 800aca4:	2b04      	cmp	r3, #4
 800aca6:	d11b      	bne.n	800ace0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f06f 0204 	mvn.w	r2, #4
 800acb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2202      	movs	r2, #2
 800acb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	699b      	ldr	r3, [r3, #24]
 800acbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d003      	beq.n	800acce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f983 	bl	800afd2 <HAL_TIM_IC_CaptureCallback>
 800accc:	e005      	b.n	800acda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f976 	bl	800afc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f985 	bl	800afe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	f003 0308 	and.w	r3, r3, #8
 800acea:	2b08      	cmp	r3, #8
 800acec:	d122      	bne.n	800ad34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	f003 0308 	and.w	r3, r3, #8
 800acf8:	2b08      	cmp	r3, #8
 800acfa:	d11b      	bne.n	800ad34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f06f 0208 	mvn.w	r2, #8
 800ad04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2204      	movs	r2, #4
 800ad0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	69db      	ldr	r3, [r3, #28]
 800ad12:	f003 0303 	and.w	r3, r3, #3
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d003      	beq.n	800ad22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 f959 	bl	800afd2 <HAL_TIM_IC_CaptureCallback>
 800ad20:	e005      	b.n	800ad2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f94c 	bl	800afc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 f95b 	bl	800afe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	f003 0310 	and.w	r3, r3, #16
 800ad3e:	2b10      	cmp	r3, #16
 800ad40:	d122      	bne.n	800ad88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	f003 0310 	and.w	r3, r3, #16
 800ad4c:	2b10      	cmp	r3, #16
 800ad4e:	d11b      	bne.n	800ad88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f06f 0210 	mvn.w	r2, #16
 800ad58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2208      	movs	r2, #8
 800ad5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	69db      	ldr	r3, [r3, #28]
 800ad66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d003      	beq.n	800ad76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 f92f 	bl	800afd2 <HAL_TIM_IC_CaptureCallback>
 800ad74:	e005      	b.n	800ad82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f922 	bl	800afc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f931 	bl	800afe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	f003 0301 	and.w	r3, r3, #1
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d10e      	bne.n	800adb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	f003 0301 	and.w	r3, r3, #1
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d107      	bne.n	800adb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f06f 0201 	mvn.w	r2, #1
 800adac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 f8fd 	bl	800afae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adbe:	2b80      	cmp	r3, #128	; 0x80
 800adc0:	d10e      	bne.n	800ade0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adcc:	2b80      	cmp	r3, #128	; 0x80
 800adce:	d107      	bne.n	800ade0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800add8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fa73 	bl	800b2c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adea:	2b40      	cmp	r3, #64	; 0x40
 800adec:	d10e      	bne.n	800ae0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adf8:	2b40      	cmp	r3, #64	; 0x40
 800adfa:	d107      	bne.n	800ae0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f8f5 	bl	800aff6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	f003 0320 	and.w	r3, r3, #32
 800ae16:	2b20      	cmp	r3, #32
 800ae18:	d10e      	bne.n	800ae38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	f003 0320 	and.w	r3, r3, #32
 800ae24:	2b20      	cmp	r3, #32
 800ae26:	d107      	bne.n	800ae38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f06f 0220 	mvn.w	r2, #32
 800ae30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fa3e 	bl	800b2b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae38:	bf00      	nop
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d101      	bne.n	800ae58 <HAL_TIM_ConfigClockSource+0x18>
 800ae54:	2302      	movs	r3, #2
 800ae56:	e0a6      	b.n	800afa6 <HAL_TIM_ConfigClockSource+0x166>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2202      	movs	r2, #2
 800ae64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ae76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b40      	cmp	r3, #64	; 0x40
 800ae8e:	d067      	beq.n	800af60 <HAL_TIM_ConfigClockSource+0x120>
 800ae90:	2b40      	cmp	r3, #64	; 0x40
 800ae92:	d80b      	bhi.n	800aeac <HAL_TIM_ConfigClockSource+0x6c>
 800ae94:	2b10      	cmp	r3, #16
 800ae96:	d073      	beq.n	800af80 <HAL_TIM_ConfigClockSource+0x140>
 800ae98:	2b10      	cmp	r3, #16
 800ae9a:	d802      	bhi.n	800aea2 <HAL_TIM_ConfigClockSource+0x62>
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d06f      	beq.n	800af80 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800aea0:	e078      	b.n	800af94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800aea2:	2b20      	cmp	r3, #32
 800aea4:	d06c      	beq.n	800af80 <HAL_TIM_ConfigClockSource+0x140>
 800aea6:	2b30      	cmp	r3, #48	; 0x30
 800aea8:	d06a      	beq.n	800af80 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800aeaa:	e073      	b.n	800af94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800aeac:	2b70      	cmp	r3, #112	; 0x70
 800aeae:	d00d      	beq.n	800aecc <HAL_TIM_ConfigClockSource+0x8c>
 800aeb0:	2b70      	cmp	r3, #112	; 0x70
 800aeb2:	d804      	bhi.n	800aebe <HAL_TIM_ConfigClockSource+0x7e>
 800aeb4:	2b50      	cmp	r3, #80	; 0x50
 800aeb6:	d033      	beq.n	800af20 <HAL_TIM_ConfigClockSource+0xe0>
 800aeb8:	2b60      	cmp	r3, #96	; 0x60
 800aeba:	d041      	beq.n	800af40 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800aebc:	e06a      	b.n	800af94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800aebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aec2:	d066      	beq.n	800af92 <HAL_TIM_ConfigClockSource+0x152>
 800aec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aec8:	d017      	beq.n	800aefa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800aeca:	e063      	b.n	800af94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6818      	ldr	r0, [r3, #0]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	6899      	ldr	r1, [r3, #8]
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	685a      	ldr	r2, [r3, #4]
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	f000 f96d 	bl	800b1ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aeee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	609a      	str	r2, [r3, #8]
      break;
 800aef8:	e04c      	b.n	800af94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6818      	ldr	r0, [r3, #0]
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	6899      	ldr	r1, [r3, #8]
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	685a      	ldr	r2, [r3, #4]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	f000 f956 	bl	800b1ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	689a      	ldr	r2, [r3, #8]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af1c:	609a      	str	r2, [r3, #8]
      break;
 800af1e:	e039      	b.n	800af94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6818      	ldr	r0, [r3, #0]
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	6859      	ldr	r1, [r3, #4]
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	461a      	mov	r2, r3
 800af2e:	f000 f8cd 	bl	800b0cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2150      	movs	r1, #80	; 0x50
 800af38:	4618      	mov	r0, r3
 800af3a:	f000 f924 	bl	800b186 <TIM_ITRx_SetConfig>
      break;
 800af3e:	e029      	b.n	800af94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6818      	ldr	r0, [r3, #0]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	6859      	ldr	r1, [r3, #4]
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	461a      	mov	r2, r3
 800af4e:	f000 f8eb 	bl	800b128 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2160      	movs	r1, #96	; 0x60
 800af58:	4618      	mov	r0, r3
 800af5a:	f000 f914 	bl	800b186 <TIM_ITRx_SetConfig>
      break;
 800af5e:	e019      	b.n	800af94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6818      	ldr	r0, [r3, #0]
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	6859      	ldr	r1, [r3, #4]
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	461a      	mov	r2, r3
 800af6e:	f000 f8ad 	bl	800b0cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2140      	movs	r1, #64	; 0x40
 800af78:	4618      	mov	r0, r3
 800af7a:	f000 f904 	bl	800b186 <TIM_ITRx_SetConfig>
      break;
 800af7e:	e009      	b.n	800af94 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4619      	mov	r1, r3
 800af8a:	4610      	mov	r0, r2
 800af8c:	f000 f8fb 	bl	800b186 <TIM_ITRx_SetConfig>
        break;
 800af90:	e000      	b.n	800af94 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800af92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800afae:	b480      	push	{r7}
 800afb0:	b083      	sub	sp, #12
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800afb6:	bf00      	nop
 800afb8:	370c      	adds	r7, #12
 800afba:	46bd      	mov	sp, r7
 800afbc:	bc80      	pop	{r7}
 800afbe:	4770      	bx	lr

0800afc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	bc80      	pop	{r7}
 800afd0:	4770      	bx	lr

0800afd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800afd2:	b480      	push	{r7}
 800afd4:	b083      	sub	sp, #12
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800afda:	bf00      	nop
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	bc80      	pop	{r7}
 800afe2:	4770      	bx	lr

0800afe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bc80      	pop	{r7}
 800aff4:	4770      	bx	lr

0800aff6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aff6:	b480      	push	{r7}
 800aff8:	b083      	sub	sp, #12
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800affe:	bf00      	nop
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	bc80      	pop	{r7}
 800b006:	4770      	bx	lr

0800b008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a29      	ldr	r2, [pc, #164]	; (800b0c0 <TIM_Base_SetConfig+0xb8>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d00b      	beq.n	800b038 <TIM_Base_SetConfig+0x30>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b026:	d007      	beq.n	800b038 <TIM_Base_SetConfig+0x30>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a26      	ldr	r2, [pc, #152]	; (800b0c4 <TIM_Base_SetConfig+0xbc>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d003      	beq.n	800b038 <TIM_Base_SetConfig+0x30>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a25      	ldr	r2, [pc, #148]	; (800b0c8 <TIM_Base_SetConfig+0xc0>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d108      	bne.n	800b04a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b03e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	4313      	orrs	r3, r2
 800b048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a1c      	ldr	r2, [pc, #112]	; (800b0c0 <TIM_Base_SetConfig+0xb8>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d00b      	beq.n	800b06a <TIM_Base_SetConfig+0x62>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b058:	d007      	beq.n	800b06a <TIM_Base_SetConfig+0x62>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a19      	ldr	r2, [pc, #100]	; (800b0c4 <TIM_Base_SetConfig+0xbc>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d003      	beq.n	800b06a <TIM_Base_SetConfig+0x62>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4a18      	ldr	r2, [pc, #96]	; (800b0c8 <TIM_Base_SetConfig+0xc0>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d108      	bne.n	800b07c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	4313      	orrs	r3, r2
 800b07a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	4313      	orrs	r3, r2
 800b088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	689a      	ldr	r2, [r3, #8]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a07      	ldr	r2, [pc, #28]	; (800b0c0 <TIM_Base_SetConfig+0xb8>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d103      	bne.n	800b0b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	691a      	ldr	r2, [r3, #16]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	615a      	str	r2, [r3, #20]
}
 800b0b6:	bf00      	nop
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bc80      	pop	{r7}
 800b0be:	4770      	bx	lr
 800b0c0:	40012c00 	.word	0x40012c00
 800b0c4:	40000400 	.word	0x40000400
 800b0c8:	40000800 	.word	0x40000800

0800b0cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b087      	sub	sp, #28
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6a1b      	ldr	r3, [r3, #32]
 800b0dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	f023 0201 	bic.w	r2, r3, #1
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	011b      	lsls	r3, r3, #4
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	f023 030a 	bic.w	r3, r3, #10
 800b108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	4313      	orrs	r3, r2
 800b110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	697a      	ldr	r2, [r7, #20]
 800b11c:	621a      	str	r2, [r3, #32]
}
 800b11e:	bf00      	nop
 800b120:	371c      	adds	r7, #28
 800b122:	46bd      	mov	sp, r7
 800b124:	bc80      	pop	{r7}
 800b126:	4770      	bx	lr

0800b128 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b128:	b480      	push	{r7}
 800b12a:	b087      	sub	sp, #28
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6a1b      	ldr	r3, [r3, #32]
 800b138:	f023 0210 	bic.w	r2, r3, #16
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	699b      	ldr	r3, [r3, #24]
 800b144:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6a1b      	ldr	r3, [r3, #32]
 800b14a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b152:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	031b      	lsls	r3, r3, #12
 800b158:	697a      	ldr	r2, [r7, #20]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b164:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	011b      	lsls	r3, r3, #4
 800b16a:	693a      	ldr	r2, [r7, #16]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	697a      	ldr	r2, [r7, #20]
 800b174:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	693a      	ldr	r2, [r7, #16]
 800b17a:	621a      	str	r2, [r3, #32]
}
 800b17c:	bf00      	nop
 800b17e:	371c      	adds	r7, #28
 800b180:	46bd      	mov	sp, r7
 800b182:	bc80      	pop	{r7}
 800b184:	4770      	bx	lr

0800b186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b186:	b480      	push	{r7}
 800b188:	b085      	sub	sp, #20
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b19c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b19e:	683a      	ldr	r2, [r7, #0]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	f043 0307 	orr.w	r3, r3, #7
 800b1a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	609a      	str	r2, [r3, #8]
}
 800b1b0:	bf00      	nop
 800b1b2:	3714      	adds	r7, #20
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bc80      	pop	{r7}
 800b1b8:	4770      	bx	lr

0800b1ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b087      	sub	sp, #28
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	60f8      	str	r0, [r7, #12]
 800b1c2:	60b9      	str	r1, [r7, #8]
 800b1c4:	607a      	str	r2, [r7, #4]
 800b1c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	021a      	lsls	r2, r3, #8
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	431a      	orrs	r2, r3
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	697a      	ldr	r2, [r7, #20]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	697a      	ldr	r2, [r7, #20]
 800b1ec:	609a      	str	r2, [r3, #8]
}
 800b1ee:	bf00      	nop
 800b1f0:	371c      	adds	r7, #28
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bc80      	pop	{r7}
 800b1f6:	4770      	bx	lr

0800b1f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d101      	bne.n	800b210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b20c:	2302      	movs	r3, #2
 800b20e:	e046      	b.n	800b29e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2202      	movs	r2, #2
 800b21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	4313      	orrs	r3, r2
 800b240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a16      	ldr	r2, [pc, #88]	; (800b2a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d00e      	beq.n	800b272 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b25c:	d009      	beq.n	800b272 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a12      	ldr	r2, [pc, #72]	; (800b2ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d004      	beq.n	800b272 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a10      	ldr	r2, [pc, #64]	; (800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d10c      	bne.n	800b28c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	4313      	orrs	r3, r2
 800b282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3714      	adds	r7, #20
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bc80      	pop	{r7}
 800b2a6:	4770      	bx	lr
 800b2a8:	40012c00 	.word	0x40012c00
 800b2ac:	40000400 	.word	0x40000400
 800b2b0:	40000800 	.word	0x40000800

0800b2b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bc80      	pop	{r7}
 800b2c4:	4770      	bx	lr

0800b2c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2c6:	b480      	push	{r7}
 800b2c8:	b083      	sub	sp, #12
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2ce:	bf00      	nop
 800b2d0:	370c      	adds	r7, #12
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bc80      	pop	{r7}
 800b2d6:	4770      	bx	lr

0800b2d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e03f      	b.n	800b36a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d106      	bne.n	800b304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7fc f8fa 	bl	80074f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2224      	movs	r2, #36	; 0x24
 800b308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	68da      	ldr	r2, [r3, #12]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b31a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f829 	bl	800b374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	691a      	ldr	r2, [r3, #16]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	695a      	ldr	r2, [r3, #20]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68da      	ldr	r2, [r3, #12]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2220      	movs	r2, #32
 800b35c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2220      	movs	r2, #32
 800b364:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	68da      	ldr	r2, [r3, #12]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	430a      	orrs	r2, r1
 800b390:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	689a      	ldr	r2, [r3, #8]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	431a      	orrs	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	695b      	ldr	r3, [r3, #20]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b3ae:	f023 030c 	bic.w	r3, r3, #12
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	6812      	ldr	r2, [r2, #0]
 800b3b6:	68b9      	ldr	r1, [r7, #8]
 800b3b8:	430b      	orrs	r3, r1
 800b3ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	699a      	ldr	r2, [r3, #24]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	430a      	orrs	r2, r1
 800b3d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a2c      	ldr	r2, [pc, #176]	; (800b488 <UART_SetConfig+0x114>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d103      	bne.n	800b3e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b3dc:	f7ff fa9e 	bl	800a91c <HAL_RCC_GetPCLK2Freq>
 800b3e0:	60f8      	str	r0, [r7, #12]
 800b3e2:	e002      	b.n	800b3ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b3e4:	f7ff fa86 	bl	800a8f4 <HAL_RCC_GetPCLK1Freq>
 800b3e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	009a      	lsls	r2, r3, #2
 800b3f4:	441a      	add	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b400:	4a22      	ldr	r2, [pc, #136]	; (800b48c <UART_SetConfig+0x118>)
 800b402:	fba2 2303 	umull	r2, r3, r2, r3
 800b406:	095b      	lsrs	r3, r3, #5
 800b408:	0119      	lsls	r1, r3, #4
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	4613      	mov	r3, r2
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	4413      	add	r3, r2
 800b412:	009a      	lsls	r2, r3, #2
 800b414:	441a      	add	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b420:	4b1a      	ldr	r3, [pc, #104]	; (800b48c <UART_SetConfig+0x118>)
 800b422:	fba3 0302 	umull	r0, r3, r3, r2
 800b426:	095b      	lsrs	r3, r3, #5
 800b428:	2064      	movs	r0, #100	; 0x64
 800b42a:	fb00 f303 	mul.w	r3, r0, r3
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	011b      	lsls	r3, r3, #4
 800b432:	3332      	adds	r3, #50	; 0x32
 800b434:	4a15      	ldr	r2, [pc, #84]	; (800b48c <UART_SetConfig+0x118>)
 800b436:	fba2 2303 	umull	r2, r3, r2, r3
 800b43a:	095b      	lsrs	r3, r3, #5
 800b43c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b440:	4419      	add	r1, r3
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	4613      	mov	r3, r2
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4413      	add	r3, r2
 800b44a:	009a      	lsls	r2, r3, #2
 800b44c:	441a      	add	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	fbb2 f2f3 	udiv	r2, r2, r3
 800b458:	4b0c      	ldr	r3, [pc, #48]	; (800b48c <UART_SetConfig+0x118>)
 800b45a:	fba3 0302 	umull	r0, r3, r3, r2
 800b45e:	095b      	lsrs	r3, r3, #5
 800b460:	2064      	movs	r0, #100	; 0x64
 800b462:	fb00 f303 	mul.w	r3, r0, r3
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	011b      	lsls	r3, r3, #4
 800b46a:	3332      	adds	r3, #50	; 0x32
 800b46c:	4a07      	ldr	r2, [pc, #28]	; (800b48c <UART_SetConfig+0x118>)
 800b46e:	fba2 2303 	umull	r2, r3, r2, r3
 800b472:	095b      	lsrs	r3, r3, #5
 800b474:	f003 020f 	and.w	r2, r3, #15
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	440a      	add	r2, r1
 800b47e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b480:	bf00      	nop
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	40013800 	.word	0x40013800
 800b48c:	51eb851f 	.word	0x51eb851f

0800b490 <__errno>:
 800b490:	4b01      	ldr	r3, [pc, #4]	; (800b498 <__errno+0x8>)
 800b492:	6818      	ldr	r0, [r3, #0]
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	20000090 	.word	0x20000090

0800b49c <__libc_init_array>:
 800b49c:	b570      	push	{r4, r5, r6, lr}
 800b49e:	2500      	movs	r5, #0
 800b4a0:	4e0c      	ldr	r6, [pc, #48]	; (800b4d4 <__libc_init_array+0x38>)
 800b4a2:	4c0d      	ldr	r4, [pc, #52]	; (800b4d8 <__libc_init_array+0x3c>)
 800b4a4:	1ba4      	subs	r4, r4, r6
 800b4a6:	10a4      	asrs	r4, r4, #2
 800b4a8:	42a5      	cmp	r5, r4
 800b4aa:	d109      	bne.n	800b4c0 <__libc_init_array+0x24>
 800b4ac:	f002 fafe 	bl	800daac <_init>
 800b4b0:	2500      	movs	r5, #0
 800b4b2:	4e0a      	ldr	r6, [pc, #40]	; (800b4dc <__libc_init_array+0x40>)
 800b4b4:	4c0a      	ldr	r4, [pc, #40]	; (800b4e0 <__libc_init_array+0x44>)
 800b4b6:	1ba4      	subs	r4, r4, r6
 800b4b8:	10a4      	asrs	r4, r4, #2
 800b4ba:	42a5      	cmp	r5, r4
 800b4bc:	d105      	bne.n	800b4ca <__libc_init_array+0x2e>
 800b4be:	bd70      	pop	{r4, r5, r6, pc}
 800b4c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4c4:	4798      	blx	r3
 800b4c6:	3501      	adds	r5, #1
 800b4c8:	e7ee      	b.n	800b4a8 <__libc_init_array+0xc>
 800b4ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4ce:	4798      	blx	r3
 800b4d0:	3501      	adds	r5, #1
 800b4d2:	e7f2      	b.n	800b4ba <__libc_init_array+0x1e>
 800b4d4:	0800e7f4 	.word	0x0800e7f4
 800b4d8:	0800e7f4 	.word	0x0800e7f4
 800b4dc:	0800e7f4 	.word	0x0800e7f4
 800b4e0:	0800e7f8 	.word	0x0800e7f8

0800b4e4 <__itoa>:
 800b4e4:	1e93      	subs	r3, r2, #2
 800b4e6:	2b22      	cmp	r3, #34	; 0x22
 800b4e8:	b510      	push	{r4, lr}
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	d904      	bls.n	800b4f8 <__itoa+0x14>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	461c      	mov	r4, r3
 800b4f2:	700b      	strb	r3, [r1, #0]
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	bd10      	pop	{r4, pc}
 800b4f8:	2a0a      	cmp	r2, #10
 800b4fa:	d109      	bne.n	800b510 <__itoa+0x2c>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	da07      	bge.n	800b510 <__itoa+0x2c>
 800b500:	232d      	movs	r3, #45	; 0x2d
 800b502:	700b      	strb	r3, [r1, #0]
 800b504:	2101      	movs	r1, #1
 800b506:	4240      	negs	r0, r0
 800b508:	4421      	add	r1, r4
 800b50a:	f000 fc9d 	bl	800be48 <__utoa>
 800b50e:	e7f1      	b.n	800b4f4 <__itoa+0x10>
 800b510:	2100      	movs	r1, #0
 800b512:	e7f9      	b.n	800b508 <__itoa+0x24>

0800b514 <itoa>:
 800b514:	f7ff bfe6 	b.w	800b4e4 <__itoa>

0800b518 <__locale_ctype_ptr>:
 800b518:	4b04      	ldr	r3, [pc, #16]	; (800b52c <__locale_ctype_ptr+0x14>)
 800b51a:	4a05      	ldr	r2, [pc, #20]	; (800b530 <__locale_ctype_ptr+0x18>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	6a1b      	ldr	r3, [r3, #32]
 800b520:	2b00      	cmp	r3, #0
 800b522:	bf08      	it	eq
 800b524:	4613      	moveq	r3, r2
 800b526:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800b52a:	4770      	bx	lr
 800b52c:	20000090 	.word	0x20000090
 800b530:	200000f4 	.word	0x200000f4

0800b534 <__ascii_mbtowc>:
 800b534:	b082      	sub	sp, #8
 800b536:	b901      	cbnz	r1, 800b53a <__ascii_mbtowc+0x6>
 800b538:	a901      	add	r1, sp, #4
 800b53a:	b142      	cbz	r2, 800b54e <__ascii_mbtowc+0x1a>
 800b53c:	b14b      	cbz	r3, 800b552 <__ascii_mbtowc+0x1e>
 800b53e:	7813      	ldrb	r3, [r2, #0]
 800b540:	600b      	str	r3, [r1, #0]
 800b542:	7812      	ldrb	r2, [r2, #0]
 800b544:	1c10      	adds	r0, r2, #0
 800b546:	bf18      	it	ne
 800b548:	2001      	movne	r0, #1
 800b54a:	b002      	add	sp, #8
 800b54c:	4770      	bx	lr
 800b54e:	4610      	mov	r0, r2
 800b550:	e7fb      	b.n	800b54a <__ascii_mbtowc+0x16>
 800b552:	f06f 0001 	mvn.w	r0, #1
 800b556:	e7f8      	b.n	800b54a <__ascii_mbtowc+0x16>

0800b558 <memset>:
 800b558:	4603      	mov	r3, r0
 800b55a:	4402      	add	r2, r0
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d100      	bne.n	800b562 <memset+0xa>
 800b560:	4770      	bx	lr
 800b562:	f803 1b01 	strb.w	r1, [r3], #1
 800b566:	e7f9      	b.n	800b55c <memset+0x4>

0800b568 <__cvt>:
 800b568:	2b00      	cmp	r3, #0
 800b56a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b56e:	461e      	mov	r6, r3
 800b570:	bfbb      	ittet	lt
 800b572:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b576:	461e      	movlt	r6, r3
 800b578:	2300      	movge	r3, #0
 800b57a:	232d      	movlt	r3, #45	; 0x2d
 800b57c:	b088      	sub	sp, #32
 800b57e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b580:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800b584:	f027 0720 	bic.w	r7, r7, #32
 800b588:	2f46      	cmp	r7, #70	; 0x46
 800b58a:	4614      	mov	r4, r2
 800b58c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b58e:	700b      	strb	r3, [r1, #0]
 800b590:	d004      	beq.n	800b59c <__cvt+0x34>
 800b592:	2f45      	cmp	r7, #69	; 0x45
 800b594:	d100      	bne.n	800b598 <__cvt+0x30>
 800b596:	3501      	adds	r5, #1
 800b598:	2302      	movs	r3, #2
 800b59a:	e000      	b.n	800b59e <__cvt+0x36>
 800b59c:	2303      	movs	r3, #3
 800b59e:	aa07      	add	r2, sp, #28
 800b5a0:	9204      	str	r2, [sp, #16]
 800b5a2:	aa06      	add	r2, sp, #24
 800b5a4:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b5a8:	e9cd 3500 	strd	r3, r5, [sp]
 800b5ac:	4622      	mov	r2, r4
 800b5ae:	4633      	mov	r3, r6
 800b5b0:	f000 fd26 	bl	800c000 <_dtoa_r>
 800b5b4:	2f47      	cmp	r7, #71	; 0x47
 800b5b6:	4680      	mov	r8, r0
 800b5b8:	d102      	bne.n	800b5c0 <__cvt+0x58>
 800b5ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5bc:	07db      	lsls	r3, r3, #31
 800b5be:	d526      	bpl.n	800b60e <__cvt+0xa6>
 800b5c0:	2f46      	cmp	r7, #70	; 0x46
 800b5c2:	eb08 0905 	add.w	r9, r8, r5
 800b5c6:	d111      	bne.n	800b5ec <__cvt+0x84>
 800b5c8:	f898 3000 	ldrb.w	r3, [r8]
 800b5cc:	2b30      	cmp	r3, #48	; 0x30
 800b5ce:	d10a      	bne.n	800b5e6 <__cvt+0x7e>
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	f7f5 f9e6 	bl	80009a8 <__aeabi_dcmpeq>
 800b5dc:	b918      	cbnz	r0, 800b5e6 <__cvt+0x7e>
 800b5de:	f1c5 0501 	rsb	r5, r5, #1
 800b5e2:	f8ca 5000 	str.w	r5, [sl]
 800b5e6:	f8da 3000 	ldr.w	r3, [sl]
 800b5ea:	4499      	add	r9, r3
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	4631      	mov	r1, r6
 800b5f4:	f7f5 f9d8 	bl	80009a8 <__aeabi_dcmpeq>
 800b5f8:	b938      	cbnz	r0, 800b60a <__cvt+0xa2>
 800b5fa:	2230      	movs	r2, #48	; 0x30
 800b5fc:	9b07      	ldr	r3, [sp, #28]
 800b5fe:	454b      	cmp	r3, r9
 800b600:	d205      	bcs.n	800b60e <__cvt+0xa6>
 800b602:	1c59      	adds	r1, r3, #1
 800b604:	9107      	str	r1, [sp, #28]
 800b606:	701a      	strb	r2, [r3, #0]
 800b608:	e7f8      	b.n	800b5fc <__cvt+0x94>
 800b60a:	f8cd 901c 	str.w	r9, [sp, #28]
 800b60e:	4640      	mov	r0, r8
 800b610:	9b07      	ldr	r3, [sp, #28]
 800b612:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b614:	eba3 0308 	sub.w	r3, r3, r8
 800b618:	6013      	str	r3, [r2, #0]
 800b61a:	b008      	add	sp, #32
 800b61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b620 <__exponent>:
 800b620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b622:	2900      	cmp	r1, #0
 800b624:	bfb4      	ite	lt
 800b626:	232d      	movlt	r3, #45	; 0x2d
 800b628:	232b      	movge	r3, #43	; 0x2b
 800b62a:	4604      	mov	r4, r0
 800b62c:	bfb8      	it	lt
 800b62e:	4249      	neglt	r1, r1
 800b630:	2909      	cmp	r1, #9
 800b632:	f804 2b02 	strb.w	r2, [r4], #2
 800b636:	7043      	strb	r3, [r0, #1]
 800b638:	dd21      	ble.n	800b67e <__exponent+0x5e>
 800b63a:	f10d 0307 	add.w	r3, sp, #7
 800b63e:	461f      	mov	r7, r3
 800b640:	260a      	movs	r6, #10
 800b642:	fb91 f5f6 	sdiv	r5, r1, r6
 800b646:	fb06 1115 	mls	r1, r6, r5, r1
 800b64a:	2d09      	cmp	r5, #9
 800b64c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800b650:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b654:	f103 32ff 	add.w	r2, r3, #4294967295
 800b658:	4629      	mov	r1, r5
 800b65a:	dc09      	bgt.n	800b670 <__exponent+0x50>
 800b65c:	3130      	adds	r1, #48	; 0x30
 800b65e:	3b02      	subs	r3, #2
 800b660:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b664:	42bb      	cmp	r3, r7
 800b666:	4622      	mov	r2, r4
 800b668:	d304      	bcc.n	800b674 <__exponent+0x54>
 800b66a:	1a10      	subs	r0, r2, r0
 800b66c:	b003      	add	sp, #12
 800b66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b670:	4613      	mov	r3, r2
 800b672:	e7e6      	b.n	800b642 <__exponent+0x22>
 800b674:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b678:	f804 2b01 	strb.w	r2, [r4], #1
 800b67c:	e7f2      	b.n	800b664 <__exponent+0x44>
 800b67e:	2330      	movs	r3, #48	; 0x30
 800b680:	4419      	add	r1, r3
 800b682:	7083      	strb	r3, [r0, #2]
 800b684:	1d02      	adds	r2, r0, #4
 800b686:	70c1      	strb	r1, [r0, #3]
 800b688:	e7ef      	b.n	800b66a <__exponent+0x4a>
	...

0800b68c <_printf_float>:
 800b68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b690:	b091      	sub	sp, #68	; 0x44
 800b692:	460c      	mov	r4, r1
 800b694:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b696:	4693      	mov	fp, r2
 800b698:	461e      	mov	r6, r3
 800b69a:	4605      	mov	r5, r0
 800b69c:	f001 fa64 	bl	800cb68 <_localeconv_r>
 800b6a0:	6803      	ldr	r3, [r0, #0]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a6:	f7f4 fd53 	bl	8000150 <strlen>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	930e      	str	r3, [sp, #56]	; 0x38
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	900a      	str	r0, [sp, #40]	; 0x28
 800b6b2:	3307      	adds	r3, #7
 800b6b4:	f023 0307 	bic.w	r3, r3, #7
 800b6b8:	f103 0208 	add.w	r2, r3, #8
 800b6bc:	f894 8018 	ldrb.w	r8, [r4, #24]
 800b6c0:	f8d4 a000 	ldr.w	sl, [r4]
 800b6c4:	603a      	str	r2, [r7, #0]
 800b6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b6ce:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800b6d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b6d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6dc:	4ba6      	ldr	r3, [pc, #664]	; (800b978 <_printf_float+0x2ec>)
 800b6de:	4638      	mov	r0, r7
 800b6e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6e2:	f7f5 f993 	bl	8000a0c <__aeabi_dcmpun>
 800b6e6:	bb68      	cbnz	r0, 800b744 <_printf_float+0xb8>
 800b6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ec:	4ba2      	ldr	r3, [pc, #648]	; (800b978 <_printf_float+0x2ec>)
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6f2:	f7f5 f96d 	bl	80009d0 <__aeabi_dcmple>
 800b6f6:	bb28      	cbnz	r0, 800b744 <_printf_float+0xb8>
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	4638      	mov	r0, r7
 800b6fe:	4649      	mov	r1, r9
 800b700:	f7f5 f95c 	bl	80009bc <__aeabi_dcmplt>
 800b704:	b110      	cbz	r0, 800b70c <_printf_float+0x80>
 800b706:	232d      	movs	r3, #45	; 0x2d
 800b708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b70c:	4f9b      	ldr	r7, [pc, #620]	; (800b97c <_printf_float+0x2f0>)
 800b70e:	4b9c      	ldr	r3, [pc, #624]	; (800b980 <_printf_float+0x2f4>)
 800b710:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b714:	bf98      	it	ls
 800b716:	461f      	movls	r7, r3
 800b718:	2303      	movs	r3, #3
 800b71a:	f04f 0900 	mov.w	r9, #0
 800b71e:	6123      	str	r3, [r4, #16]
 800b720:	f02a 0304 	bic.w	r3, sl, #4
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	9600      	str	r6, [sp, #0]
 800b728:	465b      	mov	r3, fp
 800b72a:	aa0f      	add	r2, sp, #60	; 0x3c
 800b72c:	4621      	mov	r1, r4
 800b72e:	4628      	mov	r0, r5
 800b730:	f000 f9e2 	bl	800baf8 <_printf_common>
 800b734:	3001      	adds	r0, #1
 800b736:	f040 8090 	bne.w	800b85a <_printf_float+0x1ce>
 800b73a:	f04f 30ff 	mov.w	r0, #4294967295
 800b73e:	b011      	add	sp, #68	; 0x44
 800b740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b744:	463a      	mov	r2, r7
 800b746:	464b      	mov	r3, r9
 800b748:	4638      	mov	r0, r7
 800b74a:	4649      	mov	r1, r9
 800b74c:	f7f5 f95e 	bl	8000a0c <__aeabi_dcmpun>
 800b750:	b110      	cbz	r0, 800b758 <_printf_float+0xcc>
 800b752:	4f8c      	ldr	r7, [pc, #560]	; (800b984 <_printf_float+0x2f8>)
 800b754:	4b8c      	ldr	r3, [pc, #560]	; (800b988 <_printf_float+0x2fc>)
 800b756:	e7db      	b.n	800b710 <_printf_float+0x84>
 800b758:	6863      	ldr	r3, [r4, #4]
 800b75a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800b75e:	1c59      	adds	r1, r3, #1
 800b760:	a80d      	add	r0, sp, #52	; 0x34
 800b762:	a90e      	add	r1, sp, #56	; 0x38
 800b764:	d140      	bne.n	800b7e8 <_printf_float+0x15c>
 800b766:	2306      	movs	r3, #6
 800b768:	6063      	str	r3, [r4, #4]
 800b76a:	f04f 0c00 	mov.w	ip, #0
 800b76e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800b772:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800b776:	6863      	ldr	r3, [r4, #4]
 800b778:	6022      	str	r2, [r4, #0]
 800b77a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	463a      	mov	r2, r7
 800b782:	464b      	mov	r3, r9
 800b784:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800b788:	4628      	mov	r0, r5
 800b78a:	f7ff feed 	bl	800b568 <__cvt>
 800b78e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800b792:	2b47      	cmp	r3, #71	; 0x47
 800b794:	4607      	mov	r7, r0
 800b796:	d109      	bne.n	800b7ac <_printf_float+0x120>
 800b798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b79a:	1cd8      	adds	r0, r3, #3
 800b79c:	db02      	blt.n	800b7a4 <_printf_float+0x118>
 800b79e:	6862      	ldr	r2, [r4, #4]
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	dd47      	ble.n	800b834 <_printf_float+0x1a8>
 800b7a4:	f1a8 0802 	sub.w	r8, r8, #2
 800b7a8:	fa5f f888 	uxtb.w	r8, r8
 800b7ac:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800b7b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b7b2:	d824      	bhi.n	800b7fe <_printf_float+0x172>
 800b7b4:	3901      	subs	r1, #1
 800b7b6:	4642      	mov	r2, r8
 800b7b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b7bc:	910d      	str	r1, [sp, #52]	; 0x34
 800b7be:	f7ff ff2f 	bl	800b620 <__exponent>
 800b7c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7c4:	4681      	mov	r9, r0
 800b7c6:	1813      	adds	r3, r2, r0
 800b7c8:	2a01      	cmp	r2, #1
 800b7ca:	6123      	str	r3, [r4, #16]
 800b7cc:	dc02      	bgt.n	800b7d4 <_printf_float+0x148>
 800b7ce:	6822      	ldr	r2, [r4, #0]
 800b7d0:	07d1      	lsls	r1, r2, #31
 800b7d2:	d501      	bpl.n	800b7d8 <_printf_float+0x14c>
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	6123      	str	r3, [r4, #16]
 800b7d8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d0a2      	beq.n	800b726 <_printf_float+0x9a>
 800b7e0:	232d      	movs	r3, #45	; 0x2d
 800b7e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7e6:	e79e      	b.n	800b726 <_printf_float+0x9a>
 800b7e8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800b7ec:	f000 816e 	beq.w	800bacc <_printf_float+0x440>
 800b7f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b7f4:	d1b9      	bne.n	800b76a <_printf_float+0xde>
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d1b7      	bne.n	800b76a <_printf_float+0xde>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e7b4      	b.n	800b768 <_printf_float+0xdc>
 800b7fe:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800b802:	d119      	bne.n	800b838 <_printf_float+0x1ac>
 800b804:	2900      	cmp	r1, #0
 800b806:	6863      	ldr	r3, [r4, #4]
 800b808:	dd0c      	ble.n	800b824 <_printf_float+0x198>
 800b80a:	6121      	str	r1, [r4, #16]
 800b80c:	b913      	cbnz	r3, 800b814 <_printf_float+0x188>
 800b80e:	6822      	ldr	r2, [r4, #0]
 800b810:	07d2      	lsls	r2, r2, #31
 800b812:	d502      	bpl.n	800b81a <_printf_float+0x18e>
 800b814:	3301      	adds	r3, #1
 800b816:	440b      	add	r3, r1
 800b818:	6123      	str	r3, [r4, #16]
 800b81a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b81c:	f04f 0900 	mov.w	r9, #0
 800b820:	65a3      	str	r3, [r4, #88]	; 0x58
 800b822:	e7d9      	b.n	800b7d8 <_printf_float+0x14c>
 800b824:	b913      	cbnz	r3, 800b82c <_printf_float+0x1a0>
 800b826:	6822      	ldr	r2, [r4, #0]
 800b828:	07d0      	lsls	r0, r2, #31
 800b82a:	d501      	bpl.n	800b830 <_printf_float+0x1a4>
 800b82c:	3302      	adds	r3, #2
 800b82e:	e7f3      	b.n	800b818 <_printf_float+0x18c>
 800b830:	2301      	movs	r3, #1
 800b832:	e7f1      	b.n	800b818 <_printf_float+0x18c>
 800b834:	f04f 0867 	mov.w	r8, #103	; 0x67
 800b838:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b83c:	4293      	cmp	r3, r2
 800b83e:	db05      	blt.n	800b84c <_printf_float+0x1c0>
 800b840:	6822      	ldr	r2, [r4, #0]
 800b842:	6123      	str	r3, [r4, #16]
 800b844:	07d1      	lsls	r1, r2, #31
 800b846:	d5e8      	bpl.n	800b81a <_printf_float+0x18e>
 800b848:	3301      	adds	r3, #1
 800b84a:	e7e5      	b.n	800b818 <_printf_float+0x18c>
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	bfcc      	ite	gt
 800b850:	2301      	movgt	r3, #1
 800b852:	f1c3 0302 	rsble	r3, r3, #2
 800b856:	4413      	add	r3, r2
 800b858:	e7de      	b.n	800b818 <_printf_float+0x18c>
 800b85a:	6823      	ldr	r3, [r4, #0]
 800b85c:	055a      	lsls	r2, r3, #21
 800b85e:	d407      	bmi.n	800b870 <_printf_float+0x1e4>
 800b860:	6923      	ldr	r3, [r4, #16]
 800b862:	463a      	mov	r2, r7
 800b864:	4659      	mov	r1, fp
 800b866:	4628      	mov	r0, r5
 800b868:	47b0      	blx	r6
 800b86a:	3001      	adds	r0, #1
 800b86c:	d129      	bne.n	800b8c2 <_printf_float+0x236>
 800b86e:	e764      	b.n	800b73a <_printf_float+0xae>
 800b870:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800b874:	f240 80d7 	bls.w	800ba26 <_printf_float+0x39a>
 800b878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b87c:	2200      	movs	r2, #0
 800b87e:	2300      	movs	r3, #0
 800b880:	f7f5 f892 	bl	80009a8 <__aeabi_dcmpeq>
 800b884:	b388      	cbz	r0, 800b8ea <_printf_float+0x25e>
 800b886:	2301      	movs	r3, #1
 800b888:	4a40      	ldr	r2, [pc, #256]	; (800b98c <_printf_float+0x300>)
 800b88a:	4659      	mov	r1, fp
 800b88c:	4628      	mov	r0, r5
 800b88e:	47b0      	blx	r6
 800b890:	3001      	adds	r0, #1
 800b892:	f43f af52 	beq.w	800b73a <_printf_float+0xae>
 800b896:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b89a:	429a      	cmp	r2, r3
 800b89c:	db02      	blt.n	800b8a4 <_printf_float+0x218>
 800b89e:	6823      	ldr	r3, [r4, #0]
 800b8a0:	07d8      	lsls	r0, r3, #31
 800b8a2:	d50e      	bpl.n	800b8c2 <_printf_float+0x236>
 800b8a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8a8:	4659      	mov	r1, fp
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	47b0      	blx	r6
 800b8ae:	3001      	adds	r0, #1
 800b8b0:	f43f af43 	beq.w	800b73a <_printf_float+0xae>
 800b8b4:	2700      	movs	r7, #0
 800b8b6:	f104 081a 	add.w	r8, r4, #26
 800b8ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	42bb      	cmp	r3, r7
 800b8c0:	dc09      	bgt.n	800b8d6 <_printf_float+0x24a>
 800b8c2:	6823      	ldr	r3, [r4, #0]
 800b8c4:	079f      	lsls	r7, r3, #30
 800b8c6:	f100 80fd 	bmi.w	800bac4 <_printf_float+0x438>
 800b8ca:	68e0      	ldr	r0, [r4, #12]
 800b8cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8ce:	4298      	cmp	r0, r3
 800b8d0:	bfb8      	it	lt
 800b8d2:	4618      	movlt	r0, r3
 800b8d4:	e733      	b.n	800b73e <_printf_float+0xb2>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	4642      	mov	r2, r8
 800b8da:	4659      	mov	r1, fp
 800b8dc:	4628      	mov	r0, r5
 800b8de:	47b0      	blx	r6
 800b8e0:	3001      	adds	r0, #1
 800b8e2:	f43f af2a 	beq.w	800b73a <_printf_float+0xae>
 800b8e6:	3701      	adds	r7, #1
 800b8e8:	e7e7      	b.n	800b8ba <_printf_float+0x22e>
 800b8ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	dc2b      	bgt.n	800b948 <_printf_float+0x2bc>
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	4a26      	ldr	r2, [pc, #152]	; (800b98c <_printf_float+0x300>)
 800b8f4:	4659      	mov	r1, fp
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	47b0      	blx	r6
 800b8fa:	3001      	adds	r0, #1
 800b8fc:	f43f af1d 	beq.w	800b73a <_printf_float+0xae>
 800b900:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b902:	b923      	cbnz	r3, 800b90e <_printf_float+0x282>
 800b904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b906:	b913      	cbnz	r3, 800b90e <_printf_float+0x282>
 800b908:	6823      	ldr	r3, [r4, #0]
 800b90a:	07d9      	lsls	r1, r3, #31
 800b90c:	d5d9      	bpl.n	800b8c2 <_printf_float+0x236>
 800b90e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b912:	4659      	mov	r1, fp
 800b914:	4628      	mov	r0, r5
 800b916:	47b0      	blx	r6
 800b918:	3001      	adds	r0, #1
 800b91a:	f43f af0e 	beq.w	800b73a <_printf_float+0xae>
 800b91e:	f04f 0800 	mov.w	r8, #0
 800b922:	f104 091a 	add.w	r9, r4, #26
 800b926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b928:	425b      	negs	r3, r3
 800b92a:	4543      	cmp	r3, r8
 800b92c:	dc01      	bgt.n	800b932 <_printf_float+0x2a6>
 800b92e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b930:	e797      	b.n	800b862 <_printf_float+0x1d6>
 800b932:	2301      	movs	r3, #1
 800b934:	464a      	mov	r2, r9
 800b936:	4659      	mov	r1, fp
 800b938:	4628      	mov	r0, r5
 800b93a:	47b0      	blx	r6
 800b93c:	3001      	adds	r0, #1
 800b93e:	f43f aefc 	beq.w	800b73a <_printf_float+0xae>
 800b942:	f108 0801 	add.w	r8, r8, #1
 800b946:	e7ee      	b.n	800b926 <_printf_float+0x29a>
 800b948:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b94a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b94c:	429a      	cmp	r2, r3
 800b94e:	bfa8      	it	ge
 800b950:	461a      	movge	r2, r3
 800b952:	2a00      	cmp	r2, #0
 800b954:	4690      	mov	r8, r2
 800b956:	dd07      	ble.n	800b968 <_printf_float+0x2dc>
 800b958:	4613      	mov	r3, r2
 800b95a:	4659      	mov	r1, fp
 800b95c:	463a      	mov	r2, r7
 800b95e:	4628      	mov	r0, r5
 800b960:	47b0      	blx	r6
 800b962:	3001      	adds	r0, #1
 800b964:	f43f aee9 	beq.w	800b73a <_printf_float+0xae>
 800b968:	f104 031a 	add.w	r3, r4, #26
 800b96c:	f04f 0a00 	mov.w	sl, #0
 800b970:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800b974:	930b      	str	r3, [sp, #44]	; 0x2c
 800b976:	e015      	b.n	800b9a4 <_printf_float+0x318>
 800b978:	7fefffff 	.word	0x7fefffff
 800b97c:	0800e576 	.word	0x0800e576
 800b980:	0800e572 	.word	0x0800e572
 800b984:	0800e57e 	.word	0x0800e57e
 800b988:	0800e57a 	.word	0x0800e57a
 800b98c:	0800e582 	.word	0x0800e582
 800b990:	2301      	movs	r3, #1
 800b992:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b994:	4659      	mov	r1, fp
 800b996:	4628      	mov	r0, r5
 800b998:	47b0      	blx	r6
 800b99a:	3001      	adds	r0, #1
 800b99c:	f43f aecd 	beq.w	800b73a <_printf_float+0xae>
 800b9a0:	f10a 0a01 	add.w	sl, sl, #1
 800b9a4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800b9a8:	eba9 0308 	sub.w	r3, r9, r8
 800b9ac:	4553      	cmp	r3, sl
 800b9ae:	dcef      	bgt.n	800b990 <_printf_float+0x304>
 800b9b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	444f      	add	r7, r9
 800b9b8:	db14      	blt.n	800b9e4 <_printf_float+0x358>
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	07da      	lsls	r2, r3, #31
 800b9be:	d411      	bmi.n	800b9e4 <_printf_float+0x358>
 800b9c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b9c4:	eba3 0209 	sub.w	r2, r3, r9
 800b9c8:	eba3 0901 	sub.w	r9, r3, r1
 800b9cc:	4591      	cmp	r9, r2
 800b9ce:	bfa8      	it	ge
 800b9d0:	4691      	movge	r9, r2
 800b9d2:	f1b9 0f00 	cmp.w	r9, #0
 800b9d6:	dc0d      	bgt.n	800b9f4 <_printf_float+0x368>
 800b9d8:	2700      	movs	r7, #0
 800b9da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9de:	f104 081a 	add.w	r8, r4, #26
 800b9e2:	e018      	b.n	800ba16 <_printf_float+0x38a>
 800b9e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9e8:	4659      	mov	r1, fp
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	47b0      	blx	r6
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	d1e6      	bne.n	800b9c0 <_printf_float+0x334>
 800b9f2:	e6a2      	b.n	800b73a <_printf_float+0xae>
 800b9f4:	464b      	mov	r3, r9
 800b9f6:	463a      	mov	r2, r7
 800b9f8:	4659      	mov	r1, fp
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	47b0      	blx	r6
 800b9fe:	3001      	adds	r0, #1
 800ba00:	d1ea      	bne.n	800b9d8 <_printf_float+0x34c>
 800ba02:	e69a      	b.n	800b73a <_printf_float+0xae>
 800ba04:	2301      	movs	r3, #1
 800ba06:	4642      	mov	r2, r8
 800ba08:	4659      	mov	r1, fp
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	47b0      	blx	r6
 800ba0e:	3001      	adds	r0, #1
 800ba10:	f43f ae93 	beq.w	800b73a <_printf_float+0xae>
 800ba14:	3701      	adds	r7, #1
 800ba16:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ba1a:	1a9b      	subs	r3, r3, r2
 800ba1c:	eba3 0309 	sub.w	r3, r3, r9
 800ba20:	42bb      	cmp	r3, r7
 800ba22:	dcef      	bgt.n	800ba04 <_printf_float+0x378>
 800ba24:	e74d      	b.n	800b8c2 <_printf_float+0x236>
 800ba26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba28:	2a01      	cmp	r2, #1
 800ba2a:	dc01      	bgt.n	800ba30 <_printf_float+0x3a4>
 800ba2c:	07db      	lsls	r3, r3, #31
 800ba2e:	d538      	bpl.n	800baa2 <_printf_float+0x416>
 800ba30:	2301      	movs	r3, #1
 800ba32:	463a      	mov	r2, r7
 800ba34:	4659      	mov	r1, fp
 800ba36:	4628      	mov	r0, r5
 800ba38:	47b0      	blx	r6
 800ba3a:	3001      	adds	r0, #1
 800ba3c:	f43f ae7d 	beq.w	800b73a <_printf_float+0xae>
 800ba40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba44:	4659      	mov	r1, fp
 800ba46:	4628      	mov	r0, r5
 800ba48:	47b0      	blx	r6
 800ba4a:	3001      	adds	r0, #1
 800ba4c:	f107 0701 	add.w	r7, r7, #1
 800ba50:	f43f ae73 	beq.w	800b73a <_printf_float+0xae>
 800ba54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f103 38ff 	add.w	r8, r3, #4294967295
 800ba60:	2300      	movs	r3, #0
 800ba62:	f7f4 ffa1 	bl	80009a8 <__aeabi_dcmpeq>
 800ba66:	b9c0      	cbnz	r0, 800ba9a <_printf_float+0x40e>
 800ba68:	4643      	mov	r3, r8
 800ba6a:	463a      	mov	r2, r7
 800ba6c:	4659      	mov	r1, fp
 800ba6e:	4628      	mov	r0, r5
 800ba70:	47b0      	blx	r6
 800ba72:	3001      	adds	r0, #1
 800ba74:	d10d      	bne.n	800ba92 <_printf_float+0x406>
 800ba76:	e660      	b.n	800b73a <_printf_float+0xae>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	4642      	mov	r2, r8
 800ba7c:	4659      	mov	r1, fp
 800ba7e:	4628      	mov	r0, r5
 800ba80:	47b0      	blx	r6
 800ba82:	3001      	adds	r0, #1
 800ba84:	f43f ae59 	beq.w	800b73a <_printf_float+0xae>
 800ba88:	3701      	adds	r7, #1
 800ba8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	42bb      	cmp	r3, r7
 800ba90:	dcf2      	bgt.n	800ba78 <_printf_float+0x3ec>
 800ba92:	464b      	mov	r3, r9
 800ba94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ba98:	e6e4      	b.n	800b864 <_printf_float+0x1d8>
 800ba9a:	2700      	movs	r7, #0
 800ba9c:	f104 081a 	add.w	r8, r4, #26
 800baa0:	e7f3      	b.n	800ba8a <_printf_float+0x3fe>
 800baa2:	2301      	movs	r3, #1
 800baa4:	e7e1      	b.n	800ba6a <_printf_float+0x3de>
 800baa6:	2301      	movs	r3, #1
 800baa8:	4642      	mov	r2, r8
 800baaa:	4659      	mov	r1, fp
 800baac:	4628      	mov	r0, r5
 800baae:	47b0      	blx	r6
 800bab0:	3001      	adds	r0, #1
 800bab2:	f43f ae42 	beq.w	800b73a <_printf_float+0xae>
 800bab6:	3701      	adds	r7, #1
 800bab8:	68e3      	ldr	r3, [r4, #12]
 800baba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800babc:	1a9b      	subs	r3, r3, r2
 800babe:	42bb      	cmp	r3, r7
 800bac0:	dcf1      	bgt.n	800baa6 <_printf_float+0x41a>
 800bac2:	e702      	b.n	800b8ca <_printf_float+0x23e>
 800bac4:	2700      	movs	r7, #0
 800bac6:	f104 0819 	add.w	r8, r4, #25
 800baca:	e7f5      	b.n	800bab8 <_printf_float+0x42c>
 800bacc:	2b00      	cmp	r3, #0
 800bace:	f43f ae94 	beq.w	800b7fa <_printf_float+0x16e>
 800bad2:	f04f 0c00 	mov.w	ip, #0
 800bad6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800bada:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800bade:	6022      	str	r2, [r4, #0]
 800bae0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800bae4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	463a      	mov	r2, r7
 800baec:	464b      	mov	r3, r9
 800baee:	4628      	mov	r0, r5
 800baf0:	f7ff fd3a 	bl	800b568 <__cvt>
 800baf4:	4607      	mov	r7, r0
 800baf6:	e64f      	b.n	800b798 <_printf_float+0x10c>

0800baf8 <_printf_common>:
 800baf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bafc:	4691      	mov	r9, r2
 800bafe:	461f      	mov	r7, r3
 800bb00:	688a      	ldr	r2, [r1, #8]
 800bb02:	690b      	ldr	r3, [r1, #16]
 800bb04:	4606      	mov	r6, r0
 800bb06:	4293      	cmp	r3, r2
 800bb08:	bfb8      	it	lt
 800bb0a:	4613      	movlt	r3, r2
 800bb0c:	f8c9 3000 	str.w	r3, [r9]
 800bb10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb14:	460c      	mov	r4, r1
 800bb16:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb1a:	b112      	cbz	r2, 800bb22 <_printf_common+0x2a>
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	f8c9 3000 	str.w	r3, [r9]
 800bb22:	6823      	ldr	r3, [r4, #0]
 800bb24:	0699      	lsls	r1, r3, #26
 800bb26:	bf42      	ittt	mi
 800bb28:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bb2c:	3302      	addmi	r3, #2
 800bb2e:	f8c9 3000 	strmi.w	r3, [r9]
 800bb32:	6825      	ldr	r5, [r4, #0]
 800bb34:	f015 0506 	ands.w	r5, r5, #6
 800bb38:	d107      	bne.n	800bb4a <_printf_common+0x52>
 800bb3a:	f104 0a19 	add.w	sl, r4, #25
 800bb3e:	68e3      	ldr	r3, [r4, #12]
 800bb40:	f8d9 2000 	ldr.w	r2, [r9]
 800bb44:	1a9b      	subs	r3, r3, r2
 800bb46:	42ab      	cmp	r3, r5
 800bb48:	dc29      	bgt.n	800bb9e <_printf_common+0xa6>
 800bb4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bb4e:	6822      	ldr	r2, [r4, #0]
 800bb50:	3300      	adds	r3, #0
 800bb52:	bf18      	it	ne
 800bb54:	2301      	movne	r3, #1
 800bb56:	0692      	lsls	r2, r2, #26
 800bb58:	d42e      	bmi.n	800bbb8 <_printf_common+0xc0>
 800bb5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb5e:	4639      	mov	r1, r7
 800bb60:	4630      	mov	r0, r6
 800bb62:	47c0      	blx	r8
 800bb64:	3001      	adds	r0, #1
 800bb66:	d021      	beq.n	800bbac <_printf_common+0xb4>
 800bb68:	6823      	ldr	r3, [r4, #0]
 800bb6a:	68e5      	ldr	r5, [r4, #12]
 800bb6c:	f003 0306 	and.w	r3, r3, #6
 800bb70:	2b04      	cmp	r3, #4
 800bb72:	bf18      	it	ne
 800bb74:	2500      	movne	r5, #0
 800bb76:	f8d9 2000 	ldr.w	r2, [r9]
 800bb7a:	f04f 0900 	mov.w	r9, #0
 800bb7e:	bf08      	it	eq
 800bb80:	1aad      	subeq	r5, r5, r2
 800bb82:	68a3      	ldr	r3, [r4, #8]
 800bb84:	6922      	ldr	r2, [r4, #16]
 800bb86:	bf08      	it	eq
 800bb88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	bfc4      	itt	gt
 800bb90:	1a9b      	subgt	r3, r3, r2
 800bb92:	18ed      	addgt	r5, r5, r3
 800bb94:	341a      	adds	r4, #26
 800bb96:	454d      	cmp	r5, r9
 800bb98:	d11a      	bne.n	800bbd0 <_printf_common+0xd8>
 800bb9a:	2000      	movs	r0, #0
 800bb9c:	e008      	b.n	800bbb0 <_printf_common+0xb8>
 800bb9e:	2301      	movs	r3, #1
 800bba0:	4652      	mov	r2, sl
 800bba2:	4639      	mov	r1, r7
 800bba4:	4630      	mov	r0, r6
 800bba6:	47c0      	blx	r8
 800bba8:	3001      	adds	r0, #1
 800bbaa:	d103      	bne.n	800bbb4 <_printf_common+0xbc>
 800bbac:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbb4:	3501      	adds	r5, #1
 800bbb6:	e7c2      	b.n	800bb3e <_printf_common+0x46>
 800bbb8:	2030      	movs	r0, #48	; 0x30
 800bbba:	18e1      	adds	r1, r4, r3
 800bbbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbc0:	1c5a      	adds	r2, r3, #1
 800bbc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbc6:	4422      	add	r2, r4
 800bbc8:	3302      	adds	r3, #2
 800bbca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbce:	e7c4      	b.n	800bb5a <_printf_common+0x62>
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	4622      	mov	r2, r4
 800bbd4:	4639      	mov	r1, r7
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	47c0      	blx	r8
 800bbda:	3001      	adds	r0, #1
 800bbdc:	d0e6      	beq.n	800bbac <_printf_common+0xb4>
 800bbde:	f109 0901 	add.w	r9, r9, #1
 800bbe2:	e7d8      	b.n	800bb96 <_printf_common+0x9e>

0800bbe4 <_printf_i>:
 800bbe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbe8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bbec:	460c      	mov	r4, r1
 800bbee:	7e09      	ldrb	r1, [r1, #24]
 800bbf0:	b085      	sub	sp, #20
 800bbf2:	296e      	cmp	r1, #110	; 0x6e
 800bbf4:	4617      	mov	r7, r2
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	4698      	mov	r8, r3
 800bbfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbfc:	f000 80b3 	beq.w	800bd66 <_printf_i+0x182>
 800bc00:	d822      	bhi.n	800bc48 <_printf_i+0x64>
 800bc02:	2963      	cmp	r1, #99	; 0x63
 800bc04:	d036      	beq.n	800bc74 <_printf_i+0x90>
 800bc06:	d80a      	bhi.n	800bc1e <_printf_i+0x3a>
 800bc08:	2900      	cmp	r1, #0
 800bc0a:	f000 80b9 	beq.w	800bd80 <_printf_i+0x19c>
 800bc0e:	2958      	cmp	r1, #88	; 0x58
 800bc10:	f000 8083 	beq.w	800bd1a <_printf_i+0x136>
 800bc14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bc1c:	e032      	b.n	800bc84 <_printf_i+0xa0>
 800bc1e:	2964      	cmp	r1, #100	; 0x64
 800bc20:	d001      	beq.n	800bc26 <_printf_i+0x42>
 800bc22:	2969      	cmp	r1, #105	; 0x69
 800bc24:	d1f6      	bne.n	800bc14 <_printf_i+0x30>
 800bc26:	6820      	ldr	r0, [r4, #0]
 800bc28:	6813      	ldr	r3, [r2, #0]
 800bc2a:	0605      	lsls	r5, r0, #24
 800bc2c:	f103 0104 	add.w	r1, r3, #4
 800bc30:	d52a      	bpl.n	800bc88 <_printf_i+0xa4>
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	6011      	str	r1, [r2, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	da03      	bge.n	800bc42 <_printf_i+0x5e>
 800bc3a:	222d      	movs	r2, #45	; 0x2d
 800bc3c:	425b      	negs	r3, r3
 800bc3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bc42:	486f      	ldr	r0, [pc, #444]	; (800be00 <_printf_i+0x21c>)
 800bc44:	220a      	movs	r2, #10
 800bc46:	e039      	b.n	800bcbc <_printf_i+0xd8>
 800bc48:	2973      	cmp	r1, #115	; 0x73
 800bc4a:	f000 809d 	beq.w	800bd88 <_printf_i+0x1a4>
 800bc4e:	d808      	bhi.n	800bc62 <_printf_i+0x7e>
 800bc50:	296f      	cmp	r1, #111	; 0x6f
 800bc52:	d020      	beq.n	800bc96 <_printf_i+0xb2>
 800bc54:	2970      	cmp	r1, #112	; 0x70
 800bc56:	d1dd      	bne.n	800bc14 <_printf_i+0x30>
 800bc58:	6823      	ldr	r3, [r4, #0]
 800bc5a:	f043 0320 	orr.w	r3, r3, #32
 800bc5e:	6023      	str	r3, [r4, #0]
 800bc60:	e003      	b.n	800bc6a <_printf_i+0x86>
 800bc62:	2975      	cmp	r1, #117	; 0x75
 800bc64:	d017      	beq.n	800bc96 <_printf_i+0xb2>
 800bc66:	2978      	cmp	r1, #120	; 0x78
 800bc68:	d1d4      	bne.n	800bc14 <_printf_i+0x30>
 800bc6a:	2378      	movs	r3, #120	; 0x78
 800bc6c:	4865      	ldr	r0, [pc, #404]	; (800be04 <_printf_i+0x220>)
 800bc6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc72:	e055      	b.n	800bd20 <_printf_i+0x13c>
 800bc74:	6813      	ldr	r3, [r2, #0]
 800bc76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc7a:	1d19      	adds	r1, r3, #4
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	6011      	str	r1, [r2, #0]
 800bc80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc84:	2301      	movs	r3, #1
 800bc86:	e08c      	b.n	800bda2 <_printf_i+0x1be>
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc8e:	6011      	str	r1, [r2, #0]
 800bc90:	bf18      	it	ne
 800bc92:	b21b      	sxthne	r3, r3
 800bc94:	e7cf      	b.n	800bc36 <_printf_i+0x52>
 800bc96:	6813      	ldr	r3, [r2, #0]
 800bc98:	6825      	ldr	r5, [r4, #0]
 800bc9a:	1d18      	adds	r0, r3, #4
 800bc9c:	6010      	str	r0, [r2, #0]
 800bc9e:	0628      	lsls	r0, r5, #24
 800bca0:	d501      	bpl.n	800bca6 <_printf_i+0xc2>
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	e002      	b.n	800bcac <_printf_i+0xc8>
 800bca6:	0668      	lsls	r0, r5, #25
 800bca8:	d5fb      	bpl.n	800bca2 <_printf_i+0xbe>
 800bcaa:	881b      	ldrh	r3, [r3, #0]
 800bcac:	296f      	cmp	r1, #111	; 0x6f
 800bcae:	bf14      	ite	ne
 800bcb0:	220a      	movne	r2, #10
 800bcb2:	2208      	moveq	r2, #8
 800bcb4:	4852      	ldr	r0, [pc, #328]	; (800be00 <_printf_i+0x21c>)
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcbc:	6865      	ldr	r5, [r4, #4]
 800bcbe:	2d00      	cmp	r5, #0
 800bcc0:	60a5      	str	r5, [r4, #8]
 800bcc2:	f2c0 8095 	blt.w	800bdf0 <_printf_i+0x20c>
 800bcc6:	6821      	ldr	r1, [r4, #0]
 800bcc8:	f021 0104 	bic.w	r1, r1, #4
 800bccc:	6021      	str	r1, [r4, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d13d      	bne.n	800bd4e <_printf_i+0x16a>
 800bcd2:	2d00      	cmp	r5, #0
 800bcd4:	f040 808e 	bne.w	800bdf4 <_printf_i+0x210>
 800bcd8:	4665      	mov	r5, ip
 800bcda:	2a08      	cmp	r2, #8
 800bcdc:	d10b      	bne.n	800bcf6 <_printf_i+0x112>
 800bcde:	6823      	ldr	r3, [r4, #0]
 800bce0:	07db      	lsls	r3, r3, #31
 800bce2:	d508      	bpl.n	800bcf6 <_printf_i+0x112>
 800bce4:	6923      	ldr	r3, [r4, #16]
 800bce6:	6862      	ldr	r2, [r4, #4]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	bfde      	ittt	le
 800bcec:	2330      	movle	r3, #48	; 0x30
 800bcee:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcf2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bcf6:	ebac 0305 	sub.w	r3, ip, r5
 800bcfa:	6123      	str	r3, [r4, #16]
 800bcfc:	f8cd 8000 	str.w	r8, [sp]
 800bd00:	463b      	mov	r3, r7
 800bd02:	aa03      	add	r2, sp, #12
 800bd04:	4621      	mov	r1, r4
 800bd06:	4630      	mov	r0, r6
 800bd08:	f7ff fef6 	bl	800baf8 <_printf_common>
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	d14d      	bne.n	800bdac <_printf_i+0x1c8>
 800bd10:	f04f 30ff 	mov.w	r0, #4294967295
 800bd14:	b005      	add	sp, #20
 800bd16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd1a:	4839      	ldr	r0, [pc, #228]	; (800be00 <_printf_i+0x21c>)
 800bd1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bd20:	6813      	ldr	r3, [r2, #0]
 800bd22:	6821      	ldr	r1, [r4, #0]
 800bd24:	1d1d      	adds	r5, r3, #4
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	6015      	str	r5, [r2, #0]
 800bd2a:	060a      	lsls	r2, r1, #24
 800bd2c:	d50b      	bpl.n	800bd46 <_printf_i+0x162>
 800bd2e:	07ca      	lsls	r2, r1, #31
 800bd30:	bf44      	itt	mi
 800bd32:	f041 0120 	orrmi.w	r1, r1, #32
 800bd36:	6021      	strmi	r1, [r4, #0]
 800bd38:	b91b      	cbnz	r3, 800bd42 <_printf_i+0x15e>
 800bd3a:	6822      	ldr	r2, [r4, #0]
 800bd3c:	f022 0220 	bic.w	r2, r2, #32
 800bd40:	6022      	str	r2, [r4, #0]
 800bd42:	2210      	movs	r2, #16
 800bd44:	e7b7      	b.n	800bcb6 <_printf_i+0xd2>
 800bd46:	064d      	lsls	r5, r1, #25
 800bd48:	bf48      	it	mi
 800bd4a:	b29b      	uxthmi	r3, r3
 800bd4c:	e7ef      	b.n	800bd2e <_printf_i+0x14a>
 800bd4e:	4665      	mov	r5, ip
 800bd50:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd54:	fb02 3311 	mls	r3, r2, r1, r3
 800bd58:	5cc3      	ldrb	r3, [r0, r3]
 800bd5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bd5e:	460b      	mov	r3, r1
 800bd60:	2900      	cmp	r1, #0
 800bd62:	d1f5      	bne.n	800bd50 <_printf_i+0x16c>
 800bd64:	e7b9      	b.n	800bcda <_printf_i+0xf6>
 800bd66:	6813      	ldr	r3, [r2, #0]
 800bd68:	6825      	ldr	r5, [r4, #0]
 800bd6a:	1d18      	adds	r0, r3, #4
 800bd6c:	6961      	ldr	r1, [r4, #20]
 800bd6e:	6010      	str	r0, [r2, #0]
 800bd70:	0628      	lsls	r0, r5, #24
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	d501      	bpl.n	800bd7a <_printf_i+0x196>
 800bd76:	6019      	str	r1, [r3, #0]
 800bd78:	e002      	b.n	800bd80 <_printf_i+0x19c>
 800bd7a:	066a      	lsls	r2, r5, #25
 800bd7c:	d5fb      	bpl.n	800bd76 <_printf_i+0x192>
 800bd7e:	8019      	strh	r1, [r3, #0]
 800bd80:	2300      	movs	r3, #0
 800bd82:	4665      	mov	r5, ip
 800bd84:	6123      	str	r3, [r4, #16]
 800bd86:	e7b9      	b.n	800bcfc <_printf_i+0x118>
 800bd88:	6813      	ldr	r3, [r2, #0]
 800bd8a:	1d19      	adds	r1, r3, #4
 800bd8c:	6011      	str	r1, [r2, #0]
 800bd8e:	681d      	ldr	r5, [r3, #0]
 800bd90:	6862      	ldr	r2, [r4, #4]
 800bd92:	2100      	movs	r1, #0
 800bd94:	4628      	mov	r0, r5
 800bd96:	f000 fefd 	bl	800cb94 <memchr>
 800bd9a:	b108      	cbz	r0, 800bda0 <_printf_i+0x1bc>
 800bd9c:	1b40      	subs	r0, r0, r5
 800bd9e:	6060      	str	r0, [r4, #4]
 800bda0:	6863      	ldr	r3, [r4, #4]
 800bda2:	6123      	str	r3, [r4, #16]
 800bda4:	2300      	movs	r3, #0
 800bda6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdaa:	e7a7      	b.n	800bcfc <_printf_i+0x118>
 800bdac:	6923      	ldr	r3, [r4, #16]
 800bdae:	462a      	mov	r2, r5
 800bdb0:	4639      	mov	r1, r7
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	47c0      	blx	r8
 800bdb6:	3001      	adds	r0, #1
 800bdb8:	d0aa      	beq.n	800bd10 <_printf_i+0x12c>
 800bdba:	6823      	ldr	r3, [r4, #0]
 800bdbc:	079b      	lsls	r3, r3, #30
 800bdbe:	d413      	bmi.n	800bde8 <_printf_i+0x204>
 800bdc0:	68e0      	ldr	r0, [r4, #12]
 800bdc2:	9b03      	ldr	r3, [sp, #12]
 800bdc4:	4298      	cmp	r0, r3
 800bdc6:	bfb8      	it	lt
 800bdc8:	4618      	movlt	r0, r3
 800bdca:	e7a3      	b.n	800bd14 <_printf_i+0x130>
 800bdcc:	2301      	movs	r3, #1
 800bdce:	464a      	mov	r2, r9
 800bdd0:	4639      	mov	r1, r7
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	47c0      	blx	r8
 800bdd6:	3001      	adds	r0, #1
 800bdd8:	d09a      	beq.n	800bd10 <_printf_i+0x12c>
 800bdda:	3501      	adds	r5, #1
 800bddc:	68e3      	ldr	r3, [r4, #12]
 800bdde:	9a03      	ldr	r2, [sp, #12]
 800bde0:	1a9b      	subs	r3, r3, r2
 800bde2:	42ab      	cmp	r3, r5
 800bde4:	dcf2      	bgt.n	800bdcc <_printf_i+0x1e8>
 800bde6:	e7eb      	b.n	800bdc0 <_printf_i+0x1dc>
 800bde8:	2500      	movs	r5, #0
 800bdea:	f104 0919 	add.w	r9, r4, #25
 800bdee:	e7f5      	b.n	800bddc <_printf_i+0x1f8>
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1ac      	bne.n	800bd4e <_printf_i+0x16a>
 800bdf4:	7803      	ldrb	r3, [r0, #0]
 800bdf6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdfa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdfe:	e76c      	b.n	800bcda <_printf_i+0xf6>
 800be00:	0800e584 	.word	0x0800e584
 800be04:	0800e595 	.word	0x0800e595

0800be08 <siprintf>:
 800be08:	b40e      	push	{r1, r2, r3}
 800be0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be0e:	b500      	push	{lr}
 800be10:	b09c      	sub	sp, #112	; 0x70
 800be12:	ab1d      	add	r3, sp, #116	; 0x74
 800be14:	9002      	str	r0, [sp, #8]
 800be16:	9006      	str	r0, [sp, #24]
 800be18:	9107      	str	r1, [sp, #28]
 800be1a:	9104      	str	r1, [sp, #16]
 800be1c:	4808      	ldr	r0, [pc, #32]	; (800be40 <siprintf+0x38>)
 800be1e:	4909      	ldr	r1, [pc, #36]	; (800be44 <siprintf+0x3c>)
 800be20:	f853 2b04 	ldr.w	r2, [r3], #4
 800be24:	9105      	str	r1, [sp, #20]
 800be26:	6800      	ldr	r0, [r0, #0]
 800be28:	a902      	add	r1, sp, #8
 800be2a:	9301      	str	r3, [sp, #4]
 800be2c:	f001 fab6 	bl	800d39c <_svfiprintf_r>
 800be30:	2200      	movs	r2, #0
 800be32:	9b02      	ldr	r3, [sp, #8]
 800be34:	701a      	strb	r2, [r3, #0]
 800be36:	b01c      	add	sp, #112	; 0x70
 800be38:	f85d eb04 	ldr.w	lr, [sp], #4
 800be3c:	b003      	add	sp, #12
 800be3e:	4770      	bx	lr
 800be40:	20000090 	.word	0x20000090
 800be44:	ffff0208 	.word	0xffff0208

0800be48 <__utoa>:
 800be48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be4a:	b08b      	sub	sp, #44	; 0x2c
 800be4c:	4605      	mov	r5, r0
 800be4e:	460c      	mov	r4, r1
 800be50:	466e      	mov	r6, sp
 800be52:	4b1b      	ldr	r3, [pc, #108]	; (800bec0 <__utoa+0x78>)
 800be54:	f103 0c20 	add.w	ip, r3, #32
 800be58:	4637      	mov	r7, r6
 800be5a:	6818      	ldr	r0, [r3, #0]
 800be5c:	6859      	ldr	r1, [r3, #4]
 800be5e:	3308      	adds	r3, #8
 800be60:	c703      	stmia	r7!, {r0, r1}
 800be62:	4563      	cmp	r3, ip
 800be64:	463e      	mov	r6, r7
 800be66:	d1f7      	bne.n	800be58 <__utoa+0x10>
 800be68:	6818      	ldr	r0, [r3, #0]
 800be6a:	791b      	ldrb	r3, [r3, #4]
 800be6c:	6038      	str	r0, [r7, #0]
 800be6e:	713b      	strb	r3, [r7, #4]
 800be70:	1e93      	subs	r3, r2, #2
 800be72:	2b22      	cmp	r3, #34	; 0x22
 800be74:	f04f 0300 	mov.w	r3, #0
 800be78:	d904      	bls.n	800be84 <__utoa+0x3c>
 800be7a:	7023      	strb	r3, [r4, #0]
 800be7c:	461c      	mov	r4, r3
 800be7e:	4620      	mov	r0, r4
 800be80:	b00b      	add	sp, #44	; 0x2c
 800be82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be84:	1e66      	subs	r6, r4, #1
 800be86:	fbb5 f0f2 	udiv	r0, r5, r2
 800be8a:	fb02 5510 	mls	r5, r2, r0, r5
 800be8e:	af0a      	add	r7, sp, #40	; 0x28
 800be90:	443d      	add	r5, r7
 800be92:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800be96:	1c59      	adds	r1, r3, #1
 800be98:	f806 5f01 	strb.w	r5, [r6, #1]!
 800be9c:	4605      	mov	r5, r0
 800be9e:	b968      	cbnz	r0, 800bebc <__utoa+0x74>
 800bea0:	4622      	mov	r2, r4
 800bea2:	5460      	strb	r0, [r4, r1]
 800bea4:	4423      	add	r3, r4
 800bea6:	1b19      	subs	r1, r3, r4
 800bea8:	1b10      	subs	r0, r2, r4
 800beaa:	4281      	cmp	r1, r0
 800beac:	dde7      	ble.n	800be7e <__utoa+0x36>
 800beae:	7811      	ldrb	r1, [r2, #0]
 800beb0:	7818      	ldrb	r0, [r3, #0]
 800beb2:	f802 0b01 	strb.w	r0, [r2], #1
 800beb6:	f803 1901 	strb.w	r1, [r3], #-1
 800beba:	e7f4      	b.n	800bea6 <__utoa+0x5e>
 800bebc:	460b      	mov	r3, r1
 800bebe:	e7e2      	b.n	800be86 <__utoa+0x3e>
 800bec0:	0800e5a6 	.word	0x0800e5a6

0800bec4 <__ascii_wctomb>:
 800bec4:	b149      	cbz	r1, 800beda <__ascii_wctomb+0x16>
 800bec6:	2aff      	cmp	r2, #255	; 0xff
 800bec8:	bf8b      	itete	hi
 800beca:	238a      	movhi	r3, #138	; 0x8a
 800becc:	700a      	strbls	r2, [r1, #0]
 800bece:	6003      	strhi	r3, [r0, #0]
 800bed0:	2001      	movls	r0, #1
 800bed2:	bf88      	it	hi
 800bed4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bed8:	4770      	bx	lr
 800beda:	4608      	mov	r0, r1
 800bedc:	4770      	bx	lr

0800bede <quorem>:
 800bede:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee2:	6903      	ldr	r3, [r0, #16]
 800bee4:	690c      	ldr	r4, [r1, #16]
 800bee6:	4680      	mov	r8, r0
 800bee8:	42a3      	cmp	r3, r4
 800beea:	f2c0 8084 	blt.w	800bff6 <quorem+0x118>
 800beee:	3c01      	subs	r4, #1
 800bef0:	f101 0714 	add.w	r7, r1, #20
 800bef4:	f100 0614 	add.w	r6, r0, #20
 800bef8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800befc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bf00:	3501      	adds	r5, #1
 800bf02:	fbb0 f5f5 	udiv	r5, r0, r5
 800bf06:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bf0a:	eb06 030c 	add.w	r3, r6, ip
 800bf0e:	eb07 090c 	add.w	r9, r7, ip
 800bf12:	9301      	str	r3, [sp, #4]
 800bf14:	b39d      	cbz	r5, 800bf7e <quorem+0xa0>
 800bf16:	f04f 0a00 	mov.w	sl, #0
 800bf1a:	4638      	mov	r0, r7
 800bf1c:	46b6      	mov	lr, r6
 800bf1e:	46d3      	mov	fp, sl
 800bf20:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf24:	b293      	uxth	r3, r2
 800bf26:	fb05 a303 	mla	r3, r5, r3, sl
 800bf2a:	0c12      	lsrs	r2, r2, #16
 800bf2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf30:	fb05 a202 	mla	r2, r5, r2, sl
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	ebab 0303 	sub.w	r3, fp, r3
 800bf3a:	f8de b000 	ldr.w	fp, [lr]
 800bf3e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bf42:	fa1f fb8b 	uxth.w	fp, fp
 800bf46:	445b      	add	r3, fp
 800bf48:	fa1f fb82 	uxth.w	fp, r2
 800bf4c:	f8de 2000 	ldr.w	r2, [lr]
 800bf50:	4581      	cmp	r9, r0
 800bf52:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bf56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf60:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bf64:	f84e 3b04 	str.w	r3, [lr], #4
 800bf68:	d2da      	bcs.n	800bf20 <quorem+0x42>
 800bf6a:	f856 300c 	ldr.w	r3, [r6, ip]
 800bf6e:	b933      	cbnz	r3, 800bf7e <quorem+0xa0>
 800bf70:	9b01      	ldr	r3, [sp, #4]
 800bf72:	3b04      	subs	r3, #4
 800bf74:	429e      	cmp	r6, r3
 800bf76:	461a      	mov	r2, r3
 800bf78:	d331      	bcc.n	800bfde <quorem+0x100>
 800bf7a:	f8c8 4010 	str.w	r4, [r8, #16]
 800bf7e:	4640      	mov	r0, r8
 800bf80:	f001 f836 	bl	800cff0 <__mcmp>
 800bf84:	2800      	cmp	r0, #0
 800bf86:	db26      	blt.n	800bfd6 <quorem+0xf8>
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f04f 0c00 	mov.w	ip, #0
 800bf8e:	3501      	adds	r5, #1
 800bf90:	f857 1b04 	ldr.w	r1, [r7], #4
 800bf94:	f8d0 e000 	ldr.w	lr, [r0]
 800bf98:	b28b      	uxth	r3, r1
 800bf9a:	ebac 0303 	sub.w	r3, ip, r3
 800bf9e:	fa1f f28e 	uxth.w	r2, lr
 800bfa2:	4413      	add	r3, r2
 800bfa4:	0c0a      	lsrs	r2, r1, #16
 800bfa6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bfaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfb4:	45b9      	cmp	r9, r7
 800bfb6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bfba:	f840 3b04 	str.w	r3, [r0], #4
 800bfbe:	d2e7      	bcs.n	800bf90 <quorem+0xb2>
 800bfc0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bfc4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bfc8:	b92a      	cbnz	r2, 800bfd6 <quorem+0xf8>
 800bfca:	3b04      	subs	r3, #4
 800bfcc:	429e      	cmp	r6, r3
 800bfce:	461a      	mov	r2, r3
 800bfd0:	d30b      	bcc.n	800bfea <quorem+0x10c>
 800bfd2:	f8c8 4010 	str.w	r4, [r8, #16]
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	b003      	add	sp, #12
 800bfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfde:	6812      	ldr	r2, [r2, #0]
 800bfe0:	3b04      	subs	r3, #4
 800bfe2:	2a00      	cmp	r2, #0
 800bfe4:	d1c9      	bne.n	800bf7a <quorem+0x9c>
 800bfe6:	3c01      	subs	r4, #1
 800bfe8:	e7c4      	b.n	800bf74 <quorem+0x96>
 800bfea:	6812      	ldr	r2, [r2, #0]
 800bfec:	3b04      	subs	r3, #4
 800bfee:	2a00      	cmp	r2, #0
 800bff0:	d1ef      	bne.n	800bfd2 <quorem+0xf4>
 800bff2:	3c01      	subs	r4, #1
 800bff4:	e7ea      	b.n	800bfcc <quorem+0xee>
 800bff6:	2000      	movs	r0, #0
 800bff8:	e7ee      	b.n	800bfd8 <quorem+0xfa>
 800bffa:	0000      	movs	r0, r0
 800bffc:	0000      	movs	r0, r0
	...

0800c000 <_dtoa_r>:
 800c000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c004:	4616      	mov	r6, r2
 800c006:	461f      	mov	r7, r3
 800c008:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c00a:	b095      	sub	sp, #84	; 0x54
 800c00c:	4604      	mov	r4, r0
 800c00e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800c012:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c016:	b93d      	cbnz	r5, 800c028 <_dtoa_r+0x28>
 800c018:	2010      	movs	r0, #16
 800c01a:	f000 fdb3 	bl	800cb84 <malloc>
 800c01e:	6260      	str	r0, [r4, #36]	; 0x24
 800c020:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c024:	6005      	str	r5, [r0, #0]
 800c026:	60c5      	str	r5, [r0, #12]
 800c028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c02a:	6819      	ldr	r1, [r3, #0]
 800c02c:	b151      	cbz	r1, 800c044 <_dtoa_r+0x44>
 800c02e:	685a      	ldr	r2, [r3, #4]
 800c030:	2301      	movs	r3, #1
 800c032:	4093      	lsls	r3, r2
 800c034:	604a      	str	r2, [r1, #4]
 800c036:	608b      	str	r3, [r1, #8]
 800c038:	4620      	mov	r0, r4
 800c03a:	f000 fdf8 	bl	800cc2e <_Bfree>
 800c03e:	2200      	movs	r2, #0
 800c040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c042:	601a      	str	r2, [r3, #0]
 800c044:	1e3b      	subs	r3, r7, #0
 800c046:	bfaf      	iteee	ge
 800c048:	2300      	movge	r3, #0
 800c04a:	2201      	movlt	r2, #1
 800c04c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c050:	9303      	strlt	r3, [sp, #12]
 800c052:	bfac      	ite	ge
 800c054:	f8c8 3000 	strge.w	r3, [r8]
 800c058:	f8c8 2000 	strlt.w	r2, [r8]
 800c05c:	4bae      	ldr	r3, [pc, #696]	; (800c318 <_dtoa_r+0x318>)
 800c05e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c062:	ea33 0308 	bics.w	r3, r3, r8
 800c066:	d11b      	bne.n	800c0a0 <_dtoa_r+0xa0>
 800c068:	f242 730f 	movw	r3, #9999	; 0x270f
 800c06c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c06e:	6013      	str	r3, [r2, #0]
 800c070:	9b02      	ldr	r3, [sp, #8]
 800c072:	b923      	cbnz	r3, 800c07e <_dtoa_r+0x7e>
 800c074:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c078:	2800      	cmp	r0, #0
 800c07a:	f000 8545 	beq.w	800cb08 <_dtoa_r+0xb08>
 800c07e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c080:	b953      	cbnz	r3, 800c098 <_dtoa_r+0x98>
 800c082:	4ba6      	ldr	r3, [pc, #664]	; (800c31c <_dtoa_r+0x31c>)
 800c084:	e021      	b.n	800c0ca <_dtoa_r+0xca>
 800c086:	4ba6      	ldr	r3, [pc, #664]	; (800c320 <_dtoa_r+0x320>)
 800c088:	9306      	str	r3, [sp, #24]
 800c08a:	3308      	adds	r3, #8
 800c08c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c08e:	6013      	str	r3, [r2, #0]
 800c090:	9806      	ldr	r0, [sp, #24]
 800c092:	b015      	add	sp, #84	; 0x54
 800c094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c098:	4ba0      	ldr	r3, [pc, #640]	; (800c31c <_dtoa_r+0x31c>)
 800c09a:	9306      	str	r3, [sp, #24]
 800c09c:	3303      	adds	r3, #3
 800c09e:	e7f5      	b.n	800c08c <_dtoa_r+0x8c>
 800c0a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	4639      	mov	r1, r7
 800c0ac:	f7f4 fc7c 	bl	80009a8 <__aeabi_dcmpeq>
 800c0b0:	4682      	mov	sl, r0
 800c0b2:	b160      	cbz	r0, 800c0ce <_dtoa_r+0xce>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c0b8:	6013      	str	r3, [r2, #0]
 800c0ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 8520 	beq.w	800cb02 <_dtoa_r+0xb02>
 800c0c2:	4b98      	ldr	r3, [pc, #608]	; (800c324 <_dtoa_r+0x324>)
 800c0c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c0c6:	6013      	str	r3, [r2, #0]
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	9306      	str	r3, [sp, #24]
 800c0cc:	e7e0      	b.n	800c090 <_dtoa_r+0x90>
 800c0ce:	ab12      	add	r3, sp, #72	; 0x48
 800c0d0:	9301      	str	r3, [sp, #4]
 800c0d2:	ab13      	add	r3, sp, #76	; 0x4c
 800c0d4:	9300      	str	r3, [sp, #0]
 800c0d6:	4632      	mov	r2, r6
 800c0d8:	463b      	mov	r3, r7
 800c0da:	4620      	mov	r0, r4
 800c0dc:	f001 f800 	bl	800d0e0 <__d2b>
 800c0e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c0e4:	4683      	mov	fp, r0
 800c0e6:	2d00      	cmp	r5, #0
 800c0e8:	d07d      	beq.n	800c1e6 <_dtoa_r+0x1e6>
 800c0ea:	46b0      	mov	r8, r6
 800c0ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0f0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800c0f4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800c0f8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c0fc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800c100:	2200      	movs	r2, #0
 800c102:	4b89      	ldr	r3, [pc, #548]	; (800c328 <_dtoa_r+0x328>)
 800c104:	4640      	mov	r0, r8
 800c106:	4649      	mov	r1, r9
 800c108:	f7f4 f82e 	bl	8000168 <__aeabi_dsub>
 800c10c:	a37c      	add	r3, pc, #496	; (adr r3, 800c300 <_dtoa_r+0x300>)
 800c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c112:	f7f4 f9e1 	bl	80004d8 <__aeabi_dmul>
 800c116:	a37c      	add	r3, pc, #496	; (adr r3, 800c308 <_dtoa_r+0x308>)
 800c118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11c:	f7f4 f826 	bl	800016c <__adddf3>
 800c120:	4606      	mov	r6, r0
 800c122:	4628      	mov	r0, r5
 800c124:	460f      	mov	r7, r1
 800c126:	f7f4 f96d 	bl	8000404 <__aeabi_i2d>
 800c12a:	a379      	add	r3, pc, #484	; (adr r3, 800c310 <_dtoa_r+0x310>)
 800c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c130:	f7f4 f9d2 	bl	80004d8 <__aeabi_dmul>
 800c134:	4602      	mov	r2, r0
 800c136:	460b      	mov	r3, r1
 800c138:	4630      	mov	r0, r6
 800c13a:	4639      	mov	r1, r7
 800c13c:	f7f4 f816 	bl	800016c <__adddf3>
 800c140:	4606      	mov	r6, r0
 800c142:	460f      	mov	r7, r1
 800c144:	f7f4 fc78 	bl	8000a38 <__aeabi_d2iz>
 800c148:	2200      	movs	r2, #0
 800c14a:	4682      	mov	sl, r0
 800c14c:	2300      	movs	r3, #0
 800c14e:	4630      	mov	r0, r6
 800c150:	4639      	mov	r1, r7
 800c152:	f7f4 fc33 	bl	80009bc <__aeabi_dcmplt>
 800c156:	b148      	cbz	r0, 800c16c <_dtoa_r+0x16c>
 800c158:	4650      	mov	r0, sl
 800c15a:	f7f4 f953 	bl	8000404 <__aeabi_i2d>
 800c15e:	4632      	mov	r2, r6
 800c160:	463b      	mov	r3, r7
 800c162:	f7f4 fc21 	bl	80009a8 <__aeabi_dcmpeq>
 800c166:	b908      	cbnz	r0, 800c16c <_dtoa_r+0x16c>
 800c168:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c16c:	f1ba 0f16 	cmp.w	sl, #22
 800c170:	d85a      	bhi.n	800c228 <_dtoa_r+0x228>
 800c172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c176:	496d      	ldr	r1, [pc, #436]	; (800c32c <_dtoa_r+0x32c>)
 800c178:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c17c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c180:	f7f4 fc3a 	bl	80009f8 <__aeabi_dcmpgt>
 800c184:	2800      	cmp	r0, #0
 800c186:	d051      	beq.n	800c22c <_dtoa_r+0x22c>
 800c188:	2300      	movs	r3, #0
 800c18a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c18e:	930d      	str	r3, [sp, #52]	; 0x34
 800c190:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c192:	1b5d      	subs	r5, r3, r5
 800c194:	1e6b      	subs	r3, r5, #1
 800c196:	9307      	str	r3, [sp, #28]
 800c198:	bf43      	ittte	mi
 800c19a:	2300      	movmi	r3, #0
 800c19c:	f1c5 0901 	rsbmi	r9, r5, #1
 800c1a0:	9307      	strmi	r3, [sp, #28]
 800c1a2:	f04f 0900 	movpl.w	r9, #0
 800c1a6:	f1ba 0f00 	cmp.w	sl, #0
 800c1aa:	db41      	blt.n	800c230 <_dtoa_r+0x230>
 800c1ac:	9b07      	ldr	r3, [sp, #28]
 800c1ae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800c1b2:	4453      	add	r3, sl
 800c1b4:	9307      	str	r3, [sp, #28]
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	9308      	str	r3, [sp, #32]
 800c1ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c1bc:	2b09      	cmp	r3, #9
 800c1be:	f200 808f 	bhi.w	800c2e0 <_dtoa_r+0x2e0>
 800c1c2:	2b05      	cmp	r3, #5
 800c1c4:	bfc4      	itt	gt
 800c1c6:	3b04      	subgt	r3, #4
 800c1c8:	931e      	strgt	r3, [sp, #120]	; 0x78
 800c1ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c1cc:	bfc8      	it	gt
 800c1ce:	2500      	movgt	r5, #0
 800c1d0:	f1a3 0302 	sub.w	r3, r3, #2
 800c1d4:	bfd8      	it	le
 800c1d6:	2501      	movle	r5, #1
 800c1d8:	2b03      	cmp	r3, #3
 800c1da:	f200 808d 	bhi.w	800c2f8 <_dtoa_r+0x2f8>
 800c1de:	e8df f003 	tbb	[pc, r3]
 800c1e2:	7d7b      	.short	0x7d7b
 800c1e4:	6f2f      	.short	0x6f2f
 800c1e6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c1ea:	441d      	add	r5, r3
 800c1ec:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c1f0:	2820      	cmp	r0, #32
 800c1f2:	dd13      	ble.n	800c21c <_dtoa_r+0x21c>
 800c1f4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c1f8:	9b02      	ldr	r3, [sp, #8]
 800c1fa:	fa08 f800 	lsl.w	r8, r8, r0
 800c1fe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c202:	fa23 f000 	lsr.w	r0, r3, r0
 800c206:	ea48 0000 	orr.w	r0, r8, r0
 800c20a:	f7f4 f8eb 	bl	80003e4 <__aeabi_ui2d>
 800c20e:	2301      	movs	r3, #1
 800c210:	4680      	mov	r8, r0
 800c212:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800c216:	3d01      	subs	r5, #1
 800c218:	9310      	str	r3, [sp, #64]	; 0x40
 800c21a:	e771      	b.n	800c100 <_dtoa_r+0x100>
 800c21c:	9b02      	ldr	r3, [sp, #8]
 800c21e:	f1c0 0020 	rsb	r0, r0, #32
 800c222:	fa03 f000 	lsl.w	r0, r3, r0
 800c226:	e7f0      	b.n	800c20a <_dtoa_r+0x20a>
 800c228:	2301      	movs	r3, #1
 800c22a:	e7b0      	b.n	800c18e <_dtoa_r+0x18e>
 800c22c:	900d      	str	r0, [sp, #52]	; 0x34
 800c22e:	e7af      	b.n	800c190 <_dtoa_r+0x190>
 800c230:	f1ca 0300 	rsb	r3, sl, #0
 800c234:	9308      	str	r3, [sp, #32]
 800c236:	2300      	movs	r3, #0
 800c238:	eba9 090a 	sub.w	r9, r9, sl
 800c23c:	930c      	str	r3, [sp, #48]	; 0x30
 800c23e:	e7bc      	b.n	800c1ba <_dtoa_r+0x1ba>
 800c240:	2301      	movs	r3, #1
 800c242:	9309      	str	r3, [sp, #36]	; 0x24
 800c244:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c246:	2b00      	cmp	r3, #0
 800c248:	dd74      	ble.n	800c334 <_dtoa_r+0x334>
 800c24a:	4698      	mov	r8, r3
 800c24c:	9304      	str	r3, [sp, #16]
 800c24e:	2200      	movs	r2, #0
 800c250:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c252:	6072      	str	r2, [r6, #4]
 800c254:	2204      	movs	r2, #4
 800c256:	f102 0014 	add.w	r0, r2, #20
 800c25a:	4298      	cmp	r0, r3
 800c25c:	6871      	ldr	r1, [r6, #4]
 800c25e:	d96e      	bls.n	800c33e <_dtoa_r+0x33e>
 800c260:	4620      	mov	r0, r4
 800c262:	f000 fcb0 	bl	800cbc6 <_Balloc>
 800c266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c268:	6030      	str	r0, [r6, #0]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f1b8 0f0e 	cmp.w	r8, #14
 800c270:	9306      	str	r3, [sp, #24]
 800c272:	f200 80ed 	bhi.w	800c450 <_dtoa_r+0x450>
 800c276:	2d00      	cmp	r5, #0
 800c278:	f000 80ea 	beq.w	800c450 <_dtoa_r+0x450>
 800c27c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c280:	f1ba 0f00 	cmp.w	sl, #0
 800c284:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c288:	dd77      	ble.n	800c37a <_dtoa_r+0x37a>
 800c28a:	4a28      	ldr	r2, [pc, #160]	; (800c32c <_dtoa_r+0x32c>)
 800c28c:	f00a 030f 	and.w	r3, sl, #15
 800c290:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c294:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c298:	06f0      	lsls	r0, r6, #27
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c2a2:	d568      	bpl.n	800c376 <_dtoa_r+0x376>
 800c2a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c2a8:	4b21      	ldr	r3, [pc, #132]	; (800c330 <_dtoa_r+0x330>)
 800c2aa:	2503      	movs	r5, #3
 800c2ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2b0:	f7f4 fa3c 	bl	800072c <__aeabi_ddiv>
 800c2b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2b8:	f006 060f 	and.w	r6, r6, #15
 800c2bc:	4f1c      	ldr	r7, [pc, #112]	; (800c330 <_dtoa_r+0x330>)
 800c2be:	e04f      	b.n	800c360 <_dtoa_r+0x360>
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c2c6:	4453      	add	r3, sl
 800c2c8:	f103 0801 	add.w	r8, r3, #1
 800c2cc:	9304      	str	r3, [sp, #16]
 800c2ce:	4643      	mov	r3, r8
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	bfb8      	it	lt
 800c2d4:	2301      	movlt	r3, #1
 800c2d6:	e7ba      	b.n	800c24e <_dtoa_r+0x24e>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	e7b2      	b.n	800c242 <_dtoa_r+0x242>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	e7f0      	b.n	800c2c2 <_dtoa_r+0x2c2>
 800c2e0:	2501      	movs	r5, #1
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	9509      	str	r5, [sp, #36]	; 0x24
 800c2e6:	931e      	str	r3, [sp, #120]	; 0x78
 800c2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	9304      	str	r3, [sp, #16]
 800c2f0:	4698      	mov	r8, r3
 800c2f2:	2312      	movs	r3, #18
 800c2f4:	921f      	str	r2, [sp, #124]	; 0x7c
 800c2f6:	e7aa      	b.n	800c24e <_dtoa_r+0x24e>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c2fc:	e7f4      	b.n	800c2e8 <_dtoa_r+0x2e8>
 800c2fe:	bf00      	nop
 800c300:	636f4361 	.word	0x636f4361
 800c304:	3fd287a7 	.word	0x3fd287a7
 800c308:	8b60c8b3 	.word	0x8b60c8b3
 800c30c:	3fc68a28 	.word	0x3fc68a28
 800c310:	509f79fb 	.word	0x509f79fb
 800c314:	3fd34413 	.word	0x3fd34413
 800c318:	7ff00000 	.word	0x7ff00000
 800c31c:	0800e6d5 	.word	0x0800e6d5
 800c320:	0800e6cc 	.word	0x0800e6cc
 800c324:	0800e583 	.word	0x0800e583
 800c328:	3ff80000 	.word	0x3ff80000
 800c32c:	0800e708 	.word	0x0800e708
 800c330:	0800e6e0 	.word	0x0800e6e0
 800c334:	2301      	movs	r3, #1
 800c336:	9304      	str	r3, [sp, #16]
 800c338:	4698      	mov	r8, r3
 800c33a:	461a      	mov	r2, r3
 800c33c:	e7da      	b.n	800c2f4 <_dtoa_r+0x2f4>
 800c33e:	3101      	adds	r1, #1
 800c340:	6071      	str	r1, [r6, #4]
 800c342:	0052      	lsls	r2, r2, #1
 800c344:	e787      	b.n	800c256 <_dtoa_r+0x256>
 800c346:	07f1      	lsls	r1, r6, #31
 800c348:	d508      	bpl.n	800c35c <_dtoa_r+0x35c>
 800c34a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c34e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c352:	f7f4 f8c1 	bl	80004d8 <__aeabi_dmul>
 800c356:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c35a:	3501      	adds	r5, #1
 800c35c:	1076      	asrs	r6, r6, #1
 800c35e:	3708      	adds	r7, #8
 800c360:	2e00      	cmp	r6, #0
 800c362:	d1f0      	bne.n	800c346 <_dtoa_r+0x346>
 800c364:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c36c:	f7f4 f9de 	bl	800072c <__aeabi_ddiv>
 800c370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c374:	e01b      	b.n	800c3ae <_dtoa_r+0x3ae>
 800c376:	2502      	movs	r5, #2
 800c378:	e7a0      	b.n	800c2bc <_dtoa_r+0x2bc>
 800c37a:	f000 80a4 	beq.w	800c4c6 <_dtoa_r+0x4c6>
 800c37e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c382:	f1ca 0600 	rsb	r6, sl, #0
 800c386:	4ba0      	ldr	r3, [pc, #640]	; (800c608 <_dtoa_r+0x608>)
 800c388:	f006 020f 	and.w	r2, r6, #15
 800c38c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	f7f4 f8a0 	bl	80004d8 <__aeabi_dmul>
 800c398:	2502      	movs	r5, #2
 800c39a:	2300      	movs	r3, #0
 800c39c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3a0:	4f9a      	ldr	r7, [pc, #616]	; (800c60c <_dtoa_r+0x60c>)
 800c3a2:	1136      	asrs	r6, r6, #4
 800c3a4:	2e00      	cmp	r6, #0
 800c3a6:	f040 8083 	bne.w	800c4b0 <_dtoa_r+0x4b0>
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1e0      	bne.n	800c370 <_dtoa_r+0x370>
 800c3ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f000 808a 	beq.w	800c4ca <_dtoa_r+0x4ca>
 800c3b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c3be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	4b92      	ldr	r3, [pc, #584]	; (800c610 <_dtoa_r+0x610>)
 800c3c6:	f7f4 faf9 	bl	80009bc <__aeabi_dcmplt>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d07d      	beq.n	800c4ca <_dtoa_r+0x4ca>
 800c3ce:	f1b8 0f00 	cmp.w	r8, #0
 800c3d2:	d07a      	beq.n	800c4ca <_dtoa_r+0x4ca>
 800c3d4:	9b04      	ldr	r3, [sp, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	dd36      	ble.n	800c448 <_dtoa_r+0x448>
 800c3da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c3de:	2200      	movs	r2, #0
 800c3e0:	4b8c      	ldr	r3, [pc, #560]	; (800c614 <_dtoa_r+0x614>)
 800c3e2:	f7f4 f879 	bl	80004d8 <__aeabi_dmul>
 800c3e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3ea:	9e04      	ldr	r6, [sp, #16]
 800c3ec:	f10a 37ff 	add.w	r7, sl, #4294967295
 800c3f0:	3501      	adds	r5, #1
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	f7f4 f806 	bl	8000404 <__aeabi_i2d>
 800c3f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3fc:	f7f4 f86c 	bl	80004d8 <__aeabi_dmul>
 800c400:	2200      	movs	r2, #0
 800c402:	4b85      	ldr	r3, [pc, #532]	; (800c618 <_dtoa_r+0x618>)
 800c404:	f7f3 feb2 	bl	800016c <__adddf3>
 800c408:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800c40c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c410:	950b      	str	r5, [sp, #44]	; 0x2c
 800c412:	2e00      	cmp	r6, #0
 800c414:	d15c      	bne.n	800c4d0 <_dtoa_r+0x4d0>
 800c416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c41a:	2200      	movs	r2, #0
 800c41c:	4b7f      	ldr	r3, [pc, #508]	; (800c61c <_dtoa_r+0x61c>)
 800c41e:	f7f3 fea3 	bl	8000168 <__aeabi_dsub>
 800c422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c424:	462b      	mov	r3, r5
 800c426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c42a:	f7f4 fae5 	bl	80009f8 <__aeabi_dcmpgt>
 800c42e:	2800      	cmp	r0, #0
 800c430:	f040 8281 	bne.w	800c936 <_dtoa_r+0x936>
 800c434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c43a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c43e:	f7f4 fabd 	bl	80009bc <__aeabi_dcmplt>
 800c442:	2800      	cmp	r0, #0
 800c444:	f040 8275 	bne.w	800c932 <_dtoa_r+0x932>
 800c448:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c44c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c450:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c452:	2b00      	cmp	r3, #0
 800c454:	f2c0 814b 	blt.w	800c6ee <_dtoa_r+0x6ee>
 800c458:	f1ba 0f0e 	cmp.w	sl, #14
 800c45c:	f300 8147 	bgt.w	800c6ee <_dtoa_r+0x6ee>
 800c460:	4b69      	ldr	r3, [pc, #420]	; (800c608 <_dtoa_r+0x608>)
 800c462:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c46e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c470:	2b00      	cmp	r3, #0
 800c472:	f280 80d7 	bge.w	800c624 <_dtoa_r+0x624>
 800c476:	f1b8 0f00 	cmp.w	r8, #0
 800c47a:	f300 80d3 	bgt.w	800c624 <_dtoa_r+0x624>
 800c47e:	f040 8257 	bne.w	800c930 <_dtoa_r+0x930>
 800c482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c486:	2200      	movs	r2, #0
 800c488:	4b64      	ldr	r3, [pc, #400]	; (800c61c <_dtoa_r+0x61c>)
 800c48a:	f7f4 f825 	bl	80004d8 <__aeabi_dmul>
 800c48e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c492:	f7f4 faa7 	bl	80009e4 <__aeabi_dcmpge>
 800c496:	4646      	mov	r6, r8
 800c498:	4647      	mov	r7, r8
 800c49a:	2800      	cmp	r0, #0
 800c49c:	f040 822d 	bne.w	800c8fa <_dtoa_r+0x8fa>
 800c4a0:	9b06      	ldr	r3, [sp, #24]
 800c4a2:	9a06      	ldr	r2, [sp, #24]
 800c4a4:	1c5d      	adds	r5, r3, #1
 800c4a6:	2331      	movs	r3, #49	; 0x31
 800c4a8:	f10a 0a01 	add.w	sl, sl, #1
 800c4ac:	7013      	strb	r3, [r2, #0]
 800c4ae:	e228      	b.n	800c902 <_dtoa_r+0x902>
 800c4b0:	07f2      	lsls	r2, r6, #31
 800c4b2:	d505      	bpl.n	800c4c0 <_dtoa_r+0x4c0>
 800c4b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4b8:	f7f4 f80e 	bl	80004d8 <__aeabi_dmul>
 800c4bc:	2301      	movs	r3, #1
 800c4be:	3501      	adds	r5, #1
 800c4c0:	1076      	asrs	r6, r6, #1
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	e76e      	b.n	800c3a4 <_dtoa_r+0x3a4>
 800c4c6:	2502      	movs	r5, #2
 800c4c8:	e771      	b.n	800c3ae <_dtoa_r+0x3ae>
 800c4ca:	4657      	mov	r7, sl
 800c4cc:	4646      	mov	r6, r8
 800c4ce:	e790      	b.n	800c3f2 <_dtoa_r+0x3f2>
 800c4d0:	4b4d      	ldr	r3, [pc, #308]	; (800c608 <_dtoa_r+0x608>)
 800c4d2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c4d6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c4da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d048      	beq.n	800c572 <_dtoa_r+0x572>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	494e      	ldr	r1, [pc, #312]	; (800c620 <_dtoa_r+0x620>)
 800c4e8:	f7f4 f920 	bl	800072c <__aeabi_ddiv>
 800c4ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c4f0:	f7f3 fe3a 	bl	8000168 <__aeabi_dsub>
 800c4f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c4f8:	9d06      	ldr	r5, [sp, #24]
 800c4fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4fe:	f7f4 fa9b 	bl	8000a38 <__aeabi_d2iz>
 800c502:	9011      	str	r0, [sp, #68]	; 0x44
 800c504:	f7f3 ff7e 	bl	8000404 <__aeabi_i2d>
 800c508:	4602      	mov	r2, r0
 800c50a:	460b      	mov	r3, r1
 800c50c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c510:	f7f3 fe2a 	bl	8000168 <__aeabi_dsub>
 800c514:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c51a:	3330      	adds	r3, #48	; 0x30
 800c51c:	f805 3b01 	strb.w	r3, [r5], #1
 800c520:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c524:	f7f4 fa4a 	bl	80009bc <__aeabi_dcmplt>
 800c528:	2800      	cmp	r0, #0
 800c52a:	d163      	bne.n	800c5f4 <_dtoa_r+0x5f4>
 800c52c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c530:	2000      	movs	r0, #0
 800c532:	4937      	ldr	r1, [pc, #220]	; (800c610 <_dtoa_r+0x610>)
 800c534:	f7f3 fe18 	bl	8000168 <__aeabi_dsub>
 800c538:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c53c:	f7f4 fa3e 	bl	80009bc <__aeabi_dcmplt>
 800c540:	2800      	cmp	r0, #0
 800c542:	f040 80b5 	bne.w	800c6b0 <_dtoa_r+0x6b0>
 800c546:	9b06      	ldr	r3, [sp, #24]
 800c548:	1aeb      	subs	r3, r5, r3
 800c54a:	429e      	cmp	r6, r3
 800c54c:	f77f af7c 	ble.w	800c448 <_dtoa_r+0x448>
 800c550:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c554:	2200      	movs	r2, #0
 800c556:	4b2f      	ldr	r3, [pc, #188]	; (800c614 <_dtoa_r+0x614>)
 800c558:	f7f3 ffbe 	bl	80004d8 <__aeabi_dmul>
 800c55c:	2200      	movs	r2, #0
 800c55e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c566:	4b2b      	ldr	r3, [pc, #172]	; (800c614 <_dtoa_r+0x614>)
 800c568:	f7f3 ffb6 	bl	80004d8 <__aeabi_dmul>
 800c56c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c570:	e7c3      	b.n	800c4fa <_dtoa_r+0x4fa>
 800c572:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c576:	f7f3 ffaf 	bl	80004d8 <__aeabi_dmul>
 800c57a:	9b06      	ldr	r3, [sp, #24]
 800c57c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c580:	199d      	adds	r5, r3, r6
 800c582:	461e      	mov	r6, r3
 800c584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c588:	f7f4 fa56 	bl	8000a38 <__aeabi_d2iz>
 800c58c:	9011      	str	r0, [sp, #68]	; 0x44
 800c58e:	f7f3 ff39 	bl	8000404 <__aeabi_i2d>
 800c592:	4602      	mov	r2, r0
 800c594:	460b      	mov	r3, r1
 800c596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c59a:	f7f3 fde5 	bl	8000168 <__aeabi_dsub>
 800c59e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5a4:	3330      	adds	r3, #48	; 0x30
 800c5a6:	f806 3b01 	strb.w	r3, [r6], #1
 800c5aa:	42ae      	cmp	r6, r5
 800c5ac:	f04f 0200 	mov.w	r2, #0
 800c5b0:	d124      	bne.n	800c5fc <_dtoa_r+0x5fc>
 800c5b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c5b6:	4b1a      	ldr	r3, [pc, #104]	; (800c620 <_dtoa_r+0x620>)
 800c5b8:	f7f3 fdd8 	bl	800016c <__adddf3>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	460b      	mov	r3, r1
 800c5c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5c4:	f7f4 fa18 	bl	80009f8 <__aeabi_dcmpgt>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d171      	bne.n	800c6b0 <_dtoa_r+0x6b0>
 800c5cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c5d0:	2000      	movs	r0, #0
 800c5d2:	4913      	ldr	r1, [pc, #76]	; (800c620 <_dtoa_r+0x620>)
 800c5d4:	f7f3 fdc8 	bl	8000168 <__aeabi_dsub>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5e0:	f7f4 f9ec 	bl	80009bc <__aeabi_dcmplt>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	f43f af2f 	beq.w	800c448 <_dtoa_r+0x448>
 800c5ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c5ee:	1e6a      	subs	r2, r5, #1
 800c5f0:	2b30      	cmp	r3, #48	; 0x30
 800c5f2:	d001      	beq.n	800c5f8 <_dtoa_r+0x5f8>
 800c5f4:	46ba      	mov	sl, r7
 800c5f6:	e04a      	b.n	800c68e <_dtoa_r+0x68e>
 800c5f8:	4615      	mov	r5, r2
 800c5fa:	e7f6      	b.n	800c5ea <_dtoa_r+0x5ea>
 800c5fc:	4b05      	ldr	r3, [pc, #20]	; (800c614 <_dtoa_r+0x614>)
 800c5fe:	f7f3 ff6b 	bl	80004d8 <__aeabi_dmul>
 800c602:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c606:	e7bd      	b.n	800c584 <_dtoa_r+0x584>
 800c608:	0800e708 	.word	0x0800e708
 800c60c:	0800e6e0 	.word	0x0800e6e0
 800c610:	3ff00000 	.word	0x3ff00000
 800c614:	40240000 	.word	0x40240000
 800c618:	401c0000 	.word	0x401c0000
 800c61c:	40140000 	.word	0x40140000
 800c620:	3fe00000 	.word	0x3fe00000
 800c624:	9d06      	ldr	r5, [sp, #24]
 800c626:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c62a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c62e:	4630      	mov	r0, r6
 800c630:	4639      	mov	r1, r7
 800c632:	f7f4 f87b 	bl	800072c <__aeabi_ddiv>
 800c636:	f7f4 f9ff 	bl	8000a38 <__aeabi_d2iz>
 800c63a:	4681      	mov	r9, r0
 800c63c:	f7f3 fee2 	bl	8000404 <__aeabi_i2d>
 800c640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c644:	f7f3 ff48 	bl	80004d8 <__aeabi_dmul>
 800c648:	4602      	mov	r2, r0
 800c64a:	460b      	mov	r3, r1
 800c64c:	4630      	mov	r0, r6
 800c64e:	4639      	mov	r1, r7
 800c650:	f7f3 fd8a 	bl	8000168 <__aeabi_dsub>
 800c654:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800c658:	f805 6b01 	strb.w	r6, [r5], #1
 800c65c:	9e06      	ldr	r6, [sp, #24]
 800c65e:	4602      	mov	r2, r0
 800c660:	1bae      	subs	r6, r5, r6
 800c662:	45b0      	cmp	r8, r6
 800c664:	460b      	mov	r3, r1
 800c666:	d135      	bne.n	800c6d4 <_dtoa_r+0x6d4>
 800c668:	f7f3 fd80 	bl	800016c <__adddf3>
 800c66c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c670:	4606      	mov	r6, r0
 800c672:	460f      	mov	r7, r1
 800c674:	f7f4 f9c0 	bl	80009f8 <__aeabi_dcmpgt>
 800c678:	b9c8      	cbnz	r0, 800c6ae <_dtoa_r+0x6ae>
 800c67a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c67e:	4630      	mov	r0, r6
 800c680:	4639      	mov	r1, r7
 800c682:	f7f4 f991 	bl	80009a8 <__aeabi_dcmpeq>
 800c686:	b110      	cbz	r0, 800c68e <_dtoa_r+0x68e>
 800c688:	f019 0f01 	tst.w	r9, #1
 800c68c:	d10f      	bne.n	800c6ae <_dtoa_r+0x6ae>
 800c68e:	4659      	mov	r1, fp
 800c690:	4620      	mov	r0, r4
 800c692:	f000 facc 	bl	800cc2e <_Bfree>
 800c696:	2300      	movs	r3, #0
 800c698:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c69a:	702b      	strb	r3, [r5, #0]
 800c69c:	f10a 0301 	add.w	r3, sl, #1
 800c6a0:	6013      	str	r3, [r2, #0]
 800c6a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f43f acf3 	beq.w	800c090 <_dtoa_r+0x90>
 800c6aa:	601d      	str	r5, [r3, #0]
 800c6ac:	e4f0      	b.n	800c090 <_dtoa_r+0x90>
 800c6ae:	4657      	mov	r7, sl
 800c6b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c6b4:	1e6b      	subs	r3, r5, #1
 800c6b6:	2a39      	cmp	r2, #57	; 0x39
 800c6b8:	d106      	bne.n	800c6c8 <_dtoa_r+0x6c8>
 800c6ba:	9a06      	ldr	r2, [sp, #24]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d107      	bne.n	800c6d0 <_dtoa_r+0x6d0>
 800c6c0:	2330      	movs	r3, #48	; 0x30
 800c6c2:	7013      	strb	r3, [r2, #0]
 800c6c4:	4613      	mov	r3, r2
 800c6c6:	3701      	adds	r7, #1
 800c6c8:	781a      	ldrb	r2, [r3, #0]
 800c6ca:	3201      	adds	r2, #1
 800c6cc:	701a      	strb	r2, [r3, #0]
 800c6ce:	e791      	b.n	800c5f4 <_dtoa_r+0x5f4>
 800c6d0:	461d      	mov	r5, r3
 800c6d2:	e7ed      	b.n	800c6b0 <_dtoa_r+0x6b0>
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	4b99      	ldr	r3, [pc, #612]	; (800c93c <_dtoa_r+0x93c>)
 800c6d8:	f7f3 fefe 	bl	80004d8 <__aeabi_dmul>
 800c6dc:	2200      	movs	r2, #0
 800c6de:	2300      	movs	r3, #0
 800c6e0:	4606      	mov	r6, r0
 800c6e2:	460f      	mov	r7, r1
 800c6e4:	f7f4 f960 	bl	80009a8 <__aeabi_dcmpeq>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d09e      	beq.n	800c62a <_dtoa_r+0x62a>
 800c6ec:	e7cf      	b.n	800c68e <_dtoa_r+0x68e>
 800c6ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6f0:	2a00      	cmp	r2, #0
 800c6f2:	f000 8088 	beq.w	800c806 <_dtoa_r+0x806>
 800c6f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c6f8:	2a01      	cmp	r2, #1
 800c6fa:	dc6d      	bgt.n	800c7d8 <_dtoa_r+0x7d8>
 800c6fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c6fe:	2a00      	cmp	r2, #0
 800c700:	d066      	beq.n	800c7d0 <_dtoa_r+0x7d0>
 800c702:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c706:	464d      	mov	r5, r9
 800c708:	9e08      	ldr	r6, [sp, #32]
 800c70a:	9a07      	ldr	r2, [sp, #28]
 800c70c:	2101      	movs	r1, #1
 800c70e:	441a      	add	r2, r3
 800c710:	4620      	mov	r0, r4
 800c712:	4499      	add	r9, r3
 800c714:	9207      	str	r2, [sp, #28]
 800c716:	f000 fb2a 	bl	800cd6e <__i2b>
 800c71a:	4607      	mov	r7, r0
 800c71c:	2d00      	cmp	r5, #0
 800c71e:	dd0b      	ble.n	800c738 <_dtoa_r+0x738>
 800c720:	9b07      	ldr	r3, [sp, #28]
 800c722:	2b00      	cmp	r3, #0
 800c724:	dd08      	ble.n	800c738 <_dtoa_r+0x738>
 800c726:	42ab      	cmp	r3, r5
 800c728:	bfa8      	it	ge
 800c72a:	462b      	movge	r3, r5
 800c72c:	9a07      	ldr	r2, [sp, #28]
 800c72e:	eba9 0903 	sub.w	r9, r9, r3
 800c732:	1aed      	subs	r5, r5, r3
 800c734:	1ad3      	subs	r3, r2, r3
 800c736:	9307      	str	r3, [sp, #28]
 800c738:	9b08      	ldr	r3, [sp, #32]
 800c73a:	b1eb      	cbz	r3, 800c778 <_dtoa_r+0x778>
 800c73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d065      	beq.n	800c80e <_dtoa_r+0x80e>
 800c742:	b18e      	cbz	r6, 800c768 <_dtoa_r+0x768>
 800c744:	4639      	mov	r1, r7
 800c746:	4632      	mov	r2, r6
 800c748:	4620      	mov	r0, r4
 800c74a:	f000 fbaf 	bl	800ceac <__pow5mult>
 800c74e:	465a      	mov	r2, fp
 800c750:	4601      	mov	r1, r0
 800c752:	4607      	mov	r7, r0
 800c754:	4620      	mov	r0, r4
 800c756:	f000 fb13 	bl	800cd80 <__multiply>
 800c75a:	4659      	mov	r1, fp
 800c75c:	900a      	str	r0, [sp, #40]	; 0x28
 800c75e:	4620      	mov	r0, r4
 800c760:	f000 fa65 	bl	800cc2e <_Bfree>
 800c764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c766:	469b      	mov	fp, r3
 800c768:	9b08      	ldr	r3, [sp, #32]
 800c76a:	1b9a      	subs	r2, r3, r6
 800c76c:	d004      	beq.n	800c778 <_dtoa_r+0x778>
 800c76e:	4659      	mov	r1, fp
 800c770:	4620      	mov	r0, r4
 800c772:	f000 fb9b 	bl	800ceac <__pow5mult>
 800c776:	4683      	mov	fp, r0
 800c778:	2101      	movs	r1, #1
 800c77a:	4620      	mov	r0, r4
 800c77c:	f000 faf7 	bl	800cd6e <__i2b>
 800c780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c782:	4606      	mov	r6, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	f000 81c6 	beq.w	800cb16 <_dtoa_r+0xb16>
 800c78a:	461a      	mov	r2, r3
 800c78c:	4601      	mov	r1, r0
 800c78e:	4620      	mov	r0, r4
 800c790:	f000 fb8c 	bl	800ceac <__pow5mult>
 800c794:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c796:	4606      	mov	r6, r0
 800c798:	2b01      	cmp	r3, #1
 800c79a:	dc3e      	bgt.n	800c81a <_dtoa_r+0x81a>
 800c79c:	9b02      	ldr	r3, [sp, #8]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d137      	bne.n	800c812 <_dtoa_r+0x812>
 800c7a2:	9b03      	ldr	r3, [sp, #12]
 800c7a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d134      	bne.n	800c816 <_dtoa_r+0x816>
 800c7ac:	9b03      	ldr	r3, [sp, #12]
 800c7ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7b2:	0d1b      	lsrs	r3, r3, #20
 800c7b4:	051b      	lsls	r3, r3, #20
 800c7b6:	b12b      	cbz	r3, 800c7c4 <_dtoa_r+0x7c4>
 800c7b8:	9b07      	ldr	r3, [sp, #28]
 800c7ba:	f109 0901 	add.w	r9, r9, #1
 800c7be:	3301      	adds	r3, #1
 800c7c0:	9307      	str	r3, [sp, #28]
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	9308      	str	r3, [sp, #32]
 800c7c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d128      	bne.n	800c81e <_dtoa_r+0x81e>
 800c7cc:	2001      	movs	r0, #1
 800c7ce:	e02e      	b.n	800c82e <_dtoa_r+0x82e>
 800c7d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c7d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c7d6:	e796      	b.n	800c706 <_dtoa_r+0x706>
 800c7d8:	9b08      	ldr	r3, [sp, #32]
 800c7da:	f108 36ff 	add.w	r6, r8, #4294967295
 800c7de:	42b3      	cmp	r3, r6
 800c7e0:	bfb7      	itett	lt
 800c7e2:	9b08      	ldrlt	r3, [sp, #32]
 800c7e4:	1b9e      	subge	r6, r3, r6
 800c7e6:	1af2      	sublt	r2, r6, r3
 800c7e8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800c7ea:	bfbf      	itttt	lt
 800c7ec:	9608      	strlt	r6, [sp, #32]
 800c7ee:	189b      	addlt	r3, r3, r2
 800c7f0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800c7f2:	2600      	movlt	r6, #0
 800c7f4:	f1b8 0f00 	cmp.w	r8, #0
 800c7f8:	bfb9      	ittee	lt
 800c7fa:	eba9 0508 	sublt.w	r5, r9, r8
 800c7fe:	2300      	movlt	r3, #0
 800c800:	464d      	movge	r5, r9
 800c802:	4643      	movge	r3, r8
 800c804:	e781      	b.n	800c70a <_dtoa_r+0x70a>
 800c806:	9e08      	ldr	r6, [sp, #32]
 800c808:	464d      	mov	r5, r9
 800c80a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c80c:	e786      	b.n	800c71c <_dtoa_r+0x71c>
 800c80e:	9a08      	ldr	r2, [sp, #32]
 800c810:	e7ad      	b.n	800c76e <_dtoa_r+0x76e>
 800c812:	2300      	movs	r3, #0
 800c814:	e7d6      	b.n	800c7c4 <_dtoa_r+0x7c4>
 800c816:	9b02      	ldr	r3, [sp, #8]
 800c818:	e7d4      	b.n	800c7c4 <_dtoa_r+0x7c4>
 800c81a:	2300      	movs	r3, #0
 800c81c:	9308      	str	r3, [sp, #32]
 800c81e:	6933      	ldr	r3, [r6, #16]
 800c820:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c824:	6918      	ldr	r0, [r3, #16]
 800c826:	f000 fa54 	bl	800ccd2 <__hi0bits>
 800c82a:	f1c0 0020 	rsb	r0, r0, #32
 800c82e:	9b07      	ldr	r3, [sp, #28]
 800c830:	4418      	add	r0, r3
 800c832:	f010 001f 	ands.w	r0, r0, #31
 800c836:	d047      	beq.n	800c8c8 <_dtoa_r+0x8c8>
 800c838:	f1c0 0320 	rsb	r3, r0, #32
 800c83c:	2b04      	cmp	r3, #4
 800c83e:	dd3b      	ble.n	800c8b8 <_dtoa_r+0x8b8>
 800c840:	9b07      	ldr	r3, [sp, #28]
 800c842:	f1c0 001c 	rsb	r0, r0, #28
 800c846:	4481      	add	r9, r0
 800c848:	4405      	add	r5, r0
 800c84a:	4403      	add	r3, r0
 800c84c:	9307      	str	r3, [sp, #28]
 800c84e:	f1b9 0f00 	cmp.w	r9, #0
 800c852:	dd05      	ble.n	800c860 <_dtoa_r+0x860>
 800c854:	4659      	mov	r1, fp
 800c856:	464a      	mov	r2, r9
 800c858:	4620      	mov	r0, r4
 800c85a:	f000 fb75 	bl	800cf48 <__lshift>
 800c85e:	4683      	mov	fp, r0
 800c860:	9b07      	ldr	r3, [sp, #28]
 800c862:	2b00      	cmp	r3, #0
 800c864:	dd05      	ble.n	800c872 <_dtoa_r+0x872>
 800c866:	4631      	mov	r1, r6
 800c868:	461a      	mov	r2, r3
 800c86a:	4620      	mov	r0, r4
 800c86c:	f000 fb6c 	bl	800cf48 <__lshift>
 800c870:	4606      	mov	r6, r0
 800c872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c874:	b353      	cbz	r3, 800c8cc <_dtoa_r+0x8cc>
 800c876:	4631      	mov	r1, r6
 800c878:	4658      	mov	r0, fp
 800c87a:	f000 fbb9 	bl	800cff0 <__mcmp>
 800c87e:	2800      	cmp	r0, #0
 800c880:	da24      	bge.n	800c8cc <_dtoa_r+0x8cc>
 800c882:	2300      	movs	r3, #0
 800c884:	4659      	mov	r1, fp
 800c886:	220a      	movs	r2, #10
 800c888:	4620      	mov	r0, r4
 800c88a:	f000 f9e7 	bl	800cc5c <__multadd>
 800c88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c890:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c894:	4683      	mov	fp, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	f000 8144 	beq.w	800cb24 <_dtoa_r+0xb24>
 800c89c:	2300      	movs	r3, #0
 800c89e:	4639      	mov	r1, r7
 800c8a0:	220a      	movs	r2, #10
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f000 f9da 	bl	800cc5c <__multadd>
 800c8a8:	9b04      	ldr	r3, [sp, #16]
 800c8aa:	4607      	mov	r7, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	dc4d      	bgt.n	800c94c <_dtoa_r+0x94c>
 800c8b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	dd4a      	ble.n	800c94c <_dtoa_r+0x94c>
 800c8b6:	e011      	b.n	800c8dc <_dtoa_r+0x8dc>
 800c8b8:	d0c9      	beq.n	800c84e <_dtoa_r+0x84e>
 800c8ba:	9a07      	ldr	r2, [sp, #28]
 800c8bc:	331c      	adds	r3, #28
 800c8be:	441a      	add	r2, r3
 800c8c0:	4499      	add	r9, r3
 800c8c2:	441d      	add	r5, r3
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	e7c1      	b.n	800c84c <_dtoa_r+0x84c>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	e7f6      	b.n	800c8ba <_dtoa_r+0x8ba>
 800c8cc:	f1b8 0f00 	cmp.w	r8, #0
 800c8d0:	dc36      	bgt.n	800c940 <_dtoa_r+0x940>
 800c8d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	dd33      	ble.n	800c940 <_dtoa_r+0x940>
 800c8d8:	f8cd 8010 	str.w	r8, [sp, #16]
 800c8dc:	9b04      	ldr	r3, [sp, #16]
 800c8de:	b963      	cbnz	r3, 800c8fa <_dtoa_r+0x8fa>
 800c8e0:	4631      	mov	r1, r6
 800c8e2:	2205      	movs	r2, #5
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f000 f9b9 	bl	800cc5c <__multadd>
 800c8ea:	4601      	mov	r1, r0
 800c8ec:	4606      	mov	r6, r0
 800c8ee:	4658      	mov	r0, fp
 800c8f0:	f000 fb7e 	bl	800cff0 <__mcmp>
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	f73f add3 	bgt.w	800c4a0 <_dtoa_r+0x4a0>
 800c8fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c8fc:	9d06      	ldr	r5, [sp, #24]
 800c8fe:	ea6f 0a03 	mvn.w	sl, r3
 800c902:	f04f 0900 	mov.w	r9, #0
 800c906:	4631      	mov	r1, r6
 800c908:	4620      	mov	r0, r4
 800c90a:	f000 f990 	bl	800cc2e <_Bfree>
 800c90e:	2f00      	cmp	r7, #0
 800c910:	f43f aebd 	beq.w	800c68e <_dtoa_r+0x68e>
 800c914:	f1b9 0f00 	cmp.w	r9, #0
 800c918:	d005      	beq.n	800c926 <_dtoa_r+0x926>
 800c91a:	45b9      	cmp	r9, r7
 800c91c:	d003      	beq.n	800c926 <_dtoa_r+0x926>
 800c91e:	4649      	mov	r1, r9
 800c920:	4620      	mov	r0, r4
 800c922:	f000 f984 	bl	800cc2e <_Bfree>
 800c926:	4639      	mov	r1, r7
 800c928:	4620      	mov	r0, r4
 800c92a:	f000 f980 	bl	800cc2e <_Bfree>
 800c92e:	e6ae      	b.n	800c68e <_dtoa_r+0x68e>
 800c930:	2600      	movs	r6, #0
 800c932:	4637      	mov	r7, r6
 800c934:	e7e1      	b.n	800c8fa <_dtoa_r+0x8fa>
 800c936:	46ba      	mov	sl, r7
 800c938:	4637      	mov	r7, r6
 800c93a:	e5b1      	b.n	800c4a0 <_dtoa_r+0x4a0>
 800c93c:	40240000 	.word	0x40240000
 800c940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c942:	f8cd 8010 	str.w	r8, [sp, #16]
 800c946:	2b00      	cmp	r3, #0
 800c948:	f000 80f3 	beq.w	800cb32 <_dtoa_r+0xb32>
 800c94c:	2d00      	cmp	r5, #0
 800c94e:	dd05      	ble.n	800c95c <_dtoa_r+0x95c>
 800c950:	4639      	mov	r1, r7
 800c952:	462a      	mov	r2, r5
 800c954:	4620      	mov	r0, r4
 800c956:	f000 faf7 	bl	800cf48 <__lshift>
 800c95a:	4607      	mov	r7, r0
 800c95c:	9b08      	ldr	r3, [sp, #32]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d04c      	beq.n	800c9fc <_dtoa_r+0x9fc>
 800c962:	6879      	ldr	r1, [r7, #4]
 800c964:	4620      	mov	r0, r4
 800c966:	f000 f92e 	bl	800cbc6 <_Balloc>
 800c96a:	4605      	mov	r5, r0
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	f107 010c 	add.w	r1, r7, #12
 800c972:	3202      	adds	r2, #2
 800c974:	0092      	lsls	r2, r2, #2
 800c976:	300c      	adds	r0, #12
 800c978:	f000 f91a 	bl	800cbb0 <memcpy>
 800c97c:	2201      	movs	r2, #1
 800c97e:	4629      	mov	r1, r5
 800c980:	4620      	mov	r0, r4
 800c982:	f000 fae1 	bl	800cf48 <__lshift>
 800c986:	46b9      	mov	r9, r7
 800c988:	4607      	mov	r7, r0
 800c98a:	9b06      	ldr	r3, [sp, #24]
 800c98c:	9307      	str	r3, [sp, #28]
 800c98e:	9b02      	ldr	r3, [sp, #8]
 800c990:	f003 0301 	and.w	r3, r3, #1
 800c994:	9308      	str	r3, [sp, #32]
 800c996:	4631      	mov	r1, r6
 800c998:	4658      	mov	r0, fp
 800c99a:	f7ff faa0 	bl	800bede <quorem>
 800c99e:	4649      	mov	r1, r9
 800c9a0:	4605      	mov	r5, r0
 800c9a2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c9a6:	4658      	mov	r0, fp
 800c9a8:	f000 fb22 	bl	800cff0 <__mcmp>
 800c9ac:	463a      	mov	r2, r7
 800c9ae:	9002      	str	r0, [sp, #8]
 800c9b0:	4631      	mov	r1, r6
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	f000 fb36 	bl	800d024 <__mdiff>
 800c9b8:	68c3      	ldr	r3, [r0, #12]
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	bb03      	cbnz	r3, 800ca00 <_dtoa_r+0xa00>
 800c9be:	4601      	mov	r1, r0
 800c9c0:	9009      	str	r0, [sp, #36]	; 0x24
 800c9c2:	4658      	mov	r0, fp
 800c9c4:	f000 fb14 	bl	800cff0 <__mcmp>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9cc:	4611      	mov	r1, r2
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c9d2:	f000 f92c 	bl	800cc2e <_Bfree>
 800c9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9d8:	b9a3      	cbnz	r3, 800ca04 <_dtoa_r+0xa04>
 800c9da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c9dc:	b992      	cbnz	r2, 800ca04 <_dtoa_r+0xa04>
 800c9de:	9a08      	ldr	r2, [sp, #32]
 800c9e0:	b982      	cbnz	r2, 800ca04 <_dtoa_r+0xa04>
 800c9e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c9e6:	d029      	beq.n	800ca3c <_dtoa_r+0xa3c>
 800c9e8:	9b02      	ldr	r3, [sp, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	dd01      	ble.n	800c9f2 <_dtoa_r+0x9f2>
 800c9ee:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c9f2:	9b07      	ldr	r3, [sp, #28]
 800c9f4:	1c5d      	adds	r5, r3, #1
 800c9f6:	f883 8000 	strb.w	r8, [r3]
 800c9fa:	e784      	b.n	800c906 <_dtoa_r+0x906>
 800c9fc:	4638      	mov	r0, r7
 800c9fe:	e7c2      	b.n	800c986 <_dtoa_r+0x986>
 800ca00:	2301      	movs	r3, #1
 800ca02:	e7e3      	b.n	800c9cc <_dtoa_r+0x9cc>
 800ca04:	9a02      	ldr	r2, [sp, #8]
 800ca06:	2a00      	cmp	r2, #0
 800ca08:	db04      	blt.n	800ca14 <_dtoa_r+0xa14>
 800ca0a:	d123      	bne.n	800ca54 <_dtoa_r+0xa54>
 800ca0c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ca0e:	bb0a      	cbnz	r2, 800ca54 <_dtoa_r+0xa54>
 800ca10:	9a08      	ldr	r2, [sp, #32]
 800ca12:	b9fa      	cbnz	r2, 800ca54 <_dtoa_r+0xa54>
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	ddec      	ble.n	800c9f2 <_dtoa_r+0x9f2>
 800ca18:	4659      	mov	r1, fp
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	f000 fa93 	bl	800cf48 <__lshift>
 800ca22:	4631      	mov	r1, r6
 800ca24:	4683      	mov	fp, r0
 800ca26:	f000 fae3 	bl	800cff0 <__mcmp>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	dc03      	bgt.n	800ca36 <_dtoa_r+0xa36>
 800ca2e:	d1e0      	bne.n	800c9f2 <_dtoa_r+0x9f2>
 800ca30:	f018 0f01 	tst.w	r8, #1
 800ca34:	d0dd      	beq.n	800c9f2 <_dtoa_r+0x9f2>
 800ca36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ca3a:	d1d8      	bne.n	800c9ee <_dtoa_r+0x9ee>
 800ca3c:	9b07      	ldr	r3, [sp, #28]
 800ca3e:	9a07      	ldr	r2, [sp, #28]
 800ca40:	1c5d      	adds	r5, r3, #1
 800ca42:	2339      	movs	r3, #57	; 0x39
 800ca44:	7013      	strb	r3, [r2, #0]
 800ca46:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca4a:	1e6a      	subs	r2, r5, #1
 800ca4c:	2b39      	cmp	r3, #57	; 0x39
 800ca4e:	d04d      	beq.n	800caec <_dtoa_r+0xaec>
 800ca50:	3301      	adds	r3, #1
 800ca52:	e052      	b.n	800cafa <_dtoa_r+0xafa>
 800ca54:	9a07      	ldr	r2, [sp, #28]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	f102 0501 	add.w	r5, r2, #1
 800ca5c:	dd06      	ble.n	800ca6c <_dtoa_r+0xa6c>
 800ca5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ca62:	d0eb      	beq.n	800ca3c <_dtoa_r+0xa3c>
 800ca64:	f108 0801 	add.w	r8, r8, #1
 800ca68:	9b07      	ldr	r3, [sp, #28]
 800ca6a:	e7c4      	b.n	800c9f6 <_dtoa_r+0x9f6>
 800ca6c:	9b06      	ldr	r3, [sp, #24]
 800ca6e:	9a04      	ldr	r2, [sp, #16]
 800ca70:	1aeb      	subs	r3, r5, r3
 800ca72:	4293      	cmp	r3, r2
 800ca74:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ca78:	d021      	beq.n	800cabe <_dtoa_r+0xabe>
 800ca7a:	4659      	mov	r1, fp
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	220a      	movs	r2, #10
 800ca80:	4620      	mov	r0, r4
 800ca82:	f000 f8eb 	bl	800cc5c <__multadd>
 800ca86:	45b9      	cmp	r9, r7
 800ca88:	4683      	mov	fp, r0
 800ca8a:	f04f 0300 	mov.w	r3, #0
 800ca8e:	f04f 020a 	mov.w	r2, #10
 800ca92:	4649      	mov	r1, r9
 800ca94:	4620      	mov	r0, r4
 800ca96:	d105      	bne.n	800caa4 <_dtoa_r+0xaa4>
 800ca98:	f000 f8e0 	bl	800cc5c <__multadd>
 800ca9c:	4681      	mov	r9, r0
 800ca9e:	4607      	mov	r7, r0
 800caa0:	9507      	str	r5, [sp, #28]
 800caa2:	e778      	b.n	800c996 <_dtoa_r+0x996>
 800caa4:	f000 f8da 	bl	800cc5c <__multadd>
 800caa8:	4639      	mov	r1, r7
 800caaa:	4681      	mov	r9, r0
 800caac:	2300      	movs	r3, #0
 800caae:	220a      	movs	r2, #10
 800cab0:	4620      	mov	r0, r4
 800cab2:	f000 f8d3 	bl	800cc5c <__multadd>
 800cab6:	4607      	mov	r7, r0
 800cab8:	e7f2      	b.n	800caa0 <_dtoa_r+0xaa0>
 800caba:	f04f 0900 	mov.w	r9, #0
 800cabe:	4659      	mov	r1, fp
 800cac0:	2201      	movs	r2, #1
 800cac2:	4620      	mov	r0, r4
 800cac4:	f000 fa40 	bl	800cf48 <__lshift>
 800cac8:	4631      	mov	r1, r6
 800caca:	4683      	mov	fp, r0
 800cacc:	f000 fa90 	bl	800cff0 <__mcmp>
 800cad0:	2800      	cmp	r0, #0
 800cad2:	dcb8      	bgt.n	800ca46 <_dtoa_r+0xa46>
 800cad4:	d102      	bne.n	800cadc <_dtoa_r+0xadc>
 800cad6:	f018 0f01 	tst.w	r8, #1
 800cada:	d1b4      	bne.n	800ca46 <_dtoa_r+0xa46>
 800cadc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cae0:	1e6a      	subs	r2, r5, #1
 800cae2:	2b30      	cmp	r3, #48	; 0x30
 800cae4:	f47f af0f 	bne.w	800c906 <_dtoa_r+0x906>
 800cae8:	4615      	mov	r5, r2
 800caea:	e7f7      	b.n	800cadc <_dtoa_r+0xadc>
 800caec:	9b06      	ldr	r3, [sp, #24]
 800caee:	4293      	cmp	r3, r2
 800caf0:	d105      	bne.n	800cafe <_dtoa_r+0xafe>
 800caf2:	2331      	movs	r3, #49	; 0x31
 800caf4:	9a06      	ldr	r2, [sp, #24]
 800caf6:	f10a 0a01 	add.w	sl, sl, #1
 800cafa:	7013      	strb	r3, [r2, #0]
 800cafc:	e703      	b.n	800c906 <_dtoa_r+0x906>
 800cafe:	4615      	mov	r5, r2
 800cb00:	e7a1      	b.n	800ca46 <_dtoa_r+0xa46>
 800cb02:	4b17      	ldr	r3, [pc, #92]	; (800cb60 <_dtoa_r+0xb60>)
 800cb04:	f7ff bae1 	b.w	800c0ca <_dtoa_r+0xca>
 800cb08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f47f aabb 	bne.w	800c086 <_dtoa_r+0x86>
 800cb10:	4b14      	ldr	r3, [pc, #80]	; (800cb64 <_dtoa_r+0xb64>)
 800cb12:	f7ff bada 	b.w	800c0ca <_dtoa_r+0xca>
 800cb16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	f77f ae3f 	ble.w	800c79c <_dtoa_r+0x79c>
 800cb1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb20:	9308      	str	r3, [sp, #32]
 800cb22:	e653      	b.n	800c7cc <_dtoa_r+0x7cc>
 800cb24:	9b04      	ldr	r3, [sp, #16]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	dc03      	bgt.n	800cb32 <_dtoa_r+0xb32>
 800cb2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cb2c:	2b02      	cmp	r3, #2
 800cb2e:	f73f aed5 	bgt.w	800c8dc <_dtoa_r+0x8dc>
 800cb32:	9d06      	ldr	r5, [sp, #24]
 800cb34:	4631      	mov	r1, r6
 800cb36:	4658      	mov	r0, fp
 800cb38:	f7ff f9d1 	bl	800bede <quorem>
 800cb3c:	9b06      	ldr	r3, [sp, #24]
 800cb3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cb42:	f805 8b01 	strb.w	r8, [r5], #1
 800cb46:	9a04      	ldr	r2, [sp, #16]
 800cb48:	1aeb      	subs	r3, r5, r3
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	ddb5      	ble.n	800caba <_dtoa_r+0xaba>
 800cb4e:	4659      	mov	r1, fp
 800cb50:	2300      	movs	r3, #0
 800cb52:	220a      	movs	r2, #10
 800cb54:	4620      	mov	r0, r4
 800cb56:	f000 f881 	bl	800cc5c <__multadd>
 800cb5a:	4683      	mov	fp, r0
 800cb5c:	e7ea      	b.n	800cb34 <_dtoa_r+0xb34>
 800cb5e:	bf00      	nop
 800cb60:	0800e582 	.word	0x0800e582
 800cb64:	0800e6cc 	.word	0x0800e6cc

0800cb68 <_localeconv_r>:
 800cb68:	4b04      	ldr	r3, [pc, #16]	; (800cb7c <_localeconv_r+0x14>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	6a18      	ldr	r0, [r3, #32]
 800cb6e:	4b04      	ldr	r3, [pc, #16]	; (800cb80 <_localeconv_r+0x18>)
 800cb70:	2800      	cmp	r0, #0
 800cb72:	bf08      	it	eq
 800cb74:	4618      	moveq	r0, r3
 800cb76:	30f0      	adds	r0, #240	; 0xf0
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	20000090 	.word	0x20000090
 800cb80:	200000f4 	.word	0x200000f4

0800cb84 <malloc>:
 800cb84:	4b02      	ldr	r3, [pc, #8]	; (800cb90 <malloc+0xc>)
 800cb86:	4601      	mov	r1, r0
 800cb88:	6818      	ldr	r0, [r3, #0]
 800cb8a:	f000 bb53 	b.w	800d234 <_malloc_r>
 800cb8e:	bf00      	nop
 800cb90:	20000090 	.word	0x20000090

0800cb94 <memchr>:
 800cb94:	b510      	push	{r4, lr}
 800cb96:	b2c9      	uxtb	r1, r1
 800cb98:	4402      	add	r2, r0
 800cb9a:	4290      	cmp	r0, r2
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	d101      	bne.n	800cba4 <memchr+0x10>
 800cba0:	2300      	movs	r3, #0
 800cba2:	e003      	b.n	800cbac <memchr+0x18>
 800cba4:	781c      	ldrb	r4, [r3, #0]
 800cba6:	3001      	adds	r0, #1
 800cba8:	428c      	cmp	r4, r1
 800cbaa:	d1f6      	bne.n	800cb9a <memchr+0x6>
 800cbac:	4618      	mov	r0, r3
 800cbae:	bd10      	pop	{r4, pc}

0800cbb0 <memcpy>:
 800cbb0:	b510      	push	{r4, lr}
 800cbb2:	1e43      	subs	r3, r0, #1
 800cbb4:	440a      	add	r2, r1
 800cbb6:	4291      	cmp	r1, r2
 800cbb8:	d100      	bne.n	800cbbc <memcpy+0xc>
 800cbba:	bd10      	pop	{r4, pc}
 800cbbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbc4:	e7f7      	b.n	800cbb6 <memcpy+0x6>

0800cbc6 <_Balloc>:
 800cbc6:	b570      	push	{r4, r5, r6, lr}
 800cbc8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cbca:	4604      	mov	r4, r0
 800cbcc:	460e      	mov	r6, r1
 800cbce:	b93d      	cbnz	r5, 800cbe0 <_Balloc+0x1a>
 800cbd0:	2010      	movs	r0, #16
 800cbd2:	f7ff ffd7 	bl	800cb84 <malloc>
 800cbd6:	6260      	str	r0, [r4, #36]	; 0x24
 800cbd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cbdc:	6005      	str	r5, [r0, #0]
 800cbde:	60c5      	str	r5, [r0, #12]
 800cbe0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cbe2:	68eb      	ldr	r3, [r5, #12]
 800cbe4:	b183      	cbz	r3, 800cc08 <_Balloc+0x42>
 800cbe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cbee:	b9b8      	cbnz	r0, 800cc20 <_Balloc+0x5a>
 800cbf0:	2101      	movs	r1, #1
 800cbf2:	fa01 f506 	lsl.w	r5, r1, r6
 800cbf6:	1d6a      	adds	r2, r5, #5
 800cbf8:	0092      	lsls	r2, r2, #2
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f000 fabf 	bl	800d17e <_calloc_r>
 800cc00:	b160      	cbz	r0, 800cc1c <_Balloc+0x56>
 800cc02:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800cc06:	e00e      	b.n	800cc26 <_Balloc+0x60>
 800cc08:	2221      	movs	r2, #33	; 0x21
 800cc0a:	2104      	movs	r1, #4
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	f000 fab6 	bl	800d17e <_calloc_r>
 800cc12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc14:	60e8      	str	r0, [r5, #12]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1e4      	bne.n	800cbe6 <_Balloc+0x20>
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	bd70      	pop	{r4, r5, r6, pc}
 800cc20:	6802      	ldr	r2, [r0, #0]
 800cc22:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cc26:	2300      	movs	r3, #0
 800cc28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc2c:	e7f7      	b.n	800cc1e <_Balloc+0x58>

0800cc2e <_Bfree>:
 800cc2e:	b570      	push	{r4, r5, r6, lr}
 800cc30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cc32:	4606      	mov	r6, r0
 800cc34:	460d      	mov	r5, r1
 800cc36:	b93c      	cbnz	r4, 800cc48 <_Bfree+0x1a>
 800cc38:	2010      	movs	r0, #16
 800cc3a:	f7ff ffa3 	bl	800cb84 <malloc>
 800cc3e:	6270      	str	r0, [r6, #36]	; 0x24
 800cc40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc44:	6004      	str	r4, [r0, #0]
 800cc46:	60c4      	str	r4, [r0, #12]
 800cc48:	b13d      	cbz	r5, 800cc5a <_Bfree+0x2c>
 800cc4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cc4c:	686a      	ldr	r2, [r5, #4]
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc54:	6029      	str	r1, [r5, #0]
 800cc56:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cc5a:	bd70      	pop	{r4, r5, r6, pc}

0800cc5c <__multadd>:
 800cc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc60:	461f      	mov	r7, r3
 800cc62:	4606      	mov	r6, r0
 800cc64:	460c      	mov	r4, r1
 800cc66:	2300      	movs	r3, #0
 800cc68:	690d      	ldr	r5, [r1, #16]
 800cc6a:	f101 0c14 	add.w	ip, r1, #20
 800cc6e:	f8dc 0000 	ldr.w	r0, [ip]
 800cc72:	3301      	adds	r3, #1
 800cc74:	b281      	uxth	r1, r0
 800cc76:	fb02 7101 	mla	r1, r2, r1, r7
 800cc7a:	0c00      	lsrs	r0, r0, #16
 800cc7c:	0c0f      	lsrs	r7, r1, #16
 800cc7e:	fb02 7000 	mla	r0, r2, r0, r7
 800cc82:	b289      	uxth	r1, r1
 800cc84:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cc88:	429d      	cmp	r5, r3
 800cc8a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cc8e:	f84c 1b04 	str.w	r1, [ip], #4
 800cc92:	dcec      	bgt.n	800cc6e <__multadd+0x12>
 800cc94:	b1d7      	cbz	r7, 800cccc <__multadd+0x70>
 800cc96:	68a3      	ldr	r3, [r4, #8]
 800cc98:	42ab      	cmp	r3, r5
 800cc9a:	dc12      	bgt.n	800ccc2 <__multadd+0x66>
 800cc9c:	6861      	ldr	r1, [r4, #4]
 800cc9e:	4630      	mov	r0, r6
 800cca0:	3101      	adds	r1, #1
 800cca2:	f7ff ff90 	bl	800cbc6 <_Balloc>
 800cca6:	4680      	mov	r8, r0
 800cca8:	6922      	ldr	r2, [r4, #16]
 800ccaa:	f104 010c 	add.w	r1, r4, #12
 800ccae:	3202      	adds	r2, #2
 800ccb0:	0092      	lsls	r2, r2, #2
 800ccb2:	300c      	adds	r0, #12
 800ccb4:	f7ff ff7c 	bl	800cbb0 <memcpy>
 800ccb8:	4621      	mov	r1, r4
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f7ff ffb7 	bl	800cc2e <_Bfree>
 800ccc0:	4644      	mov	r4, r8
 800ccc2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ccc6:	3501      	adds	r5, #1
 800ccc8:	615f      	str	r7, [r3, #20]
 800ccca:	6125      	str	r5, [r4, #16]
 800cccc:	4620      	mov	r0, r4
 800ccce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ccd2 <__hi0bits>:
 800ccd2:	0c02      	lsrs	r2, r0, #16
 800ccd4:	0412      	lsls	r2, r2, #16
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	b9b2      	cbnz	r2, 800cd08 <__hi0bits+0x36>
 800ccda:	0403      	lsls	r3, r0, #16
 800ccdc:	2010      	movs	r0, #16
 800ccde:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cce2:	bf04      	itt	eq
 800cce4:	021b      	lsleq	r3, r3, #8
 800cce6:	3008      	addeq	r0, #8
 800cce8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ccec:	bf04      	itt	eq
 800ccee:	011b      	lsleq	r3, r3, #4
 800ccf0:	3004      	addeq	r0, #4
 800ccf2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ccf6:	bf04      	itt	eq
 800ccf8:	009b      	lsleq	r3, r3, #2
 800ccfa:	3002      	addeq	r0, #2
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	db06      	blt.n	800cd0e <__hi0bits+0x3c>
 800cd00:	005b      	lsls	r3, r3, #1
 800cd02:	d503      	bpl.n	800cd0c <__hi0bits+0x3a>
 800cd04:	3001      	adds	r0, #1
 800cd06:	4770      	bx	lr
 800cd08:	2000      	movs	r0, #0
 800cd0a:	e7e8      	b.n	800ccde <__hi0bits+0xc>
 800cd0c:	2020      	movs	r0, #32
 800cd0e:	4770      	bx	lr

0800cd10 <__lo0bits>:
 800cd10:	6803      	ldr	r3, [r0, #0]
 800cd12:	4601      	mov	r1, r0
 800cd14:	f013 0207 	ands.w	r2, r3, #7
 800cd18:	d00b      	beq.n	800cd32 <__lo0bits+0x22>
 800cd1a:	07da      	lsls	r2, r3, #31
 800cd1c:	d423      	bmi.n	800cd66 <__lo0bits+0x56>
 800cd1e:	0798      	lsls	r0, r3, #30
 800cd20:	bf49      	itett	mi
 800cd22:	085b      	lsrmi	r3, r3, #1
 800cd24:	089b      	lsrpl	r3, r3, #2
 800cd26:	2001      	movmi	r0, #1
 800cd28:	600b      	strmi	r3, [r1, #0]
 800cd2a:	bf5c      	itt	pl
 800cd2c:	600b      	strpl	r3, [r1, #0]
 800cd2e:	2002      	movpl	r0, #2
 800cd30:	4770      	bx	lr
 800cd32:	b298      	uxth	r0, r3
 800cd34:	b9a8      	cbnz	r0, 800cd62 <__lo0bits+0x52>
 800cd36:	2010      	movs	r0, #16
 800cd38:	0c1b      	lsrs	r3, r3, #16
 800cd3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cd3e:	bf04      	itt	eq
 800cd40:	0a1b      	lsreq	r3, r3, #8
 800cd42:	3008      	addeq	r0, #8
 800cd44:	071a      	lsls	r2, r3, #28
 800cd46:	bf04      	itt	eq
 800cd48:	091b      	lsreq	r3, r3, #4
 800cd4a:	3004      	addeq	r0, #4
 800cd4c:	079a      	lsls	r2, r3, #30
 800cd4e:	bf04      	itt	eq
 800cd50:	089b      	lsreq	r3, r3, #2
 800cd52:	3002      	addeq	r0, #2
 800cd54:	07da      	lsls	r2, r3, #31
 800cd56:	d402      	bmi.n	800cd5e <__lo0bits+0x4e>
 800cd58:	085b      	lsrs	r3, r3, #1
 800cd5a:	d006      	beq.n	800cd6a <__lo0bits+0x5a>
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	600b      	str	r3, [r1, #0]
 800cd60:	4770      	bx	lr
 800cd62:	4610      	mov	r0, r2
 800cd64:	e7e9      	b.n	800cd3a <__lo0bits+0x2a>
 800cd66:	2000      	movs	r0, #0
 800cd68:	4770      	bx	lr
 800cd6a:	2020      	movs	r0, #32
 800cd6c:	4770      	bx	lr

0800cd6e <__i2b>:
 800cd6e:	b510      	push	{r4, lr}
 800cd70:	460c      	mov	r4, r1
 800cd72:	2101      	movs	r1, #1
 800cd74:	f7ff ff27 	bl	800cbc6 <_Balloc>
 800cd78:	2201      	movs	r2, #1
 800cd7a:	6144      	str	r4, [r0, #20]
 800cd7c:	6102      	str	r2, [r0, #16]
 800cd7e:	bd10      	pop	{r4, pc}

0800cd80 <__multiply>:
 800cd80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd84:	4614      	mov	r4, r2
 800cd86:	690a      	ldr	r2, [r1, #16]
 800cd88:	6923      	ldr	r3, [r4, #16]
 800cd8a:	4688      	mov	r8, r1
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	bfbe      	ittt	lt
 800cd90:	460b      	movlt	r3, r1
 800cd92:	46a0      	movlt	r8, r4
 800cd94:	461c      	movlt	r4, r3
 800cd96:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cd9a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cd9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cda2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cda6:	eb07 0609 	add.w	r6, r7, r9
 800cdaa:	42b3      	cmp	r3, r6
 800cdac:	bfb8      	it	lt
 800cdae:	3101      	addlt	r1, #1
 800cdb0:	f7ff ff09 	bl	800cbc6 <_Balloc>
 800cdb4:	f100 0514 	add.w	r5, r0, #20
 800cdb8:	462b      	mov	r3, r5
 800cdba:	2200      	movs	r2, #0
 800cdbc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800cdc0:	4573      	cmp	r3, lr
 800cdc2:	d316      	bcc.n	800cdf2 <__multiply+0x72>
 800cdc4:	f104 0214 	add.w	r2, r4, #20
 800cdc8:	f108 0114 	add.w	r1, r8, #20
 800cdcc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800cdd0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	9b00      	ldr	r3, [sp, #0]
 800cdd8:	9201      	str	r2, [sp, #4]
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d80c      	bhi.n	800cdf8 <__multiply+0x78>
 800cdde:	2e00      	cmp	r6, #0
 800cde0:	dd03      	ble.n	800cdea <__multiply+0x6a>
 800cde2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d05d      	beq.n	800cea6 <__multiply+0x126>
 800cdea:	6106      	str	r6, [r0, #16]
 800cdec:	b003      	add	sp, #12
 800cdee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf2:	f843 2b04 	str.w	r2, [r3], #4
 800cdf6:	e7e3      	b.n	800cdc0 <__multiply+0x40>
 800cdf8:	f8b2 b000 	ldrh.w	fp, [r2]
 800cdfc:	f1bb 0f00 	cmp.w	fp, #0
 800ce00:	d023      	beq.n	800ce4a <__multiply+0xca>
 800ce02:	4689      	mov	r9, r1
 800ce04:	46ac      	mov	ip, r5
 800ce06:	f04f 0800 	mov.w	r8, #0
 800ce0a:	f859 4b04 	ldr.w	r4, [r9], #4
 800ce0e:	f8dc a000 	ldr.w	sl, [ip]
 800ce12:	b2a3      	uxth	r3, r4
 800ce14:	fa1f fa8a 	uxth.w	sl, sl
 800ce18:	fb0b a303 	mla	r3, fp, r3, sl
 800ce1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ce20:	f8dc 4000 	ldr.w	r4, [ip]
 800ce24:	4443      	add	r3, r8
 800ce26:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ce2a:	fb0b 840a 	mla	r4, fp, sl, r8
 800ce2e:	46e2      	mov	sl, ip
 800ce30:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ce3a:	454f      	cmp	r7, r9
 800ce3c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ce40:	f84a 3b04 	str.w	r3, [sl], #4
 800ce44:	d82b      	bhi.n	800ce9e <__multiply+0x11e>
 800ce46:	f8cc 8004 	str.w	r8, [ip, #4]
 800ce4a:	9b01      	ldr	r3, [sp, #4]
 800ce4c:	3204      	adds	r2, #4
 800ce4e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ce52:	f1ba 0f00 	cmp.w	sl, #0
 800ce56:	d020      	beq.n	800ce9a <__multiply+0x11a>
 800ce58:	4689      	mov	r9, r1
 800ce5a:	46a8      	mov	r8, r5
 800ce5c:	f04f 0b00 	mov.w	fp, #0
 800ce60:	682b      	ldr	r3, [r5, #0]
 800ce62:	f8b9 c000 	ldrh.w	ip, [r9]
 800ce66:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	fb0a 440c 	mla	r4, sl, ip, r4
 800ce70:	46c4      	mov	ip, r8
 800ce72:	445c      	add	r4, fp
 800ce74:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ce78:	f84c 3b04 	str.w	r3, [ip], #4
 800ce7c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ce80:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ce84:	0c1b      	lsrs	r3, r3, #16
 800ce86:	fb0a b303 	mla	r3, sl, r3, fp
 800ce8a:	454f      	cmp	r7, r9
 800ce8c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ce90:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ce94:	d805      	bhi.n	800cea2 <__multiply+0x122>
 800ce96:	f8c8 3004 	str.w	r3, [r8, #4]
 800ce9a:	3504      	adds	r5, #4
 800ce9c:	e79b      	b.n	800cdd6 <__multiply+0x56>
 800ce9e:	46d4      	mov	ip, sl
 800cea0:	e7b3      	b.n	800ce0a <__multiply+0x8a>
 800cea2:	46e0      	mov	r8, ip
 800cea4:	e7dd      	b.n	800ce62 <__multiply+0xe2>
 800cea6:	3e01      	subs	r6, #1
 800cea8:	e799      	b.n	800cdde <__multiply+0x5e>
	...

0800ceac <__pow5mult>:
 800ceac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceb0:	4615      	mov	r5, r2
 800ceb2:	f012 0203 	ands.w	r2, r2, #3
 800ceb6:	4606      	mov	r6, r0
 800ceb8:	460f      	mov	r7, r1
 800ceba:	d007      	beq.n	800cecc <__pow5mult+0x20>
 800cebc:	4c21      	ldr	r4, [pc, #132]	; (800cf44 <__pow5mult+0x98>)
 800cebe:	3a01      	subs	r2, #1
 800cec0:	2300      	movs	r3, #0
 800cec2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cec6:	f7ff fec9 	bl	800cc5c <__multadd>
 800ceca:	4607      	mov	r7, r0
 800cecc:	10ad      	asrs	r5, r5, #2
 800cece:	d035      	beq.n	800cf3c <__pow5mult+0x90>
 800ced0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ced2:	b93c      	cbnz	r4, 800cee4 <__pow5mult+0x38>
 800ced4:	2010      	movs	r0, #16
 800ced6:	f7ff fe55 	bl	800cb84 <malloc>
 800ceda:	6270      	str	r0, [r6, #36]	; 0x24
 800cedc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cee0:	6004      	str	r4, [r0, #0]
 800cee2:	60c4      	str	r4, [r0, #12]
 800cee4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cee8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ceec:	b94c      	cbnz	r4, 800cf02 <__pow5mult+0x56>
 800ceee:	f240 2171 	movw	r1, #625	; 0x271
 800cef2:	4630      	mov	r0, r6
 800cef4:	f7ff ff3b 	bl	800cd6e <__i2b>
 800cef8:	2300      	movs	r3, #0
 800cefa:	4604      	mov	r4, r0
 800cefc:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf00:	6003      	str	r3, [r0, #0]
 800cf02:	f04f 0800 	mov.w	r8, #0
 800cf06:	07eb      	lsls	r3, r5, #31
 800cf08:	d50a      	bpl.n	800cf20 <__pow5mult+0x74>
 800cf0a:	4639      	mov	r1, r7
 800cf0c:	4622      	mov	r2, r4
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f7ff ff36 	bl	800cd80 <__multiply>
 800cf14:	4681      	mov	r9, r0
 800cf16:	4639      	mov	r1, r7
 800cf18:	4630      	mov	r0, r6
 800cf1a:	f7ff fe88 	bl	800cc2e <_Bfree>
 800cf1e:	464f      	mov	r7, r9
 800cf20:	106d      	asrs	r5, r5, #1
 800cf22:	d00b      	beq.n	800cf3c <__pow5mult+0x90>
 800cf24:	6820      	ldr	r0, [r4, #0]
 800cf26:	b938      	cbnz	r0, 800cf38 <__pow5mult+0x8c>
 800cf28:	4622      	mov	r2, r4
 800cf2a:	4621      	mov	r1, r4
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	f7ff ff27 	bl	800cd80 <__multiply>
 800cf32:	6020      	str	r0, [r4, #0]
 800cf34:	f8c0 8000 	str.w	r8, [r0]
 800cf38:	4604      	mov	r4, r0
 800cf3a:	e7e4      	b.n	800cf06 <__pow5mult+0x5a>
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf42:	bf00      	nop
 800cf44:	0800e7d0 	.word	0x0800e7d0

0800cf48 <__lshift>:
 800cf48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	4607      	mov	r7, r0
 800cf50:	4616      	mov	r6, r2
 800cf52:	6923      	ldr	r3, [r4, #16]
 800cf54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf58:	eb0a 0903 	add.w	r9, sl, r3
 800cf5c:	6849      	ldr	r1, [r1, #4]
 800cf5e:	68a3      	ldr	r3, [r4, #8]
 800cf60:	f109 0501 	add.w	r5, r9, #1
 800cf64:	42ab      	cmp	r3, r5
 800cf66:	db32      	blt.n	800cfce <__lshift+0x86>
 800cf68:	4638      	mov	r0, r7
 800cf6a:	f7ff fe2c 	bl	800cbc6 <_Balloc>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	4680      	mov	r8, r0
 800cf72:	461a      	mov	r2, r3
 800cf74:	f100 0114 	add.w	r1, r0, #20
 800cf78:	4553      	cmp	r3, sl
 800cf7a:	db2b      	blt.n	800cfd4 <__lshift+0x8c>
 800cf7c:	6920      	ldr	r0, [r4, #16]
 800cf7e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf82:	f104 0314 	add.w	r3, r4, #20
 800cf86:	f016 021f 	ands.w	r2, r6, #31
 800cf8a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf8e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf92:	d025      	beq.n	800cfe0 <__lshift+0x98>
 800cf94:	2000      	movs	r0, #0
 800cf96:	f1c2 0e20 	rsb	lr, r2, #32
 800cf9a:	468a      	mov	sl, r1
 800cf9c:	681e      	ldr	r6, [r3, #0]
 800cf9e:	4096      	lsls	r6, r2
 800cfa0:	4330      	orrs	r0, r6
 800cfa2:	f84a 0b04 	str.w	r0, [sl], #4
 800cfa6:	f853 0b04 	ldr.w	r0, [r3], #4
 800cfaa:	459c      	cmp	ip, r3
 800cfac:	fa20 f00e 	lsr.w	r0, r0, lr
 800cfb0:	d814      	bhi.n	800cfdc <__lshift+0x94>
 800cfb2:	6048      	str	r0, [r1, #4]
 800cfb4:	b108      	cbz	r0, 800cfba <__lshift+0x72>
 800cfb6:	f109 0502 	add.w	r5, r9, #2
 800cfba:	3d01      	subs	r5, #1
 800cfbc:	4638      	mov	r0, r7
 800cfbe:	f8c8 5010 	str.w	r5, [r8, #16]
 800cfc2:	4621      	mov	r1, r4
 800cfc4:	f7ff fe33 	bl	800cc2e <_Bfree>
 800cfc8:	4640      	mov	r0, r8
 800cfca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfce:	3101      	adds	r1, #1
 800cfd0:	005b      	lsls	r3, r3, #1
 800cfd2:	e7c7      	b.n	800cf64 <__lshift+0x1c>
 800cfd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	e7cd      	b.n	800cf78 <__lshift+0x30>
 800cfdc:	4651      	mov	r1, sl
 800cfde:	e7dc      	b.n	800cf9a <__lshift+0x52>
 800cfe0:	3904      	subs	r1, #4
 800cfe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfe6:	459c      	cmp	ip, r3
 800cfe8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfec:	d8f9      	bhi.n	800cfe2 <__lshift+0x9a>
 800cfee:	e7e4      	b.n	800cfba <__lshift+0x72>

0800cff0 <__mcmp>:
 800cff0:	6903      	ldr	r3, [r0, #16]
 800cff2:	690a      	ldr	r2, [r1, #16]
 800cff4:	b530      	push	{r4, r5, lr}
 800cff6:	1a9b      	subs	r3, r3, r2
 800cff8:	d10c      	bne.n	800d014 <__mcmp+0x24>
 800cffa:	0092      	lsls	r2, r2, #2
 800cffc:	3014      	adds	r0, #20
 800cffe:	3114      	adds	r1, #20
 800d000:	1884      	adds	r4, r0, r2
 800d002:	4411      	add	r1, r2
 800d004:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d008:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d00c:	4295      	cmp	r5, r2
 800d00e:	d003      	beq.n	800d018 <__mcmp+0x28>
 800d010:	d305      	bcc.n	800d01e <__mcmp+0x2e>
 800d012:	2301      	movs	r3, #1
 800d014:	4618      	mov	r0, r3
 800d016:	bd30      	pop	{r4, r5, pc}
 800d018:	42a0      	cmp	r0, r4
 800d01a:	d3f3      	bcc.n	800d004 <__mcmp+0x14>
 800d01c:	e7fa      	b.n	800d014 <__mcmp+0x24>
 800d01e:	f04f 33ff 	mov.w	r3, #4294967295
 800d022:	e7f7      	b.n	800d014 <__mcmp+0x24>

0800d024 <__mdiff>:
 800d024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d028:	460d      	mov	r5, r1
 800d02a:	4607      	mov	r7, r0
 800d02c:	4611      	mov	r1, r2
 800d02e:	4628      	mov	r0, r5
 800d030:	4614      	mov	r4, r2
 800d032:	f7ff ffdd 	bl	800cff0 <__mcmp>
 800d036:	1e06      	subs	r6, r0, #0
 800d038:	d108      	bne.n	800d04c <__mdiff+0x28>
 800d03a:	4631      	mov	r1, r6
 800d03c:	4638      	mov	r0, r7
 800d03e:	f7ff fdc2 	bl	800cbc6 <_Balloc>
 800d042:	2301      	movs	r3, #1
 800d044:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d04c:	bfa4      	itt	ge
 800d04e:	4623      	movge	r3, r4
 800d050:	462c      	movge	r4, r5
 800d052:	4638      	mov	r0, r7
 800d054:	6861      	ldr	r1, [r4, #4]
 800d056:	bfa6      	itte	ge
 800d058:	461d      	movge	r5, r3
 800d05a:	2600      	movge	r6, #0
 800d05c:	2601      	movlt	r6, #1
 800d05e:	f7ff fdb2 	bl	800cbc6 <_Balloc>
 800d062:	f04f 0e00 	mov.w	lr, #0
 800d066:	60c6      	str	r6, [r0, #12]
 800d068:	692b      	ldr	r3, [r5, #16]
 800d06a:	6926      	ldr	r6, [r4, #16]
 800d06c:	f104 0214 	add.w	r2, r4, #20
 800d070:	f105 0914 	add.w	r9, r5, #20
 800d074:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d078:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d07c:	f100 0114 	add.w	r1, r0, #20
 800d080:	f852 ab04 	ldr.w	sl, [r2], #4
 800d084:	f859 5b04 	ldr.w	r5, [r9], #4
 800d088:	fa1f f38a 	uxth.w	r3, sl
 800d08c:	4473      	add	r3, lr
 800d08e:	b2ac      	uxth	r4, r5
 800d090:	1b1b      	subs	r3, r3, r4
 800d092:	0c2c      	lsrs	r4, r5, #16
 800d094:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800d098:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800d0a2:	45c8      	cmp	r8, r9
 800d0a4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800d0a8:	4694      	mov	ip, r2
 800d0aa:	f841 4b04 	str.w	r4, [r1], #4
 800d0ae:	d8e7      	bhi.n	800d080 <__mdiff+0x5c>
 800d0b0:	45bc      	cmp	ip, r7
 800d0b2:	d304      	bcc.n	800d0be <__mdiff+0x9a>
 800d0b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d0b8:	b183      	cbz	r3, 800d0dc <__mdiff+0xb8>
 800d0ba:	6106      	str	r6, [r0, #16]
 800d0bc:	e7c4      	b.n	800d048 <__mdiff+0x24>
 800d0be:	f85c 4b04 	ldr.w	r4, [ip], #4
 800d0c2:	b2a2      	uxth	r2, r4
 800d0c4:	4472      	add	r2, lr
 800d0c6:	1413      	asrs	r3, r2, #16
 800d0c8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d0cc:	b292      	uxth	r2, r2
 800d0ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d0d2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d0d6:	f841 2b04 	str.w	r2, [r1], #4
 800d0da:	e7e9      	b.n	800d0b0 <__mdiff+0x8c>
 800d0dc:	3e01      	subs	r6, #1
 800d0de:	e7e9      	b.n	800d0b4 <__mdiff+0x90>

0800d0e0 <__d2b>:
 800d0e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d0e4:	461c      	mov	r4, r3
 800d0e6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800d0ea:	2101      	movs	r1, #1
 800d0ec:	4690      	mov	r8, r2
 800d0ee:	f7ff fd6a 	bl	800cbc6 <_Balloc>
 800d0f2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800d0f6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800d0fa:	4607      	mov	r7, r0
 800d0fc:	bb34      	cbnz	r4, 800d14c <__d2b+0x6c>
 800d0fe:	9201      	str	r2, [sp, #4]
 800d100:	f1b8 0200 	subs.w	r2, r8, #0
 800d104:	d027      	beq.n	800d156 <__d2b+0x76>
 800d106:	a802      	add	r0, sp, #8
 800d108:	f840 2d08 	str.w	r2, [r0, #-8]!
 800d10c:	f7ff fe00 	bl	800cd10 <__lo0bits>
 800d110:	9900      	ldr	r1, [sp, #0]
 800d112:	b1f0      	cbz	r0, 800d152 <__d2b+0x72>
 800d114:	9a01      	ldr	r2, [sp, #4]
 800d116:	f1c0 0320 	rsb	r3, r0, #32
 800d11a:	fa02 f303 	lsl.w	r3, r2, r3
 800d11e:	430b      	orrs	r3, r1
 800d120:	40c2      	lsrs	r2, r0
 800d122:	617b      	str	r3, [r7, #20]
 800d124:	9201      	str	r2, [sp, #4]
 800d126:	9b01      	ldr	r3, [sp, #4]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	bf14      	ite	ne
 800d12c:	2102      	movne	r1, #2
 800d12e:	2101      	moveq	r1, #1
 800d130:	61bb      	str	r3, [r7, #24]
 800d132:	6139      	str	r1, [r7, #16]
 800d134:	b1c4      	cbz	r4, 800d168 <__d2b+0x88>
 800d136:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d13a:	4404      	add	r4, r0
 800d13c:	6034      	str	r4, [r6, #0]
 800d13e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d142:	6028      	str	r0, [r5, #0]
 800d144:	4638      	mov	r0, r7
 800d146:	b002      	add	sp, #8
 800d148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d14c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d150:	e7d5      	b.n	800d0fe <__d2b+0x1e>
 800d152:	6179      	str	r1, [r7, #20]
 800d154:	e7e7      	b.n	800d126 <__d2b+0x46>
 800d156:	a801      	add	r0, sp, #4
 800d158:	f7ff fdda 	bl	800cd10 <__lo0bits>
 800d15c:	2101      	movs	r1, #1
 800d15e:	9b01      	ldr	r3, [sp, #4]
 800d160:	6139      	str	r1, [r7, #16]
 800d162:	617b      	str	r3, [r7, #20]
 800d164:	3020      	adds	r0, #32
 800d166:	e7e5      	b.n	800d134 <__d2b+0x54>
 800d168:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d16c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d170:	6030      	str	r0, [r6, #0]
 800d172:	6918      	ldr	r0, [r3, #16]
 800d174:	f7ff fdad 	bl	800ccd2 <__hi0bits>
 800d178:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d17c:	e7e1      	b.n	800d142 <__d2b+0x62>

0800d17e <_calloc_r>:
 800d17e:	b538      	push	{r3, r4, r5, lr}
 800d180:	fb02 f401 	mul.w	r4, r2, r1
 800d184:	4621      	mov	r1, r4
 800d186:	f000 f855 	bl	800d234 <_malloc_r>
 800d18a:	4605      	mov	r5, r0
 800d18c:	b118      	cbz	r0, 800d196 <_calloc_r+0x18>
 800d18e:	4622      	mov	r2, r4
 800d190:	2100      	movs	r1, #0
 800d192:	f7fe f9e1 	bl	800b558 <memset>
 800d196:	4628      	mov	r0, r5
 800d198:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d19c <_free_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4605      	mov	r5, r0
 800d1a0:	2900      	cmp	r1, #0
 800d1a2:	d043      	beq.n	800d22c <_free_r+0x90>
 800d1a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1a8:	1f0c      	subs	r4, r1, #4
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	bfb8      	it	lt
 800d1ae:	18e4      	addlt	r4, r4, r3
 800d1b0:	f000 fa15 	bl	800d5de <__malloc_lock>
 800d1b4:	4a1e      	ldr	r2, [pc, #120]	; (800d230 <_free_r+0x94>)
 800d1b6:	6813      	ldr	r3, [r2, #0]
 800d1b8:	4610      	mov	r0, r2
 800d1ba:	b933      	cbnz	r3, 800d1ca <_free_r+0x2e>
 800d1bc:	6063      	str	r3, [r4, #4]
 800d1be:	6014      	str	r4, [r2, #0]
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1c6:	f000 ba0b 	b.w	800d5e0 <__malloc_unlock>
 800d1ca:	42a3      	cmp	r3, r4
 800d1cc:	d90b      	bls.n	800d1e6 <_free_r+0x4a>
 800d1ce:	6821      	ldr	r1, [r4, #0]
 800d1d0:	1862      	adds	r2, r4, r1
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	bf01      	itttt	eq
 800d1d6:	681a      	ldreq	r2, [r3, #0]
 800d1d8:	685b      	ldreq	r3, [r3, #4]
 800d1da:	1852      	addeq	r2, r2, r1
 800d1dc:	6022      	streq	r2, [r4, #0]
 800d1de:	6063      	str	r3, [r4, #4]
 800d1e0:	6004      	str	r4, [r0, #0]
 800d1e2:	e7ed      	b.n	800d1c0 <_free_r+0x24>
 800d1e4:	4613      	mov	r3, r2
 800d1e6:	685a      	ldr	r2, [r3, #4]
 800d1e8:	b10a      	cbz	r2, 800d1ee <_free_r+0x52>
 800d1ea:	42a2      	cmp	r2, r4
 800d1ec:	d9fa      	bls.n	800d1e4 <_free_r+0x48>
 800d1ee:	6819      	ldr	r1, [r3, #0]
 800d1f0:	1858      	adds	r0, r3, r1
 800d1f2:	42a0      	cmp	r0, r4
 800d1f4:	d10b      	bne.n	800d20e <_free_r+0x72>
 800d1f6:	6820      	ldr	r0, [r4, #0]
 800d1f8:	4401      	add	r1, r0
 800d1fa:	1858      	adds	r0, r3, r1
 800d1fc:	4282      	cmp	r2, r0
 800d1fe:	6019      	str	r1, [r3, #0]
 800d200:	d1de      	bne.n	800d1c0 <_free_r+0x24>
 800d202:	6810      	ldr	r0, [r2, #0]
 800d204:	6852      	ldr	r2, [r2, #4]
 800d206:	4401      	add	r1, r0
 800d208:	6019      	str	r1, [r3, #0]
 800d20a:	605a      	str	r2, [r3, #4]
 800d20c:	e7d8      	b.n	800d1c0 <_free_r+0x24>
 800d20e:	d902      	bls.n	800d216 <_free_r+0x7a>
 800d210:	230c      	movs	r3, #12
 800d212:	602b      	str	r3, [r5, #0]
 800d214:	e7d4      	b.n	800d1c0 <_free_r+0x24>
 800d216:	6820      	ldr	r0, [r4, #0]
 800d218:	1821      	adds	r1, r4, r0
 800d21a:	428a      	cmp	r2, r1
 800d21c:	bf01      	itttt	eq
 800d21e:	6811      	ldreq	r1, [r2, #0]
 800d220:	6852      	ldreq	r2, [r2, #4]
 800d222:	1809      	addeq	r1, r1, r0
 800d224:	6021      	streq	r1, [r4, #0]
 800d226:	6062      	str	r2, [r4, #4]
 800d228:	605c      	str	r4, [r3, #4]
 800d22a:	e7c9      	b.n	800d1c0 <_free_r+0x24>
 800d22c:	bd38      	pop	{r3, r4, r5, pc}
 800d22e:	bf00      	nop
 800d230:	200006a4 	.word	0x200006a4

0800d234 <_malloc_r>:
 800d234:	b570      	push	{r4, r5, r6, lr}
 800d236:	1ccd      	adds	r5, r1, #3
 800d238:	f025 0503 	bic.w	r5, r5, #3
 800d23c:	3508      	adds	r5, #8
 800d23e:	2d0c      	cmp	r5, #12
 800d240:	bf38      	it	cc
 800d242:	250c      	movcc	r5, #12
 800d244:	2d00      	cmp	r5, #0
 800d246:	4606      	mov	r6, r0
 800d248:	db01      	blt.n	800d24e <_malloc_r+0x1a>
 800d24a:	42a9      	cmp	r1, r5
 800d24c:	d903      	bls.n	800d256 <_malloc_r+0x22>
 800d24e:	230c      	movs	r3, #12
 800d250:	6033      	str	r3, [r6, #0]
 800d252:	2000      	movs	r0, #0
 800d254:	bd70      	pop	{r4, r5, r6, pc}
 800d256:	f000 f9c2 	bl	800d5de <__malloc_lock>
 800d25a:	4a21      	ldr	r2, [pc, #132]	; (800d2e0 <_malloc_r+0xac>)
 800d25c:	6814      	ldr	r4, [r2, #0]
 800d25e:	4621      	mov	r1, r4
 800d260:	b991      	cbnz	r1, 800d288 <_malloc_r+0x54>
 800d262:	4c20      	ldr	r4, [pc, #128]	; (800d2e4 <_malloc_r+0xb0>)
 800d264:	6823      	ldr	r3, [r4, #0]
 800d266:	b91b      	cbnz	r3, 800d270 <_malloc_r+0x3c>
 800d268:	4630      	mov	r0, r6
 800d26a:	f000 f98f 	bl	800d58c <_sbrk_r>
 800d26e:	6020      	str	r0, [r4, #0]
 800d270:	4629      	mov	r1, r5
 800d272:	4630      	mov	r0, r6
 800d274:	f000 f98a 	bl	800d58c <_sbrk_r>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d124      	bne.n	800d2c6 <_malloc_r+0x92>
 800d27c:	230c      	movs	r3, #12
 800d27e:	4630      	mov	r0, r6
 800d280:	6033      	str	r3, [r6, #0]
 800d282:	f000 f9ad 	bl	800d5e0 <__malloc_unlock>
 800d286:	e7e4      	b.n	800d252 <_malloc_r+0x1e>
 800d288:	680b      	ldr	r3, [r1, #0]
 800d28a:	1b5b      	subs	r3, r3, r5
 800d28c:	d418      	bmi.n	800d2c0 <_malloc_r+0x8c>
 800d28e:	2b0b      	cmp	r3, #11
 800d290:	d90f      	bls.n	800d2b2 <_malloc_r+0x7e>
 800d292:	600b      	str	r3, [r1, #0]
 800d294:	18cc      	adds	r4, r1, r3
 800d296:	50cd      	str	r5, [r1, r3]
 800d298:	4630      	mov	r0, r6
 800d29a:	f000 f9a1 	bl	800d5e0 <__malloc_unlock>
 800d29e:	f104 000b 	add.w	r0, r4, #11
 800d2a2:	1d23      	adds	r3, r4, #4
 800d2a4:	f020 0007 	bic.w	r0, r0, #7
 800d2a8:	1ac3      	subs	r3, r0, r3
 800d2aa:	d0d3      	beq.n	800d254 <_malloc_r+0x20>
 800d2ac:	425a      	negs	r2, r3
 800d2ae:	50e2      	str	r2, [r4, r3]
 800d2b0:	e7d0      	b.n	800d254 <_malloc_r+0x20>
 800d2b2:	684b      	ldr	r3, [r1, #4]
 800d2b4:	428c      	cmp	r4, r1
 800d2b6:	bf16      	itet	ne
 800d2b8:	6063      	strne	r3, [r4, #4]
 800d2ba:	6013      	streq	r3, [r2, #0]
 800d2bc:	460c      	movne	r4, r1
 800d2be:	e7eb      	b.n	800d298 <_malloc_r+0x64>
 800d2c0:	460c      	mov	r4, r1
 800d2c2:	6849      	ldr	r1, [r1, #4]
 800d2c4:	e7cc      	b.n	800d260 <_malloc_r+0x2c>
 800d2c6:	1cc4      	adds	r4, r0, #3
 800d2c8:	f024 0403 	bic.w	r4, r4, #3
 800d2cc:	42a0      	cmp	r0, r4
 800d2ce:	d005      	beq.n	800d2dc <_malloc_r+0xa8>
 800d2d0:	1a21      	subs	r1, r4, r0
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	f000 f95a 	bl	800d58c <_sbrk_r>
 800d2d8:	3001      	adds	r0, #1
 800d2da:	d0cf      	beq.n	800d27c <_malloc_r+0x48>
 800d2dc:	6025      	str	r5, [r4, #0]
 800d2de:	e7db      	b.n	800d298 <_malloc_r+0x64>
 800d2e0:	200006a4 	.word	0x200006a4
 800d2e4:	200006a8 	.word	0x200006a8

0800d2e8 <__ssputs_r>:
 800d2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2ec:	688e      	ldr	r6, [r1, #8]
 800d2ee:	4682      	mov	sl, r0
 800d2f0:	429e      	cmp	r6, r3
 800d2f2:	460c      	mov	r4, r1
 800d2f4:	4690      	mov	r8, r2
 800d2f6:	4699      	mov	r9, r3
 800d2f8:	d837      	bhi.n	800d36a <__ssputs_r+0x82>
 800d2fa:	898a      	ldrh	r2, [r1, #12]
 800d2fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d300:	d031      	beq.n	800d366 <__ssputs_r+0x7e>
 800d302:	2302      	movs	r3, #2
 800d304:	6825      	ldr	r5, [r4, #0]
 800d306:	6909      	ldr	r1, [r1, #16]
 800d308:	1a6f      	subs	r7, r5, r1
 800d30a:	6965      	ldr	r5, [r4, #20]
 800d30c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d310:	fb95 f5f3 	sdiv	r5, r5, r3
 800d314:	f109 0301 	add.w	r3, r9, #1
 800d318:	443b      	add	r3, r7
 800d31a:	429d      	cmp	r5, r3
 800d31c:	bf38      	it	cc
 800d31e:	461d      	movcc	r5, r3
 800d320:	0553      	lsls	r3, r2, #21
 800d322:	d530      	bpl.n	800d386 <__ssputs_r+0x9e>
 800d324:	4629      	mov	r1, r5
 800d326:	f7ff ff85 	bl	800d234 <_malloc_r>
 800d32a:	4606      	mov	r6, r0
 800d32c:	b950      	cbnz	r0, 800d344 <__ssputs_r+0x5c>
 800d32e:	230c      	movs	r3, #12
 800d330:	f04f 30ff 	mov.w	r0, #4294967295
 800d334:	f8ca 3000 	str.w	r3, [sl]
 800d338:	89a3      	ldrh	r3, [r4, #12]
 800d33a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d33e:	81a3      	strh	r3, [r4, #12]
 800d340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d344:	463a      	mov	r2, r7
 800d346:	6921      	ldr	r1, [r4, #16]
 800d348:	f7ff fc32 	bl	800cbb0 <memcpy>
 800d34c:	89a3      	ldrh	r3, [r4, #12]
 800d34e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d356:	81a3      	strh	r3, [r4, #12]
 800d358:	6126      	str	r6, [r4, #16]
 800d35a:	443e      	add	r6, r7
 800d35c:	6026      	str	r6, [r4, #0]
 800d35e:	464e      	mov	r6, r9
 800d360:	6165      	str	r5, [r4, #20]
 800d362:	1bed      	subs	r5, r5, r7
 800d364:	60a5      	str	r5, [r4, #8]
 800d366:	454e      	cmp	r6, r9
 800d368:	d900      	bls.n	800d36c <__ssputs_r+0x84>
 800d36a:	464e      	mov	r6, r9
 800d36c:	4632      	mov	r2, r6
 800d36e:	4641      	mov	r1, r8
 800d370:	6820      	ldr	r0, [r4, #0]
 800d372:	f000 f91b 	bl	800d5ac <memmove>
 800d376:	68a3      	ldr	r3, [r4, #8]
 800d378:	2000      	movs	r0, #0
 800d37a:	1b9b      	subs	r3, r3, r6
 800d37c:	60a3      	str	r3, [r4, #8]
 800d37e:	6823      	ldr	r3, [r4, #0]
 800d380:	441e      	add	r6, r3
 800d382:	6026      	str	r6, [r4, #0]
 800d384:	e7dc      	b.n	800d340 <__ssputs_r+0x58>
 800d386:	462a      	mov	r2, r5
 800d388:	f000 f92b 	bl	800d5e2 <_realloc_r>
 800d38c:	4606      	mov	r6, r0
 800d38e:	2800      	cmp	r0, #0
 800d390:	d1e2      	bne.n	800d358 <__ssputs_r+0x70>
 800d392:	6921      	ldr	r1, [r4, #16]
 800d394:	4650      	mov	r0, sl
 800d396:	f7ff ff01 	bl	800d19c <_free_r>
 800d39a:	e7c8      	b.n	800d32e <__ssputs_r+0x46>

0800d39c <_svfiprintf_r>:
 800d39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a0:	461d      	mov	r5, r3
 800d3a2:	898b      	ldrh	r3, [r1, #12]
 800d3a4:	b09d      	sub	sp, #116	; 0x74
 800d3a6:	061f      	lsls	r7, r3, #24
 800d3a8:	4680      	mov	r8, r0
 800d3aa:	460c      	mov	r4, r1
 800d3ac:	4616      	mov	r6, r2
 800d3ae:	d50f      	bpl.n	800d3d0 <_svfiprintf_r+0x34>
 800d3b0:	690b      	ldr	r3, [r1, #16]
 800d3b2:	b96b      	cbnz	r3, 800d3d0 <_svfiprintf_r+0x34>
 800d3b4:	2140      	movs	r1, #64	; 0x40
 800d3b6:	f7ff ff3d 	bl	800d234 <_malloc_r>
 800d3ba:	6020      	str	r0, [r4, #0]
 800d3bc:	6120      	str	r0, [r4, #16]
 800d3be:	b928      	cbnz	r0, 800d3cc <_svfiprintf_r+0x30>
 800d3c0:	230c      	movs	r3, #12
 800d3c2:	f8c8 3000 	str.w	r3, [r8]
 800d3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ca:	e0c8      	b.n	800d55e <_svfiprintf_r+0x1c2>
 800d3cc:	2340      	movs	r3, #64	; 0x40
 800d3ce:	6163      	str	r3, [r4, #20]
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d3d4:	2320      	movs	r3, #32
 800d3d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3da:	2330      	movs	r3, #48	; 0x30
 800d3dc:	f04f 0b01 	mov.w	fp, #1
 800d3e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3e4:	9503      	str	r5, [sp, #12]
 800d3e6:	4637      	mov	r7, r6
 800d3e8:	463d      	mov	r5, r7
 800d3ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d3ee:	b10b      	cbz	r3, 800d3f4 <_svfiprintf_r+0x58>
 800d3f0:	2b25      	cmp	r3, #37	; 0x25
 800d3f2:	d13e      	bne.n	800d472 <_svfiprintf_r+0xd6>
 800d3f4:	ebb7 0a06 	subs.w	sl, r7, r6
 800d3f8:	d00b      	beq.n	800d412 <_svfiprintf_r+0x76>
 800d3fa:	4653      	mov	r3, sl
 800d3fc:	4632      	mov	r2, r6
 800d3fe:	4621      	mov	r1, r4
 800d400:	4640      	mov	r0, r8
 800d402:	f7ff ff71 	bl	800d2e8 <__ssputs_r>
 800d406:	3001      	adds	r0, #1
 800d408:	f000 80a4 	beq.w	800d554 <_svfiprintf_r+0x1b8>
 800d40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d40e:	4453      	add	r3, sl
 800d410:	9309      	str	r3, [sp, #36]	; 0x24
 800d412:	783b      	ldrb	r3, [r7, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	f000 809d 	beq.w	800d554 <_svfiprintf_r+0x1b8>
 800d41a:	2300      	movs	r3, #0
 800d41c:	f04f 32ff 	mov.w	r2, #4294967295
 800d420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d424:	9304      	str	r3, [sp, #16]
 800d426:	9307      	str	r3, [sp, #28]
 800d428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d42c:	931a      	str	r3, [sp, #104]	; 0x68
 800d42e:	462f      	mov	r7, r5
 800d430:	2205      	movs	r2, #5
 800d432:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d436:	4850      	ldr	r0, [pc, #320]	; (800d578 <_svfiprintf_r+0x1dc>)
 800d438:	f7ff fbac 	bl	800cb94 <memchr>
 800d43c:	9b04      	ldr	r3, [sp, #16]
 800d43e:	b9d0      	cbnz	r0, 800d476 <_svfiprintf_r+0xda>
 800d440:	06d9      	lsls	r1, r3, #27
 800d442:	bf44      	itt	mi
 800d444:	2220      	movmi	r2, #32
 800d446:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d44a:	071a      	lsls	r2, r3, #28
 800d44c:	bf44      	itt	mi
 800d44e:	222b      	movmi	r2, #43	; 0x2b
 800d450:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d454:	782a      	ldrb	r2, [r5, #0]
 800d456:	2a2a      	cmp	r2, #42	; 0x2a
 800d458:	d015      	beq.n	800d486 <_svfiprintf_r+0xea>
 800d45a:	462f      	mov	r7, r5
 800d45c:	2000      	movs	r0, #0
 800d45e:	250a      	movs	r5, #10
 800d460:	9a07      	ldr	r2, [sp, #28]
 800d462:	4639      	mov	r1, r7
 800d464:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d468:	3b30      	subs	r3, #48	; 0x30
 800d46a:	2b09      	cmp	r3, #9
 800d46c:	d94d      	bls.n	800d50a <_svfiprintf_r+0x16e>
 800d46e:	b1b8      	cbz	r0, 800d4a0 <_svfiprintf_r+0x104>
 800d470:	e00f      	b.n	800d492 <_svfiprintf_r+0xf6>
 800d472:	462f      	mov	r7, r5
 800d474:	e7b8      	b.n	800d3e8 <_svfiprintf_r+0x4c>
 800d476:	4a40      	ldr	r2, [pc, #256]	; (800d578 <_svfiprintf_r+0x1dc>)
 800d478:	463d      	mov	r5, r7
 800d47a:	1a80      	subs	r0, r0, r2
 800d47c:	fa0b f000 	lsl.w	r0, fp, r0
 800d480:	4318      	orrs	r0, r3
 800d482:	9004      	str	r0, [sp, #16]
 800d484:	e7d3      	b.n	800d42e <_svfiprintf_r+0x92>
 800d486:	9a03      	ldr	r2, [sp, #12]
 800d488:	1d11      	adds	r1, r2, #4
 800d48a:	6812      	ldr	r2, [r2, #0]
 800d48c:	9103      	str	r1, [sp, #12]
 800d48e:	2a00      	cmp	r2, #0
 800d490:	db01      	blt.n	800d496 <_svfiprintf_r+0xfa>
 800d492:	9207      	str	r2, [sp, #28]
 800d494:	e004      	b.n	800d4a0 <_svfiprintf_r+0x104>
 800d496:	4252      	negs	r2, r2
 800d498:	f043 0302 	orr.w	r3, r3, #2
 800d49c:	9207      	str	r2, [sp, #28]
 800d49e:	9304      	str	r3, [sp, #16]
 800d4a0:	783b      	ldrb	r3, [r7, #0]
 800d4a2:	2b2e      	cmp	r3, #46	; 0x2e
 800d4a4:	d10c      	bne.n	800d4c0 <_svfiprintf_r+0x124>
 800d4a6:	787b      	ldrb	r3, [r7, #1]
 800d4a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d4aa:	d133      	bne.n	800d514 <_svfiprintf_r+0x178>
 800d4ac:	9b03      	ldr	r3, [sp, #12]
 800d4ae:	3702      	adds	r7, #2
 800d4b0:	1d1a      	adds	r2, r3, #4
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	9203      	str	r2, [sp, #12]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	bfb8      	it	lt
 800d4ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4be:	9305      	str	r3, [sp, #20]
 800d4c0:	4d2e      	ldr	r5, [pc, #184]	; (800d57c <_svfiprintf_r+0x1e0>)
 800d4c2:	2203      	movs	r2, #3
 800d4c4:	7839      	ldrb	r1, [r7, #0]
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	f7ff fb64 	bl	800cb94 <memchr>
 800d4cc:	b138      	cbz	r0, 800d4de <_svfiprintf_r+0x142>
 800d4ce:	2340      	movs	r3, #64	; 0x40
 800d4d0:	1b40      	subs	r0, r0, r5
 800d4d2:	fa03 f000 	lsl.w	r0, r3, r0
 800d4d6:	9b04      	ldr	r3, [sp, #16]
 800d4d8:	3701      	adds	r7, #1
 800d4da:	4303      	orrs	r3, r0
 800d4dc:	9304      	str	r3, [sp, #16]
 800d4de:	7839      	ldrb	r1, [r7, #0]
 800d4e0:	2206      	movs	r2, #6
 800d4e2:	4827      	ldr	r0, [pc, #156]	; (800d580 <_svfiprintf_r+0x1e4>)
 800d4e4:	1c7e      	adds	r6, r7, #1
 800d4e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4ea:	f7ff fb53 	bl	800cb94 <memchr>
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	d038      	beq.n	800d564 <_svfiprintf_r+0x1c8>
 800d4f2:	4b24      	ldr	r3, [pc, #144]	; (800d584 <_svfiprintf_r+0x1e8>)
 800d4f4:	bb13      	cbnz	r3, 800d53c <_svfiprintf_r+0x1a0>
 800d4f6:	9b03      	ldr	r3, [sp, #12]
 800d4f8:	3307      	adds	r3, #7
 800d4fa:	f023 0307 	bic.w	r3, r3, #7
 800d4fe:	3308      	adds	r3, #8
 800d500:	9303      	str	r3, [sp, #12]
 800d502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d504:	444b      	add	r3, r9
 800d506:	9309      	str	r3, [sp, #36]	; 0x24
 800d508:	e76d      	b.n	800d3e6 <_svfiprintf_r+0x4a>
 800d50a:	fb05 3202 	mla	r2, r5, r2, r3
 800d50e:	2001      	movs	r0, #1
 800d510:	460f      	mov	r7, r1
 800d512:	e7a6      	b.n	800d462 <_svfiprintf_r+0xc6>
 800d514:	2300      	movs	r3, #0
 800d516:	250a      	movs	r5, #10
 800d518:	4619      	mov	r1, r3
 800d51a:	3701      	adds	r7, #1
 800d51c:	9305      	str	r3, [sp, #20]
 800d51e:	4638      	mov	r0, r7
 800d520:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d524:	3a30      	subs	r2, #48	; 0x30
 800d526:	2a09      	cmp	r2, #9
 800d528:	d903      	bls.n	800d532 <_svfiprintf_r+0x196>
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d0c8      	beq.n	800d4c0 <_svfiprintf_r+0x124>
 800d52e:	9105      	str	r1, [sp, #20]
 800d530:	e7c6      	b.n	800d4c0 <_svfiprintf_r+0x124>
 800d532:	fb05 2101 	mla	r1, r5, r1, r2
 800d536:	2301      	movs	r3, #1
 800d538:	4607      	mov	r7, r0
 800d53a:	e7f0      	b.n	800d51e <_svfiprintf_r+0x182>
 800d53c:	ab03      	add	r3, sp, #12
 800d53e:	9300      	str	r3, [sp, #0]
 800d540:	4622      	mov	r2, r4
 800d542:	4b11      	ldr	r3, [pc, #68]	; (800d588 <_svfiprintf_r+0x1ec>)
 800d544:	a904      	add	r1, sp, #16
 800d546:	4640      	mov	r0, r8
 800d548:	f7fe f8a0 	bl	800b68c <_printf_float>
 800d54c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d550:	4681      	mov	r9, r0
 800d552:	d1d6      	bne.n	800d502 <_svfiprintf_r+0x166>
 800d554:	89a3      	ldrh	r3, [r4, #12]
 800d556:	065b      	lsls	r3, r3, #25
 800d558:	f53f af35 	bmi.w	800d3c6 <_svfiprintf_r+0x2a>
 800d55c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d55e:	b01d      	add	sp, #116	; 0x74
 800d560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d564:	ab03      	add	r3, sp, #12
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	4622      	mov	r2, r4
 800d56a:	4b07      	ldr	r3, [pc, #28]	; (800d588 <_svfiprintf_r+0x1ec>)
 800d56c:	a904      	add	r1, sp, #16
 800d56e:	4640      	mov	r0, r8
 800d570:	f7fe fb38 	bl	800bbe4 <_printf_i>
 800d574:	e7ea      	b.n	800d54c <_svfiprintf_r+0x1b0>
 800d576:	bf00      	nop
 800d578:	0800e7dc 	.word	0x0800e7dc
 800d57c:	0800e7e2 	.word	0x0800e7e2
 800d580:	0800e7e6 	.word	0x0800e7e6
 800d584:	0800b68d 	.word	0x0800b68d
 800d588:	0800d2e9 	.word	0x0800d2e9

0800d58c <_sbrk_r>:
 800d58c:	b538      	push	{r3, r4, r5, lr}
 800d58e:	2300      	movs	r3, #0
 800d590:	4c05      	ldr	r4, [pc, #20]	; (800d5a8 <_sbrk_r+0x1c>)
 800d592:	4605      	mov	r5, r0
 800d594:	4608      	mov	r0, r1
 800d596:	6023      	str	r3, [r4, #0]
 800d598:	f7f9 fe20 	bl	80071dc <_sbrk>
 800d59c:	1c43      	adds	r3, r0, #1
 800d59e:	d102      	bne.n	800d5a6 <_sbrk_r+0x1a>
 800d5a0:	6823      	ldr	r3, [r4, #0]
 800d5a2:	b103      	cbz	r3, 800d5a6 <_sbrk_r+0x1a>
 800d5a4:	602b      	str	r3, [r5, #0]
 800d5a6:	bd38      	pop	{r3, r4, r5, pc}
 800d5a8:	200015c4 	.word	0x200015c4

0800d5ac <memmove>:
 800d5ac:	4288      	cmp	r0, r1
 800d5ae:	b510      	push	{r4, lr}
 800d5b0:	eb01 0302 	add.w	r3, r1, r2
 800d5b4:	d807      	bhi.n	800d5c6 <memmove+0x1a>
 800d5b6:	1e42      	subs	r2, r0, #1
 800d5b8:	4299      	cmp	r1, r3
 800d5ba:	d00a      	beq.n	800d5d2 <memmove+0x26>
 800d5bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d5c4:	e7f8      	b.n	800d5b8 <memmove+0xc>
 800d5c6:	4283      	cmp	r3, r0
 800d5c8:	d9f5      	bls.n	800d5b6 <memmove+0xa>
 800d5ca:	1881      	adds	r1, r0, r2
 800d5cc:	1ad2      	subs	r2, r2, r3
 800d5ce:	42d3      	cmn	r3, r2
 800d5d0:	d100      	bne.n	800d5d4 <memmove+0x28>
 800d5d2:	bd10      	pop	{r4, pc}
 800d5d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d5dc:	e7f7      	b.n	800d5ce <memmove+0x22>

0800d5de <__malloc_lock>:
 800d5de:	4770      	bx	lr

0800d5e0 <__malloc_unlock>:
 800d5e0:	4770      	bx	lr

0800d5e2 <_realloc_r>:
 800d5e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e4:	4607      	mov	r7, r0
 800d5e6:	4614      	mov	r4, r2
 800d5e8:	460e      	mov	r6, r1
 800d5ea:	b921      	cbnz	r1, 800d5f6 <_realloc_r+0x14>
 800d5ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d5f0:	4611      	mov	r1, r2
 800d5f2:	f7ff be1f 	b.w	800d234 <_malloc_r>
 800d5f6:	b922      	cbnz	r2, 800d602 <_realloc_r+0x20>
 800d5f8:	f7ff fdd0 	bl	800d19c <_free_r>
 800d5fc:	4625      	mov	r5, r4
 800d5fe:	4628      	mov	r0, r5
 800d600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d602:	f000 f814 	bl	800d62e <_malloc_usable_size_r>
 800d606:	42a0      	cmp	r0, r4
 800d608:	d20f      	bcs.n	800d62a <_realloc_r+0x48>
 800d60a:	4621      	mov	r1, r4
 800d60c:	4638      	mov	r0, r7
 800d60e:	f7ff fe11 	bl	800d234 <_malloc_r>
 800d612:	4605      	mov	r5, r0
 800d614:	2800      	cmp	r0, #0
 800d616:	d0f2      	beq.n	800d5fe <_realloc_r+0x1c>
 800d618:	4631      	mov	r1, r6
 800d61a:	4622      	mov	r2, r4
 800d61c:	f7ff fac8 	bl	800cbb0 <memcpy>
 800d620:	4631      	mov	r1, r6
 800d622:	4638      	mov	r0, r7
 800d624:	f7ff fdba 	bl	800d19c <_free_r>
 800d628:	e7e9      	b.n	800d5fe <_realloc_r+0x1c>
 800d62a:	4635      	mov	r5, r6
 800d62c:	e7e7      	b.n	800d5fe <_realloc_r+0x1c>

0800d62e <_malloc_usable_size_r>:
 800d62e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d632:	1f18      	subs	r0, r3, #4
 800d634:	2b00      	cmp	r3, #0
 800d636:	bfbc      	itt	lt
 800d638:	580b      	ldrlt	r3, [r1, r0]
 800d63a:	18c0      	addlt	r0, r0, r3
 800d63c:	4770      	bx	lr
	...

0800d640 <log>:
 800d640:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800d644:	b08a      	sub	sp, #40	; 0x28
 800d646:	4604      	mov	r4, r0
 800d648:	460d      	mov	r5, r1
 800d64a:	f000 f875 	bl	800d738 <__ieee754_log>
 800d64e:	4b34      	ldr	r3, [pc, #208]	; (800d720 <log+0xe0>)
 800d650:	4680      	mov	r8, r0
 800d652:	f993 6000 	ldrsb.w	r6, [r3]
 800d656:	4689      	mov	r9, r1
 800d658:	1c73      	adds	r3, r6, #1
 800d65a:	d05b      	beq.n	800d714 <log+0xd4>
 800d65c:	4622      	mov	r2, r4
 800d65e:	462b      	mov	r3, r5
 800d660:	4620      	mov	r0, r4
 800d662:	4629      	mov	r1, r5
 800d664:	f7f3 f9d2 	bl	8000a0c <__aeabi_dcmpun>
 800d668:	2800      	cmp	r0, #0
 800d66a:	d153      	bne.n	800d714 <log+0xd4>
 800d66c:	2200      	movs	r2, #0
 800d66e:	2300      	movs	r3, #0
 800d670:	4620      	mov	r0, r4
 800d672:	4629      	mov	r1, r5
 800d674:	f7f3 f9c0 	bl	80009f8 <__aeabi_dcmpgt>
 800d678:	2800      	cmp	r0, #0
 800d67a:	d14b      	bne.n	800d714 <log+0xd4>
 800d67c:	4b29      	ldr	r3, [pc, #164]	; (800d724 <log+0xe4>)
 800d67e:	9008      	str	r0, [sp, #32]
 800d680:	9301      	str	r3, [sp, #4]
 800d682:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d686:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d68a:	b9a6      	cbnz	r6, 800d6b6 <log+0x76>
 800d68c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d690:	4b25      	ldr	r3, [pc, #148]	; (800d728 <log+0xe8>)
 800d692:	4620      	mov	r0, r4
 800d694:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d698:	4629      	mov	r1, r5
 800d69a:	2200      	movs	r2, #0
 800d69c:	2300      	movs	r3, #0
 800d69e:	f7f3 f983 	bl	80009a8 <__aeabi_dcmpeq>
 800d6a2:	bb40      	cbnz	r0, 800d6f6 <log+0xb6>
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	2e02      	cmp	r6, #2
 800d6a8:	9300      	str	r3, [sp, #0]
 800d6aa:	d119      	bne.n	800d6e0 <log+0xa0>
 800d6ac:	f7fd fef0 	bl	800b490 <__errno>
 800d6b0:	2321      	movs	r3, #33	; 0x21
 800d6b2:	6003      	str	r3, [r0, #0]
 800d6b4:	e019      	b.n	800d6ea <log+0xaa>
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	4b1c      	ldr	r3, [pc, #112]	; (800d72c <log+0xec>)
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	f7f3 f96f 	bl	80009a8 <__aeabi_dcmpeq>
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	d0ea      	beq.n	800d6a4 <log+0x64>
 800d6ce:	2302      	movs	r3, #2
 800d6d0:	429e      	cmp	r6, r3
 800d6d2:	9300      	str	r3, [sp, #0]
 800d6d4:	d111      	bne.n	800d6fa <log+0xba>
 800d6d6:	f7fd fedb 	bl	800b490 <__errno>
 800d6da:	2322      	movs	r3, #34	; 0x22
 800d6dc:	6003      	str	r3, [r0, #0]
 800d6de:	e011      	b.n	800d704 <log+0xc4>
 800d6e0:	4668      	mov	r0, sp
 800d6e2:	f000 f9db 	bl	800da9c <matherr>
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d0e0      	beq.n	800d6ac <log+0x6c>
 800d6ea:	4811      	ldr	r0, [pc, #68]	; (800d730 <log+0xf0>)
 800d6ec:	f000 f9d8 	bl	800daa0 <nan>
 800d6f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d6f4:	e006      	b.n	800d704 <log+0xc4>
 800d6f6:	2302      	movs	r3, #2
 800d6f8:	9300      	str	r3, [sp, #0]
 800d6fa:	4668      	mov	r0, sp
 800d6fc:	f000 f9ce 	bl	800da9c <matherr>
 800d700:	2800      	cmp	r0, #0
 800d702:	d0e8      	beq.n	800d6d6 <log+0x96>
 800d704:	9b08      	ldr	r3, [sp, #32]
 800d706:	b11b      	cbz	r3, 800d710 <log+0xd0>
 800d708:	f7fd fec2 	bl	800b490 <__errno>
 800d70c:	9b08      	ldr	r3, [sp, #32]
 800d70e:	6003      	str	r3, [r0, #0]
 800d710:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800d714:	4640      	mov	r0, r8
 800d716:	4649      	mov	r1, r9
 800d718:	b00a      	add	sp, #40	; 0x28
 800d71a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d71e:	bf00      	nop
 800d720:	20000260 	.word	0x20000260
 800d724:	0800e7ed 	.word	0x0800e7ed
 800d728:	c7efffff 	.word	0xc7efffff
 800d72c:	fff00000 	.word	0xfff00000
 800d730:	0800e7e1 	.word	0x0800e7e1
 800d734:	00000000 	.word	0x00000000

0800d738 <__ieee754_log>:
 800d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d740:	b087      	sub	sp, #28
 800d742:	4602      	mov	r2, r0
 800d744:	460b      	mov	r3, r1
 800d746:	460d      	mov	r5, r1
 800d748:	da24      	bge.n	800d794 <__ieee754_log+0x5c>
 800d74a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800d74e:	4304      	orrs	r4, r0
 800d750:	d108      	bne.n	800d764 <__ieee754_log+0x2c>
 800d752:	2200      	movs	r2, #0
 800d754:	2300      	movs	r3, #0
 800d756:	2000      	movs	r0, #0
 800d758:	49cb      	ldr	r1, [pc, #812]	; (800da88 <__ieee754_log+0x350>)
 800d75a:	f7f2 ffe7 	bl	800072c <__aeabi_ddiv>
 800d75e:	b007      	add	sp, #28
 800d760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d764:	2900      	cmp	r1, #0
 800d766:	da04      	bge.n	800d772 <__ieee754_log+0x3a>
 800d768:	f7f2 fcfe 	bl	8000168 <__aeabi_dsub>
 800d76c:	2200      	movs	r2, #0
 800d76e:	2300      	movs	r3, #0
 800d770:	e7f3      	b.n	800d75a <__ieee754_log+0x22>
 800d772:	2200      	movs	r2, #0
 800d774:	4bc5      	ldr	r3, [pc, #788]	; (800da8c <__ieee754_log+0x354>)
 800d776:	f7f2 feaf 	bl	80004d8 <__aeabi_dmul>
 800d77a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800d77e:	4602      	mov	r2, r0
 800d780:	460b      	mov	r3, r1
 800d782:	460d      	mov	r5, r1
 800d784:	49c2      	ldr	r1, [pc, #776]	; (800da90 <__ieee754_log+0x358>)
 800d786:	428d      	cmp	r5, r1
 800d788:	dd06      	ble.n	800d798 <__ieee754_log+0x60>
 800d78a:	4610      	mov	r0, r2
 800d78c:	4619      	mov	r1, r3
 800d78e:	f7f2 fced 	bl	800016c <__adddf3>
 800d792:	e7e4      	b.n	800d75e <__ieee754_log+0x26>
 800d794:	2600      	movs	r6, #0
 800d796:	e7f5      	b.n	800d784 <__ieee754_log+0x4c>
 800d798:	152c      	asrs	r4, r5, #20
 800d79a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d79e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800d7a2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d7a6:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800d7aa:	4426      	add	r6, r4
 800d7ac:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800d7b0:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800d7b4:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800d7b8:	ea41 0305 	orr.w	r3, r1, r5
 800d7bc:	4610      	mov	r0, r2
 800d7be:	4619      	mov	r1, r3
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	4bb4      	ldr	r3, [pc, #720]	; (800da94 <__ieee754_log+0x35c>)
 800d7c4:	f7f2 fcd0 	bl	8000168 <__aeabi_dsub>
 800d7c8:	1cab      	adds	r3, r5, #2
 800d7ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800d7d4:	4682      	mov	sl, r0
 800d7d6:	468b      	mov	fp, r1
 800d7d8:	f04f 0200 	mov.w	r2, #0
 800d7dc:	dc53      	bgt.n	800d886 <__ieee754_log+0x14e>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	f7f3 f8e2 	bl	80009a8 <__aeabi_dcmpeq>
 800d7e4:	b1d0      	cbz	r0, 800d81c <__ieee754_log+0xe4>
 800d7e6:	2c00      	cmp	r4, #0
 800d7e8:	f000 8120 	beq.w	800da2c <__ieee754_log+0x2f4>
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f7f2 fe09 	bl	8000404 <__aeabi_i2d>
 800d7f2:	a391      	add	r3, pc, #580	; (adr r3, 800da38 <__ieee754_log+0x300>)
 800d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f8:	4606      	mov	r6, r0
 800d7fa:	460f      	mov	r7, r1
 800d7fc:	f7f2 fe6c 	bl	80004d8 <__aeabi_dmul>
 800d800:	a38f      	add	r3, pc, #572	; (adr r3, 800da40 <__ieee754_log+0x308>)
 800d802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d806:	4604      	mov	r4, r0
 800d808:	460d      	mov	r5, r1
 800d80a:	4630      	mov	r0, r6
 800d80c:	4639      	mov	r1, r7
 800d80e:	f7f2 fe63 	bl	80004d8 <__aeabi_dmul>
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4620      	mov	r0, r4
 800d818:	4629      	mov	r1, r5
 800d81a:	e7b8      	b.n	800d78e <__ieee754_log+0x56>
 800d81c:	a38a      	add	r3, pc, #552	; (adr r3, 800da48 <__ieee754_log+0x310>)
 800d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d822:	4650      	mov	r0, sl
 800d824:	4659      	mov	r1, fp
 800d826:	f7f2 fe57 	bl	80004d8 <__aeabi_dmul>
 800d82a:	4602      	mov	r2, r0
 800d82c:	460b      	mov	r3, r1
 800d82e:	2000      	movs	r0, #0
 800d830:	4999      	ldr	r1, [pc, #612]	; (800da98 <__ieee754_log+0x360>)
 800d832:	f7f2 fc99 	bl	8000168 <__aeabi_dsub>
 800d836:	4652      	mov	r2, sl
 800d838:	4606      	mov	r6, r0
 800d83a:	460f      	mov	r7, r1
 800d83c:	465b      	mov	r3, fp
 800d83e:	4650      	mov	r0, sl
 800d840:	4659      	mov	r1, fp
 800d842:	f7f2 fe49 	bl	80004d8 <__aeabi_dmul>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	4630      	mov	r0, r6
 800d84c:	4639      	mov	r1, r7
 800d84e:	f7f2 fe43 	bl	80004d8 <__aeabi_dmul>
 800d852:	4606      	mov	r6, r0
 800d854:	460f      	mov	r7, r1
 800d856:	b914      	cbnz	r4, 800d85e <__ieee754_log+0x126>
 800d858:	4632      	mov	r2, r6
 800d85a:	463b      	mov	r3, r7
 800d85c:	e0a0      	b.n	800d9a0 <__ieee754_log+0x268>
 800d85e:	4620      	mov	r0, r4
 800d860:	f7f2 fdd0 	bl	8000404 <__aeabi_i2d>
 800d864:	a374      	add	r3, pc, #464	; (adr r3, 800da38 <__ieee754_log+0x300>)
 800d866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86a:	4680      	mov	r8, r0
 800d86c:	4689      	mov	r9, r1
 800d86e:	f7f2 fe33 	bl	80004d8 <__aeabi_dmul>
 800d872:	a373      	add	r3, pc, #460	; (adr r3, 800da40 <__ieee754_log+0x308>)
 800d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d878:	4604      	mov	r4, r0
 800d87a:	460d      	mov	r5, r1
 800d87c:	4640      	mov	r0, r8
 800d87e:	4649      	mov	r1, r9
 800d880:	f7f2 fe2a 	bl	80004d8 <__aeabi_dmul>
 800d884:	e0a5      	b.n	800d9d2 <__ieee754_log+0x29a>
 800d886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d88a:	f7f2 fc6f 	bl	800016c <__adddf3>
 800d88e:	4602      	mov	r2, r0
 800d890:	460b      	mov	r3, r1
 800d892:	4650      	mov	r0, sl
 800d894:	4659      	mov	r1, fp
 800d896:	f7f2 ff49 	bl	800072c <__aeabi_ddiv>
 800d89a:	e9cd 0100 	strd	r0, r1, [sp]
 800d89e:	4620      	mov	r0, r4
 800d8a0:	f7f2 fdb0 	bl	8000404 <__aeabi_i2d>
 800d8a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	f7f2 fe12 	bl	80004d8 <__aeabi_dmul>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	460b      	mov	r3, r1
 800d8b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8bc:	f7f2 fe0c 	bl	80004d8 <__aeabi_dmul>
 800d8c0:	a363      	add	r3, pc, #396	; (adr r3, 800da50 <__ieee754_log+0x318>)
 800d8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c6:	4680      	mov	r8, r0
 800d8c8:	4689      	mov	r9, r1
 800d8ca:	f7f2 fe05 	bl	80004d8 <__aeabi_dmul>
 800d8ce:	a362      	add	r3, pc, #392	; (adr r3, 800da58 <__ieee754_log+0x320>)
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	f7f2 fc4a 	bl	800016c <__adddf3>
 800d8d8:	4642      	mov	r2, r8
 800d8da:	464b      	mov	r3, r9
 800d8dc:	f7f2 fdfc 	bl	80004d8 <__aeabi_dmul>
 800d8e0:	a35f      	add	r3, pc, #380	; (adr r3, 800da60 <__ieee754_log+0x328>)
 800d8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e6:	f7f2 fc41 	bl	800016c <__adddf3>
 800d8ea:	4642      	mov	r2, r8
 800d8ec:	464b      	mov	r3, r9
 800d8ee:	f7f2 fdf3 	bl	80004d8 <__aeabi_dmul>
 800d8f2:	a35d      	add	r3, pc, #372	; (adr r3, 800da68 <__ieee754_log+0x330>)
 800d8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f8:	f7f2 fc38 	bl	800016c <__adddf3>
 800d8fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d900:	f7f2 fdea 	bl	80004d8 <__aeabi_dmul>
 800d904:	a35a      	add	r3, pc, #360	; (adr r3, 800da70 <__ieee754_log+0x338>)
 800d906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d90e:	4640      	mov	r0, r8
 800d910:	4649      	mov	r1, r9
 800d912:	f7f2 fde1 	bl	80004d8 <__aeabi_dmul>
 800d916:	a358      	add	r3, pc, #352	; (adr r3, 800da78 <__ieee754_log+0x340>)
 800d918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91c:	f7f2 fc26 	bl	800016c <__adddf3>
 800d920:	4642      	mov	r2, r8
 800d922:	464b      	mov	r3, r9
 800d924:	f7f2 fdd8 	bl	80004d8 <__aeabi_dmul>
 800d928:	a355      	add	r3, pc, #340	; (adr r3, 800da80 <__ieee754_log+0x348>)
 800d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92e:	f7f2 fc1d 	bl	800016c <__adddf3>
 800d932:	4642      	mov	r2, r8
 800d934:	464b      	mov	r3, r9
 800d936:	f7f2 fdcf 	bl	80004d8 <__aeabi_dmul>
 800d93a:	4602      	mov	r2, r0
 800d93c:	460b      	mov	r3, r1
 800d93e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d942:	f7f2 fc13 	bl	800016c <__adddf3>
 800d946:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800d94a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800d94e:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800d952:	3551      	adds	r5, #81	; 0x51
 800d954:	4335      	orrs	r5, r6
 800d956:	2d00      	cmp	r5, #0
 800d958:	4680      	mov	r8, r0
 800d95a:	4689      	mov	r9, r1
 800d95c:	dd48      	ble.n	800d9f0 <__ieee754_log+0x2b8>
 800d95e:	2200      	movs	r2, #0
 800d960:	4b4d      	ldr	r3, [pc, #308]	; (800da98 <__ieee754_log+0x360>)
 800d962:	4650      	mov	r0, sl
 800d964:	4659      	mov	r1, fp
 800d966:	f7f2 fdb7 	bl	80004d8 <__aeabi_dmul>
 800d96a:	4652      	mov	r2, sl
 800d96c:	465b      	mov	r3, fp
 800d96e:	f7f2 fdb3 	bl	80004d8 <__aeabi_dmul>
 800d972:	4602      	mov	r2, r0
 800d974:	460b      	mov	r3, r1
 800d976:	4606      	mov	r6, r0
 800d978:	460f      	mov	r7, r1
 800d97a:	4640      	mov	r0, r8
 800d97c:	4649      	mov	r1, r9
 800d97e:	f7f2 fbf5 	bl	800016c <__adddf3>
 800d982:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d986:	f7f2 fda7 	bl	80004d8 <__aeabi_dmul>
 800d98a:	4680      	mov	r8, r0
 800d98c:	4689      	mov	r9, r1
 800d98e:	b964      	cbnz	r4, 800d9aa <__ieee754_log+0x272>
 800d990:	4602      	mov	r2, r0
 800d992:	460b      	mov	r3, r1
 800d994:	4630      	mov	r0, r6
 800d996:	4639      	mov	r1, r7
 800d998:	f7f2 fbe6 	bl	8000168 <__aeabi_dsub>
 800d99c:	4602      	mov	r2, r0
 800d99e:	460b      	mov	r3, r1
 800d9a0:	4650      	mov	r0, sl
 800d9a2:	4659      	mov	r1, fp
 800d9a4:	f7f2 fbe0 	bl	8000168 <__aeabi_dsub>
 800d9a8:	e6d9      	b.n	800d75e <__ieee754_log+0x26>
 800d9aa:	a323      	add	r3, pc, #140	; (adr r3, 800da38 <__ieee754_log+0x300>)
 800d9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9b4:	f7f2 fd90 	bl	80004d8 <__aeabi_dmul>
 800d9b8:	a321      	add	r3, pc, #132	; (adr r3, 800da40 <__ieee754_log+0x308>)
 800d9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9be:	4604      	mov	r4, r0
 800d9c0:	460d      	mov	r5, r1
 800d9c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9c6:	f7f2 fd87 	bl	80004d8 <__aeabi_dmul>
 800d9ca:	4642      	mov	r2, r8
 800d9cc:	464b      	mov	r3, r9
 800d9ce:	f7f2 fbcd 	bl	800016c <__adddf3>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	4630      	mov	r0, r6
 800d9d8:	4639      	mov	r1, r7
 800d9da:	f7f2 fbc5 	bl	8000168 <__aeabi_dsub>
 800d9de:	4652      	mov	r2, sl
 800d9e0:	465b      	mov	r3, fp
 800d9e2:	f7f2 fbc1 	bl	8000168 <__aeabi_dsub>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	4629      	mov	r1, r5
 800d9ee:	e7d9      	b.n	800d9a4 <__ieee754_log+0x26c>
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	4650      	mov	r0, sl
 800d9f6:	4659      	mov	r1, fp
 800d9f8:	f7f2 fbb6 	bl	8000168 <__aeabi_dsub>
 800d9fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da00:	f7f2 fd6a 	bl	80004d8 <__aeabi_dmul>
 800da04:	4606      	mov	r6, r0
 800da06:	460f      	mov	r7, r1
 800da08:	2c00      	cmp	r4, #0
 800da0a:	f43f af25 	beq.w	800d858 <__ieee754_log+0x120>
 800da0e:	a30a      	add	r3, pc, #40	; (adr r3, 800da38 <__ieee754_log+0x300>)
 800da10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da18:	f7f2 fd5e 	bl	80004d8 <__aeabi_dmul>
 800da1c:	a308      	add	r3, pc, #32	; (adr r3, 800da40 <__ieee754_log+0x308>)
 800da1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da22:	4604      	mov	r4, r0
 800da24:	460d      	mov	r5, r1
 800da26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da2a:	e729      	b.n	800d880 <__ieee754_log+0x148>
 800da2c:	2000      	movs	r0, #0
 800da2e:	2100      	movs	r1, #0
 800da30:	e695      	b.n	800d75e <__ieee754_log+0x26>
 800da32:	bf00      	nop
 800da34:	f3af 8000 	nop.w
 800da38:	fee00000 	.word	0xfee00000
 800da3c:	3fe62e42 	.word	0x3fe62e42
 800da40:	35793c76 	.word	0x35793c76
 800da44:	3dea39ef 	.word	0x3dea39ef
 800da48:	55555555 	.word	0x55555555
 800da4c:	3fd55555 	.word	0x3fd55555
 800da50:	df3e5244 	.word	0xdf3e5244
 800da54:	3fc2f112 	.word	0x3fc2f112
 800da58:	96cb03de 	.word	0x96cb03de
 800da5c:	3fc74664 	.word	0x3fc74664
 800da60:	94229359 	.word	0x94229359
 800da64:	3fd24924 	.word	0x3fd24924
 800da68:	55555593 	.word	0x55555593
 800da6c:	3fe55555 	.word	0x3fe55555
 800da70:	d078c69f 	.word	0xd078c69f
 800da74:	3fc39a09 	.word	0x3fc39a09
 800da78:	1d8e78af 	.word	0x1d8e78af
 800da7c:	3fcc71c5 	.word	0x3fcc71c5
 800da80:	9997fa04 	.word	0x9997fa04
 800da84:	3fd99999 	.word	0x3fd99999
 800da88:	c3500000 	.word	0xc3500000
 800da8c:	43500000 	.word	0x43500000
 800da90:	7fefffff 	.word	0x7fefffff
 800da94:	3ff00000 	.word	0x3ff00000
 800da98:	3fe00000 	.word	0x3fe00000

0800da9c <matherr>:
 800da9c:	2000      	movs	r0, #0
 800da9e:	4770      	bx	lr

0800daa0 <nan>:
 800daa0:	2000      	movs	r0, #0
 800daa2:	4901      	ldr	r1, [pc, #4]	; (800daa8 <nan+0x8>)
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	7ff80000 	.word	0x7ff80000

0800daac <_init>:
 800daac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daae:	bf00      	nop
 800dab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dab2:	bc08      	pop	{r3}
 800dab4:	469e      	mov	lr, r3
 800dab6:	4770      	bx	lr

0800dab8 <_fini>:
 800dab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daba:	bf00      	nop
 800dabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dabe:	bc08      	pop	{r3}
 800dac0:	469e      	mov	lr, r3
 800dac2:	4770      	bx	lr
