
stm32f103rbt_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db0c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d2c  0800dc20  0800dc20  0001dc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e94c  0800e94c  00020264  2**0
                  CONTENTS
  4 .ARM          00000000  0800e94c  0800e94c  00020264  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e94c  0800e94c  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e94c  0800e94c  0001e94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e950  0800e950  0001e950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800e954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ac  20000264  0800ebb8  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001610  0800ebb8  00021610  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9c2  00000000  00000000  0002028d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004078  00000000  00000000  0003cc4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016c0  00000000  00000000  00040cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b8  00000000  00000000  00042388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018bb8  00000000  00000000  00043840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001859b  00000000  00000000  0005c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081749  00000000  00000000  00074993  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f60dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069a8  00000000  00000000  000f6158  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000264 	.word	0x20000264
 800012c:	00000000 	.word	0x00000000
 8000130:	0800dc04 	.word	0x0800dc04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000268 	.word	0x20000268
 800014c:	0800dc04 	.word	0x0800dc04

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <Batt_Discharge_Mode>:
				SOC_manipulasi,
				grad,
				constanta;

void Batt_Discharge_Mode(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON||
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <Batt_Discharge_Mode+0x90>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d024      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			flag_trip_overtemperature==ON||
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <Batt_Discharge_Mode+0x94>)
 800116a:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON||
 800116c:	2b01      	cmp	r3, #1
 800116e:	d020      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			flag_trip_undertemperature==ON||
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <Batt_Discharge_Mode+0x98>)
 8001172:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON||
 8001174:	2b01      	cmp	r3, #1
 8001176:	d01c      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			flag_trip_overcurrentdischarge==ON||
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <Batt_Discharge_Mode+0x9c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON||
 800117c:	2b01      	cmp	r3, #1
 800117e:	d018      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			flag_trip_SOCOverDischarge==ON||
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <Batt_Discharge_Mode+0xa0>)
 8001182:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 8001184:	2b01      	cmp	r3, #1
 8001186:	d014      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			flag_trip_shortcircuit==ON||
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <Batt_Discharge_Mode+0xa4>)
 800118a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON||
 800118c:	2b01      	cmp	r3, #1
 800118e:	d010      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			flag_trip_unbalance==ON||
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <Batt_Discharge_Mode+0xa8>)
 8001192:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON||
 8001194:	2b01      	cmp	r3, #1
 8001196:	d00c      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			flag_trip_systemfailure==ON||
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <Batt_Discharge_Mode+0xac>)
 800119a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON||
 800119c:	2b01      	cmp	r3, #1
 800119e:	d008      	beq.n	80011b2 <Batt_Discharge_Mode+0x56>
			VBATT <= 48)
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <Batt_Discharge_Mode+0xb0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
			flag_trip_systemfailure==ON||
 80011a4:	491a      	ldr	r1, [pc, #104]	; (8001210 <Batt_Discharge_Mode+0xb4>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff74 	bl	8001094 <__aeabi_fcmple>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <Batt_Discharge_Mode+0x5c>
	{
		Batt_Open_Mode();
 80011b2:	f000 f8ff 	bl	80013b4 <Batt_Open_Mode>
 80011b6:	e017      	b.n	80011e8 <Batt_Discharge_Mode+0x8c>
	}
	else
	{
		HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011be:	4815      	ldr	r0, [pc, #84]	; (8001214 <Batt_Discharge_Mode+0xb8>)
 80011c0:	f008 fa71 	bl	80096a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ca:	4813      	ldr	r0, [pc, #76]	; (8001218 <Batt_Discharge_Mode+0xbc>)
 80011cc:	f008 fa6b 	bl	80096a6 <HAL_GPIO_WritePin>
		BATT_State=STATE_DISCHARGE;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <Batt_Discharge_Mode+0xc0>)
 80011d2:	2202      	movs	r2, #2
 80011d4:	701a      	strb	r2, [r3, #0]

		charge_state=0;
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <Batt_Discharge_Mode+0xc4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <Batt_Discharge_Mode+0xc8>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <Batt_Discharge_Mode+0xcc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
	}


}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200010b9 	.word	0x200010b9
 80011f0:	20001090 	.word	0x20001090
 80011f4:	200010b8 	.word	0x200010b8
 80011f8:	200010c8 	.word	0x200010c8
 80011fc:	200010ec 	.word	0x200010ec
 8001200:	20000c8a 	.word	0x20000c8a
 8001204:	20000c88 	.word	0x20000c88
 8001208:	20001078 	.word	0x20001078
 800120c:	20001094 	.word	0x20001094
 8001210:	42400000 	.word	0x42400000
 8001214:	40010800 	.word	0x40010800
 8001218:	40011000 	.word	0x40011000
 800121c:	200009b0 	.word	0x200009b0
 8001220:	20000000 	.word	0x20000000
 8001224:	20000001 	.word	0x20000001
 8001228:	20000284 	.word	0x20000284

0800122c <Batt_Charge_Mode>:

void Batt_Charge_Mode(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	if(flag_trip_overvoltage==ON			||
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <Batt_Charge_Mode+0x78>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d017      	beq.n	8001268 <Batt_Charge_Mode+0x3c>
			flag_trip_overtemperature==ON	||
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <Batt_Charge_Mode+0x7c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_overvoltage==ON			||
 800123c:	2b01      	cmp	r3, #1
 800123e:	d013      	beq.n	8001268 <Batt_Charge_Mode+0x3c>
			flag_trip_undertemperature==ON	||
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <Batt_Charge_Mode+0x80>)
 8001242:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 8001244:	2b01      	cmp	r3, #1
 8001246:	d00f      	beq.n	8001268 <Batt_Charge_Mode+0x3c>
			flag_trip_overcurrentcharge==ON	||
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <Batt_Charge_Mode+0x84>)
 800124a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 800124c:	2b01      	cmp	r3, #1
 800124e:	d00b      	beq.n	8001268 <Batt_Charge_Mode+0x3c>
			flag_trip_SOCOverCharge==ON		||
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <Batt_Charge_Mode+0x88>)
 8001252:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 8001254:	2b01      	cmp	r3, #1
 8001256:	d007      	beq.n	8001268 <Batt_Charge_Mode+0x3c>
			flag_trip_shortcircuit==ON		||
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <Batt_Charge_Mode+0x8c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 800125c:	2b01      	cmp	r3, #1
 800125e:	d003      	beq.n	8001268 <Batt_Charge_Mode+0x3c>
			flag_trip_systemfailure==ON		)
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <Batt_Charge_Mode+0x90>)
 8001262:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 8001264:	2b01      	cmp	r3, #1
 8001266:	d102      	bne.n	800126e <Batt_Charge_Mode+0x42>
	{
		Batt_Open_Mode();
 8001268:	f000 f8a4 	bl	80013b4 <Batt_Open_Mode>
 800126c:	e017      	b.n	800129e <Batt_Charge_Mode+0x72>
	}
	else
	{
		HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001274:	4812      	ldr	r0, [pc, #72]	; (80012c0 <Batt_Charge_Mode+0x94>)
 8001276:	f008 fa16 	bl	80096a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001280:	4810      	ldr	r0, [pc, #64]	; (80012c4 <Batt_Charge_Mode+0x98>)
 8001282:	f008 fa10 	bl	80096a6 <HAL_GPIO_WritePin>
		BATT_State=STATE_CHARGE;
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <Batt_Charge_Mode+0x9c>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <Batt_Charge_Mode+0xa0>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
		discharge_state=0;
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <Batt_Charge_Mode+0xa4>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <Batt_Charge_Mode+0xa8>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
	}

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200014fd 	.word	0x200014fd
 80012a8:	20001090 	.word	0x20001090
 80012ac:	200010b8 	.word	0x200010b8
 80012b0:	200010e4 	.word	0x200010e4
 80012b4:	20000c89 	.word	0x20000c89
 80012b8:	20000c8a 	.word	0x20000c8a
 80012bc:	20001078 	.word	0x20001078
 80012c0:	40010800 	.word	0x40010800
 80012c4:	40011000 	.word	0x40011000
 80012c8:	200009b0 	.word	0x200009b0
 80012cc:	20000000 	.word	0x20000000
 80012d0:	20000001 	.word	0x20000001
 80012d4:	20000284 	.word	0x20000284

080012d8 <Batt_Full_CD_Mode>:

void Batt_Full_CD_Mode(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON			||
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <Batt_Full_CD_Mode+0x98>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d027      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overvoltage==ON		||
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <Batt_Full_CD_Mode+0x9c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON			||
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d023      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overtemperature==ON	||
 80012ec:	4b22      	ldr	r3, [pc, #136]	; (8001378 <Batt_Full_CD_Mode+0xa0>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overvoltage==ON		||
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d01f      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_undertemperature==ON	||
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <Batt_Full_CD_Mode+0xa4>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d01b      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentdischarge==ON||
 80012fc:	4b20      	ldr	r3, [pc, #128]	; (8001380 <Batt_Full_CD_Mode+0xa8>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 8001300:	2b01      	cmp	r3, #1
 8001302:	d017      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentcharge==ON	||
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <Batt_Full_CD_Mode+0xac>)
 8001306:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 8001308:	2b01      	cmp	r3, #1
 800130a:	d013      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverDischarge==ON	||
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <Batt_Full_CD_Mode+0xb0>)
 800130e:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 8001310:	2b01      	cmp	r3, #1
 8001312:	d00f      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverCharge==ON		||
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <Batt_Full_CD_Mode+0xb4>)
 8001316:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON	||
 8001318:	2b01      	cmp	r3, #1
 800131a:	d00b      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_shortcircuit==ON		||
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <Batt_Full_CD_Mode+0xb8>)
 800131e:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 8001320:	2b01      	cmp	r3, #1
 8001322:	d007      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_unbalance==ON			||
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <Batt_Full_CD_Mode+0xbc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 8001328:	2b01      	cmp	r3, #1
 800132a:	d003      	beq.n	8001334 <Batt_Full_CD_Mode+0x5c>
			flag_trip_systemfailure==ON		)
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <Batt_Full_CD_Mode+0xc0>)
 800132e:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON			||
 8001330:	2b01      	cmp	r3, #1
 8001332:	d102      	bne.n	800133a <Batt_Full_CD_Mode+0x62>
	{
		Batt_Open_Mode();
 8001334:	f000 f83e 	bl	80013b4 <Batt_Open_Mode>
 8001338:	e017      	b.n	800136a <Batt_Full_CD_Mode+0x92>
	}
	else
	{
		HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001340:	4816      	ldr	r0, [pc, #88]	; (800139c <Batt_Full_CD_Mode+0xc4>)
 8001342:	f008 f9b0 	bl	80096a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134c:	4814      	ldr	r0, [pc, #80]	; (80013a0 <Batt_Full_CD_Mode+0xc8>)
 800134e:	f008 f9aa 	bl	80096a6 <HAL_GPIO_WritePin>
		BATT_State=STATE_FULL_CHARGE_DISCHARGE;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <Batt_Full_CD_Mode+0xcc>)
 8001354:	2203      	movs	r2, #3
 8001356:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <Batt_Full_CD_Mode+0xd0>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <Batt_Full_CD_Mode+0xd4>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <Batt_Full_CD_Mode+0xd8>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
	}
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200010b9 	.word	0x200010b9
 8001374:	200014fd 	.word	0x200014fd
 8001378:	20001090 	.word	0x20001090
 800137c:	200010b8 	.word	0x200010b8
 8001380:	200010c8 	.word	0x200010c8
 8001384:	200010e4 	.word	0x200010e4
 8001388:	200010ec 	.word	0x200010ec
 800138c:	20000c89 	.word	0x20000c89
 8001390:	20000c8a 	.word	0x20000c8a
 8001394:	20000c88 	.word	0x20000c88
 8001398:	20001078 	.word	0x20001078
 800139c:	40010800 	.word	0x40010800
 80013a0:	40011000 	.word	0x40011000
 80013a4:	200009b0 	.word	0x200009b0
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000001 	.word	0x20000001
 80013b0:	20000284 	.word	0x20000284

080013b4 <Batt_Open_Mode>:

void Batt_Open_Mode(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013be:	480f      	ldr	r0, [pc, #60]	; (80013fc <Batt_Open_Mode+0x48>)
 80013c0:	f008 f971 	bl	80096a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ca:	480d      	ldr	r0, [pc, #52]	; (8001400 <Batt_Open_Mode+0x4c>)
 80013cc:	f008 f96b 	bl	80096a6 <HAL_GPIO_WritePin>
	BATT_State=STATE_STANDBY;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <Batt_Open_Mode+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
	charge_state=0;
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <Batt_Open_Mode+0x54>)
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
	discharge_state=0;
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <Batt_Open_Mode+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
	sleep_state=1;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <Batt_Open_Mode+0x5c>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2104      	movs	r1, #4
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <Batt_Open_Mode+0x4c>)
 80013ee:	f008 f95a 	bl	80096a6 <HAL_GPIO_WritePin>

	check_SOC_Based_OCV();
 80013f2:	f000 f811 	bl	8001418 <check_SOC_Based_OCV>
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40010800 	.word	0x40010800
 8001400:	40011000 	.word	0x40011000
 8001404:	200009b0 	.word	0x200009b0
 8001408:	20000000 	.word	0x20000000
 800140c:	20000001 	.word	0x20000001
 8001410:	20000284 	.word	0x20000284
 8001414:	00000000 	.word	0x00000000

08001418 <check_SOC_Based_OCV>:

void check_SOC_Based_OCV(void)
{
 8001418:	b598      	push	{r3, r4, r7, lr}
 800141a:	af00      	add	r7, sp, #0
	if(VBATT <= 51.3){
 800141c:	4bb0      	ldr	r3, [pc, #704]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f801 	bl	8000428 <__aeabi_f2d>
 8001426:	a39a      	add	r3, pc, #616	; (adr r3, 8001690 <check_SOC_Based_OCV+0x278>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff fad0 	bl	80009d0 <__aeabi_dcmple>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d025      	beq.n	8001482 <check_SOC_Based_OCV+0x6a>
		Pack_SOC = 24.03846153846*(VBATT/15.0) - 77.18750000000;
 8001436:	4baa      	ldr	r3, [pc, #680]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7fe fff4 	bl	8000428 <__aeabi_f2d>
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	4ba7      	ldr	r3, [pc, #668]	; (80016e4 <check_SOC_Based_OCV+0x2cc>)
 8001446:	f7ff f971 	bl	800072c <__aeabi_ddiv>
 800144a:	4603      	mov	r3, r0
 800144c:	460c      	mov	r4, r1
 800144e:	4618      	mov	r0, r3
 8001450:	4621      	mov	r1, r4
 8001452:	a391      	add	r3, pc, #580	; (adr r3, 8001698 <check_SOC_Based_OCV+0x280>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff f83e 	bl	80004d8 <__aeabi_dmul>
 800145c:	4603      	mov	r3, r0
 800145e:	460c      	mov	r4, r1
 8001460:	4618      	mov	r0, r3
 8001462:	4621      	mov	r1, r4
 8001464:	a38e      	add	r3, pc, #568	; (adr r3, 80016a0 <check_SOC_Based_OCV+0x288>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7fe fe7d 	bl	8000168 <__aeabi_dsub>
 800146e:	4603      	mov	r3, r0
 8001470:	460c      	mov	r4, r1
 8001472:	4618      	mov	r0, r3
 8001474:	4621      	mov	r1, r4
 8001476:	f7ff fb07 	bl	8000a88 <__aeabi_d2f>
 800147a:	4602      	mov	r2, r0
 800147c:	4b9a      	ldr	r3, [pc, #616]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e0a9      	b.n	80015d6 <check_SOC_Based_OCV+0x1be>
	}
	else if(VBATT > 51.3 &&  VBATT <= 53.5){
 8001482:	4b97      	ldr	r3, [pc, #604]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe ffce 	bl	8000428 <__aeabi_f2d>
 800148c:	a380      	add	r3, pc, #512	; (adr r3, 8001690 <check_SOC_Based_OCV+0x278>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff fab1 	bl	80009f8 <__aeabi_dcmpgt>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d02e      	beq.n	80014fa <check_SOC_Based_OCV+0xe2>
 800149c:	4b90      	ldr	r3, [pc, #576]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4992      	ldr	r1, [pc, #584]	; (80016ec <check_SOC_Based_OCV+0x2d4>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fdf6 	bl	8001094 <__aeabi_fcmple>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d025      	beq.n	80014fa <check_SOC_Based_OCV+0xe2>
		Pack_SOC = 135.26698598540*(VBATT/15.0) - 458.27213056570;
 80014ae:	4b8c      	ldr	r3, [pc, #560]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ffb8 	bl	8000428 <__aeabi_f2d>
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b89      	ldr	r3, [pc, #548]	; (80016e4 <check_SOC_Based_OCV+0x2cc>)
 80014be:	f7ff f935 	bl	800072c <__aeabi_ddiv>
 80014c2:	4603      	mov	r3, r0
 80014c4:	460c      	mov	r4, r1
 80014c6:	4618      	mov	r0, r3
 80014c8:	4621      	mov	r1, r4
 80014ca:	a377      	add	r3, pc, #476	; (adr r3, 80016a8 <check_SOC_Based_OCV+0x290>)
 80014cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d0:	f7ff f802 	bl	80004d8 <__aeabi_dmul>
 80014d4:	4603      	mov	r3, r0
 80014d6:	460c      	mov	r4, r1
 80014d8:	4618      	mov	r0, r3
 80014da:	4621      	mov	r1, r4
 80014dc:	a374      	add	r3, pc, #464	; (adr r3, 80016b0 <check_SOC_Based_OCV+0x298>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7fe fe41 	bl	8000168 <__aeabi_dsub>
 80014e6:	4603      	mov	r3, r0
 80014e8:	460c      	mov	r4, r1
 80014ea:	4618      	mov	r0, r3
 80014ec:	4621      	mov	r1, r4
 80014ee:	f7ff facb 	bl	8000a88 <__aeabi_d2f>
 80014f2:	4602      	mov	r2, r0
 80014f4:	4b7c      	ldr	r3, [pc, #496]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	e06d      	b.n	80015d6 <check_SOC_Based_OCV+0x1be>
	}
	else if(VBATT > 53.5 &&  VBATT <= 54.7){
 80014fa:	4b79      	ldr	r3, [pc, #484]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	497b      	ldr	r1, [pc, #492]	; (80016ec <check_SOC_Based_OCV+0x2d4>)
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fddb 	bl	80010bc <__aeabi_fcmpgt>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d032      	beq.n	8001572 <check_SOC_Based_OCV+0x15a>
 800150c:	4b74      	ldr	r3, [pc, #464]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe ff89 	bl	8000428 <__aeabi_f2d>
 8001516:	a368      	add	r3, pc, #416	; (adr r3, 80016b8 <check_SOC_Based_OCV+0x2a0>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff fa58 	bl	80009d0 <__aeabi_dcmple>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d025      	beq.n	8001572 <check_SOC_Based_OCV+0x15a>
		Pack_SOC = 332.88158563421*(VBATT/15.0) - 1161.98331356855;
 8001526:	4b6e      	ldr	r3, [pc, #440]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ff7c 	bl	8000428 <__aeabi_f2d>
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	4b6b      	ldr	r3, [pc, #428]	; (80016e4 <check_SOC_Based_OCV+0x2cc>)
 8001536:	f7ff f8f9 	bl	800072c <__aeabi_ddiv>
 800153a:	4603      	mov	r3, r0
 800153c:	460c      	mov	r4, r1
 800153e:	4618      	mov	r0, r3
 8001540:	4621      	mov	r1, r4
 8001542:	a35f      	add	r3, pc, #380	; (adr r3, 80016c0 <check_SOC_Based_OCV+0x2a8>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7fe ffc6 	bl	80004d8 <__aeabi_dmul>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	4618      	mov	r0, r3
 8001552:	4621      	mov	r1, r4
 8001554:	a35c      	add	r3, pc, #368	; (adr r3, 80016c8 <check_SOC_Based_OCV+0x2b0>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7fe fe05 	bl	8000168 <__aeabi_dsub>
 800155e:	4603      	mov	r3, r0
 8001560:	460c      	mov	r4, r1
 8001562:	4618      	mov	r0, r3
 8001564:	4621      	mov	r1, r4
 8001566:	f7ff fa8f 	bl	8000a88 <__aeabi_d2f>
 800156a:	4602      	mov	r2, r0
 800156c:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	e031      	b.n	80015d6 <check_SOC_Based_OCV+0x1be>
	}
	else if(VBATT > 54.7){
 8001572:	4b5b      	ldr	r3, [pc, #364]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ff56 	bl	8000428 <__aeabi_f2d>
 800157c:	a34e      	add	r3, pc, #312	; (adr r3, 80016b8 <check_SOC_Based_OCV+0x2a0>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7ff fa39 	bl	80009f8 <__aeabi_dcmpgt>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d024      	beq.n	80015d6 <check_SOC_Based_OCV+0x1be>
		Pack_SOC = 111.42655038475*(VBATT/15.0) - 353.86053305809;
 800158c:	4b54      	ldr	r3, [pc, #336]	; (80016e0 <check_SOC_Based_OCV+0x2c8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ff49 	bl	8000428 <__aeabi_f2d>
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	4b52      	ldr	r3, [pc, #328]	; (80016e4 <check_SOC_Based_OCV+0x2cc>)
 800159c:	f7ff f8c6 	bl	800072c <__aeabi_ddiv>
 80015a0:	4603      	mov	r3, r0
 80015a2:	460c      	mov	r4, r1
 80015a4:	4618      	mov	r0, r3
 80015a6:	4621      	mov	r1, r4
 80015a8:	a349      	add	r3, pc, #292	; (adr r3, 80016d0 <check_SOC_Based_OCV+0x2b8>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7fe ff93 	bl	80004d8 <__aeabi_dmul>
 80015b2:	4603      	mov	r3, r0
 80015b4:	460c      	mov	r4, r1
 80015b6:	4618      	mov	r0, r3
 80015b8:	4621      	mov	r1, r4
 80015ba:	a347      	add	r3, pc, #284	; (adr r3, 80016d8 <check_SOC_Based_OCV+0x2c0>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7fe fdd2 	bl	8000168 <__aeabi_dsub>
 80015c4:	4603      	mov	r3, r0
 80015c6:	460c      	mov	r4, r1
 80015c8:	4618      	mov	r0, r3
 80015ca:	4621      	mov	r1, r4
 80015cc:	f7ff fa5c 	bl	8000a88 <__aeabi_d2f>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 80015d4:	601a      	str	r2, [r3, #0]
	}

//	Pack_SOC=0.226863411166458*VBATT*VBATT-18.618705166771*VBATT+378.560621625972;   //Persamaan Baterai INR 21700
//	Pack_SOC=(147.471026094008*(VBATT/15.0) - 494.687746093127);  // Persamaan Baterai EVE ICR18650/26V

	grad=(100-0)/(batas_atas-batas_bawah);
 80015d6:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <check_SOC_Based_OCV+0x2d8>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b46      	ldr	r3, [pc, #280]	; (80016f4 <check_SOC_Based_OCV+0x2dc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4619      	mov	r1, r3
 80015e0:	4610      	mov	r0, r2
 80015e2:	f7ff faa5 	bl	8000b30 <__aeabi_fsub>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4619      	mov	r1, r3
 80015ea:	4843      	ldr	r0, [pc, #268]	; (80016f8 <check_SOC_Based_OCV+0x2e0>)
 80015ec:	f7ff fc5e 	bl	8000eac <__aeabi_fdiv>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b41      	ldr	r3, [pc, #260]	; (80016fc <check_SOC_Based_OCV+0x2e4>)
 80015f6:	601a      	str	r2, [r3, #0]
	constanta=grad*batas_bawah*(-1);
 80015f8:	4b40      	ldr	r3, [pc, #256]	; (80016fc <check_SOC_Based_OCV+0x2e4>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <check_SOC_Based_OCV+0x2dc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	4610      	mov	r0, r2
 8001604:	f7ff fb9e 	bl	8000d44 <__aeabi_fmul>
 8001608:	4603      	mov	r3, r0
 800160a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800160e:	4a3c      	ldr	r2, [pc, #240]	; (8001700 <check_SOC_Based_OCV+0x2e8>)
 8001610:	6013      	str	r3, [r2, #0]
	SOC_manipulasi=grad*Pack_SOC+constanta;
 8001612:	4b3a      	ldr	r3, [pc, #232]	; (80016fc <check_SOC_Based_OCV+0x2e4>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4619      	mov	r1, r3
 800161c:	4610      	mov	r0, r2
 800161e:	f7ff fb91 	bl	8000d44 <__aeabi_fmul>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	4b36      	ldr	r3, [pc, #216]	; (8001700 <check_SOC_Based_OCV+0x2e8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4619      	mov	r1, r3
 800162c:	4610      	mov	r0, r2
 800162e:	f7ff fa81 	bl	8000b34 <__addsf3>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	4b33      	ldr	r3, [pc, #204]	; (8001704 <check_SOC_Based_OCV+0x2ec>)
 8001638:	601a      	str	r2, [r3, #0]

	if(Pack_SOC>130) Pack_SOC=100;
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4932      	ldr	r1, [pc, #200]	; (8001708 <check_SOC_Based_OCV+0x2f0>)
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fd3b 	bl	80010bc <__aeabi_fcmpgt>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <check_SOC_Based_OCV+0x23c>
 800164c:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 800164e:	4a2a      	ldr	r2, [pc, #168]	; (80016f8 <check_SOC_Based_OCV+0x2e0>)
 8001650:	601a      	str	r2, [r3, #0]
	else if(Pack_SOC>100) Pack_SOC=100;
	else if(Pack_SOC<0) Pack_SOC=0;
}
 8001652:	e01b      	b.n	800168c <check_SOC_Based_OCV+0x274>
	else if(Pack_SOC>100) Pack_SOC=100;
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4927      	ldr	r1, [pc, #156]	; (80016f8 <check_SOC_Based_OCV+0x2e0>)
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fd2e 	bl	80010bc <__aeabi_fcmpgt>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <check_SOC_Based_OCV+0x256>
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 8001668:	4a23      	ldr	r2, [pc, #140]	; (80016f8 <check_SOC_Based_OCV+0x2e0>)
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	e00e      	b.n	800168c <check_SOC_Based_OCV+0x274>
	else if(Pack_SOC<0) Pack_SOC=0;
 800166e:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fd02 	bl	8001080 <__aeabi_fcmplt>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d100      	bne.n	8001684 <check_SOC_Based_OCV+0x26c>
}
 8001682:	e003      	b.n	800168c <check_SOC_Based_OCV+0x274>
	else if(Pack_SOC<0) Pack_SOC=0;
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <check_SOC_Based_OCV+0x2d0>)
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
}
 800168c:	bf00      	nop
 800168e:	bd98      	pop	{r3, r4, r7, pc}
 8001690:	66666666 	.word	0x66666666
 8001694:	4049a666 	.word	0x4049a666
 8001698:	9d89d6ed 	.word	0x9d89d6ed
 800169c:	403809d8 	.word	0x403809d8
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40534c00 	.word	0x40534c00
 80016a8:	26317911 	.word	0x26317911
 80016ac:	4060e88b 	.word	0x4060e88b
 80016b0:	a5947ec7 	.word	0xa5947ec7
 80016b4:	407ca45a 	.word	0x407ca45a
 80016b8:	9999999a 	.word	0x9999999a
 80016bc:	404b5999 	.word	0x404b5999
 80016c0:	f989b8e3 	.word	0xf989b8e3
 80016c4:	4074ce1a 	.word	0x4074ce1a
 80016c8:	e9c08a8b 	.word	0xe9c08a8b
 80016cc:	409227ee 	.word	0x409227ee
 80016d0:	99fc263d 	.word	0x99fc263d
 80016d4:	405bdb4c 	.word	0x405bdb4c
 80016d8:	be4fd9fa 	.word	0xbe4fd9fa
 80016dc:	40761dc4 	.word	0x40761dc4
 80016e0:	20001094 	.word	0x20001094
 80016e4:	402e0000 	.word	0x402e0000
 80016e8:	20000be4 	.word	0x20000be4
 80016ec:	42560000 	.word	0x42560000
 80016f0:	2000007c 	.word	0x2000007c
 80016f4:	20000080 	.word	0x20000080
 80016f8:	42c80000 	.word	0x42c80000
 80016fc:	200010d0 	.word	0x200010d0
 8001700:	2000109c 	.word	0x2000109c
 8001704:	20000bb4 	.word	0x20000bb4
 8001708:	43020000 	.word	0x43020000

0800170c <BMS_CAN_Tx>:
					Ready_toCharge = 0,
					flag_Check_SOCawal = 0,
					flag_bypass = 0;

void BMS_CAN_Tx()
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
		int i;
		Batt_voltage.m_uint16_t=VBATT*100;
 8001712:	4b7d      	ldr	r3, [pc, #500]	; (8001908 <BMS_CAN_Tx+0x1fc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	497d      	ldr	r1, [pc, #500]	; (800190c <BMS_CAN_Tx+0x200>)
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fb13 	bl	8000d44 <__aeabi_fmul>
 800171e:	4603      	mov	r3, r0
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fcfb 	bl	800111c <__aeabi_f2uiz>
 8001726:	4603      	mov	r3, r0
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b79      	ldr	r3, [pc, #484]	; (8001910 <BMS_CAN_Tx+0x204>)
 800172c:	801a      	strh	r2, [r3, #0]
		Batt_current.m_uint16_t=(IBATT+50)*100;
 800172e:	4b79      	ldr	r3, [pc, #484]	; (8001914 <BMS_CAN_Tx+0x208>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4979      	ldr	r1, [pc, #484]	; (8001918 <BMS_CAN_Tx+0x20c>)
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff f9fd 	bl	8000b34 <__addsf3>
 800173a:	4603      	mov	r3, r0
 800173c:	4973      	ldr	r1, [pc, #460]	; (800190c <BMS_CAN_Tx+0x200>)
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fb00 	bl	8000d44 <__aeabi_fmul>
 8001744:	4603      	mov	r3, r0
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fce8 	bl	800111c <__aeabi_f2uiz>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b72      	ldr	r3, [pc, #456]	; (800191c <BMS_CAN_Tx+0x210>)
 8001752:	801a      	strh	r2, [r3, #0]
		Batt_SOC.m_uint16_t=Pack_SOC*100;
 8001754:	4b72      	ldr	r3, [pc, #456]	; (8001920 <BMS_CAN_Tx+0x214>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	496c      	ldr	r1, [pc, #432]	; (800190c <BMS_CAN_Tx+0x200>)
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff faf2 	bl	8000d44 <__aeabi_fmul>
 8001760:	4603      	mov	r3, r0
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fcda 	bl	800111c <__aeabi_f2uiz>
 8001768:	4603      	mov	r3, r0
 800176a:	b29a      	uxth	r2, r3
 800176c:	4b6d      	ldr	r3, [pc, #436]	; (8001924 <BMS_CAN_Tx+0x218>)
 800176e:	801a      	strh	r2, [r3, #0]
//		Batt_SOC.m_uint16_t=(int)SOC_manipulasi;	default Data SOC

		Tmax=Suhu_T1;
 8001770:	4b6d      	ldr	r3, [pc, #436]	; (8001928 <BMS_CAN_Tx+0x21c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a6d      	ldr	r2, [pc, #436]	; (800192c <BMS_CAN_Tx+0x220>)
 8001776:	6013      	str	r3, [r2, #0]
		if(Tmax < Suhu_T2) Tmax = Suhu_T2;
 8001778:	4b6c      	ldr	r3, [pc, #432]	; (800192c <BMS_CAN_Tx+0x220>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <BMS_CAN_Tx+0x224>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	4610      	mov	r0, r2
 8001784:	f7ff fc7c 	bl	8001080 <__aeabi_fcmplt>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <BMS_CAN_Tx+0x8a>
 800178e:	4b68      	ldr	r3, [pc, #416]	; (8001930 <BMS_CAN_Tx+0x224>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a66      	ldr	r2, [pc, #408]	; (800192c <BMS_CAN_Tx+0x220>)
 8001794:	6013      	str	r3, [r2, #0]
		if(Tmax < Suhu_T3) Tmax = Suhu_T3;
 8001796:	4b65      	ldr	r3, [pc, #404]	; (800192c <BMS_CAN_Tx+0x220>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b66      	ldr	r3, [pc, #408]	; (8001934 <BMS_CAN_Tx+0x228>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4619      	mov	r1, r3
 80017a0:	4610      	mov	r0, r2
 80017a2:	f7ff fc6d 	bl	8001080 <__aeabi_fcmplt>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <BMS_CAN_Tx+0xa8>
 80017ac:	4b61      	ldr	r3, [pc, #388]	; (8001934 <BMS_CAN_Tx+0x228>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a5e      	ldr	r2, [pc, #376]	; (800192c <BMS_CAN_Tx+0x220>)
 80017b2:	6013      	str	r3, [r2, #0]
		if(Tmax < Suhu_T4) Tmax = Suhu_T4;
 80017b4:	4b5d      	ldr	r3, [pc, #372]	; (800192c <BMS_CAN_Tx+0x220>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <BMS_CAN_Tx+0x22c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	4610      	mov	r0, r2
 80017c0:	f7ff fc5e 	bl	8001080 <__aeabi_fcmplt>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <BMS_CAN_Tx+0xc6>
 80017ca:	4b5b      	ldr	r3, [pc, #364]	; (8001938 <BMS_CAN_Tx+0x22c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a57      	ldr	r2, [pc, #348]	; (800192c <BMS_CAN_Tx+0x220>)
 80017d0:	6013      	str	r3, [r2, #0]

		Batt_temp.m_uint16_t=(Tmax+40)*10;
 80017d2:	4b56      	ldr	r3, [pc, #344]	; (800192c <BMS_CAN_Tx+0x220>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4959      	ldr	r1, [pc, #356]	; (800193c <BMS_CAN_Tx+0x230>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff f9ab 	bl	8000b34 <__addsf3>
 80017de:	4603      	mov	r3, r0
 80017e0:	4957      	ldr	r1, [pc, #348]	; (8001940 <BMS_CAN_Tx+0x234>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff faae 	bl	8000d44 <__aeabi_fmul>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fc96 	bl	800111c <__aeabi_f2uiz>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	4b53      	ldr	r3, [pc, #332]	; (8001944 <BMS_CAN_Tx+0x238>)
 80017f6:	801a      	strh	r2, [r3, #0]
		Batt_capacity.m_uint16_t=Pack_Cap*100;
 80017f8:	4b53      	ldr	r3, [pc, #332]	; (8001948 <BMS_CAN_Tx+0x23c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4943      	ldr	r1, [pc, #268]	; (800190c <BMS_CAN_Tx+0x200>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff faa0 	bl	8000d44 <__aeabi_fmul>
 8001804:	4603      	mov	r3, r0
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fc88 	bl	800111c <__aeabi_f2uiz>
 800180c:	4603      	mov	r3, r0
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b4e      	ldr	r3, [pc, #312]	; (800194c <BMS_CAN_Tx+0x240>)
 8001812:	801a      	strh	r2, [r3, #0]
		Batt_SOH.m_uint16_t=(int)SOH_batt;
 8001814:	4b4e      	ldr	r3, [pc, #312]	; (8001950 <BMS_CAN_Tx+0x244>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fc59 	bl	80010d0 <__aeabi_f2iz>
 800181e:	4603      	mov	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <BMS_CAN_Tx+0x248>)
 8001824:	801a      	strh	r2, [r3, #0]
		Batt_cycle.m_uint16_t=LifeTime;
 8001826:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <BMS_CAN_Tx+0x24c>)
 8001828:	881a      	ldrh	r2, [r3, #0]
 800182a:	4b4c      	ldr	r3, [pc, #304]	; (800195c <BMS_CAN_Tx+0x250>)
 800182c:	801a      	strh	r2, [r3, #0]

		for(int mn=0;mn<15;mn++)
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	e00a      	b.n	800184a <BMS_CAN_Tx+0x13e>
		{
			vcell_15databyte[mn].m_uint16_t=vcell_15data_digi[mn];
 8001834:	4a4a      	ldr	r2, [pc, #296]	; (8001960 <BMS_CAN_Tx+0x254>)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800183c:	4a49      	ldr	r2, [pc, #292]	; (8001964 <BMS_CAN_Tx+0x258>)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		for(int mn=0;mn<15;mn++)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	2b0e      	cmp	r3, #14
 800184e:	ddf1      	ble.n	8001834 <BMS_CAN_Tx+0x128>
		}

	if(Handshaking==1){
 8001850:	4b45      	ldr	r3, [pc, #276]	; (8001968 <BMS_CAN_Tx+0x25c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	f040 81eb 	bne.w	8001c30 <BMS_CAN_Tx+0x524>
		// CAN ID transmit #1
		Tx_Header.ExtId = (0x0B0<<20|UNIQUE_Code);  //7b1
 800185a:	4b44      	ldr	r3, [pc, #272]	; (800196c <BMS_CAN_Tx+0x260>)
 800185c:	4a44      	ldr	r2, [pc, #272]	; (8001970 <BMS_CAN_Tx+0x264>)
 800185e:	605a      	str	r2, [r3, #4]
		//CAN Data #1
		Tx_data[0] = Batt_voltage.m_bytes[0];
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <BMS_CAN_Tx+0x204>)
 8001862:	781a      	ldrb	r2, [r3, #0]
 8001864:	4b43      	ldr	r3, [pc, #268]	; (8001974 <BMS_CAN_Tx+0x268>)
 8001866:	701a      	strb	r2, [r3, #0]
		Tx_data[1] = Batt_voltage.m_bytes[1];
 8001868:	4b29      	ldr	r3, [pc, #164]	; (8001910 <BMS_CAN_Tx+0x204>)
 800186a:	785a      	ldrb	r2, [r3, #1]
 800186c:	4b41      	ldr	r3, [pc, #260]	; (8001974 <BMS_CAN_Tx+0x268>)
 800186e:	705a      	strb	r2, [r3, #1]
		Tx_data[2] = Batt_current.m_bytes[0];
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <BMS_CAN_Tx+0x210>)
 8001872:	781a      	ldrb	r2, [r3, #0]
 8001874:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <BMS_CAN_Tx+0x268>)
 8001876:	709a      	strb	r2, [r3, #2]
		Tx_data[3] = Batt_current.m_bytes[1];
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <BMS_CAN_Tx+0x210>)
 800187a:	785a      	ldrb	r2, [r3, #1]
 800187c:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <BMS_CAN_Tx+0x268>)
 800187e:	70da      	strb	r2, [r3, #3]
		Tx_data[4] = Batt_SOC.m_bytes[0];
 8001880:	4b28      	ldr	r3, [pc, #160]	; (8001924 <BMS_CAN_Tx+0x218>)
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <BMS_CAN_Tx+0x268>)
 8001886:	711a      	strb	r2, [r3, #4]
		Tx_data[5] = Batt_SOC.m_bytes[1];
 8001888:	4b26      	ldr	r3, [pc, #152]	; (8001924 <BMS_CAN_Tx+0x218>)
 800188a:	785a      	ldrb	r2, [r3, #1]
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <BMS_CAN_Tx+0x268>)
 800188e:	715a      	strb	r2, [r3, #5]
		Tx_data[6] = Batt_temp.m_bytes[0];
 8001890:	4b2c      	ldr	r3, [pc, #176]	; (8001944 <BMS_CAN_Tx+0x238>)
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	4b37      	ldr	r3, [pc, #220]	; (8001974 <BMS_CAN_Tx+0x268>)
 8001896:	719a      	strb	r2, [r3, #6]
		Tx_data[7] = Batt_temp.m_bytes[1];
 8001898:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <BMS_CAN_Tx+0x238>)
 800189a:	785a      	ldrb	r2, [r3, #1]
 800189c:	4b35      	ldr	r3, [pc, #212]	; (8001974 <BMS_CAN_Tx+0x268>)
 800189e:	71da      	strb	r2, [r3, #7]

		//CAN Tx message #1
		Tx_Header.DLC = 8;
 80018a0:	4b32      	ldr	r3, [pc, #200]	; (800196c <BMS_CAN_Tx+0x260>)
 80018a2:	2208      	movs	r2, #8
 80018a4:	611a      	str	r2, [r3, #16]
		delay_TICK1 = HAL_GetTick();
 80018a6:	f005 ffd5 	bl	8007854 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b32      	ldr	r3, [pc, #200]	; (8001978 <BMS_CAN_Tx+0x26c>)
 80018ae:	601a      	str	r2, [r3, #0]
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80018b0:	e00f      	b.n	80018d2 <BMS_CAN_Tx+0x1c6>
			if(HAL_GetTick() - delay_TICK1 > 1000){
 80018b2:	f005 ffcf 	bl	8007854 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <BMS_CAN_Tx+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018c2:	d906      	bls.n	80018d2 <BMS_CAN_Tx+0x1c6>
				HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80018c4:	4b2d      	ldr	r3, [pc, #180]	; (800197c <BMS_CAN_Tx+0x270>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	482d      	ldr	r0, [pc, #180]	; (8001980 <BMS_CAN_Tx+0x274>)
 80018cc:	f006 fe8c 	bl	80085e8 <HAL_CAN_AbortTxRequest>
				break;
 80018d0:	e005      	b.n	80018de <BMS_CAN_Tx+0x1d2>
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80018d2:	482b      	ldr	r0, [pc, #172]	; (8001980 <BMS_CAN_Tx+0x274>)
 80018d4:	f006 fecc 	bl	8008670 <HAL_CAN_GetTxMailboxesFreeLevel>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0e9      	beq.n	80018b2 <BMS_CAN_Tx+0x1a6>
			}
		}

		if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 80018de:	4b27      	ldr	r3, [pc, #156]	; (800197c <BMS_CAN_Tx+0x270>)
 80018e0:	4a24      	ldr	r2, [pc, #144]	; (8001974 <BMS_CAN_Tx+0x268>)
 80018e2:	4922      	ldr	r1, [pc, #136]	; (800196c <BMS_CAN_Tx+0x260>)
 80018e4:	4826      	ldr	r0, [pc, #152]	; (8001980 <BMS_CAN_Tx+0x274>)
 80018e6:	f006 fda5 	bl	8008434 <HAL_CAN_AddTxMessage>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d007      	beq.n	8001900 <BMS_CAN_Tx+0x1f4>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <BMS_CAN_Tx+0x270>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4822      	ldr	r0, [pc, #136]	; (8001980 <BMS_CAN_Tx+0x274>)
 80018f8:	f006 fe76 	bl	80085e8 <HAL_CAN_AbortTxRequest>
			Error_Handler();
 80018fc:	f001 fbd4 	bl	80030a8 <Error_Handler>
		}
		i=1000;
 8001900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001904:	607b      	str	r3, [r7, #4]
		while(i>1) i--;
 8001906:	e040      	b.n	800198a <BMS_CAN_Tx+0x27e>
 8001908:	20001094 	.word	0x20001094
 800190c:	42c80000 	.word	0x42c80000
 8001910:	200007b4 	.word	0x200007b4
 8001914:	200010b0 	.word	0x200010b0
 8001918:	42480000 	.word	0x42480000
 800191c:	200006f4 	.word	0x200006f4
 8001920:	20000be4 	.word	0x20000be4
 8001924:	200006fc 	.word	0x200006fc
 8001928:	200010c4 	.word	0x200010c4
 800192c:	20000754 	.word	0x20000754
 8001930:	20001500 	.word	0x20001500
 8001934:	20001098 	.word	0x20001098
 8001938:	200010f8 	.word	0x200010f8
 800193c:	42200000 	.word	0x42200000
 8001940:	41200000 	.word	0x41200000
 8001944:	20000740 	.word	0x20000740
 8001948:	20000010 	.word	0x20000010
 800194c:	200007ac 	.word	0x200007ac
 8001950:	20000004 	.word	0x20000004
 8001954:	200006b8 	.word	0x200006b8
 8001958:	200009b2 	.word	0x200009b2
 800195c:	200006ec 	.word	0x200006ec
 8001960:	20000938 	.word	0x20000938
 8001964:	20000700 	.word	0x20000700
 8001968:	20000285 	.word	0x20000285
 800196c:	20000794 	.word	0x20000794
 8001970:	0b0bbbb1 	.word	0x0b0bbbb1
 8001974:	200006cc 	.word	0x200006cc
 8001978:	200006e4 	.word	0x200006e4
 800197c:	20000778 	.word	0x20000778
 8001980:	2000082c 	.word	0x2000082c
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b01      	cmp	r3, #1
 800198e:	dcf9      	bgt.n	8001984 <BMS_CAN_Tx+0x278>


		// CAN ID transmit #2
		Tx_Header.ExtId = (0x0B1<<20|UNIQUE_Code); //7b2
 8001990:	4b91      	ldr	r3, [pc, #580]	; (8001bd8 <BMS_CAN_Tx+0x4cc>)
 8001992:	4a92      	ldr	r2, [pc, #584]	; (8001bdc <BMS_CAN_Tx+0x4d0>)
 8001994:	605a      	str	r2, [r3, #4]
		//CAN Data #2
		Tx_data[0] = Batt_capacity.m_bytes[0];
 8001996:	4b92      	ldr	r3, [pc, #584]	; (8001be0 <BMS_CAN_Tx+0x4d4>)
 8001998:	781a      	ldrb	r2, [r3, #0]
 800199a:	4b92      	ldr	r3, [pc, #584]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 800199c:	701a      	strb	r2, [r3, #0]
		Tx_data[1] = Batt_capacity.m_bytes[1];
 800199e:	4b90      	ldr	r3, [pc, #576]	; (8001be0 <BMS_CAN_Tx+0x4d4>)
 80019a0:	785a      	ldrb	r2, [r3, #1]
 80019a2:	4b90      	ldr	r3, [pc, #576]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019a4:	705a      	strb	r2, [r3, #1]
		Tx_data[2] = Batt_SOH.m_bytes[0];
 80019a6:	4b90      	ldr	r3, [pc, #576]	; (8001be8 <BMS_CAN_Tx+0x4dc>)
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	4b8e      	ldr	r3, [pc, #568]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019ac:	709a      	strb	r2, [r3, #2]
		Tx_data[3] = Batt_SOH.m_bytes[1];
 80019ae:	4b8e      	ldr	r3, [pc, #568]	; (8001be8 <BMS_CAN_Tx+0x4dc>)
 80019b0:	785a      	ldrb	r2, [r3, #1]
 80019b2:	4b8c      	ldr	r3, [pc, #560]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019b4:	70da      	strb	r2, [r3, #3]
		Tx_data[4] = Batt_cycle.m_bytes[0];
 80019b6:	4b8d      	ldr	r3, [pc, #564]	; (8001bec <BMS_CAN_Tx+0x4e0>)
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	4b8a      	ldr	r3, [pc, #552]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019bc:	711a      	strb	r2, [r3, #4]
		Tx_data[5] = Batt_cycle.m_bytes[1];
 80019be:	4b8b      	ldr	r3, [pc, #556]	; (8001bec <BMS_CAN_Tx+0x4e0>)
 80019c0:	785a      	ldrb	r2, [r3, #1]
 80019c2:	4b88      	ldr	r3, [pc, #544]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019c4:	715a      	strb	r2, [r3, #5]
		Tx_data[6] = flag_trip_shortcircuit&0x01;
 80019c6:	4b8a      	ldr	r3, [pc, #552]	; (8001bf0 <BMS_CAN_Tx+0x4e4>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b84      	ldr	r3, [pc, #528]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019d2:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overcurrentdischarge&0x01)<<1;
 80019d4:	4b83      	ldr	r3, [pc, #524]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019d6:	799b      	ldrb	r3, [r3, #6]
 80019d8:	b25a      	sxtb	r2, r3
 80019da:	4b86      	ldr	r3, [pc, #536]	; (8001bf4 <BMS_CAN_Tx+0x4e8>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	4313      	orrs	r3, r2
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b7d      	ldr	r3, [pc, #500]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019f0:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overcurrentcharge&0x01)<<2;
 80019f2:	4b7c      	ldr	r3, [pc, #496]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 80019f4:	799b      	ldrb	r3, [r3, #6]
 80019f6:	b25a      	sxtb	r2, r3
 80019f8:	4b7f      	ldr	r3, [pc, #508]	; (8001bf8 <BMS_CAN_Tx+0x4ec>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	4313      	orrs	r3, r2
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4b75      	ldr	r3, [pc, #468]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a0e:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overtemperature&0x01)<<3;
 8001a10:	4b74      	ldr	r3, [pc, #464]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a12:	799b      	ldrb	r3, [r3, #6]
 8001a14:	b25a      	sxtb	r2, r3
 8001a16:	4b79      	ldr	r3, [pc, #484]	; (8001bfc <BMS_CAN_Tx+0x4f0>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	b25b      	sxtb	r3, r3
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	b25b      	sxtb	r3, r3
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b25b      	sxtb	r3, r3
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b6e      	ldr	r3, [pc, #440]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a2c:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_undertemperature&0x01)<<4;
 8001a2e:	4b6d      	ldr	r3, [pc, #436]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a30:	799b      	ldrb	r3, [r3, #6]
 8001a32:	b25a      	sxtb	r2, r3
 8001a34:	4b72      	ldr	r3, [pc, #456]	; (8001c00 <BMS_CAN_Tx+0x4f4>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	b25b      	sxtb	r3, r3
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	4313      	orrs	r3, r2
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b66      	ldr	r3, [pc, #408]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a4a:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overtemperature&0x01)<<5;
 8001a4c:	4b65      	ldr	r3, [pc, #404]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a4e:	799b      	ldrb	r3, [r3, #6]
 8001a50:	b25a      	sxtb	r2, r3
 8001a52:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <BMS_CAN_Tx+0x4f0>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	015b      	lsls	r3, r3, #5
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a68:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_undertemperature&0x01)<<6;
 8001a6a:	4b5e      	ldr	r3, [pc, #376]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a6c:	799b      	ldrb	r3, [r3, #6]
 8001a6e:	b25a      	sxtb	r2, r3
 8001a70:	4b63      	ldr	r3, [pc, #396]	; (8001c00 <BMS_CAN_Tx+0x4f4>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	019b      	lsls	r3, r3, #6
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b57      	ldr	r3, [pc, #348]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a86:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_unbalance&0x01)<<7;
 8001a88:	4b56      	ldr	r3, [pc, #344]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a8a:	799b      	ldrb	r3, [r3, #6]
 8001a8c:	b25a      	sxtb	r2, r3
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <BMS_CAN_Tx+0x4f8>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	01db      	lsls	r3, r3, #7
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	4313      	orrs	r3, r2
 8001a98:	b25b      	sxtb	r3, r3
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b51      	ldr	r3, [pc, #324]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001a9e:	719a      	strb	r2, [r3, #6]

		Tx_data[7] =  (flag_trip_undervoltage&0x01);
 8001aa0:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <BMS_CAN_Tx+0x4fc>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4b4e      	ldr	r3, [pc, #312]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001aac:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (flag_trip_overvoltage&0x01)<<1;
 8001aae:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001ab0:	79db      	ldrb	r3, [r3, #7]
 8001ab2:	b25a      	sxtb	r2, r3
 8001ab4:	4b55      	ldr	r3, [pc, #340]	; (8001c0c <BMS_CAN_Tx+0x500>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b25b      	sxtb	r3, r3
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b46      	ldr	r3, [pc, #280]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001aca:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (flag_trip_SOCOverDischarge&0x01)<<2;
 8001acc:	4b45      	ldr	r3, [pc, #276]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001ace:	79db      	ldrb	r3, [r3, #7]
 8001ad0:	b25a      	sxtb	r2, r3
 8001ad2:	4b4f      	ldr	r3, [pc, #316]	; (8001c10 <BMS_CAN_Tx+0x504>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	b25b      	sxtb	r3, r3
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001ae8:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (flag_trip_systemfailure&0x01)<<3;
 8001aea:	4b3e      	ldr	r3, [pc, #248]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001aec:	79db      	ldrb	r3, [r3, #7]
 8001aee:	b25a      	sxtb	r2, r3
 8001af0:	4b48      	ldr	r3, [pc, #288]	; (8001c14 <BMS_CAN_Tx+0x508>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	b25b      	sxtb	r3, r3
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	b25b      	sxtb	r3, r3
 8001afe:	4313      	orrs	r3, r2
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001b06:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (charge_state&0x01)<<4;
 8001b08:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001b0a:	79db      	ldrb	r3, [r3, #7]
 8001b0c:	b25a      	sxtb	r2, r3
 8001b0e:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <BMS_CAN_Tx+0x50c>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	b25b      	sxtb	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b25b      	sxtb	r3, r3
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001b24:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (discharge_state&0x01)<<5;
 8001b26:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001b28:	79db      	ldrb	r3, [r3, #7]
 8001b2a:	b25a      	sxtb	r2, r3
 8001b2c:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <BMS_CAN_Tx+0x510>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	015b      	lsls	r3, r3, #5
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001b42:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (sleep_state&0x01)<<6;
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001b46:	79db      	ldrb	r3, [r3, #7]
 8001b48:	b25a      	sxtb	r2, r3
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <BMS_CAN_Tx+0x514>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	019b      	lsls	r3, r3, #6
 8001b50:	b25b      	sxtb	r3, r3
 8001b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b56:	b25b      	sxtb	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b25b      	sxtb	r3, r3
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001b60:	71da      	strb	r2, [r3, #7]

		//CAN Tx message #2
		Tx_Header.DLC = 8;
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <BMS_CAN_Tx+0x4cc>)
 8001b64:	2208      	movs	r2, #8
 8001b66:	611a      	str	r2, [r3, #16]
		delay_TICK2 = HAL_GetTick();
 8001b68:	f005 fe74 	bl	8007854 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <BMS_CAN_Tx+0x518>)
 8001b70:	601a      	str	r2, [r3, #0]
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8001b72:	e00f      	b.n	8001b94 <BMS_CAN_Tx+0x488>
			if(HAL_GetTick() - delay_TICK2 > 1000){
 8001b74:	f005 fe6e 	bl	8007854 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <BMS_CAN_Tx+0x518>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b84:	d906      	bls.n	8001b94 <BMS_CAN_Tx+0x488>
				HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <BMS_CAN_Tx+0x51c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4827      	ldr	r0, [pc, #156]	; (8001c2c <BMS_CAN_Tx+0x520>)
 8001b8e:	f006 fd2b 	bl	80085e8 <HAL_CAN_AbortTxRequest>
				break;
 8001b92:	e005      	b.n	8001ba0 <BMS_CAN_Tx+0x494>
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8001b94:	4825      	ldr	r0, [pc, #148]	; (8001c2c <BMS_CAN_Tx+0x520>)
 8001b96:	f006 fd6b 	bl	8008670 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0e9      	beq.n	8001b74 <BMS_CAN_Tx+0x468>
			}
		}

		if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8001ba0:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <BMS_CAN_Tx+0x51c>)
 8001ba2:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <BMS_CAN_Tx+0x4d8>)
 8001ba4:	490c      	ldr	r1, [pc, #48]	; (8001bd8 <BMS_CAN_Tx+0x4cc>)
 8001ba6:	4821      	ldr	r0, [pc, #132]	; (8001c2c <BMS_CAN_Tx+0x520>)
 8001ba8:	f006 fc44 	bl	8008434 <HAL_CAN_AddTxMessage>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <BMS_CAN_Tx+0x4b6>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <BMS_CAN_Tx+0x51c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	481c      	ldr	r0, [pc, #112]	; (8001c2c <BMS_CAN_Tx+0x520>)
 8001bba:	f006 fd15 	bl	80085e8 <HAL_CAN_AbortTxRequest>
			Error_Handler();
 8001bbe:	f001 fa73 	bl	80030a8 <Error_Handler>
		}
		i=1000;
 8001bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc6:	607b      	str	r3, [r7, #4]
		while(i>1) i--;
 8001bc8:	e002      	b.n	8001bd0 <BMS_CAN_Tx+0x4c4>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	dcf9      	bgt.n	8001bca <BMS_CAN_Tx+0x4be>
			i=1000;
			while(i>1) i--;
			Delay_Charger=0;
		}
	}
}
 8001bd6:	e07a      	b.n	8001cce <BMS_CAN_Tx+0x5c2>
 8001bd8:	20000794 	.word	0x20000794
 8001bdc:	0b1bbbb1 	.word	0x0b1bbbb1
 8001be0:	200007ac 	.word	0x200007ac
 8001be4:	200006cc 	.word	0x200006cc
 8001be8:	200006b8 	.word	0x200006b8
 8001bec:	200006ec 	.word	0x200006ec
 8001bf0:	20000c8a 	.word	0x20000c8a
 8001bf4:	200010c8 	.word	0x200010c8
 8001bf8:	200010e4 	.word	0x200010e4
 8001bfc:	20001090 	.word	0x20001090
 8001c00:	200010b8 	.word	0x200010b8
 8001c04:	20000c88 	.word	0x20000c88
 8001c08:	200010b9 	.word	0x200010b9
 8001c0c:	200014fd 	.word	0x200014fd
 8001c10:	200010ec 	.word	0x200010ec
 8001c14:	20001078 	.word	0x20001078
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000001 	.word	0x20000001
 8001c20:	20000284 	.word	0x20000284
 8001c24:	200006c8 	.word	0x200006c8
 8001c28:	20000778 	.word	0x20000778
 8001c2c:	2000082c 	.word	0x2000082c
		Delay_Charger+=1;
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <BMS_CAN_Tx+0x5cc>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <BMS_CAN_Tx+0x5cc>)
 8001c3a:	701a      	strb	r2, [r3, #0]
		if(Handshaking == 0 && identified == 0 && Delay_Charger >= 50){
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <BMS_CAN_Tx+0x5d0>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d144      	bne.n	8001cce <BMS_CAN_Tx+0x5c2>
 8001c44:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <BMS_CAN_Tx+0x5d4>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d140      	bne.n	8001cce <BMS_CAN_Tx+0x5c2>
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <BMS_CAN_Tx+0x5cc>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b31      	cmp	r3, #49	; 0x31
 8001c52:	d93c      	bls.n	8001cce <BMS_CAN_Tx+0x5c2>
			Tx_Header.ExtId = (0x0E0<<20|UNIQUE_Code); //b7
 8001c54:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <BMS_CAN_Tx+0x5d8>)
 8001c56:	4a24      	ldr	r2, [pc, #144]	; (8001ce8 <BMS_CAN_Tx+0x5dc>)
 8001c58:	605a      	str	r2, [r3, #4]
			Tx_data[0] = 0;
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
			Tx_data[1] = 0;
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	705a      	strb	r2, [r3, #1]
			Tx_data[2] = 0;
 8001c66:	4b21      	ldr	r3, [pc, #132]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	709a      	strb	r2, [r3, #2]
			Tx_data[3] = 0;
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	70da      	strb	r2, [r3, #3]
			Tx_data[4] = 0;
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	711a      	strb	r2, [r3, #4]
			Tx_data[5] = 0;
 8001c78:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	715a      	strb	r2, [r3, #5]
			Tx_data[6] = 0x55;
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c80:	2255      	movs	r2, #85	; 0x55
 8001c82:	719a      	strb	r2, [r3, #6]
			Tx_data[7] = 0;
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	71da      	strb	r2, [r3, #7]
			Tx_Header.DLC = 8;
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <BMS_CAN_Tx+0x5d8>)
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	611a      	str	r2, [r3, #16]
			while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8001c90:	bf00      	nop
 8001c92:	4817      	ldr	r0, [pc, #92]	; (8001cf0 <BMS_CAN_Tx+0x5e4>)
 8001c94:	f006 fcec 	bl	8008670 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f9      	beq.n	8001c92 <BMS_CAN_Tx+0x586>
			if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <BMS_CAN_Tx+0x5e8>)
 8001ca0:	4a12      	ldr	r2, [pc, #72]	; (8001cec <BMS_CAN_Tx+0x5e0>)
 8001ca2:	4910      	ldr	r1, [pc, #64]	; (8001ce4 <BMS_CAN_Tx+0x5d8>)
 8001ca4:	4812      	ldr	r0, [pc, #72]	; (8001cf0 <BMS_CAN_Tx+0x5e4>)
 8001ca6:	f006 fbc5 	bl	8008434 <HAL_CAN_AddTxMessage>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <BMS_CAN_Tx+0x5a8>
 8001cb0:	f001 f9fa 	bl	80030a8 <Error_Handler>
			i=1000;
 8001cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb8:	607b      	str	r3, [r7, #4]
			while(i>1) i--;
 8001cba:	e002      	b.n	8001cc2 <BMS_CAN_Tx+0x5b6>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	dcf9      	bgt.n	8001cbc <BMS_CAN_Tx+0x5b0>
			Delay_Charger=0;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <BMS_CAN_Tx+0x5cc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000287 	.word	0x20000287
 8001cdc:	20000285 	.word	0x20000285
 8001ce0:	20000286 	.word	0x20000286
 8001ce4:	20000794 	.word	0x20000794
 8001ce8:	0e0bbbb1 	.word	0x0e0bbbb1
 8001cec:	200006cc 	.word	0x200006cc
 8001cf0:	2000082c 	.word	0x2000082c
 8001cf4:	20000778 	.word	0x20000778

08001cf8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rx_Header, Rx_data)== HAL_OK){
 8001d00:	4ba0      	ldr	r3, [pc, #640]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001d02:	4aa1      	ldr	r2, [pc, #644]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001d04:	2100      	movs	r1, #0
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f006 fce6 	bl	80086d8 <HAL_CAN_GetRxMessage>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 8129 	bne.w	8001f66 <HAL_CAN_RxFifo0MsgPendingCallback+0x26e>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001d14:	2110      	movs	r1, #16
 8001d16:	489d      	ldr	r0, [pc, #628]	; (8001f8c <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001d18:	f007 fcdd 	bl	80096d6 <HAL_GPIO_TogglePin>
		int i;

		if(Rx_Header.StdId==0x0E2){	//Handshaking
 8001d1c:	4b9a      	ldr	r3, [pc, #616]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2be2      	cmp	r3, #226	; 0xe2
 8001d22:	f040 8086 	bne.w	8001e32 <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
			if(Rx_data[6]==0x55 && identified==0){
 8001d26:	4b97      	ldr	r3, [pc, #604]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001d28:	799b      	ldrb	r3, [r3, #6]
 8001d2a:	2b55      	cmp	r3, #85	; 0x55
 8001d2c:	d155      	bne.n	8001dda <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
 8001d2e:	4b98      	ldr	r3, [pc, #608]	; (8001f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d151      	bne.n	8001dda <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
				identified = 1;
 8001d36:	4b96      	ldr	r3, [pc, #600]	; (8001f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
				Tx_Header.DLC = 8;
 8001d3c:	4b95      	ldr	r3, [pc, #596]	; (8001f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001d3e:	2208      	movs	r2, #8
 8001d40:	611a      	str	r2, [r3, #16]
				Tx_data[6] = 0xAA;
 8001d42:	4b95      	ldr	r3, [pc, #596]	; (8001f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001d44:	22aa      	movs	r2, #170	; 0xaa
 8001d46:	719a      	strb	r2, [r3, #6]

				while(!HAL_CAN_GetTxMailboxesFreeLevel(hcan));
 8001d48:	bf00      	nop
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f006 fc90 	bl	8008670 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f9      	beq.n	8001d4a <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
				if(HAL_CAN_AddTxMessage(hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8001d56:	4b91      	ldr	r3, [pc, #580]	; (8001f9c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001d58:	4a8f      	ldr	r2, [pc, #572]	; (8001f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001d5a:	498e      	ldr	r1, [pc, #568]	; (8001f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f006 fb69 	bl	8008434 <HAL_CAN_AddTxMessage>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 8001d68:	f001 f99e 	bl	80030a8 <Error_Handler>
				i=1000;
 8001d6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d70:	60fb      	str	r3, [r7, #12]
				while(i>1) i--;
 8001d72:	e002      	b.n	8001d7a <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	dcf9      	bgt.n	8001d74 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>

				if(Pack_SOC < 100 && flag_Check_SOCawal != 1) {
 8001d80:	4b87      	ldr	r3, [pc, #540]	; (8001fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4987      	ldr	r1, [pc, #540]	; (8001fa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f97a 	bl	8001080 <__aeabi_fcmplt>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00d      	beq.n	8001dae <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
 8001d92:	4b85      	ldr	r3, [pc, #532]	; (8001fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d009      	beq.n	8001dae <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
					Ready_toCharge = 1;
 8001d9a:	4b84      	ldr	r3, [pc, #528]	; (8001fac <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
					flag_Check_SOCawal = 1;
 8001da0:	4b81      	ldr	r3, [pc, #516]	; (8001fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
					oke=9;
 8001da6:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001da8:	2209      	movs	r2, #9
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e015      	b.n	8001dda <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
				}
				else if(Pack_SOC >= 100 && flag_Check_SOCawal != 1) {
 8001dae:	4b7c      	ldr	r3, [pc, #496]	; (8001fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	497c      	ldr	r1, [pc, #496]	; (8001fa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff f977 	bl	80010a8 <__aeabi_fcmpge>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00c      	beq.n	8001dda <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
 8001dc0:	4b79      	ldr	r3, [pc, #484]	; (8001fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d008      	beq.n	8001dda <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
					Ready_toCharge = 0;
 8001dc8:	4b78      	ldr	r3, [pc, #480]	; (8001fac <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
					flag_Check_SOCawal = 1;
 8001dce:	4b76      	ldr	r3, [pc, #472]	; (8001fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
					oke=8;
 8001dd4:	4b76      	ldr	r3, [pc, #472]	; (8001fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	601a      	str	r2, [r3, #0]
				}

			}

			if(Rx_data[6]==0xAA && identified==1){
 8001dda:	4b6a      	ldr	r3, [pc, #424]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001ddc:	799b      	ldrb	r3, [r3, #6]
 8001dde:	2baa      	cmp	r3, #170	; 0xaa
 8001de0:	d127      	bne.n	8001e32 <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 8001de2:	4b6b      	ldr	r3, [pc, #428]	; (8001f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d123      	bne.n	8001e32 <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>

				if(Ready_toCharge == 0 && flag_Check_SOCawal != 0){
 8001dea:	4b70      	ldr	r3, [pc, #448]	; (8001fac <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d115      	bne.n	8001e1e <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
 8001df2:	4b6d      	ldr	r3, [pc, #436]	; (8001fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d011      	beq.n	8001e1e <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
					if(Pack_SOC < 70){
 8001dfa:	4b69      	ldr	r3, [pc, #420]	; (8001fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	496d      	ldr	r1, [pc, #436]	; (8001fb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f93d 	bl	8001080 <__aeabi_fcmplt>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
						Ready_toCharge = 1;
 8001e0c:	4b67      	ldr	r3, [pc, #412]	; (8001fac <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
						oke=10;
 8001e12:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001e14:	220a      	movs	r2, #10
 8001e16:	601a      	str	r2, [r3, #0]
					}
					oke=12;
 8001e18:	4b65      	ldr	r3, [pc, #404]	; (8001fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	601a      	str	r2, [r3, #0]
				}
				Handshaking = 1;
 8001e1e:	4b66      	ldr	r3, [pc, #408]	; (8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
				if(Ready_toCharge == 1) BMS_mode = 2;
 8001e24:	4b61      	ldr	r3, [pc, #388]	; (8001fac <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d102      	bne.n	8001e32 <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 8001e2c:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8001e2e:	2202      	movs	r2, #2
 8001e30:	701a      	strb	r2, [r3, #0]
			}
		}

		if(Rx_Header.StdId==0x1B2 ){	//activate BMS
 8001e32:	4b55      	ldr	r3, [pc, #340]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
 8001e3a:	d153      	bne.n	8001ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>

			if((Rx_data[0]&0x01) == 1)  //without handshake
 8001e3c:	4b51      	ldr	r3, [pc, #324]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d017      	beq.n	8001e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
			{
				oke=3;
 8001e48:	4b59      	ldr	r3, [pc, #356]	; (8001fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	601a      	str	r2, [r3, #0]
				flag_start_shutdown=1;
 8001e4e:	4b5c      	ldr	r3, [pc, #368]	; (8001fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
				BMS_mode=(Rx_data[0]>>1)&0x03;
 8001e54:	4b4b      	ldr	r3, [pc, #300]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4b56      	ldr	r3, [pc, #344]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8001e64:	701a      	strb	r2, [r3, #0]
				Handshaking=1; identified=1;
 8001e66:	4b54      	ldr	r3, [pc, #336]	; (8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	4b48      	ldr	r3, [pc, #288]	; (8001f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
				flag_bypass = 1;
 8001e72:	4b54      	ldr	r3, [pc, #336]	; (8001fc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
			}

			if((Rx_data[7]&0x01) == 1 && Rx_data[1]==0 && Handshaking == 0) //with hs
 8001e78:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001e7a:	79db      	ldrb	r3, [r3, #7]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d010      	beq.n	8001ea6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ae>
 8001e84:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001e86:	785b      	ldrb	r3, [r3, #1]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10c      	bne.n	8001ea6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ae>
 8001e8c:	4b4a      	ldr	r3, [pc, #296]	; (8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d108      	bne.n	8001ea6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ae>
			{
				flag_start_shutdown=1;
 8001e94:	4b4a      	ldr	r3, [pc, #296]	; (8001fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
				BMS_mode=0;
 8001e9a:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
				oke=1;
 8001ea0:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
			}
			if((Rx_data[0]&0x01) == 0 && flag_bypass == 1){
 8001ea6:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d118      	bne.n	8001ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
 8001eb2:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d114      	bne.n	8001ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
				Rx_Header.StdId = 0;
 8001eba:	4b33      	ldr	r3, [pc, #204]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
				Handshaking=0;
 8001ec0:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
				identified=0;
 8001ec6:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
				flag_start_shutdown=0;
 8001ecc:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
				BMS_mode=0;
 8001ed2:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
				BATT_State=STATE_STANDBY;
 8001ed8:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
				flag_bypass = 0;
 8001ede:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
			}
		}

		if(Rx_Header.ExtId == ((0x1B2<<20)|UNIQUE_Code) && Handshaking == 1 ){
 8001ee4:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a38      	ldr	r2, [pc, #224]	; (8001fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d13b      	bne.n	8001f66 <HAL_CAN_RxFifo0MsgPendingCallback+0x26e>
 8001eee:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d137      	bne.n	8001f66 <HAL_CAN_RxFifo0MsgPendingCallback+0x26e>
			if(Rx_data[0]==0 && Rx_data[7]==0) {
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d118      	bne.n	8001f30 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001f00:	79db      	ldrb	r3, [r3, #7]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d114      	bne.n	8001f30 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>
				oke=2;
 8001f06:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001f08:	2202      	movs	r2, #2
 8001f0a:	601a      	str	r2, [r3, #0]
				Rx_Header.ExtId = 0;
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	605a      	str	r2, [r3, #4]
				Handshaking=0;
 8001f12:	4b29      	ldr	r3, [pc, #164]	; (8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
				identified=0;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
				flag_start_shutdown=0;
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
				BMS_mode=0;
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
				BATT_State=STATE_STANDBY;
 8001f2a:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
			}

			Rx_Header.StdId=0;
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
			Clear_Trip_overcurrentdischarge=(Rx_data[0]>>3)&&0x01;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	08db      	lsrs	r3, r3, #3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	bf14      	ite	ne
 8001f42:	2301      	movne	r3, #1
 8001f44:	2300      	moveq	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 8001f4c:	701a      	strb	r2, [r3, #0]
			Clear_Trip_undervoltage=(Rx_data[0]>>4)&&0x01;
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf14      	ite	ne
 8001f5a:	2301      	movne	r3, #1
 8001f5c:	2300      	moveq	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 8001f64:	701a      	strb	r2, [r3, #0]
		}
	}
	Rx_Header.ExtId = 0;
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
	Rx_Header.StdId = 0;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
	memset(Rx_data, 0, 8*sizeof(Rx_data[0]));
 8001f72:	2208      	movs	r2, #8
 8001f74:	2100      	movs	r1, #0
 8001f76:	4803      	ldr	r0, [pc, #12]	; (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001f78:	f009 fb9a 	bl	800b6b0 <memset>
}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	200006d4 	.word	0x200006d4
 8001f88:	2000075c 	.word	0x2000075c
 8001f8c:	40011000 	.word	0x40011000
 8001f90:	20000286 	.word	0x20000286
 8001f94:	20000794 	.word	0x20000794
 8001f98:	200006cc 	.word	0x200006cc
 8001f9c:	20000778 	.word	0x20000778
 8001fa0:	20000be4 	.word	0x20000be4
 8001fa4:	42c80000 	.word	0x42c80000
 8001fa8:	20000289 	.word	0x20000289
 8001fac:	20000288 	.word	0x20000288
 8001fb0:	20000280 	.word	0x20000280
 8001fb4:	428c0000 	.word	0x428c0000
 8001fb8:	20000285 	.word	0x20000285
 8001fbc:	20000be0 	.word	0x20000be0
 8001fc0:	20000994 	.word	0x20000994
 8001fc4:	2000028a 	.word	0x2000028a
 8001fc8:	200009b0 	.word	0x200009b0
 8001fcc:	1b2bbbb1 	.word	0x1b2bbbb1
 8001fd0:	200010a0 	.word	0x200010a0
 8001fd4:	20001104 	.word	0x20001104

08001fd8 <BMS_CAN_Config>:


void BMS_CAN_Config()
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
	/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001fea:	2300      	movs	r3, #0
 8001fec:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001ffe:	2301      	movs	r3, #1
 8002000:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8002002:	230e      	movs	r3, #14
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) Error_Handler();
 8002006:	463b      	mov	r3, r7
 8002008:	4619      	mov	r1, r3
 800200a:	4810      	ldr	r0, [pc, #64]	; (800204c <BMS_CAN_Config+0x74>)
 800200c:	f006 f905 	bl	800821a <HAL_CAN_ConfigFilter>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <BMS_CAN_Config+0x42>
 8002016:	f001 f847 	bl	80030a8 <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan) != HAL_OK) Error_Handler();
 800201a:	480c      	ldr	r0, [pc, #48]	; (800204c <BMS_CAN_Config+0x74>)
 800201c:	f006 f9c6 	bl	80083ac <HAL_CAN_Start>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <BMS_CAN_Config+0x52>
 8002026:	f001 f83f 	bl	80030a8 <Error_Handler>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800202a:	2102      	movs	r1, #2
 800202c:	4807      	ldr	r0, [pc, #28]	; (800204c <BMS_CAN_Config+0x74>)
 800202e:	f006 fc64 	bl	80088fa <HAL_CAN_ActivateNotification>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <BMS_CAN_Config+0x78>)
 8002034:	2200      	movs	r2, #0
 8002036:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <BMS_CAN_Config+0x78>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_EXT;
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <BMS_CAN_Config+0x78>)
 8002040:	2204      	movs	r2, #4
 8002042:	609a      	str	r2, [r3, #8]
}
 8002044:	bf00      	nop
 8002046:	3728      	adds	r7, #40	; 0x28
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2000082c 	.word	0x2000082c
 8002050:	20000794 	.word	0x20000794

08002054 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002064:	4b3d      	ldr	r3, [pc, #244]	; (800215c <MX_ADC1_Init+0x108>)
 8002066:	4a3e      	ldr	r2, [pc, #248]	; (8002160 <MX_ADC1_Init+0x10c>)
 8002068:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800206a:	4b3c      	ldr	r3, [pc, #240]	; (800215c <MX_ADC1_Init+0x108>)
 800206c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002070:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002072:	4b3a      	ldr	r3, [pc, #232]	; (800215c <MX_ADC1_Init+0x108>)
 8002074:	2201      	movs	r2, #1
 8002076:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002078:	4b38      	ldr	r3, [pc, #224]	; (800215c <MX_ADC1_Init+0x108>)
 800207a:	2200      	movs	r2, #0
 800207c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800207e:	4b37      	ldr	r3, [pc, #220]	; (800215c <MX_ADC1_Init+0x108>)
 8002080:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002084:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002086:	4b35      	ldr	r3, [pc, #212]	; (800215c <MX_ADC1_Init+0x108>)
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 800208c:	4b33      	ldr	r3, [pc, #204]	; (800215c <MX_ADC1_Init+0x108>)
 800208e:	2206      	movs	r2, #6
 8002090:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002092:	4832      	ldr	r0, [pc, #200]	; (800215c <MX_ADC1_Init+0x108>)
 8002094:	f005 fc0a 	bl	80078ac <HAL_ADC_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800209e:	f001 f803 	bl	80030a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80020aa:	2307      	movs	r3, #7
 80020ac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	482a      	ldr	r0, [pc, #168]	; (800215c <MX_ADC1_Init+0x108>)
 80020b4:	f005 fdcc 	bl	8007c50 <HAL_ADC_ConfigChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80020be:	f000 fff3 	bl	80030a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80020c2:	2305      	movs	r3, #5
 80020c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020c6:	2302      	movs	r3, #2
 80020c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4823      	ldr	r0, [pc, #140]	; (800215c <MX_ADC1_Init+0x108>)
 80020d0:	f005 fdbe 	bl	8007c50 <HAL_ADC_ConfigChannel>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80020da:	f000 ffe5 	bl	80030a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020de:	2301      	movs	r3, #1
 80020e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80020e2:	2303      	movs	r3, #3
 80020e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	4619      	mov	r1, r3
 80020ea:	481c      	ldr	r0, [pc, #112]	; (800215c <MX_ADC1_Init+0x108>)
 80020ec:	f005 fdb0 	bl	8007c50 <HAL_ADC_ConfigChannel>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80020f6:	f000 ffd7 	bl	80030a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80020fa:	2302      	movs	r3, #2
 80020fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80020fe:	2304      	movs	r3, #4
 8002100:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	4619      	mov	r1, r3
 8002106:	4815      	ldr	r0, [pc, #84]	; (800215c <MX_ADC1_Init+0x108>)
 8002108:	f005 fda2 	bl	8007c50 <HAL_ADC_ConfigChannel>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002112:	f000 ffc9 	bl	80030a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002116:	2303      	movs	r3, #3
 8002118:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800211a:	2305      	movs	r3, #5
 800211c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800211e:	2306      	movs	r3, #6
 8002120:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	4619      	mov	r1, r3
 8002126:	480d      	ldr	r0, [pc, #52]	; (800215c <MX_ADC1_Init+0x108>)
 8002128:	f005 fd92 	bl	8007c50 <HAL_ADC_ConfigChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8002132:	f000 ffb9 	bl	80030a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002136:	2304      	movs	r3, #4
 8002138:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800213a:	2306      	movs	r3, #6
 800213c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	4619      	mov	r1, r3
 8002142:	4806      	ldr	r0, [pc, #24]	; (800215c <MX_ADC1_Init+0x108>)
 8002144:	f005 fd84 	bl	8007c50 <HAL_ADC_ConfigChannel>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800214e:	f000 ffab 	bl	80030a8 <Error_Handler>
  }

}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200007b8 	.word	0x200007b8
 8002160:	40012400 	.word	0x40012400

08002164 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a28      	ldr	r2, [pc, #160]	; (8002220 <HAL_ADC_MspInit+0xbc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d149      	bne.n	8002218 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002184:	4b27      	ldr	r3, [pc, #156]	; (8002224 <HAL_ADC_MspInit+0xc0>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a26      	ldr	r2, [pc, #152]	; (8002224 <HAL_ADC_MspInit+0xc0>)
 800218a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_ADC_MspInit+0xc0>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_ADC_MspInit+0xc0>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_ADC_MspInit+0xc0>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_ADC_MspInit+0xc0>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80021b4:	233f      	movs	r3, #63	; 0x3f
 80021b6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b8:	2303      	movs	r3, #3
 80021ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	4619      	mov	r1, r3
 80021c2:	4819      	ldr	r0, [pc, #100]	; (8002228 <HAL_ADC_MspInit+0xc4>)
 80021c4:	f007 f8fe 	bl	80093c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021ca:	4a19      	ldr	r2, [pc, #100]	; (8002230 <HAL_ADC_MspInit+0xcc>)
 80021cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d4:	4b15      	ldr	r3, [pc, #84]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021dc:	2280      	movs	r2, #128	; 0x80
 80021de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021f2:	2220      	movs	r2, #32
 80021f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021f6:	4b0d      	ldr	r3, [pc, #52]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021fc:	480b      	ldr	r0, [pc, #44]	; (800222c <HAL_ADC_MspInit+0xc8>)
 80021fe:	f006 fecd 	bl	8008f9c <HAL_DMA_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002208:	f000 ff4e 	bl	80030a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <HAL_ADC_MspInit+0xc8>)
 8002210:	621a      	str	r2, [r3, #32]
 8002212:	4a06      	ldr	r2, [pc, #24]	; (800222c <HAL_ADC_MspInit+0xc8>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40012400 	.word	0x40012400
 8002224:	40021000 	.word	0x40021000
 8002228:	40010800 	.word	0x40010800
 800222c:	200007e8 	.word	0x200007e8
 8002230:	40020008 	.word	0x40020008

08002234 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <MX_CAN_Init+0x64>)
 800223a:	4a18      	ldr	r2, [pc, #96]	; (800229c <MX_CAN_Init+0x68>)
 800223c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <MX_CAN_Init+0x64>)
 8002240:	2208      	movs	r2, #8
 8002242:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <MX_CAN_Init+0x64>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <MX_CAN_Init+0x64>)
 800224c:	2200      	movs	r2, #0
 800224e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <MX_CAN_Init+0x64>)
 8002252:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002256:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002258:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <MX_CAN_Init+0x64>)
 800225a:	2200      	movs	r2, #0
 800225c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800225e:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <MX_CAN_Init+0x64>)
 8002260:	2200      	movs	r2, #0
 8002262:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <MX_CAN_Init+0x64>)
 8002266:	2201      	movs	r2, #1
 8002268:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <MX_CAN_Init+0x64>)
 800226c:	2200      	movs	r2, #0
 800226e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <MX_CAN_Init+0x64>)
 8002272:	2200      	movs	r2, #0
 8002274:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <MX_CAN_Init+0x64>)
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <MX_CAN_Init+0x64>)
 800227e:	2200      	movs	r2, #0
 8002280:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002282:	4805      	ldr	r0, [pc, #20]	; (8002298 <MX_CAN_Init+0x64>)
 8002284:	f005 fece 	bl	8008024 <HAL_CAN_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800228e:	f000 ff0b 	bl	80030a8 <Error_Handler>
  }

}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	2000082c 	.word	0x2000082c
 800229c:	40006400 	.word	0x40006400

080022a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a29      	ldr	r2, [pc, #164]	; (8002360 <HAL_CAN_MspInit+0xc0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d14b      	bne.n	8002358 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80022c0:	4b28      	ldr	r3, [pc, #160]	; (8002364 <HAL_CAN_MspInit+0xc4>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	4a27      	ldr	r2, [pc, #156]	; (8002364 <HAL_CAN_MspInit+0xc4>)
 80022c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ca:	61d3      	str	r3, [r2, #28]
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <HAL_CAN_MspInit+0xc4>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <HAL_CAN_MspInit+0xc4>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	4a21      	ldr	r2, [pc, #132]	; (8002364 <HAL_CAN_MspInit+0xc4>)
 80022de:	f043 0308 	orr.w	r3, r3, #8
 80022e2:	6193      	str	r3, [r2, #24]
 80022e4:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <HAL_CAN_MspInit+0xc4>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	4619      	mov	r1, r3
 8002304:	4818      	ldr	r0, [pc, #96]	; (8002368 <HAL_CAN_MspInit+0xc8>)
 8002306:	f007 f85d 	bl	80093c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800230a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800230e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	4812      	ldr	r0, [pc, #72]	; (8002368 <HAL_CAN_MspInit+0xc8>)
 8002320:	f007 f850 	bl	80093c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_CAN_MspInit+0xcc>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <HAL_CAN_MspInit+0xcc>)
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	2014      	movs	r0, #20
 800234e:	f006 fdee 	bl	8008f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002352:	2014      	movs	r0, #20
 8002354:	f006 fe07 	bl	8008f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002358:	bf00      	nop
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40006400 	.word	0x40006400
 8002364:	40021000 	.word	0x40021000
 8002368:	40010c00 	.word	0x40010c00
 800236c:	40010000 	.word	0x40010000

08002370 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <MX_DMA_Init+0x38>)
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <MX_DMA_Init+0x38>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6153      	str	r3, [r2, #20]
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <MX_DMA_Init+0x38>)
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	200b      	movs	r0, #11
 8002394:	f006 fdcb 	bl	8008f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002398:	200b      	movs	r0, #11
 800239a:	f006 fde4 	bl	8008f66 <HAL_NVIC_EnableIRQ>

}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000

080023ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c0:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	4a3e      	ldr	r2, [pc, #248]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023c6:	f043 0310 	orr.w	r3, r3, #16
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	4b3c      	ldr	r3, [pc, #240]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a38      	ldr	r2, [pc, #224]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	6193      	str	r3, [r2, #24]
 80023e4:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f0:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a32      	ldr	r2, [pc, #200]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023f6:	f043 0308 	orr.w	r3, r3, #8
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <MX_GPIO_Init+0x114>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZ_Pin|LED_Pin|GPIO_PIN_5|BAT_CUT_N_Pin, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	f44f 710d 	mov.w	r1, #564	; 0x234
 800240e:	482d      	ldr	r0, [pc, #180]	; (80024c4 <MX_GPIO_Init+0x118>)
 8002410:	f007 f949 	bl	80096a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_SPI1_Pin|GPIO_PIN_1|MEM_WP_Pin, GPIO_PIN_RESET);
 8002414:	2200      	movs	r2, #0
 8002416:	f241 0103 	movw	r1, #4099	; 0x1003
 800241a:	482b      	ldr	r0, [pc, #172]	; (80024c8 <MX_GPIO_Init+0x11c>)
 800241c:	f007 f943 	bl	80096a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002426:	4829      	ldr	r0, [pc, #164]	; (80024cc <MX_GPIO_Init+0x120>)
 8002428:	f007 f93d 	bl	80096a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIP1_Pin|DIP2_Pin;
 800242c:	2303      	movs	r3, #3
 800242e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002434:	2302      	movs	r3, #2
 8002436:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002438:	f107 0310 	add.w	r3, r7, #16
 800243c:	4619      	mov	r1, r3
 800243e:	4821      	ldr	r0, [pc, #132]	; (80024c4 <MX_GPIO_Init+0x118>)
 8002440:	f006 ffc0 	bl	80093c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PC5 PCPin */
  GPIO_InitStruct.Pin = BUZZ_Pin|LED_Pin|GPIO_PIN_5|BAT_CUT_N_Pin;
 8002444:	f44f 730d 	mov.w	r3, #564	; 0x234
 8002448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244a:	2301      	movs	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2302      	movs	r3, #2
 8002454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002456:	f107 0310 	add.w	r3, r7, #16
 800245a:	4619      	mov	r1, r3
 800245c:	4819      	ldr	r0, [pc, #100]	; (80024c4 <MX_GPIO_Init+0x118>)
 800245e:	f006 ffb1 	bl	80093c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB1 PBPin */
  GPIO_InitStruct.Pin = CS_SPI1_Pin|GPIO_PIN_1|MEM_WP_Pin;
 8002462:	f241 0303 	movw	r3, #4099	; 0x1003
 8002466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002468:	2301      	movs	r3, #1
 800246a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2302      	movs	r3, #2
 8002472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4619      	mov	r1, r3
 800247a:	4813      	ldr	r0, [pc, #76]	; (80024c8 <MX_GPIO_Init+0x11c>)
 800247c:	f006 ffa2 	bl	80093c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002480:	2304      	movs	r3, #4
 8002482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 0310 	add.w	r3, r7, #16
 8002490:	4619      	mov	r1, r3
 8002492:	480d      	ldr	r0, [pc, #52]	; (80024c8 <MX_GPIO_Init+0x11c>)
 8002494:	f006 ff96 	bl	80093c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BAT_CUT_P_Pin;
 8002498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800249c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249e:	2301      	movs	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAT_CUT_P_GPIO_Port, &GPIO_InitStruct);
 80024aa:	f107 0310 	add.w	r3, r7, #16
 80024ae:	4619      	mov	r1, r3
 80024b0:	4806      	ldr	r0, [pc, #24]	; (80024cc <MX_GPIO_Init+0x120>)
 80024b2:	f006 ff87 	bl	80093c4 <HAL_GPIO_Init>

}
 80024b6:	bf00      	nop
 80024b8:	3720      	adds	r7, #32
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40011000 	.word	0x40011000
 80024c8:	40010c00 	.word	0x40010c00
 80024cc:	40010800 	.word	0x40010800

080024d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <MX_I2C1_Init+0x50>)
 80024d6:	4a13      	ldr	r2, [pc, #76]	; (8002524 <MX_I2C1_Init+0x54>)
 80024d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <MX_I2C1_Init+0x50>)
 80024dc:	4a12      	ldr	r2, [pc, #72]	; (8002528 <MX_I2C1_Init+0x58>)
 80024de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <MX_I2C1_Init+0x50>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <MX_I2C1_Init+0x50>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <MX_I2C1_Init+0x50>)
 80024ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <MX_I2C1_Init+0x50>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <MX_I2C1_Init+0x50>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <MX_I2C1_Init+0x50>)
 8002502:	2200      	movs	r2, #0
 8002504:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <MX_I2C1_Init+0x50>)
 8002508:	2200      	movs	r2, #0
 800250a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <MX_I2C1_Init+0x50>)
 800250e:	f007 f8fb 	bl	8009708 <HAL_I2C_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002518:	f000 fdc6 	bl	80030a8 <Error_Handler>
  }

}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000854 	.word	0x20000854
 8002524:	40005400 	.word	0x40005400
 8002528:	00061a80 	.word	0x00061a80

0800252c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8002530:	4b12      	ldr	r3, [pc, #72]	; (800257c <MX_I2C2_Init+0x50>)
 8002532:	4a13      	ldr	r2, [pc, #76]	; (8002580 <MX_I2C2_Init+0x54>)
 8002534:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <MX_I2C2_Init+0x50>)
 8002538:	4a12      	ldr	r2, [pc, #72]	; (8002584 <MX_I2C2_Init+0x58>)
 800253a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <MX_I2C2_Init+0x50>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_I2C2_Init+0x50>)
 8002544:	2200      	movs	r2, #0
 8002546:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <MX_I2C2_Init+0x50>)
 800254a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800254e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002550:	4b0a      	ldr	r3, [pc, #40]	; (800257c <MX_I2C2_Init+0x50>)
 8002552:	2200      	movs	r2, #0
 8002554:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_I2C2_Init+0x50>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <MX_I2C2_Init+0x50>)
 800255e:	2200      	movs	r2, #0
 8002560:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_I2C2_Init+0x50>)
 8002564:	2200      	movs	r2, #0
 8002566:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002568:	4804      	ldr	r0, [pc, #16]	; (800257c <MX_I2C2_Init+0x50>)
 800256a:	f007 f8cd 	bl	8009708 <HAL_I2C_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002574:	f000 fd98 	bl	80030a8 <Error_Handler>
  }

}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	200008a8 	.word	0x200008a8
 8002580:	40005800 	.word	0x40005800
 8002584:	000186a0 	.word	0x000186a0

08002588 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 0318 	add.w	r3, r7, #24
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2b      	ldr	r2, [pc, #172]	; (8002650 <HAL_I2C_MspInit+0xc8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d124      	bne.n	80025f2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a8:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4a29      	ldr	r2, [pc, #164]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	6193      	str	r3, [r2, #24]
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025c0:	23c0      	movs	r3, #192	; 0xc0
 80025c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c4:	2312      	movs	r3, #18
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025cc:	f107 0318 	add.w	r3, r7, #24
 80025d0:	4619      	mov	r1, r3
 80025d2:	4821      	ldr	r0, [pc, #132]	; (8002658 <HAL_I2C_MspInit+0xd0>)
 80025d4:	f006 fef6 	bl	80093c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 80025de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025e2:	61d3      	str	r3, [r2, #28]
 80025e4:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80025f0:	e029      	b.n	8002646 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_I2C_MspInit+0xd4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d124      	bne.n	8002646 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a14      	ldr	r2, [pc, #80]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002614:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800261a:	2312      	movs	r3, #18
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800261e:	2303      	movs	r3, #3
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002622:	f107 0318 	add.w	r3, r7, #24
 8002626:	4619      	mov	r1, r3
 8002628:	480b      	ldr	r0, [pc, #44]	; (8002658 <HAL_I2C_MspInit+0xd0>)
 800262a:	f006 fecb 	bl	80093c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4a08      	ldr	r2, [pc, #32]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 8002634:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002638:	61d3      	str	r3, [r2, #28]
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
}
 8002646:	bf00      	nop
 8002648:	3728      	adds	r7, #40	; 0x28
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40005400 	.word	0x40005400
 8002654:	40021000 	.word	0x40021000
 8002658:	40010c00 	.word	0x40010c00
 800265c:	40005800 	.word	0x40005800

08002660 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <MX_IWDG_Init+0x2c>)
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <MX_IWDG_Init+0x30>)
 8002668:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <MX_IWDG_Init+0x2c>)
 800266c:	2205      	movs	r2, #5
 800266e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <MX_IWDG_Init+0x2c>)
 8002672:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002676:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002678:	4804      	ldr	r0, [pc, #16]	; (800268c <MX_IWDG_Init+0x2c>)
 800267a:	f007 fd89 	bl	800a190 <HAL_IWDG_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002684:	f000 fd10 	bl	80030a8 <Error_Handler>
  }

}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200008fc 	.word	0x200008fc
 8002690:	40003000 	.word	0x40003000
 8002694:	00000000 	.word	0x00000000

08002698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800269c:	f005 f882 	bl	80077a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026a0:	f000 f8f4 	bl	800288c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //BMS_CAN_Config();
   HAL_FLASH_Unlock();
 80026a4:	f006 fe68 	bl	8009378 <HAL_FLASH_Unlock>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026a8:	f7ff fe80 	bl	80023ac <MX_GPIO_Init>
  MX_DMA_Init();
 80026ac:	f7ff fe60 	bl	8002370 <MX_DMA_Init>
  MX_ADC1_Init();
 80026b0:	f7ff fcd0 	bl	8002054 <MX_ADC1_Init>
  MX_CAN_Init();
 80026b4:	f7ff fdbe 	bl	8002234 <MX_CAN_Init>
  MX_I2C1_Init();
 80026b8:	f7ff ff0a 	bl	80024d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80026bc:	f7ff ff36 	bl	800252c <MX_I2C2_Init>
  MX_SPI1_Init();
 80026c0:	f001 fdfa 	bl	80042b8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80026c4:	f004 ff58 	bl	8007578 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80026c8:	f004 ff80 	bl	80075cc <MX_USART3_UART_Init>
  MX_IWDG_Init();
 80026cc:	f7ff ffc8 	bl	8002660 <MX_IWDG_Init>
  MX_TIM2_Init();
 80026d0:	f004 fe78 	bl	80073c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80026d4:	f004 fec2 	bl	800745c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //USART3 untuk RS485, tidak digunakan untuk BOARD v1.

  ltc6812_GPIO_Config();
 80026d8:	f000 fcec 	bl	80030b4 <ltc6812_GPIO_Config>
  ltc6812_SPIInit();
 80026dc:	f000 fd46 	bl	800316c <ltc6812_SPIInit>

  HAL_Delay(10);
 80026e0:	200a      	movs	r0, #10
 80026e2:	f005 f8c1 	bl	8007868 <HAL_Delay>
  read_v_15cell(vcell_15data_digi, vcell_15data);
 80026e6:	495c      	ldr	r1, [pc, #368]	; (8002858 <main+0x1c0>)
 80026e8:	485c      	ldr	r0, [pc, #368]	; (800285c <main+0x1c4>)
 80026ea:	f000 ff65 	bl	80035b8 <read_v_15cell>
  for(ij=0,v_cell_tot=0;ij<15;ij++)
 80026ee:	4b5c      	ldr	r3, [pc, #368]	; (8002860 <main+0x1c8>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	4b5b      	ldr	r3, [pc, #364]	; (8002864 <main+0x1cc>)
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e013      	b.n	8002726 <main+0x8e>
  {
 	v_cell_tot+=vcell_15data[ij];
 80026fe:	4b58      	ldr	r3, [pc, #352]	; (8002860 <main+0x1c8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a55      	ldr	r2, [pc, #340]	; (8002858 <main+0x1c0>)
 8002704:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002708:	4b56      	ldr	r3, [pc, #344]	; (8002864 <main+0x1cc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4619      	mov	r1, r3
 800270e:	4610      	mov	r0, r2
 8002710:	f7fe fa10 	bl	8000b34 <__addsf3>
 8002714:	4603      	mov	r3, r0
 8002716:	461a      	mov	r2, r3
 8002718:	4b52      	ldr	r3, [pc, #328]	; (8002864 <main+0x1cc>)
 800271a:	601a      	str	r2, [r3, #0]
  for(ij=0,v_cell_tot=0;ij<15;ij++)
 800271c:	4b50      	ldr	r3, [pc, #320]	; (8002860 <main+0x1c8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3301      	adds	r3, #1
 8002722:	4a4f      	ldr	r2, [pc, #316]	; (8002860 <main+0x1c8>)
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b4e      	ldr	r3, [pc, #312]	; (8002860 <main+0x1c8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b0e      	cmp	r3, #14
 800272c:	dde7      	ble.n	80026fe <main+0x66>
  }
  HAL_Delay(10);
 800272e:	200a      	movs	r0, #10
 8002730:	f005 f89a 	bl	8007868 <HAL_Delay>

  BMS_CAN_Config();
 8002734:	f7ff fc50 	bl	8001fd8 <BMS_CAN_Config>

  BMS_ON_InitBeep();
 8002738:	f000 f902 	bl	8002940 <BMS_ON_InitBeep>

  BATT_Start_Up=1;
 800273c:	4b4a      	ldr	r3, [pc, #296]	; (8002868 <main+0x1d0>)
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]

  HAL_Delay(1000);
 8002742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002746:	f005 f88f 	bl	8007868 <HAL_Delay>

  flag_start_shutdown=0;
 800274a:	4b48      	ldr	r3, [pc, #288]	; (800286c <main+0x1d4>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(DIP1 && !DIP2)			BMS_ScreenMode_ForceBalance();		//Mode Force Balancing
 8002750:	2101      	movs	r1, #1
 8002752:	4847      	ldr	r0, [pc, #284]	; (8002870 <main+0x1d8>)
 8002754:	f006 ff90 	bl	8009678 <HAL_GPIO_ReadPin>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <main+0xda>
 800275e:	2102      	movs	r1, #2
 8002760:	4843      	ldr	r0, [pc, #268]	; (8002870 <main+0x1d8>)
 8002762:	f006 ff89 	bl	8009678 <HAL_GPIO_ReadPin>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <main+0xda>
 800276c:	f000 fc14 	bl	8002f98 <BMS_ScreenMode_ForceBalance>
 8002770:	e023      	b.n	80027ba <main+0x122>
	  else if(!DIP1 && DIP2) 	BMS_ScreenMode_Locked_Ship();		//Mode Shipping
 8002772:	2101      	movs	r1, #1
 8002774:	483e      	ldr	r0, [pc, #248]	; (8002870 <main+0x1d8>)
 8002776:	f006 ff7f 	bl	8009678 <HAL_GPIO_ReadPin>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d109      	bne.n	8002794 <main+0xfc>
 8002780:	2102      	movs	r1, #2
 8002782:	483b      	ldr	r0, [pc, #236]	; (8002870 <main+0x1d8>)
 8002784:	f006 ff78 	bl	8009678 <HAL_GPIO_ReadPin>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <main+0xfc>
 800278e:	f000 fbbd 	bl	8002f0c <BMS_ScreenMode_Locked_Ship>
 8002792:	e012      	b.n	80027ba <main+0x122>
	  else if(DIP1 && DIP2)		BMS_ScreenMode_RUN();				//MODE RUN
 8002794:	2101      	movs	r1, #1
 8002796:	4836      	ldr	r0, [pc, #216]	; (8002870 <main+0x1d8>)
 8002798:	f006 ff6e 	bl	8009678 <HAL_GPIO_ReadPin>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <main+0x11e>
 80027a2:	2102      	movs	r1, #2
 80027a4:	4832      	ldr	r0, [pc, #200]	; (8002870 <main+0x1d8>)
 80027a6:	f006 ff67 	bl	8009678 <HAL_GPIO_ReadPin>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <main+0x11e>
 80027b0:	f000 f9a0 	bl	8002af4 <BMS_ScreenMode_RUN>
 80027b4:	e001      	b.n	80027ba <main+0x122>
	  else						BMS_ScreenMode_Standby();			//Mode Standby
 80027b6:	f000 f96d 	bl	8002a94 <BMS_ScreenMode_Standby>

	  HAL_IWDG_Refresh(&hiwdg);
 80027ba:	482e      	ldr	r0, [pc, #184]	; (8002874 <main+0x1dc>)
 80027bc:	f007 fd21 	bl	800a202 <HAL_IWDG_Refresh>
	  read_v_15cell(vcell_15data_digi, vcell_15data);
 80027c0:	4925      	ldr	r1, [pc, #148]	; (8002858 <main+0x1c0>)
 80027c2:	4826      	ldr	r0, [pc, #152]	; (800285c <main+0x1c4>)
 80027c4:	f000 fef8 	bl	80035b8 <read_v_15cell>

	  if(flag_start_shutdown==1)
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <main+0x1d4>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d136      	bne.n	800283e <main+0x1a6>
	  {
		  	  //Read voltage of each cell (15cell)
		  	  if(BATT_State==STATE_CHARGE)
 80027d0:	4b29      	ldr	r3, [pc, #164]	; (8002878 <main+0x1e0>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d003      	beq.n	80027e0 <main+0x148>
		  	  {
		  		 // LTC681x_MUTE_UNMUTE_emul(1);
//		  		  read_v_15cell(vcell_15data_digi, vcell_15data);
		  		  //LTC681x_MUTE_UNMUTE_emul(0);
		  	  }
		  	  else read_v_15cell(vcell_15data_digi, vcell_15data);
 80027d8:	491f      	ldr	r1, [pc, #124]	; (8002858 <main+0x1c0>)
 80027da:	4820      	ldr	r0, [pc, #128]	; (800285c <main+0x1c4>)
 80027dc:	f000 feec 	bl	80035b8 <read_v_15cell>

		  	  //Get Balancing Data
		  	  get_balance_status(vcell_15data);
 80027e0:	481d      	ldr	r0, [pc, #116]	; (8002858 <main+0x1c0>)
 80027e2:	f001 fcb5 	bl	8004150 <get_balance_status>

		  	  // Balancing Process
		  	  if((IBATT<-0.1 && (v_cell_tot>VBATT_BALANCE_START)) || Flag_Force_Balance==1)     //arus charging 0.1 tidak perlu di balancing
 80027e6:	4b25      	ldr	r3, [pc, #148]	; (800287c <main+0x1e4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd fe1c 	bl	8000428 <__aeabi_f2d>
 80027f0:	a317      	add	r3, pc, #92	; (adr r3, 8002850 <main+0x1b8>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f7fe f8e1 	bl	80009bc <__aeabi_dcmplt>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <main+0x17a>
 8002800:	4b18      	ldr	r3, [pc, #96]	; (8002864 <main+0x1cc>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	491e      	ldr	r1, [pc, #120]	; (8002880 <main+0x1e8>)
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fc58 	bl	80010bc <__aeabi_fcmpgt>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <main+0x182>
 8002812:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <main+0x1ec>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d105      	bne.n	8002826 <main+0x18e>
		  	  {
		  		  LTC681x_balance_cell(balance_status);
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <main+0x1f0>)
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f001 fc2a 	bl	8004078 <LTC681x_balance_cell>
 8002824:	e005      	b.n	8002832 <main+0x19a>
		  	  }
		  	  else
		  	  {
		  			balance_status=0;
 8002826:	4b18      	ldr	r3, [pc, #96]	; (8002888 <main+0x1f0>)
 8002828:	2200      	movs	r2, #0
 800282a:	801a      	strh	r2, [r3, #0]
		  			LTC681x_balance_cell(0x0000);
 800282c:	2000      	movs	r0, #0
 800282e:	f001 fc23 	bl	8004078 <LTC681x_balance_cell>
		  	  }

		  	  //Calculate total Battery Voltage
		  	  Calc_vcell_tot();
 8002832:	f000 fc07 	bl	8003044 <Calc_vcell_tot>

			  //Mark that System operating
			  HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8002836:	2110      	movs	r1, #16
 8002838:	480d      	ldr	r0, [pc, #52]	; (8002870 <main+0x1d8>)
 800283a:	f006 ff4c 	bl	80096d6 <HAL_GPIO_TogglePin>
	  }

	  HAL_IWDG_Refresh(&hiwdg);
 800283e:	480d      	ldr	r0, [pc, #52]	; (8002874 <main+0x1dc>)
 8002840:	f007 fcdf 	bl	800a202 <HAL_IWDG_Refresh>
	  HAL_Delay(1);
 8002844:	2001      	movs	r0, #1
 8002846:	f005 f80f 	bl	8007868 <HAL_Delay>
	  if(DIP1 && !DIP2)			BMS_ScreenMode_ForceBalance();		//Mode Force Balancing
 800284a:	e781      	b.n	8002750 <main+0xb8>
 800284c:	f3af 8000 	nop.w
 8002850:	9999999a 	.word	0x9999999a
 8002854:	bfb99999 	.word	0xbfb99999
 8002858:	20000958 	.word	0x20000958
 800285c:	20000938 	.word	0x20000938
 8002860:	20000908 	.word	0x20000908
 8002864:	20000bbc 	.word	0x20000bbc
 8002868:	2000028b 	.word	0x2000028b
 800286c:	20000994 	.word	0x20000994
 8002870:	40011000 	.word	0x40011000
 8002874:	200008fc 	.word	0x200008fc
 8002878:	200009b0 	.word	0x200009b0
 800287c:	200010b0 	.word	0x200010b0
 8002880:	425c0000 	.word	0x425c0000
 8002884:	20000bc0 	.word	0x20000bc0
 8002888:	20000bee 	.word	0x20000bee

0800288c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b094      	sub	sp, #80	; 0x50
 8002890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002896:	2228      	movs	r2, #40	; 0x28
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f008 ff08 	bl	800b6b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80028bc:	230a      	movs	r3, #10
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028c0:	2301      	movs	r3, #1
 80028c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028c4:	2310      	movs	r3, #16
 80028c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80028c8:	2301      	movs	r3, #1
 80028ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028cc:	2302      	movs	r3, #2
 80028ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80028d0:	2300      	movs	r3, #0
 80028d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80028d4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80028d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028de:	4618      	mov	r0, r3
 80028e0:	f007 fc9e 	bl	800a220 <HAL_RCC_OscConfig>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <SystemClock_Config+0x62>
  {
    Error_Handler();
 80028ea:	f000 fbdd 	bl	80030a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ee:	230f      	movs	r3, #15
 80028f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028f2:	2302      	movs	r3, #2
 80028f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002900:	2300      	movs	r3, #0
 8002902:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	2102      	movs	r1, #2
 800290a:	4618      	mov	r0, r3
 800290c:	f007 ff08 	bl	800a720 <HAL_RCC_ClockConfig>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002916:	f000 fbc7 	bl	80030a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800291a:	2302      	movs	r3, #2
 800291c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800291e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002922:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	4618      	mov	r0, r3
 8002928:	f008 f896 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002932:	f000 fbb9 	bl	80030a8 <Error_Handler>
  }
}
 8002936:	bf00      	nop
 8002938:	3750      	adds	r7, #80	; 0x50
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <BMS_ON_InitBeep>:

/* USER CODE BEGIN 4 */
void BMS_ON_InitBeep(void)
{
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
	itoa(UNIQUE_Code, lower_UNIQUE_Code, 16);
 8002946:	2210      	movs	r2, #16
 8002948:	4945      	ldr	r1, [pc, #276]	; (8002a60 <BMS_ON_InitBeep+0x120>)
 800294a:	4846      	ldr	r0, [pc, #280]	; (8002a64 <BMS_ON_InitBeep+0x124>)
 800294c:	f008 fe8e 	bl	800b66c <itoa>
	int ii=0;
 8002950:	2300      	movs	r3, #0
 8002952:	607b      	str	r3, [r7, #4]
	while(ii<6){
 8002954:	e01c      	b.n	8002990 <BMS_ON_InitBeep+0x50>
		UPPER_UNIQUE_Code[ii] = toupper(lower_UNIQUE_Code[ii]);
 8002956:	4a42      	ldr	r2, [pc, #264]	; (8002a60 <BMS_ON_InitBeep+0x120>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	70fb      	strb	r3, [r7, #3]
 8002960:	f008 fe86 	bl	800b670 <__locale_ctype_ptr>
 8002964:	4602      	mov	r2, r0
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	3301      	adds	r3, #1
 800296a:	4413      	add	r3, r2
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d102      	bne.n	800297c <BMS_ON_InitBeep+0x3c>
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	3b20      	subs	r3, #32
 800297a:	e000      	b.n	800297e <BMS_ON_InitBeep+0x3e>
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	b2d9      	uxtb	r1, r3
 8002980:	4a39      	ldr	r2, [pc, #228]	; (8002a68 <BMS_ON_InitBeep+0x128>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	460a      	mov	r2, r1
 8002988:	701a      	strb	r2, [r3, #0]
		ii++;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3301      	adds	r3, #1
 800298e:	607b      	str	r3, [r7, #4]
	while(ii<6){
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b05      	cmp	r3, #5
 8002994:	dddf      	ble.n	8002956 <BMS_ON_InitBeep+0x16>
	}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc_val, 6);
 8002996:	2206      	movs	r2, #6
 8002998:	4934      	ldr	r1, [pc, #208]	; (8002a6c <BMS_ON_InitBeep+0x12c>)
 800299a:	4835      	ldr	r0, [pc, #212]	; (8002a70 <BMS_ON_InitBeep+0x130>)
 800299c:	f005 f85e 	bl	8007a5c <HAL_ADC_Start_DMA>

	SSD1306_Init();
 80029a0:	f001 fd1a 	bl	80043d8 <SSD1306_Init>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f001 fe03 	bl	80045b0 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80029aa:	f001 fdd3 	bl	8004554 <SSD1306_UpdateScreen>

	HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 80029ae:	2201      	movs	r2, #1
 80029b0:	2104      	movs	r1, #4
 80029b2:	4830      	ldr	r0, [pc, #192]	; (8002a74 <BMS_ON_InitBeep+0x134>)
 80029b4:	f006 fe77 	bl	80096a6 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80029b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029bc:	f004 ff54 	bl	8007868 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80029c0:	2104      	movs	r1, #4
 80029c2:	482c      	ldr	r0, [pc, #176]	; (8002a74 <BMS_ON_InitBeep+0x134>)
 80029c4:	f006 fe87 	bl	80096d6 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80029c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029cc:	f004 ff4c 	bl	8007868 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80029d0:	2104      	movs	r1, #4
 80029d2:	4828      	ldr	r0, [pc, #160]	; (8002a74 <BMS_ON_InitBeep+0x134>)
 80029d4:	f006 fe7f 	bl	80096d6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80029d8:	2064      	movs	r0, #100	; 0x64
 80029da:	f004 ff45 	bl	8007868 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80029de:	2104      	movs	r1, #4
 80029e0:	4824      	ldr	r0, [pc, #144]	; (8002a74 <BMS_ON_InitBeep+0x134>)
 80029e2:	f006 fe78 	bl	80096d6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80029e6:	2064      	movs	r0, #100	; 0x64
 80029e8:	f004 ff3e 	bl	8007868 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80029ec:	2104      	movs	r1, #4
 80029ee:	4821      	ldr	r0, [pc, #132]	; (8002a74 <BMS_ON_InitBeep+0x134>)
 80029f0:	f006 fe71 	bl	80096d6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80029f4:	2064      	movs	r0, #100	; 0x64
 80029f6:	f004 ff37 	bl	8007868 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80029fa:	2104      	movs	r1, #4
 80029fc:	481d      	ldr	r0, [pc, #116]	; (8002a74 <BMS_ON_InitBeep+0x134>)
 80029fe:	f006 fe6a 	bl	80096d6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8002a02:	2064      	movs	r0, #100	; 0x64
 8002a04:	f004 ff30 	bl	8007868 <HAL_Delay>

	sprintf(pesan,"BMS - Gen.V2");
 8002a08:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <BMS_ON_InitBeep+0x138>)
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <BMS_ON_InitBeep+0x13c>)
 8002a0c:	4614      	mov	r4, r2
 8002a0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002a10:	6020      	str	r0, [r4, #0]
 8002a12:	6061      	str	r1, [r4, #4]
 8002a14:	60a2      	str	r2, [r4, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	7323      	strb	r3, [r4, #12]
	SSD1306_GotoXY(5,0);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2005      	movs	r0, #5
 8002a1e:	f001 fe3d 	bl	800469c <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002a22:	2201      	movs	r2, #1
 8002a24:	4916      	ldr	r1, [pc, #88]	; (8002a80 <BMS_ON_InitBeep+0x140>)
 8002a26:	4814      	ldr	r0, [pc, #80]	; (8002a78 <BMS_ON_InitBeep+0x138>)
 8002a28:	f001 fece 	bl	80047c8 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002a2c:	f001 fd92 	bl	8004554 <SSD1306_UpdateScreen>

	HAL_TIM_Base_Start_IT(&htim2);
 8002a30:	4814      	ldr	r0, [pc, #80]	; (8002a84 <BMS_ON_InitBeep+0x144>)
 8002a32:	f008 f953 	bl	800acdc <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 8002a36:	4814      	ldr	r0, [pc, #80]	; (8002a88 <BMS_ON_InitBeep+0x148>)
 8002a38:	f008 f950 	bl	800acdc <HAL_TIM_Base_Start_IT>

	HAL_Delay(1000);
 8002a3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a40:	f004 ff12 	bl	8007868 <HAL_Delay>

	BATT_State=STATE_STANDBY;
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <BMS_ON_InitBeep+0x14c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
	Batt_Open_Mode();
 8002a4a:	f7fe fcb3 	bl	80013b4 <Batt_Open_Mode>
	AH_Total=0;
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <BMS_ON_InitBeep+0x150>)
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]


}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd90      	pop	{r4, r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	2000099c 	.word	0x2000099c
 8002a64:	000bbbb1 	.word	0x000bbbb1
 8002a68:	20000920 	.word	0x20000920
 8002a6c:	2000090c 	.word	0x2000090c
 8002a70:	200007b8 	.word	0x200007b8
 8002a74:	40011000 	.word	0x40011000
 8002a78:	20000bc4 	.word	0x20000bc4
 8002a7c:	0800dc20 	.word	0x0800dc20
 8002a80:	20000008 	.word	0x20000008
 8002a84:	20001548 	.word	0x20001548
 8002a88:	20001508 	.word	0x20001508
 8002a8c:	200009b0 	.word	0x200009b0
 8002a90:	20000698 	.word	0x20000698

08002a94 <BMS_ScreenMode_Standby>:

void BMS_ScreenMode_Standby(void)
{
 8002a94:	b598      	push	{r3, r4, r7, lr}
 8002a96:	af00      	add	r7, sp, #0
	 Flag_Battery_Locked_for_Ship=0;
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <BMS_ScreenMode_Standby+0x4c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
	 Flag_Force_Balance=0;
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <BMS_ScreenMode_Standby+0x50>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]


	 SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f001 fd83 	bl	80045b0 <SSD1306_Fill>
	 sprintf(pesan,"BMS - Gen.V2");
 8002aaa:	4a0f      	ldr	r2, [pc, #60]	; (8002ae8 <BMS_ScreenMode_Standby+0x54>)
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <BMS_ScreenMode_Standby+0x58>)
 8002aae:	4614      	mov	r4, r2
 8002ab0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ab2:	6020      	str	r0, [r4, #0]
 8002ab4:	6061      	str	r1, [r4, #4]
 8002ab6:	60a2      	str	r2, [r4, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	7323      	strb	r3, [r4, #12]
	 SSD1306_GotoXY(20,28);
 8002abc:	211c      	movs	r1, #28
 8002abe:	2014      	movs	r0, #20
 8002ac0:	f001 fdec 	bl	800469c <SSD1306_GotoXY>
	 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	490a      	ldr	r1, [pc, #40]	; (8002af0 <BMS_ScreenMode_Standby+0x5c>)
 8002ac8:	4807      	ldr	r0, [pc, #28]	; (8002ae8 <BMS_ScreenMode_Standby+0x54>)
 8002aca:	f001 fe7d 	bl	80047c8 <SSD1306_Puts>
	 SSD1306_UpdateScreen();
 8002ace:	f001 fd41 	bl	8004554 <SSD1306_UpdateScreen>
	 Batt_Open_Mode();
 8002ad2:	f7fe fc6f 	bl	80013b4 <Batt_Open_Mode>

	 HAL_Delay(1);
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f004 fec6 	bl	8007868 <HAL_Delay>
}
 8002adc:	bf00      	nop
 8002ade:	bd98      	pop	{r3, r4, r7, pc}
 8002ae0:	20000934 	.word	0x20000934
 8002ae4:	20000bc0 	.word	0x20000bc0
 8002ae8:	20000bc4 	.word	0x20000bc4
 8002aec:	0800dc20 	.word	0x0800dc20
 8002af0:	20000008 	.word	0x20000008

08002af4 <BMS_ScreenMode_RUN>:

void BMS_ScreenMode_RUN(void)
{
 8002af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af8:	b087      	sub	sp, #28
 8002afa:	af06      	add	r7, sp, #24
	Flag_Battery_Locked_for_Ship=0;
 8002afc:	4b55      	ldr	r3, [pc, #340]	; (8002c54 <BMS_ScreenMode_RUN+0x160>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
	Flag_Force_Balance=0;
 8002b02:	4b55      	ldr	r3, [pc, #340]	; (8002c58 <BMS_ScreenMode_RUN+0x164>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]

	if(flag_start_shutdown==0)
 8002b08:	4b54      	ldr	r3, [pc, #336]	; (8002c5c <BMS_ScreenMode_RUN+0x168>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d158      	bne.n	8002bc2 <BMS_ScreenMode_RUN+0xce>
	{
		 SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f001 fd4d 	bl	80045b0 <SSD1306_Fill>
			 sprintf(pesan,"BMS - Gen.V2 - RUN");
 8002b16:	4a52      	ldr	r2, [pc, #328]	; (8002c60 <BMS_ScreenMode_RUN+0x16c>)
 8002b18:	4b52      	ldr	r3, [pc, #328]	; (8002c64 <BMS_ScreenMode_RUN+0x170>)
 8002b1a:	4615      	mov	r5, r2
 8002b1c:	461c      	mov	r4, r3
 8002b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b20:	6028      	str	r0, [r5, #0]
 8002b22:	6069      	str	r1, [r5, #4]
 8002b24:	60aa      	str	r2, [r5, #8]
 8002b26:	60eb      	str	r3, [r5, #12]
 8002b28:	8823      	ldrh	r3, [r4, #0]
 8002b2a:	78a2      	ldrb	r2, [r4, #2]
 8002b2c:	822b      	strh	r3, [r5, #16]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	74ab      	strb	r3, [r5, #18]
			 SSD1306_GotoXY(0,18);
 8002b32:	2112      	movs	r1, #18
 8002b34:	2000      	movs	r0, #0
 8002b36:	f001 fdb1 	bl	800469c <SSD1306_GotoXY>
			 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	494a      	ldr	r1, [pc, #296]	; (8002c68 <BMS_ScreenMode_RUN+0x174>)
 8002b3e:	4848      	ldr	r0, [pc, #288]	; (8002c60 <BMS_ScreenMode_RUN+0x16c>)
 8002b40:	f001 fe42 	bl	80047c8 <SSD1306_Puts>

			 sprintf(pesan,"SLEEP_STATE");
 8002b44:	4a46      	ldr	r2, [pc, #280]	; (8002c60 <BMS_ScreenMode_RUN+0x16c>)
 8002b46:	4b49      	ldr	r3, [pc, #292]	; (8002c6c <BMS_ScreenMode_RUN+0x178>)
 8002b48:	4614      	mov	r4, r2
 8002b4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b4c:	6020      	str	r0, [r4, #0]
 8002b4e:	6061      	str	r1, [r4, #4]
 8002b50:	60a2      	str	r2, [r4, #8]
			 SSD1306_GotoXY(0,38);
 8002b52:	2126      	movs	r1, #38	; 0x26
 8002b54:	2000      	movs	r0, #0
 8002b56:	f001 fda1 	bl	800469c <SSD1306_GotoXY>
			 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	4942      	ldr	r1, [pc, #264]	; (8002c68 <BMS_ScreenMode_RUN+0x174>)
 8002b5e:	4840      	ldr	r0, [pc, #256]	; (8002c60 <BMS_ScreenMode_RUN+0x16c>)
 8002b60:	f001 fe32 	bl	80047c8 <SSD1306_Puts>
			 SSD1306_UpdateScreen();
 8002b64:	f001 fcf6 	bl	8004554 <SSD1306_UpdateScreen>
			 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2110      	movs	r1, #16
 8002b6c:	4840      	ldr	r0, [pc, #256]	; (8002c70 <BMS_ScreenMode_RUN+0x17c>)
 8002b6e:	f006 fd9a 	bl	80096a6 <HAL_GPIO_WritePin>
			 Batt_Open_Mode();
 8002b72:	f7fe fc1f 	bl	80013b4 <Batt_Open_Mode>
			 flag_trip_overtemperature=OFF;
 8002b76:	4b3f      	ldr	r3, [pc, #252]	; (8002c74 <BMS_ScreenMode_RUN+0x180>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
			 flag_trip_undertemperature=OFF;
 8002b7c:	4b3e      	ldr	r3, [pc, #248]	; (8002c78 <BMS_ScreenMode_RUN+0x184>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
			 flag_trip_SOCOverDischarge=OFF;
 8002b82:	4b3e      	ldr	r3, [pc, #248]	; (8002c7c <BMS_ScreenMode_RUN+0x188>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
			 flag_trip_SOCOverCharge=OFF;			//di tiada kan..!
 8002b88:	4b3d      	ldr	r3, [pc, #244]	; (8002c80 <BMS_ScreenMode_RUN+0x18c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
			 flag_trip_undervoltage=OFF;
 8002b8e:	4b3d      	ldr	r3, [pc, #244]	; (8002c84 <BMS_ScreenMode_RUN+0x190>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
			 flag_trip_overvoltage=OFF;
 8002b94:	4b3c      	ldr	r3, [pc, #240]	; (8002c88 <BMS_ScreenMode_RUN+0x194>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
			 flag_trip_overcurrentdischarge=OFF;
 8002b9a:	4b3c      	ldr	r3, [pc, #240]	; (8002c8c <BMS_ScreenMode_RUN+0x198>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
			 flag_trip_overcurrentcharge=OFF;
 8002ba0:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <BMS_ScreenMode_RUN+0x19c>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
			 flag_trip_shortcircuit=OFF;
 8002ba6:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <BMS_ScreenMode_RUN+0x1a0>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
			 flag_trip_systemfailure=OFF;
 8002bac:	4b3a      	ldr	r3, [pc, #232]	; (8002c98 <BMS_ScreenMode_RUN+0x1a4>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
			 flag_trip_unbalance=OFF;
 8002bb2:	4b3a      	ldr	r3, [pc, #232]	; (8002c9c <BMS_ScreenMode_RUN+0x1a8>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
			 OFFSET_SENSOR_ARUS=IBATT_for_offset_cal;
 8002bb8:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <BMS_ScreenMode_RUN+0x1ac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a39      	ldr	r2, [pc, #228]	; (8002ca4 <BMS_ScreenMode_RUN+0x1b0>)
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	e16a      	b.n	8002e98 <BMS_ScreenMode_RUN+0x3a4>
	}
	else
	{
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f001 fcf4 	bl	80045b0 <SSD1306_Fill>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002bc8:	2110      	movs	r1, #16
 8002bca:	4829      	ldr	r0, [pc, #164]	; (8002c70 <BMS_ScreenMode_RUN+0x17c>)
 8002bcc:	f006 fd83 	bl	80096d6 <HAL_GPIO_TogglePin>

		if(BATT_State==STATE_CHARGE)
 8002bd0:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <BMS_ScreenMode_RUN+0x1b4>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d10e      	bne.n	8002bf6 <BMS_ScreenMode_RUN+0x102>
		{
			sprintf(pesan,"RUN (C) - %s", UPPER_UNIQUE_Code);
 8002bd8:	4a34      	ldr	r2, [pc, #208]	; (8002cac <BMS_ScreenMode_RUN+0x1b8>)
 8002bda:	4935      	ldr	r1, [pc, #212]	; (8002cb0 <BMS_ScreenMode_RUN+0x1bc>)
 8002bdc:	4820      	ldr	r0, [pc, #128]	; (8002c60 <BMS_ScreenMode_RUN+0x16c>)
 8002bde:	f009 f9bf 	bl	800bf60 <siprintf>
			SSD1306_GotoXY(0,0);
 8002be2:	2100      	movs	r1, #0
 8002be4:	2000      	movs	r0, #0
 8002be6:	f001 fd59 	bl	800469c <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002bea:	2201      	movs	r2, #1
 8002bec:	491e      	ldr	r1, [pc, #120]	; (8002c68 <BMS_ScreenMode_RUN+0x174>)
 8002bee:	481c      	ldr	r0, [pc, #112]	; (8002c60 <BMS_ScreenMode_RUN+0x16c>)
 8002bf0:	f001 fdea 	bl	80047c8 <SSD1306_Puts>
 8002bf4:	e07a      	b.n	8002cec <BMS_ScreenMode_RUN+0x1f8>
		}
		else if(BATT_State==STATE_DISCHARGE)
 8002bf6:	4b2c      	ldr	r3, [pc, #176]	; (8002ca8 <BMS_ScreenMode_RUN+0x1b4>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d10e      	bne.n	8002c1c <BMS_ScreenMode_RUN+0x128>
		{
			sprintf(pesan,"RUN (D) - %s", UPPER_UNIQUE_Code);
 8002bfe:	4a2b      	ldr	r2, [pc, #172]	; (8002cac <BMS_ScreenMode_RUN+0x1b8>)
 8002c00:	492c      	ldr	r1, [pc, #176]	; (8002cb4 <BMS_ScreenMode_RUN+0x1c0>)
 8002c02:	4817      	ldr	r0, [pc, #92]	; (8002c60 <BMS_ScreenMode_RUN+0x16c>)
 8002c04:	f009 f9ac 	bl	800bf60 <siprintf>
			SSD1306_GotoXY(0,0);
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f001 fd46 	bl	800469c <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002c10:	2201      	movs	r2, #1
 8002c12:	4915      	ldr	r1, [pc, #84]	; (8002c68 <BMS_ScreenMode_RUN+0x174>)
 8002c14:	4812      	ldr	r0, [pc, #72]	; (8002c60 <BMS_ScreenMode_RUN+0x16c>)
 8002c16:	f001 fdd7 	bl	80047c8 <SSD1306_Puts>
 8002c1a:	e067      	b.n	8002cec <BMS_ScreenMode_RUN+0x1f8>
		}
		else if(BATT_State==STATE_FULL_CHARGE_DISCHARGE)
 8002c1c:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <BMS_ScreenMode_RUN+0x1b4>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d14b      	bne.n	8002cbc <BMS_ScreenMode_RUN+0x1c8>
		{
			sprintf(pesan,"BMS-RUN (Full C/D)");
 8002c24:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <BMS_ScreenMode_RUN+0x16c>)
 8002c26:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <BMS_ScreenMode_RUN+0x1c4>)
 8002c28:	4615      	mov	r5, r2
 8002c2a:	461c      	mov	r4, r3
 8002c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2e:	6028      	str	r0, [r5, #0]
 8002c30:	6069      	str	r1, [r5, #4]
 8002c32:	60aa      	str	r2, [r5, #8]
 8002c34:	60eb      	str	r3, [r5, #12]
 8002c36:	8823      	ldrh	r3, [r4, #0]
 8002c38:	78a2      	ldrb	r2, [r4, #2]
 8002c3a:	822b      	strh	r3, [r5, #16]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	74ab      	strb	r3, [r5, #18]
			SSD1306_GotoXY(0,0);
 8002c40:	2100      	movs	r1, #0
 8002c42:	2000      	movs	r0, #0
 8002c44:	f001 fd2a 	bl	800469c <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002c48:	2201      	movs	r2, #1
 8002c4a:	4907      	ldr	r1, [pc, #28]	; (8002c68 <BMS_ScreenMode_RUN+0x174>)
 8002c4c:	4804      	ldr	r0, [pc, #16]	; (8002c60 <BMS_ScreenMode_RUN+0x16c>)
 8002c4e:	f001 fdbb 	bl	80047c8 <SSD1306_Puts>
 8002c52:	e04b      	b.n	8002cec <BMS_ScreenMode_RUN+0x1f8>
 8002c54:	20000934 	.word	0x20000934
 8002c58:	20000bc0 	.word	0x20000bc0
 8002c5c:	20000994 	.word	0x20000994
 8002c60:	20000bc4 	.word	0x20000bc4
 8002c64:	0800dc30 	.word	0x0800dc30
 8002c68:	20000008 	.word	0x20000008
 8002c6c:	0800dc44 	.word	0x0800dc44
 8002c70:	40011000 	.word	0x40011000
 8002c74:	20001090 	.word	0x20001090
 8002c78:	200010b8 	.word	0x200010b8
 8002c7c:	200010ec 	.word	0x200010ec
 8002c80:	20000c89 	.word	0x20000c89
 8002c84:	200010b9 	.word	0x200010b9
 8002c88:	200014fd 	.word	0x200014fd
 8002c8c:	200010c8 	.word	0x200010c8
 8002c90:	200010e4 	.word	0x200010e4
 8002c94:	20000c8a 	.word	0x20000c8a
 8002c98:	20001078 	.word	0x20001078
 8002c9c:	20000c88 	.word	0x20000c88
 8002ca0:	20001110 	.word	0x20001110
 8002ca4:	2000110c 	.word	0x2000110c
 8002ca8:	200009b0 	.word	0x200009b0
 8002cac:	20000920 	.word	0x20000920
 8002cb0:	0800dc50 	.word	0x0800dc50
 8002cb4:	0800dc60 	.word	0x0800dc60
 8002cb8:	0800dc70 	.word	0x0800dc70
		}
		else if(BATT_State==STATE_STANDBY)
 8002cbc:	4b7a      	ldr	r3, [pc, #488]	; (8002ea8 <BMS_ScreenMode_RUN+0x3b4>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d113      	bne.n	8002cec <BMS_ScreenMode_RUN+0x1f8>
		{
			sprintf(pesan,"BMS-RUN (Open)");
 8002cc4:	4a79      	ldr	r2, [pc, #484]	; (8002eac <BMS_ScreenMode_RUN+0x3b8>)
 8002cc6:	4b7a      	ldr	r3, [pc, #488]	; (8002eb0 <BMS_ScreenMode_RUN+0x3bc>)
 8002cc8:	4614      	mov	r4, r2
 8002cca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ccc:	6020      	str	r0, [r4, #0]
 8002cce:	6061      	str	r1, [r4, #4]
 8002cd0:	60a2      	str	r2, [r4, #8]
 8002cd2:	881a      	ldrh	r2, [r3, #0]
 8002cd4:	789b      	ldrb	r3, [r3, #2]
 8002cd6:	81a2      	strh	r2, [r4, #12]
 8002cd8:	73a3      	strb	r3, [r4, #14]
			SSD1306_GotoXY(0,0);
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f001 fcdd 	bl	800469c <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4973      	ldr	r1, [pc, #460]	; (8002eb4 <BMS_ScreenMode_RUN+0x3c0>)
 8002ce6:	4871      	ldr	r0, [pc, #452]	; (8002eac <BMS_ScreenMode_RUN+0x3b8>)
 8002ce8:	f001 fd6e 	bl	80047c8 <SSD1306_Puts>
		}

		sprintf(pesan,"V=%6.2f I=%6.2f",VBATT,IBATT);
 8002cec:	4b72      	ldr	r3, [pc, #456]	; (8002eb8 <BMS_ScreenMode_RUN+0x3c4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fb99 	bl	8000428 <__aeabi_f2d>
 8002cf6:	4605      	mov	r5, r0
 8002cf8:	460e      	mov	r6, r1
 8002cfa:	4b70      	ldr	r3, [pc, #448]	; (8002ebc <BMS_ScreenMode_RUN+0x3c8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd fb92 	bl	8000428 <__aeabi_f2d>
 8002d04:	4603      	mov	r3, r0
 8002d06:	460c      	mov	r4, r1
 8002d08:	e9cd 3400 	strd	r3, r4, [sp]
 8002d0c:	462a      	mov	r2, r5
 8002d0e:	4633      	mov	r3, r6
 8002d10:	496b      	ldr	r1, [pc, #428]	; (8002ec0 <BMS_ScreenMode_RUN+0x3cc>)
 8002d12:	4866      	ldr	r0, [pc, #408]	; (8002eac <BMS_ScreenMode_RUN+0x3b8>)
 8002d14:	f009 f924 	bl	800bf60 <siprintf>
		SSD1306_GotoXY(0,10);
 8002d18:	210a      	movs	r1, #10
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f001 fcbe 	bl	800469c <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002d20:	2201      	movs	r2, #1
 8002d22:	4964      	ldr	r1, [pc, #400]	; (8002eb4 <BMS_ScreenMode_RUN+0x3c0>)
 8002d24:	4861      	ldr	r0, [pc, #388]	; (8002eac <BMS_ScreenMode_RUN+0x3b8>)
 8002d26:	f001 fd4f 	bl	80047c8 <SSD1306_Puts>
		sprintf(pesan,"T=%3.0f|%3.0f|%3.0f|%3.0f",Suhu_T1,Suhu_T2,Suhu_T3,Suhu_T4);
 8002d2a:	4b66      	ldr	r3, [pc, #408]	; (8002ec4 <BMS_ScreenMode_RUN+0x3d0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fb7a 	bl	8000428 <__aeabi_f2d>
 8002d34:	4682      	mov	sl, r0
 8002d36:	468b      	mov	fp, r1
 8002d38:	4b63      	ldr	r3, [pc, #396]	; (8002ec8 <BMS_ScreenMode_RUN+0x3d4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fb73 	bl	8000428 <__aeabi_f2d>
 8002d42:	4604      	mov	r4, r0
 8002d44:	460d      	mov	r5, r1
 8002d46:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <BMS_ScreenMode_RUN+0x3d8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fb6c 	bl	8000428 <__aeabi_f2d>
 8002d50:	4680      	mov	r8, r0
 8002d52:	4689      	mov	r9, r1
 8002d54:	4b5e      	ldr	r3, [pc, #376]	; (8002ed0 <BMS_ScreenMode_RUN+0x3dc>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd fb65 	bl	8000428 <__aeabi_f2d>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d66:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002d6a:	e9cd 4500 	strd	r4, r5, [sp]
 8002d6e:	4652      	mov	r2, sl
 8002d70:	465b      	mov	r3, fp
 8002d72:	4958      	ldr	r1, [pc, #352]	; (8002ed4 <BMS_ScreenMode_RUN+0x3e0>)
 8002d74:	484d      	ldr	r0, [pc, #308]	; (8002eac <BMS_ScreenMode_RUN+0x3b8>)
 8002d76:	f009 f8f3 	bl	800bf60 <siprintf>
		SSD1306_GotoXY(0,20);
 8002d7a:	2114      	movs	r1, #20
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f001 fc8d 	bl	800469c <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002d82:	2201      	movs	r2, #1
 8002d84:	494b      	ldr	r1, [pc, #300]	; (8002eb4 <BMS_ScreenMode_RUN+0x3c0>)
 8002d86:	4849      	ldr	r0, [pc, #292]	; (8002eac <BMS_ScreenMode_RUN+0x3b8>)
 8002d88:	f001 fd1e 	bl	80047c8 <SSD1306_Puts>
		sprintf(pesan,"C=%5.1f%%--%5.1f%%",Pack_SOC,SOC_manipulasi);
 8002d8c:	4b52      	ldr	r3, [pc, #328]	; (8002ed8 <BMS_ScreenMode_RUN+0x3e4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd fb49 	bl	8000428 <__aeabi_f2d>
 8002d96:	4605      	mov	r5, r0
 8002d98:	460e      	mov	r6, r1
 8002d9a:	4b50      	ldr	r3, [pc, #320]	; (8002edc <BMS_ScreenMode_RUN+0x3e8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fb42 	bl	8000428 <__aeabi_f2d>
 8002da4:	4603      	mov	r3, r0
 8002da6:	460c      	mov	r4, r1
 8002da8:	e9cd 3400 	strd	r3, r4, [sp]
 8002dac:	462a      	mov	r2, r5
 8002dae:	4633      	mov	r3, r6
 8002db0:	494b      	ldr	r1, [pc, #300]	; (8002ee0 <BMS_ScreenMode_RUN+0x3ec>)
 8002db2:	483e      	ldr	r0, [pc, #248]	; (8002eac <BMS_ScreenMode_RUN+0x3b8>)
 8002db4:	f009 f8d4 	bl	800bf60 <siprintf>
		SSD1306_GotoXY(0,30);
 8002db8:	211e      	movs	r1, #30
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f001 fc6e 	bl	800469c <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	493c      	ldr	r1, [pc, #240]	; (8002eb4 <BMS_ScreenMode_RUN+0x3c0>)
 8002dc4:	4839      	ldr	r0, [pc, #228]	; (8002eac <BMS_ScreenMode_RUN+0x3b8>)
 8002dc6:	f001 fcff 	bl	80047c8 <SSD1306_Puts>
		sprintf(pesan,"B=%5d, %4.1f-%4.2f",balance_status,persen_imbalance, OFFSET_SENSOR_ARUS);
 8002dca:	4b46      	ldr	r3, [pc, #280]	; (8002ee4 <BMS_ScreenMode_RUN+0x3f0>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	461e      	mov	r6, r3
 8002dd0:	4b45      	ldr	r3, [pc, #276]	; (8002ee8 <BMS_ScreenMode_RUN+0x3f4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fd fb27 	bl	8000428 <__aeabi_f2d>
 8002dda:	4604      	mov	r4, r0
 8002ddc:	460d      	mov	r5, r1
 8002dde:	4b43      	ldr	r3, [pc, #268]	; (8002eec <BMS_ScreenMode_RUN+0x3f8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fb20 	bl	8000428 <__aeabi_f2d>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002df0:	e9cd 4500 	strd	r4, r5, [sp]
 8002df4:	4632      	mov	r2, r6
 8002df6:	493e      	ldr	r1, [pc, #248]	; (8002ef0 <BMS_ScreenMode_RUN+0x3fc>)
 8002df8:	482c      	ldr	r0, [pc, #176]	; (8002eac <BMS_ScreenMode_RUN+0x3b8>)
 8002dfa:	f009 f8b1 	bl	800bf60 <siprintf>
		SSD1306_GotoXY(0,40);
 8002dfe:	2128      	movs	r1, #40	; 0x28
 8002e00:	2000      	movs	r0, #0
 8002e02:	f001 fc4b 	bl	800469c <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002e06:	2201      	movs	r2, #1
 8002e08:	492a      	ldr	r1, [pc, #168]	; (8002eb4 <BMS_ScreenMode_RUN+0x3c0>)
 8002e0a:	4828      	ldr	r0, [pc, #160]	; (8002eac <BMS_ScreenMode_RUN+0x3b8>)
 8002e0c:	f001 fcdc 	bl	80047c8 <SSD1306_Puts>


		sprintf(pesan,"%d-%d--%4.2f| %5.0f",fault_code,last_fault_code,Isc, AH_Total);
 8002e10:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <BMS_ScreenMode_RUN+0x400>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	461e      	mov	r6, r3
 8002e16:	4b38      	ldr	r3, [pc, #224]	; (8002ef8 <BMS_ScreenMode_RUN+0x404>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	4698      	mov	r8, r3
 8002e1c:	4b37      	ldr	r3, [pc, #220]	; (8002efc <BMS_ScreenMode_RUN+0x408>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fd fb01 	bl	8000428 <__aeabi_f2d>
 8002e26:	4604      	mov	r4, r0
 8002e28:	460d      	mov	r5, r1
 8002e2a:	4b35      	ldr	r3, [pc, #212]	; (8002f00 <BMS_ScreenMode_RUN+0x40c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fafa 	bl	8000428 <__aeabi_f2d>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e3c:	e9cd 4500 	strd	r4, r5, [sp]
 8002e40:	4643      	mov	r3, r8
 8002e42:	4632      	mov	r2, r6
 8002e44:	492f      	ldr	r1, [pc, #188]	; (8002f04 <BMS_ScreenMode_RUN+0x410>)
 8002e46:	4819      	ldr	r0, [pc, #100]	; (8002eac <BMS_ScreenMode_RUN+0x3b8>)
 8002e48:	f009 f88a 	bl	800bf60 <siprintf>
		SSD1306_GotoXY(0,50);
 8002e4c:	2132      	movs	r1, #50	; 0x32
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f001 fc24 	bl	800469c <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002e54:	2201      	movs	r2, #1
 8002e56:	4917      	ldr	r1, [pc, #92]	; (8002eb4 <BMS_ScreenMode_RUN+0x3c0>)
 8002e58:	4814      	ldr	r0, [pc, #80]	; (8002eac <BMS_ScreenMode_RUN+0x3b8>)
 8002e5a:	f001 fcb5 	bl	80047c8 <SSD1306_Puts>


		SSD1306_UpdateScreen();
 8002e5e:	f001 fb79 	bl	8004554 <SSD1306_UpdateScreen>

		if(BMS_mode==0) Batt_Open_Mode();
 8002e62:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <BMS_ScreenMode_RUN+0x414>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <BMS_ScreenMode_RUN+0x37c>
 8002e6a:	f7fe faa3 	bl	80013b4 <Batt_Open_Mode>
 8002e6e:	e013      	b.n	8002e98 <BMS_ScreenMode_RUN+0x3a4>
		else if(BMS_mode==1) Batt_Discharge_Mode();
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <BMS_ScreenMode_RUN+0x414>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d102      	bne.n	8002e7e <BMS_ScreenMode_RUN+0x38a>
 8002e78:	f7fe f970 	bl	800115c <Batt_Discharge_Mode>
 8002e7c:	e00c      	b.n	8002e98 <BMS_ScreenMode_RUN+0x3a4>
		else if(BMS_mode==2) Batt_Charge_Mode();
 8002e7e:	4b22      	ldr	r3, [pc, #136]	; (8002f08 <BMS_ScreenMode_RUN+0x414>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d102      	bne.n	8002e8c <BMS_ScreenMode_RUN+0x398>
 8002e86:	f7fe f9d1 	bl	800122c <Batt_Charge_Mode>
 8002e8a:	e005      	b.n	8002e98 <BMS_ScreenMode_RUN+0x3a4>
		else if(BMS_mode==3) Batt_Full_CD_Mode();
 8002e8c:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <BMS_ScreenMode_RUN+0x414>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d101      	bne.n	8002e98 <BMS_ScreenMode_RUN+0x3a4>
 8002e94:	f7fe fa20 	bl	80012d8 <Batt_Full_CD_Mode>

	}

	HAL_Delay(1);
 8002e98:	2001      	movs	r0, #1
 8002e9a:	f004 fce5 	bl	8007868 <HAL_Delay>
}
 8002e9e:	bf00      	nop
 8002ea0:	3704      	adds	r7, #4
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ea8:	200009b0 	.word	0x200009b0
 8002eac:	20000bc4 	.word	0x20000bc4
 8002eb0:	0800dc84 	.word	0x0800dc84
 8002eb4:	20000008 	.word	0x20000008
 8002eb8:	20001094 	.word	0x20001094
 8002ebc:	200010b0 	.word	0x200010b0
 8002ec0:	0800dc94 	.word	0x0800dc94
 8002ec4:	200010c4 	.word	0x200010c4
 8002ec8:	20001500 	.word	0x20001500
 8002ecc:	20001098 	.word	0x20001098
 8002ed0:	200010f8 	.word	0x200010f8
 8002ed4:	0800dca4 	.word	0x0800dca4
 8002ed8:	20000be4 	.word	0x20000be4
 8002edc:	20000bb4 	.word	0x20000bb4
 8002ee0:	0800dcc0 	.word	0x0800dcc0
 8002ee4:	20000bee 	.word	0x20000bee
 8002ee8:	20000bb8 	.word	0x20000bb8
 8002eec:	2000110c 	.word	0x2000110c
 8002ef0:	0800dcd4 	.word	0x0800dcd4
 8002ef4:	200010c0 	.word	0x200010c0
 8002ef8:	200014fc 	.word	0x200014fc
 8002efc:	200010a4 	.word	0x200010a4
 8002f00:	20000698 	.word	0x20000698
 8002f04:	0800dce8 	.word	0x0800dce8
 8002f08:	20000be0 	.word	0x20000be0

08002f0c <BMS_ScreenMode_Locked_Ship>:

void BMS_ScreenMode_Locked_Ship(void)
{
 8002f0c:	b5b0      	push	{r4, r5, r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
	 Flag_Battery_Locked_for_Ship=1;
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <BMS_ScreenMode_Locked_Ship+0x74>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
	 Flag_Force_Balance=0;
 8002f16:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <BMS_ScreenMode_Locked_Ship+0x78>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]

	 SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f001 fb47 	bl	80045b0 <SSD1306_Fill>
	 sprintf(pesan,"BMS - Gen.V2");
 8002f22:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <BMS_ScreenMode_Locked_Ship+0x80>)
 8002f26:	4614      	mov	r4, r2
 8002f28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f2a:	6020      	str	r0, [r4, #0]
 8002f2c:	6061      	str	r1, [r4, #4]
 8002f2e:	60a2      	str	r2, [r4, #8]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	7323      	strb	r3, [r4, #12]
	 SSD1306_GotoXY(20,18);
 8002f34:	2112      	movs	r1, #18
 8002f36:	2014      	movs	r0, #20
 8002f38:	f001 fbb0 	bl	800469c <SSD1306_GotoXY>
	 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	4914      	ldr	r1, [pc, #80]	; (8002f90 <BMS_ScreenMode_Locked_Ship+0x84>)
 8002f40:	4811      	ldr	r0, [pc, #68]	; (8002f88 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002f42:	f001 fc41 	bl	80047c8 <SSD1306_Puts>

	 sprintf(pesan,"Pack Ready Shipped");
 8002f46:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002f48:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <BMS_ScreenMode_Locked_Ship+0x88>)
 8002f4a:	4615      	mov	r5, r2
 8002f4c:	461c      	mov	r4, r3
 8002f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f50:	6028      	str	r0, [r5, #0]
 8002f52:	6069      	str	r1, [r5, #4]
 8002f54:	60aa      	str	r2, [r5, #8]
 8002f56:	60eb      	str	r3, [r5, #12]
 8002f58:	8823      	ldrh	r3, [r4, #0]
 8002f5a:	78a2      	ldrb	r2, [r4, #2]
 8002f5c:	822b      	strh	r3, [r5, #16]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	74ab      	strb	r3, [r5, #18]
	 SSD1306_GotoXY(0,38);
 8002f62:	2126      	movs	r1, #38	; 0x26
 8002f64:	2000      	movs	r0, #0
 8002f66:	f001 fb99 	bl	800469c <SSD1306_GotoXY>
	 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4908      	ldr	r1, [pc, #32]	; (8002f90 <BMS_ScreenMode_Locked_Ship+0x84>)
 8002f6e:	4806      	ldr	r0, [pc, #24]	; (8002f88 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002f70:	f001 fc2a 	bl	80047c8 <SSD1306_Puts>
	 SSD1306_UpdateScreen();
 8002f74:	f001 faee 	bl	8004554 <SSD1306_UpdateScreen>
	 Batt_Open_Mode();
 8002f78:	f7fe fa1c 	bl	80013b4 <Batt_Open_Mode>
}
 8002f7c:	bf00      	nop
 8002f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f80:	20000934 	.word	0x20000934
 8002f84:	20000bc0 	.word	0x20000bc0
 8002f88:	20000bc4 	.word	0x20000bc4
 8002f8c:	0800dc20 	.word	0x0800dc20
 8002f90:	20000008 	.word	0x20000008
 8002f94:	0800dcfc 	.word	0x0800dcfc

08002f98 <BMS_ScreenMode_ForceBalance>:

void BMS_ScreenMode_ForceBalance(void)
{
 8002f98:	b598      	push	{r3, r4, r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
	Flag_Battery_Locked_for_Ship=0;
 8002f9c:	4b21      	ldr	r3, [pc, #132]	; (8003024 <BMS_ScreenMode_ForceBalance+0x8c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
	Flag_Force_Balance=1;
 8002fa2:	4b21      	ldr	r3, [pc, #132]	; (8003028 <BMS_ScreenMode_ForceBalance+0x90>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	701a      	strb	r2, [r3, #0]

	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f001 fb01 	bl	80045b0 <SSD1306_Fill>
	sprintf(pesan,"BMS - Gen.V2");
 8002fae:	4a1f      	ldr	r2, [pc, #124]	; (800302c <BMS_ScreenMode_ForceBalance+0x94>)
 8002fb0:	4b1f      	ldr	r3, [pc, #124]	; (8003030 <BMS_ScreenMode_ForceBalance+0x98>)
 8002fb2:	4614      	mov	r4, r2
 8002fb4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002fb6:	6020      	str	r0, [r4, #0]
 8002fb8:	6061      	str	r1, [r4, #4]
 8002fba:	60a2      	str	r2, [r4, #8]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	7323      	strb	r3, [r4, #12]
	SSD1306_GotoXY(20,0);
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2014      	movs	r0, #20
 8002fc4:	f001 fb6a 	bl	800469c <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002fc8:	2201      	movs	r2, #1
 8002fca:	491a      	ldr	r1, [pc, #104]	; (8003034 <BMS_ScreenMode_ForceBalance+0x9c>)
 8002fcc:	4817      	ldr	r0, [pc, #92]	; (800302c <BMS_ScreenMode_ForceBalance+0x94>)
 8002fce:	f001 fbfb 	bl	80047c8 <SSD1306_Puts>

	sprintf(pesan,"Force Balance");
 8002fd2:	4a16      	ldr	r2, [pc, #88]	; (800302c <BMS_ScreenMode_ForceBalance+0x94>)
 8002fd4:	4b18      	ldr	r3, [pc, #96]	; (8003038 <BMS_ScreenMode_ForceBalance+0xa0>)
 8002fd6:	4614      	mov	r4, r2
 8002fd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002fda:	6020      	str	r0, [r4, #0]
 8002fdc:	6061      	str	r1, [r4, #4]
 8002fde:	60a2      	str	r2, [r4, #8]
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	81a3      	strh	r3, [r4, #12]
	SSD1306_GotoXY(0,10);
 8002fe4:	210a      	movs	r1, #10
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f001 fb58 	bl	800469c <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002fec:	2201      	movs	r2, #1
 8002fee:	4911      	ldr	r1, [pc, #68]	; (8003034 <BMS_ScreenMode_ForceBalance+0x9c>)
 8002ff0:	480e      	ldr	r0, [pc, #56]	; (800302c <BMS_ScreenMode_ForceBalance+0x94>)
 8002ff2:	f001 fbe9 	bl	80047c8 <SSD1306_Puts>

	sprintf(pesan,"B=%5d",balance_status);
 8002ff6:	4b11      	ldr	r3, [pc, #68]	; (800303c <BMS_ScreenMode_ForceBalance+0xa4>)
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4910      	ldr	r1, [pc, #64]	; (8003040 <BMS_ScreenMode_ForceBalance+0xa8>)
 8002ffe:	480b      	ldr	r0, [pc, #44]	; (800302c <BMS_ScreenMode_ForceBalance+0x94>)
 8003000:	f008 ffae 	bl	800bf60 <siprintf>
	SSD1306_GotoXY(0,40);
 8003004:	2128      	movs	r1, #40	; 0x28
 8003006:	2000      	movs	r0, #0
 8003008:	f001 fb48 	bl	800469c <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 800300c:	2201      	movs	r2, #1
 800300e:	4909      	ldr	r1, [pc, #36]	; (8003034 <BMS_ScreenMode_ForceBalance+0x9c>)
 8003010:	4806      	ldr	r0, [pc, #24]	; (800302c <BMS_ScreenMode_ForceBalance+0x94>)
 8003012:	f001 fbd9 	bl	80047c8 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8003016:	f001 fa9d 	bl	8004554 <SSD1306_UpdateScreen>
	Batt_Open_Mode();
 800301a:	f7fe f9cb 	bl	80013b4 <Batt_Open_Mode>
}
 800301e:	bf00      	nop
 8003020:	bd98      	pop	{r3, r4, r7, pc}
 8003022:	bf00      	nop
 8003024:	20000934 	.word	0x20000934
 8003028:	20000bc0 	.word	0x20000bc0
 800302c:	20000bc4 	.word	0x20000bc4
 8003030:	0800dc20 	.word	0x0800dc20
 8003034:	20000008 	.word	0x20000008
 8003038:	0800dd10 	.word	0x0800dd10
 800303c:	20000bee 	.word	0x20000bee
 8003040:	0800dd20 	.word	0x0800dd20

08003044 <Calc_vcell_tot>:

void Calc_vcell_tot(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
	float v_cell_temporary;
	for(ij=0;ij<15;ij++)
 800304a:	4b13      	ldr	r3, [pc, #76]	; (8003098 <Calc_vcell_tot+0x54>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e00f      	b.n	8003072 <Calc_vcell_tot+0x2e>
	{
		v_cell_temporary+=vcell_15data[ij];
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <Calc_vcell_tot+0x54>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a11      	ldr	r2, [pc, #68]	; (800309c <Calc_vcell_tot+0x58>)
 8003058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fd fd68 	bl	8000b34 <__addsf3>
 8003064:	4603      	mov	r3, r0
 8003066:	607b      	str	r3, [r7, #4]
	for(ij=0;ij<15;ij++)
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <Calc_vcell_tot+0x54>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3301      	adds	r3, #1
 800306e:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <Calc_vcell_tot+0x54>)
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <Calc_vcell_tot+0x54>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b0e      	cmp	r3, #14
 8003078:	ddeb      	ble.n	8003052 <Calc_vcell_tot+0xe>
	}

	if(v_cell_temporary>10)
 800307a:	4909      	ldr	r1, [pc, #36]	; (80030a0 <Calc_vcell_tot+0x5c>)
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7fe f81d 	bl	80010bc <__aeabi_fcmpgt>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d100      	bne.n	800308a <Calc_vcell_tot+0x46>
	{
		v_cell_tot=v_cell_temporary;
	}

}
 8003088:	e002      	b.n	8003090 <Calc_vcell_tot+0x4c>
		v_cell_tot=v_cell_temporary;
 800308a:	4a06      	ldr	r2, [pc, #24]	; (80030a4 <Calc_vcell_tot+0x60>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6013      	str	r3, [r2, #0]
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000908 	.word	0x20000908
 800309c:	20000958 	.word	0x20000958
 80030a0:	41200000 	.word	0x41200000
 80030a4:	20000bbc 	.word	0x20000bbc

080030a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <ltc6812_GPIO_Config>:
void ltc6812_SPIInit(void);
void ltc6812_Delay(volatile uint32_t nCount);


void ltc6812_GPIO_Config(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIO clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80030ba:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <ltc6812_GPIO_Config+0xb0>)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	4a29      	ldr	r2, [pc, #164]	; (8003164 <ltc6812_GPIO_Config+0xb0>)
 80030c0:	f043 0304 	orr.w	r3, r3, #4
 80030c4:	6193      	str	r3, [r2, #24]
 80030c6:	4b27      	ldr	r3, [pc, #156]	; (8003164 <ltc6812_GPIO_Config+0xb0>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80030d2:	4b24      	ldr	r3, [pc, #144]	; (8003164 <ltc6812_GPIO_Config+0xb0>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	4a23      	ldr	r2, [pc, #140]	; (8003164 <ltc6812_GPIO_Config+0xb0>)
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	6193      	str	r3, [r2, #24]
 80030de:	4b21      	ldr	r3, [pc, #132]	; (8003164 <ltc6812_GPIO_Config+0xb0>)
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80030ea:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <ltc6812_GPIO_Config+0xb0>)
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	4a1d      	ldr	r2, [pc, #116]	; (8003164 <ltc6812_GPIO_Config+0xb0>)
 80030f0:	f043 0310 	orr.w	r3, r3, #16
 80030f4:	6193      	str	r3, [r2, #24]
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <ltc6812_GPIO_Config+0xb0>)
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin       = ltc6812_CS_PIN;
 8003102:	2301      	movs	r3, #1
 8003104:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003106:	2301      	movs	r3, #1
 8003108:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800310e:	2303      	movs	r3, #3
 8003110:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6812_CS_PORT, &GPIO_InitStructure);
 8003112:	f107 0310 	add.w	r3, r7, #16
 8003116:	4619      	mov	r1, r3
 8003118:	4813      	ldr	r0, [pc, #76]	; (8003168 <ltc6812_GPIO_Config+0xb4>)
 800311a:	f006 f953 	bl	80093c4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6812_SCK_PIN;
 800311e:	2308      	movs	r3, #8
 8003120:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6812_SCK_PORT, &GPIO_InitStructure);
 8003122:	f107 0310 	add.w	r3, r7, #16
 8003126:	4619      	mov	r1, r3
 8003128:	480f      	ldr	r0, [pc, #60]	; (8003168 <ltc6812_GPIO_Config+0xb4>)
 800312a:	f006 f94b 	bl	80093c4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6812_MOSI_PIN;
 800312e:	2320      	movs	r3, #32
 8003130:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6812_MOSI_PORT, &GPIO_InitStructure);
 8003132:	f107 0310 	add.w	r3, r7, #16
 8003136:	4619      	mov	r1, r3
 8003138:	480b      	ldr	r0, [pc, #44]	; (8003168 <ltc6812_GPIO_Config+0xb4>)
 800313a:	f006 f943 	bl	80093c4 <HAL_GPIO_Init>

	

	GPIO_InitStructure.Pin       = ltc6812_MISO_PIN;
 800313e:	2310      	movs	r3, #16
 8003140:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_INPUT;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8003146:	2300      	movs	r3, #0
 8003148:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800314a:	2301      	movs	r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6812_MISO_PORT, &GPIO_InitStructure);
 800314e:	f107 0310 	add.w	r3, r7, #16
 8003152:	4619      	mov	r1, r3
 8003154:	4804      	ldr	r0, [pc, #16]	; (8003168 <ltc6812_GPIO_Config+0xb4>)
 8003156:	f006 f935 	bl	80093c4 <HAL_GPIO_Init>
}
 800315a:	bf00      	nop
 800315c:	3720      	adds	r7, #32
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	40010c00 	.word	0x40010c00

0800316c <ltc6812_SPIInit>:

void ltc6812_SPIInit(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
	ltc6812_CS_SET(ltc6812_CS_PIN);
 8003170:	2201      	movs	r2, #1
 8003172:	2101      	movs	r1, #1
 8003174:	482a      	ldr	r0, [pc, #168]	; (8003220 <ltc6812_SPIInit+0xb4>)
 8003176:	f006 fa96 	bl	80096a6 <HAL_GPIO_WritePin>
	ltc6812_RESET_HIGH;
 800317a:	2201      	movs	r2, #1
 800317c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003180:	4828      	ldr	r0, [pc, #160]	; (8003224 <ltc6812_SPIInit+0xb8>)
 8003182:	f006 fa90 	bl	80096a6 <HAL_GPIO_WritePin>
	ltc6812_Delay(10);
 8003186:	200a      	movs	r0, #10
 8003188:	f000 f84e 	bl	8003228 <ltc6812_Delay>
	ltc6812_RESET_LOW;
 800318c:	2200      	movs	r2, #0
 800318e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003192:	4824      	ldr	r0, [pc, #144]	; (8003224 <ltc6812_SPIInit+0xb8>)
 8003194:	f006 fa87 	bl	80096a6 <HAL_GPIO_WritePin>
	ltc6812_Delay(2000);
 8003198:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800319c:	f000 f844 	bl	8003228 <ltc6812_Delay>
	ltc6812_RESET_HIGH;
 80031a0:	2201      	movs	r2, #1
 80031a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031a6:	481f      	ldr	r0, [pc, #124]	; (8003224 <ltc6812_SPIInit+0xb8>)
 80031a8:	f006 fa7d 	bl	80096a6 <HAL_GPIO_WritePin>
	ltc6812_Delay(10);
 80031ac:	200a      	movs	r0, #10
 80031ae:	f000 f83b 	bl	8003228 <ltc6812_Delay>

	//toggle CS 3 times to enter SPI Mode
	ltc6812_CS_RESET(ltc6812_CS_PIN);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2101      	movs	r1, #1
 80031b6:	481a      	ldr	r0, [pc, #104]	; (8003220 <ltc6812_SPIInit+0xb4>)
 80031b8:	f006 fa75 	bl	80096a6 <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 80031bc:	2064      	movs	r0, #100	; 0x64
 80031be:	f000 f833 	bl	8003228 <ltc6812_Delay>
	ltc6812_CS_SET(ltc6812_CS_PIN);
 80031c2:	2201      	movs	r2, #1
 80031c4:	2101      	movs	r1, #1
 80031c6:	4816      	ldr	r0, [pc, #88]	; (8003220 <ltc6812_SPIInit+0xb4>)
 80031c8:	f006 fa6d 	bl	80096a6 <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 80031cc:	2064      	movs	r0, #100	; 0x64
 80031ce:	f000 f82b 	bl	8003228 <ltc6812_Delay>
	ltc6812_CS_RESET(ltc6812_CS_PIN);
 80031d2:	2200      	movs	r2, #0
 80031d4:	2101      	movs	r1, #1
 80031d6:	4812      	ldr	r0, [pc, #72]	; (8003220 <ltc6812_SPIInit+0xb4>)
 80031d8:	f006 fa65 	bl	80096a6 <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 80031dc:	2064      	movs	r0, #100	; 0x64
 80031de:	f000 f823 	bl	8003228 <ltc6812_Delay>
	ltc6812_CS_SET(ltc6812_CS_PIN);
 80031e2:	2201      	movs	r2, #1
 80031e4:	2101      	movs	r1, #1
 80031e6:	480e      	ldr	r0, [pc, #56]	; (8003220 <ltc6812_SPIInit+0xb4>)
 80031e8:	f006 fa5d 	bl	80096a6 <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 80031ec:	2064      	movs	r0, #100	; 0x64
 80031ee:	f000 f81b 	bl	8003228 <ltc6812_Delay>
	ltc6812_CS_RESET(ltc6812_CS_PIN);
 80031f2:	2200      	movs	r2, #0
 80031f4:	2101      	movs	r1, #1
 80031f6:	480a      	ldr	r0, [pc, #40]	; (8003220 <ltc6812_SPIInit+0xb4>)
 80031f8:	f006 fa55 	bl	80096a6 <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 80031fc:	2064      	movs	r0, #100	; 0x64
 80031fe:	f000 f813 	bl	8003228 <ltc6812_Delay>
	ltc6812_CS_SET(ltc6812_CS_PIN);
 8003202:	2201      	movs	r2, #1
 8003204:	2101      	movs	r1, #1
 8003206:	4806      	ldr	r0, [pc, #24]	; (8003220 <ltc6812_SPIInit+0xb4>)
 8003208:	f006 fa4d 	bl	80096a6 <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 800320c:	2064      	movs	r0, #100	; 0x64
 800320e:	f000 f80b 	bl	8003228 <ltc6812_Delay>

	ltc6812_Delay(20000);
 8003212:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003216:	f000 f807 	bl	8003228 <ltc6812_Delay>
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40010c00 	.word	0x40010c00
 8003224:	40011000 	.word	0x40011000

08003228 <ltc6812_Delay>:

void ltc6812_Delay(volatile uint32_t nCount)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	while(nCount > 0) { nCount--; }
 8003230:	e002      	b.n	8003238 <ltc6812_Delay+0x10>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3b01      	subs	r3, #1
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f9      	bne.n	8003232 <ltc6812_Delay+0xa>
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <ltc6812_Write8>:

void ltc6812_Write8(uint8_t out)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	//ltc6812_CS_SET(CS_Pin);
	//ltc6812_MOSI_RESET;
	ltc6812_SCK_RESET;
 8003252:	2200      	movs	r2, #0
 8003254:	2108      	movs	r1, #8
 8003256:	481a      	ldr	r0, [pc, #104]	; (80032c0 <ltc6812_Write8+0x78>)
 8003258:	f006 fa25 	bl	80096a6 <HAL_GPIO_WritePin>
	//ltc6812_CS_RESET(CS_Pin);
	//ltc6812_Delay(10);
	for (i = 0; i < 8; i++) {
 800325c:	2300      	movs	r3, #0
 800325e:	73fb      	strb	r3, [r7, #15]
 8003260:	e027      	b.n	80032b2 <ltc6812_Write8+0x6a>
		if ((out >> (7-i)) & 0x01) {
 8003262:	79fa      	ldrb	r2, [r7, #7]
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	f1c3 0307 	rsb	r3, r3, #7
 800326a:	fa42 f303 	asr.w	r3, r2, r3
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <ltc6812_Write8+0x3a>
			ltc6812_MOSI_SET;
 8003276:	2201      	movs	r2, #1
 8003278:	2120      	movs	r1, #32
 800327a:	4811      	ldr	r0, [pc, #68]	; (80032c0 <ltc6812_Write8+0x78>)
 800327c:	f006 fa13 	bl	80096a6 <HAL_GPIO_WritePin>
 8003280:	e004      	b.n	800328c <ltc6812_Write8+0x44>
		} else {
			ltc6812_MOSI_RESET;
 8003282:	2200      	movs	r2, #0
 8003284:	2120      	movs	r1, #32
 8003286:	480e      	ldr	r0, [pc, #56]	; (80032c0 <ltc6812_Write8+0x78>)
 8003288:	f006 fa0d 	bl	80096a6 <HAL_GPIO_WritePin>
		}
		ltc6812_Delay(10);
 800328c:	200a      	movs	r0, #10
 800328e:	f7ff ffcb 	bl	8003228 <ltc6812_Delay>
		ltc6812_SCK_SET;
 8003292:	2201      	movs	r2, #1
 8003294:	2108      	movs	r1, #8
 8003296:	480a      	ldr	r0, [pc, #40]	; (80032c0 <ltc6812_Write8+0x78>)
 8003298:	f006 fa05 	bl	80096a6 <HAL_GPIO_WritePin>
		ltc6812_Delay(10);
 800329c:	200a      	movs	r0, #10
 800329e:	f7ff ffc3 	bl	8003228 <ltc6812_Delay>
		ltc6812_SCK_RESET;
 80032a2:	2200      	movs	r2, #0
 80032a4:	2108      	movs	r1, #8
 80032a6:	4806      	ldr	r0, [pc, #24]	; (80032c0 <ltc6812_Write8+0x78>)
 80032a8:	f006 f9fd 	bl	80096a6 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	3301      	adds	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	2b07      	cmp	r3, #7
 80032b6:	d9d4      	bls.n	8003262 <ltc6812_Write8+0x1a>
	}
}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40010c00 	.word	0x40010c00

080032c4 <ltc6812_Read8>:
		ltc6812_SCK_SET;
	}
}

uint8_t ltc6812_Read8()
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t temp = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	71bb      	strb	r3, [r7, #6]
	//ltc6812_Delay(10);
	//ltc6812_CS_RESET(CS_Pin);
	ltc6812_MOSI_RESET;
 80032ce:	2200      	movs	r2, #0
 80032d0:	2120      	movs	r1, #32
 80032d2:	481e      	ldr	r0, [pc, #120]	; (800334c <ltc6812_Read8+0x88>)
 80032d4:	f006 f9e7 	bl	80096a6 <HAL_GPIO_WritePin>
	ltc6812_SCK_RESET;
 80032d8:	2200      	movs	r2, #0
 80032da:	2108      	movs	r1, #8
 80032dc:	481b      	ldr	r0, [pc, #108]	; (800334c <ltc6812_Read8+0x88>)
 80032de:	f006 f9e2 	bl	80096a6 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 80032e2:	2300      	movs	r3, #0
 80032e4:	71fb      	strb	r3, [r7, #7]
 80032e6:	e028      	b.n	800333a <ltc6812_Read8+0x76>
		ltc6812_Delay(10);
 80032e8:	200a      	movs	r0, #10
 80032ea:	f7ff ff9d 	bl	8003228 <ltc6812_Delay>
		ltc6812_SCK_SET;
 80032ee:	2201      	movs	r2, #1
 80032f0:	2108      	movs	r1, #8
 80032f2:	4816      	ldr	r0, [pc, #88]	; (800334c <ltc6812_Read8+0x88>)
 80032f4:	f006 f9d7 	bl	80096a6 <HAL_GPIO_WritePin>
		ltc6812_Delay(10);
 80032f8:	200a      	movs	r0, #10
 80032fa:	f7ff ff95 	bl	8003228 <ltc6812_Delay>
		if (ltc6812_MISO == GPIO_PIN_SET) {
 80032fe:	2110      	movs	r1, #16
 8003300:	4812      	ldr	r0, [pc, #72]	; (800334c <ltc6812_Read8+0x88>)
 8003302:	f006 f9b9 	bl	8009678 <HAL_GPIO_ReadPin>
 8003306:	4603      	mov	r3, r0
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10b      	bne.n	8003324 <ltc6812_Read8+0x60>
			temp |= (1 << (7-i));
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	f1c3 0307 	rsb	r3, r3, #7
 8003312:	2201      	movs	r2, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	b25a      	sxtb	r2, r3
 800331a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800331e:	4313      	orrs	r3, r2
 8003320:	b25b      	sxtb	r3, r3
 8003322:	71bb      	strb	r3, [r7, #6]
		}
		ltc6812_Delay(10);
 8003324:	200a      	movs	r0, #10
 8003326:	f7ff ff7f 	bl	8003228 <ltc6812_Delay>
		ltc6812_SCK_RESET;
 800332a:	2200      	movs	r2, #0
 800332c:	2108      	movs	r1, #8
 800332e:	4807      	ldr	r0, [pc, #28]	; (800334c <ltc6812_Read8+0x88>)
 8003330:	f006 f9b9 	bl	80096a6 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	3301      	adds	r3, #1
 8003338:	71fb      	strb	r3, [r7, #7]
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	2b07      	cmp	r3, #7
 800333e:	d9d3      	bls.n	80032e8 <ltc6812_Read8+0x24>
	}
	//ltc6812_CS_SET(CS_Pin);

	return temp;
 8003340:	79bb      	ldrb	r3, [r7, #6]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40010c00 	.word	0x40010c00

08003350 <LTC681x_adcv_emul>:

void LTC681x_adcv_emul( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH //Cell Channels to be measured
                 )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
 800335a:	460b      	mov	r3, r1
 800335c:	71bb      	strb	r3, [r7, #6]
 800335e:	4613      	mov	r3, r2
 8003360:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;
	
	md_bits = (MD & 0x02) >> 1;
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	105b      	asrs	r3, r3, #1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	3302      	adds	r3, #2
 8003372:	b2db      	uxtb	r3, r3
 8003374:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	01db      	lsls	r3, r3, #7
 800337a:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 800337c:	79bb      	ldrb	r3, [r7, #6]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	b2da      	uxtb	r2, r3
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	4413      	add	r3, r2
 8003386:	b2da      	uxtb	r2, r3
 8003388:	797b      	ldrb	r3, [r7, #5]
 800338a:	4413      	add	r3, r2
 800338c:	b2db      	uxtb	r3, r3
 800338e:	3360      	adds	r3, #96	; 0x60
 8003390:	b2db      	uxtb	r3, r3
 8003392:	737b      	strb	r3, [r7, #13]
	
	cmd_68_emul(cmd);
 8003394:	f107 030c 	add.w	r3, r7, #12
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f805 	bl	80033a8 <cmd_68_emul>
}
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <cmd_68_emul>:

void cmd_68_emul(uint8_t tx_cmd[2])
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4];
    uint16_t cmd_pec;
//    uint8_t md_bits;

    cmd[0] = tx_cmd[0];
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	723b      	strb	r3, [r7, #8]
    cmd[1] =  tx_cmd[1];
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	785b      	ldrb	r3, [r3, #1]
 80033ba:	727b      	strb	r3, [r7, #9]
    cmd_pec = pec15_calc_emul(2, cmd);
 80033bc:	f107 0308 	add.w	r3, r7, #8
 80033c0:	4619      	mov	r1, r3
 80033c2:	2002      	movs	r0, #2
 80033c4:	f000 f82a 	bl	800341c <pec15_calc_emul>
 80033c8:	4603      	mov	r3, r0
 80033ca:	81fb      	strh	r3, [r7, #14]
    cmd[2] = (uint8_t)(cmd_pec >> 8);
 80033cc:	89fb      	ldrh	r3, [r7, #14]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t)(cmd_pec);
 80033d6:	89fb      	ldrh	r3, [r7, #14]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	72fb      	strb	r3, [r7, #11]
    ltc6812_CS_RESET(ltc6812_CS_PIN);
 80033dc:	2200      	movs	r2, #0
 80033de:	2101      	movs	r1, #1
 80033e0:	480d      	ldr	r0, [pc, #52]	; (8003418 <cmd_68_emul+0x70>)
 80033e2:	f006 f960 	bl	80096a6 <HAL_GPIO_WritePin>
    ltc6812_Write8(cmd[0]);
 80033e6:	7a3b      	ldrb	r3, [r7, #8]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ff2d 	bl	8003248 <ltc6812_Write8>
		ltc6812_Write8(cmd[1]);
 80033ee:	7a7b      	ldrb	r3, [r7, #9]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff29 	bl	8003248 <ltc6812_Write8>
		ltc6812_Write8(cmd[2]);
 80033f6:	7abb      	ldrb	r3, [r7, #10]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff25 	bl	8003248 <ltc6812_Write8>
		ltc6812_Write8(cmd[3]);
 80033fe:	7afb      	ldrb	r3, [r7, #11]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff21 	bl	8003248 <ltc6812_Write8>
    ltc6812_CS_SET(ltc6812_CS_PIN);
 8003406:	2201      	movs	r2, #1
 8003408:	2101      	movs	r1, #1
 800340a:	4803      	ldr	r0, [pc, #12]	; (8003418 <cmd_68_emul+0x70>)
 800340c:	f006 f94b 	bl	80096a6 <HAL_GPIO_WritePin>

}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40010c00 	.word	0x40010c00

0800341c <pec15_calc_emul>:


uint16_t pec15_calc_emul(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	6039      	str	r1, [r7, #0]
 8003426:	71fb      	strb	r3, [r7, #7]
    uint16_t remainder,addr;

    remainder = 16;//initialize the PEC
 8003428:	2310      	movs	r3, #16
 800342a:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i<len; i++) { // loops for each byte in data array
 800342c:	2300      	movs	r3, #0
 800342e:	737b      	strb	r3, [r7, #13]
 8003430:	e019      	b.n	8003466 <pec15_calc_emul+0x4a>
        addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8003432:	89fb      	ldrh	r3, [r7, #14]
 8003434:	09db      	lsrs	r3, r3, #7
 8003436:	b29a      	uxth	r2, r3
 8003438:	7b7b      	ldrb	r3, [r7, #13]
 800343a:	6839      	ldr	r1, [r7, #0]
 800343c:	440b      	add	r3, r1
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	4053      	eors	r3, r2
 8003444:	b29b      	uxth	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	817b      	strh	r3, [r7, #10]
//#ifdef MBED
        remainder = (remainder<<8)^crc15Table[addr];
 800344a:	89fb      	ldrh	r3, [r7, #14]
 800344c:	021b      	lsls	r3, r3, #8
 800344e:	b21a      	sxth	r2, r3
 8003450:	897b      	ldrh	r3, [r7, #10]
 8003452:	490b      	ldr	r1, [pc, #44]	; (8003480 <pec15_calc_emul+0x64>)
 8003454:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003458:	b21b      	sxth	r3, r3
 800345a:	4053      	eors	r3, r2
 800345c:	b21b      	sxth	r3, r3
 800345e:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i<len; i++) { // loops for each byte in data array
 8003460:	7b7b      	ldrb	r3, [r7, #13]
 8003462:	3301      	adds	r3, #1
 8003464:	737b      	strb	r3, [r7, #13]
 8003466:	7b7a      	ldrb	r2, [r7, #13]
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	429a      	cmp	r2, r3
 800346c:	d3e1      	bcc.n	8003432 <pec15_calc_emul+0x16>
//#else
//        remainder = (remainder<<8)^pgm_read_word_near(crc15Table+addr);
//#endif
    }
    return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 800346e:	89fb      	ldrh	r3, [r7, #14]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	b29b      	uxth	r3, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	0800e4a8 	.word	0x0800e4a8

08003484 <LTC681x_rdcv_reg_emul>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg_emul(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t data_out[8] //An array of the unparsed cell codes
                     )
{
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	603a      	str	r2, [r7, #0]
 800348e:	71fb      	strb	r3, [r7, #7]
 8003490:	460b      	mov	r3, r1
 8003492:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d104      	bne.n	80034a4 <LTC681x_rdcv_reg_emul+0x20>
	{
		cmd[1] = 0x04;  //alamat asli 0x04
 800349a:	2304      	movs	r3, #4
 800349c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800349e:	2300      	movs	r3, #0
 80034a0:	723b      	strb	r3, [r7, #8]
 80034a2:	e026      	b.n	80034f2 <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 2) //2: RDCVB
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d104      	bne.n	80034b4 <LTC681x_rdcv_reg_emul+0x30>
	{
		cmd[1] = 0x06;
 80034aa:	2306      	movs	r3, #6
 80034ac:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80034ae:	2300      	movs	r3, #0
 80034b0:	723b      	strb	r3, [r7, #8]
 80034b2:	e01e      	b.n	80034f2 <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 3) //3: RDCVC
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d104      	bne.n	80034c4 <LTC681x_rdcv_reg_emul+0x40>
	{
		cmd[1] = 0x08;
 80034ba:	2308      	movs	r3, #8
 80034bc:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80034be:	2300      	movs	r3, #0
 80034c0:	723b      	strb	r3, [r7, #8]
 80034c2:	e016      	b.n	80034f2 <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 4) //4: RDCVD
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d104      	bne.n	80034d4 <LTC681x_rdcv_reg_emul+0x50>
	{
		cmd[1] = 0x0A;
 80034ca:	230a      	movs	r3, #10
 80034cc:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80034ce:	2300      	movs	r3, #0
 80034d0:	723b      	strb	r3, [r7, #8]
 80034d2:	e00e      	b.n	80034f2 <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 5) //4: RDCVE
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d104      	bne.n	80034e4 <LTC681x_rdcv_reg_emul+0x60>
	{
		cmd[1] = 0x09;
 80034da:	2309      	movs	r3, #9
 80034dc:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80034de:	2300      	movs	r3, #0
 80034e0:	723b      	strb	r3, [r7, #8]
 80034e2:	e006      	b.n	80034f2 <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 6) //4: RDCVF
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	2b06      	cmp	r3, #6
 80034e8:	d103      	bne.n	80034f2 <LTC681x_rdcv_reg_emul+0x6e>
	{
		cmd[1] = 0x0B;
 80034ea:	230b      	movs	r3, #11
 80034ec:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80034ee:	2300      	movs	r3, #0
 80034f0:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc_emul(2, cmd);
 80034f2:	f107 0308 	add.w	r3, r7, #8
 80034f6:	4619      	mov	r1, r3
 80034f8:	2002      	movs	r0, #2
 80034fa:	f7ff ff8f 	bl	800341c <pec15_calc_emul>
 80034fe:	4603      	mov	r3, r0
 8003500:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003502:	89fb      	ldrh	r3, [r7, #14]
 8003504:	0a1b      	lsrs	r3, r3, #8
 8003506:	b29b      	uxth	r3, r3
 8003508:	b2db      	uxtb	r3, r3
 800350a:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800350c:	89fb      	ldrh	r3, [r7, #14]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	72fb      	strb	r3, [r7, #11]

	ltc6812_CS_RESET(ltc6812_CS_PIN);
 8003512:	2200      	movs	r2, #0
 8003514:	2101      	movs	r1, #1
 8003516:	4826      	ldr	r0, [pc, #152]	; (80035b0 <LTC681x_rdcv_reg_emul+0x12c>)
 8003518:	f006 f8c5 	bl	80096a6 <HAL_GPIO_WritePin>
  ltc6812_Write8(cmd[0]);
 800351c:	7a3b      	ldrb	r3, [r7, #8]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fe92 	bl	8003248 <ltc6812_Write8>
	ltc6812_Write8(cmd[1]);
 8003524:	7a7b      	ldrb	r3, [r7, #9]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fe8e 	bl	8003248 <ltc6812_Write8>
	ltc6812_Write8(cmd[2]);
 800352c:	7abb      	ldrb	r3, [r7, #10]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fe8a 	bl	8003248 <ltc6812_Write8>
	ltc6812_Write8(cmd[3]);
 8003534:	7afb      	ldrb	r3, [r7, #11]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fe86 	bl	8003248 <ltc6812_Write8>
	
	data_out[0]= ltc6812_Read8();
 800353c:	f7ff fec2 	bl	80032c4 <ltc6812_Read8>
 8003540:	4603      	mov	r3, r0
 8003542:	461a      	mov	r2, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	701a      	strb	r2, [r3, #0]
	data_out[1]= ltc6812_Read8();
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	1c5c      	adds	r4, r3, #1
 800354c:	f7ff feba 	bl	80032c4 <ltc6812_Read8>
 8003550:	4603      	mov	r3, r0
 8003552:	7023      	strb	r3, [r4, #0]
	data_out[2]= ltc6812_Read8();
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	1c9c      	adds	r4, r3, #2
 8003558:	f7ff feb4 	bl	80032c4 <ltc6812_Read8>
 800355c:	4603      	mov	r3, r0
 800355e:	7023      	strb	r3, [r4, #0]
	data_out[3]= ltc6812_Read8();
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	1cdc      	adds	r4, r3, #3
 8003564:	f7ff feae 	bl	80032c4 <ltc6812_Read8>
 8003568:	4603      	mov	r3, r0
 800356a:	7023      	strb	r3, [r4, #0]
	data_out[4]= ltc6812_Read8();
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	1d1c      	adds	r4, r3, #4
 8003570:	f7ff fea8 	bl	80032c4 <ltc6812_Read8>
 8003574:	4603      	mov	r3, r0
 8003576:	7023      	strb	r3, [r4, #0]
	data_out[5]= ltc6812_Read8();
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	1d5c      	adds	r4, r3, #5
 800357c:	f7ff fea2 	bl	80032c4 <ltc6812_Read8>
 8003580:	4603      	mov	r3, r0
 8003582:	7023      	strb	r3, [r4, #0]
	data_out[6]= ltc6812_Read8();
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	1d9c      	adds	r4, r3, #6
 8003588:	f7ff fe9c 	bl	80032c4 <ltc6812_Read8>
 800358c:	4603      	mov	r3, r0
 800358e:	7023      	strb	r3, [r4, #0]
	data_out[7]= ltc6812_Read8();
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	1ddc      	adds	r4, r3, #7
 8003594:	f7ff fe96 	bl	80032c4 <ltc6812_Read8>
 8003598:	4603      	mov	r3, r0
 800359a:	7023      	strb	r3, [r4, #0]
	
  ltc6812_CS_SET(ltc6812_CS_PIN);
 800359c:	2201      	movs	r2, #1
 800359e:	2101      	movs	r1, #1
 80035a0:	4803      	ldr	r0, [pc, #12]	; (80035b0 <LTC681x_rdcv_reg_emul+0x12c>)
 80035a2:	f006 f880 	bl	80096a6 <HAL_GPIO_WritePin>
	
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd90      	pop	{r4, r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40010c00 	.word	0x40010c00
 80035b4:	00000000 	.word	0x00000000

080035b8 <read_v_15cell>:
	cell_data[ccc]=v_cell_digi*0.0001;
	
}

void read_v_15cell(uint16_t v_cell_digi[15],float vcell_data[15])
{
 80035b8:	b590      	push	{r4, r7, lr}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
		uint8_t cmd_v[8];
		uint8_t cc=0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	75fb      	strb	r3, [r7, #23]
		
		HAL_GPIO_WritePin(CS_SPI1_GPIO_Port,CS_SPI1_Pin,GPIO_PIN_RESET);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2101      	movs	r1, #1
 80035ca:	48c7      	ldr	r0, [pc, #796]	; (80038e8 <read_v_15cell+0x330>)
 80035cc:	f006 f86b 	bl	80096a6 <HAL_GPIO_WritePin>
		cmd2[0]=0x07;
 80035d0:	4bc6      	ldr	r3, [pc, #792]	; (80038ec <read_v_15cell+0x334>)
 80035d2:	2207      	movs	r2, #7
 80035d4:	701a      	strb	r2, [r3, #0]
		cmd2[1]=0x23;
 80035d6:	4bc5      	ldr	r3, [pc, #788]	; (80038ec <read_v_15cell+0x334>)
 80035d8:	2223      	movs	r2, #35	; 0x23
 80035da:	705a      	strb	r2, [r3, #1]
		cmd_68_emul(cmd2);	
 80035dc:	48c3      	ldr	r0, [pc, #780]	; (80038ec <read_v_15cell+0x334>)
 80035de:	f7ff fee3 	bl	80033a8 <cmd_68_emul>
		HAL_Delay(1);
 80035e2:	2001      	movs	r0, #1
 80035e4:	f004 f940 	bl	8007868 <HAL_Delay>
		LTC681x_adcv_emul(0,1,0);
 80035e8:	2200      	movs	r2, #0
 80035ea:	2101      	movs	r1, #1
 80035ec:	2000      	movs	r0, #0
 80035ee:	f7ff feaf 	bl	8003350 <LTC681x_adcv_emul>
		HAL_Delay(700);
 80035f2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80035f6:	f004 f937 	bl	8007868 <HAL_Delay>
	
		LTC681x_rdcv_reg_emul(1,1,cmd_v);
 80035fa:	f107 030c 	add.w	r3, r7, #12
 80035fe:	461a      	mov	r2, r3
 8003600:	2101      	movs	r1, #1
 8003602:	2001      	movs	r0, #1
 8003604:	f7ff ff3e 	bl	8003484 <LTC681x_rdcv_reg_emul>
		
		v_cell_digi[cc]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc];
 8003608:	7dfb      	ldrb	r3, [r7, #23]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	3301      	adds	r3, #1
 800360e:	f107 0218 	add.w	r2, r7, #24
 8003612:	4413      	add	r3, r2
 8003614:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	7dfa      	ldrb	r2, [r7, #23]
 800361c:	0052      	lsls	r2, r2, #1
 800361e:	f107 0118 	add.w	r1, r7, #24
 8003622:	440a      	add	r2, r1
 8003624:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003628:	4313      	orrs	r3, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f7fd fb36 	bl	8000c9c <__aeabi_i2f>
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	4aaf      	ldr	r2, [pc, #700]	; (80038f0 <read_v_15cell+0x338>)
 8003634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003638:	4619      	mov	r1, r3
 800363a:	f7fd fa79 	bl	8000b30 <__aeabi_fsub>
 800363e:	4603      	mov	r3, r0
 8003640:	4619      	mov	r1, r3
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	18d4      	adds	r4, r2, r3
 800364a:	4608      	mov	r0, r1
 800364c:	f7fd fd66 	bl	800111c <__aeabi_f2uiz>
 8003650:	4603      	mov	r3, r0
 8003652:	b29b      	uxth	r3, r3
 8003654:	8023      	strh	r3, [r4, #0]
		vcell_data[cc]=v_cell_digi[cc]*0.0001;
 8003656:	7dfb      	ldrb	r3, [r7, #23]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	4413      	add	r3, r2
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fc fecf 	bl	8000404 <__aeabi_i2d>
 8003666:	a39e      	add	r3, pc, #632	; (adr r3, 80038e0 <read_v_15cell+0x328>)
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f7fc ff34 	bl	80004d8 <__aeabi_dmul>
 8003670:	4603      	mov	r3, r0
 8003672:	460c      	mov	r4, r1
 8003674:	4618      	mov	r0, r3
 8003676:	4621      	mov	r1, r4
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	18d4      	adds	r4, r2, r3
 8003680:	f7fd fa02 	bl	8000a88 <__aeabi_d2f>
 8003684:	4603      	mov	r3, r0
 8003686:	6023      	str	r3, [r4, #0]
		cc++;
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	3301      	adds	r3, #1
 800368c:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc];
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	3301      	adds	r3, #1
 8003694:	f107 0218 	add.w	r2, r7, #24
 8003698:	4413      	add	r3, r2
 800369a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	7dfa      	ldrb	r2, [r7, #23]
 80036a2:	0052      	lsls	r2, r2, #1
 80036a4:	f107 0118 	add.w	r1, r7, #24
 80036a8:	440a      	add	r2, r1
 80036aa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fd faf3 	bl	8000c9c <__aeabi_i2f>
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
 80036b8:	4a8d      	ldr	r2, [pc, #564]	; (80038f0 <read_v_15cell+0x338>)
 80036ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036be:	4619      	mov	r1, r3
 80036c0:	f7fd fa36 	bl	8000b30 <__aeabi_fsub>
 80036c4:	4603      	mov	r3, r0
 80036c6:	4619      	mov	r1, r3
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	18d4      	adds	r4, r2, r3
 80036d0:	4608      	mov	r0, r1
 80036d2:	f7fd fd23 	bl	800111c <__aeabi_f2uiz>
 80036d6:	4603      	mov	r3, r0
 80036d8:	b29b      	uxth	r3, r3
 80036da:	8023      	strh	r3, [r4, #0]
		vcell_data[cc]=v_cell_digi[cc]*0.0001;
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	4413      	add	r3, r2
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fc fe8c 	bl	8000404 <__aeabi_i2d>
 80036ec:	a37c      	add	r3, pc, #496	; (adr r3, 80038e0 <read_v_15cell+0x328>)
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	f7fc fef1 	bl	80004d8 <__aeabi_dmul>
 80036f6:	4603      	mov	r3, r0
 80036f8:	460c      	mov	r4, r1
 80036fa:	4618      	mov	r0, r3
 80036fc:	4621      	mov	r1, r4
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	18d4      	adds	r4, r2, r3
 8003706:	f7fd f9bf 	bl	8000a88 <__aeabi_d2f>
 800370a:	4603      	mov	r3, r0
 800370c:	6023      	str	r3, [r4, #0]
		cc++;
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	3301      	adds	r3, #1
 8003712:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc];
 8003714:	7dfb      	ldrb	r3, [r7, #23]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	3301      	adds	r3, #1
 800371a:	f107 0218 	add.w	r2, r7, #24
 800371e:	4413      	add	r3, r2
 8003720:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	7dfa      	ldrb	r2, [r7, #23]
 8003728:	0052      	lsls	r2, r2, #1
 800372a:	f107 0118 	add.w	r1, r7, #24
 800372e:	440a      	add	r2, r1
 8003730:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003734:	4313      	orrs	r3, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd fab0 	bl	8000c9c <__aeabi_i2f>
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	4a6c      	ldr	r2, [pc, #432]	; (80038f0 <read_v_15cell+0x338>)
 8003740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003744:	4619      	mov	r1, r3
 8003746:	f7fd f9f3 	bl	8000b30 <__aeabi_fsub>
 800374a:	4603      	mov	r3, r0
 800374c:	4619      	mov	r1, r3
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	18d4      	adds	r4, r2, r3
 8003756:	4608      	mov	r0, r1
 8003758:	f7fd fce0 	bl	800111c <__aeabi_f2uiz>
 800375c:	4603      	mov	r3, r0
 800375e:	b29b      	uxth	r3, r3
 8003760:	8023      	strh	r3, [r4, #0]
		vcell_data[cc]=v_cell_digi[cc]*0.0001;
 8003762:	7dfb      	ldrb	r3, [r7, #23]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	4413      	add	r3, r2
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7fc fe49 	bl	8000404 <__aeabi_i2d>
 8003772:	a35b      	add	r3, pc, #364	; (adr r3, 80038e0 <read_v_15cell+0x328>)
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f7fc feae 	bl	80004d8 <__aeabi_dmul>
 800377c:	4603      	mov	r3, r0
 800377e:	460c      	mov	r4, r1
 8003780:	4618      	mov	r0, r3
 8003782:	4621      	mov	r1, r4
 8003784:	7dfb      	ldrb	r3, [r7, #23]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	18d4      	adds	r4, r2, r3
 800378c:	f7fd f97c 	bl	8000a88 <__aeabi_d2f>
 8003790:	4603      	mov	r3, r0
 8003792:	6023      	str	r3, [r4, #0]
		cc++;
 8003794:	7dfb      	ldrb	r3, [r7, #23]
 8003796:	3301      	adds	r3, #1
 8003798:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(2,1,cmd_v);
 800379a:	f107 030c 	add.w	r3, r7, #12
 800379e:	461a      	mov	r2, r3
 80037a0:	2101      	movs	r1, #1
 80037a2:	2002      	movs	r0, #2
 80037a4:	f7ff fe6e 	bl	8003484 <LTC681x_rdcv_reg_emul>
		cc=0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+3]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+3];
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	3301      	adds	r3, #1
 80037b2:	f107 0218 	add.w	r2, r7, #24
 80037b6:	4413      	add	r3, r2
 80037b8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80037bc:	021b      	lsls	r3, r3, #8
 80037be:	7dfa      	ldrb	r2, [r7, #23]
 80037c0:	0052      	lsls	r2, r2, #1
 80037c2:	f107 0118 	add.w	r1, r7, #24
 80037c6:	440a      	add	r2, r1
 80037c8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fd fa64 	bl	8000c9c <__aeabi_i2f>
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	3303      	adds	r3, #3
 80037d8:	4a45      	ldr	r2, [pc, #276]	; (80038f0 <read_v_15cell+0x338>)
 80037da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037de:	4619      	mov	r1, r3
 80037e0:	f7fd f9a6 	bl	8000b30 <__aeabi_fsub>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4619      	mov	r1, r3
 80037e8:	7dfb      	ldrb	r3, [r7, #23]
 80037ea:	3303      	adds	r3, #3
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	18d4      	adds	r4, r2, r3
 80037f2:	4608      	mov	r0, r1
 80037f4:	f7fd fc92 	bl	800111c <__aeabi_f2uiz>
 80037f8:	4603      	mov	r3, r0
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+3]=v_cell_digi[cc+3]*0.0001;
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
 8003800:	3303      	adds	r3, #3
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fc fdfa 	bl	8000404 <__aeabi_i2d>
 8003810:	a333      	add	r3, pc, #204	; (adr r3, 80038e0 <read_v_15cell+0x328>)
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f7fc fe5f 	bl	80004d8 <__aeabi_dmul>
 800381a:	4603      	mov	r3, r0
 800381c:	460c      	mov	r4, r1
 800381e:	4618      	mov	r0, r3
 8003820:	4621      	mov	r1, r4
 8003822:	7dfb      	ldrb	r3, [r7, #23]
 8003824:	3303      	adds	r3, #3
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	18d4      	adds	r4, r2, r3
 800382c:	f7fd f92c 	bl	8000a88 <__aeabi_d2f>
 8003830:	4603      	mov	r3, r0
 8003832:	6023      	str	r3, [r4, #0]
		cc++;
 8003834:	7dfb      	ldrb	r3, [r7, #23]
 8003836:	3301      	adds	r3, #1
 8003838:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+3]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+3];
 800383a:	7dfb      	ldrb	r3, [r7, #23]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	3301      	adds	r3, #1
 8003840:	f107 0218 	add.w	r2, r7, #24
 8003844:	4413      	add	r3, r2
 8003846:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	7dfa      	ldrb	r2, [r7, #23]
 800384e:	0052      	lsls	r2, r2, #1
 8003850:	f107 0118 	add.w	r1, r7, #24
 8003854:	440a      	add	r2, r1
 8003856:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800385a:	4313      	orrs	r3, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f7fd fa1d 	bl	8000c9c <__aeabi_i2f>
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	3303      	adds	r3, #3
 8003866:	4a22      	ldr	r2, [pc, #136]	; (80038f0 <read_v_15cell+0x338>)
 8003868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386c:	4619      	mov	r1, r3
 800386e:	f7fd f95f 	bl	8000b30 <__aeabi_fsub>
 8003872:	4603      	mov	r3, r0
 8003874:	4619      	mov	r1, r3
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	3303      	adds	r3, #3
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	18d4      	adds	r4, r2, r3
 8003880:	4608      	mov	r0, r1
 8003882:	f7fd fc4b 	bl	800111c <__aeabi_f2uiz>
 8003886:	4603      	mov	r3, r0
 8003888:	b29b      	uxth	r3, r3
 800388a:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+3]=v_cell_digi[cc+3]*0.0001;
 800388c:	7dfb      	ldrb	r3, [r7, #23]
 800388e:	3303      	adds	r3, #3
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7fc fdb3 	bl	8000404 <__aeabi_i2d>
 800389e:	a310      	add	r3, pc, #64	; (adr r3, 80038e0 <read_v_15cell+0x328>)
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f7fc fe18 	bl	80004d8 <__aeabi_dmul>
 80038a8:	4603      	mov	r3, r0
 80038aa:	460c      	mov	r4, r1
 80038ac:	4618      	mov	r0, r3
 80038ae:	4621      	mov	r1, r4
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	3303      	adds	r3, #3
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	18d4      	adds	r4, r2, r3
 80038ba:	f7fd f8e5 	bl	8000a88 <__aeabi_d2f>
 80038be:	4603      	mov	r3, r0
 80038c0:	6023      	str	r3, [r4, #0]
		cc++;
 80038c2:	7dfb      	ldrb	r3, [r7, #23]
 80038c4:	3301      	adds	r3, #1
 80038c6:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+3]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+3];
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	3301      	adds	r3, #1
 80038ce:	f107 0218 	add.w	r2, r7, #24
 80038d2:	4413      	add	r3, r2
 80038d4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	e00b      	b.n	80038f4 <read_v_15cell+0x33c>
 80038dc:	f3af 8000 	nop.w
 80038e0:	eb1c432d 	.word	0xeb1c432d
 80038e4:	3f1a36e2 	.word	0x3f1a36e2
 80038e8:	40010c00 	.word	0x40010c00
 80038ec:	20000bec 	.word	0x20000bec
 80038f0:	20000014 	.word	0x20000014
 80038f4:	7dfa      	ldrb	r2, [r7, #23]
 80038f6:	0052      	lsls	r2, r2, #1
 80038f8:	f107 0118 	add.w	r1, r7, #24
 80038fc:	440a      	add	r2, r1
 80038fe:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003902:	4313      	orrs	r3, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f7fd f9c9 	bl	8000c9c <__aeabi_i2f>
 800390a:	7dfb      	ldrb	r3, [r7, #23]
 800390c:	3303      	adds	r3, #3
 800390e:	4ac6      	ldr	r2, [pc, #792]	; (8003c28 <read_v_15cell+0x670>)
 8003910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003914:	4619      	mov	r1, r3
 8003916:	f7fd f90b 	bl	8000b30 <__aeabi_fsub>
 800391a:	4603      	mov	r3, r0
 800391c:	4619      	mov	r1, r3
 800391e:	7dfb      	ldrb	r3, [r7, #23]
 8003920:	3303      	adds	r3, #3
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	18d4      	adds	r4, r2, r3
 8003928:	4608      	mov	r0, r1
 800392a:	f7fd fbf7 	bl	800111c <__aeabi_f2uiz>
 800392e:	4603      	mov	r3, r0
 8003930:	b29b      	uxth	r3, r3
 8003932:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+3]=v_cell_digi[cc+3]*0.0001;
 8003934:	7dfb      	ldrb	r3, [r7, #23]
 8003936:	3303      	adds	r3, #3
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7fc fd5f 	bl	8000404 <__aeabi_i2d>
 8003946:	a3b6      	add	r3, pc, #728	; (adr r3, 8003c20 <read_v_15cell+0x668>)
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	f7fc fdc4 	bl	80004d8 <__aeabi_dmul>
 8003950:	4603      	mov	r3, r0
 8003952:	460c      	mov	r4, r1
 8003954:	4618      	mov	r0, r3
 8003956:	4621      	mov	r1, r4
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	3303      	adds	r3, #3
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	18d4      	adds	r4, r2, r3
 8003962:	f7fd f891 	bl	8000a88 <__aeabi_d2f>
 8003966:	4603      	mov	r3, r0
 8003968:	6023      	str	r3, [r4, #0]
		cc++;
 800396a:	7dfb      	ldrb	r3, [r7, #23]
 800396c:	3301      	adds	r3, #1
 800396e:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(3,1,cmd_v);
 8003970:	f107 030c 	add.w	r3, r7, #12
 8003974:	461a      	mov	r2, r3
 8003976:	2101      	movs	r1, #1
 8003978:	2003      	movs	r0, #3
 800397a:	f7ff fd83 	bl	8003484 <LTC681x_rdcv_reg_emul>
		cc=0;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+6]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+6];
 8003982:	7dfb      	ldrb	r3, [r7, #23]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	3301      	adds	r3, #1
 8003988:	f107 0218 	add.w	r2, r7, #24
 800398c:	4413      	add	r3, r2
 800398e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	7dfa      	ldrb	r2, [r7, #23]
 8003996:	0052      	lsls	r2, r2, #1
 8003998:	f107 0118 	add.w	r1, r7, #24
 800399c:	440a      	add	r2, r1
 800399e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fd f979 	bl	8000c9c <__aeabi_i2f>
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	3306      	adds	r3, #6
 80039ae:	4a9e      	ldr	r2, [pc, #632]	; (8003c28 <read_v_15cell+0x670>)
 80039b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b4:	4619      	mov	r1, r3
 80039b6:	f7fd f8bb 	bl	8000b30 <__aeabi_fsub>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4619      	mov	r1, r3
 80039be:	7dfb      	ldrb	r3, [r7, #23]
 80039c0:	3306      	adds	r3, #6
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	18d4      	adds	r4, r2, r3
 80039c8:	4608      	mov	r0, r1
 80039ca:	f7fd fba7 	bl	800111c <__aeabi_f2uiz>
 80039ce:	4603      	mov	r3, r0
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+6]=v_cell_digi[cc+6]*0.0001;
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	3306      	adds	r3, #6
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fc fd0f 	bl	8000404 <__aeabi_i2d>
 80039e6:	a38e      	add	r3, pc, #568	; (adr r3, 8003c20 <read_v_15cell+0x668>)
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	f7fc fd74 	bl	80004d8 <__aeabi_dmul>
 80039f0:	4603      	mov	r3, r0
 80039f2:	460c      	mov	r4, r1
 80039f4:	4618      	mov	r0, r3
 80039f6:	4621      	mov	r1, r4
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	3306      	adds	r3, #6
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	18d4      	adds	r4, r2, r3
 8003a02:	f7fd f841 	bl	8000a88 <__aeabi_d2f>
 8003a06:	4603      	mov	r3, r0
 8003a08:	6023      	str	r3, [r4, #0]
		cc++;
 8003a0a:	7dfb      	ldrb	r3, [r7, #23]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+6]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+6];
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	3301      	adds	r3, #1
 8003a16:	f107 0218 	add.w	r2, r7, #24
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	7dfa      	ldrb	r2, [r7, #23]
 8003a24:	0052      	lsls	r2, r2, #1
 8003a26:	f107 0118 	add.w	r1, r7, #24
 8003a2a:	440a      	add	r2, r1
 8003a2c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fd f932 	bl	8000c9c <__aeabi_i2f>
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
 8003a3a:	3306      	adds	r3, #6
 8003a3c:	4a7a      	ldr	r2, [pc, #488]	; (8003c28 <read_v_15cell+0x670>)
 8003a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a42:	4619      	mov	r1, r3
 8003a44:	f7fd f874 	bl	8000b30 <__aeabi_fsub>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	7dfb      	ldrb	r3, [r7, #23]
 8003a4e:	3306      	adds	r3, #6
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	18d4      	adds	r4, r2, r3
 8003a56:	4608      	mov	r0, r1
 8003a58:	f7fd fb60 	bl	800111c <__aeabi_f2uiz>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+6]=v_cell_digi[cc+6]*0.0001;
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	3306      	adds	r3, #6
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fc fcc8 	bl	8000404 <__aeabi_i2d>
 8003a74:	a36a      	add	r3, pc, #424	; (adr r3, 8003c20 <read_v_15cell+0x668>)
 8003a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7a:	f7fc fd2d 	bl	80004d8 <__aeabi_dmul>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	460c      	mov	r4, r1
 8003a82:	4618      	mov	r0, r3
 8003a84:	4621      	mov	r1, r4
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	3306      	adds	r3, #6
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	18d4      	adds	r4, r2, r3
 8003a90:	f7fc fffa 	bl	8000a88 <__aeabi_d2f>
 8003a94:	4603      	mov	r3, r0
 8003a96:	6023      	str	r3, [r4, #0]
		cc++;
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+6]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+6];
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	f107 0218 	add.w	r2, r7, #24
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	7dfa      	ldrb	r2, [r7, #23]
 8003ab2:	0052      	lsls	r2, r2, #1
 8003ab4:	f107 0118 	add.w	r1, r7, #24
 8003ab8:	440a      	add	r2, r1
 8003aba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fd f8eb 	bl	8000c9c <__aeabi_i2f>
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
 8003ac8:	3306      	adds	r3, #6
 8003aca:	4a57      	ldr	r2, [pc, #348]	; (8003c28 <read_v_15cell+0x670>)
 8003acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	f7fd f82d 	bl	8000b30 <__aeabi_fsub>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4619      	mov	r1, r3
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
 8003adc:	3306      	adds	r3, #6
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	18d4      	adds	r4, r2, r3
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	f7fd fb19 	bl	800111c <__aeabi_f2uiz>
 8003aea:	4603      	mov	r3, r0
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+6]=v_cell_digi[cc+6]*0.0001;
 8003af0:	7dfb      	ldrb	r3, [r7, #23]
 8003af2:	3306      	adds	r3, #6
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fc fc81 	bl	8000404 <__aeabi_i2d>
 8003b02:	a347      	add	r3, pc, #284	; (adr r3, 8003c20 <read_v_15cell+0x668>)
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f7fc fce6 	bl	80004d8 <__aeabi_dmul>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	460c      	mov	r4, r1
 8003b10:	4618      	mov	r0, r3
 8003b12:	4621      	mov	r1, r4
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
 8003b16:	3306      	adds	r3, #6
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	18d4      	adds	r4, r2, r3
 8003b1e:	f7fc ffb3 	bl	8000a88 <__aeabi_d2f>
 8003b22:	4603      	mov	r3, r0
 8003b24:	6023      	str	r3, [r4, #0]
		cc++;
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(4,1,cmd_v);
 8003b2c:	f107 030c 	add.w	r3, r7, #12
 8003b30:	461a      	mov	r2, r3
 8003b32:	2101      	movs	r1, #1
 8003b34:	2004      	movs	r0, #4
 8003b36:	f7ff fca5 	bl	8003484 <LTC681x_rdcv_reg_emul>
		cc=0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+9]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+9];
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	3301      	adds	r3, #1
 8003b44:	f107 0218 	add.w	r2, r7, #24
 8003b48:	4413      	add	r3, r2
 8003b4a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003b4e:	021b      	lsls	r3, r3, #8
 8003b50:	7dfa      	ldrb	r2, [r7, #23]
 8003b52:	0052      	lsls	r2, r2, #1
 8003b54:	f107 0118 	add.w	r1, r7, #24
 8003b58:	440a      	add	r2, r1
 8003b5a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fd f89b 	bl	8000c9c <__aeabi_i2f>
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	3309      	adds	r3, #9
 8003b6a:	4a2f      	ldr	r2, [pc, #188]	; (8003c28 <read_v_15cell+0x670>)
 8003b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b70:	4619      	mov	r1, r3
 8003b72:	f7fc ffdd 	bl	8000b30 <__aeabi_fsub>
 8003b76:	4603      	mov	r3, r0
 8003b78:	4619      	mov	r1, r3
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
 8003b7c:	3309      	adds	r3, #9
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	18d4      	adds	r4, r2, r3
 8003b84:	4608      	mov	r0, r1
 8003b86:	f7fd fac9 	bl	800111c <__aeabi_f2uiz>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+9]=v_cell_digi[cc+9]*0.0001;
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	3309      	adds	r3, #9
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	4413      	add	r3, r2
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fc fc31 	bl	8000404 <__aeabi_i2d>
 8003ba2:	a31f      	add	r3, pc, #124	; (adr r3, 8003c20 <read_v_15cell+0x668>)
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	f7fc fc96 	bl	80004d8 <__aeabi_dmul>
 8003bac:	4603      	mov	r3, r0
 8003bae:	460c      	mov	r4, r1
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
 8003bb6:	3309      	adds	r3, #9
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	18d4      	adds	r4, r2, r3
 8003bbe:	f7fc ff63 	bl	8000a88 <__aeabi_d2f>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	6023      	str	r3, [r4, #0]
		cc++;
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+9]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+9];
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	f107 0218 	add.w	r2, r7, #24
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	7dfa      	ldrb	r2, [r7, #23]
 8003be0:	0052      	lsls	r2, r2, #1
 8003be2:	f107 0118 	add.w	r1, r7, #24
 8003be6:	440a      	add	r2, r1
 8003be8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fd f854 	bl	8000c9c <__aeabi_i2f>
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	3309      	adds	r3, #9
 8003bf8:	4a0b      	ldr	r2, [pc, #44]	; (8003c28 <read_v_15cell+0x670>)
 8003bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	f7fc ff96 	bl	8000b30 <__aeabi_fsub>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4619      	mov	r1, r3
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	3309      	adds	r3, #9
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	18d4      	adds	r4, r2, r3
 8003c12:	4608      	mov	r0, r1
 8003c14:	f7fd fa82 	bl	800111c <__aeabi_f2uiz>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	e007      	b.n	8003c2c <read_v_15cell+0x674>
 8003c1c:	f3af 8000 	nop.w
 8003c20:	eb1c432d 	.word	0xeb1c432d
 8003c24:	3f1a36e2 	.word	0x3f1a36e2
 8003c28:	20000014 	.word	0x20000014
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+9]=v_cell_digi[cc+9]*0.0001;
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
 8003c32:	3309      	adds	r3, #9
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	4413      	add	r3, r2
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fc fbe1 	bl	8000404 <__aeabi_i2d>
 8003c42:	a3a1      	add	r3, pc, #644	; (adr r3, 8003ec8 <read_v_15cell+0x910>)
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f7fc fc46 	bl	80004d8 <__aeabi_dmul>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	460c      	mov	r4, r1
 8003c50:	4618      	mov	r0, r3
 8003c52:	4621      	mov	r1, r4
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	3309      	adds	r3, #9
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	18d4      	adds	r4, r2, r3
 8003c5e:	f7fc ff13 	bl	8000a88 <__aeabi_d2f>
 8003c62:	4603      	mov	r3, r0
 8003c64:	6023      	str	r3, [r4, #0]
		cc++;
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+9]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+9];
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	3301      	adds	r3, #1
 8003c72:	f107 0218 	add.w	r2, r7, #24
 8003c76:	4413      	add	r3, r2
 8003c78:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	7dfa      	ldrb	r2, [r7, #23]
 8003c80:	0052      	lsls	r2, r2, #1
 8003c82:	f107 0118 	add.w	r1, r7, #24
 8003c86:	440a      	add	r2, r1
 8003c88:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fd f804 	bl	8000c9c <__aeabi_i2f>
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	3309      	adds	r3, #9
 8003c98:	4a8d      	ldr	r2, [pc, #564]	; (8003ed0 <read_v_15cell+0x918>)
 8003c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	f7fc ff46 	bl	8000b30 <__aeabi_fsub>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	3309      	adds	r3, #9
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	18d4      	adds	r4, r2, r3
 8003cb2:	4608      	mov	r0, r1
 8003cb4:	f7fd fa32 	bl	800111c <__aeabi_f2uiz>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+9]=v_cell_digi[cc+9]*0.0001;
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
 8003cc0:	3309      	adds	r3, #9
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fc fb9a 	bl	8000404 <__aeabi_i2d>
 8003cd0:	a37d      	add	r3, pc, #500	; (adr r3, 8003ec8 <read_v_15cell+0x910>)
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f7fc fbff 	bl	80004d8 <__aeabi_dmul>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	460c      	mov	r4, r1
 8003cde:	4618      	mov	r0, r3
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	3309      	adds	r3, #9
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	18d4      	adds	r4, r2, r3
 8003cec:	f7fc fecc 	bl	8000a88 <__aeabi_d2f>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	6023      	str	r3, [r4, #0]
		cc++;
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(5,1,cmd_v);
 8003cfa:	f107 030c 	add.w	r3, r7, #12
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2101      	movs	r1, #1
 8003d02:	2005      	movs	r0, #5
 8003d04:	f7ff fbbe 	bl	8003484 <LTC681x_rdcv_reg_emul>
		cc=0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+12]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+12];
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	3301      	adds	r3, #1
 8003d12:	f107 0218 	add.w	r2, r7, #24
 8003d16:	4413      	add	r3, r2
 8003d18:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	7dfa      	ldrb	r2, [r7, #23]
 8003d20:	0052      	lsls	r2, r2, #1
 8003d22:	f107 0118 	add.w	r1, r7, #24
 8003d26:	440a      	add	r2, r1
 8003d28:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fc ffb4 	bl	8000c9c <__aeabi_i2f>
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	330c      	adds	r3, #12
 8003d38:	4a65      	ldr	r2, [pc, #404]	; (8003ed0 <read_v_15cell+0x918>)
 8003d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f7fc fef6 	bl	8000b30 <__aeabi_fsub>
 8003d44:	4603      	mov	r3, r0
 8003d46:	4619      	mov	r1, r3
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
 8003d4a:	330c      	adds	r3, #12
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	18d4      	adds	r4, r2, r3
 8003d52:	4608      	mov	r0, r1
 8003d54:	f7fd f9e2 	bl	800111c <__aeabi_f2uiz>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+12]=v_cell_digi[cc+12]*0.0001;
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	330c      	adds	r3, #12
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	4413      	add	r3, r2
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fc fb4a 	bl	8000404 <__aeabi_i2d>
 8003d70:	a355      	add	r3, pc, #340	; (adr r3, 8003ec8 <read_v_15cell+0x910>)
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	f7fc fbaf 	bl	80004d8 <__aeabi_dmul>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	4618      	mov	r0, r3
 8003d80:	4621      	mov	r1, r4
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
 8003d84:	330c      	adds	r3, #12
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	18d4      	adds	r4, r2, r3
 8003d8c:	f7fc fe7c 	bl	8000a88 <__aeabi_d2f>
 8003d90:	4603      	mov	r3, r0
 8003d92:	6023      	str	r3, [r4, #0]
		cc++;
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
 8003d96:	3301      	adds	r3, #1
 8003d98:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+12]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+12];
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	3301      	adds	r3, #1
 8003da0:	f107 0218 	add.w	r2, r7, #24
 8003da4:	4413      	add	r3, r2
 8003da6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	7dfa      	ldrb	r2, [r7, #23]
 8003dae:	0052      	lsls	r2, r2, #1
 8003db0:	f107 0118 	add.w	r1, r7, #24
 8003db4:	440a      	add	r2, r1
 8003db6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fc ff6d 	bl	8000c9c <__aeabi_i2f>
 8003dc2:	7dfb      	ldrb	r3, [r7, #23]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	4a42      	ldr	r2, [pc, #264]	; (8003ed0 <read_v_15cell+0x918>)
 8003dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f7fc feaf 	bl	8000b30 <__aeabi_fsub>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	18d4      	adds	r4, r2, r3
 8003de0:	4608      	mov	r0, r1
 8003de2:	f7fd f99b 	bl	800111c <__aeabi_f2uiz>
 8003de6:	4603      	mov	r3, r0
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+12]=v_cell_digi[cc+12]*0.0001;
 8003dec:	7dfb      	ldrb	r3, [r7, #23]
 8003dee:	330c      	adds	r3, #12
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4413      	add	r3, r2
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fc fb03 	bl	8000404 <__aeabi_i2d>
 8003dfe:	a332      	add	r3, pc, #200	; (adr r3, 8003ec8 <read_v_15cell+0x910>)
 8003e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e04:	f7fc fb68 	bl	80004d8 <__aeabi_dmul>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	4621      	mov	r1, r4
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	330c      	adds	r3, #12
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	18d4      	adds	r4, r2, r3
 8003e1a:	f7fc fe35 	bl	8000a88 <__aeabi_d2f>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	6023      	str	r3, [r4, #0]
		cc++;
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
 8003e24:	3301      	adds	r3, #1
 8003e26:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+12]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+12];
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	f107 0218 	add.w	r2, r7, #24
 8003e32:	4413      	add	r3, r2
 8003e34:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	7dfa      	ldrb	r2, [r7, #23]
 8003e3c:	0052      	lsls	r2, r2, #1
 8003e3e:	f107 0118 	add.w	r1, r7, #24
 8003e42:	440a      	add	r2, r1
 8003e44:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fc ff26 	bl	8000c9c <__aeabi_i2f>
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	330c      	adds	r3, #12
 8003e54:	4a1e      	ldr	r2, [pc, #120]	; (8003ed0 <read_v_15cell+0x918>)
 8003e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f7fc fe68 	bl	8000b30 <__aeabi_fsub>
 8003e60:	4603      	mov	r3, r0
 8003e62:	4619      	mov	r1, r3
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	330c      	adds	r3, #12
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	18d4      	adds	r4, r2, r3
 8003e6e:	4608      	mov	r0, r1
 8003e70:	f7fd f954 	bl	800111c <__aeabi_f2uiz>
 8003e74:	4603      	mov	r3, r0
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+12]=v_cell_digi[cc+12]*0.0001;
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	4413      	add	r3, r2
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fc fabc 	bl	8000404 <__aeabi_i2d>
 8003e8c:	a30e      	add	r3, pc, #56	; (adr r3, 8003ec8 <read_v_15cell+0x910>)
 8003e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e92:	f7fc fb21 	bl	80004d8 <__aeabi_dmul>
 8003e96:	4603      	mov	r3, r0
 8003e98:	460c      	mov	r4, r1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	18d4      	adds	r4, r2, r3
 8003ea8:	f7fc fdee 	bl	8000a88 <__aeabi_d2f>
 8003eac:	4603      	mov	r3, r0
 8003eae:	6023      	str	r3, [r4, #0]
		cc++;
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	75fb      	strb	r3, [r7, #23]
		
		HAL_GPIO_WritePin(CS_SPI1_GPIO_Port,CS_SPI1_Pin,GPIO_PIN_SET);
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	2101      	movs	r1, #1
 8003eba:	4806      	ldr	r0, [pc, #24]	; (8003ed4 <read_v_15cell+0x91c>)
 8003ebc:	f005 fbf3 	bl	80096a6 <HAL_GPIO_WritePin>
}
 8003ec0:	bf00      	nop
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd90      	pop	{r4, r7, pc}
 8003ec8:	eb1c432d 	.word	0xeb1c432d
 8003ecc:	3f1a36e2 	.word	0x3f1a36e2
 8003ed0:	20000014 	.word	0x20000014
 8003ed4:	40010c00 	.word	0x40010c00

08003ed8 <LTC681x_wrcfga_reg_emul>:
	
}

void LTC681x_wrcfga_reg_emul( uint8_t CFGA4, uint8_t CFGA5
                     )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	460a      	mov	r2, r1
 8003ee2:	71fb      	strb	r3, [r7, #7]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t data_in[8];

	cmd[1] = 0x01;  //WRCFGA
 8003ee8:	2301      	movs	r3, #1
 8003eea:	757b      	strb	r3, [r7, #21]
	cmd[0] = 0x00;
 8003eec:	2300      	movs	r3, #0
 8003eee:	753b      	strb	r3, [r7, #20]
	
	cmd_pec = pec15_calc_emul(2, cmd);
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	2002      	movs	r0, #2
 8003ef8:	f7ff fa90 	bl	800341c <pec15_calc_emul>
 8003efc:	4603      	mov	r3, r0
 8003efe:	837b      	strh	r3, [r7, #26]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003f00:	8b7b      	ldrh	r3, [r7, #26]
 8003f02:	0a1b      	lsrs	r3, r3, #8
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t)(cmd_pec);
 8003f0a:	8b7b      	ldrh	r3, [r7, #26]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	75fb      	strb	r3, [r7, #23]

	ltc6812_CS_RESET(ltc6812_CS_PIN);
 8003f10:	2200      	movs	r2, #0
 8003f12:	2101      	movs	r1, #1
 8003f14:	4824      	ldr	r0, [pc, #144]	; (8003fa8 <LTC681x_wrcfga_reg_emul+0xd0>)
 8003f16:	f005 fbc6 	bl	80096a6 <HAL_GPIO_WritePin>
  ltc6812_Write8(cmd[0]);
 8003f1a:	7d3b      	ldrb	r3, [r7, #20]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff f993 	bl	8003248 <ltc6812_Write8>
	ltc6812_Write8(cmd[1]);
 8003f22:	7d7b      	ldrb	r3, [r7, #21]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff f98f 	bl	8003248 <ltc6812_Write8>
	ltc6812_Write8(cmd[2]);
 8003f2a:	7dbb      	ldrb	r3, [r7, #22]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff f98b 	bl	8003248 <ltc6812_Write8>
	ltc6812_Write8(cmd[3]);
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff f987 	bl	8003248 <ltc6812_Write8>
	
	data_in[0]= 0x00;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	733b      	strb	r3, [r7, #12]
	data_in[1]= 0x00;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	737b      	strb	r3, [r7, #13]
	data_in[2]= 0x00;
 8003f42:	2300      	movs	r3, #0
 8003f44:	73bb      	strb	r3, [r7, #14]
	data_in[3]= 0x00;
 8003f46:	2300      	movs	r3, #0
 8003f48:	73fb      	strb	r3, [r7, #15]
	data_in[4]= CFGA4;
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
 8003f4c:	743b      	strb	r3, [r7, #16]
	data_in[5]= CFGA5;
 8003f4e:	79bb      	ldrb	r3, [r7, #6]
 8003f50:	747b      	strb	r3, [r7, #17]
	cmd_pec=pec15_calc_emul(6,data_in);
 8003f52:	f107 030c 	add.w	r3, r7, #12
 8003f56:	4619      	mov	r1, r3
 8003f58:	2006      	movs	r0, #6
 8003f5a:	f7ff fa5f 	bl	800341c <pec15_calc_emul>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	837b      	strh	r3, [r7, #26]
	data_in[6]= (uint8_t)(cmd_pec >> 8);
 8003f62:	8b7b      	ldrh	r3, [r7, #26]
 8003f64:	0a1b      	lsrs	r3, r3, #8
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	74bb      	strb	r3, [r7, #18]
	data_in[7]= (uint8_t)(cmd_pec);
 8003f6c:	8b7b      	ldrh	r3, [r7, #26]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	74fb      	strb	r3, [r7, #19]
	
	for(int kl=0;kl<8;kl++)
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	e00a      	b.n	8003f8e <LTC681x_wrcfga_reg_emul+0xb6>
	{
		ltc6812_Write8(data_in[kl]);
 8003f78:	f107 020c 	add.w	r2, r7, #12
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	4413      	add	r3, r2
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff f960 	bl	8003248 <ltc6812_Write8>
	for(int kl=0;kl<8;kl++)
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	61fb      	str	r3, [r7, #28]
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	2b07      	cmp	r3, #7
 8003f92:	ddf1      	ble.n	8003f78 <LTC681x_wrcfga_reg_emul+0xa0>
	}
	
  ltc6812_CS_SET(ltc6812_CS_PIN);
 8003f94:	2201      	movs	r2, #1
 8003f96:	2101      	movs	r1, #1
 8003f98:	4803      	ldr	r0, [pc, #12]	; (8003fa8 <LTC681x_wrcfga_reg_emul+0xd0>)
 8003f9a:	f005 fb84 	bl	80096a6 <HAL_GPIO_WritePin>
	
}
 8003f9e:	bf00      	nop
 8003fa0:	3720      	adds	r7, #32
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40010c00 	.word	0x40010c00

08003fac <LTC681x_wrcfgb_reg_emul>:

void LTC681x_wrcfgb_reg_emul( uint8_t CFGB0
                     )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t data_in[8];

	cmd[1] = 0x24;  //WRCFGB
 8003fb6:	2324      	movs	r3, #36	; 0x24
 8003fb8:	757b      	strb	r3, [r7, #21]
	cmd[0] = 0x00;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	753b      	strb	r3, [r7, #20]

	cmd_pec = pec15_calc_emul(2, cmd);
 8003fbe:	f107 0314 	add.w	r3, r7, #20
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	2002      	movs	r0, #2
 8003fc6:	f7ff fa29 	bl	800341c <pec15_calc_emul>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	837b      	strh	r3, [r7, #26]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003fce:	8b7b      	ldrh	r3, [r7, #26]
 8003fd0:	0a1b      	lsrs	r3, r3, #8
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t)(cmd_pec);
 8003fd8:	8b7b      	ldrh	r3, [r7, #26]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	75fb      	strb	r3, [r7, #23]

	ltc6812_CS_RESET(ltc6812_CS_PIN);
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4824      	ldr	r0, [pc, #144]	; (8004074 <LTC681x_wrcfgb_reg_emul+0xc8>)
 8003fe4:	f005 fb5f 	bl	80096a6 <HAL_GPIO_WritePin>
  ltc6812_Write8(cmd[0]);
 8003fe8:	7d3b      	ldrb	r3, [r7, #20]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff f92c 	bl	8003248 <ltc6812_Write8>
	ltc6812_Write8(cmd[1]);
 8003ff0:	7d7b      	ldrb	r3, [r7, #21]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff f928 	bl	8003248 <ltc6812_Write8>
	ltc6812_Write8(cmd[2]);
 8003ff8:	7dbb      	ldrb	r3, [r7, #22]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff f924 	bl	8003248 <ltc6812_Write8>
	ltc6812_Write8(cmd[3]);
 8004000:	7dfb      	ldrb	r3, [r7, #23]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff f920 	bl	8003248 <ltc6812_Write8>

	data_in[0]= CFGB0;
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	733b      	strb	r3, [r7, #12]
	data_in[1]= 0x00;
 800400c:	2300      	movs	r3, #0
 800400e:	737b      	strb	r3, [r7, #13]
	data_in[2]= 0x00;
 8004010:	2300      	movs	r3, #0
 8004012:	73bb      	strb	r3, [r7, #14]
	data_in[3]= 0x00;
 8004014:	2300      	movs	r3, #0
 8004016:	73fb      	strb	r3, [r7, #15]
	data_in[4]= 0x00;
 8004018:	2300      	movs	r3, #0
 800401a:	743b      	strb	r3, [r7, #16]
	data_in[5]= 0x00;
 800401c:	2300      	movs	r3, #0
 800401e:	747b      	strb	r3, [r7, #17]
	cmd_pec=pec15_calc_emul(6,data_in);
 8004020:	f107 030c 	add.w	r3, r7, #12
 8004024:	4619      	mov	r1, r3
 8004026:	2006      	movs	r0, #6
 8004028:	f7ff f9f8 	bl	800341c <pec15_calc_emul>
 800402c:	4603      	mov	r3, r0
 800402e:	837b      	strh	r3, [r7, #26]
	data_in[6]= (uint8_t)(cmd_pec >> 8);
 8004030:	8b7b      	ldrh	r3, [r7, #26]
 8004032:	0a1b      	lsrs	r3, r3, #8
 8004034:	b29b      	uxth	r3, r3
 8004036:	b2db      	uxtb	r3, r3
 8004038:	74bb      	strb	r3, [r7, #18]
	data_in[7]= (uint8_t)(cmd_pec);
 800403a:	8b7b      	ldrh	r3, [r7, #26]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	74fb      	strb	r3, [r7, #19]

	for(int kl=0;kl<8;kl++)
 8004040:	2300      	movs	r3, #0
 8004042:	61fb      	str	r3, [r7, #28]
 8004044:	e00a      	b.n	800405c <LTC681x_wrcfgb_reg_emul+0xb0>
	{
		ltc6812_Write8(data_in[kl]);
 8004046:	f107 020c 	add.w	r2, r7, #12
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff f8f9 	bl	8003248 <ltc6812_Write8>
	for(int kl=0;kl<8;kl++)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3301      	adds	r3, #1
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2b07      	cmp	r3, #7
 8004060:	ddf1      	ble.n	8004046 <LTC681x_wrcfgb_reg_emul+0x9a>
	}

  ltc6812_CS_SET(ltc6812_CS_PIN);
 8004062:	2201      	movs	r2, #1
 8004064:	2101      	movs	r1, #1
 8004066:	4803      	ldr	r0, [pc, #12]	; (8004074 <LTC681x_wrcfgb_reg_emul+0xc8>)
 8004068:	f005 fb1d 	bl	80096a6 <HAL_GPIO_WritePin>

}
 800406c:	bf00      	nop
 800406e:	3720      	adds	r7, #32
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40010c00 	.word	0x40010c00

08004078 <LTC681x_balance_cell>:
  ltc6812_CS_SET(ltc6812_CS_PIN);
	
}

void LTC681x_balance_cell(uint16_t Cell_to_balance)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	80fb      	strh	r3, [r7, #6]
	uint8_t cell_balance_status;
	uint16_t temp_var;
	CFGAR4=0x00;
 8004082:	4b2f      	ldr	r3, [pc, #188]	; (8004140 <LTC681x_balance_cell+0xc8>)
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
	CFGAR5=0x00;
 8004088:	4b2e      	ldr	r3, [pc, #184]	; (8004144 <LTC681x_balance_cell+0xcc>)
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
	CFGBR0=0x00;
 800408e:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <LTC681x_balance_cell+0xd0>)
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]

	for(int lm=0;lm<15;lm++)
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	e03d      	b.n	8004116 <LTC681x_balance_cell+0x9e>
	{
		cell_balance_status=Cell_to_balance>>lm & 0x0001;
 800409a:	88fa      	ldrh	r2, [r7, #6]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	fa42 f303 	asr.w	r3, r2, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	72fb      	strb	r3, [r7, #11]
		if(lm<8)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b07      	cmp	r3, #7
 80040ae:	dc0d      	bgt.n	80040cc <LTC681x_balance_cell+0x54>
		{
			temp_var=cell_balance_status<<lm;
 80040b0:	7afa      	ldrb	r2, [r7, #11]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	813b      	strh	r3, [r7, #8]
			CFGAR4+=temp_var;
 80040ba:	893b      	ldrh	r3, [r7, #8]
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	4b20      	ldr	r3, [pc, #128]	; (8004140 <LTC681x_balance_cell+0xc8>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	4413      	add	r3, r2
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <LTC681x_balance_cell+0xc8>)
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e01f      	b.n	800410c <LTC681x_balance_cell+0x94>
		}
		else if(lm<12)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b0b      	cmp	r3, #11
 80040d0:	dc0e      	bgt.n	80040f0 <LTC681x_balance_cell+0x78>
		{
			temp_var=cell_balance_status<<(lm-8);
 80040d2:	7afa      	ldrb	r2, [r7, #11]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3b08      	subs	r3, #8
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	813b      	strh	r3, [r7, #8]
			CFGAR5+=temp_var;
 80040de:	893b      	ldrh	r3, [r7, #8]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	4b18      	ldr	r3, [pc, #96]	; (8004144 <LTC681x_balance_cell+0xcc>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	4413      	add	r3, r2
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	4b16      	ldr	r3, [pc, #88]	; (8004144 <LTC681x_balance_cell+0xcc>)
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e00d      	b.n	800410c <LTC681x_balance_cell+0x94>
		}
		else
		{
			temp_var=cell_balance_status<<(lm-8);
 80040f0:	7afa      	ldrb	r2, [r7, #11]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	3b08      	subs	r3, #8
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	813b      	strh	r3, [r7, #8]
			CFGBR0+=temp_var;
 80040fc:	893b      	ldrh	r3, [r7, #8]
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	4b11      	ldr	r3, [pc, #68]	; (8004148 <LTC681x_balance_cell+0xd0>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	4413      	add	r3, r2
 8004106:	b2da      	uxtb	r2, r3
 8004108:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <LTC681x_balance_cell+0xd0>)
 800410a:	701a      	strb	r2, [r3, #0]
		}
		temp_var=0;
 800410c:	2300      	movs	r3, #0
 800410e:	813b      	strh	r3, [r7, #8]
	for(int lm=0;lm<15;lm++)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3301      	adds	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b0e      	cmp	r3, #14
 800411a:	ddbe      	ble.n	800409a <LTC681x_balance_cell+0x22>
	}

	LTC681x_wrcfga_reg_emul(CFGAR4, CFGAR5);
 800411c:	4b08      	ldr	r3, [pc, #32]	; (8004140 <LTC681x_balance_cell+0xc8>)
 800411e:	781a      	ldrb	r2, [r3, #0]
 8004120:	4b08      	ldr	r3, [pc, #32]	; (8004144 <LTC681x_balance_cell+0xcc>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f7ff fed6 	bl	8003ed8 <LTC681x_wrcfga_reg_emul>
	LTC681x_wrcfgb_reg_emul(CFGBR0);
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <LTC681x_balance_cell+0xd0>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff ff3b 	bl	8003fac <LTC681x_wrcfgb_reg_emul>

}
 8004136:	bf00      	nop
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	2000028c 	.word	0x2000028c
 8004144:	2000028d 	.word	0x2000028d
 8004148:	2000028e 	.word	0x2000028e
 800414c:	00000000 	.word	0x00000000

08004150 <get_balance_status>:

void get_balance_status(float Cell_Voltage_15data[15])
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	Cell_Voltage_Lowest=4.2;
 8004158:	4b4f      	ldr	r3, [pc, #316]	; (8004298 <get_balance_status+0x148>)
 800415a:	4a50      	ldr	r2, [pc, #320]	; (800429c <get_balance_status+0x14c>)
 800415c:	601a      	str	r2, [r3, #0]
	balance_status=0x0000;
 800415e:	4b50      	ldr	r3, [pc, #320]	; (80042a0 <get_balance_status+0x150>)
 8004160:	2200      	movs	r2, #0
 8004162:	801a      	strh	r2, [r3, #0]
	uint16_t temp_dat;
	float buffer_imbalance;


		for(int ik=0;ik<15;ik++)
 8004164:	2300      	movs	r3, #0
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	e017      	b.n	800419a <get_balance_status+0x4a>
		{
			if(Cell_Voltage_15data[ik]<Cell_Voltage_Lowest) Cell_Voltage_Lowest=Cell_Voltage_15data[ik];
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b48      	ldr	r3, [pc, #288]	; (8004298 <get_balance_status+0x148>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4619      	mov	r1, r3
 800417a:	4610      	mov	r0, r2
 800417c:	f7fc ff80 	bl	8001080 <__aeabi_fcmplt>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d006      	beq.n	8004194 <get_balance_status+0x44>
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a41      	ldr	r2, [pc, #260]	; (8004298 <get_balance_status+0x148>)
 8004192:	6013      	str	r3, [r2, #0]
		for(int ik=0;ik<15;ik++)
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	3301      	adds	r3, #1
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b0e      	cmp	r3, #14
 800419e:	dde4      	ble.n	800416a <get_balance_status+0x1a>
		}

		for(int ik=0;ik<15;ik++)
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	e04a      	b.n	800423c <get_balance_status+0xec>
		{
		   delta_vbatt[ik] = Cell_Voltage_15data[ik] - Cell_Voltage_Lowest;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b39      	ldr	r3, [pc, #228]	; (8004298 <get_balance_status+0x148>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f7fc fcba 	bl	8000b30 <__aeabi_fsub>
 80041bc:	4603      	mov	r3, r0
 80041be:	4619      	mov	r1, r3
 80041c0:	4a38      	ldr	r2, [pc, #224]	; (80042a4 <get_balance_status+0x154>)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		   buffer_imbalance+=delta_vbatt[ik];
 80041c8:	4a36      	ldr	r2, [pc, #216]	; (80042a4 <get_balance_status+0x154>)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d0:	4619      	mov	r1, r3
 80041d2:	6978      	ldr	r0, [r7, #20]
 80041d4:	f7fc fcae 	bl	8000b34 <__addsf3>
 80041d8:	4603      	mov	r3, r0
 80041da:	617b      	str	r3, [r7, #20]

		   if(delta_vbatt[ik]> 0.025 && Cell_Voltage_15data[ik]>VCELL_BALANCE_PERMITTED)
 80041dc:	4a31      	ldr	r2, [pc, #196]	; (80042a4 <get_balance_status+0x154>)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fc f91f 	bl	8000428 <__aeabi_f2d>
 80041ea:	a327      	add	r3, pc, #156	; (adr r3, 8004288 <get_balance_status+0x138>)
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f7fc fc02 	bl	80009f8 <__aeabi_dcmpgt>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01d      	beq.n	8004236 <get_balance_status+0xe6>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f7fc f90f 	bl	8000428 <__aeabi_f2d>
 800420a:	a321      	add	r3, pc, #132	; (adr r3, 8004290 <get_balance_status+0x140>)
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f7fc fbf2 	bl	80009f8 <__aeabi_dcmpgt>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00d      	beq.n	8004236 <get_balance_status+0xe6>
		   {
			   temp_dat = 0x01;
 800421a:	2301      	movs	r3, #1
 800421c:	817b      	strh	r3, [r7, #10]
			   temp_dat = temp_dat << ik;
 800421e:	897a      	ldrh	r2, [r7, #10]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	817b      	strh	r3, [r7, #10]
			   balance_status= balance_status+temp_dat;
 8004228:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <get_balance_status+0x150>)
 800422a:	881a      	ldrh	r2, [r3, #0]
 800422c:	897b      	ldrh	r3, [r7, #10]
 800422e:	4413      	add	r3, r2
 8004230:	b29a      	uxth	r2, r3
 8004232:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <get_balance_status+0x150>)
 8004234:	801a      	strh	r2, [r3, #0]
		for(int ik=0;ik<15;ik++)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3301      	adds	r3, #1
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b0e      	cmp	r3, #14
 8004240:	ddb1      	ble.n	80041a6 <get_balance_status+0x56>
		   }

		}
		persen_imbalance=buffer_imbalance*100/14.0/1.2;
 8004242:	4919      	ldr	r1, [pc, #100]	; (80042a8 <get_balance_status+0x158>)
 8004244:	6978      	ldr	r0, [r7, #20]
 8004246:	f7fc fd7d 	bl	8000d44 <__aeabi_fmul>
 800424a:	4603      	mov	r3, r0
 800424c:	4618      	mov	r0, r3
 800424e:	f7fc f8eb 	bl	8000428 <__aeabi_f2d>
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	4b15      	ldr	r3, [pc, #84]	; (80042ac <get_balance_status+0x15c>)
 8004258:	f7fc fa68 	bl	800072c <__aeabi_ddiv>
 800425c:	4603      	mov	r3, r0
 800425e:	460c      	mov	r4, r1
 8004260:	4618      	mov	r0, r3
 8004262:	4621      	mov	r1, r4
 8004264:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004268:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <get_balance_status+0x160>)
 800426a:	f7fc fa5f 	bl	800072c <__aeabi_ddiv>
 800426e:	4603      	mov	r3, r0
 8004270:	460c      	mov	r4, r1
 8004272:	4618      	mov	r0, r3
 8004274:	4621      	mov	r1, r4
 8004276:	f7fc fc07 	bl	8000a88 <__aeabi_d2f>
 800427a:	4602      	mov	r2, r0
 800427c:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <get_balance_status+0x164>)
 800427e:	601a      	str	r2, [r3, #0]


}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	bd90      	pop	{r4, r7, pc}
 8004288:	9999999a 	.word	0x9999999a
 800428c:	3f999999 	.word	0x3f999999
 8004290:	33333333 	.word	0x33333333
 8004294:	400b3333 	.word	0x400b3333
 8004298:	20000c2c 	.word	0x20000c2c
 800429c:	40866666 	.word	0x40866666
 80042a0:	20000bee 	.word	0x20000bee
 80042a4:	20000bf0 	.word	0x20000bf0
 80042a8:	42c80000 	.word	0x42c80000
 80042ac:	402c0000 	.word	0x402c0000
 80042b0:	3ff33333 	.word	0x3ff33333
 80042b4:	20000bb8 	.word	0x20000bb8

080042b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80042bc:	4b17      	ldr	r3, [pc, #92]	; (800431c <MX_SPI1_Init+0x64>)
 80042be:	4a18      	ldr	r2, [pc, #96]	; (8004320 <MX_SPI1_Init+0x68>)
 80042c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80042c2:	4b16      	ldr	r3, [pc, #88]	; (800431c <MX_SPI1_Init+0x64>)
 80042c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80042c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80042ca:	4b14      	ldr	r3, [pc, #80]	; (800431c <MX_SPI1_Init+0x64>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80042d0:	4b12      	ldr	r3, [pc, #72]	; (800431c <MX_SPI1_Init+0x64>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042d6:	4b11      	ldr	r3, [pc, #68]	; (800431c <MX_SPI1_Init+0x64>)
 80042d8:	2200      	movs	r2, #0
 80042da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <MX_SPI1_Init+0x64>)
 80042de:	2200      	movs	r2, #0
 80042e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80042e2:	4b0e      	ldr	r3, [pc, #56]	; (800431c <MX_SPI1_Init+0x64>)
 80042e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <MX_SPI1_Init+0x64>)
 80042ec:	2228      	movs	r2, #40	; 0x28
 80042ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <MX_SPI1_Init+0x64>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042f6:	4b09      	ldr	r3, [pc, #36]	; (800431c <MX_SPI1_Init+0x64>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042fc:	4b07      	ldr	r3, [pc, #28]	; (800431c <MX_SPI1_Init+0x64>)
 80042fe:	2200      	movs	r2, #0
 8004300:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <MX_SPI1_Init+0x64>)
 8004304:	220a      	movs	r2, #10
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004308:	4804      	ldr	r0, [pc, #16]	; (800431c <MX_SPI1_Init+0x64>)
 800430a:	f006 fc5b 	bl	800abc4 <HAL_SPI_Init>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004314:	f7fe fec8 	bl	80030a8 <Error_Handler>
  }

}
 8004318:	bf00      	nop
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000c30 	.word	0x20000c30
 8004320:	40013000 	.word	0x40013000

08004324 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08a      	sub	sp, #40	; 0x28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800432c:	f107 0314 	add.w	r3, r7, #20
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a22      	ldr	r2, [pc, #136]	; (80043c8 <HAL_SPI_MspInit+0xa4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d13d      	bne.n	80043c0 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004344:	4b21      	ldr	r3, [pc, #132]	; (80043cc <HAL_SPI_MspInit+0xa8>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	4a20      	ldr	r2, [pc, #128]	; (80043cc <HAL_SPI_MspInit+0xa8>)
 800434a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800434e:	6193      	str	r3, [r2, #24]
 8004350:	4b1e      	ldr	r3, [pc, #120]	; (80043cc <HAL_SPI_MspInit+0xa8>)
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800435c:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <HAL_SPI_MspInit+0xa8>)
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	4a1a      	ldr	r2, [pc, #104]	; (80043cc <HAL_SPI_MspInit+0xa8>)
 8004362:	f043 0308 	orr.w	r3, r3, #8
 8004366:	6193      	str	r3, [r2, #24]
 8004368:	4b18      	ldr	r3, [pc, #96]	; (80043cc <HAL_SPI_MspInit+0xa8>)
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004374:	2328      	movs	r3, #40	; 0x28
 8004376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004378:	2302      	movs	r3, #2
 800437a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800437c:	2303      	movs	r3, #3
 800437e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004380:	f107 0314 	add.w	r3, r7, #20
 8004384:	4619      	mov	r1, r3
 8004386:	4812      	ldr	r0, [pc, #72]	; (80043d0 <HAL_SPI_MspInit+0xac>)
 8004388:	f005 f81c 	bl	80093c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800438c:	2310      	movs	r3, #16
 800438e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004390:	2300      	movs	r3, #0
 8004392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004398:	f107 0314 	add.w	r3, r7, #20
 800439c:	4619      	mov	r1, r3
 800439e:	480c      	ldr	r0, [pc, #48]	; (80043d0 <HAL_SPI_MspInit+0xac>)
 80043a0:	f005 f810 	bl	80093c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_SPI_MspInit+0xb0>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ba:	4a06      	ldr	r2, [pc, #24]	; (80043d4 <HAL_SPI_MspInit+0xb0>)
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80043c0:	bf00      	nop
 80043c2:	3728      	adds	r7, #40	; 0x28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40013000 	.word	0x40013000
 80043cc:	40021000 	.word	0x40021000
 80043d0:	40010c00 	.word	0x40010c00
 80043d4:	40010000 	.word	0x40010000

080043d8 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80043de:	f000 fa19 	bl	8004814 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80043e2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80043e6:	2201      	movs	r2, #1
 80043e8:	2178      	movs	r1, #120	; 0x78
 80043ea:	4858      	ldr	r0, [pc, #352]	; (800454c <SSD1306_Init+0x174>)
 80043ec:	f005 fbb2 	bl	8009b54 <HAL_I2C_IsDeviceReady>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e0a4      	b.n	8004544 <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80043fa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80043fe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004400:	e002      	b.n	8004408 <SSD1306_Init+0x30>
		p--;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3b01      	subs	r3, #1
 8004406:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f9      	bne.n	8004402 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800440e:	22ae      	movs	r2, #174	; 0xae
 8004410:	2100      	movs	r1, #0
 8004412:	2078      	movs	r0, #120	; 0x78
 8004414:	f000 fa6c 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8004418:	2220      	movs	r2, #32
 800441a:	2100      	movs	r1, #0
 800441c:	2078      	movs	r0, #120	; 0x78
 800441e:	f000 fa67 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004422:	2210      	movs	r2, #16
 8004424:	2100      	movs	r1, #0
 8004426:	2078      	movs	r0, #120	; 0x78
 8004428:	f000 fa62 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800442c:	22b0      	movs	r2, #176	; 0xb0
 800442e:	2100      	movs	r1, #0
 8004430:	2078      	movs	r0, #120	; 0x78
 8004432:	f000 fa5d 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8004436:	22c8      	movs	r2, #200	; 0xc8
 8004438:	2100      	movs	r1, #0
 800443a:	2078      	movs	r0, #120	; 0x78
 800443c:	f000 fa58 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8004440:	2200      	movs	r2, #0
 8004442:	2100      	movs	r1, #0
 8004444:	2078      	movs	r0, #120	; 0x78
 8004446:	f000 fa53 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800444a:	2210      	movs	r2, #16
 800444c:	2100      	movs	r1, #0
 800444e:	2078      	movs	r0, #120	; 0x78
 8004450:	f000 fa4e 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8004454:	2240      	movs	r2, #64	; 0x40
 8004456:	2100      	movs	r1, #0
 8004458:	2078      	movs	r0, #120	; 0x78
 800445a:	f000 fa49 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800445e:	2281      	movs	r2, #129	; 0x81
 8004460:	2100      	movs	r1, #0
 8004462:	2078      	movs	r0, #120	; 0x78
 8004464:	f000 fa44 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004468:	22ff      	movs	r2, #255	; 0xff
 800446a:	2100      	movs	r1, #0
 800446c:	2078      	movs	r0, #120	; 0x78
 800446e:	f000 fa3f 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8004472:	22a1      	movs	r2, #161	; 0xa1
 8004474:	2100      	movs	r1, #0
 8004476:	2078      	movs	r0, #120	; 0x78
 8004478:	f000 fa3a 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800447c:	22a6      	movs	r2, #166	; 0xa6
 800447e:	2100      	movs	r1, #0
 8004480:	2078      	movs	r0, #120	; 0x78
 8004482:	f000 fa35 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8004486:	22a8      	movs	r2, #168	; 0xa8
 8004488:	2100      	movs	r1, #0
 800448a:	2078      	movs	r0, #120	; 0x78
 800448c:	f000 fa30 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8004490:	223f      	movs	r2, #63	; 0x3f
 8004492:	2100      	movs	r1, #0
 8004494:	2078      	movs	r0, #120	; 0x78
 8004496:	f000 fa2b 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800449a:	22a4      	movs	r2, #164	; 0xa4
 800449c:	2100      	movs	r1, #0
 800449e:	2078      	movs	r0, #120	; 0x78
 80044a0:	f000 fa26 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80044a4:	22d3      	movs	r2, #211	; 0xd3
 80044a6:	2100      	movs	r1, #0
 80044a8:	2078      	movs	r0, #120	; 0x78
 80044aa:	f000 fa21 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80044ae:	2200      	movs	r2, #0
 80044b0:	2100      	movs	r1, #0
 80044b2:	2078      	movs	r0, #120	; 0x78
 80044b4:	f000 fa1c 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80044b8:	22d5      	movs	r2, #213	; 0xd5
 80044ba:	2100      	movs	r1, #0
 80044bc:	2078      	movs	r0, #120	; 0x78
 80044be:	f000 fa17 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80044c2:	22f0      	movs	r2, #240	; 0xf0
 80044c4:	2100      	movs	r1, #0
 80044c6:	2078      	movs	r0, #120	; 0x78
 80044c8:	f000 fa12 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80044cc:	22d9      	movs	r2, #217	; 0xd9
 80044ce:	2100      	movs	r1, #0
 80044d0:	2078      	movs	r0, #120	; 0x78
 80044d2:	f000 fa0d 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80044d6:	2222      	movs	r2, #34	; 0x22
 80044d8:	2100      	movs	r1, #0
 80044da:	2078      	movs	r0, #120	; 0x78
 80044dc:	f000 fa08 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80044e0:	22da      	movs	r2, #218	; 0xda
 80044e2:	2100      	movs	r1, #0
 80044e4:	2078      	movs	r0, #120	; 0x78
 80044e6:	f000 fa03 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80044ea:	2212      	movs	r2, #18
 80044ec:	2100      	movs	r1, #0
 80044ee:	2078      	movs	r0, #120	; 0x78
 80044f0:	f000 f9fe 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80044f4:	22db      	movs	r2, #219	; 0xdb
 80044f6:	2100      	movs	r1, #0
 80044f8:	2078      	movs	r0, #120	; 0x78
 80044fa:	f000 f9f9 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80044fe:	2220      	movs	r2, #32
 8004500:	2100      	movs	r1, #0
 8004502:	2078      	movs	r0, #120	; 0x78
 8004504:	f000 f9f4 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8004508:	228d      	movs	r2, #141	; 0x8d
 800450a:	2100      	movs	r1, #0
 800450c:	2078      	movs	r0, #120	; 0x78
 800450e:	f000 f9ef 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8004512:	2214      	movs	r2, #20
 8004514:	2100      	movs	r1, #0
 8004516:	2078      	movs	r0, #120	; 0x78
 8004518:	f000 f9ea 	bl	80048f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800451c:	22af      	movs	r2, #175	; 0xaf
 800451e:	2100      	movs	r1, #0
 8004520:	2078      	movs	r0, #120	; 0x78
 8004522:	f000 f9e5 	bl	80048f0 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8004526:	2000      	movs	r0, #0
 8004528:	f000 f842 	bl	80045b0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800452c:	f000 f812 	bl	8004554 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <SSD1306_Init+0x178>)
 8004532:	2200      	movs	r2, #0
 8004534:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <SSD1306_Init+0x178>)
 8004538:	2200      	movs	r2, #0
 800453a:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <SSD1306_Init+0x178>)
 800453e:	2201      	movs	r2, #1
 8004540:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8004542:	2301      	movs	r3, #1
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000854 	.word	0x20000854
 8004550:	20000690 	.word	0x20000690

08004554 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800455a:	2300      	movs	r3, #0
 800455c:	71fb      	strb	r3, [r7, #7]
 800455e:	e01d      	b.n	800459c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004560:	79fb      	ldrb	r3, [r7, #7]
 8004562:	3b50      	subs	r3, #80	; 0x50
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	2100      	movs	r1, #0
 800456a:	2078      	movs	r0, #120	; 0x78
 800456c:	f000 f9c0 	bl	80048f0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004570:	2200      	movs	r2, #0
 8004572:	2100      	movs	r1, #0
 8004574:	2078      	movs	r0, #120	; 0x78
 8004576:	f000 f9bb 	bl	80048f0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800457a:	2210      	movs	r2, #16
 800457c:	2100      	movs	r1, #0
 800457e:	2078      	movs	r0, #120	; 0x78
 8004580:	f000 f9b6 	bl	80048f0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	01db      	lsls	r3, r3, #7
 8004588:	4a08      	ldr	r2, [pc, #32]	; (80045ac <SSD1306_UpdateScreen+0x58>)
 800458a:	441a      	add	r2, r3
 800458c:	2380      	movs	r3, #128	; 0x80
 800458e:	2140      	movs	r1, #64	; 0x40
 8004590:	2078      	movs	r0, #120	; 0x78
 8004592:	f000 f953 	bl	800483c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	3301      	adds	r3, #1
 800459a:	71fb      	strb	r3, [r7, #7]
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	2b07      	cmp	r3, #7
 80045a0:	d9de      	bls.n	8004560 <SSD1306_UpdateScreen+0xc>
	}
}
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000290 	.word	0x20000290

080045b0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0x100, sizeof(SSD1306_Buffer));
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <SSD1306_Fill+0x14>
 80045c0:	2300      	movs	r3, #0
 80045c2:	e001      	b.n	80045c8 <SSD1306_Fill+0x18>
 80045c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045cc:	4619      	mov	r1, r3
 80045ce:	4803      	ldr	r0, [pc, #12]	; (80045dc <SSD1306_Fill+0x2c>)
 80045d0:	f007 f86e 	bl	800b6b0 <memset>
}
 80045d4:	bf00      	nop
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000290 	.word	0x20000290

080045e0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	80fb      	strh	r3, [r7, #6]
 80045ea:	460b      	mov	r3, r1
 80045ec:	80bb      	strh	r3, [r7, #4]
 80045ee:	4613      	mov	r3, r2
 80045f0:	70fb      	strb	r3, [r7, #3]
	if (
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	2b7f      	cmp	r3, #127	; 0x7f
 80045f6:	d848      	bhi.n	800468a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80045f8:	88bb      	ldrh	r3, [r7, #4]
 80045fa:	2b3f      	cmp	r3, #63	; 0x3f
 80045fc:	d845      	bhi.n	800468a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80045fe:	4b25      	ldr	r3, [pc, #148]	; (8004694 <SSD1306_DrawPixel+0xb4>)
 8004600:	791b      	ldrb	r3, [r3, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d006      	beq.n	8004614 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8004606:	78fb      	ldrb	r3, [r7, #3]
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d11a      	bne.n	8004650 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800461a:	88fa      	ldrh	r2, [r7, #6]
 800461c:	88bb      	ldrh	r3, [r7, #4]
 800461e:	08db      	lsrs	r3, r3, #3
 8004620:	b298      	uxth	r0, r3
 8004622:	4603      	mov	r3, r0
 8004624:	01db      	lsls	r3, r3, #7
 8004626:	4413      	add	r3, r2
 8004628:	4a1b      	ldr	r2, [pc, #108]	; (8004698 <SSD1306_DrawPixel+0xb8>)
 800462a:	5cd3      	ldrb	r3, [r2, r3]
 800462c:	b25a      	sxtb	r2, r3
 800462e:	88bb      	ldrh	r3, [r7, #4]
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	2101      	movs	r1, #1
 8004636:	fa01 f303 	lsl.w	r3, r1, r3
 800463a:	b25b      	sxtb	r3, r3
 800463c:	4313      	orrs	r3, r2
 800463e:	b259      	sxtb	r1, r3
 8004640:	88fa      	ldrh	r2, [r7, #6]
 8004642:	4603      	mov	r3, r0
 8004644:	01db      	lsls	r3, r3, #7
 8004646:	4413      	add	r3, r2
 8004648:	b2c9      	uxtb	r1, r1
 800464a:	4a13      	ldr	r2, [pc, #76]	; (8004698 <SSD1306_DrawPixel+0xb8>)
 800464c:	54d1      	strb	r1, [r2, r3]
 800464e:	e01d      	b.n	800468c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004650:	88fa      	ldrh	r2, [r7, #6]
 8004652:	88bb      	ldrh	r3, [r7, #4]
 8004654:	08db      	lsrs	r3, r3, #3
 8004656:	b298      	uxth	r0, r3
 8004658:	4603      	mov	r3, r0
 800465a:	01db      	lsls	r3, r3, #7
 800465c:	4413      	add	r3, r2
 800465e:	4a0e      	ldr	r2, [pc, #56]	; (8004698 <SSD1306_DrawPixel+0xb8>)
 8004660:	5cd3      	ldrb	r3, [r2, r3]
 8004662:	b25a      	sxtb	r2, r3
 8004664:	88bb      	ldrh	r3, [r7, #4]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	2101      	movs	r1, #1
 800466c:	fa01 f303 	lsl.w	r3, r1, r3
 8004670:	b25b      	sxtb	r3, r3
 8004672:	43db      	mvns	r3, r3
 8004674:	b25b      	sxtb	r3, r3
 8004676:	4013      	ands	r3, r2
 8004678:	b259      	sxtb	r1, r3
 800467a:	88fa      	ldrh	r2, [r7, #6]
 800467c:	4603      	mov	r3, r0
 800467e:	01db      	lsls	r3, r3, #7
 8004680:	4413      	add	r3, r2
 8004682:	b2c9      	uxtb	r1, r1
 8004684:	4a04      	ldr	r2, [pc, #16]	; (8004698 <SSD1306_DrawPixel+0xb8>)
 8004686:	54d1      	strb	r1, [r2, r3]
 8004688:	e000      	b.n	800468c <SSD1306_DrawPixel+0xac>
		return;
 800468a:	bf00      	nop
	}
}
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr
 8004694:	20000690 	.word	0x20000690
 8004698:	20000290 	.word	0x20000290

0800469c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	460a      	mov	r2, r1
 80046a6:	80fb      	strh	r3, [r7, #6]
 80046a8:	4613      	mov	r3, r2
 80046aa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80046ac:	4a05      	ldr	r2, [pc, #20]	; (80046c4 <SSD1306_GotoXY+0x28>)
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80046b2:	4a04      	ldr	r2, [pc, #16]	; (80046c4 <SSD1306_GotoXY+0x28>)
 80046b4:	88bb      	ldrh	r3, [r7, #4]
 80046b6:	8053      	strh	r3, [r2, #2]
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc80      	pop	{r7}
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	20000690 	.word	0x20000690

080046c8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	6039      	str	r1, [r7, #0]
 80046d2:	71fb      	strb	r3, [r7, #7]
 80046d4:	4613      	mov	r3, r2
 80046d6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80046d8:	4b3a      	ldr	r3, [pc, #232]	; (80047c4 <SSD1306_Putc+0xfc>)
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	4413      	add	r3, r2
	if (
 80046e4:	2b7f      	cmp	r3, #127	; 0x7f
 80046e6:	dc07      	bgt.n	80046f8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80046e8:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <SSD1306_Putc+0xfc>)
 80046ea:	885b      	ldrh	r3, [r3, #2]
 80046ec:	461a      	mov	r2, r3
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	785b      	ldrb	r3, [r3, #1]
 80046f2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80046f4:	2b3f      	cmp	r3, #63	; 0x3f
 80046f6:	dd01      	ble.n	80046fc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	e05e      	b.n	80047ba <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	e04b      	b.n	800479a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	3b20      	subs	r3, #32
 800470a:	6839      	ldr	r1, [r7, #0]
 800470c:	7849      	ldrb	r1, [r1, #1]
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	4619      	mov	r1, r3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	440b      	add	r3, r1
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	4413      	add	r3, r2
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	e030      	b.n	8004788 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d010      	beq.n	8004758 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8004736:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <SSD1306_Putc+0xfc>)
 8004738:	881a      	ldrh	r2, [r3, #0]
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	b29b      	uxth	r3, r3
 800473e:	4413      	add	r3, r2
 8004740:	b298      	uxth	r0, r3
 8004742:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <SSD1306_Putc+0xfc>)
 8004744:	885a      	ldrh	r2, [r3, #2]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	b29b      	uxth	r3, r3
 800474a:	4413      	add	r3, r2
 800474c:	b29b      	uxth	r3, r3
 800474e:	79ba      	ldrb	r2, [r7, #6]
 8004750:	4619      	mov	r1, r3
 8004752:	f7ff ff45 	bl	80045e0 <SSD1306_DrawPixel>
 8004756:	e014      	b.n	8004782 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8004758:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <SSD1306_Putc+0xfc>)
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	b29b      	uxth	r3, r3
 8004760:	4413      	add	r3, r2
 8004762:	b298      	uxth	r0, r3
 8004764:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <SSD1306_Putc+0xfc>)
 8004766:	885a      	ldrh	r2, [r3, #2]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	b29b      	uxth	r3, r3
 800476c:	4413      	add	r3, r2
 800476e:	b299      	uxth	r1, r3
 8004770:	79bb      	ldrb	r3, [r7, #6]
 8004772:	2b00      	cmp	r3, #0
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	f7ff ff2f 	bl	80045e0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	3301      	adds	r3, #1
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4293      	cmp	r3, r2
 8004792:	d3c8      	bcc.n	8004726 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	3301      	adds	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	785b      	ldrb	r3, [r3, #1]
 800479e:	461a      	mov	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d3ad      	bcc.n	8004702 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80047a6:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <SSD1306_Putc+0xfc>)
 80047a8:	881a      	ldrh	r2, [r3, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	4413      	add	r3, r2
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	4b03      	ldr	r3, [pc, #12]	; (80047c4 <SSD1306_Putc+0xfc>)
 80047b6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80047b8:	79fb      	ldrb	r3, [r7, #7]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000690 	.word	0x20000690

080047c8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	4613      	mov	r3, r2
 80047d4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80047d6:	e012      	b.n	80047fe <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	79fa      	ldrb	r2, [r7, #7]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff ff71 	bl	80046c8 <SSD1306_Putc>
 80047e6:	4603      	mov	r3, r0
 80047e8:	461a      	mov	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d002      	beq.n	80047f8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	e008      	b.n	800480a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3301      	adds	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e8      	bne.n	80047d8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	781b      	ldrb	r3, [r3, #0]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800481a:	4b07      	ldr	r3, [pc, #28]	; (8004838 <ssd1306_I2C_Init+0x24>)
 800481c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800481e:	e002      	b.n	8004826 <ssd1306_I2C_Init+0x12>
		p--;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3b01      	subs	r3, #1
 8004824:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1f9      	bne.n	8004820 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	0003d090 	.word	0x0003d090

0800483c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800483c:	b5b0      	push	{r4, r5, r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af02      	add	r7, sp, #8
 8004842:	603a      	str	r2, [r7, #0]
 8004844:	461a      	mov	r2, r3
 8004846:	4603      	mov	r3, r0
 8004848:	71fb      	strb	r3, [r7, #7]
 800484a:	460b      	mov	r3, r1
 800484c:	71bb      	strb	r3, [r7, #6]
 800484e:	4613      	mov	r3, r2
 8004850:	80bb      	strh	r3, [r7, #4]
 8004852:	466b      	mov	r3, sp
 8004854:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8004856:	88bb      	ldrh	r3, [r7, #4]
 8004858:	1c58      	adds	r0, r3, #1
 800485a:	1e43      	subs	r3, r0, #1
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	4603      	mov	r3, r0
 8004860:	4619      	mov	r1, r3
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	f04f 0400 	mov.w	r4, #0
 800486e:	00d4      	lsls	r4, r2, #3
 8004870:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004874:	00cb      	lsls	r3, r1, #3
 8004876:	4603      	mov	r3, r0
 8004878:	4619      	mov	r1, r3
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	f04f 0400 	mov.w	r4, #0
 8004886:	00d4      	lsls	r4, r2, #3
 8004888:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800488c:	00cb      	lsls	r3, r1, #3
 800488e:	4603      	mov	r3, r0
 8004890:	3307      	adds	r3, #7
 8004892:	08db      	lsrs	r3, r3, #3
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	ebad 0d03 	sub.w	sp, sp, r3
 800489a:	ab02      	add	r3, sp, #8
 800489c:	3300      	adds	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	79ba      	ldrb	r2, [r7, #6]
 80048a4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 80048a6:	2301      	movs	r3, #1
 80048a8:	75fb      	strb	r3, [r7, #23]
 80048aa:	e00a      	b.n	80048c2 <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	441a      	add	r2, r3
 80048b4:	7dfb      	ldrb	r3, [r7, #23]
 80048b6:	7811      	ldrb	r1, [r2, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
 80048be:	3301      	adds	r3, #1
 80048c0:	75fb      	strb	r3, [r7, #23]
 80048c2:	7dfb      	ldrb	r3, [r7, #23]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	88ba      	ldrh	r2, [r7, #4]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d2ef      	bcs.n	80048ac <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 80048cc:	79fb      	ldrb	r3, [r7, #7]
 80048ce:	b299      	uxth	r1, r3
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	88b8      	ldrh	r0, [r7, #4]
 80048d4:	230a      	movs	r3, #10
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	4603      	mov	r3, r0
 80048da:	4804      	ldr	r0, [pc, #16]	; (80048ec <ssd1306_I2C_WriteMulti+0xb0>)
 80048dc:	f005 f83c 	bl	8009958 <HAL_I2C_Master_Transmit>
 80048e0:	46ad      	mov	sp, r5
}
 80048e2:	bf00      	nop
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bdb0      	pop	{r4, r5, r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000854 	.word	0x20000854

080048f0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	4603      	mov	r3, r0
 80048f8:	71fb      	strb	r3, [r7, #7]
 80048fa:	460b      	mov	r3, r1
 80048fc:	71bb      	strb	r3, [r7, #6]
 80048fe:	4613      	mov	r3, r2
 8004900:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8004902:	79bb      	ldrb	r3, [r7, #6]
 8004904:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8004906:	797b      	ldrb	r3, [r7, #5]
 8004908:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	b299      	uxth	r1, r3
 800490e:	f107 020c 	add.w	r2, r7, #12
 8004912:	230a      	movs	r3, #10
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	2302      	movs	r3, #2
 8004918:	4803      	ldr	r0, [pc, #12]	; (8004928 <ssd1306_I2C_Write+0x38>)
 800491a:	f005 f81d 	bl	8009958 <HAL_I2C_Master_Transmit>
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000854 	.word	0x20000854

0800492c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004932:	4b15      	ldr	r3, [pc, #84]	; (8004988 <HAL_MspInit+0x5c>)
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	4a14      	ldr	r2, [pc, #80]	; (8004988 <HAL_MspInit+0x5c>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	6193      	str	r3, [r2, #24]
 800493e:	4b12      	ldr	r3, [pc, #72]	; (8004988 <HAL_MspInit+0x5c>)
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800494a:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <HAL_MspInit+0x5c>)
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <HAL_MspInit+0x5c>)
 8004950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004954:	61d3      	str	r3, [r2, #28]
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <HAL_MspInit+0x5c>)
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004962:	4b0a      	ldr	r3, [pc, #40]	; (800498c <HAL_MspInit+0x60>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	4a04      	ldr	r2, [pc, #16]	; (800498c <HAL_MspInit+0x60>)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr
 8004988:	40021000 	.word	0x40021000
 800498c:	40010000 	.word	0x40010000

08004990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr

0800499c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049a0:	e7fe      	b.n	80049a0 <HardFault_Handler+0x4>

080049a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049a2:	b480      	push	{r7}
 80049a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049a6:	e7fe      	b.n	80049a6 <MemManage_Handler+0x4>

080049a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049ac:	e7fe      	b.n	80049ac <BusFault_Handler+0x4>

080049ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049ae:	b480      	push	{r7}
 80049b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049b2:	e7fe      	b.n	80049b2 <UsageFault_Handler+0x4>

080049b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049b8:	bf00      	nop
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr

080049c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049c4:	bf00      	nop
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr

080049cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr

080049d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049dc:	f002 ff28 	bl	8007830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 80049e0:	bf00      	nop
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80049e8:	4802      	ldr	r0, [pc, #8]	; (80049f4 <DMA1_Channel1_IRQHandler+0x10>)
 80049ea:	f004 fb91 	bl	8009110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	200007e8 	.word	0x200007e8

080049f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80049fc:	4802      	ldr	r0, [pc, #8]	; (8004a08 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80049fe:	f003 ffa1 	bl	8008944 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004a02:	bf00      	nop
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	2000082c 	.word	0x2000082c
 8004a0c:	00000000 	.word	0x00000000

08004a10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a10:	b5b0      	push	{r4, r5, r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a14:	48ba      	ldr	r0, [pc, #744]	; (8004d00 <TIM2_IRQHandler+0x2f0>)
 8004a16:	f006 f984 	bl	800ad22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  test_tim2++;
 8004a1a:	4bba      	ldr	r3, [pc, #744]	; (8004d04 <TIM2_IRQHandler+0x2f4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	4ab8      	ldr	r2, [pc, #736]	; (8004d04 <TIM2_IRQHandler+0x2f4>)
 8004a22:	6013      	str	r3, [r2, #0]
  hitung_suhu++;
 8004a24:	4bb8      	ldr	r3, [pc, #736]	; (8004d08 <TIM2_IRQHandler+0x2f8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	4ab7      	ldr	r2, [pc, #732]	; (8004d08 <TIM2_IRQHandler+0x2f8>)
 8004a2c:	6013      	str	r3, [r2, #0]

  sumI=sumI-i_arrdata[i];
 8004a2e:	4bb7      	ldr	r3, [pc, #732]	; (8004d0c <TIM2_IRQHandler+0x2fc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4ab7      	ldr	r2, [pc, #732]	; (8004d10 <TIM2_IRQHandler+0x300>)
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	49b7      	ldr	r1, [pc, #732]	; (8004d14 <TIM2_IRQHandler+0x304>)
 8004a38:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	4ab3      	ldr	r2, [pc, #716]	; (8004d0c <TIM2_IRQHandler+0x2fc>)
 8004a40:	6013      	str	r3, [r2, #0]
  sumRef=sumRef-ref_arrdata[i];
 8004a42:	4bb5      	ldr	r3, [pc, #724]	; (8004d18 <TIM2_IRQHandler+0x308>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4ab2      	ldr	r2, [pc, #712]	; (8004d10 <TIM2_IRQHandler+0x300>)
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	49b4      	ldr	r1, [pc, #720]	; (8004d1c <TIM2_IRQHandler+0x30c>)
 8004a4c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	4ab1      	ldr	r2, [pc, #708]	; (8004d18 <TIM2_IRQHandler+0x308>)
 8004a54:	6013      	str	r3, [r2, #0]

  i_arrdata[i]=adc_val[0];
 8004a56:	4bae      	ldr	r3, [pc, #696]	; (8004d10 <TIM2_IRQHandler+0x300>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4ab1      	ldr	r2, [pc, #708]	; (8004d20 <TIM2_IRQHandler+0x310>)
 8004a5c:	8811      	ldrh	r1, [r2, #0]
 8004a5e:	4aad      	ldr	r2, [pc, #692]	; (8004d14 <TIM2_IRQHandler+0x304>)
 8004a60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  ref_arrdata[i]=adc_val[1];
 8004a64:	4baa      	ldr	r3, [pc, #680]	; (8004d10 <TIM2_IRQHandler+0x300>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4aad      	ldr	r2, [pc, #692]	; (8004d20 <TIM2_IRQHandler+0x310>)
 8004a6a:	8851      	ldrh	r1, [r2, #2]
 8004a6c:	4aab      	ldr	r2, [pc, #684]	; (8004d1c <TIM2_IRQHandler+0x30c>)
 8004a6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

  sumI=sumI+i_arrdata[i];
 8004a72:	4ba7      	ldr	r3, [pc, #668]	; (8004d10 <TIM2_IRQHandler+0x300>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4aa7      	ldr	r2, [pc, #668]	; (8004d14 <TIM2_IRQHandler+0x304>)
 8004a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4ba3      	ldr	r3, [pc, #652]	; (8004d0c <TIM2_IRQHandler+0x2fc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4413      	add	r3, r2
 8004a84:	4aa1      	ldr	r2, [pc, #644]	; (8004d0c <TIM2_IRQHandler+0x2fc>)
 8004a86:	6013      	str	r3, [r2, #0]
  sumRef=sumRef+ref_arrdata[i];
 8004a88:	4ba1      	ldr	r3, [pc, #644]	; (8004d10 <TIM2_IRQHandler+0x300>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4aa3      	ldr	r2, [pc, #652]	; (8004d1c <TIM2_IRQHandler+0x30c>)
 8004a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a92:	461a      	mov	r2, r3
 8004a94:	4ba0      	ldr	r3, [pc, #640]	; (8004d18 <TIM2_IRQHandler+0x308>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4413      	add	r3, r2
 8004a9a:	4a9f      	ldr	r2, [pc, #636]	; (8004d18 <TIM2_IRQHandler+0x308>)
 8004a9c:	6013      	str	r3, [r2, #0]

  i_datadigi=sumI/maxdata;
 8004a9e:	4b9b      	ldr	r3, [pc, #620]	; (8004d0c <TIM2_IRQHandler+0x2fc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4aa0      	ldr	r2, [pc, #640]	; (8004d24 <TIM2_IRQHandler+0x314>)
 8004aa4:	fb82 1203 	smull	r1, r2, r2, r3
 8004aa8:	1152      	asrs	r2, r2, #5
 8004aaa:	17db      	asrs	r3, r3, #31
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fc f8f4 	bl	8000c9c <__aeabi_i2f>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	4b9c      	ldr	r3, [pc, #624]	; (8004d28 <TIM2_IRQHandler+0x318>)
 8004ab8:	601a      	str	r2, [r3, #0]
  ref_datadigi=sumRef/maxdata;
 8004aba:	4b97      	ldr	r3, [pc, #604]	; (8004d18 <TIM2_IRQHandler+0x308>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a99      	ldr	r2, [pc, #612]	; (8004d24 <TIM2_IRQHandler+0x314>)
 8004ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8004ac4:	1152      	asrs	r2, r2, #5
 8004ac6:	17db      	asrs	r3, r3, #31
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fc f8e6 	bl	8000c9c <__aeabi_i2f>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b96      	ldr	r3, [pc, #600]	; (8004d2c <TIM2_IRQHandler+0x31c>)
 8004ad4:	601a      	str	r2, [r3, #0]


  // *************PROSES Konversi dari DATA ADC ke Data Real *******************************/////

  VBATT=v_cell_tot;
 8004ad6:	4b96      	ldr	r3, [pc, #600]	; (8004d30 <TIM2_IRQHandler+0x320>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a96      	ldr	r2, [pc, #600]	; (8004d34 <TIM2_IRQHandler+0x324>)
 8004adc:	6013      	str	r3, [r2, #0]
  if(VBATT<0) VBATT=-1;
 8004ade:	4b95      	ldr	r3, [pc, #596]	; (8004d34 <TIM2_IRQHandler+0x324>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f04f 0100 	mov.w	r1, #0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fc faca 	bl	8001080 <__aeabi_fcmplt>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <TIM2_IRQHandler+0xe8>
 8004af2:	4b90      	ldr	r3, [pc, #576]	; (8004d34 <TIM2_IRQHandler+0x324>)
 8004af4:	4a90      	ldr	r2, [pc, #576]	; (8004d38 <TIM2_IRQHandler+0x328>)
 8004af6:	601a      	str	r2, [r3, #0]
//	  IBATT = -0.06309346733668010*i_datadigi + 121.153903517579 - OFFSET_SENSOR_ARUS; //modul A fix
//	  IBATT_for_offset_cal = -0.06309346733668010*i_datadigi + 121.153903517579;
//	  IBATT=0.95556329728489100*IBATT + 0.06243330788446070;// Modul A Recalibrate
  }
  else if (UNIQUE_Code == 0xBBBB1){
	  IBATT=-0.0391033588118257*i_datadigi + 77.0576930186035 - OFFSET_SENSOR_ARUS; // Modul B fix
 8004af8:	4b8b      	ldr	r3, [pc, #556]	; (8004d28 <TIM2_IRQHandler+0x318>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fb fc93 	bl	8000428 <__aeabi_f2d>
 8004b02:	a373      	add	r3, pc, #460	; (adr r3, 8004cd0 <TIM2_IRQHandler+0x2c0>)
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	f7fb fce6 	bl	80004d8 <__aeabi_dmul>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	460c      	mov	r4, r1
 8004b10:	4618      	mov	r0, r3
 8004b12:	4621      	mov	r1, r4
 8004b14:	a370      	add	r3, pc, #448	; (adr r3, 8004cd8 <TIM2_IRQHandler+0x2c8>)
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f7fb fb27 	bl	800016c <__adddf3>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	460c      	mov	r4, r1
 8004b22:	4625      	mov	r5, r4
 8004b24:	461c      	mov	r4, r3
 8004b26:	4b85      	ldr	r3, [pc, #532]	; (8004d3c <TIM2_IRQHandler+0x32c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fb fc7c 	bl	8000428 <__aeabi_f2d>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4620      	mov	r0, r4
 8004b36:	4629      	mov	r1, r5
 8004b38:	f7fb fb16 	bl	8000168 <__aeabi_dsub>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	460c      	mov	r4, r1
 8004b40:	4618      	mov	r0, r3
 8004b42:	4621      	mov	r1, r4
 8004b44:	f7fb ffa0 	bl	8000a88 <__aeabi_d2f>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b7d      	ldr	r3, [pc, #500]	; (8004d40 <TIM2_IRQHandler+0x330>)
 8004b4c:	601a      	str	r2, [r3, #0]
	  IBATT_for_offset_cal= -0.0391033588118257*i_datadigi + 77.0576930186035;
 8004b4e:	4b76      	ldr	r3, [pc, #472]	; (8004d28 <TIM2_IRQHandler+0x318>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fb fc68 	bl	8000428 <__aeabi_f2d>
 8004b58:	a35d      	add	r3, pc, #372	; (adr r3, 8004cd0 <TIM2_IRQHandler+0x2c0>)
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	f7fb fcbb 	bl	80004d8 <__aeabi_dmul>
 8004b62:	4603      	mov	r3, r0
 8004b64:	460c      	mov	r4, r1
 8004b66:	4618      	mov	r0, r3
 8004b68:	4621      	mov	r1, r4
 8004b6a:	a35b      	add	r3, pc, #364	; (adr r3, 8004cd8 <TIM2_IRQHandler+0x2c8>)
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	f7fb fafc 	bl	800016c <__adddf3>
 8004b74:	4603      	mov	r3, r0
 8004b76:	460c      	mov	r4, r1
 8004b78:	4618      	mov	r0, r3
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	f7fb ff84 	bl	8000a88 <__aeabi_d2f>
 8004b80:	4602      	mov	r2, r0
 8004b82:	4b70      	ldr	r3, [pc, #448]	; (8004d44 <TIM2_IRQHandler+0x334>)
 8004b84:	601a      	str	r2, [r3, #0]

//	  IBATT=-0.0399033588118257*i_datadigi + 77.0576930186035 - OFFSET_SENSOR_ARUS; // Modul B fix
//	  IBATT_for_offset_cal= -0.0399033588118257*i_datadigi + 77.0576930186035;
	  IBATT = 0.78010345267720400*IBATT + 0.02604389098500030; //recalibrate module B
 8004b86:	4b6e      	ldr	r3, [pc, #440]	; (8004d40 <TIM2_IRQHandler+0x330>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fb fc4c 	bl	8000428 <__aeabi_f2d>
 8004b90:	a353      	add	r3, pc, #332	; (adr r3, 8004ce0 <TIM2_IRQHandler+0x2d0>)
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	f7fb fc9f 	bl	80004d8 <__aeabi_dmul>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	460c      	mov	r4, r1
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	a351      	add	r3, pc, #324	; (adr r3, 8004ce8 <TIM2_IRQHandler+0x2d8>)
 8004ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba8:	f7fb fae0 	bl	800016c <__adddf3>
 8004bac:	4603      	mov	r3, r0
 8004bae:	460c      	mov	r4, r1
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	f7fb ff68 	bl	8000a88 <__aeabi_d2f>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b61      	ldr	r3, [pc, #388]	; (8004d40 <TIM2_IRQHandler+0x330>)
 8004bbc:	601a      	str	r2, [r3, #0]
  }

  if(hitung_suhu>=max_hitung_suhu)
 8004bbe:	4b52      	ldr	r3, [pc, #328]	; (8004d08 <TIM2_IRQHandler+0x2f8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b09      	cmp	r3, #9
 8004bc4:	f340 8153 	ble.w	8004e6e <TIM2_IRQHandler+0x45e>
  {
	  hitung_suhu=0;
 8004bc8:	4b4f      	ldr	r3, [pc, #316]	; (8004d08 <TIM2_IRQHandler+0x2f8>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
	  Res_T1=adc_val[2]*10000/(3900-adc_val[2]); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 8004bce:	4b54      	ldr	r3, [pc, #336]	; (8004d20 <TIM2_IRQHandler+0x310>)
 8004bd0:	889b      	ldrh	r3, [r3, #4]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f242 7310 	movw	r3, #10000	; 0x2710
 8004bd8:	fb03 f202 	mul.w	r2, r3, r2
 8004bdc:	4b50      	ldr	r3, [pc, #320]	; (8004d20 <TIM2_IRQHandler+0x310>)
 8004bde:	889b      	ldrh	r3, [r3, #4]
 8004be0:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004be4:	330c      	adds	r3, #12
 8004be6:	fb92 f3f3 	sdiv	r3, r2, r3
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fc f856 	bl	8000c9c <__aeabi_i2f>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b55      	ldr	r3, [pc, #340]	; (8004d48 <TIM2_IRQHandler+0x338>)
 8004bf4:	601a      	str	r2, [r3, #0]
	  Suhu_T1= -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8004bf6:	4b54      	ldr	r3, [pc, #336]	; (8004d48 <TIM2_IRQHandler+0x338>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fb fc14 	bl	8000428 <__aeabi_f2d>
 8004c00:	4603      	mov	r3, r0
 8004c02:	460c      	mov	r4, r1
 8004c04:	4618      	mov	r0, r3
 8004c06:	4621      	mov	r1, r4
 8004c08:	f008 fdc6 	bl	800d798 <log>
 8004c0c:	a338      	add	r3, pc, #224	; (adr r3, 8004cf0 <TIM2_IRQHandler+0x2e0>)
 8004c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c12:	f7fb fc61 	bl	80004d8 <__aeabi_dmul>
 8004c16:	4603      	mov	r3, r0
 8004c18:	460c      	mov	r4, r1
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	a336      	add	r3, pc, #216	; (adr r3, 8004cf8 <TIM2_IRQHandler+0x2e8>)
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	f7fb faa2 	bl	800016c <__adddf3>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	4621      	mov	r1, r4
 8004c30:	f7fb ff2a 	bl	8000a88 <__aeabi_d2f>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b45      	ldr	r3, [pc, #276]	; (8004d4c <TIM2_IRQHandler+0x33c>)
 8004c38:	601a      	str	r2, [r3, #0]
	  Res_T2=adc_val[3]*10000/(3900-adc_val[3]);
 8004c3a:	4b39      	ldr	r3, [pc, #228]	; (8004d20 <TIM2_IRQHandler+0x310>)
 8004c3c:	88db      	ldrh	r3, [r3, #6]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f242 7310 	movw	r3, #10000	; 0x2710
 8004c44:	fb03 f202 	mul.w	r2, r3, r2
 8004c48:	4b35      	ldr	r3, [pc, #212]	; (8004d20 <TIM2_IRQHandler+0x310>)
 8004c4a:	88db      	ldrh	r3, [r3, #6]
 8004c4c:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004c50:	330c      	adds	r3, #12
 8004c52:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fc f820 	bl	8000c9c <__aeabi_i2f>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	4b3c      	ldr	r3, [pc, #240]	; (8004d50 <TIM2_IRQHandler+0x340>)
 8004c60:	601a      	str	r2, [r3, #0]
	  Suhu_T2= -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8004c62:	4b3b      	ldr	r3, [pc, #236]	; (8004d50 <TIM2_IRQHandler+0x340>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fb fbde 	bl	8000428 <__aeabi_f2d>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	4618      	mov	r0, r3
 8004c72:	4621      	mov	r1, r4
 8004c74:	f008 fd90 	bl	800d798 <log>
 8004c78:	a31d      	add	r3, pc, #116	; (adr r3, 8004cf0 <TIM2_IRQHandler+0x2e0>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	f7fb fc2b 	bl	80004d8 <__aeabi_dmul>
 8004c82:	4603      	mov	r3, r0
 8004c84:	460c      	mov	r4, r1
 8004c86:	4618      	mov	r0, r3
 8004c88:	4621      	mov	r1, r4
 8004c8a:	a31b      	add	r3, pc, #108	; (adr r3, 8004cf8 <TIM2_IRQHandler+0x2e8>)
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	f7fb fa6c 	bl	800016c <__adddf3>
 8004c94:	4603      	mov	r3, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	4618      	mov	r0, r3
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	f7fb fef4 	bl	8000a88 <__aeabi_d2f>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4b2c      	ldr	r3, [pc, #176]	; (8004d54 <TIM2_IRQHandler+0x344>)
 8004ca4:	601a      	str	r2, [r3, #0]
	  Res_T3=adc_val[4]*10000/(3900-adc_val[4]);
 8004ca6:	4b1e      	ldr	r3, [pc, #120]	; (8004d20 <TIM2_IRQHandler+0x310>)
 8004ca8:	891b      	ldrh	r3, [r3, #8]
 8004caa:	461a      	mov	r2, r3
 8004cac:	f242 7310 	movw	r3, #10000	; 0x2710
 8004cb0:	fb03 f202 	mul.w	r2, r3, r2
 8004cb4:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <TIM2_IRQHandler+0x310>)
 8004cb6:	891b      	ldrh	r3, [r3, #8]
 8004cb8:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fb ffea 	bl	8000c9c <__aeabi_i2f>
 8004cc8:	e046      	b.n	8004d58 <TIM2_IRQHandler+0x348>
 8004cca:	bf00      	nop
 8004ccc:	f3af 8000 	nop.w
 8004cd0:	fe856621 	.word	0xfe856621
 8004cd4:	bfa4055a 	.word	0xbfa4055a
 8004cd8:	3e0f0703 	.word	0x3e0f0703
 8004cdc:	405343b1 	.word	0x405343b1
 8004ce0:	8417d94b 	.word	0x8417d94b
 8004ce4:	3fe8f69b 	.word	0x3fe8f69b
 8004ce8:	f02a274b 	.word	0xf02a274b
 8004cec:	3f9aab3f 	.word	0x3f9aab3f
 8004cf0:	cccccccd 	.word	0xcccccccd
 8004cf4:	c0380ccc 	.word	0xc0380ccc
 8004cf8:	b851eb85 	.word	0xb851eb85
 8004cfc:	406ecd1e 	.word	0x406ecd1e
 8004d00:	20001548 	.word	0x20001548
 8004d04:	20000bdc 	.word	0x20000bdc
 8004d08:	20001100 	.word	0x20001100
 8004d0c:	200010f4 	.word	0x200010f4
 8004d10:	200010bc 	.word	0x200010bc
 8004d14:	20000c8c 	.word	0x20000c8c
 8004d18:	20001084 	.word	0x20001084
 8004d1c:	20001114 	.word	0x20001114
 8004d20:	2000090c 	.word	0x2000090c
 8004d24:	10624dd3 	.word	0x10624dd3
 8004d28:	2000108c 	.word	0x2000108c
 8004d2c:	200010ac 	.word	0x200010ac
 8004d30:	20000bbc 	.word	0x20000bbc
 8004d34:	20001094 	.word	0x20001094
 8004d38:	bf800000 	.word	0xbf800000
 8004d3c:	2000110c 	.word	0x2000110c
 8004d40:	200010b0 	.word	0x200010b0
 8004d44:	20001110 	.word	0x20001110
 8004d48:	200010a8 	.word	0x200010a8
 8004d4c:	200010c4 	.word	0x200010c4
 8004d50:	200010f0 	.word	0x200010f0
 8004d54:	20001500 	.word	0x20001500
 8004d58:	4602      	mov	r2, r0
 8004d5a:	4b53      	ldr	r3, [pc, #332]	; (8004ea8 <TIM2_IRQHandler+0x498>)
 8004d5c:	601a      	str	r2, [r3, #0]
	  Suhu_T3= -24.05*log(Res_T3) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8004d5e:	4b52      	ldr	r3, [pc, #328]	; (8004ea8 <TIM2_IRQHandler+0x498>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fb fb60 	bl	8000428 <__aeabi_f2d>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	4621      	mov	r1, r4
 8004d70:	f008 fd12 	bl	800d798 <log>
 8004d74:	a348      	add	r3, pc, #288	; (adr r3, 8004e98 <TIM2_IRQHandler+0x488>)
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	f7fb fbad 	bl	80004d8 <__aeabi_dmul>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	460c      	mov	r4, r1
 8004d82:	4618      	mov	r0, r3
 8004d84:	4621      	mov	r1, r4
 8004d86:	a346      	add	r3, pc, #280	; (adr r3, 8004ea0 <TIM2_IRQHandler+0x490>)
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	f7fb f9ee 	bl	800016c <__adddf3>
 8004d90:	4603      	mov	r3, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	4618      	mov	r0, r3
 8004d96:	4621      	mov	r1, r4
 8004d98:	f7fb fe76 	bl	8000a88 <__aeabi_d2f>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	4b43      	ldr	r3, [pc, #268]	; (8004eac <TIM2_IRQHandler+0x49c>)
 8004da0:	601a      	str	r2, [r3, #0]
	  Res_T4=adc_val[5]*10000/(3900-adc_val[5]);
 8004da2:	4b43      	ldr	r3, [pc, #268]	; (8004eb0 <TIM2_IRQHandler+0x4a0>)
 8004da4:	895b      	ldrh	r3, [r3, #10]
 8004da6:	461a      	mov	r2, r3
 8004da8:	f242 7310 	movw	r3, #10000	; 0x2710
 8004dac:	fb03 f202 	mul.w	r2, r3, r2
 8004db0:	4b3f      	ldr	r3, [pc, #252]	; (8004eb0 <TIM2_IRQHandler+0x4a0>)
 8004db2:	895b      	ldrh	r3, [r3, #10]
 8004db4:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004db8:	330c      	adds	r3, #12
 8004dba:	fb92 f3f3 	sdiv	r3, r2, r3
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fb ff6c 	bl	8000c9c <__aeabi_i2f>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <TIM2_IRQHandler+0x4a4>)
 8004dc8:	601a      	str	r2, [r3, #0]
	  Suhu_T4= -24.05*log(Res_T4) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8004dca:	4b3a      	ldr	r3, [pc, #232]	; (8004eb4 <TIM2_IRQHandler+0x4a4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fb fb2a 	bl	8000428 <__aeabi_f2d>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	4618      	mov	r0, r3
 8004dda:	4621      	mov	r1, r4
 8004ddc:	f008 fcdc 	bl	800d798 <log>
 8004de0:	a32d      	add	r3, pc, #180	; (adr r3, 8004e98 <TIM2_IRQHandler+0x488>)
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	f7fb fb77 	bl	80004d8 <__aeabi_dmul>
 8004dea:	4603      	mov	r3, r0
 8004dec:	460c      	mov	r4, r1
 8004dee:	4618      	mov	r0, r3
 8004df0:	4621      	mov	r1, r4
 8004df2:	a32b      	add	r3, pc, #172	; (adr r3, 8004ea0 <TIM2_IRQHandler+0x490>)
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f7fb f9b8 	bl	800016c <__adddf3>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	4618      	mov	r0, r3
 8004e02:	4621      	mov	r1, r4
 8004e04:	f7fb fe40 	bl	8000a88 <__aeabi_d2f>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <TIM2_IRQHandler+0x4a8>)
 8004e0c:	601a      	str	r2, [r3, #0]

	  if(Suhu_T1>=130) Suhu_T1 = 130;
 8004e0e:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <TIM2_IRQHandler+0x4ac>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	492b      	ldr	r1, [pc, #172]	; (8004ec0 <TIM2_IRQHandler+0x4b0>)
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fc f947 	bl	80010a8 <__aeabi_fcmpge>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <TIM2_IRQHandler+0x416>
 8004e20:	4b26      	ldr	r3, [pc, #152]	; (8004ebc <TIM2_IRQHandler+0x4ac>)
 8004e22:	4a27      	ldr	r2, [pc, #156]	; (8004ec0 <TIM2_IRQHandler+0x4b0>)
 8004e24:	601a      	str	r2, [r3, #0]
	  if(Suhu_T2>=130) Suhu_T2 = 130;
 8004e26:	4b27      	ldr	r3, [pc, #156]	; (8004ec4 <TIM2_IRQHandler+0x4b4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4925      	ldr	r1, [pc, #148]	; (8004ec0 <TIM2_IRQHandler+0x4b0>)
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fc f93b 	bl	80010a8 <__aeabi_fcmpge>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <TIM2_IRQHandler+0x42e>
 8004e38:	4b22      	ldr	r3, [pc, #136]	; (8004ec4 <TIM2_IRQHandler+0x4b4>)
 8004e3a:	4a21      	ldr	r2, [pc, #132]	; (8004ec0 <TIM2_IRQHandler+0x4b0>)
 8004e3c:	601a      	str	r2, [r3, #0]
	  if(Suhu_T3>=130) Suhu_T3 = 130;
 8004e3e:	4b1b      	ldr	r3, [pc, #108]	; (8004eac <TIM2_IRQHandler+0x49c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	491f      	ldr	r1, [pc, #124]	; (8004ec0 <TIM2_IRQHandler+0x4b0>)
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fc f92f 	bl	80010a8 <__aeabi_fcmpge>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <TIM2_IRQHandler+0x446>
 8004e50:	4b16      	ldr	r3, [pc, #88]	; (8004eac <TIM2_IRQHandler+0x49c>)
 8004e52:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <TIM2_IRQHandler+0x4b0>)
 8004e54:	601a      	str	r2, [r3, #0]
	  if(Suhu_T4>=130) Suhu_T4 = 130;
 8004e56:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <TIM2_IRQHandler+0x4a8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4919      	ldr	r1, [pc, #100]	; (8004ec0 <TIM2_IRQHandler+0x4b0>)
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fc f923 	bl	80010a8 <__aeabi_fcmpge>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <TIM2_IRQHandler+0x45e>
 8004e68:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <TIM2_IRQHandler+0x4a8>)
 8004e6a:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <TIM2_IRQHandler+0x4b0>)
 8004e6c:	601a      	str	r2, [r3, #0]
  }

  if(BATT_Start_Up==1)
 8004e6e:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <TIM2_IRQHandler+0x4b8>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	f040 80cd 	bne.w	8005012 <TIM2_IRQHandler+0x602>
  {
	  if(BATT_State==STATE_DISCHARGE)
 8004e78:	4b14      	ldr	r3, [pc, #80]	; (8004ecc <TIM2_IRQHandler+0x4bc>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d102      	bne.n	8004e86 <TIM2_IRQHandler+0x476>
	  {
		 Batt_Protection_when_discharge();
 8004e80:	f000 f9fe 	bl	8005280 <Batt_Protection_when_discharge>
 8004e84:	e02a      	b.n	8004edc <TIM2_IRQHandler+0x4cc>
	  }

	  else if(BATT_State==STATE_CHARGE)
 8004e86:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <TIM2_IRQHandler+0x4bc>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d120      	bne.n	8004ed0 <TIM2_IRQHandler+0x4c0>
	  {
		  Batt_Protection_when_charge();
 8004e8e:	f001 f82f 	bl	8005ef0 <Batt_Protection_when_charge>
 8004e92:	e023      	b.n	8004edc <TIM2_IRQHandler+0x4cc>
 8004e94:	f3af 8000 	nop.w
 8004e98:	cccccccd 	.word	0xcccccccd
 8004e9c:	c0380ccc 	.word	0xc0380ccc
 8004ea0:	b851eb85 	.word	0xb851eb85
 8004ea4:	406ecd1e 	.word	0x406ecd1e
 8004ea8:	20001108 	.word	0x20001108
 8004eac:	20001098 	.word	0x20001098
 8004eb0:	2000090c 	.word	0x2000090c
 8004eb4:	200010b4 	.word	0x200010b4
 8004eb8:	200010f8 	.word	0x200010f8
 8004ebc:	200010c4 	.word	0x200010c4
 8004ec0:	43020000 	.word	0x43020000
 8004ec4:	20001500 	.word	0x20001500
 8004ec8:	2000028b 	.word	0x2000028b
 8004ecc:	200009b0 	.word	0x200009b0
	  }

	  else if(BATT_State==STATE_FULL_CHARGE_DISCHARGE)
 8004ed0:	4ba3      	ldr	r3, [pc, #652]	; (8005160 <TIM2_IRQHandler+0x750>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d101      	bne.n	8004edc <TIM2_IRQHandler+0x4cc>
	  {
		  Batt_Protection_when_chargedischarge();
 8004ed8:	f001 fbde 	bl	8006698 <Batt_Protection_when_chargedischarge>
	  }


	  //********************* Clearing protection status *****************************////
	  // ---> Clearing UnderVoltage
	  if(((Clear_Trip_undervoltage==1)||(VBATT>54))&&flag_trip_undervoltage==ON)
 8004edc:	4ba1      	ldr	r3, [pc, #644]	; (8005164 <TIM2_IRQHandler+0x754>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d008      	beq.n	8004ef6 <TIM2_IRQHandler+0x4e6>
 8004ee4:	4ba0      	ldr	r3, [pc, #640]	; (8005168 <TIM2_IRQHandler+0x758>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	49a0      	ldr	r1, [pc, #640]	; (800516c <TIM2_IRQHandler+0x75c>)
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fc f8e6 	bl	80010bc <__aeabi_fcmpgt>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d009      	beq.n	8004f0a <TIM2_IRQHandler+0x4fa>
 8004ef6:	4b9e      	ldr	r3, [pc, #632]	; (8005170 <TIM2_IRQHandler+0x760>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d105      	bne.n	8004f0a <TIM2_IRQHandler+0x4fa>
	  {
		  flag_trip_undervoltage=OFF;
 8004efe:	4b9c      	ldr	r3, [pc, #624]	; (8005170 <TIM2_IRQHandler+0x760>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
		  Clear_Trip_undervoltage=0;
 8004f04:	4b97      	ldr	r3, [pc, #604]	; (8005164 <TIM2_IRQHandler+0x754>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverCurrent Discharge
	  if(flag_trip_overcurrentdischarge==ON && Clear_Trip_overcurrentdischarge==1)
 8004f0a:	4b9a      	ldr	r3, [pc, #616]	; (8005174 <TIM2_IRQHandler+0x764>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d109      	bne.n	8004f26 <TIM2_IRQHandler+0x516>
 8004f12:	4b99      	ldr	r3, [pc, #612]	; (8005178 <TIM2_IRQHandler+0x768>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d105      	bne.n	8004f26 <TIM2_IRQHandler+0x516>
	  {
		  flag_trip_overcurrentdischarge=OFF;
 8004f1a:	4b96      	ldr	r3, [pc, #600]	; (8005174 <TIM2_IRQHandler+0x764>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	701a      	strb	r2, [r3, #0]
		  Clear_Trip_overcurrentdischarge=0;
 8004f20:	4b95      	ldr	r3, [pc, #596]	; (8005178 <TIM2_IRQHandler+0x768>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverTemperature
	  if(flag_trip_overtemperature==ON && (Suhu_T1<40)&&(Suhu_T2<50)&&(Suhu_T3<40)&&(Suhu_T4<50))
 8004f26:	4b95      	ldr	r3, [pc, #596]	; (800517c <TIM2_IRQHandler+0x76c>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d126      	bne.n	8004f7c <TIM2_IRQHandler+0x56c>
 8004f2e:	4b94      	ldr	r3, [pc, #592]	; (8005180 <TIM2_IRQHandler+0x770>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4994      	ldr	r1, [pc, #592]	; (8005184 <TIM2_IRQHandler+0x774>)
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fc f8a3 	bl	8001080 <__aeabi_fcmplt>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01d      	beq.n	8004f7c <TIM2_IRQHandler+0x56c>
 8004f40:	4b91      	ldr	r3, [pc, #580]	; (8005188 <TIM2_IRQHandler+0x778>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4991      	ldr	r1, [pc, #580]	; (800518c <TIM2_IRQHandler+0x77c>)
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fc f89a 	bl	8001080 <__aeabi_fcmplt>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d014      	beq.n	8004f7c <TIM2_IRQHandler+0x56c>
 8004f52:	4b8f      	ldr	r3, [pc, #572]	; (8005190 <TIM2_IRQHandler+0x780>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	498b      	ldr	r1, [pc, #556]	; (8005184 <TIM2_IRQHandler+0x774>)
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fc f891 	bl	8001080 <__aeabi_fcmplt>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00b      	beq.n	8004f7c <TIM2_IRQHandler+0x56c>
 8004f64:	4b8b      	ldr	r3, [pc, #556]	; (8005194 <TIM2_IRQHandler+0x784>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4988      	ldr	r1, [pc, #544]	; (800518c <TIM2_IRQHandler+0x77c>)
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fc f888 	bl	8001080 <__aeabi_fcmplt>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <TIM2_IRQHandler+0x56c>
	  {
		  flag_trip_overtemperature=OFF;
 8004f76:	4b81      	ldr	r3, [pc, #516]	; (800517c <TIM2_IRQHandler+0x76c>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing UnderTemperature
	  if(flag_trip_undertemperature==ON && (Suhu_T1>20)&&(Suhu_T2>20)&&(Suhu_T3>20)&&(Suhu_T4>20))
 8004f7c:	4b86      	ldr	r3, [pc, #536]	; (8005198 <TIM2_IRQHandler+0x788>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d126      	bne.n	8004fd2 <TIM2_IRQHandler+0x5c2>
 8004f84:	4b7e      	ldr	r3, [pc, #504]	; (8005180 <TIM2_IRQHandler+0x770>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4984      	ldr	r1, [pc, #528]	; (800519c <TIM2_IRQHandler+0x78c>)
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fc f896 	bl	80010bc <__aeabi_fcmpgt>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01d      	beq.n	8004fd2 <TIM2_IRQHandler+0x5c2>
 8004f96:	4b7c      	ldr	r3, [pc, #496]	; (8005188 <TIM2_IRQHandler+0x778>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4980      	ldr	r1, [pc, #512]	; (800519c <TIM2_IRQHandler+0x78c>)
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fc f88d 	bl	80010bc <__aeabi_fcmpgt>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d014      	beq.n	8004fd2 <TIM2_IRQHandler+0x5c2>
 8004fa8:	4b79      	ldr	r3, [pc, #484]	; (8005190 <TIM2_IRQHandler+0x780>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	497b      	ldr	r1, [pc, #492]	; (800519c <TIM2_IRQHandler+0x78c>)
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fc f884 	bl	80010bc <__aeabi_fcmpgt>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <TIM2_IRQHandler+0x5c2>
 8004fba:	4b76      	ldr	r3, [pc, #472]	; (8005194 <TIM2_IRQHandler+0x784>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4977      	ldr	r1, [pc, #476]	; (800519c <TIM2_IRQHandler+0x78c>)
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fc f87b 	bl	80010bc <__aeabi_fcmpgt>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <TIM2_IRQHandler+0x5c2>
	  {
		  flag_trip_undertemperature=OFF;
 8004fcc:	4b72      	ldr	r3, [pc, #456]	; (8005198 <TIM2_IRQHandler+0x788>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverDischarge
	   if(flag_trip_SOCOverDischarge==ON && Pack_SOC>20)
 8004fd2:	4b73      	ldr	r3, [pc, #460]	; (80051a0 <TIM2_IRQHandler+0x790>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d10b      	bne.n	8004ff2 <TIM2_IRQHandler+0x5e2>
 8004fda:	4b72      	ldr	r3, [pc, #456]	; (80051a4 <TIM2_IRQHandler+0x794>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	496f      	ldr	r1, [pc, #444]	; (800519c <TIM2_IRQHandler+0x78c>)
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fc f86b 	bl	80010bc <__aeabi_fcmpgt>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <TIM2_IRQHandler+0x5e2>
	   {
		  flag_trip_SOCOverDischarge=OFF;
 8004fec:	4b6c      	ldr	r3, [pc, #432]	; (80051a0 <TIM2_IRQHandler+0x790>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
	   }
	   // ---> Clearing OverCharge
	   if(flag_trip_SOCOverCharge==ON && Pack_SOC<70)
 8004ff2:	4b6d      	ldr	r3, [pc, #436]	; (80051a8 <TIM2_IRQHandler+0x798>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d10b      	bne.n	8005012 <TIM2_IRQHandler+0x602>
 8004ffa:	4b6a      	ldr	r3, [pc, #424]	; (80051a4 <TIM2_IRQHandler+0x794>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	496b      	ldr	r1, [pc, #428]	; (80051ac <TIM2_IRQHandler+0x79c>)
 8005000:	4618      	mov	r0, r3
 8005002:	f7fc f83d 	bl	8001080 <__aeabi_fcmplt>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <TIM2_IRQHandler+0x602>
	   {
		  flag_trip_SOCOverCharge=OFF;
 800500c:	4b66      	ldr	r3, [pc, #408]	; (80051a8 <TIM2_IRQHandler+0x798>)
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]
	   }
  }
	  i++;
 8005012:	4b67      	ldr	r3, [pc, #412]	; (80051b0 <TIM2_IRQHandler+0x7a0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3301      	adds	r3, #1
 8005018:	4a65      	ldr	r2, [pc, #404]	; (80051b0 <TIM2_IRQHandler+0x7a0>)
 800501a:	6013      	str	r3, [r2, #0]
	  i=i%maxdata;
 800501c:	4b64      	ldr	r3, [pc, #400]	; (80051b0 <TIM2_IRQHandler+0x7a0>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4b64      	ldr	r3, [pc, #400]	; (80051b4 <TIM2_IRQHandler+0x7a4>)
 8005022:	fb83 1302 	smull	r1, r3, r3, r2
 8005026:	1159      	asrs	r1, r3, #5
 8005028:	17d3      	asrs	r3, r2, #31
 800502a:	1acb      	subs	r3, r1, r3
 800502c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005030:	fb01 f303 	mul.w	r3, r1, r3
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	4a5e      	ldr	r2, [pc, #376]	; (80051b0 <TIM2_IRQHandler+0x7a0>)
 8005038:	6013      	str	r3, [r2, #0]

  //////////// Bagian Hitung SOC /////// SOC akan dihitung berdasarkan state baterai (Jika charge maupun discharge)
  if(BATT_State==STATE_CHARGE||BATT_State==STATE_DISCHARGE||BATT_State==STATE_FULL_CHARGE_DISCHARGE||BATT_State==STATE_STANDBY)
 800503a:	4b49      	ldr	r3, [pc, #292]	; (8005160 <TIM2_IRQHandler+0x750>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d00c      	beq.n	800505c <TIM2_IRQHandler+0x64c>
 8005042:	4b47      	ldr	r3, [pc, #284]	; (8005160 <TIM2_IRQHandler+0x750>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d008      	beq.n	800505c <TIM2_IRQHandler+0x64c>
 800504a:	4b45      	ldr	r3, [pc, #276]	; (8005160 <TIM2_IRQHandler+0x750>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b03      	cmp	r3, #3
 8005050:	d004      	beq.n	800505c <TIM2_IRQHandler+0x64c>
 8005052:	4b43      	ldr	r3, [pc, #268]	; (8005160 <TIM2_IRQHandler+0x750>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f040 80f0 	bne.w	800523c <TIM2_IRQHandler+0x82c>
  {
	  time_soc++;
 800505c:	4b56      	ldr	r3, [pc, #344]	; (80051b8 <TIM2_IRQHandler+0x7a8>)
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	3301      	adds	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	4b54      	ldr	r3, [pc, #336]	; (80051b8 <TIM2_IRQHandler+0x7a8>)
 8005066:	801a      	strh	r2, [r3, #0]
	  sum_current+=IBATT;
 8005068:	4b54      	ldr	r3, [pc, #336]	; (80051bc <TIM2_IRQHandler+0x7ac>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	4b54      	ldr	r3, [pc, #336]	; (80051c0 <TIM2_IRQHandler+0x7b0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4619      	mov	r1, r3
 8005072:	4610      	mov	r0, r2
 8005074:	f7fb fd5e 	bl	8000b34 <__addsf3>
 8005078:	4603      	mov	r3, r0
 800507a:	461a      	mov	r2, r3
 800507c:	4b4f      	ldr	r3, [pc, #316]	; (80051bc <TIM2_IRQHandler+0x7ac>)
 800507e:	601a      	str	r2, [r3, #0]
	  if(time_soc>999)
 8005080:	4b4d      	ldr	r3, [pc, #308]	; (80051b8 <TIM2_IRQHandler+0x7a8>)
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005088:	f0c0 80d8 	bcc.w	800523c <TIM2_IRQHandler+0x82c>
	  {
		  AH_Consumption = (-1*sum_current/1000*(1.0/3600.0))/Pack_Cap*100; //Konsumsi System 4e-5
 800508c:	4b4b      	ldr	r3, [pc, #300]	; (80051bc <TIM2_IRQHandler+0x7ac>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005094:	494b      	ldr	r1, [pc, #300]	; (80051c4 <TIM2_IRQHandler+0x7b4>)
 8005096:	4618      	mov	r0, r3
 8005098:	f7fb ff08 	bl	8000eac <__aeabi_fdiv>
 800509c:	4603      	mov	r3, r0
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fb f9c2 	bl	8000428 <__aeabi_f2d>
 80050a4:	a32c      	add	r3, pc, #176	; (adr r3, 8005158 <TIM2_IRQHandler+0x748>)
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f7fb fa15 	bl	80004d8 <__aeabi_dmul>
 80050ae:	4603      	mov	r3, r0
 80050b0:	460c      	mov	r4, r1
 80050b2:	4625      	mov	r5, r4
 80050b4:	461c      	mov	r4, r3
 80050b6:	4b44      	ldr	r3, [pc, #272]	; (80051c8 <TIM2_IRQHandler+0x7b8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fb f9b4 	bl	8000428 <__aeabi_f2d>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4620      	mov	r0, r4
 80050c6:	4629      	mov	r1, r5
 80050c8:	f7fb fb30 	bl	800072c <__aeabi_ddiv>
 80050cc:	4603      	mov	r3, r0
 80050ce:	460c      	mov	r4, r1
 80050d0:	4618      	mov	r0, r3
 80050d2:	4621      	mov	r1, r4
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	4b3c      	ldr	r3, [pc, #240]	; (80051cc <TIM2_IRQHandler+0x7bc>)
 80050da:	f7fb f9fd 	bl	80004d8 <__aeabi_dmul>
 80050de:	4603      	mov	r3, r0
 80050e0:	460c      	mov	r4, r1
 80050e2:	4618      	mov	r0, r3
 80050e4:	4621      	mov	r1, r4
 80050e6:	f7fb fccf 	bl	8000a88 <__aeabi_d2f>
 80050ea:	4602      	mov	r2, r0
 80050ec:	4b38      	ldr	r3, [pc, #224]	; (80051d0 <TIM2_IRQHandler+0x7c0>)
 80050ee:	601a      	str	r2, [r3, #0]
		  AH_Total = AH_Total + (sum_current/3600);
 80050f0:	4b32      	ldr	r3, [pc, #200]	; (80051bc <TIM2_IRQHandler+0x7ac>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4937      	ldr	r1, [pc, #220]	; (80051d4 <TIM2_IRQHandler+0x7c4>)
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fb fed8 	bl	8000eac <__aeabi_fdiv>
 80050fc:	4603      	mov	r3, r0
 80050fe:	461a      	mov	r2, r3
 8005100:	4b35      	ldr	r3, [pc, #212]	; (80051d8 <TIM2_IRQHandler+0x7c8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4619      	mov	r1, r3
 8005106:	4610      	mov	r0, r2
 8005108:	f7fb fd14 	bl	8000b34 <__addsf3>
 800510c:	4603      	mov	r3, r0
 800510e:	461a      	mov	r2, r3
 8005110:	4b31      	ldr	r3, [pc, #196]	; (80051d8 <TIM2_IRQHandler+0x7c8>)
 8005112:	601a      	str	r2, [r3, #0]
		  Pack_SOC=Pack_SOC+AH_Consumption;
 8005114:	4b23      	ldr	r3, [pc, #140]	; (80051a4 <TIM2_IRQHandler+0x794>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	4b2d      	ldr	r3, [pc, #180]	; (80051d0 <TIM2_IRQHandler+0x7c0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f7fb fd08 	bl	8000b34 <__addsf3>
 8005124:	4603      	mov	r3, r0
 8005126:	461a      	mov	r2, r3
 8005128:	4b1e      	ldr	r3, [pc, #120]	; (80051a4 <TIM2_IRQHandler+0x794>)
 800512a:	601a      	str	r2, [r3, #0]
		  time_soc=0;
 800512c:	4b22      	ldr	r3, [pc, #136]	; (80051b8 <TIM2_IRQHandler+0x7a8>)
 800512e:	2200      	movs	r2, #0
 8005130:	801a      	strh	r2, [r3, #0]
		  sum_current=0;
 8005132:	4b22      	ldr	r3, [pc, #136]	; (80051bc <TIM2_IRQHandler+0x7ac>)
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
		  cek_CC++;
 800513a:	4b28      	ldr	r3, [pc, #160]	; (80051dc <TIM2_IRQHandler+0x7cc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3301      	adds	r3, #1
 8005140:	4a26      	ldr	r2, [pc, #152]	; (80051dc <TIM2_IRQHandler+0x7cc>)
 8005142:	6013      	str	r3, [r2, #0]

		  grad=(100-0)/(batas_atas-batas_bawah);
 8005144:	4b26      	ldr	r3, [pc, #152]	; (80051e0 <TIM2_IRQHandler+0x7d0>)
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	4b26      	ldr	r3, [pc, #152]	; (80051e4 <TIM2_IRQHandler+0x7d4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4619      	mov	r1, r3
 800514e:	4610      	mov	r0, r2
 8005150:	f7fb fcee 	bl	8000b30 <__aeabi_fsub>
 8005154:	e048      	b.n	80051e8 <TIM2_IRQHandler+0x7d8>
 8005156:	bf00      	nop
 8005158:	789abcdf 	.word	0x789abcdf
 800515c:	3f323456 	.word	0x3f323456
 8005160:	200009b0 	.word	0x200009b0
 8005164:	20001104 	.word	0x20001104
 8005168:	20001094 	.word	0x20001094
 800516c:	42580000 	.word	0x42580000
 8005170:	200010b9 	.word	0x200010b9
 8005174:	200010c8 	.word	0x200010c8
 8005178:	200010a0 	.word	0x200010a0
 800517c:	20001090 	.word	0x20001090
 8005180:	200010c4 	.word	0x200010c4
 8005184:	42200000 	.word	0x42200000
 8005188:	20001500 	.word	0x20001500
 800518c:	42480000 	.word	0x42480000
 8005190:	20001098 	.word	0x20001098
 8005194:	200010f8 	.word	0x200010f8
 8005198:	200010b8 	.word	0x200010b8
 800519c:	41a00000 	.word	0x41a00000
 80051a0:	200010ec 	.word	0x200010ec
 80051a4:	20000be4 	.word	0x20000be4
 80051a8:	20000c89 	.word	0x20000c89
 80051ac:	428c0000 	.word	0x428c0000
 80051b0:	200010bc 	.word	0x200010bc
 80051b4:	10624dd3 	.word	0x10624dd3
 80051b8:	20001092 	.word	0x20001092
 80051bc:	20001504 	.word	0x20001504
 80051c0:	200010b0 	.word	0x200010b0
 80051c4:	447a0000 	.word	0x447a0000
 80051c8:	20000010 	.word	0x20000010
 80051cc:	40590000 	.word	0x40590000
 80051d0:	20001074 	.word	0x20001074
 80051d4:	45610000 	.word	0x45610000
 80051d8:	20000698 	.word	0x20000698
 80051dc:	2000069c 	.word	0x2000069c
 80051e0:	2000007c 	.word	0x2000007c
 80051e4:	20000080 	.word	0x20000080
 80051e8:	4603      	mov	r3, r0
 80051ea:	4619      	mov	r1, r3
 80051ec:	4814      	ldr	r0, [pc, #80]	; (8005240 <TIM2_IRQHandler+0x830>)
 80051ee:	f7fb fe5d 	bl	8000eac <__aeabi_fdiv>
 80051f2:	4603      	mov	r3, r0
 80051f4:	461a      	mov	r2, r3
 80051f6:	4b13      	ldr	r3, [pc, #76]	; (8005244 <TIM2_IRQHandler+0x834>)
 80051f8:	601a      	str	r2, [r3, #0]
		  constanta=grad*batas_bawah*(-1);
 80051fa:	4b12      	ldr	r3, [pc, #72]	; (8005244 <TIM2_IRQHandler+0x834>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4b12      	ldr	r3, [pc, #72]	; (8005248 <TIM2_IRQHandler+0x838>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f7fb fd9d 	bl	8000d44 <__aeabi_fmul>
 800520a:	4603      	mov	r3, r0
 800520c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005210:	4a0e      	ldr	r2, [pc, #56]	; (800524c <TIM2_IRQHandler+0x83c>)
 8005212:	6013      	str	r3, [r2, #0]
		  SOC_manipulasi=grad*Pack_SOC+constanta;
 8005214:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <TIM2_IRQHandler+0x834>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <TIM2_IRQHandler+0x840>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f7fb fd90 	bl	8000d44 <__aeabi_fmul>
 8005224:	4603      	mov	r3, r0
 8005226:	461a      	mov	r2, r3
 8005228:	4b08      	ldr	r3, [pc, #32]	; (800524c <TIM2_IRQHandler+0x83c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4619      	mov	r1, r3
 800522e:	4610      	mov	r0, r2
 8005230:	f7fb fc80 	bl	8000b34 <__addsf3>
 8005234:	4603      	mov	r3, r0
 8005236:	461a      	mov	r2, r3
 8005238:	4b06      	ldr	r3, [pc, #24]	; (8005254 <TIM2_IRQHandler+0x844>)
 800523a:	601a      	str	r2, [r3, #0]
	  }
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 800523c:	bf00      	nop
 800523e:	bdb0      	pop	{r4, r5, r7, pc}
 8005240:	42c80000 	.word	0x42c80000
 8005244:	200010d0 	.word	0x200010d0
 8005248:	20000080 	.word	0x20000080
 800524c:	2000109c 	.word	0x2000109c
 8005250:	20000be4 	.word	0x20000be4
 8005254:	20000bb4 	.word	0x20000bb4

08005258 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800525c:	4805      	ldr	r0, [pc, #20]	; (8005274 <TIM3_IRQHandler+0x1c>)
 800525e:	f005 fd60 	bl	800ad22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(flag_start_shutdown==1)
 8005262:	4b05      	ldr	r3, [pc, #20]	; (8005278 <TIM3_IRQHandler+0x20>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <TIM3_IRQHandler+0x16>
  {
	  BMS_CAN_Tx();
 800526a:	f7fc fa4f 	bl	800170c <BMS_CAN_Tx>
  }
//  BMS_CAN_Rx();
  /* USER CODE END TIM3_IRQn 1 */
}
 800526e:	bf00      	nop
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20001508 	.word	0x20001508
 8005278:	20000994 	.word	0x20000994
 800527c:	00000000 	.word	0x00000000

08005280 <Batt_Protection_when_discharge>:

/* USER CODE BEGIN 1 */
void Batt_Protection_when_discharge(void)
{
 8005280:	b5b0      	push	{r4, r5, r7, lr}
 8005282:	af00      	add	r7, sp, #0
	///////////////////// Short Circuit //////////////////////////////////////
			  	  if(IBATT>(VBATT/0.9))
 8005284:	4b82      	ldr	r3, [pc, #520]	; (8005490 <Batt_Protection_when_discharge+0x210>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f7fb f8cd 	bl	8000428 <__aeabi_f2d>
 800528e:	4604      	mov	r4, r0
 8005290:	460d      	mov	r5, r1
 8005292:	4b80      	ldr	r3, [pc, #512]	; (8005494 <Batt_Protection_when_discharge+0x214>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f7fb f8c6 	bl	8000428 <__aeabi_f2d>
 800529c:	a378      	add	r3, pc, #480	; (adr r3, 8005480 <Batt_Protection_when_discharge+0x200>)
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f7fb fa43 	bl	800072c <__aeabi_ddiv>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4620      	mov	r0, r4
 80052ac:	4629      	mov	r1, r5
 80052ae:	f7fb fba3 	bl	80009f8 <__aeabi_dcmpgt>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d016      	beq.n	80052e6 <Batt_Protection_when_discharge+0x66>
	 		  	  {
			  		  Isc=IBATT;
 80052b8:	4b75      	ldr	r3, [pc, #468]	; (8005490 <Batt_Protection_when_discharge+0x210>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a76      	ldr	r2, [pc, #472]	; (8005498 <Batt_Protection_when_discharge+0x218>)
 80052be:	6013      	str	r3, [r2, #0]
			  		  Vsc=VBATT;
 80052c0:	4b74      	ldr	r3, [pc, #464]	; (8005494 <Batt_Protection_when_discharge+0x214>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a75      	ldr	r2, [pc, #468]	; (800549c <Batt_Protection_when_discharge+0x21c>)
 80052c6:	6013      	str	r3, [r2, #0]
	 		  		  fault_code=12;
 80052c8:	4b75      	ldr	r3, [pc, #468]	; (80054a0 <Batt_Protection_when_discharge+0x220>)
 80052ca:	220c      	movs	r2, #12
 80052cc:	701a      	strb	r2, [r3, #0]
	 		  		  Batt_Open_Mode();
 80052ce:	f7fc f871 	bl	80013b4 <Batt_Open_Mode>
	 		  		  flag_trip_shortcircuit=ON;
 80052d2:	4b74      	ldr	r3, [pc, #464]	; (80054a4 <Batt_Protection_when_discharge+0x224>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]
	 		  		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80052d8:	2200      	movs	r2, #0
 80052da:	2104      	movs	r1, #4
 80052dc:	4872      	ldr	r0, [pc, #456]	; (80054a8 <Batt_Protection_when_discharge+0x228>)
 80052de:	f004 f9e2 	bl	80096a6 <HAL_GPIO_WritePin>
			  		  T_trip_cycle=T_trip_cycle-0.001;
			  		  T_I_Over_trip_cycle-=0.001;
			  		  if(T_trip_cycle<0) T_trip_cycle=0;
			  		if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
			  	  }
}
 80052e2:	f000 bddd 	b.w	8005ea0 <Batt_Protection_when_discharge+0xc20>
			  	  else if(VBATT<V_Under_Set && flag_trip_undervoltage==OFF )   //Indikasi terjadi Undervoltage
 80052e6:	4b6b      	ldr	r3, [pc, #428]	; (8005494 <Batt_Protection_when_discharge+0x214>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b70      	ldr	r3, [pc, #448]	; (80054ac <Batt_Protection_when_discharge+0x22c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4619      	mov	r1, r3
 80052f0:	4610      	mov	r0, r2
 80052f2:	f7fb fec5 	bl	8001080 <__aeabi_fcmplt>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80eb 	beq.w	80054d4 <Batt_Protection_when_discharge+0x254>
 80052fe:	4b6c      	ldr	r3, [pc, #432]	; (80054b0 <Batt_Protection_when_discharge+0x230>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	f040 80e6 	bne.w	80054d4 <Batt_Protection_when_discharge+0x254>
			  		fault_code=1;
 8005308:	4b65      	ldr	r3, [pc, #404]	; (80054a0 <Batt_Protection_when_discharge+0x220>)
 800530a:	2201      	movs	r2, #1
 800530c:	701a      	strb	r2, [r3, #0]
			  		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 800530e:	4b69      	ldr	r3, [pc, #420]	; (80054b4 <Batt_Protection_when_discharge+0x234>)
 8005310:	681c      	ldr	r4, [r3, #0]
 8005312:	4b60      	ldr	r3, [pc, #384]	; (8005494 <Batt_Protection_when_discharge+0x214>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b65      	ldr	r3, [pc, #404]	; (80054ac <Batt_Protection_when_discharge+0x22c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4619      	mov	r1, r3
 800531c:	4610      	mov	r0, r2
 800531e:	f7fb fdc5 	bl	8000eac <__aeabi_fdiv>
 8005322:	4603      	mov	r3, r0
 8005324:	4619      	mov	r1, r3
 8005326:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800532a:	f7fb fc01 	bl	8000b30 <__aeabi_fsub>
 800532e:	4603      	mov	r3, r0
 8005330:	4619      	mov	r1, r3
 8005332:	4620      	mov	r0, r4
 8005334:	f7fb fdba 	bl	8000eac <__aeabi_fdiv>
 8005338:	4603      	mov	r3, r0
 800533a:	461a      	mov	r2, r3
 800533c:	4b5e      	ldr	r3, [pc, #376]	; (80054b8 <Batt_Protection_when_discharge+0x238>)
 800533e:	601a      	str	r2, [r3, #0]
			  		T_trip_cycle+=0.001;
 8005340:	4b5e      	ldr	r3, [pc, #376]	; (80054bc <Batt_Protection_when_discharge+0x23c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f7fb f86f 	bl	8000428 <__aeabi_f2d>
 800534a:	a34f      	add	r3, pc, #316	; (adr r3, 8005488 <Batt_Protection_when_discharge+0x208>)
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f7fa ff0c 	bl	800016c <__adddf3>
 8005354:	4603      	mov	r3, r0
 8005356:	460c      	mov	r4, r1
 8005358:	4618      	mov	r0, r3
 800535a:	4621      	mov	r1, r4
 800535c:	f7fb fb94 	bl	8000a88 <__aeabi_d2f>
 8005360:	4602      	mov	r2, r0
 8005362:	4b56      	ldr	r3, [pc, #344]	; (80054bc <Batt_Protection_when_discharge+0x23c>)
 8005364:	601a      	str	r2, [r3, #0]
			  		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF)
 8005366:	4b55      	ldr	r3, [pc, #340]	; (80054bc <Batt_Protection_when_discharge+0x23c>)
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4b53      	ldr	r3, [pc, #332]	; (80054b8 <Batt_Protection_when_discharge+0x238>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4619      	mov	r1, r3
 8005370:	4610      	mov	r0, r2
 8005372:	f7fb fea3 	bl	80010bc <__aeabi_fcmpgt>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d011      	beq.n	80053a0 <Batt_Protection_when_discharge+0x120>
 800537c:	4b4c      	ldr	r3, [pc, #304]	; (80054b0 <Batt_Protection_when_discharge+0x230>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10d      	bne.n	80053a0 <Batt_Protection_when_discharge+0x120>
			  			Batt_Open_Mode();
 8005384:	f7fc f816 	bl	80013b4 <Batt_Open_Mode>
			  			T_trip_cycle=T_Under_trip;
 8005388:	4b4b      	ldr	r3, [pc, #300]	; (80054b8 <Batt_Protection_when_discharge+0x238>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a4b      	ldr	r2, [pc, #300]	; (80054bc <Batt_Protection_when_discharge+0x23c>)
 800538e:	6013      	str	r3, [r2, #0]
			  			flag_trip_undervoltage=ON;
 8005390:	4b47      	ldr	r3, [pc, #284]	; (80054b0 <Batt_Protection_when_discharge+0x230>)
 8005392:	2201      	movs	r2, #1
 8005394:	701a      	strb	r2, [r3, #0]
			  			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005396:	2200      	movs	r2, #0
 8005398:	2104      	movs	r1, #4
 800539a:	4843      	ldr	r0, [pc, #268]	; (80054a8 <Batt_Protection_when_discharge+0x228>)
 800539c:	f004 f983 	bl	80096a6 <HAL_GPIO_WritePin>
			  		if(flag_trip_undervoltage==OFF)
 80053a0:	4b43      	ldr	r3, [pc, #268]	; (80054b0 <Batt_Protection_when_discharge+0x230>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f040 8578 	bne.w	8005e9a <Batt_Protection_when_discharge+0xc1a>
			  			if(T_Under_trip-T_trip_cycle>15)
 80053aa:	4b43      	ldr	r3, [pc, #268]	; (80054b8 <Batt_Protection_when_discharge+0x238>)
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4b43      	ldr	r3, [pc, #268]	; (80054bc <Batt_Protection_when_discharge+0x23c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4619      	mov	r1, r3
 80053b4:	4610      	mov	r0, r2
 80053b6:	f7fb fbbb 	bl	8000b30 <__aeabi_fsub>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4940      	ldr	r1, [pc, #256]	; (80054c0 <Batt_Protection_when_discharge+0x240>)
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fb fe7c 	bl	80010bc <__aeabi_fcmpgt>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d018      	beq.n	80053fc <Batt_Protection_when_discharge+0x17c>
			  				if((test_tim2%1000)==0)
 80053ca:	4b3e      	ldr	r3, [pc, #248]	; (80054c4 <Batt_Protection_when_discharge+0x244>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4b3e      	ldr	r3, [pc, #248]	; (80054c8 <Batt_Protection_when_discharge+0x248>)
 80053d0:	fb83 1302 	smull	r1, r3, r3, r2
 80053d4:	1199      	asrs	r1, r3, #6
 80053d6:	17d3      	asrs	r3, r2, #31
 80053d8:	1acb      	subs	r3, r1, r3
 80053da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80053de:	fb01 f303 	mul.w	r3, r1, r3
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f040 8558 	bne.w	8005e9a <Batt_Protection_when_discharge+0xc1a>
			  					BUZZ_Toggle;
 80053ea:	2104      	movs	r1, #4
 80053ec:	482e      	ldr	r0, [pc, #184]	; (80054a8 <Batt_Protection_when_discharge+0x228>)
 80053ee:	f004 f972 	bl	80096d6 <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 80053f2:	4b34      	ldr	r3, [pc, #208]	; (80054c4 <Batt_Protection_when_discharge+0x244>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_undervoltage==OFF)
 80053f8:	f000 bd4f 	b.w	8005e9a <Batt_Protection_when_discharge+0xc1a>
			  			else if(T_Under_trip-T_trip_cycle>10)
 80053fc:	4b2e      	ldr	r3, [pc, #184]	; (80054b8 <Batt_Protection_when_discharge+0x238>)
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	4b2e      	ldr	r3, [pc, #184]	; (80054bc <Batt_Protection_when_discharge+0x23c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4619      	mov	r1, r3
 8005406:	4610      	mov	r0, r2
 8005408:	f7fb fb92 	bl	8000b30 <__aeabi_fsub>
 800540c:	4603      	mov	r3, r0
 800540e:	492f      	ldr	r1, [pc, #188]	; (80054cc <Batt_Protection_when_discharge+0x24c>)
 8005410:	4618      	mov	r0, r3
 8005412:	f7fb fe53 	bl	80010bc <__aeabi_fcmpgt>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d017      	beq.n	800544c <Batt_Protection_when_discharge+0x1cc>
			  				if((test_tim2%100)==0)
 800541c:	4b29      	ldr	r3, [pc, #164]	; (80054c4 <Batt_Protection_when_discharge+0x244>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	4b2b      	ldr	r3, [pc, #172]	; (80054d0 <Batt_Protection_when_discharge+0x250>)
 8005422:	fb83 1302 	smull	r1, r3, r3, r2
 8005426:	1159      	asrs	r1, r3, #5
 8005428:	17d3      	asrs	r3, r2, #31
 800542a:	1acb      	subs	r3, r1, r3
 800542c:	2164      	movs	r1, #100	; 0x64
 800542e:	fb01 f303 	mul.w	r3, r1, r3
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	f040 8530 	bne.w	8005e9a <Batt_Protection_when_discharge+0xc1a>
			  					BUZZ_Toggle;
 800543a:	2104      	movs	r1, #4
 800543c:	481a      	ldr	r0, [pc, #104]	; (80054a8 <Batt_Protection_when_discharge+0x228>)
 800543e:	f004 f94a 	bl	80096d6 <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 8005442:	4b20      	ldr	r3, [pc, #128]	; (80054c4 <Batt_Protection_when_discharge+0x244>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_undervoltage==OFF)
 8005448:	f000 bd27 	b.w	8005e9a <Batt_Protection_when_discharge+0xc1a>
			  			else if(T_Under_trip-T_trip_cycle>1)
 800544c:	4b1a      	ldr	r3, [pc, #104]	; (80054b8 <Batt_Protection_when_discharge+0x238>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4b1a      	ldr	r3, [pc, #104]	; (80054bc <Batt_Protection_when_discharge+0x23c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f7fb fb6a 	bl	8000b30 <__aeabi_fsub>
 800545c:	4603      	mov	r3, r0
 800545e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005462:	4618      	mov	r0, r3
 8005464:	f7fb fe2a 	bl	80010bc <__aeabi_fcmpgt>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <Batt_Protection_when_discharge+0x1f2>
			  		if(flag_trip_undervoltage==OFF)
 800546e:	f000 bd14 	b.w	8005e9a <Batt_Protection_when_discharge+0xc1a>
			  				HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 8005472:	2201      	movs	r2, #1
 8005474:	2104      	movs	r1, #4
 8005476:	480c      	ldr	r0, [pc, #48]	; (80054a8 <Batt_Protection_when_discharge+0x228>)
 8005478:	f004 f915 	bl	80096a6 <HAL_GPIO_WritePin>
			  		if(flag_trip_undervoltage==OFF)
 800547c:	f000 bd0d 	b.w	8005e9a <Batt_Protection_when_discharge+0xc1a>
 8005480:	cccccccd 	.word	0xcccccccd
 8005484:	3feccccc 	.word	0x3feccccc
 8005488:	d2f1a9fc 	.word	0xd2f1a9fc
 800548c:	3f50624d 	.word	0x3f50624d
 8005490:	200010b0 	.word	0x200010b0
 8005494:	20001094 	.word	0x20001094
 8005498:	200010a4 	.word	0x200010a4
 800549c:	200010d4 	.word	0x200010d4
 80054a0:	200010c0 	.word	0x200010c0
 80054a4:	20000c8a 	.word	0x20000c8a
 80054a8:	40011000 	.word	0x40011000
 80054ac:	20000070 	.word	0x20000070
 80054b0:	200010b9 	.word	0x200010b9
 80054b4:	20000050 	.word	0x20000050
 80054b8:	20001080 	.word	0x20001080
 80054bc:	200010cc 	.word	0x200010cc
 80054c0:	41700000 	.word	0x41700000
 80054c4:	20000bdc 	.word	0x20000bdc
 80054c8:	10624dd3 	.word	0x10624dd3
 80054cc:	41200000 	.word	0x41200000
 80054d0:	51eb851f 	.word	0x51eb851f
			  	  else if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF)   //Indikasi terjadi Over Current
 80054d4:	4ba8      	ldr	r3, [pc, #672]	; (8005778 <Batt_Protection_when_discharge+0x4f8>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4ba8      	ldr	r3, [pc, #672]	; (800577c <Batt_Protection_when_discharge+0x4fc>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f7fb fb26 	bl	8000b30 <__aeabi_fsub>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f04f 0100 	mov.w	r1, #0
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fb fde6 	bl	80010bc <__aeabi_fcmpgt>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80c1 	beq.w	800567a <Batt_Protection_when_discharge+0x3fa>
 80054f8:	4ba1      	ldr	r3, [pc, #644]	; (8005780 <Batt_Protection_when_discharge+0x500>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f040 80bc 	bne.w	800567a <Batt_Protection_when_discharge+0x3fa>
			  		fault_code=2;
 8005502:	4ba0      	ldr	r3, [pc, #640]	; (8005784 <Batt_Protection_when_discharge+0x504>)
 8005504:	2202      	movs	r2, #2
 8005506:	701a      	strb	r2, [r3, #0]
			  		T_I_Over_trip=TMS_I_Over/((IBATT/I_Over_Set)-1);
 8005508:	4b9f      	ldr	r3, [pc, #636]	; (8005788 <Batt_Protection_when_discharge+0x508>)
 800550a:	681c      	ldr	r4, [r3, #0]
 800550c:	4b9a      	ldr	r3, [pc, #616]	; (8005778 <Batt_Protection_when_discharge+0x4f8>)
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	4b9a      	ldr	r3, [pc, #616]	; (800577c <Batt_Protection_when_discharge+0x4fc>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4619      	mov	r1, r3
 8005516:	4610      	mov	r0, r2
 8005518:	f7fb fcc8 	bl	8000eac <__aeabi_fdiv>
 800551c:	4603      	mov	r3, r0
 800551e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005522:	4618      	mov	r0, r3
 8005524:	f7fb fb04 	bl	8000b30 <__aeabi_fsub>
 8005528:	4603      	mov	r3, r0
 800552a:	4619      	mov	r1, r3
 800552c:	4620      	mov	r0, r4
 800552e:	f7fb fcbd 	bl	8000eac <__aeabi_fdiv>
 8005532:	4603      	mov	r3, r0
 8005534:	461a      	mov	r2, r3
 8005536:	4b95      	ldr	r3, [pc, #596]	; (800578c <Batt_Protection_when_discharge+0x50c>)
 8005538:	601a      	str	r2, [r3, #0]
			  		T_I_Over_trip_cycle+=0.001;
 800553a:	4b95      	ldr	r3, [pc, #596]	; (8005790 <Batt_Protection_when_discharge+0x510>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7fa ff72 	bl	8000428 <__aeabi_f2d>
 8005544:	a38a      	add	r3, pc, #552	; (adr r3, 8005770 <Batt_Protection_when_discharge+0x4f0>)
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	f7fa fe0f 	bl	800016c <__adddf3>
 800554e:	4603      	mov	r3, r0
 8005550:	460c      	mov	r4, r1
 8005552:	4618      	mov	r0, r3
 8005554:	4621      	mov	r1, r4
 8005556:	f7fb fa97 	bl	8000a88 <__aeabi_d2f>
 800555a:	4602      	mov	r2, r0
 800555c:	4b8c      	ldr	r3, [pc, #560]	; (8005790 <Batt_Protection_when_discharge+0x510>)
 800555e:	601a      	str	r2, [r3, #0]
			  		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF)
 8005560:	4b8b      	ldr	r3, [pc, #556]	; (8005790 <Batt_Protection_when_discharge+0x510>)
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	4b89      	ldr	r3, [pc, #548]	; (800578c <Batt_Protection_when_discharge+0x50c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	f7fb fda6 	bl	80010bc <__aeabi_fcmpgt>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d011      	beq.n	800559a <Batt_Protection_when_discharge+0x31a>
 8005576:	4b82      	ldr	r3, [pc, #520]	; (8005780 <Batt_Protection_when_discharge+0x500>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10d      	bne.n	800559a <Batt_Protection_when_discharge+0x31a>
			  			Batt_Open_Mode();
 800557e:	f7fb ff19 	bl	80013b4 <Batt_Open_Mode>
			  			T_I_Over_trip_cycle=T_I_Over_trip;
 8005582:	4b82      	ldr	r3, [pc, #520]	; (800578c <Batt_Protection_when_discharge+0x50c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a82      	ldr	r2, [pc, #520]	; (8005790 <Batt_Protection_when_discharge+0x510>)
 8005588:	6013      	str	r3, [r2, #0]
			  			flag_trip_overcurrentdischarge=ON;
 800558a:	4b7d      	ldr	r3, [pc, #500]	; (8005780 <Batt_Protection_when_discharge+0x500>)
 800558c:	2201      	movs	r2, #1
 800558e:	701a      	strb	r2, [r3, #0]
			  			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005590:	2200      	movs	r2, #0
 8005592:	2104      	movs	r1, #4
 8005594:	487f      	ldr	r0, [pc, #508]	; (8005794 <Batt_Protection_when_discharge+0x514>)
 8005596:	f004 f886 	bl	80096a6 <HAL_GPIO_WritePin>
			  		if(flag_trip_overcurrentdischarge==OFF)
 800559a:	4b79      	ldr	r3, [pc, #484]	; (8005780 <Batt_Protection_when_discharge+0x500>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f040 847d 	bne.w	8005e9e <Batt_Protection_when_discharge+0xc1e>
		  				if(T_I_Over_trip-T_I_Over_trip_cycle>15)
 80055a4:	4b79      	ldr	r3, [pc, #484]	; (800578c <Batt_Protection_when_discharge+0x50c>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	4b79      	ldr	r3, [pc, #484]	; (8005790 <Batt_Protection_when_discharge+0x510>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4619      	mov	r1, r3
 80055ae:	4610      	mov	r0, r2
 80055b0:	f7fb fabe 	bl	8000b30 <__aeabi_fsub>
 80055b4:	4603      	mov	r3, r0
 80055b6:	4978      	ldr	r1, [pc, #480]	; (8005798 <Batt_Protection_when_discharge+0x518>)
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fb fd7f 	bl	80010bc <__aeabi_fcmpgt>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d018      	beq.n	80055f6 <Batt_Protection_when_discharge+0x376>
		  					if((test_tim2%1000)==0)
 80055c4:	4b75      	ldr	r3, [pc, #468]	; (800579c <Batt_Protection_when_discharge+0x51c>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	4b75      	ldr	r3, [pc, #468]	; (80057a0 <Batt_Protection_when_discharge+0x520>)
 80055ca:	fb83 1302 	smull	r1, r3, r3, r2
 80055ce:	1199      	asrs	r1, r3, #6
 80055d0:	17d3      	asrs	r3, r2, #31
 80055d2:	1acb      	subs	r3, r1, r3
 80055d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80055d8:	fb01 f303 	mul.w	r3, r1, r3
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f040 845d 	bne.w	8005e9e <Batt_Protection_when_discharge+0xc1e>
			  					BUZZ_Toggle;
 80055e4:	2104      	movs	r1, #4
 80055e6:	486b      	ldr	r0, [pc, #428]	; (8005794 <Batt_Protection_when_discharge+0x514>)
 80055e8:	f004 f875 	bl	80096d6 <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 80055ec:	4b6b      	ldr	r3, [pc, #428]	; (800579c <Batt_Protection_when_discharge+0x51c>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_overcurrentdischarge==OFF)
 80055f2:	f000 bc54 	b.w	8005e9e <Batt_Protection_when_discharge+0xc1e>
			  			else if(T_I_Over_trip-T_I_Over_trip_cycle>10)
 80055f6:	4b65      	ldr	r3, [pc, #404]	; (800578c <Batt_Protection_when_discharge+0x50c>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b65      	ldr	r3, [pc, #404]	; (8005790 <Batt_Protection_when_discharge+0x510>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4619      	mov	r1, r3
 8005600:	4610      	mov	r0, r2
 8005602:	f7fb fa95 	bl	8000b30 <__aeabi_fsub>
 8005606:	4603      	mov	r3, r0
 8005608:	4966      	ldr	r1, [pc, #408]	; (80057a4 <Batt_Protection_when_discharge+0x524>)
 800560a:	4618      	mov	r0, r3
 800560c:	f7fb fd56 	bl	80010bc <__aeabi_fcmpgt>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d017      	beq.n	8005646 <Batt_Protection_when_discharge+0x3c6>
			  				if((test_tim2%100)==0)
 8005616:	4b61      	ldr	r3, [pc, #388]	; (800579c <Batt_Protection_when_discharge+0x51c>)
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4b63      	ldr	r3, [pc, #396]	; (80057a8 <Batt_Protection_when_discharge+0x528>)
 800561c:	fb83 1302 	smull	r1, r3, r3, r2
 8005620:	1159      	asrs	r1, r3, #5
 8005622:	17d3      	asrs	r3, r2, #31
 8005624:	1acb      	subs	r3, r1, r3
 8005626:	2164      	movs	r1, #100	; 0x64
 8005628:	fb01 f303 	mul.w	r3, r1, r3
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	f040 8435 	bne.w	8005e9e <Batt_Protection_when_discharge+0xc1e>
			  					BUZZ_Toggle;
 8005634:	2104      	movs	r1, #4
 8005636:	4857      	ldr	r0, [pc, #348]	; (8005794 <Batt_Protection_when_discharge+0x514>)
 8005638:	f004 f84d 	bl	80096d6 <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 800563c:	4b57      	ldr	r3, [pc, #348]	; (800579c <Batt_Protection_when_discharge+0x51c>)
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_overcurrentdischarge==OFF)
 8005642:	f000 bc2c 	b.w	8005e9e <Batt_Protection_when_discharge+0xc1e>
			  			else if(T_I_Over_trip-T_I_Over_trip_cycle>1)
 8005646:	4b51      	ldr	r3, [pc, #324]	; (800578c <Batt_Protection_when_discharge+0x50c>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4b51      	ldr	r3, [pc, #324]	; (8005790 <Batt_Protection_when_discharge+0x510>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4619      	mov	r1, r3
 8005650:	4610      	mov	r0, r2
 8005652:	f7fb fa6d 	bl	8000b30 <__aeabi_fsub>
 8005656:	4603      	mov	r3, r0
 8005658:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800565c:	4618      	mov	r0, r3
 800565e:	f7fb fd2d 	bl	80010bc <__aeabi_fcmpgt>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <Batt_Protection_when_discharge+0x3ec>
			  		if(flag_trip_overcurrentdischarge==OFF)
 8005668:	f000 bc19 	b.w	8005e9e <Batt_Protection_when_discharge+0xc1e>
			  				HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 800566c:	2201      	movs	r2, #1
 800566e:	2104      	movs	r1, #4
 8005670:	4848      	ldr	r0, [pc, #288]	; (8005794 <Batt_Protection_when_discharge+0x514>)
 8005672:	f004 f818 	bl	80096a6 <HAL_GPIO_WritePin>
			  		if(flag_trip_overcurrentdischarge==OFF)
 8005676:	f000 bc12 	b.w	8005e9e <Batt_Protection_when_discharge+0xc1e>
			  	  else if(((50-Suhu_T1<10)||(85-Suhu_T2<10)||(50-Suhu_T3<10)||(85-Suhu_T4<10)) && flag_trip_overtemperature==OFF)
 800567a:	4b4c      	ldr	r3, [pc, #304]	; (80057ac <Batt_Protection_when_discharge+0x52c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4619      	mov	r1, r3
 8005680:	484b      	ldr	r0, [pc, #300]	; (80057b0 <Batt_Protection_when_discharge+0x530>)
 8005682:	f7fb fa55 	bl	8000b30 <__aeabi_fsub>
 8005686:	4603      	mov	r3, r0
 8005688:	4946      	ldr	r1, [pc, #280]	; (80057a4 <Batt_Protection_when_discharge+0x524>)
 800568a:	4618      	mov	r0, r3
 800568c:	f7fb fcf8 	bl	8001080 <__aeabi_fcmplt>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d12a      	bne.n	80056ec <Batt_Protection_when_discharge+0x46c>
 8005696:	4b47      	ldr	r3, [pc, #284]	; (80057b4 <Batt_Protection_when_discharge+0x534>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4619      	mov	r1, r3
 800569c:	4846      	ldr	r0, [pc, #280]	; (80057b8 <Batt_Protection_when_discharge+0x538>)
 800569e:	f7fb fa47 	bl	8000b30 <__aeabi_fsub>
 80056a2:	4603      	mov	r3, r0
 80056a4:	493f      	ldr	r1, [pc, #252]	; (80057a4 <Batt_Protection_when_discharge+0x524>)
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fb fcea 	bl	8001080 <__aeabi_fcmplt>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d11c      	bne.n	80056ec <Batt_Protection_when_discharge+0x46c>
 80056b2:	4b42      	ldr	r3, [pc, #264]	; (80057bc <Batt_Protection_when_discharge+0x53c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4619      	mov	r1, r3
 80056b8:	483d      	ldr	r0, [pc, #244]	; (80057b0 <Batt_Protection_when_discharge+0x530>)
 80056ba:	f7fb fa39 	bl	8000b30 <__aeabi_fsub>
 80056be:	4603      	mov	r3, r0
 80056c0:	4938      	ldr	r1, [pc, #224]	; (80057a4 <Batt_Protection_when_discharge+0x524>)
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fb fcdc 	bl	8001080 <__aeabi_fcmplt>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10e      	bne.n	80056ec <Batt_Protection_when_discharge+0x46c>
 80056ce:	4b3c      	ldr	r3, [pc, #240]	; (80057c0 <Batt_Protection_when_discharge+0x540>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4619      	mov	r1, r3
 80056d4:	4838      	ldr	r0, [pc, #224]	; (80057b8 <Batt_Protection_when_discharge+0x538>)
 80056d6:	f7fb fa2b 	bl	8000b30 <__aeabi_fsub>
 80056da:	4603      	mov	r3, r0
 80056dc:	4931      	ldr	r1, [pc, #196]	; (80057a4 <Batt_Protection_when_discharge+0x524>)
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fb fcce 	bl	8001080 <__aeabi_fcmplt>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 8111 	beq.w	800590e <Batt_Protection_when_discharge+0x68e>
 80056ec:	4b35      	ldr	r3, [pc, #212]	; (80057c4 <Batt_Protection_when_discharge+0x544>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f040 810c 	bne.w	800590e <Batt_Protection_when_discharge+0x68e>
			  		  fault_code=3;
 80056f6:	4b23      	ldr	r3, [pc, #140]	; (8005784 <Batt_Protection_when_discharge+0x504>)
 80056f8:	2203      	movs	r2, #3
 80056fa:	701a      	strb	r2, [r3, #0]
			  		  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 80056fc:	4b32      	ldr	r3, [pc, #200]	; (80057c8 <Batt_Protection_when_discharge+0x548>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4928      	ldr	r1, [pc, #160]	; (80057a4 <Batt_Protection_when_discharge+0x524>)
 8005702:	4618      	mov	r0, r3
 8005704:	f7fb fa14 	bl	8000b30 <__aeabi_fsub>
 8005708:	4603      	mov	r3, r0
 800570a:	461a      	mov	r2, r3
 800570c:	4b27      	ldr	r3, [pc, #156]	; (80057ac <Batt_Protection_when_discharge+0x52c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4619      	mov	r1, r3
 8005712:	4610      	mov	r0, r2
 8005714:	f7fb fcb4 	bl	8001080 <__aeabi_fcmplt>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d058      	beq.n	80057d0 <Batt_Protection_when_discharge+0x550>
 800571e:	4b2a      	ldr	r3, [pc, #168]	; (80057c8 <Batt_Protection_when_discharge+0x548>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	492a      	ldr	r1, [pc, #168]	; (80057cc <Batt_Protection_when_discharge+0x54c>)
 8005724:	4618      	mov	r0, r3
 8005726:	f7fb fa03 	bl	8000b30 <__aeabi_fsub>
 800572a:	4603      	mov	r3, r0
 800572c:	461a      	mov	r2, r3
 800572e:	4b1f      	ldr	r3, [pc, #124]	; (80057ac <Batt_Protection_when_discharge+0x52c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f7fb fcb7 	bl	80010a8 <__aeabi_fcmpge>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d047      	beq.n	80057d0 <Batt_Protection_when_discharge+0x550>
			  			  if((test_tim2%1000)==0)
 8005740:	4b16      	ldr	r3, [pc, #88]	; (800579c <Batt_Protection_when_discharge+0x51c>)
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	4b16      	ldr	r3, [pc, #88]	; (80057a0 <Batt_Protection_when_discharge+0x520>)
 8005746:	fb83 1302 	smull	r1, r3, r3, r2
 800574a:	1199      	asrs	r1, r3, #6
 800574c:	17d3      	asrs	r3, r2, #31
 800574e:	1acb      	subs	r3, r1, r3
 8005750:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	f040 80d6 	bne.w	800590c <Batt_Protection_when_discharge+0x68c>
			  				  BUZZ_Toggle;
 8005760:	2104      	movs	r1, #4
 8005762:	480c      	ldr	r0, [pc, #48]	; (8005794 <Batt_Protection_when_discharge+0x514>)
 8005764:	f003 ffb7 	bl	80096d6 <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005768:	4b0c      	ldr	r3, [pc, #48]	; (800579c <Batt_Protection_when_discharge+0x51c>)
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%1000)==0)
 800576e:	e0cd      	b.n	800590c <Batt_Protection_when_discharge+0x68c>
 8005770:	d2f1a9fc 	.word	0xd2f1a9fc
 8005774:	3f50624d 	.word	0x3f50624d
 8005778:	200010b0 	.word	0x200010b0
 800577c:	20000058 	.word	0x20000058
 8005780:	200010c8 	.word	0x200010c8
 8005784:	200010c0 	.word	0x200010c0
 8005788:	20000054 	.word	0x20000054
 800578c:	2000107c 	.word	0x2000107c
 8005790:	200010fc 	.word	0x200010fc
 8005794:	40011000 	.word	0x40011000
 8005798:	41700000 	.word	0x41700000
 800579c:	20000bdc 	.word	0x20000bdc
 80057a0:	10624dd3 	.word	0x10624dd3
 80057a4:	41200000 	.word	0x41200000
 80057a8:	51eb851f 	.word	0x51eb851f
 80057ac:	200010c4 	.word	0x200010c4
 80057b0:	42480000 	.word	0x42480000
 80057b4:	20001500 	.word	0x20001500
 80057b8:	42aa0000 	.word	0x42aa0000
 80057bc:	20001098 	.word	0x20001098
 80057c0:	200010f8 	.word	0x200010f8
 80057c4:	20001090 	.word	0x20001090
 80057c8:	20000060 	.word	0x20000060
 80057cc:	40a00000 	.word	0x40a00000
			  		  else if(Suhu_T1>Temp_Over_Set-5 && Suhu_T1<=Temp_Over_Set-2)
 80057d0:	4b90      	ldr	r3, [pc, #576]	; (8005a14 <Batt_Protection_when_discharge+0x794>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4990      	ldr	r1, [pc, #576]	; (8005a18 <Batt_Protection_when_discharge+0x798>)
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fb f9aa 	bl	8000b30 <__aeabi_fsub>
 80057dc:	4603      	mov	r3, r0
 80057de:	461a      	mov	r2, r3
 80057e0:	4b8e      	ldr	r3, [pc, #568]	; (8005a1c <Batt_Protection_when_discharge+0x79c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4619      	mov	r1, r3
 80057e6:	4610      	mov	r0, r2
 80057e8:	f7fb fc4a 	bl	8001080 <__aeabi_fcmplt>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d028      	beq.n	8005844 <Batt_Protection_when_discharge+0x5c4>
 80057f2:	4b88      	ldr	r3, [pc, #544]	; (8005a14 <Batt_Protection_when_discharge+0x794>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fb f998 	bl	8000b30 <__aeabi_fsub>
 8005800:	4603      	mov	r3, r0
 8005802:	461a      	mov	r2, r3
 8005804:	4b85      	ldr	r3, [pc, #532]	; (8005a1c <Batt_Protection_when_discharge+0x79c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f7fb fc4c 	bl	80010a8 <__aeabi_fcmpge>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d016      	beq.n	8005844 <Batt_Protection_when_discharge+0x5c4>
			  			  if((test_tim2%500)==0)
 8005816:	4b82      	ldr	r3, [pc, #520]	; (8005a20 <Batt_Protection_when_discharge+0x7a0>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b82      	ldr	r3, [pc, #520]	; (8005a24 <Batt_Protection_when_discharge+0x7a4>)
 800581c:	fb83 1302 	smull	r1, r3, r3, r2
 8005820:	1159      	asrs	r1, r3, #5
 8005822:	17d3      	asrs	r3, r2, #31
 8005824:	1acb      	subs	r3, r1, r3
 8005826:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800582a:	fb01 f303 	mul.w	r3, r1, r3
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d16b      	bne.n	800590c <Batt_Protection_when_discharge+0x68c>
			  				  BUZZ_Toggle;
 8005834:	2104      	movs	r1, #4
 8005836:	487c      	ldr	r0, [pc, #496]	; (8005a28 <Batt_Protection_when_discharge+0x7a8>)
 8005838:	f003 ff4d 	bl	80096d6 <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 800583c:	4b78      	ldr	r3, [pc, #480]	; (8005a20 <Batt_Protection_when_discharge+0x7a0>)
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005842:	e063      	b.n	800590c <Batt_Protection_when_discharge+0x68c>
			  		  else if(Suhu_T1>Temp_Over_Set-2 && Suhu_T1<=Temp_Over_Set)
 8005844:	4b73      	ldr	r3, [pc, #460]	; (8005a14 <Batt_Protection_when_discharge+0x794>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800584c:	4618      	mov	r0, r3
 800584e:	f7fb f96f 	bl	8000b30 <__aeabi_fsub>
 8005852:	4603      	mov	r3, r0
 8005854:	461a      	mov	r2, r3
 8005856:	4b71      	ldr	r3, [pc, #452]	; (8005a1c <Batt_Protection_when_discharge+0x79c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4619      	mov	r1, r3
 800585c:	4610      	mov	r0, r2
 800585e:	f7fb fc0f 	bl	8001080 <__aeabi_fcmplt>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d021      	beq.n	80058ac <Batt_Protection_when_discharge+0x62c>
 8005868:	4b6c      	ldr	r3, [pc, #432]	; (8005a1c <Batt_Protection_when_discharge+0x79c>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	4b69      	ldr	r3, [pc, #420]	; (8005a14 <Batt_Protection_when_discharge+0x794>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f7fb fc0e 	bl	8001094 <__aeabi_fcmple>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d016      	beq.n	80058ac <Batt_Protection_when_discharge+0x62c>
			  			  if((test_tim2%500)==0)
 800587e:	4b68      	ldr	r3, [pc, #416]	; (8005a20 <Batt_Protection_when_discharge+0x7a0>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b68      	ldr	r3, [pc, #416]	; (8005a24 <Batt_Protection_when_discharge+0x7a4>)
 8005884:	fb83 1302 	smull	r1, r3, r3, r2
 8005888:	1159      	asrs	r1, r3, #5
 800588a:	17d3      	asrs	r3, r2, #31
 800588c:	1acb      	subs	r3, r1, r3
 800588e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005892:	fb01 f303 	mul.w	r3, r1, r3
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d137      	bne.n	800590c <Batt_Protection_when_discharge+0x68c>
			  				  BUZZ_Toggle;
 800589c:	2104      	movs	r1, #4
 800589e:	4862      	ldr	r0, [pc, #392]	; (8005a28 <Batt_Protection_when_discharge+0x7a8>)
 80058a0:	f003 ff19 	bl	80096d6 <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 80058a4:	4b5e      	ldr	r3, [pc, #376]	; (8005a20 <Batt_Protection_when_discharge+0x7a0>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 80058aa:	e02f      	b.n	800590c <Batt_Protection_when_discharge+0x68c>
			  		  else if(Suhu_T1>50||Suhu_T2>85||Suhu_T3>50||Suhu_T4>85)
 80058ac:	4b5b      	ldr	r3, [pc, #364]	; (8005a1c <Batt_Protection_when_discharge+0x79c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	495e      	ldr	r1, [pc, #376]	; (8005a2c <Batt_Protection_when_discharge+0x7ac>)
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fb fc02 	bl	80010bc <__aeabi_fcmpgt>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d11b      	bne.n	80058f6 <Batt_Protection_when_discharge+0x676>
 80058be:	4b5c      	ldr	r3, [pc, #368]	; (8005a30 <Batt_Protection_when_discharge+0x7b0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	495c      	ldr	r1, [pc, #368]	; (8005a34 <Batt_Protection_when_discharge+0x7b4>)
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fb fbf9 	bl	80010bc <__aeabi_fcmpgt>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d112      	bne.n	80058f6 <Batt_Protection_when_discharge+0x676>
 80058d0:	4b59      	ldr	r3, [pc, #356]	; (8005a38 <Batt_Protection_when_discharge+0x7b8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4955      	ldr	r1, [pc, #340]	; (8005a2c <Batt_Protection_when_discharge+0x7ac>)
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fb fbf0 	bl	80010bc <__aeabi_fcmpgt>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d109      	bne.n	80058f6 <Batt_Protection_when_discharge+0x676>
 80058e2:	4b56      	ldr	r3, [pc, #344]	; (8005a3c <Batt_Protection_when_discharge+0x7bc>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4953      	ldr	r1, [pc, #332]	; (8005a34 <Batt_Protection_when_discharge+0x7b4>)
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fb fbe7 	bl	80010bc <__aeabi_fcmpgt>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d100      	bne.n	80058f6 <Batt_Protection_when_discharge+0x676>
			  		  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 80058f4:	e2d4      	b.n	8005ea0 <Batt_Protection_when_discharge+0xc20>
			  			  Batt_Open_Mode();
 80058f6:	f7fb fd5d 	bl	80013b4 <Batt_Open_Mode>
			  			  flag_trip_overtemperature=ON;
 80058fa:	4b51      	ldr	r3, [pc, #324]	; (8005a40 <Batt_Protection_when_discharge+0x7c0>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	701a      	strb	r2, [r3, #0]
			  			  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005900:	2200      	movs	r2, #0
 8005902:	2104      	movs	r1, #4
 8005904:	4848      	ldr	r0, [pc, #288]	; (8005a28 <Batt_Protection_when_discharge+0x7a8>)
 8005906:	f003 fece 	bl	80096a6 <HAL_GPIO_WritePin>
			  		  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 800590a:	e2c9      	b.n	8005ea0 <Batt_Protection_when_discharge+0xc20>
 800590c:	e2c8      	b.n	8005ea0 <Batt_Protection_when_discharge+0xc20>
			  	  else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF)
 800590e:	4b43      	ldr	r3, [pc, #268]	; (8005a1c <Batt_Protection_when_discharge+0x79c>)
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4b4c      	ldr	r3, [pc, #304]	; (8005a44 <Batt_Protection_when_discharge+0x7c4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f7fb f909 	bl	8000b30 <__aeabi_fsub>
 800591e:	4603      	mov	r3, r0
 8005920:	4949      	ldr	r1, [pc, #292]	; (8005a48 <Batt_Protection_when_discharge+0x7c8>)
 8005922:	4618      	mov	r0, r3
 8005924:	f7fb fbb6 	bl	8001094 <__aeabi_fcmple>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d130      	bne.n	8005990 <Batt_Protection_when_discharge+0x710>
 800592e:	4b40      	ldr	r3, [pc, #256]	; (8005a30 <Batt_Protection_when_discharge+0x7b0>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b44      	ldr	r3, [pc, #272]	; (8005a44 <Batt_Protection_when_discharge+0x7c4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4619      	mov	r1, r3
 8005938:	4610      	mov	r0, r2
 800593a:	f7fb f8f9 	bl	8000b30 <__aeabi_fsub>
 800593e:	4603      	mov	r3, r0
 8005940:	4941      	ldr	r1, [pc, #260]	; (8005a48 <Batt_Protection_when_discharge+0x7c8>)
 8005942:	4618      	mov	r0, r3
 8005944:	f7fb fba6 	bl	8001094 <__aeabi_fcmple>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d120      	bne.n	8005990 <Batt_Protection_when_discharge+0x710>
 800594e:	4b3a      	ldr	r3, [pc, #232]	; (8005a38 <Batt_Protection_when_discharge+0x7b8>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b3c      	ldr	r3, [pc, #240]	; (8005a44 <Batt_Protection_when_discharge+0x7c4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4619      	mov	r1, r3
 8005958:	4610      	mov	r0, r2
 800595a:	f7fb f8e9 	bl	8000b30 <__aeabi_fsub>
 800595e:	4603      	mov	r3, r0
 8005960:	4939      	ldr	r1, [pc, #228]	; (8005a48 <Batt_Protection_when_discharge+0x7c8>)
 8005962:	4618      	mov	r0, r3
 8005964:	f7fb fb96 	bl	8001094 <__aeabi_fcmple>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d110      	bne.n	8005990 <Batt_Protection_when_discharge+0x710>
 800596e:	4b33      	ldr	r3, [pc, #204]	; (8005a3c <Batt_Protection_when_discharge+0x7bc>)
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	4b34      	ldr	r3, [pc, #208]	; (8005a44 <Batt_Protection_when_discharge+0x7c4>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4619      	mov	r1, r3
 8005978:	4610      	mov	r0, r2
 800597a:	f7fb f8d9 	bl	8000b30 <__aeabi_fsub>
 800597e:	4603      	mov	r3, r0
 8005980:	4931      	ldr	r1, [pc, #196]	; (8005a48 <Batt_Protection_when_discharge+0x7c8>)
 8005982:	4618      	mov	r0, r3
 8005984:	f7fb fb86 	bl	8001094 <__aeabi_fcmple>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 8109 	beq.w	8005ba2 <Batt_Protection_when_discharge+0x922>
 8005990:	4b2e      	ldr	r3, [pc, #184]	; (8005a4c <Batt_Protection_when_discharge+0x7cc>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f040 8104 	bne.w	8005ba2 <Batt_Protection_when_discharge+0x922>
			  		  fault_code=4;
 800599a:	4b2d      	ldr	r3, [pc, #180]	; (8005a50 <Batt_Protection_when_discharge+0x7d0>)
 800599c:	2204      	movs	r2, #4
 800599e:	701a      	strb	r2, [r3, #0]
			  		  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 80059a0:	4b28      	ldr	r3, [pc, #160]	; (8005a44 <Batt_Protection_when_discharge+0x7c4>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4928      	ldr	r1, [pc, #160]	; (8005a48 <Batt_Protection_when_discharge+0x7c8>)
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fb f8c4 	bl	8000b34 <__addsf3>
 80059ac:	4603      	mov	r3, r0
 80059ae:	461a      	mov	r2, r3
 80059b0:	4b1a      	ldr	r3, [pc, #104]	; (8005a1c <Batt_Protection_when_discharge+0x79c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4619      	mov	r1, r3
 80059b6:	4610      	mov	r0, r2
 80059b8:	f7fb fb76 	bl	80010a8 <__aeabi_fcmpge>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d048      	beq.n	8005a54 <Batt_Protection_when_discharge+0x7d4>
 80059c2:	4b20      	ldr	r3, [pc, #128]	; (8005a44 <Batt_Protection_when_discharge+0x7c4>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4914      	ldr	r1, [pc, #80]	; (8005a18 <Batt_Protection_when_discharge+0x798>)
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fb f8b3 	bl	8000b34 <__addsf3>
 80059ce:	4603      	mov	r3, r0
 80059d0:	461a      	mov	r2, r3
 80059d2:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <Batt_Protection_when_discharge+0x79c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f7fb fb51 	bl	8001080 <__aeabi_fcmplt>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d037      	beq.n	8005a54 <Batt_Protection_when_discharge+0x7d4>
			  			  if((test_tim2%1000)==0)
 80059e4:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <Batt_Protection_when_discharge+0x7a0>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	4b0e      	ldr	r3, [pc, #56]	; (8005a24 <Batt_Protection_when_discharge+0x7a4>)
 80059ea:	fb83 1302 	smull	r1, r3, r3, r2
 80059ee:	1199      	asrs	r1, r3, #6
 80059f0:	17d3      	asrs	r3, r2, #31
 80059f2:	1acb      	subs	r3, r1, r3
 80059f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f040 80ce 	bne.w	8005ba0 <Batt_Protection_when_discharge+0x920>
			  				  BUZZ_Toggle;
 8005a04:	2104      	movs	r1, #4
 8005a06:	4808      	ldr	r0, [pc, #32]	; (8005a28 <Batt_Protection_when_discharge+0x7a8>)
 8005a08:	f003 fe65 	bl	80096d6 <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005a0c:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <Batt_Protection_when_discharge+0x7a0>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%1000)==0)
 8005a12:	e0c5      	b.n	8005ba0 <Batt_Protection_when_discharge+0x920>
 8005a14:	20000060 	.word	0x20000060
 8005a18:	40a00000 	.word	0x40a00000
 8005a1c:	200010c4 	.word	0x200010c4
 8005a20:	20000bdc 	.word	0x20000bdc
 8005a24:	10624dd3 	.word	0x10624dd3
 8005a28:	40011000 	.word	0x40011000
 8005a2c:	42480000 	.word	0x42480000
 8005a30:	20001500 	.word	0x20001500
 8005a34:	42aa0000 	.word	0x42aa0000
 8005a38:	20001098 	.word	0x20001098
 8005a3c:	200010f8 	.word	0x200010f8
 8005a40:	20001090 	.word	0x20001090
 8005a44:	20000064 	.word	0x20000064
 8005a48:	41200000 	.word	0x41200000
 8005a4c:	200010b8 	.word	0x200010b8
 8005a50:	200010c0 	.word	0x200010c0
			  		  else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2)
 8005a54:	4b9c      	ldr	r3, [pc, #624]	; (8005cc8 <Batt_Protection_when_discharge+0xa48>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	499c      	ldr	r1, [pc, #624]	; (8005ccc <Batt_Protection_when_discharge+0xa4c>)
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fb f86a 	bl	8000b34 <__addsf3>
 8005a60:	4603      	mov	r3, r0
 8005a62:	461a      	mov	r2, r3
 8005a64:	4b9a      	ldr	r3, [pc, #616]	; (8005cd0 <Batt_Protection_when_discharge+0xa50>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	f7fb fb1c 	bl	80010a8 <__aeabi_fcmpge>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d028      	beq.n	8005ac8 <Batt_Protection_when_discharge+0x848>
 8005a76:	4b94      	ldr	r3, [pc, #592]	; (8005cc8 <Batt_Protection_when_discharge+0xa48>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fb f858 	bl	8000b34 <__addsf3>
 8005a84:	4603      	mov	r3, r0
 8005a86:	461a      	mov	r2, r3
 8005a88:	4b91      	ldr	r3, [pc, #580]	; (8005cd0 <Batt_Protection_when_discharge+0xa50>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	f7fb faf6 	bl	8001080 <__aeabi_fcmplt>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d016      	beq.n	8005ac8 <Batt_Protection_when_discharge+0x848>
			  			  if((test_tim2%500)==0)
 8005a9a:	4b8e      	ldr	r3, [pc, #568]	; (8005cd4 <Batt_Protection_when_discharge+0xa54>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	4b8e      	ldr	r3, [pc, #568]	; (8005cd8 <Batt_Protection_when_discharge+0xa58>)
 8005aa0:	fb83 1302 	smull	r1, r3, r3, r2
 8005aa4:	1159      	asrs	r1, r3, #5
 8005aa6:	17d3      	asrs	r3, r2, #31
 8005aa8:	1acb      	subs	r3, r1, r3
 8005aaa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005aae:	fb01 f303 	mul.w	r3, r1, r3
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d173      	bne.n	8005ba0 <Batt_Protection_when_discharge+0x920>
			  				  BUZZ_Toggle;
 8005ab8:	2104      	movs	r1, #4
 8005aba:	4888      	ldr	r0, [pc, #544]	; (8005cdc <Batt_Protection_when_discharge+0xa5c>)
 8005abc:	f003 fe0b 	bl	80096d6 <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005ac0:	4b84      	ldr	r3, [pc, #528]	; (8005cd4 <Batt_Protection_when_discharge+0xa54>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005ac6:	e06b      	b.n	8005ba0 <Batt_Protection_when_discharge+0x920>
			  		  else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set)
 8005ac8:	4b7f      	ldr	r3, [pc, #508]	; (8005cc8 <Batt_Protection_when_discharge+0xa48>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fb f82f 	bl	8000b34 <__addsf3>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4b7d      	ldr	r3, [pc, #500]	; (8005cd0 <Batt_Protection_when_discharge+0xa50>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	f7fb faeb 	bl	80010bc <__aeabi_fcmpgt>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d021      	beq.n	8005b30 <Batt_Protection_when_discharge+0x8b0>
 8005aec:	4b78      	ldr	r3, [pc, #480]	; (8005cd0 <Batt_Protection_when_discharge+0xa50>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b75      	ldr	r3, [pc, #468]	; (8005cc8 <Batt_Protection_when_discharge+0xa48>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f7fb fad6 	bl	80010a8 <__aeabi_fcmpge>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d016      	beq.n	8005b30 <Batt_Protection_when_discharge+0x8b0>
			  			  if((test_tim2%500)==0)
 8005b02:	4b74      	ldr	r3, [pc, #464]	; (8005cd4 <Batt_Protection_when_discharge+0xa54>)
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4b74      	ldr	r3, [pc, #464]	; (8005cd8 <Batt_Protection_when_discharge+0xa58>)
 8005b08:	fb83 1302 	smull	r1, r3, r3, r2
 8005b0c:	1159      	asrs	r1, r3, #5
 8005b0e:	17d3      	asrs	r3, r2, #31
 8005b10:	1acb      	subs	r3, r1, r3
 8005b12:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005b16:	fb01 f303 	mul.w	r3, r1, r3
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d13f      	bne.n	8005ba0 <Batt_Protection_when_discharge+0x920>
			  				  BUZZ_Toggle;
 8005b20:	2104      	movs	r1, #4
 8005b22:	486e      	ldr	r0, [pc, #440]	; (8005cdc <Batt_Protection_when_discharge+0xa5c>)
 8005b24:	f003 fdd7 	bl	80096d6 <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005b28:	4b6a      	ldr	r3, [pc, #424]	; (8005cd4 <Batt_Protection_when_discharge+0xa54>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005b2e:	e037      	b.n	8005ba0 <Batt_Protection_when_discharge+0x920>
			  		  else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set)
 8005b30:	4b67      	ldr	r3, [pc, #412]	; (8005cd0 <Batt_Protection_when_discharge+0xa50>)
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	4b64      	ldr	r3, [pc, #400]	; (8005cc8 <Batt_Protection_when_discharge+0xa48>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	f7fb faa0 	bl	8001080 <__aeabi_fcmplt>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d121      	bne.n	8005b8a <Batt_Protection_when_discharge+0x90a>
 8005b46:	4b66      	ldr	r3, [pc, #408]	; (8005ce0 <Batt_Protection_when_discharge+0xa60>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	4b5f      	ldr	r3, [pc, #380]	; (8005cc8 <Batt_Protection_when_discharge+0xa48>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f7fb fa95 	bl	8001080 <__aeabi_fcmplt>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d116      	bne.n	8005b8a <Batt_Protection_when_discharge+0x90a>
 8005b5c:	4b61      	ldr	r3, [pc, #388]	; (8005ce4 <Batt_Protection_when_discharge+0xa64>)
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	4b59      	ldr	r3, [pc, #356]	; (8005cc8 <Batt_Protection_when_discharge+0xa48>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4619      	mov	r1, r3
 8005b66:	4610      	mov	r0, r2
 8005b68:	f7fb fa8a 	bl	8001080 <__aeabi_fcmplt>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10b      	bne.n	8005b8a <Batt_Protection_when_discharge+0x90a>
 8005b72:	4b5d      	ldr	r3, [pc, #372]	; (8005ce8 <Batt_Protection_when_discharge+0xa68>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4b54      	ldr	r3, [pc, #336]	; (8005cc8 <Batt_Protection_when_discharge+0xa48>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	f7fb fa7f 	bl	8001080 <__aeabi_fcmplt>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d100      	bne.n	8005b8a <Batt_Protection_when_discharge+0x90a>
			  		  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8005b88:	e18a      	b.n	8005ea0 <Batt_Protection_when_discharge+0xc20>
			  			  Batt_Open_Mode();
 8005b8a:	f7fb fc13 	bl	80013b4 <Batt_Open_Mode>
			  			  flag_trip_undertemperature=ON;
 8005b8e:	4b57      	ldr	r3, [pc, #348]	; (8005cec <Batt_Protection_when_discharge+0xa6c>)
 8005b90:	2201      	movs	r2, #1
 8005b92:	701a      	strb	r2, [r3, #0]
			  			  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005b94:	2200      	movs	r2, #0
 8005b96:	2104      	movs	r1, #4
 8005b98:	4850      	ldr	r0, [pc, #320]	; (8005cdc <Batt_Protection_when_discharge+0xa5c>)
 8005b9a:	f003 fd84 	bl	80096a6 <HAL_GPIO_WritePin>
			  		  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8005b9e:	e17f      	b.n	8005ea0 <Batt_Protection_when_discharge+0xc20>
 8005ba0:	e17e      	b.n	8005ea0 <Batt_Protection_when_discharge+0xc20>
			  	  else if(Pack_SOC-SOC_Under_Set<=10 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE)
 8005ba2:	4b53      	ldr	r3, [pc, #332]	; (8005cf0 <Batt_Protection_when_discharge+0xa70>)
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	4b53      	ldr	r3, [pc, #332]	; (8005cf4 <Batt_Protection_when_discharge+0xa74>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f7fa ffbf 	bl	8000b30 <__aeabi_fsub>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	4950      	ldr	r1, [pc, #320]	; (8005cf8 <Batt_Protection_when_discharge+0xa78>)
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fb fa6c 	bl	8001094 <__aeabi_fcmple>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 80ee 	beq.w	8005da0 <Batt_Protection_when_discharge+0xb20>
 8005bc4:	4b4d      	ldr	r3, [pc, #308]	; (8005cfc <Batt_Protection_when_discharge+0xa7c>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f040 80e9 	bne.w	8005da0 <Batt_Protection_when_discharge+0xb20>
 8005bce:	4b4c      	ldr	r3, [pc, #304]	; (8005d00 <Batt_Protection_when_discharge+0xa80>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	f040 80e4 	bne.w	8005da0 <Batt_Protection_when_discharge+0xb20>
			  		  fault_code=5;
 8005bd8:	4b4a      	ldr	r3, [pc, #296]	; (8005d04 <Batt_Protection_when_discharge+0xa84>)
 8005bda:	2205      	movs	r2, #5
 8005bdc:	701a      	strb	r2, [r3, #0]
			  		  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 8005bde:	4b45      	ldr	r3, [pc, #276]	; (8005cf4 <Batt_Protection_when_discharge+0xa74>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4945      	ldr	r1, [pc, #276]	; (8005cf8 <Batt_Protection_when_discharge+0xa78>)
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fa ffa5 	bl	8000b34 <__addsf3>
 8005bea:	4603      	mov	r3, r0
 8005bec:	461a      	mov	r2, r3
 8005bee:	4b40      	ldr	r3, [pc, #256]	; (8005cf0 <Batt_Protection_when_discharge+0xa70>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	f7fb fa57 	bl	80010a8 <__aeabi_fcmpge>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d028      	beq.n	8005c52 <Batt_Protection_when_discharge+0x9d2>
 8005c00:	4b3c      	ldr	r3, [pc, #240]	; (8005cf4 <Batt_Protection_when_discharge+0xa74>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4931      	ldr	r1, [pc, #196]	; (8005ccc <Batt_Protection_when_discharge+0xa4c>)
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fa ff94 	bl	8000b34 <__addsf3>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	461a      	mov	r2, r3
 8005c10:	4b37      	ldr	r3, [pc, #220]	; (8005cf0 <Batt_Protection_when_discharge+0xa70>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4619      	mov	r1, r3
 8005c16:	4610      	mov	r0, r2
 8005c18:	f7fb fa32 	bl	8001080 <__aeabi_fcmplt>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d017      	beq.n	8005c52 <Batt_Protection_when_discharge+0x9d2>
			  			  if((test_tim2%1000)==0)
 8005c22:	4b2c      	ldr	r3, [pc, #176]	; (8005cd4 <Batt_Protection_when_discharge+0xa54>)
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	4b2c      	ldr	r3, [pc, #176]	; (8005cd8 <Batt_Protection_when_discharge+0xa58>)
 8005c28:	fb83 1302 	smull	r1, r3, r3, r2
 8005c2c:	1199      	asrs	r1, r3, #6
 8005c2e:	17d3      	asrs	r3, r2, #31
 8005c30:	1acb      	subs	r3, r1, r3
 8005c32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c36:	fb01 f303 	mul.w	r3, r1, r3
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f040 80ae 	bne.w	8005d9e <Batt_Protection_when_discharge+0xb1e>
			  				  BUZZ_Toggle;
 8005c42:	2104      	movs	r1, #4
 8005c44:	4825      	ldr	r0, [pc, #148]	; (8005cdc <Batt_Protection_when_discharge+0xa5c>)
 8005c46:	f003 fd46 	bl	80096d6 <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005c4a:	4b22      	ldr	r3, [pc, #136]	; (8005cd4 <Batt_Protection_when_discharge+0xa54>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%1000)==0)
 8005c50:	e0a5      	b.n	8005d9e <Batt_Protection_when_discharge+0xb1e>
			  		  else if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+2)
 8005c52:	4b28      	ldr	r3, [pc, #160]	; (8005cf4 <Batt_Protection_when_discharge+0xa74>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	491d      	ldr	r1, [pc, #116]	; (8005ccc <Batt_Protection_when_discharge+0xa4c>)
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fa ff6b 	bl	8000b34 <__addsf3>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	461a      	mov	r2, r3
 8005c62:	4b23      	ldr	r3, [pc, #140]	; (8005cf0 <Batt_Protection_when_discharge+0xa70>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4619      	mov	r1, r3
 8005c68:	4610      	mov	r0, r2
 8005c6a:	f7fb fa1d 	bl	80010a8 <__aeabi_fcmpge>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d049      	beq.n	8005d08 <Batt_Protection_when_discharge+0xa88>
 8005c74:	4b1f      	ldr	r3, [pc, #124]	; (8005cf4 <Batt_Protection_when_discharge+0xa74>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fa ff59 	bl	8000b34 <__addsf3>
 8005c82:	4603      	mov	r3, r0
 8005c84:	461a      	mov	r2, r3
 8005c86:	4b1a      	ldr	r3, [pc, #104]	; (8005cf0 <Batt_Protection_when_discharge+0xa70>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f7fb f9f7 	bl	8001080 <__aeabi_fcmplt>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d037      	beq.n	8005d08 <Batt_Protection_when_discharge+0xa88>
			  			  if((test_tim2%500)==0)
 8005c98:	4b0e      	ldr	r3, [pc, #56]	; (8005cd4 <Batt_Protection_when_discharge+0xa54>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	4b0e      	ldr	r3, [pc, #56]	; (8005cd8 <Batt_Protection_when_discharge+0xa58>)
 8005c9e:	fb83 1302 	smull	r1, r3, r3, r2
 8005ca2:	1159      	asrs	r1, r3, #5
 8005ca4:	17d3      	asrs	r3, r2, #31
 8005ca6:	1acb      	subs	r3, r1, r3
 8005ca8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005cac:	fb01 f303 	mul.w	r3, r1, r3
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d173      	bne.n	8005d9e <Batt_Protection_when_discharge+0xb1e>
			  				  BUZZ_Toggle;
 8005cb6:	2104      	movs	r1, #4
 8005cb8:	4808      	ldr	r0, [pc, #32]	; (8005cdc <Batt_Protection_when_discharge+0xa5c>)
 8005cba:	f003 fd0c 	bl	80096d6 <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005cbe:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <Batt_Protection_when_discharge+0xa54>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005cc4:	e06b      	b.n	8005d9e <Batt_Protection_when_discharge+0xb1e>
 8005cc6:	bf00      	nop
 8005cc8:	20000064 	.word	0x20000064
 8005ccc:	40a00000 	.word	0x40a00000
 8005cd0:	200010c4 	.word	0x200010c4
 8005cd4:	20000bdc 	.word	0x20000bdc
 8005cd8:	10624dd3 	.word	0x10624dd3
 8005cdc:	40011000 	.word	0x40011000
 8005ce0:	20001500 	.word	0x20001500
 8005ce4:	20001098 	.word	0x20001098
 8005ce8:	200010f8 	.word	0x200010f8
 8005cec:	200010b8 	.word	0x200010b8
 8005cf0:	20000be4 	.word	0x20000be4
 8005cf4:	20000068 	.word	0x20000068
 8005cf8:	41200000 	.word	0x41200000
 8005cfc:	200010ec 	.word	0x200010ec
 8005d00:	200009b0 	.word	0x200009b0
 8005d04:	200010c0 	.word	0x200010c0
			  		  else if(Pack_SOC<SOC_Under_Set+2 && Pack_SOC>=SOC_Under_Set)
 8005d08:	4b69      	ldr	r3, [pc, #420]	; (8005eb0 <Batt_Protection_when_discharge+0xc30>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fa ff0f 	bl	8000b34 <__addsf3>
 8005d16:	4603      	mov	r3, r0
 8005d18:	461a      	mov	r2, r3
 8005d1a:	4b66      	ldr	r3, [pc, #408]	; (8005eb4 <Batt_Protection_when_discharge+0xc34>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4610      	mov	r0, r2
 8005d22:	f7fb f9cb 	bl	80010bc <__aeabi_fcmpgt>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d021      	beq.n	8005d70 <Batt_Protection_when_discharge+0xaf0>
 8005d2c:	4b61      	ldr	r3, [pc, #388]	; (8005eb4 <Batt_Protection_when_discharge+0xc34>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	4b5f      	ldr	r3, [pc, #380]	; (8005eb0 <Batt_Protection_when_discharge+0xc30>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f7fb f9b6 	bl	80010a8 <__aeabi_fcmpge>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d016      	beq.n	8005d70 <Batt_Protection_when_discharge+0xaf0>
			  			  if((test_tim2%500)==0)
 8005d42:	4b5d      	ldr	r3, [pc, #372]	; (8005eb8 <Batt_Protection_when_discharge+0xc38>)
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4b5d      	ldr	r3, [pc, #372]	; (8005ebc <Batt_Protection_when_discharge+0xc3c>)
 8005d48:	fb83 1302 	smull	r1, r3, r3, r2
 8005d4c:	1159      	asrs	r1, r3, #5
 8005d4e:	17d3      	asrs	r3, r2, #31
 8005d50:	1acb      	subs	r3, r1, r3
 8005d52:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005d56:	fb01 f303 	mul.w	r3, r1, r3
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d11e      	bne.n	8005d9e <Batt_Protection_when_discharge+0xb1e>
			  				  BUZZ_Toggle;
 8005d60:	2104      	movs	r1, #4
 8005d62:	4857      	ldr	r0, [pc, #348]	; (8005ec0 <Batt_Protection_when_discharge+0xc40>)
 8005d64:	f003 fcb7 	bl	80096d6 <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005d68:	4b53      	ldr	r3, [pc, #332]	; (8005eb8 <Batt_Protection_when_discharge+0xc38>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005d6e:	e016      	b.n	8005d9e <Batt_Protection_when_discharge+0xb1e>
			  		  else if(Pack_SOC<SOC_Under_Set)
 8005d70:	4b50      	ldr	r3, [pc, #320]	; (8005eb4 <Batt_Protection_when_discharge+0xc34>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	4b4e      	ldr	r3, [pc, #312]	; (8005eb0 <Batt_Protection_when_discharge+0xc30>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f7fb f980 	bl	8001080 <__aeabi_fcmplt>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d100      	bne.n	8005d88 <Batt_Protection_when_discharge+0xb08>
			  		  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 8005d86:	e08b      	b.n	8005ea0 <Batt_Protection_when_discharge+0xc20>
			  			  Batt_Open_Mode();
 8005d88:	f7fb fb14 	bl	80013b4 <Batt_Open_Mode>
			  			  flag_trip_SOCOverDischarge=ON;
 8005d8c:	4b4d      	ldr	r3, [pc, #308]	; (8005ec4 <Batt_Protection_when_discharge+0xc44>)
 8005d8e:	2201      	movs	r2, #1
 8005d90:	701a      	strb	r2, [r3, #0]
			  			  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005d92:	2200      	movs	r2, #0
 8005d94:	2104      	movs	r1, #4
 8005d96:	484a      	ldr	r0, [pc, #296]	; (8005ec0 <Batt_Protection_when_discharge+0xc40>)
 8005d98:	f003 fc85 	bl	80096a6 <HAL_GPIO_WritePin>
			  		  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 8005d9c:	e080      	b.n	8005ea0 <Batt_Protection_when_discharge+0xc20>
 8005d9e:	e07f      	b.n	8005ea0 <Batt_Protection_when_discharge+0xc20>
			  	  else if(Persen_Imbalance_Set-persen_imbalance<10)
 8005da0:	4b49      	ldr	r3, [pc, #292]	; (8005ec8 <Batt_Protection_when_discharge+0xc48>)
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	4b49      	ldr	r3, [pc, #292]	; (8005ecc <Batt_Protection_when_discharge+0xc4c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4619      	mov	r1, r3
 8005daa:	4610      	mov	r0, r2
 8005dac:	f7fa fec0 	bl	8000b30 <__aeabi_fsub>
 8005db0:	4603      	mov	r3, r0
 8005db2:	4947      	ldr	r1, [pc, #284]	; (8005ed0 <Batt_Protection_when_discharge+0xc50>)
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fb f963 	bl	8001080 <__aeabi_fcmplt>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d014      	beq.n	8005dea <Batt_Protection_when_discharge+0xb6a>
			  		  fault_code=6;
 8005dc0:	4b44      	ldr	r3, [pc, #272]	; (8005ed4 <Batt_Protection_when_discharge+0xc54>)
 8005dc2:	2206      	movs	r2, #6
 8005dc4:	701a      	strb	r2, [r3, #0]
			  		  if(persen_imbalance>Persen_Imbalance_Set)
 8005dc6:	4b41      	ldr	r3, [pc, #260]	; (8005ecc <Batt_Protection_when_discharge+0xc4c>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	4b3f      	ldr	r3, [pc, #252]	; (8005ec8 <Batt_Protection_when_discharge+0xc48>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	f7fb f973 	bl	80010bc <__aeabi_fcmpgt>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d100      	bne.n	8005dde <Batt_Protection_when_discharge+0xb5e>
}
 8005ddc:	e060      	b.n	8005ea0 <Batt_Protection_when_discharge+0xc20>
			  			flag_trip_unbalance=ON;
 8005dde:	4b3e      	ldr	r3, [pc, #248]	; (8005ed8 <Batt_Protection_when_discharge+0xc58>)
 8005de0:	2201      	movs	r2, #1
 8005de2:	701a      	strb	r2, [r3, #0]
			  			Batt_Open_Mode();
 8005de4:	f7fb fae6 	bl	80013b4 <Batt_Open_Mode>
}
 8005de8:	e05a      	b.n	8005ea0 <Batt_Protection_when_discharge+0xc20>
			  		  if(fault_code!=0) last_fault_code=fault_code;
 8005dea:	4b3a      	ldr	r3, [pc, #232]	; (8005ed4 <Batt_Protection_when_discharge+0xc54>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <Batt_Protection_when_discharge+0xb7a>
 8005df2:	4b38      	ldr	r3, [pc, #224]	; (8005ed4 <Batt_Protection_when_discharge+0xc54>)
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	4b39      	ldr	r3, [pc, #228]	; (8005edc <Batt_Protection_when_discharge+0xc5c>)
 8005df8:	701a      	strb	r2, [r3, #0]
			  		  fault_code=0;
 8005dfa:	4b36      	ldr	r3, [pc, #216]	; (8005ed4 <Batt_Protection_when_discharge+0xc54>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	701a      	strb	r2, [r3, #0]
			  		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005e00:	2200      	movs	r2, #0
 8005e02:	2104      	movs	r1, #4
 8005e04:	482e      	ldr	r0, [pc, #184]	; (8005ec0 <Batt_Protection_when_discharge+0xc40>)
 8005e06:	f003 fc4e 	bl	80096a6 <HAL_GPIO_WritePin>
			  		  T_Under_trip=0;
 8005e0a:	4b35      	ldr	r3, [pc, #212]	; (8005ee0 <Batt_Protection_when_discharge+0xc60>)
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]
			  		  T_trip_cycle=T_trip_cycle-0.001;
 8005e12:	4b34      	ldr	r3, [pc, #208]	; (8005ee4 <Batt_Protection_when_discharge+0xc64>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fa fb06 	bl	8000428 <__aeabi_f2d>
 8005e1c:	a322      	add	r3, pc, #136	; (adr r3, 8005ea8 <Batt_Protection_when_discharge+0xc28>)
 8005e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e22:	f7fa f9a1 	bl	8000168 <__aeabi_dsub>
 8005e26:	4603      	mov	r3, r0
 8005e28:	460c      	mov	r4, r1
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	f7fa fe2b 	bl	8000a88 <__aeabi_d2f>
 8005e32:	4602      	mov	r2, r0
 8005e34:	4b2b      	ldr	r3, [pc, #172]	; (8005ee4 <Batt_Protection_when_discharge+0xc64>)
 8005e36:	601a      	str	r2, [r3, #0]
			  		  T_I_Over_trip_cycle-=0.001;
 8005e38:	4b2b      	ldr	r3, [pc, #172]	; (8005ee8 <Batt_Protection_when_discharge+0xc68>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fa faf3 	bl	8000428 <__aeabi_f2d>
 8005e42:	a319      	add	r3, pc, #100	; (adr r3, 8005ea8 <Batt_Protection_when_discharge+0xc28>)
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f7fa f98e 	bl	8000168 <__aeabi_dsub>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	460c      	mov	r4, r1
 8005e50:	4618      	mov	r0, r3
 8005e52:	4621      	mov	r1, r4
 8005e54:	f7fa fe18 	bl	8000a88 <__aeabi_d2f>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	4b23      	ldr	r3, [pc, #140]	; (8005ee8 <Batt_Protection_when_discharge+0xc68>)
 8005e5c:	601a      	str	r2, [r3, #0]
			  		  if(T_trip_cycle<0) T_trip_cycle=0;
 8005e5e:	4b21      	ldr	r3, [pc, #132]	; (8005ee4 <Batt_Protection_when_discharge+0xc64>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f04f 0100 	mov.w	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fb f90a 	bl	8001080 <__aeabi_fcmplt>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <Batt_Protection_when_discharge+0xbfa>
 8005e72:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <Batt_Protection_when_discharge+0xc64>)
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]
			  		if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 8005e7a:	4b1b      	ldr	r3, [pc, #108]	; (8005ee8 <Batt_Protection_when_discharge+0xc68>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f04f 0100 	mov.w	r1, #0
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fb f8fc 	bl	8001080 <__aeabi_fcmplt>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d100      	bne.n	8005e90 <Batt_Protection_when_discharge+0xc10>
}
 8005e8e:	e007      	b.n	8005ea0 <Batt_Protection_when_discharge+0xc20>
			  		if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 8005e90:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <Batt_Protection_when_discharge+0xc68>)
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
}
 8005e98:	e002      	b.n	8005ea0 <Batt_Protection_when_discharge+0xc20>
			  		if(flag_trip_undervoltage==OFF)
 8005e9a:	bf00      	nop
 8005e9c:	e000      	b.n	8005ea0 <Batt_Protection_when_discharge+0xc20>
			  		if(flag_trip_overcurrentdischarge==OFF)
 8005e9e:	bf00      	nop
}
 8005ea0:	bf00      	nop
 8005ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ea4:	f3af 8000 	nop.w
 8005ea8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005eac:	3f50624d 	.word	0x3f50624d
 8005eb0:	20000068 	.word	0x20000068
 8005eb4:	20000be4 	.word	0x20000be4
 8005eb8:	20000bdc 	.word	0x20000bdc
 8005ebc:	10624dd3 	.word	0x10624dd3
 8005ec0:	40011000 	.word	0x40011000
 8005ec4:	200010ec 	.word	0x200010ec
 8005ec8:	20000078 	.word	0x20000078
 8005ecc:	20000bb8 	.word	0x20000bb8
 8005ed0:	41200000 	.word	0x41200000
 8005ed4:	200010c0 	.word	0x200010c0
 8005ed8:	20000c88 	.word	0x20000c88
 8005edc:	200014fc 	.word	0x200014fc
 8005ee0:	20001080 	.word	0x20001080
 8005ee4:	200010cc 	.word	0x200010cc
 8005ee8:	200010fc 	.word	0x200010fc
 8005eec:	00000000 	.word	0x00000000

08005ef0 <Batt_Protection_when_charge>:



void Batt_Protection_when_charge(void)
{
 8005ef0:	b5b0      	push	{r4, r5, r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
					///////////////////// Short Circuit //////////////////////////////////////
					if(fabs(IBATT)>VBATT)
 8005ef4:	4ba1      	ldr	r3, [pc, #644]	; (800617c <Batt_Protection_when_charge+0x28c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005efc:	4ba0      	ldr	r3, [pc, #640]	; (8006180 <Batt_Protection_when_charge+0x290>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4619      	mov	r1, r3
 8005f02:	4610      	mov	r0, r2
 8005f04:	f7fb f8da 	bl	80010bc <__aeabi_fcmpgt>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d015      	beq.n	8005f3a <Batt_Protection_when_charge+0x4a>
				  	{
						Isc=IBATT;
 8005f0e:	4b9b      	ldr	r3, [pc, #620]	; (800617c <Batt_Protection_when_charge+0x28c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a9c      	ldr	r2, [pc, #624]	; (8006184 <Batt_Protection_when_charge+0x294>)
 8005f14:	6013      	str	r3, [r2, #0]
			  		  	Vsc=VBATT;
 8005f16:	4b9a      	ldr	r3, [pc, #616]	; (8006180 <Batt_Protection_when_charge+0x290>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a9b      	ldr	r2, [pc, #620]	; (8006188 <Batt_Protection_when_charge+0x298>)
 8005f1c:	6013      	str	r3, [r2, #0]
				  		fault_code=12;
 8005f1e:	4b9b      	ldr	r3, [pc, #620]	; (800618c <Batt_Protection_when_charge+0x29c>)
 8005f20:	220c      	movs	r2, #12
 8005f22:	701a      	strb	r2, [r3, #0]
				  		Batt_Open_Mode();
 8005f24:	f7fb fa46 	bl	80013b4 <Batt_Open_Mode>
				  		flag_trip_shortcircuit=ON;
 8005f28:	4b99      	ldr	r3, [pc, #612]	; (8006190 <Batt_Protection_when_charge+0x2a0>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	701a      	strb	r2, [r3, #0]
				  		HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2104      	movs	r1, #4
 8005f32:	4898      	ldr	r0, [pc, #608]	; (8006194 <Batt_Protection_when_charge+0x2a4>)
 8005f34:	f003 fbb7 	bl	80096a6 <HAL_GPIO_WritePin>
				    	  T_trip_cycle=T_trip_cycle-0.001;
				    	  T_I_Over_trip_cycle-=0.001;
				    	  if(T_trip_cycle<0) T_trip_cycle=0;
				    	  if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
				     }
}
 8005f38:	e3a8      	b.n	800668c <Batt_Protection_when_charge+0x79c>
					else if(SOC_Over_Set-Pack_SOC<=10 && flag_trip_SOCOverCharge==OFF)
 8005f3a:	4b97      	ldr	r3, [pc, #604]	; (8006198 <Batt_Protection_when_charge+0x2a8>)
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4b97      	ldr	r3, [pc, #604]	; (800619c <Batt_Protection_when_charge+0x2ac>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4619      	mov	r1, r3
 8005f44:	4610      	mov	r0, r2
 8005f46:	f7fa fdf3 	bl	8000b30 <__aeabi_fsub>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	4994      	ldr	r1, [pc, #592]	; (80061a0 <Batt_Protection_when_charge+0x2b0>)
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fb f8a0 	bl	8001094 <__aeabi_fcmple>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01d      	beq.n	8005f96 <Batt_Protection_when_charge+0xa6>
 8005f5a:	4b92      	ldr	r3, [pc, #584]	; (80061a4 <Batt_Protection_when_charge+0x2b4>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d119      	bne.n	8005f96 <Batt_Protection_when_charge+0xa6>
			  		  fault_code=7;
 8005f62:	4b8a      	ldr	r3, [pc, #552]	; (800618c <Batt_Protection_when_charge+0x29c>)
 8005f64:	2207      	movs	r2, #7
 8005f66:	701a      	strb	r2, [r3, #0]
			  		  if(Pack_SOC>SOC_Over_Set)
 8005f68:	4b8c      	ldr	r3, [pc, #560]	; (800619c <Batt_Protection_when_charge+0x2ac>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	4b8a      	ldr	r3, [pc, #552]	; (8006198 <Batt_Protection_when_charge+0x2a8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4619      	mov	r1, r3
 8005f72:	4610      	mov	r0, r2
 8005f74:	f7fb f8a2 	bl	80010bc <__aeabi_fcmpgt>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 8386 	beq.w	800668c <Batt_Protection_when_charge+0x79c>
			  				  Batt_Open_Mode();
 8005f80:	f7fb fa18 	bl	80013b4 <Batt_Open_Mode>
			  				  flag_trip_SOCOverCharge=ON;
 8005f84:	4b87      	ldr	r3, [pc, #540]	; (80061a4 <Batt_Protection_when_charge+0x2b4>)
 8005f86:	2201      	movs	r2, #1
 8005f88:	701a      	strb	r2, [r3, #0]
			  				  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	2104      	movs	r1, #4
 8005f8e:	4881      	ldr	r0, [pc, #516]	; (8006194 <Batt_Protection_when_charge+0x2a4>)
 8005f90:	f003 fb89 	bl	80096a6 <HAL_GPIO_WritePin>
			  		  if(Pack_SOC>SOC_Over_Set)
 8005f94:	e37a      	b.n	800668c <Batt_Protection_when_charge+0x79c>
			  		else if(((45-Suhu_T1<5)||(80-Suhu_T2<10)||(45-Suhu_T3<5)||(80-Suhu_T4<10)) && (flag_trip_overtemperature==OFF)) // Warning Over Temperature Charge 40 65 40 65
 8005f96:	4b84      	ldr	r3, [pc, #528]	; (80061a8 <Batt_Protection_when_charge+0x2b8>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4883      	ldr	r0, [pc, #524]	; (80061ac <Batt_Protection_when_charge+0x2bc>)
 8005f9e:	f7fa fdc7 	bl	8000b30 <__aeabi_fsub>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	4982      	ldr	r1, [pc, #520]	; (80061b0 <Batt_Protection_when_charge+0x2c0>)
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fb f86a 	bl	8001080 <__aeabi_fcmplt>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d129      	bne.n	8006006 <Batt_Protection_when_charge+0x116>
 8005fb2:	4b80      	ldr	r3, [pc, #512]	; (80061b4 <Batt_Protection_when_charge+0x2c4>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	487f      	ldr	r0, [pc, #508]	; (80061b8 <Batt_Protection_when_charge+0x2c8>)
 8005fba:	f7fa fdb9 	bl	8000b30 <__aeabi_fsub>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4977      	ldr	r1, [pc, #476]	; (80061a0 <Batt_Protection_when_charge+0x2b0>)
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fb f85c 	bl	8001080 <__aeabi_fcmplt>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d11b      	bne.n	8006006 <Batt_Protection_when_charge+0x116>
 8005fce:	4b7b      	ldr	r3, [pc, #492]	; (80061bc <Batt_Protection_when_charge+0x2cc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4875      	ldr	r0, [pc, #468]	; (80061ac <Batt_Protection_when_charge+0x2bc>)
 8005fd6:	f7fa fdab 	bl	8000b30 <__aeabi_fsub>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	4974      	ldr	r1, [pc, #464]	; (80061b0 <Batt_Protection_when_charge+0x2c0>)
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fb f84e 	bl	8001080 <__aeabi_fcmplt>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10d      	bne.n	8006006 <Batt_Protection_when_charge+0x116>
 8005fea:	4b75      	ldr	r3, [pc, #468]	; (80061c0 <Batt_Protection_when_charge+0x2d0>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4871      	ldr	r0, [pc, #452]	; (80061b8 <Batt_Protection_when_charge+0x2c8>)
 8005ff2:	f7fa fd9d 	bl	8000b30 <__aeabi_fsub>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4969      	ldr	r1, [pc, #420]	; (80061a0 <Batt_Protection_when_charge+0x2b0>)
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fb f840 	bl	8001080 <__aeabi_fcmplt>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d036      	beq.n	8006074 <Batt_Protection_when_charge+0x184>
 8006006:	4b6f      	ldr	r3, [pc, #444]	; (80061c4 <Batt_Protection_when_charge+0x2d4>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d132      	bne.n	8006074 <Batt_Protection_when_charge+0x184>
			  			  fault_code=8;
 800600e:	4b5f      	ldr	r3, [pc, #380]	; (800618c <Batt_Protection_when_charge+0x29c>)
 8006010:	2208      	movs	r2, #8
 8006012:	701a      	strb	r2, [r3, #0]
			  			  if((Suhu_T1>45)||(Suhu_T2>80)||(Suhu_T3>45)||(Suhu_T4>80))
 8006014:	4b64      	ldr	r3, [pc, #400]	; (80061a8 <Batt_Protection_when_charge+0x2b8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4964      	ldr	r1, [pc, #400]	; (80061ac <Batt_Protection_when_charge+0x2bc>)
 800601a:	4618      	mov	r0, r3
 800601c:	f7fb f84e 	bl	80010bc <__aeabi_fcmpgt>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d11b      	bne.n	800605e <Batt_Protection_when_charge+0x16e>
 8006026:	4b63      	ldr	r3, [pc, #396]	; (80061b4 <Batt_Protection_when_charge+0x2c4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4963      	ldr	r1, [pc, #396]	; (80061b8 <Batt_Protection_when_charge+0x2c8>)
 800602c:	4618      	mov	r0, r3
 800602e:	f7fb f845 	bl	80010bc <__aeabi_fcmpgt>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d112      	bne.n	800605e <Batt_Protection_when_charge+0x16e>
 8006038:	4b60      	ldr	r3, [pc, #384]	; (80061bc <Batt_Protection_when_charge+0x2cc>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	495b      	ldr	r1, [pc, #364]	; (80061ac <Batt_Protection_when_charge+0x2bc>)
 800603e:	4618      	mov	r0, r3
 8006040:	f7fb f83c 	bl	80010bc <__aeabi_fcmpgt>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d109      	bne.n	800605e <Batt_Protection_when_charge+0x16e>
 800604a:	4b5d      	ldr	r3, [pc, #372]	; (80061c0 <Batt_Protection_when_charge+0x2d0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	495a      	ldr	r1, [pc, #360]	; (80061b8 <Batt_Protection_when_charge+0x2c8>)
 8006050:	4618      	mov	r0, r3
 8006052:	f7fb f833 	bl	80010bc <__aeabi_fcmpgt>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d100      	bne.n	800605e <Batt_Protection_when_charge+0x16e>
 800605c:	e316      	b.n	800668c <Batt_Protection_when_charge+0x79c>
			  				  	  Batt_Open_Mode();
 800605e:	f7fb f9a9 	bl	80013b4 <Batt_Open_Mode>
			  				  	  flag_trip_overtemperature=ON;
 8006062:	4b58      	ldr	r3, [pc, #352]	; (80061c4 <Batt_Protection_when_charge+0x2d4>)
 8006064:	2201      	movs	r2, #1
 8006066:	701a      	strb	r2, [r3, #0]
			  				  	  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8006068:	2200      	movs	r2, #0
 800606a:	2104      	movs	r1, #4
 800606c:	4849      	ldr	r0, [pc, #292]	; (8006194 <Batt_Protection_when_charge+0x2a4>)
 800606e:	f003 fb1a 	bl	80096a6 <HAL_GPIO_WritePin>
			  			  if((Suhu_T1>45)||(Suhu_T2>80)||(Suhu_T3>45)||(Suhu_T4>80))
 8006072:	e30b      	b.n	800668c <Batt_Protection_when_charge+0x79c>
			  		else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF)
 8006074:	4b4c      	ldr	r3, [pc, #304]	; (80061a8 <Batt_Protection_when_charge+0x2b8>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4b53      	ldr	r3, [pc, #332]	; (80061c8 <Batt_Protection_when_charge+0x2d8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4619      	mov	r1, r3
 800607e:	4610      	mov	r0, r2
 8006080:	f7fa fd56 	bl	8000b30 <__aeabi_fsub>
 8006084:	4603      	mov	r3, r0
 8006086:	4946      	ldr	r1, [pc, #280]	; (80061a0 <Batt_Protection_when_charge+0x2b0>)
 8006088:	4618      	mov	r0, r3
 800608a:	f7fb f803 	bl	8001094 <__aeabi_fcmple>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d130      	bne.n	80060f6 <Batt_Protection_when_charge+0x206>
 8006094:	4b47      	ldr	r3, [pc, #284]	; (80061b4 <Batt_Protection_when_charge+0x2c4>)
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	4b4b      	ldr	r3, [pc, #300]	; (80061c8 <Batt_Protection_when_charge+0x2d8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4619      	mov	r1, r3
 800609e:	4610      	mov	r0, r2
 80060a0:	f7fa fd46 	bl	8000b30 <__aeabi_fsub>
 80060a4:	4603      	mov	r3, r0
 80060a6:	493e      	ldr	r1, [pc, #248]	; (80061a0 <Batt_Protection_when_charge+0x2b0>)
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fa fff3 	bl	8001094 <__aeabi_fcmple>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d120      	bne.n	80060f6 <Batt_Protection_when_charge+0x206>
 80060b4:	4b41      	ldr	r3, [pc, #260]	; (80061bc <Batt_Protection_when_charge+0x2cc>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	4b43      	ldr	r3, [pc, #268]	; (80061c8 <Batt_Protection_when_charge+0x2d8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4619      	mov	r1, r3
 80060be:	4610      	mov	r0, r2
 80060c0:	f7fa fd36 	bl	8000b30 <__aeabi_fsub>
 80060c4:	4603      	mov	r3, r0
 80060c6:	4936      	ldr	r1, [pc, #216]	; (80061a0 <Batt_Protection_when_charge+0x2b0>)
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fa ffe3 	bl	8001094 <__aeabi_fcmple>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d110      	bne.n	80060f6 <Batt_Protection_when_charge+0x206>
 80060d4:	4b3a      	ldr	r3, [pc, #232]	; (80061c0 <Batt_Protection_when_charge+0x2d0>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	4b3b      	ldr	r3, [pc, #236]	; (80061c8 <Batt_Protection_when_charge+0x2d8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f7fa fd26 	bl	8000b30 <__aeabi_fsub>
 80060e4:	4603      	mov	r3, r0
 80060e6:	492e      	ldr	r1, [pc, #184]	; (80061a0 <Batt_Protection_when_charge+0x2b0>)
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fa ffd3 	bl	8001094 <__aeabi_fcmple>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 812d 	beq.w	8006350 <Batt_Protection_when_charge+0x460>
 80060f6:	4b35      	ldr	r3, [pc, #212]	; (80061cc <Batt_Protection_when_charge+0x2dc>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f040 8128 	bne.w	8006350 <Batt_Protection_when_charge+0x460>
			  			  fault_code=9;
 8006100:	4b22      	ldr	r3, [pc, #136]	; (800618c <Batt_Protection_when_charge+0x29c>)
 8006102:	2209      	movs	r2, #9
 8006104:	701a      	strb	r2, [r3, #0]
			  			  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8006106:	4b30      	ldr	r3, [pc, #192]	; (80061c8 <Batt_Protection_when_charge+0x2d8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4925      	ldr	r1, [pc, #148]	; (80061a0 <Batt_Protection_when_charge+0x2b0>)
 800610c:	4618      	mov	r0, r3
 800610e:	f7fa fd11 	bl	8000b34 <__addsf3>
 8006112:	4603      	mov	r3, r0
 8006114:	461a      	mov	r2, r3
 8006116:	4b24      	ldr	r3, [pc, #144]	; (80061a8 <Batt_Protection_when_charge+0x2b8>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4619      	mov	r1, r3
 800611c:	4610      	mov	r0, r2
 800611e:	f7fa ffc3 	bl	80010a8 <__aeabi_fcmpge>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d057      	beq.n	80061d8 <Batt_Protection_when_charge+0x2e8>
 8006128:	4b27      	ldr	r3, [pc, #156]	; (80061c8 <Batt_Protection_when_charge+0x2d8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4920      	ldr	r1, [pc, #128]	; (80061b0 <Batt_Protection_when_charge+0x2c0>)
 800612e:	4618      	mov	r0, r3
 8006130:	f7fa fd00 	bl	8000b34 <__addsf3>
 8006134:	4603      	mov	r3, r0
 8006136:	461a      	mov	r2, r3
 8006138:	4b1b      	ldr	r3, [pc, #108]	; (80061a8 <Batt_Protection_when_charge+0x2b8>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f7fa ff9e 	bl	8001080 <__aeabi_fcmplt>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d046      	beq.n	80061d8 <Batt_Protection_when_charge+0x2e8>
			  				  if((test_tim2%1000)==0)
 800614a:	4b21      	ldr	r3, [pc, #132]	; (80061d0 <Batt_Protection_when_charge+0x2e0>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b21      	ldr	r3, [pc, #132]	; (80061d4 <Batt_Protection_when_charge+0x2e4>)
 8006150:	fb83 1302 	smull	r1, r3, r3, r2
 8006154:	1199      	asrs	r1, r3, #6
 8006156:	17d3      	asrs	r3, r2, #31
 8006158:	1acb      	subs	r3, r1, r3
 800615a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800615e:	fb01 f303 	mul.w	r3, r1, r3
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	f040 80dd 	bne.w	8006324 <Batt_Protection_when_charge+0x434>
			  					  BUZZ_Toggle;
 800616a:	2104      	movs	r1, #4
 800616c:	4809      	ldr	r0, [pc, #36]	; (8006194 <Batt_Protection_when_charge+0x2a4>)
 800616e:	f003 fab2 	bl	80096d6 <HAL_GPIO_TogglePin>
			  					  test_tim2=0;
 8006172:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <Batt_Protection_when_charge+0x2e0>)
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]
			  				  if((test_tim2%1000)==0)
 8006178:	e0d4      	b.n	8006324 <Batt_Protection_when_charge+0x434>
 800617a:	bf00      	nop
 800617c:	200010b0 	.word	0x200010b0
 8006180:	20001094 	.word	0x20001094
 8006184:	200010a4 	.word	0x200010a4
 8006188:	200010d4 	.word	0x200010d4
 800618c:	200010c0 	.word	0x200010c0
 8006190:	20000c8a 	.word	0x20000c8a
 8006194:	40011000 	.word	0x40011000
 8006198:	2000006c 	.word	0x2000006c
 800619c:	20000be4 	.word	0x20000be4
 80061a0:	41200000 	.word	0x41200000
 80061a4:	20000c89 	.word	0x20000c89
 80061a8:	200010c4 	.word	0x200010c4
 80061ac:	42340000 	.word	0x42340000
 80061b0:	40a00000 	.word	0x40a00000
 80061b4:	20001500 	.word	0x20001500
 80061b8:	42a00000 	.word	0x42a00000
 80061bc:	20001098 	.word	0x20001098
 80061c0:	200010f8 	.word	0x200010f8
 80061c4:	20001090 	.word	0x20001090
 80061c8:	20000064 	.word	0x20000064
 80061cc:	200010b8 	.word	0x200010b8
 80061d0:	20000bdc 	.word	0x20000bdc
 80061d4:	10624dd3 	.word	0x10624dd3
			  			  else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2)
 80061d8:	4b53      	ldr	r3, [pc, #332]	; (8006328 <Batt_Protection_when_charge+0x438>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4953      	ldr	r1, [pc, #332]	; (800632c <Batt_Protection_when_charge+0x43c>)
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fa fca8 	bl	8000b34 <__addsf3>
 80061e4:	4603      	mov	r3, r0
 80061e6:	461a      	mov	r2, r3
 80061e8:	4b51      	ldr	r3, [pc, #324]	; (8006330 <Batt_Protection_when_charge+0x440>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f7fa ff5a 	bl	80010a8 <__aeabi_fcmpge>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d028      	beq.n	800624c <Batt_Protection_when_charge+0x35c>
 80061fa:	4b4b      	ldr	r3, [pc, #300]	; (8006328 <Batt_Protection_when_charge+0x438>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006202:	4618      	mov	r0, r3
 8006204:	f7fa fc96 	bl	8000b34 <__addsf3>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	4b48      	ldr	r3, [pc, #288]	; (8006330 <Batt_Protection_when_charge+0x440>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4619      	mov	r1, r3
 8006212:	4610      	mov	r0, r2
 8006214:	f7fa ff34 	bl	8001080 <__aeabi_fcmplt>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d016      	beq.n	800624c <Batt_Protection_when_charge+0x35c>
			  				  if((test_tim2%500)==0)
 800621e:	4b45      	ldr	r3, [pc, #276]	; (8006334 <Batt_Protection_when_charge+0x444>)
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	4b45      	ldr	r3, [pc, #276]	; (8006338 <Batt_Protection_when_charge+0x448>)
 8006224:	fb83 1302 	smull	r1, r3, r3, r2
 8006228:	1159      	asrs	r1, r3, #5
 800622a:	17d3      	asrs	r3, r2, #31
 800622c:	1acb      	subs	r3, r1, r3
 800622e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006232:	fb01 f303 	mul.w	r3, r1, r3
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d173      	bne.n	8006324 <Batt_Protection_when_charge+0x434>
			  					  BUZZ_Toggle;
 800623c:	2104      	movs	r1, #4
 800623e:	483f      	ldr	r0, [pc, #252]	; (800633c <Batt_Protection_when_charge+0x44c>)
 8006240:	f003 fa49 	bl	80096d6 <HAL_GPIO_TogglePin>
			  					  test_tim2=0;
 8006244:	4b3b      	ldr	r3, [pc, #236]	; (8006334 <Batt_Protection_when_charge+0x444>)
 8006246:	2200      	movs	r2, #0
 8006248:	601a      	str	r2, [r3, #0]
			  				  if((test_tim2%500)==0)
 800624a:	e06b      	b.n	8006324 <Batt_Protection_when_charge+0x434>
			  			  else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set)
 800624c:	4b36      	ldr	r3, [pc, #216]	; (8006328 <Batt_Protection_when_charge+0x438>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006254:	4618      	mov	r0, r3
 8006256:	f7fa fc6d 	bl	8000b34 <__addsf3>
 800625a:	4603      	mov	r3, r0
 800625c:	461a      	mov	r2, r3
 800625e:	4b34      	ldr	r3, [pc, #208]	; (8006330 <Batt_Protection_when_charge+0x440>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4619      	mov	r1, r3
 8006264:	4610      	mov	r0, r2
 8006266:	f7fa ff29 	bl	80010bc <__aeabi_fcmpgt>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d021      	beq.n	80062b4 <Batt_Protection_when_charge+0x3c4>
 8006270:	4b2f      	ldr	r3, [pc, #188]	; (8006330 <Batt_Protection_when_charge+0x440>)
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	4b2c      	ldr	r3, [pc, #176]	; (8006328 <Batt_Protection_when_charge+0x438>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4619      	mov	r1, r3
 800627a:	4610      	mov	r0, r2
 800627c:	f7fa ff14 	bl	80010a8 <__aeabi_fcmpge>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d016      	beq.n	80062b4 <Batt_Protection_when_charge+0x3c4>
			  				  if((test_tim2%500)==0)
 8006286:	4b2b      	ldr	r3, [pc, #172]	; (8006334 <Batt_Protection_when_charge+0x444>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	4b2b      	ldr	r3, [pc, #172]	; (8006338 <Batt_Protection_when_charge+0x448>)
 800628c:	fb83 1302 	smull	r1, r3, r3, r2
 8006290:	1159      	asrs	r1, r3, #5
 8006292:	17d3      	asrs	r3, r2, #31
 8006294:	1acb      	subs	r3, r1, r3
 8006296:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800629a:	fb01 f303 	mul.w	r3, r1, r3
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d13f      	bne.n	8006324 <Batt_Protection_when_charge+0x434>
			  					  BUZZ_Toggle;
 80062a4:	2104      	movs	r1, #4
 80062a6:	4825      	ldr	r0, [pc, #148]	; (800633c <Batt_Protection_when_charge+0x44c>)
 80062a8:	f003 fa15 	bl	80096d6 <HAL_GPIO_TogglePin>
			  					  test_tim2=0;
 80062ac:	4b21      	ldr	r3, [pc, #132]	; (8006334 <Batt_Protection_when_charge+0x444>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
			  				  if((test_tim2%500)==0)
 80062b2:	e037      	b.n	8006324 <Batt_Protection_when_charge+0x434>
			  			  else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set)
 80062b4:	4b1e      	ldr	r3, [pc, #120]	; (8006330 <Batt_Protection_when_charge+0x440>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <Batt_Protection_when_charge+0x438>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4619      	mov	r1, r3
 80062be:	4610      	mov	r0, r2
 80062c0:	f7fa fede 	bl	8001080 <__aeabi_fcmplt>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d121      	bne.n	800630e <Batt_Protection_when_charge+0x41e>
 80062ca:	4b1d      	ldr	r3, [pc, #116]	; (8006340 <Batt_Protection_when_charge+0x450>)
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	4b16      	ldr	r3, [pc, #88]	; (8006328 <Batt_Protection_when_charge+0x438>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4619      	mov	r1, r3
 80062d4:	4610      	mov	r0, r2
 80062d6:	f7fa fed3 	bl	8001080 <__aeabi_fcmplt>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d116      	bne.n	800630e <Batt_Protection_when_charge+0x41e>
 80062e0:	4b18      	ldr	r3, [pc, #96]	; (8006344 <Batt_Protection_when_charge+0x454>)
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	4b10      	ldr	r3, [pc, #64]	; (8006328 <Batt_Protection_when_charge+0x438>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	f7fa fec8 	bl	8001080 <__aeabi_fcmplt>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10b      	bne.n	800630e <Batt_Protection_when_charge+0x41e>
 80062f6:	4b14      	ldr	r3, [pc, #80]	; (8006348 <Batt_Protection_when_charge+0x458>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b0b      	ldr	r3, [pc, #44]	; (8006328 <Batt_Protection_when_charge+0x438>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4619      	mov	r1, r3
 8006300:	4610      	mov	r0, r2
 8006302:	f7fa febd 	bl	8001080 <__aeabi_fcmplt>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d100      	bne.n	800630e <Batt_Protection_when_charge+0x41e>
			  			  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 800630c:	e1be      	b.n	800668c <Batt_Protection_when_charge+0x79c>
			  				  Batt_Open_Mode();
 800630e:	f7fb f851 	bl	80013b4 <Batt_Open_Mode>
			  				  flag_trip_undertemperature=ON;
 8006312:	4b0e      	ldr	r3, [pc, #56]	; (800634c <Batt_Protection_when_charge+0x45c>)
 8006314:	2201      	movs	r2, #1
 8006316:	701a      	strb	r2, [r3, #0]
			  				  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8006318:	2200      	movs	r2, #0
 800631a:	2104      	movs	r1, #4
 800631c:	4807      	ldr	r0, [pc, #28]	; (800633c <Batt_Protection_when_charge+0x44c>)
 800631e:	f003 f9c2 	bl	80096a6 <HAL_GPIO_WritePin>
			  			  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8006322:	e1b3      	b.n	800668c <Batt_Protection_when_charge+0x79c>
 8006324:	e1b2      	b.n	800668c <Batt_Protection_when_charge+0x79c>
 8006326:	bf00      	nop
 8006328:	20000064 	.word	0x20000064
 800632c:	40a00000 	.word	0x40a00000
 8006330:	200010c4 	.word	0x200010c4
 8006334:	20000bdc 	.word	0x20000bdc
 8006338:	10624dd3 	.word	0x10624dd3
 800633c:	40011000 	.word	0x40011000
 8006340:	20001500 	.word	0x20001500
 8006344:	20001098 	.word	0x20001098
 8006348:	200010f8 	.word	0x200010f8
 800634c:	200010b8 	.word	0x200010b8
			  		else if((fabs(IBATT)-I_Over_Set_Charge)>0 && flag_trip_overcurrentcharge==OFF)   //Indikasi terjadi Over Current
 8006350:	4bb7      	ldr	r3, [pc, #732]	; (8006630 <Batt_Protection_when_charge+0x740>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006358:	4618      	mov	r0, r3
 800635a:	f7fa f865 	bl	8000428 <__aeabi_f2d>
 800635e:	4604      	mov	r4, r0
 8006360:	460d      	mov	r5, r1
 8006362:	4bb4      	ldr	r3, [pc, #720]	; (8006634 <Batt_Protection_when_charge+0x744>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4618      	mov	r0, r3
 8006368:	f7fa f85e 	bl	8000428 <__aeabi_f2d>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4620      	mov	r0, r4
 8006372:	4629      	mov	r1, r5
 8006374:	f7f9 fef8 	bl	8000168 <__aeabi_dsub>
 8006378:	4603      	mov	r3, r0
 800637a:	460c      	mov	r4, r1
 800637c:	4618      	mov	r0, r3
 800637e:	4621      	mov	r1, r4
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	f7fa fb36 	bl	80009f8 <__aeabi_dcmpgt>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 80dd 	beq.w	800654e <Batt_Protection_when_charge+0x65e>
 8006394:	4ba8      	ldr	r3, [pc, #672]	; (8006638 <Batt_Protection_when_charge+0x748>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f040 80d8 	bne.w	800654e <Batt_Protection_when_charge+0x65e>
				    	fault_code=10;
 800639e:	4ba7      	ldr	r3, [pc, #668]	; (800663c <Batt_Protection_when_charge+0x74c>)
 80063a0:	220a      	movs	r2, #10
 80063a2:	701a      	strb	r2, [r3, #0]
				    	T_I_Over_trip=14.5/(((IBATT/6.9)*(IBATT/6.9))-1);
 80063a4:	4ba2      	ldr	r3, [pc, #648]	; (8006630 <Batt_Protection_when_charge+0x740>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fa f83d 	bl	8000428 <__aeabi_f2d>
 80063ae:	a39c      	add	r3, pc, #624	; (adr r3, 8006620 <Batt_Protection_when_charge+0x730>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	f7fa f9ba 	bl	800072c <__aeabi_ddiv>
 80063b8:	4603      	mov	r3, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	4625      	mov	r5, r4
 80063be:	461c      	mov	r4, r3
 80063c0:	4b9b      	ldr	r3, [pc, #620]	; (8006630 <Batt_Protection_when_charge+0x740>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fa f82f 	bl	8000428 <__aeabi_f2d>
 80063ca:	a395      	add	r3, pc, #596	; (adr r3, 8006620 <Batt_Protection_when_charge+0x730>)
 80063cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d0:	f7fa f9ac 	bl	800072c <__aeabi_ddiv>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4620      	mov	r0, r4
 80063da:	4629      	mov	r1, r5
 80063dc:	f7fa f87c 	bl	80004d8 <__aeabi_dmul>
 80063e0:	4603      	mov	r3, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	4618      	mov	r0, r3
 80063e6:	4621      	mov	r1, r4
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	4b94      	ldr	r3, [pc, #592]	; (8006640 <Batt_Protection_when_charge+0x750>)
 80063ee:	f7f9 febb 	bl	8000168 <__aeabi_dsub>
 80063f2:	4603      	mov	r3, r0
 80063f4:	460c      	mov	r4, r1
 80063f6:	461a      	mov	r2, r3
 80063f8:	4623      	mov	r3, r4
 80063fa:	f04f 0000 	mov.w	r0, #0
 80063fe:	4991      	ldr	r1, [pc, #580]	; (8006644 <Batt_Protection_when_charge+0x754>)
 8006400:	f7fa f994 	bl	800072c <__aeabi_ddiv>
 8006404:	4603      	mov	r3, r0
 8006406:	460c      	mov	r4, r1
 8006408:	4618      	mov	r0, r3
 800640a:	4621      	mov	r1, r4
 800640c:	f7fa fb3c 	bl	8000a88 <__aeabi_d2f>
 8006410:	4602      	mov	r2, r0
 8006412:	4b8d      	ldr	r3, [pc, #564]	; (8006648 <Batt_Protection_when_charge+0x758>)
 8006414:	601a      	str	r2, [r3, #0]
				    	T_I_Over_trip_cycle+=0.001;
 8006416:	4b8d      	ldr	r3, [pc, #564]	; (800664c <Batt_Protection_when_charge+0x75c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	f7fa f804 	bl	8000428 <__aeabi_f2d>
 8006420:	a381      	add	r3, pc, #516	; (adr r3, 8006628 <Batt_Protection_when_charge+0x738>)
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	f7f9 fea1 	bl	800016c <__adddf3>
 800642a:	4603      	mov	r3, r0
 800642c:	460c      	mov	r4, r1
 800642e:	4618      	mov	r0, r3
 8006430:	4621      	mov	r1, r4
 8006432:	f7fa fb29 	bl	8000a88 <__aeabi_d2f>
 8006436:	4602      	mov	r2, r0
 8006438:	4b84      	ldr	r3, [pc, #528]	; (800664c <Batt_Protection_when_charge+0x75c>)
 800643a:	601a      	str	r2, [r3, #0]
	    		  		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentcharge==OFF)
 800643c:	4b83      	ldr	r3, [pc, #524]	; (800664c <Batt_Protection_when_charge+0x75c>)
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	4b81      	ldr	r3, [pc, #516]	; (8006648 <Batt_Protection_when_charge+0x758>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4619      	mov	r1, r3
 8006446:	4610      	mov	r0, r2
 8006448:	f7fa fe38 	bl	80010bc <__aeabi_fcmpgt>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d011      	beq.n	8006476 <Batt_Protection_when_charge+0x586>
 8006452:	4b79      	ldr	r3, [pc, #484]	; (8006638 <Batt_Protection_when_charge+0x748>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10d      	bne.n	8006476 <Batt_Protection_when_charge+0x586>
	    		  			Batt_Open_Mode();
 800645a:	f7fa ffab 	bl	80013b4 <Batt_Open_Mode>
	    		  			T_I_Over_trip_cycle=T_I_Over_trip;
 800645e:	4b7a      	ldr	r3, [pc, #488]	; (8006648 <Batt_Protection_when_charge+0x758>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a7a      	ldr	r2, [pc, #488]	; (800664c <Batt_Protection_when_charge+0x75c>)
 8006464:	6013      	str	r3, [r2, #0]
	    		  			flag_trip_overcurrentcharge=ON;
 8006466:	4b74      	ldr	r3, [pc, #464]	; (8006638 <Batt_Protection_when_charge+0x748>)
 8006468:	2201      	movs	r2, #1
 800646a:	701a      	strb	r2, [r3, #0]
	    		  			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 800646c:	2200      	movs	r2, #0
 800646e:	2104      	movs	r1, #4
 8006470:	4877      	ldr	r0, [pc, #476]	; (8006650 <Batt_Protection_when_charge+0x760>)
 8006472:	f003 f918 	bl	80096a6 <HAL_GPIO_WritePin>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 8006476:	4b70      	ldr	r3, [pc, #448]	; (8006638 <Batt_Protection_when_charge+0x748>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f040 8105 	bne.w	800668a <Batt_Protection_when_charge+0x79a>
				    		if(T_I_Over_trip-T_I_Over_trip_cycle>15)
 8006480:	4b71      	ldr	r3, [pc, #452]	; (8006648 <Batt_Protection_when_charge+0x758>)
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	4b71      	ldr	r3, [pc, #452]	; (800664c <Batt_Protection_when_charge+0x75c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4619      	mov	r1, r3
 800648a:	4610      	mov	r0, r2
 800648c:	f7fa fb50 	bl	8000b30 <__aeabi_fsub>
 8006490:	4603      	mov	r3, r0
 8006492:	4970      	ldr	r1, [pc, #448]	; (8006654 <Batt_Protection_when_charge+0x764>)
 8006494:	4618      	mov	r0, r3
 8006496:	f7fa fe11 	bl	80010bc <__aeabi_fcmpgt>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d017      	beq.n	80064d0 <Batt_Protection_when_charge+0x5e0>
				    			if((test_tim2%1000)==0)
 80064a0:	4b6d      	ldr	r3, [pc, #436]	; (8006658 <Batt_Protection_when_charge+0x768>)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	4b6d      	ldr	r3, [pc, #436]	; (800665c <Batt_Protection_when_charge+0x76c>)
 80064a6:	fb83 1302 	smull	r1, r3, r3, r2
 80064aa:	1199      	asrs	r1, r3, #6
 80064ac:	17d3      	asrs	r3, r2, #31
 80064ae:	1acb      	subs	r3, r1, r3
 80064b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f040 80e5 	bne.w	800668a <Batt_Protection_when_charge+0x79a>
				    				BUZZ_Toggle;
 80064c0:	2104      	movs	r1, #4
 80064c2:	4863      	ldr	r0, [pc, #396]	; (8006650 <Batt_Protection_when_charge+0x760>)
 80064c4:	f003 f907 	bl	80096d6 <HAL_GPIO_TogglePin>
				    				test_tim2=0;
 80064c8:	4b63      	ldr	r3, [pc, #396]	; (8006658 <Batt_Protection_when_charge+0x768>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]
	    		  		if(flag_trip_overcurrentcharge==OFF)
 80064ce:	e0dc      	b.n	800668a <Batt_Protection_when_charge+0x79a>
				    		else if(T_I_Over_trip-T_I_Over_trip_cycle>10)
 80064d0:	4b5d      	ldr	r3, [pc, #372]	; (8006648 <Batt_Protection_when_charge+0x758>)
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	4b5d      	ldr	r3, [pc, #372]	; (800664c <Batt_Protection_when_charge+0x75c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4619      	mov	r1, r3
 80064da:	4610      	mov	r0, r2
 80064dc:	f7fa fb28 	bl	8000b30 <__aeabi_fsub>
 80064e0:	4603      	mov	r3, r0
 80064e2:	495f      	ldr	r1, [pc, #380]	; (8006660 <Batt_Protection_when_charge+0x770>)
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fa fde9 	bl	80010bc <__aeabi_fcmpgt>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d016      	beq.n	800651e <Batt_Protection_when_charge+0x62e>
				    			if((test_tim2%100)==0)
 80064f0:	4b59      	ldr	r3, [pc, #356]	; (8006658 <Batt_Protection_when_charge+0x768>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	4b5b      	ldr	r3, [pc, #364]	; (8006664 <Batt_Protection_when_charge+0x774>)
 80064f6:	fb83 1302 	smull	r1, r3, r3, r2
 80064fa:	1159      	asrs	r1, r3, #5
 80064fc:	17d3      	asrs	r3, r2, #31
 80064fe:	1acb      	subs	r3, r1, r3
 8006500:	2164      	movs	r1, #100	; 0x64
 8006502:	fb01 f303 	mul.w	r3, r1, r3
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	f040 80be 	bne.w	800668a <Batt_Protection_when_charge+0x79a>
				    				BUZZ_Toggle;
 800650e:	2104      	movs	r1, #4
 8006510:	484f      	ldr	r0, [pc, #316]	; (8006650 <Batt_Protection_when_charge+0x760>)
 8006512:	f003 f8e0 	bl	80096d6 <HAL_GPIO_TogglePin>
				    				test_tim2=0;
 8006516:	4b50      	ldr	r3, [pc, #320]	; (8006658 <Batt_Protection_when_charge+0x768>)
 8006518:	2200      	movs	r2, #0
 800651a:	601a      	str	r2, [r3, #0]
	    		  		if(flag_trip_overcurrentcharge==OFF)
 800651c:	e0b5      	b.n	800668a <Batt_Protection_when_charge+0x79a>
				    		else if(T_I_Over_trip-T_I_Over_trip_cycle>1)
 800651e:	4b4a      	ldr	r3, [pc, #296]	; (8006648 <Batt_Protection_when_charge+0x758>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	4b4a      	ldr	r3, [pc, #296]	; (800664c <Batt_Protection_when_charge+0x75c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4619      	mov	r1, r3
 8006528:	4610      	mov	r0, r2
 800652a:	f7fa fb01 	bl	8000b30 <__aeabi_fsub>
 800652e:	4603      	mov	r3, r0
 8006530:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006534:	4618      	mov	r0, r3
 8006536:	f7fa fdc1 	bl	80010bc <__aeabi_fcmpgt>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d100      	bne.n	8006542 <Batt_Protection_when_charge+0x652>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 8006540:	e0a3      	b.n	800668a <Batt_Protection_when_charge+0x79a>
				    			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 8006542:	2201      	movs	r2, #1
 8006544:	2104      	movs	r1, #4
 8006546:	4842      	ldr	r0, [pc, #264]	; (8006650 <Batt_Protection_when_charge+0x760>)
 8006548:	f003 f8ad 	bl	80096a6 <HAL_GPIO_WritePin>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 800654c:	e09d      	b.n	800668a <Batt_Protection_when_charge+0x79a>
			  		else if(VBATT>V_Over_Set)
 800654e:	4b46      	ldr	r3, [pc, #280]	; (8006668 <Batt_Protection_when_charge+0x778>)
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b46      	ldr	r3, [pc, #280]	; (800666c <Batt_Protection_when_charge+0x77c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4619      	mov	r1, r3
 8006558:	4610      	mov	r0, r2
 800655a:	f7fa fdaf 	bl	80010bc <__aeabi_fcmpgt>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d008      	beq.n	8006576 <Batt_Protection_when_charge+0x686>
			  			fault_code=11;
 8006564:	4b35      	ldr	r3, [pc, #212]	; (800663c <Batt_Protection_when_charge+0x74c>)
 8006566:	220b      	movs	r2, #11
 8006568:	701a      	strb	r2, [r3, #0]
			  			flag_trip_overvoltage=ON;
 800656a:	4b41      	ldr	r3, [pc, #260]	; (8006670 <Batt_Protection_when_charge+0x780>)
 800656c:	2201      	movs	r2, #1
 800656e:	701a      	strb	r2, [r3, #0]
			  			Batt_Open_Mode();
 8006570:	f7fa ff20 	bl	80013b4 <Batt_Open_Mode>
}
 8006574:	e08a      	b.n	800668c <Batt_Protection_when_charge+0x79c>
				    	  if(fault_code!=0) last_fault_code=fault_code;
 8006576:	4b31      	ldr	r3, [pc, #196]	; (800663c <Batt_Protection_when_charge+0x74c>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <Batt_Protection_when_charge+0x696>
 800657e:	4b2f      	ldr	r3, [pc, #188]	; (800663c <Batt_Protection_when_charge+0x74c>)
 8006580:	781a      	ldrb	r2, [r3, #0]
 8006582:	4b3c      	ldr	r3, [pc, #240]	; (8006674 <Batt_Protection_when_charge+0x784>)
 8006584:	701a      	strb	r2, [r3, #0]
				    	  fault_code=0;
 8006586:	4b2d      	ldr	r3, [pc, #180]	; (800663c <Batt_Protection_when_charge+0x74c>)
 8006588:	2200      	movs	r2, #0
 800658a:	701a      	strb	r2, [r3, #0]
				    	  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 800658c:	2200      	movs	r2, #0
 800658e:	2104      	movs	r1, #4
 8006590:	482f      	ldr	r0, [pc, #188]	; (8006650 <Batt_Protection_when_charge+0x760>)
 8006592:	f003 f888 	bl	80096a6 <HAL_GPIO_WritePin>
				    	  T_Under_trip=0;
 8006596:	4b38      	ldr	r3, [pc, #224]	; (8006678 <Batt_Protection_when_charge+0x788>)
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	601a      	str	r2, [r3, #0]
				    	  T_trip_cycle=T_trip_cycle-0.001;
 800659e:	4b37      	ldr	r3, [pc, #220]	; (800667c <Batt_Protection_when_charge+0x78c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7f9 ff40 	bl	8000428 <__aeabi_f2d>
 80065a8:	a31f      	add	r3, pc, #124	; (adr r3, 8006628 <Batt_Protection_when_charge+0x738>)
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	f7f9 fddb 	bl	8000168 <__aeabi_dsub>
 80065b2:	4603      	mov	r3, r0
 80065b4:	460c      	mov	r4, r1
 80065b6:	4618      	mov	r0, r3
 80065b8:	4621      	mov	r1, r4
 80065ba:	f7fa fa65 	bl	8000a88 <__aeabi_d2f>
 80065be:	4602      	mov	r2, r0
 80065c0:	4b2e      	ldr	r3, [pc, #184]	; (800667c <Batt_Protection_when_charge+0x78c>)
 80065c2:	601a      	str	r2, [r3, #0]
				    	  T_I_Over_trip_cycle-=0.001;
 80065c4:	4b21      	ldr	r3, [pc, #132]	; (800664c <Batt_Protection_when_charge+0x75c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7f9 ff2d 	bl	8000428 <__aeabi_f2d>
 80065ce:	a316      	add	r3, pc, #88	; (adr r3, 8006628 <Batt_Protection_when_charge+0x738>)
 80065d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d4:	f7f9 fdc8 	bl	8000168 <__aeabi_dsub>
 80065d8:	4603      	mov	r3, r0
 80065da:	460c      	mov	r4, r1
 80065dc:	4618      	mov	r0, r3
 80065de:	4621      	mov	r1, r4
 80065e0:	f7fa fa52 	bl	8000a88 <__aeabi_d2f>
 80065e4:	4602      	mov	r2, r0
 80065e6:	4b19      	ldr	r3, [pc, #100]	; (800664c <Batt_Protection_when_charge+0x75c>)
 80065e8:	601a      	str	r2, [r3, #0]
				    	  if(T_trip_cycle<0) T_trip_cycle=0;
 80065ea:	4b24      	ldr	r3, [pc, #144]	; (800667c <Batt_Protection_when_charge+0x78c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f04f 0100 	mov.w	r1, #0
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fa fd44 	bl	8001080 <__aeabi_fcmplt>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <Batt_Protection_when_charge+0x716>
 80065fe:	4b1f      	ldr	r3, [pc, #124]	; (800667c <Batt_Protection_when_charge+0x78c>)
 8006600:	f04f 0200 	mov.w	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
				    	  if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 8006606:	4b11      	ldr	r3, [pc, #68]	; (800664c <Batt_Protection_when_charge+0x75c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f04f 0100 	mov.w	r1, #0
 800660e:	4618      	mov	r0, r3
 8006610:	f7fa fd36 	bl	8001080 <__aeabi_fcmplt>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d132      	bne.n	8006680 <Batt_Protection_when_charge+0x790>
}
 800661a:	e037      	b.n	800668c <Batt_Protection_when_charge+0x79c>
 800661c:	f3af 8000 	nop.w
 8006620:	9999999a 	.word	0x9999999a
 8006624:	401b9999 	.word	0x401b9999
 8006628:	d2f1a9fc 	.word	0xd2f1a9fc
 800662c:	3f50624d 	.word	0x3f50624d
 8006630:	200010b0 	.word	0x200010b0
 8006634:	2000005c 	.word	0x2000005c
 8006638:	200010e4 	.word	0x200010e4
 800663c:	200010c0 	.word	0x200010c0
 8006640:	3ff00000 	.word	0x3ff00000
 8006644:	402d0000 	.word	0x402d0000
 8006648:	2000107c 	.word	0x2000107c
 800664c:	200010fc 	.word	0x200010fc
 8006650:	40011000 	.word	0x40011000
 8006654:	41700000 	.word	0x41700000
 8006658:	20000bdc 	.word	0x20000bdc
 800665c:	10624dd3 	.word	0x10624dd3
 8006660:	41200000 	.word	0x41200000
 8006664:	51eb851f 	.word	0x51eb851f
 8006668:	20001094 	.word	0x20001094
 800666c:	20000074 	.word	0x20000074
 8006670:	200014fd 	.word	0x200014fd
 8006674:	200014fc 	.word	0x200014fc
 8006678:	20001080 	.word	0x20001080
 800667c:	200010cc 	.word	0x200010cc
				    	  if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 8006680:	4b03      	ldr	r3, [pc, #12]	; (8006690 <Batt_Protection_when_charge+0x7a0>)
 8006682:	f04f 0200 	mov.w	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
}
 8006688:	e000      	b.n	800668c <Batt_Protection_when_charge+0x79c>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 800668a:	bf00      	nop
}
 800668c:	bf00      	nop
 800668e:	bdb0      	pop	{r4, r5, r7, pc}
 8006690:	200010fc 	.word	0x200010fc
 8006694:	00000000 	.word	0x00000000

08006698 <Batt_Protection_when_chargedischarge>:

void Batt_Protection_when_chargedischarge(void)
{
 8006698:	b5b0      	push	{r4, r5, r7, lr}
 800669a:	af00      	add	r7, sp, #0
	// Short circuit protection
	if(IBATT > (VBATT/0.9)) {
 800669c:	4b82      	ldr	r3, [pc, #520]	; (80068a8 <Batt_Protection_when_chargedischarge+0x210>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7f9 fec1 	bl	8000428 <__aeabi_f2d>
 80066a6:	4604      	mov	r4, r0
 80066a8:	460d      	mov	r5, r1
 80066aa:	4b80      	ldr	r3, [pc, #512]	; (80068ac <Batt_Protection_when_chargedischarge+0x214>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7f9 feba 	bl	8000428 <__aeabi_f2d>
 80066b4:	a378      	add	r3, pc, #480	; (adr r3, 8006898 <Batt_Protection_when_chargedischarge+0x200>)
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f7fa f837 	bl	800072c <__aeabi_ddiv>
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	4620      	mov	r0, r4
 80066c4:	4629      	mov	r1, r5
 80066c6:	f7fa f997 	bl	80009f8 <__aeabi_dcmpgt>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d016      	beq.n	80066fe <Batt_Protection_when_chargedischarge+0x66>
		Isc=IBATT;
 80066d0:	4b75      	ldr	r3, [pc, #468]	; (80068a8 <Batt_Protection_when_chargedischarge+0x210>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a76      	ldr	r2, [pc, #472]	; (80068b0 <Batt_Protection_when_chargedischarge+0x218>)
 80066d6:	6013      	str	r3, [r2, #0]
		Vsc=VBATT;
 80066d8:	4b74      	ldr	r3, [pc, #464]	; (80068ac <Batt_Protection_when_chargedischarge+0x214>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a75      	ldr	r2, [pc, #468]	; (80068b4 <Batt_Protection_when_chargedischarge+0x21c>)
 80066de:	6013      	str	r3, [r2, #0]
		fault_code=12;
 80066e0:	4b75      	ldr	r3, [pc, #468]	; (80068b8 <Batt_Protection_when_chargedischarge+0x220>)
 80066e2:	220c      	movs	r2, #12
 80066e4:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 80066e6:	f7fa fe65 	bl	80013b4 <Batt_Open_Mode>
		flag_trip_shortcircuit=ON;
 80066ea:	4b74      	ldr	r3, [pc, #464]	; (80068bc <Batt_Protection_when_chargedischarge+0x224>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80066f0:	2200      	movs	r2, #0
 80066f2:	2104      	movs	r1, #4
 80066f4:	4872      	ldr	r0, [pc, #456]	; (80068c0 <Batt_Protection_when_chargedischarge+0x228>)
 80066f6:	f002 ffd6 	bl	80096a6 <HAL_GPIO_WritePin>
		  T_I_Over_trip_cycle=0;
	}



}
 80066fa:	f000 bddd 	b.w	80072b8 <Batt_Protection_when_chargedischarge+0xc20>
	else if(VBATT < V_Under_Set && flag_trip_undervoltage == OFF ) { //Indikasi terjadi Undervoltage
 80066fe:	4b6b      	ldr	r3, [pc, #428]	; (80068ac <Batt_Protection_when_chargedischarge+0x214>)
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	4b70      	ldr	r3, [pc, #448]	; (80068c4 <Batt_Protection_when_chargedischarge+0x22c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7fa fcb9 	bl	8001080 <__aeabi_fcmplt>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 80eb 	beq.w	80068ec <Batt_Protection_when_chargedischarge+0x254>
 8006716:	4b6c      	ldr	r3, [pc, #432]	; (80068c8 <Batt_Protection_when_chargedischarge+0x230>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f040 80e6 	bne.w	80068ec <Batt_Protection_when_chargedischarge+0x254>
		fault_code=1;
 8006720:	4b65      	ldr	r3, [pc, #404]	; (80068b8 <Batt_Protection_when_chargedischarge+0x220>)
 8006722:	2201      	movs	r2, #1
 8006724:	701a      	strb	r2, [r3, #0]
		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 8006726:	4b69      	ldr	r3, [pc, #420]	; (80068cc <Batt_Protection_when_chargedischarge+0x234>)
 8006728:	681c      	ldr	r4, [r3, #0]
 800672a:	4b60      	ldr	r3, [pc, #384]	; (80068ac <Batt_Protection_when_chargedischarge+0x214>)
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	4b65      	ldr	r3, [pc, #404]	; (80068c4 <Batt_Protection_when_chargedischarge+0x22c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	f7fa fbb9 	bl	8000eac <__aeabi_fdiv>
 800673a:	4603      	mov	r3, r0
 800673c:	4619      	mov	r1, r3
 800673e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006742:	f7fa f9f5 	bl	8000b30 <__aeabi_fsub>
 8006746:	4603      	mov	r3, r0
 8006748:	4619      	mov	r1, r3
 800674a:	4620      	mov	r0, r4
 800674c:	f7fa fbae 	bl	8000eac <__aeabi_fdiv>
 8006750:	4603      	mov	r3, r0
 8006752:	461a      	mov	r2, r3
 8006754:	4b5e      	ldr	r3, [pc, #376]	; (80068d0 <Batt_Protection_when_chargedischarge+0x238>)
 8006756:	601a      	str	r2, [r3, #0]
		T_trip_cycle+=0.001;
 8006758:	4b5e      	ldr	r3, [pc, #376]	; (80068d4 <Batt_Protection_when_chargedischarge+0x23c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4618      	mov	r0, r3
 800675e:	f7f9 fe63 	bl	8000428 <__aeabi_f2d>
 8006762:	a34f      	add	r3, pc, #316	; (adr r3, 80068a0 <Batt_Protection_when_chargedischarge+0x208>)
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f7f9 fd00 	bl	800016c <__adddf3>
 800676c:	4603      	mov	r3, r0
 800676e:	460c      	mov	r4, r1
 8006770:	4618      	mov	r0, r3
 8006772:	4621      	mov	r1, r4
 8006774:	f7fa f988 	bl	8000a88 <__aeabi_d2f>
 8006778:	4602      	mov	r2, r0
 800677a:	4b56      	ldr	r3, [pc, #344]	; (80068d4 <Batt_Protection_when_chargedischarge+0x23c>)
 800677c:	601a      	str	r2, [r3, #0]
		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 800677e:	4b55      	ldr	r3, [pc, #340]	; (80068d4 <Batt_Protection_when_chargedischarge+0x23c>)
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	4b53      	ldr	r3, [pc, #332]	; (80068d0 <Batt_Protection_when_chargedischarge+0x238>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f7fa fc97 	bl	80010bc <__aeabi_fcmpgt>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d011      	beq.n	80067b8 <Batt_Protection_when_chargedischarge+0x120>
 8006794:	4b4c      	ldr	r3, [pc, #304]	; (80068c8 <Batt_Protection_when_chargedischarge+0x230>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10d      	bne.n	80067b8 <Batt_Protection_when_chargedischarge+0x120>
			Batt_Open_Mode();
 800679c:	f7fa fe0a 	bl	80013b4 <Batt_Open_Mode>
			T_trip_cycle=T_Under_trip;
 80067a0:	4b4b      	ldr	r3, [pc, #300]	; (80068d0 <Batt_Protection_when_chargedischarge+0x238>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a4b      	ldr	r2, [pc, #300]	; (80068d4 <Batt_Protection_when_chargedischarge+0x23c>)
 80067a6:	6013      	str	r3, [r2, #0]
			flag_trip_undervoltage=ON;
 80067a8:	4b47      	ldr	r3, [pc, #284]	; (80068c8 <Batt_Protection_when_chargedischarge+0x230>)
 80067aa:	2201      	movs	r2, #1
 80067ac:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80067ae:	2200      	movs	r2, #0
 80067b0:	2104      	movs	r1, #4
 80067b2:	4843      	ldr	r0, [pc, #268]	; (80068c0 <Batt_Protection_when_chargedischarge+0x228>)
 80067b4:	f002 ff77 	bl	80096a6 <HAL_GPIO_WritePin>
		if(flag_trip_undervoltage==OFF) {
 80067b8:	4b43      	ldr	r3, [pc, #268]	; (80068c8 <Batt_Protection_when_chargedischarge+0x230>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f040 8578 	bne.w	80072b2 <Batt_Protection_when_chargedischarge+0xc1a>
			if(T_Under_trip-T_trip_cycle>15) {
 80067c2:	4b43      	ldr	r3, [pc, #268]	; (80068d0 <Batt_Protection_when_chargedischarge+0x238>)
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	4b43      	ldr	r3, [pc, #268]	; (80068d4 <Batt_Protection_when_chargedischarge+0x23c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4619      	mov	r1, r3
 80067cc:	4610      	mov	r0, r2
 80067ce:	f7fa f9af 	bl	8000b30 <__aeabi_fsub>
 80067d2:	4603      	mov	r3, r0
 80067d4:	4940      	ldr	r1, [pc, #256]	; (80068d8 <Batt_Protection_when_chargedischarge+0x240>)
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fa fc70 	bl	80010bc <__aeabi_fcmpgt>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d018      	beq.n	8006814 <Batt_Protection_when_chargedischarge+0x17c>
				if((test_tim2%1000)==0)
 80067e2:	4b3e      	ldr	r3, [pc, #248]	; (80068dc <Batt_Protection_when_chargedischarge+0x244>)
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	4b3e      	ldr	r3, [pc, #248]	; (80068e0 <Batt_Protection_when_chargedischarge+0x248>)
 80067e8:	fb83 1302 	smull	r1, r3, r3, r2
 80067ec:	1199      	asrs	r1, r3, #6
 80067ee:	17d3      	asrs	r3, r2, #31
 80067f0:	1acb      	subs	r3, r1, r3
 80067f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80067f6:	fb01 f303 	mul.w	r3, r1, r3
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f040 8558 	bne.w	80072b2 <Batt_Protection_when_chargedischarge+0xc1a>
					BUZZ_Toggle;
 8006802:	2104      	movs	r1, #4
 8006804:	482e      	ldr	r0, [pc, #184]	; (80068c0 <Batt_Protection_when_chargedischarge+0x228>)
 8006806:	f002 ff66 	bl	80096d6 <HAL_GPIO_TogglePin>
					test_tim2=0;
 800680a:	4b34      	ldr	r3, [pc, #208]	; (80068dc <Batt_Protection_when_chargedischarge+0x244>)
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
		if(flag_trip_undervoltage==OFF) {
 8006810:	f000 bd4f 	b.w	80072b2 <Batt_Protection_when_chargedischarge+0xc1a>
			else if(T_Under_trip-T_trip_cycle>10)
 8006814:	4b2e      	ldr	r3, [pc, #184]	; (80068d0 <Batt_Protection_when_chargedischarge+0x238>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	4b2e      	ldr	r3, [pc, #184]	; (80068d4 <Batt_Protection_when_chargedischarge+0x23c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4619      	mov	r1, r3
 800681e:	4610      	mov	r0, r2
 8006820:	f7fa f986 	bl	8000b30 <__aeabi_fsub>
 8006824:	4603      	mov	r3, r0
 8006826:	492f      	ldr	r1, [pc, #188]	; (80068e4 <Batt_Protection_when_chargedischarge+0x24c>)
 8006828:	4618      	mov	r0, r3
 800682a:	f7fa fc47 	bl	80010bc <__aeabi_fcmpgt>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d017      	beq.n	8006864 <Batt_Protection_when_chargedischarge+0x1cc>
				if((test_tim2%100)==0)
 8006834:	4b29      	ldr	r3, [pc, #164]	; (80068dc <Batt_Protection_when_chargedischarge+0x244>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	4b2b      	ldr	r3, [pc, #172]	; (80068e8 <Batt_Protection_when_chargedischarge+0x250>)
 800683a:	fb83 1302 	smull	r1, r3, r3, r2
 800683e:	1159      	asrs	r1, r3, #5
 8006840:	17d3      	asrs	r3, r2, #31
 8006842:	1acb      	subs	r3, r1, r3
 8006844:	2164      	movs	r1, #100	; 0x64
 8006846:	fb01 f303 	mul.w	r3, r1, r3
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	f040 8530 	bne.w	80072b2 <Batt_Protection_when_chargedischarge+0xc1a>
					BUZZ_Toggle;
 8006852:	2104      	movs	r1, #4
 8006854:	481a      	ldr	r0, [pc, #104]	; (80068c0 <Batt_Protection_when_chargedischarge+0x228>)
 8006856:	f002 ff3e 	bl	80096d6 <HAL_GPIO_TogglePin>
					test_tim2=0;
 800685a:	4b20      	ldr	r3, [pc, #128]	; (80068dc <Batt_Protection_when_chargedischarge+0x244>)
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]
		if(flag_trip_undervoltage==OFF) {
 8006860:	f000 bd27 	b.w	80072b2 <Batt_Protection_when_chargedischarge+0xc1a>
			else if(T_Under_trip-T_trip_cycle>1)
 8006864:	4b1a      	ldr	r3, [pc, #104]	; (80068d0 <Batt_Protection_when_chargedischarge+0x238>)
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	4b1a      	ldr	r3, [pc, #104]	; (80068d4 <Batt_Protection_when_chargedischarge+0x23c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f7fa f95e 	bl	8000b30 <__aeabi_fsub>
 8006874:	4603      	mov	r3, r0
 8006876:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800687a:	4618      	mov	r0, r3
 800687c:	f7fa fc1e 	bl	80010bc <__aeabi_fcmpgt>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <Batt_Protection_when_chargedischarge+0x1f2>
		if(flag_trip_undervoltage==OFF) {
 8006886:	f000 bd14 	b.w	80072b2 <Batt_Protection_when_chargedischarge+0xc1a>
				HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 800688a:	2201      	movs	r2, #1
 800688c:	2104      	movs	r1, #4
 800688e:	480c      	ldr	r0, [pc, #48]	; (80068c0 <Batt_Protection_when_chargedischarge+0x228>)
 8006890:	f002 ff09 	bl	80096a6 <HAL_GPIO_WritePin>
		if(flag_trip_undervoltage==OFF) {
 8006894:	f000 bd0d 	b.w	80072b2 <Batt_Protection_when_chargedischarge+0xc1a>
 8006898:	cccccccd 	.word	0xcccccccd
 800689c:	3feccccc 	.word	0x3feccccc
 80068a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80068a4:	3f50624d 	.word	0x3f50624d
 80068a8:	200010b0 	.word	0x200010b0
 80068ac:	20001094 	.word	0x20001094
 80068b0:	200010a4 	.word	0x200010a4
 80068b4:	200010d4 	.word	0x200010d4
 80068b8:	200010c0 	.word	0x200010c0
 80068bc:	20000c8a 	.word	0x20000c8a
 80068c0:	40011000 	.word	0x40011000
 80068c4:	20000070 	.word	0x20000070
 80068c8:	200010b9 	.word	0x200010b9
 80068cc:	20000050 	.word	0x20000050
 80068d0:	20001080 	.word	0x20001080
 80068d4:	200010cc 	.word	0x200010cc
 80068d8:	41700000 	.word	0x41700000
 80068dc:	20000bdc 	.word	0x20000bdc
 80068e0:	10624dd3 	.word	0x10624dd3
 80068e4:	41200000 	.word	0x41200000
 80068e8:	51eb851f 	.word	0x51eb851f
	else if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF)   //Indikasi terjadi Over Current
 80068ec:	4ba8      	ldr	r3, [pc, #672]	; (8006b90 <Batt_Protection_when_chargedischarge+0x4f8>)
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	4ba8      	ldr	r3, [pc, #672]	; (8006b94 <Batt_Protection_when_chargedischarge+0x4fc>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f7fa f91a 	bl	8000b30 <__aeabi_fsub>
 80068fc:	4603      	mov	r3, r0
 80068fe:	f04f 0100 	mov.w	r1, #0
 8006902:	4618      	mov	r0, r3
 8006904:	f7fa fbda 	bl	80010bc <__aeabi_fcmpgt>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80c1 	beq.w	8006a92 <Batt_Protection_when_chargedischarge+0x3fa>
 8006910:	4ba1      	ldr	r3, [pc, #644]	; (8006b98 <Batt_Protection_when_chargedischarge+0x500>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	f040 80bc 	bne.w	8006a92 <Batt_Protection_when_chargedischarge+0x3fa>
		fault_code=2;
 800691a:	4ba0      	ldr	r3, [pc, #640]	; (8006b9c <Batt_Protection_when_chargedischarge+0x504>)
 800691c:	2202      	movs	r2, #2
 800691e:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=TMS_I_Over/((IBATT/I_Over_Set)-1);
 8006920:	4b9f      	ldr	r3, [pc, #636]	; (8006ba0 <Batt_Protection_when_chargedischarge+0x508>)
 8006922:	681c      	ldr	r4, [r3, #0]
 8006924:	4b9a      	ldr	r3, [pc, #616]	; (8006b90 <Batt_Protection_when_chargedischarge+0x4f8>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	4b9a      	ldr	r3, [pc, #616]	; (8006b94 <Batt_Protection_when_chargedischarge+0x4fc>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4619      	mov	r1, r3
 800692e:	4610      	mov	r0, r2
 8006930:	f7fa fabc 	bl	8000eac <__aeabi_fdiv>
 8006934:	4603      	mov	r3, r0
 8006936:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800693a:	4618      	mov	r0, r3
 800693c:	f7fa f8f8 	bl	8000b30 <__aeabi_fsub>
 8006940:	4603      	mov	r3, r0
 8006942:	4619      	mov	r1, r3
 8006944:	4620      	mov	r0, r4
 8006946:	f7fa fab1 	bl	8000eac <__aeabi_fdiv>
 800694a:	4603      	mov	r3, r0
 800694c:	461a      	mov	r2, r3
 800694e:	4b95      	ldr	r3, [pc, #596]	; (8006ba4 <Batt_Protection_when_chargedischarge+0x50c>)
 8006950:	601a      	str	r2, [r3, #0]
		T_I_Over_trip_cycle+=0.001;
 8006952:	4b95      	ldr	r3, [pc, #596]	; (8006ba8 <Batt_Protection_when_chargedischarge+0x510>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f7f9 fd66 	bl	8000428 <__aeabi_f2d>
 800695c:	a38a      	add	r3, pc, #552	; (adr r3, 8006b88 <Batt_Protection_when_chargedischarge+0x4f0>)
 800695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006962:	f7f9 fc03 	bl	800016c <__adddf3>
 8006966:	4603      	mov	r3, r0
 8006968:	460c      	mov	r4, r1
 800696a:	4618      	mov	r0, r3
 800696c:	4621      	mov	r1, r4
 800696e:	f7fa f88b 	bl	8000a88 <__aeabi_d2f>
 8006972:	4602      	mov	r2, r0
 8006974:	4b8c      	ldr	r3, [pc, #560]	; (8006ba8 <Batt_Protection_when_chargedischarge+0x510>)
 8006976:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF)
 8006978:	4b8b      	ldr	r3, [pc, #556]	; (8006ba8 <Batt_Protection_when_chargedischarge+0x510>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	4b89      	ldr	r3, [pc, #548]	; (8006ba4 <Batt_Protection_when_chargedischarge+0x50c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4619      	mov	r1, r3
 8006982:	4610      	mov	r0, r2
 8006984:	f7fa fb9a 	bl	80010bc <__aeabi_fcmpgt>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d011      	beq.n	80069b2 <Batt_Protection_when_chargedischarge+0x31a>
 800698e:	4b82      	ldr	r3, [pc, #520]	; (8006b98 <Batt_Protection_when_chargedischarge+0x500>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10d      	bne.n	80069b2 <Batt_Protection_when_chargedischarge+0x31a>
			Batt_Open_Mode();
 8006996:	f7fa fd0d 	bl	80013b4 <Batt_Open_Mode>
			T_I_Over_trip_cycle=T_I_Over_trip;
 800699a:	4b82      	ldr	r3, [pc, #520]	; (8006ba4 <Batt_Protection_when_chargedischarge+0x50c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a82      	ldr	r2, [pc, #520]	; (8006ba8 <Batt_Protection_when_chargedischarge+0x510>)
 80069a0:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentdischarge=ON;
 80069a2:	4b7d      	ldr	r3, [pc, #500]	; (8006b98 <Batt_Protection_when_chargedischarge+0x500>)
 80069a4:	2201      	movs	r2, #1
 80069a6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80069a8:	2200      	movs	r2, #0
 80069aa:	2104      	movs	r1, #4
 80069ac:	487f      	ldr	r0, [pc, #508]	; (8006bac <Batt_Protection_when_chargedischarge+0x514>)
 80069ae:	f002 fe7a 	bl	80096a6 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF)
 80069b2:	4b79      	ldr	r3, [pc, #484]	; (8006b98 <Batt_Protection_when_chargedischarge+0x500>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f040 847d 	bne.w	80072b6 <Batt_Protection_when_chargedischarge+0xc1e>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15)
 80069bc:	4b79      	ldr	r3, [pc, #484]	; (8006ba4 <Batt_Protection_when_chargedischarge+0x50c>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	4b79      	ldr	r3, [pc, #484]	; (8006ba8 <Batt_Protection_when_chargedischarge+0x510>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4619      	mov	r1, r3
 80069c6:	4610      	mov	r0, r2
 80069c8:	f7fa f8b2 	bl	8000b30 <__aeabi_fsub>
 80069cc:	4603      	mov	r3, r0
 80069ce:	4978      	ldr	r1, [pc, #480]	; (8006bb0 <Batt_Protection_when_chargedischarge+0x518>)
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fa fb73 	bl	80010bc <__aeabi_fcmpgt>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d018      	beq.n	8006a0e <Batt_Protection_when_chargedischarge+0x376>
				if((test_tim2%1000)==0)
 80069dc:	4b75      	ldr	r3, [pc, #468]	; (8006bb4 <Batt_Protection_when_chargedischarge+0x51c>)
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	4b75      	ldr	r3, [pc, #468]	; (8006bb8 <Batt_Protection_when_chargedischarge+0x520>)
 80069e2:	fb83 1302 	smull	r1, r3, r3, r2
 80069e6:	1199      	asrs	r1, r3, #6
 80069e8:	17d3      	asrs	r3, r2, #31
 80069ea:	1acb      	subs	r3, r1, r3
 80069ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80069f0:	fb01 f303 	mul.w	r3, r1, r3
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f040 845d 	bne.w	80072b6 <Batt_Protection_when_chargedischarge+0xc1e>
					BUZZ_Toggle;
 80069fc:	2104      	movs	r1, #4
 80069fe:	486b      	ldr	r0, [pc, #428]	; (8006bac <Batt_Protection_when_chargedischarge+0x514>)
 8006a00:	f002 fe69 	bl	80096d6 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8006a04:	4b6b      	ldr	r3, [pc, #428]	; (8006bb4 <Batt_Protection_when_chargedischarge+0x51c>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF)
 8006a0a:	f000 bc54 	b.w	80072b6 <Batt_Protection_when_chargedischarge+0xc1e>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10)
 8006a0e:	4b65      	ldr	r3, [pc, #404]	; (8006ba4 <Batt_Protection_when_chargedischarge+0x50c>)
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	4b65      	ldr	r3, [pc, #404]	; (8006ba8 <Batt_Protection_when_chargedischarge+0x510>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4619      	mov	r1, r3
 8006a18:	4610      	mov	r0, r2
 8006a1a:	f7fa f889 	bl	8000b30 <__aeabi_fsub>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	4966      	ldr	r1, [pc, #408]	; (8006bbc <Batt_Protection_when_chargedischarge+0x524>)
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fa fb4a 	bl	80010bc <__aeabi_fcmpgt>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d017      	beq.n	8006a5e <Batt_Protection_when_chargedischarge+0x3c6>
				if((test_tim2%100)==0)
 8006a2e:	4b61      	ldr	r3, [pc, #388]	; (8006bb4 <Batt_Protection_when_chargedischarge+0x51c>)
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4b63      	ldr	r3, [pc, #396]	; (8006bc0 <Batt_Protection_when_chargedischarge+0x528>)
 8006a34:	fb83 1302 	smull	r1, r3, r3, r2
 8006a38:	1159      	asrs	r1, r3, #5
 8006a3a:	17d3      	asrs	r3, r2, #31
 8006a3c:	1acb      	subs	r3, r1, r3
 8006a3e:	2164      	movs	r1, #100	; 0x64
 8006a40:	fb01 f303 	mul.w	r3, r1, r3
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f040 8435 	bne.w	80072b6 <Batt_Protection_when_chargedischarge+0xc1e>
					BUZZ_Toggle;
 8006a4c:	2104      	movs	r1, #4
 8006a4e:	4857      	ldr	r0, [pc, #348]	; (8006bac <Batt_Protection_when_chargedischarge+0x514>)
 8006a50:	f002 fe41 	bl	80096d6 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8006a54:	4b57      	ldr	r3, [pc, #348]	; (8006bb4 <Batt_Protection_when_chargedischarge+0x51c>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF)
 8006a5a:	f000 bc2c 	b.w	80072b6 <Batt_Protection_when_chargedischarge+0xc1e>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1)
 8006a5e:	4b51      	ldr	r3, [pc, #324]	; (8006ba4 <Batt_Protection_when_chargedischarge+0x50c>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	4b51      	ldr	r3, [pc, #324]	; (8006ba8 <Batt_Protection_when_chargedischarge+0x510>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4619      	mov	r1, r3
 8006a68:	4610      	mov	r0, r2
 8006a6a:	f7fa f861 	bl	8000b30 <__aeabi_fsub>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7fa fb21 	bl	80010bc <__aeabi_fcmpgt>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <Batt_Protection_when_chargedischarge+0x3ec>
		if(flag_trip_overcurrentdischarge==OFF)
 8006a80:	f000 bc19 	b.w	80072b6 <Batt_Protection_when_chargedischarge+0xc1e>
				HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 8006a84:	2201      	movs	r2, #1
 8006a86:	2104      	movs	r1, #4
 8006a88:	4848      	ldr	r0, [pc, #288]	; (8006bac <Batt_Protection_when_chargedischarge+0x514>)
 8006a8a:	f002 fe0c 	bl	80096a6 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF)
 8006a8e:	f000 bc12 	b.w	80072b6 <Batt_Protection_when_chargedischarge+0xc1e>
	else if(((50-Suhu_T1 < 10)||(85-Suhu_T2 < 10)||(50-Suhu_T3 < 10)||(85-Suhu_T4 < 10)) && flag_trip_overtemperature==OFF)
 8006a92:	4b4c      	ldr	r3, [pc, #304]	; (8006bc4 <Batt_Protection_when_chargedischarge+0x52c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4619      	mov	r1, r3
 8006a98:	484b      	ldr	r0, [pc, #300]	; (8006bc8 <Batt_Protection_when_chargedischarge+0x530>)
 8006a9a:	f7fa f849 	bl	8000b30 <__aeabi_fsub>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	4946      	ldr	r1, [pc, #280]	; (8006bbc <Batt_Protection_when_chargedischarge+0x524>)
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fa faec 	bl	8001080 <__aeabi_fcmplt>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d12a      	bne.n	8006b04 <Batt_Protection_when_chargedischarge+0x46c>
 8006aae:	4b47      	ldr	r3, [pc, #284]	; (8006bcc <Batt_Protection_when_chargedischarge+0x534>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4846      	ldr	r0, [pc, #280]	; (8006bd0 <Batt_Protection_when_chargedischarge+0x538>)
 8006ab6:	f7fa f83b 	bl	8000b30 <__aeabi_fsub>
 8006aba:	4603      	mov	r3, r0
 8006abc:	493f      	ldr	r1, [pc, #252]	; (8006bbc <Batt_Protection_when_chargedischarge+0x524>)
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fa fade 	bl	8001080 <__aeabi_fcmplt>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d11c      	bne.n	8006b04 <Batt_Protection_when_chargedischarge+0x46c>
 8006aca:	4b42      	ldr	r3, [pc, #264]	; (8006bd4 <Batt_Protection_when_chargedischarge+0x53c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	483d      	ldr	r0, [pc, #244]	; (8006bc8 <Batt_Protection_when_chargedischarge+0x530>)
 8006ad2:	f7fa f82d 	bl	8000b30 <__aeabi_fsub>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	4938      	ldr	r1, [pc, #224]	; (8006bbc <Batt_Protection_when_chargedischarge+0x524>)
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fa fad0 	bl	8001080 <__aeabi_fcmplt>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10e      	bne.n	8006b04 <Batt_Protection_when_chargedischarge+0x46c>
 8006ae6:	4b3c      	ldr	r3, [pc, #240]	; (8006bd8 <Batt_Protection_when_chargedischarge+0x540>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4619      	mov	r1, r3
 8006aec:	4838      	ldr	r0, [pc, #224]	; (8006bd0 <Batt_Protection_when_chargedischarge+0x538>)
 8006aee:	f7fa f81f 	bl	8000b30 <__aeabi_fsub>
 8006af2:	4603      	mov	r3, r0
 8006af4:	4931      	ldr	r1, [pc, #196]	; (8006bbc <Batt_Protection_when_chargedischarge+0x524>)
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fa fac2 	bl	8001080 <__aeabi_fcmplt>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8111 	beq.w	8006d26 <Batt_Protection_when_chargedischarge+0x68e>
 8006b04:	4b35      	ldr	r3, [pc, #212]	; (8006bdc <Batt_Protection_when_chargedischarge+0x544>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f040 810c 	bne.w	8006d26 <Batt_Protection_when_chargedischarge+0x68e>
	  fault_code=3;
 8006b0e:	4b23      	ldr	r3, [pc, #140]	; (8006b9c <Batt_Protection_when_chargedischarge+0x504>)
 8006b10:	2203      	movs	r2, #3
 8006b12:	701a      	strb	r2, [r3, #0]
	  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 8006b14:	4b32      	ldr	r3, [pc, #200]	; (8006be0 <Batt_Protection_when_chargedischarge+0x548>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4928      	ldr	r1, [pc, #160]	; (8006bbc <Batt_Protection_when_chargedischarge+0x524>)
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fa f808 	bl	8000b30 <__aeabi_fsub>
 8006b20:	4603      	mov	r3, r0
 8006b22:	461a      	mov	r2, r3
 8006b24:	4b27      	ldr	r3, [pc, #156]	; (8006bc4 <Batt_Protection_when_chargedischarge+0x52c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	f7fa faa8 	bl	8001080 <__aeabi_fcmplt>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d058      	beq.n	8006be8 <Batt_Protection_when_chargedischarge+0x550>
 8006b36:	4b2a      	ldr	r3, [pc, #168]	; (8006be0 <Batt_Protection_when_chargedischarge+0x548>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	492a      	ldr	r1, [pc, #168]	; (8006be4 <Batt_Protection_when_chargedischarge+0x54c>)
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7f9 fff7 	bl	8000b30 <__aeabi_fsub>
 8006b42:	4603      	mov	r3, r0
 8006b44:	461a      	mov	r2, r3
 8006b46:	4b1f      	ldr	r3, [pc, #124]	; (8006bc4 <Batt_Protection_when_chargedischarge+0x52c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	f7fa faab 	bl	80010a8 <__aeabi_fcmpge>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d047      	beq.n	8006be8 <Batt_Protection_when_chargedischarge+0x550>
		  if((test_tim2%1000)==0)
 8006b58:	4b16      	ldr	r3, [pc, #88]	; (8006bb4 <Batt_Protection_when_chargedischarge+0x51c>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	4b16      	ldr	r3, [pc, #88]	; (8006bb8 <Batt_Protection_when_chargedischarge+0x520>)
 8006b5e:	fb83 1302 	smull	r1, r3, r3, r2
 8006b62:	1199      	asrs	r1, r3, #6
 8006b64:	17d3      	asrs	r3, r2, #31
 8006b66:	1acb      	subs	r3, r1, r3
 8006b68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b6c:	fb01 f303 	mul.w	r3, r1, r3
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f040 80d6 	bne.w	8006d24 <Batt_Protection_when_chargedischarge+0x68c>
			  BUZZ_Toggle;
 8006b78:	2104      	movs	r1, #4
 8006b7a:	480c      	ldr	r0, [pc, #48]	; (8006bac <Batt_Protection_when_chargedischarge+0x514>)
 8006b7c:	f002 fdab 	bl	80096d6 <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8006b80:	4b0c      	ldr	r3, [pc, #48]	; (8006bb4 <Batt_Protection_when_chargedischarge+0x51c>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
		  if((test_tim2%1000)==0)
 8006b86:	e0cd      	b.n	8006d24 <Batt_Protection_when_chargedischarge+0x68c>
 8006b88:	d2f1a9fc 	.word	0xd2f1a9fc
 8006b8c:	3f50624d 	.word	0x3f50624d
 8006b90:	200010b0 	.word	0x200010b0
 8006b94:	20000058 	.word	0x20000058
 8006b98:	200010c8 	.word	0x200010c8
 8006b9c:	200010c0 	.word	0x200010c0
 8006ba0:	20000054 	.word	0x20000054
 8006ba4:	2000107c 	.word	0x2000107c
 8006ba8:	200010fc 	.word	0x200010fc
 8006bac:	40011000 	.word	0x40011000
 8006bb0:	41700000 	.word	0x41700000
 8006bb4:	20000bdc 	.word	0x20000bdc
 8006bb8:	10624dd3 	.word	0x10624dd3
 8006bbc:	41200000 	.word	0x41200000
 8006bc0:	51eb851f 	.word	0x51eb851f
 8006bc4:	200010c4 	.word	0x200010c4
 8006bc8:	42480000 	.word	0x42480000
 8006bcc:	20001500 	.word	0x20001500
 8006bd0:	42aa0000 	.word	0x42aa0000
 8006bd4:	20001098 	.word	0x20001098
 8006bd8:	200010f8 	.word	0x200010f8
 8006bdc:	20001090 	.word	0x20001090
 8006be0:	20000060 	.word	0x20000060
 8006be4:	40a00000 	.word	0x40a00000
	  else if(Suhu_T1>Temp_Over_Set-5 && Suhu_T1<=Temp_Over_Set-2)
 8006be8:	4b90      	ldr	r3, [pc, #576]	; (8006e2c <Batt_Protection_when_chargedischarge+0x794>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4990      	ldr	r1, [pc, #576]	; (8006e30 <Batt_Protection_when_chargedischarge+0x798>)
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7f9 ff9e 	bl	8000b30 <__aeabi_fsub>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	4b8e      	ldr	r3, [pc, #568]	; (8006e34 <Batt_Protection_when_chargedischarge+0x79c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	f7fa fa3e 	bl	8001080 <__aeabi_fcmplt>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d028      	beq.n	8006c5c <Batt_Protection_when_chargedischarge+0x5c4>
 8006c0a:	4b88      	ldr	r3, [pc, #544]	; (8006e2c <Batt_Protection_when_chargedischarge+0x794>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7f9 ff8c 	bl	8000b30 <__aeabi_fsub>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	4b85      	ldr	r3, [pc, #532]	; (8006e34 <Batt_Protection_when_chargedischarge+0x79c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4619      	mov	r1, r3
 8006c22:	4610      	mov	r0, r2
 8006c24:	f7fa fa40 	bl	80010a8 <__aeabi_fcmpge>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d016      	beq.n	8006c5c <Batt_Protection_when_chargedischarge+0x5c4>
		  if((test_tim2%500)==0)
 8006c2e:	4b82      	ldr	r3, [pc, #520]	; (8006e38 <Batt_Protection_when_chargedischarge+0x7a0>)
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	4b82      	ldr	r3, [pc, #520]	; (8006e3c <Batt_Protection_when_chargedischarge+0x7a4>)
 8006c34:	fb83 1302 	smull	r1, r3, r3, r2
 8006c38:	1159      	asrs	r1, r3, #5
 8006c3a:	17d3      	asrs	r3, r2, #31
 8006c3c:	1acb      	subs	r3, r1, r3
 8006c3e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006c42:	fb01 f303 	mul.w	r3, r1, r3
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d16b      	bne.n	8006d24 <Batt_Protection_when_chargedischarge+0x68c>
			  BUZZ_Toggle;
 8006c4c:	2104      	movs	r1, #4
 8006c4e:	487c      	ldr	r0, [pc, #496]	; (8006e40 <Batt_Protection_when_chargedischarge+0x7a8>)
 8006c50:	f002 fd41 	bl	80096d6 <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8006c54:	4b78      	ldr	r3, [pc, #480]	; (8006e38 <Batt_Protection_when_chargedischarge+0x7a0>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]
		  if((test_tim2%500)==0)
 8006c5a:	e063      	b.n	8006d24 <Batt_Protection_when_chargedischarge+0x68c>
	  else if(Suhu_T1>Temp_Over_Set-2 && Suhu_T1<=Temp_Over_Set)
 8006c5c:	4b73      	ldr	r3, [pc, #460]	; (8006e2c <Batt_Protection_when_chargedischarge+0x794>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7f9 ff63 	bl	8000b30 <__aeabi_fsub>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4b71      	ldr	r3, [pc, #452]	; (8006e34 <Batt_Protection_when_chargedischarge+0x79c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4619      	mov	r1, r3
 8006c74:	4610      	mov	r0, r2
 8006c76:	f7fa fa03 	bl	8001080 <__aeabi_fcmplt>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d021      	beq.n	8006cc4 <Batt_Protection_when_chargedischarge+0x62c>
 8006c80:	4b6c      	ldr	r3, [pc, #432]	; (8006e34 <Batt_Protection_when_chargedischarge+0x79c>)
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	4b69      	ldr	r3, [pc, #420]	; (8006e2c <Batt_Protection_when_chargedischarge+0x794>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f7fa fa02 	bl	8001094 <__aeabi_fcmple>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d016      	beq.n	8006cc4 <Batt_Protection_when_chargedischarge+0x62c>
		  if((test_tim2%500)==0)
 8006c96:	4b68      	ldr	r3, [pc, #416]	; (8006e38 <Batt_Protection_when_chargedischarge+0x7a0>)
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	4b68      	ldr	r3, [pc, #416]	; (8006e3c <Batt_Protection_when_chargedischarge+0x7a4>)
 8006c9c:	fb83 1302 	smull	r1, r3, r3, r2
 8006ca0:	1159      	asrs	r1, r3, #5
 8006ca2:	17d3      	asrs	r3, r2, #31
 8006ca4:	1acb      	subs	r3, r1, r3
 8006ca6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006caa:	fb01 f303 	mul.w	r3, r1, r3
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d137      	bne.n	8006d24 <Batt_Protection_when_chargedischarge+0x68c>
			  BUZZ_Toggle;
 8006cb4:	2104      	movs	r1, #4
 8006cb6:	4862      	ldr	r0, [pc, #392]	; (8006e40 <Batt_Protection_when_chargedischarge+0x7a8>)
 8006cb8:	f002 fd0d 	bl	80096d6 <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8006cbc:	4b5e      	ldr	r3, [pc, #376]	; (8006e38 <Batt_Protection_when_chargedischarge+0x7a0>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]
		  if((test_tim2%500)==0)
 8006cc2:	e02f      	b.n	8006d24 <Batt_Protection_when_chargedischarge+0x68c>
	  else if(Suhu_T1>50||Suhu_T2>85||Suhu_T3>50||Suhu_T4>85)
 8006cc4:	4b5b      	ldr	r3, [pc, #364]	; (8006e34 <Batt_Protection_when_chargedischarge+0x79c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	495e      	ldr	r1, [pc, #376]	; (8006e44 <Batt_Protection_when_chargedischarge+0x7ac>)
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fa f9f6 	bl	80010bc <__aeabi_fcmpgt>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d11b      	bne.n	8006d0e <Batt_Protection_when_chargedischarge+0x676>
 8006cd6:	4b5c      	ldr	r3, [pc, #368]	; (8006e48 <Batt_Protection_when_chargedischarge+0x7b0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	495c      	ldr	r1, [pc, #368]	; (8006e4c <Batt_Protection_when_chargedischarge+0x7b4>)
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fa f9ed 	bl	80010bc <__aeabi_fcmpgt>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d112      	bne.n	8006d0e <Batt_Protection_when_chargedischarge+0x676>
 8006ce8:	4b59      	ldr	r3, [pc, #356]	; (8006e50 <Batt_Protection_when_chargedischarge+0x7b8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4955      	ldr	r1, [pc, #340]	; (8006e44 <Batt_Protection_when_chargedischarge+0x7ac>)
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fa f9e4 	bl	80010bc <__aeabi_fcmpgt>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d109      	bne.n	8006d0e <Batt_Protection_when_chargedischarge+0x676>
 8006cfa:	4b56      	ldr	r3, [pc, #344]	; (8006e54 <Batt_Protection_when_chargedischarge+0x7bc>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4953      	ldr	r1, [pc, #332]	; (8006e4c <Batt_Protection_when_chargedischarge+0x7b4>)
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fa f9db 	bl	80010bc <__aeabi_fcmpgt>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d100      	bne.n	8006d0e <Batt_Protection_when_chargedischarge+0x676>
	  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 8006d0c:	e2d4      	b.n	80072b8 <Batt_Protection_when_chargedischarge+0xc20>
		  Batt_Open_Mode();
 8006d0e:	f7fa fb51 	bl	80013b4 <Batt_Open_Mode>
		  flag_trip_overtemperature=ON;
 8006d12:	4b51      	ldr	r3, [pc, #324]	; (8006e58 <Batt_Protection_when_chargedischarge+0x7c0>)
 8006d14:	2201      	movs	r2, #1
 8006d16:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2104      	movs	r1, #4
 8006d1c:	4848      	ldr	r0, [pc, #288]	; (8006e40 <Batt_Protection_when_chargedischarge+0x7a8>)
 8006d1e:	f002 fcc2 	bl	80096a6 <HAL_GPIO_WritePin>
	  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 8006d22:	e2c9      	b.n	80072b8 <Batt_Protection_when_chargedischarge+0xc20>
 8006d24:	e2c8      	b.n	80072b8 <Batt_Protection_when_chargedischarge+0xc20>
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF)
 8006d26:	4b43      	ldr	r3, [pc, #268]	; (8006e34 <Batt_Protection_when_chargedischarge+0x79c>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	4b4c      	ldr	r3, [pc, #304]	; (8006e5c <Batt_Protection_when_chargedischarge+0x7c4>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	4610      	mov	r0, r2
 8006d32:	f7f9 fefd 	bl	8000b30 <__aeabi_fsub>
 8006d36:	4603      	mov	r3, r0
 8006d38:	4949      	ldr	r1, [pc, #292]	; (8006e60 <Batt_Protection_when_chargedischarge+0x7c8>)
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7fa f9aa 	bl	8001094 <__aeabi_fcmple>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d130      	bne.n	8006da8 <Batt_Protection_when_chargedischarge+0x710>
 8006d46:	4b40      	ldr	r3, [pc, #256]	; (8006e48 <Batt_Protection_when_chargedischarge+0x7b0>)
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4b44      	ldr	r3, [pc, #272]	; (8006e5c <Batt_Protection_when_chargedischarge+0x7c4>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4610      	mov	r0, r2
 8006d52:	f7f9 feed 	bl	8000b30 <__aeabi_fsub>
 8006d56:	4603      	mov	r3, r0
 8006d58:	4941      	ldr	r1, [pc, #260]	; (8006e60 <Batt_Protection_when_chargedischarge+0x7c8>)
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fa f99a 	bl	8001094 <__aeabi_fcmple>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d120      	bne.n	8006da8 <Batt_Protection_when_chargedischarge+0x710>
 8006d66:	4b3a      	ldr	r3, [pc, #232]	; (8006e50 <Batt_Protection_when_chargedischarge+0x7b8>)
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	4b3c      	ldr	r3, [pc, #240]	; (8006e5c <Batt_Protection_when_chargedischarge+0x7c4>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4610      	mov	r0, r2
 8006d72:	f7f9 fedd 	bl	8000b30 <__aeabi_fsub>
 8006d76:	4603      	mov	r3, r0
 8006d78:	4939      	ldr	r1, [pc, #228]	; (8006e60 <Batt_Protection_when_chargedischarge+0x7c8>)
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fa f98a 	bl	8001094 <__aeabi_fcmple>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d110      	bne.n	8006da8 <Batt_Protection_when_chargedischarge+0x710>
 8006d86:	4b33      	ldr	r3, [pc, #204]	; (8006e54 <Batt_Protection_when_chargedischarge+0x7bc>)
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	4b34      	ldr	r3, [pc, #208]	; (8006e5c <Batt_Protection_when_chargedischarge+0x7c4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4610      	mov	r0, r2
 8006d92:	f7f9 fecd 	bl	8000b30 <__aeabi_fsub>
 8006d96:	4603      	mov	r3, r0
 8006d98:	4931      	ldr	r1, [pc, #196]	; (8006e60 <Batt_Protection_when_chargedischarge+0x7c8>)
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fa f97a 	bl	8001094 <__aeabi_fcmple>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8109 	beq.w	8006fba <Batt_Protection_when_chargedischarge+0x922>
 8006da8:	4b2e      	ldr	r3, [pc, #184]	; (8006e64 <Batt_Protection_when_chargedischarge+0x7cc>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f040 8104 	bne.w	8006fba <Batt_Protection_when_chargedischarge+0x922>
	  fault_code=4;
 8006db2:	4b2d      	ldr	r3, [pc, #180]	; (8006e68 <Batt_Protection_when_chargedischarge+0x7d0>)
 8006db4:	2204      	movs	r2, #4
 8006db6:	701a      	strb	r2, [r3, #0]
	  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8006db8:	4b28      	ldr	r3, [pc, #160]	; (8006e5c <Batt_Protection_when_chargedischarge+0x7c4>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4928      	ldr	r1, [pc, #160]	; (8006e60 <Batt_Protection_when_chargedischarge+0x7c8>)
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7f9 feb8 	bl	8000b34 <__addsf3>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	4b1a      	ldr	r3, [pc, #104]	; (8006e34 <Batt_Protection_when_chargedischarge+0x79c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4610      	mov	r0, r2
 8006dd0:	f7fa f96a 	bl	80010a8 <__aeabi_fcmpge>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d048      	beq.n	8006e6c <Batt_Protection_when_chargedischarge+0x7d4>
 8006dda:	4b20      	ldr	r3, [pc, #128]	; (8006e5c <Batt_Protection_when_chargedischarge+0x7c4>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4914      	ldr	r1, [pc, #80]	; (8006e30 <Batt_Protection_when_chargedischarge+0x798>)
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7f9 fea7 	bl	8000b34 <__addsf3>
 8006de6:	4603      	mov	r3, r0
 8006de8:	461a      	mov	r2, r3
 8006dea:	4b12      	ldr	r3, [pc, #72]	; (8006e34 <Batt_Protection_when_chargedischarge+0x79c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4619      	mov	r1, r3
 8006df0:	4610      	mov	r0, r2
 8006df2:	f7fa f945 	bl	8001080 <__aeabi_fcmplt>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d037      	beq.n	8006e6c <Batt_Protection_when_chargedischarge+0x7d4>
		  if((test_tim2%1000)==0)
 8006dfc:	4b0e      	ldr	r3, [pc, #56]	; (8006e38 <Batt_Protection_when_chargedischarge+0x7a0>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	4b0e      	ldr	r3, [pc, #56]	; (8006e3c <Batt_Protection_when_chargedischarge+0x7a4>)
 8006e02:	fb83 1302 	smull	r1, r3, r3, r2
 8006e06:	1199      	asrs	r1, r3, #6
 8006e08:	17d3      	asrs	r3, r2, #31
 8006e0a:	1acb      	subs	r3, r1, r3
 8006e0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e10:	fb01 f303 	mul.w	r3, r1, r3
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 80ce 	bne.w	8006fb8 <Batt_Protection_when_chargedischarge+0x920>
			  BUZZ_Toggle;
 8006e1c:	2104      	movs	r1, #4
 8006e1e:	4808      	ldr	r0, [pc, #32]	; (8006e40 <Batt_Protection_when_chargedischarge+0x7a8>)
 8006e20:	f002 fc59 	bl	80096d6 <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8006e24:	4b04      	ldr	r3, [pc, #16]	; (8006e38 <Batt_Protection_when_chargedischarge+0x7a0>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]
		  if((test_tim2%1000)==0)
 8006e2a:	e0c5      	b.n	8006fb8 <Batt_Protection_when_chargedischarge+0x920>
 8006e2c:	20000060 	.word	0x20000060
 8006e30:	40a00000 	.word	0x40a00000
 8006e34:	200010c4 	.word	0x200010c4
 8006e38:	20000bdc 	.word	0x20000bdc
 8006e3c:	10624dd3 	.word	0x10624dd3
 8006e40:	40011000 	.word	0x40011000
 8006e44:	42480000 	.word	0x42480000
 8006e48:	20001500 	.word	0x20001500
 8006e4c:	42aa0000 	.word	0x42aa0000
 8006e50:	20001098 	.word	0x20001098
 8006e54:	200010f8 	.word	0x200010f8
 8006e58:	20001090 	.word	0x20001090
 8006e5c:	20000064 	.word	0x20000064
 8006e60:	41200000 	.word	0x41200000
 8006e64:	200010b8 	.word	0x200010b8
 8006e68:	200010c0 	.word	0x200010c0
	  else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2)
 8006e6c:	4b9c      	ldr	r3, [pc, #624]	; (80070e0 <Batt_Protection_when_chargedischarge+0xa48>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	499c      	ldr	r1, [pc, #624]	; (80070e4 <Batt_Protection_when_chargedischarge+0xa4c>)
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7f9 fe5e 	bl	8000b34 <__addsf3>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	4b9a      	ldr	r3, [pc, #616]	; (80070e8 <Batt_Protection_when_chargedischarge+0xa50>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4619      	mov	r1, r3
 8006e82:	4610      	mov	r0, r2
 8006e84:	f7fa f910 	bl	80010a8 <__aeabi_fcmpge>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d028      	beq.n	8006ee0 <Batt_Protection_when_chargedischarge+0x848>
 8006e8e:	4b94      	ldr	r3, [pc, #592]	; (80070e0 <Batt_Protection_when_chargedischarge+0xa48>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7f9 fe4c 	bl	8000b34 <__addsf3>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	4b91      	ldr	r3, [pc, #580]	; (80070e8 <Batt_Protection_when_chargedischarge+0xa50>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	f7fa f8ea 	bl	8001080 <__aeabi_fcmplt>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d016      	beq.n	8006ee0 <Batt_Protection_when_chargedischarge+0x848>
		  if((test_tim2%500)==0)
 8006eb2:	4b8e      	ldr	r3, [pc, #568]	; (80070ec <Batt_Protection_when_chargedischarge+0xa54>)
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4b8e      	ldr	r3, [pc, #568]	; (80070f0 <Batt_Protection_when_chargedischarge+0xa58>)
 8006eb8:	fb83 1302 	smull	r1, r3, r3, r2
 8006ebc:	1159      	asrs	r1, r3, #5
 8006ebe:	17d3      	asrs	r3, r2, #31
 8006ec0:	1acb      	subs	r3, r1, r3
 8006ec2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006ec6:	fb01 f303 	mul.w	r3, r1, r3
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d173      	bne.n	8006fb8 <Batt_Protection_when_chargedischarge+0x920>
			  BUZZ_Toggle;
 8006ed0:	2104      	movs	r1, #4
 8006ed2:	4888      	ldr	r0, [pc, #544]	; (80070f4 <Batt_Protection_when_chargedischarge+0xa5c>)
 8006ed4:	f002 fbff 	bl	80096d6 <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8006ed8:	4b84      	ldr	r3, [pc, #528]	; (80070ec <Batt_Protection_when_chargedischarge+0xa54>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]
		  if((test_tim2%500)==0)
 8006ede:	e06b      	b.n	8006fb8 <Batt_Protection_when_chargedischarge+0x920>
	  else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set)
 8006ee0:	4b7f      	ldr	r3, [pc, #508]	; (80070e0 <Batt_Protection_when_chargedischarge+0xa48>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7f9 fe23 	bl	8000b34 <__addsf3>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4b7d      	ldr	r3, [pc, #500]	; (80070e8 <Batt_Protection_when_chargedischarge+0xa50>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4610      	mov	r0, r2
 8006efa:	f7fa f8df 	bl	80010bc <__aeabi_fcmpgt>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d021      	beq.n	8006f48 <Batt_Protection_when_chargedischarge+0x8b0>
 8006f04:	4b78      	ldr	r3, [pc, #480]	; (80070e8 <Batt_Protection_when_chargedischarge+0xa50>)
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	4b75      	ldr	r3, [pc, #468]	; (80070e0 <Batt_Protection_when_chargedischarge+0xa48>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f7fa f8ca 	bl	80010a8 <__aeabi_fcmpge>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d016      	beq.n	8006f48 <Batt_Protection_when_chargedischarge+0x8b0>
		  if((test_tim2%500)==0)
 8006f1a:	4b74      	ldr	r3, [pc, #464]	; (80070ec <Batt_Protection_when_chargedischarge+0xa54>)
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	4b74      	ldr	r3, [pc, #464]	; (80070f0 <Batt_Protection_when_chargedischarge+0xa58>)
 8006f20:	fb83 1302 	smull	r1, r3, r3, r2
 8006f24:	1159      	asrs	r1, r3, #5
 8006f26:	17d3      	asrs	r3, r2, #31
 8006f28:	1acb      	subs	r3, r1, r3
 8006f2a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006f2e:	fb01 f303 	mul.w	r3, r1, r3
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d13f      	bne.n	8006fb8 <Batt_Protection_when_chargedischarge+0x920>
			  BUZZ_Toggle;
 8006f38:	2104      	movs	r1, #4
 8006f3a:	486e      	ldr	r0, [pc, #440]	; (80070f4 <Batt_Protection_when_chargedischarge+0xa5c>)
 8006f3c:	f002 fbcb 	bl	80096d6 <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8006f40:	4b6a      	ldr	r3, [pc, #424]	; (80070ec <Batt_Protection_when_chargedischarge+0xa54>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
		  if((test_tim2%500)==0)
 8006f46:	e037      	b.n	8006fb8 <Batt_Protection_when_chargedischarge+0x920>
	  else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set)
 8006f48:	4b67      	ldr	r3, [pc, #412]	; (80070e8 <Batt_Protection_when_chargedischarge+0xa50>)
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	4b64      	ldr	r3, [pc, #400]	; (80070e0 <Batt_Protection_when_chargedischarge+0xa48>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4619      	mov	r1, r3
 8006f52:	4610      	mov	r0, r2
 8006f54:	f7fa f894 	bl	8001080 <__aeabi_fcmplt>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d121      	bne.n	8006fa2 <Batt_Protection_when_chargedischarge+0x90a>
 8006f5e:	4b66      	ldr	r3, [pc, #408]	; (80070f8 <Batt_Protection_when_chargedischarge+0xa60>)
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b5f      	ldr	r3, [pc, #380]	; (80070e0 <Batt_Protection_when_chargedischarge+0xa48>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4619      	mov	r1, r3
 8006f68:	4610      	mov	r0, r2
 8006f6a:	f7fa f889 	bl	8001080 <__aeabi_fcmplt>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d116      	bne.n	8006fa2 <Batt_Protection_when_chargedischarge+0x90a>
 8006f74:	4b61      	ldr	r3, [pc, #388]	; (80070fc <Batt_Protection_when_chargedischarge+0xa64>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	4b59      	ldr	r3, [pc, #356]	; (80070e0 <Batt_Protection_when_chargedischarge+0xa48>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4610      	mov	r0, r2
 8006f80:	f7fa f87e 	bl	8001080 <__aeabi_fcmplt>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10b      	bne.n	8006fa2 <Batt_Protection_when_chargedischarge+0x90a>
 8006f8a:	4b5d      	ldr	r3, [pc, #372]	; (8007100 <Batt_Protection_when_chargedischarge+0xa68>)
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	4b54      	ldr	r3, [pc, #336]	; (80070e0 <Batt_Protection_when_chargedischarge+0xa48>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4619      	mov	r1, r3
 8006f94:	4610      	mov	r0, r2
 8006f96:	f7fa f873 	bl	8001080 <__aeabi_fcmplt>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d100      	bne.n	8006fa2 <Batt_Protection_when_chargedischarge+0x90a>
	  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8006fa0:	e18a      	b.n	80072b8 <Batt_Protection_when_chargedischarge+0xc20>
		  Batt_Open_Mode();
 8006fa2:	f7fa fa07 	bl	80013b4 <Batt_Open_Mode>
		  flag_trip_undertemperature=ON;
 8006fa6:	4b57      	ldr	r3, [pc, #348]	; (8007104 <Batt_Protection_when_chargedischarge+0xa6c>)
 8006fa8:	2201      	movs	r2, #1
 8006faa:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8006fac:	2200      	movs	r2, #0
 8006fae:	2104      	movs	r1, #4
 8006fb0:	4850      	ldr	r0, [pc, #320]	; (80070f4 <Batt_Protection_when_chargedischarge+0xa5c>)
 8006fb2:	f002 fb78 	bl	80096a6 <HAL_GPIO_WritePin>
	  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8006fb6:	e17f      	b.n	80072b8 <Batt_Protection_when_chargedischarge+0xc20>
 8006fb8:	e17e      	b.n	80072b8 <Batt_Protection_when_chargedischarge+0xc20>
	else if(Pack_SOC-SOC_Under_Set<=10 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE)
 8006fba:	4b53      	ldr	r3, [pc, #332]	; (8007108 <Batt_Protection_when_chargedischarge+0xa70>)
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	4b53      	ldr	r3, [pc, #332]	; (800710c <Batt_Protection_when_chargedischarge+0xa74>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	f7f9 fdb3 	bl	8000b30 <__aeabi_fsub>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4950      	ldr	r1, [pc, #320]	; (8007110 <Batt_Protection_when_chargedischarge+0xa78>)
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fa f860 	bl	8001094 <__aeabi_fcmple>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 80ee 	beq.w	80071b8 <Batt_Protection_when_chargedischarge+0xb20>
 8006fdc:	4b4d      	ldr	r3, [pc, #308]	; (8007114 <Batt_Protection_when_chargedischarge+0xa7c>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f040 80e9 	bne.w	80071b8 <Batt_Protection_when_chargedischarge+0xb20>
 8006fe6:	4b4c      	ldr	r3, [pc, #304]	; (8007118 <Batt_Protection_when_chargedischarge+0xa80>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	f040 80e4 	bne.w	80071b8 <Batt_Protection_when_chargedischarge+0xb20>
	  fault_code=5;
 8006ff0:	4b4a      	ldr	r3, [pc, #296]	; (800711c <Batt_Protection_when_chargedischarge+0xa84>)
 8006ff2:	2205      	movs	r2, #5
 8006ff4:	701a      	strb	r2, [r3, #0]
	  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 8006ff6:	4b45      	ldr	r3, [pc, #276]	; (800710c <Batt_Protection_when_chargedischarge+0xa74>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4945      	ldr	r1, [pc, #276]	; (8007110 <Batt_Protection_when_chargedischarge+0xa78>)
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7f9 fd99 	bl	8000b34 <__addsf3>
 8007002:	4603      	mov	r3, r0
 8007004:	461a      	mov	r2, r3
 8007006:	4b40      	ldr	r3, [pc, #256]	; (8007108 <Batt_Protection_when_chargedischarge+0xa70>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4619      	mov	r1, r3
 800700c:	4610      	mov	r0, r2
 800700e:	f7fa f84b 	bl	80010a8 <__aeabi_fcmpge>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d028      	beq.n	800706a <Batt_Protection_when_chargedischarge+0x9d2>
 8007018:	4b3c      	ldr	r3, [pc, #240]	; (800710c <Batt_Protection_when_chargedischarge+0xa74>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4931      	ldr	r1, [pc, #196]	; (80070e4 <Batt_Protection_when_chargedischarge+0xa4c>)
 800701e:	4618      	mov	r0, r3
 8007020:	f7f9 fd88 	bl	8000b34 <__addsf3>
 8007024:	4603      	mov	r3, r0
 8007026:	461a      	mov	r2, r3
 8007028:	4b37      	ldr	r3, [pc, #220]	; (8007108 <Batt_Protection_when_chargedischarge+0xa70>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4619      	mov	r1, r3
 800702e:	4610      	mov	r0, r2
 8007030:	f7fa f826 	bl	8001080 <__aeabi_fcmplt>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d017      	beq.n	800706a <Batt_Protection_when_chargedischarge+0x9d2>
		  if((test_tim2%1000)==0)
 800703a:	4b2c      	ldr	r3, [pc, #176]	; (80070ec <Batt_Protection_when_chargedischarge+0xa54>)
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4b2c      	ldr	r3, [pc, #176]	; (80070f0 <Batt_Protection_when_chargedischarge+0xa58>)
 8007040:	fb83 1302 	smull	r1, r3, r3, r2
 8007044:	1199      	asrs	r1, r3, #6
 8007046:	17d3      	asrs	r3, r2, #31
 8007048:	1acb      	subs	r3, r1, r3
 800704a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800704e:	fb01 f303 	mul.w	r3, r1, r3
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	f040 80ae 	bne.w	80071b6 <Batt_Protection_when_chargedischarge+0xb1e>
			  BUZZ_Toggle;
 800705a:	2104      	movs	r1, #4
 800705c:	4825      	ldr	r0, [pc, #148]	; (80070f4 <Batt_Protection_when_chargedischarge+0xa5c>)
 800705e:	f002 fb3a 	bl	80096d6 <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8007062:	4b22      	ldr	r3, [pc, #136]	; (80070ec <Batt_Protection_when_chargedischarge+0xa54>)
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]
		  if((test_tim2%1000)==0)
 8007068:	e0a5      	b.n	80071b6 <Batt_Protection_when_chargedischarge+0xb1e>
	  else if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+2)
 800706a:	4b28      	ldr	r3, [pc, #160]	; (800710c <Batt_Protection_when_chargedischarge+0xa74>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	491d      	ldr	r1, [pc, #116]	; (80070e4 <Batt_Protection_when_chargedischarge+0xa4c>)
 8007070:	4618      	mov	r0, r3
 8007072:	f7f9 fd5f 	bl	8000b34 <__addsf3>
 8007076:	4603      	mov	r3, r0
 8007078:	461a      	mov	r2, r3
 800707a:	4b23      	ldr	r3, [pc, #140]	; (8007108 <Batt_Protection_when_chargedischarge+0xa70>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4619      	mov	r1, r3
 8007080:	4610      	mov	r0, r2
 8007082:	f7fa f811 	bl	80010a8 <__aeabi_fcmpge>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d049      	beq.n	8007120 <Batt_Protection_when_chargedischarge+0xa88>
 800708c:	4b1f      	ldr	r3, [pc, #124]	; (800710c <Batt_Protection_when_chargedischarge+0xa74>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007094:	4618      	mov	r0, r3
 8007096:	f7f9 fd4d 	bl	8000b34 <__addsf3>
 800709a:	4603      	mov	r3, r0
 800709c:	461a      	mov	r2, r3
 800709e:	4b1a      	ldr	r3, [pc, #104]	; (8007108 <Batt_Protection_when_chargedischarge+0xa70>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4619      	mov	r1, r3
 80070a4:	4610      	mov	r0, r2
 80070a6:	f7f9 ffeb 	bl	8001080 <__aeabi_fcmplt>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d037      	beq.n	8007120 <Batt_Protection_when_chargedischarge+0xa88>
		  if((test_tim2%500)==0)
 80070b0:	4b0e      	ldr	r3, [pc, #56]	; (80070ec <Batt_Protection_when_chargedischarge+0xa54>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	4b0e      	ldr	r3, [pc, #56]	; (80070f0 <Batt_Protection_when_chargedischarge+0xa58>)
 80070b6:	fb83 1302 	smull	r1, r3, r3, r2
 80070ba:	1159      	asrs	r1, r3, #5
 80070bc:	17d3      	asrs	r3, r2, #31
 80070be:	1acb      	subs	r3, r1, r3
 80070c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80070c4:	fb01 f303 	mul.w	r3, r1, r3
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d173      	bne.n	80071b6 <Batt_Protection_when_chargedischarge+0xb1e>
			  BUZZ_Toggle;
 80070ce:	2104      	movs	r1, #4
 80070d0:	4808      	ldr	r0, [pc, #32]	; (80070f4 <Batt_Protection_when_chargedischarge+0xa5c>)
 80070d2:	f002 fb00 	bl	80096d6 <HAL_GPIO_TogglePin>
			  test_tim2=0;
 80070d6:	4b05      	ldr	r3, [pc, #20]	; (80070ec <Batt_Protection_when_chargedischarge+0xa54>)
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
		  if((test_tim2%500)==0)
 80070dc:	e06b      	b.n	80071b6 <Batt_Protection_when_chargedischarge+0xb1e>
 80070de:	bf00      	nop
 80070e0:	20000064 	.word	0x20000064
 80070e4:	40a00000 	.word	0x40a00000
 80070e8:	200010c4 	.word	0x200010c4
 80070ec:	20000bdc 	.word	0x20000bdc
 80070f0:	10624dd3 	.word	0x10624dd3
 80070f4:	40011000 	.word	0x40011000
 80070f8:	20001500 	.word	0x20001500
 80070fc:	20001098 	.word	0x20001098
 8007100:	200010f8 	.word	0x200010f8
 8007104:	200010b8 	.word	0x200010b8
 8007108:	20000be4 	.word	0x20000be4
 800710c:	20000068 	.word	0x20000068
 8007110:	41200000 	.word	0x41200000
 8007114:	200010ec 	.word	0x200010ec
 8007118:	200009b0 	.word	0x200009b0
 800711c:	200010c0 	.word	0x200010c0
	  else if(Pack_SOC<SOC_Under_Set+2 && Pack_SOC>=SOC_Under_Set)
 8007120:	4b69      	ldr	r3, [pc, #420]	; (80072c8 <Batt_Protection_when_chargedischarge+0xc30>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007128:	4618      	mov	r0, r3
 800712a:	f7f9 fd03 	bl	8000b34 <__addsf3>
 800712e:	4603      	mov	r3, r0
 8007130:	461a      	mov	r2, r3
 8007132:	4b66      	ldr	r3, [pc, #408]	; (80072cc <Batt_Protection_when_chargedischarge+0xc34>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4619      	mov	r1, r3
 8007138:	4610      	mov	r0, r2
 800713a:	f7f9 ffbf 	bl	80010bc <__aeabi_fcmpgt>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d021      	beq.n	8007188 <Batt_Protection_when_chargedischarge+0xaf0>
 8007144:	4b61      	ldr	r3, [pc, #388]	; (80072cc <Batt_Protection_when_chargedischarge+0xc34>)
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	4b5f      	ldr	r3, [pc, #380]	; (80072c8 <Batt_Protection_when_chargedischarge+0xc30>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4619      	mov	r1, r3
 800714e:	4610      	mov	r0, r2
 8007150:	f7f9 ffaa 	bl	80010a8 <__aeabi_fcmpge>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d016      	beq.n	8007188 <Batt_Protection_when_chargedischarge+0xaf0>
		  if((test_tim2%500)==0)
 800715a:	4b5d      	ldr	r3, [pc, #372]	; (80072d0 <Batt_Protection_when_chargedischarge+0xc38>)
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	4b5d      	ldr	r3, [pc, #372]	; (80072d4 <Batt_Protection_when_chargedischarge+0xc3c>)
 8007160:	fb83 1302 	smull	r1, r3, r3, r2
 8007164:	1159      	asrs	r1, r3, #5
 8007166:	17d3      	asrs	r3, r2, #31
 8007168:	1acb      	subs	r3, r1, r3
 800716a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800716e:	fb01 f303 	mul.w	r3, r1, r3
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d11e      	bne.n	80071b6 <Batt_Protection_when_chargedischarge+0xb1e>
			  BUZZ_Toggle;
 8007178:	2104      	movs	r1, #4
 800717a:	4857      	ldr	r0, [pc, #348]	; (80072d8 <Batt_Protection_when_chargedischarge+0xc40>)
 800717c:	f002 faab 	bl	80096d6 <HAL_GPIO_TogglePin>
			  test_tim2=0;
 8007180:	4b53      	ldr	r3, [pc, #332]	; (80072d0 <Batt_Protection_when_chargedischarge+0xc38>)
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]
		  if((test_tim2%500)==0)
 8007186:	e016      	b.n	80071b6 <Batt_Protection_when_chargedischarge+0xb1e>
	  else if(Pack_SOC<SOC_Under_Set)
 8007188:	4b50      	ldr	r3, [pc, #320]	; (80072cc <Batt_Protection_when_chargedischarge+0xc34>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	4b4e      	ldr	r3, [pc, #312]	; (80072c8 <Batt_Protection_when_chargedischarge+0xc30>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4619      	mov	r1, r3
 8007192:	4610      	mov	r0, r2
 8007194:	f7f9 ff74 	bl	8001080 <__aeabi_fcmplt>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d100      	bne.n	80071a0 <Batt_Protection_when_chargedischarge+0xb08>
	  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 800719e:	e08b      	b.n	80072b8 <Batt_Protection_when_chargedischarge+0xc20>
		  Batt_Open_Mode();
 80071a0:	f7fa f908 	bl	80013b4 <Batt_Open_Mode>
		  flag_trip_SOCOverDischarge=ON;
 80071a4:	4b4d      	ldr	r3, [pc, #308]	; (80072dc <Batt_Protection_when_chargedischarge+0xc44>)
 80071a6:	2201      	movs	r2, #1
 80071a8:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80071aa:	2200      	movs	r2, #0
 80071ac:	2104      	movs	r1, #4
 80071ae:	484a      	ldr	r0, [pc, #296]	; (80072d8 <Batt_Protection_when_chargedischarge+0xc40>)
 80071b0:	f002 fa79 	bl	80096a6 <HAL_GPIO_WritePin>
	  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 80071b4:	e080      	b.n	80072b8 <Batt_Protection_when_chargedischarge+0xc20>
 80071b6:	e07f      	b.n	80072b8 <Batt_Protection_when_chargedischarge+0xc20>
	else if(Persen_Imbalance_Set-persen_imbalance<10)
 80071b8:	4b49      	ldr	r3, [pc, #292]	; (80072e0 <Batt_Protection_when_chargedischarge+0xc48>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	4b49      	ldr	r3, [pc, #292]	; (80072e4 <Batt_Protection_when_chargedischarge+0xc4c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4619      	mov	r1, r3
 80071c2:	4610      	mov	r0, r2
 80071c4:	f7f9 fcb4 	bl	8000b30 <__aeabi_fsub>
 80071c8:	4603      	mov	r3, r0
 80071ca:	4947      	ldr	r1, [pc, #284]	; (80072e8 <Batt_Protection_when_chargedischarge+0xc50>)
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7f9 ff57 	bl	8001080 <__aeabi_fcmplt>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d014      	beq.n	8007202 <Batt_Protection_when_chargedischarge+0xb6a>
	  fault_code=6;
 80071d8:	4b44      	ldr	r3, [pc, #272]	; (80072ec <Batt_Protection_when_chargedischarge+0xc54>)
 80071da:	2206      	movs	r2, #6
 80071dc:	701a      	strb	r2, [r3, #0]
	  if(persen_imbalance>Persen_Imbalance_Set)
 80071de:	4b41      	ldr	r3, [pc, #260]	; (80072e4 <Batt_Protection_when_chargedischarge+0xc4c>)
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b3f      	ldr	r3, [pc, #252]	; (80072e0 <Batt_Protection_when_chargedischarge+0xc48>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7f9 ff67 	bl	80010bc <__aeabi_fcmpgt>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d100      	bne.n	80071f6 <Batt_Protection_when_chargedischarge+0xb5e>
}
 80071f4:	e060      	b.n	80072b8 <Batt_Protection_when_chargedischarge+0xc20>
		flag_trip_unbalance=ON;
 80071f6:	4b3e      	ldr	r3, [pc, #248]	; (80072f0 <Batt_Protection_when_chargedischarge+0xc58>)
 80071f8:	2201      	movs	r2, #1
 80071fa:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 80071fc:	f7fa f8da 	bl	80013b4 <Batt_Open_Mode>
}
 8007200:	e05a      	b.n	80072b8 <Batt_Protection_when_chargedischarge+0xc20>
	  if(fault_code!=0) last_fault_code=fault_code;
 8007202:	4b3a      	ldr	r3, [pc, #232]	; (80072ec <Batt_Protection_when_chargedischarge+0xc54>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <Batt_Protection_when_chargedischarge+0xb7a>
 800720a:	4b38      	ldr	r3, [pc, #224]	; (80072ec <Batt_Protection_when_chargedischarge+0xc54>)
 800720c:	781a      	ldrb	r2, [r3, #0]
 800720e:	4b39      	ldr	r3, [pc, #228]	; (80072f4 <Batt_Protection_when_chargedischarge+0xc5c>)
 8007210:	701a      	strb	r2, [r3, #0]
	  fault_code=0;
 8007212:	4b36      	ldr	r3, [pc, #216]	; (80072ec <Batt_Protection_when_chargedischarge+0xc54>)
 8007214:	2200      	movs	r2, #0
 8007216:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8007218:	2200      	movs	r2, #0
 800721a:	2104      	movs	r1, #4
 800721c:	482e      	ldr	r0, [pc, #184]	; (80072d8 <Batt_Protection_when_chargedischarge+0xc40>)
 800721e:	f002 fa42 	bl	80096a6 <HAL_GPIO_WritePin>
	  T_Under_trip=0;
 8007222:	4b35      	ldr	r3, [pc, #212]	; (80072f8 <Batt_Protection_when_chargedischarge+0xc60>)
 8007224:	f04f 0200 	mov.w	r2, #0
 8007228:	601a      	str	r2, [r3, #0]
	  T_trip_cycle=T_trip_cycle-0.001;
 800722a:	4b34      	ldr	r3, [pc, #208]	; (80072fc <Batt_Protection_when_chargedischarge+0xc64>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f7f9 f8fa 	bl	8000428 <__aeabi_f2d>
 8007234:	a322      	add	r3, pc, #136	; (adr r3, 80072c0 <Batt_Protection_when_chargedischarge+0xc28>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f7f8 ff95 	bl	8000168 <__aeabi_dsub>
 800723e:	4603      	mov	r3, r0
 8007240:	460c      	mov	r4, r1
 8007242:	4618      	mov	r0, r3
 8007244:	4621      	mov	r1, r4
 8007246:	f7f9 fc1f 	bl	8000a88 <__aeabi_d2f>
 800724a:	4602      	mov	r2, r0
 800724c:	4b2b      	ldr	r3, [pc, #172]	; (80072fc <Batt_Protection_when_chargedischarge+0xc64>)
 800724e:	601a      	str	r2, [r3, #0]
	  T_I_Over_trip_cycle-=0.001;
 8007250:	4b2b      	ldr	r3, [pc, #172]	; (8007300 <Batt_Protection_when_chargedischarge+0xc68>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4618      	mov	r0, r3
 8007256:	f7f9 f8e7 	bl	8000428 <__aeabi_f2d>
 800725a:	a319      	add	r3, pc, #100	; (adr r3, 80072c0 <Batt_Protection_when_chargedischarge+0xc28>)
 800725c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007260:	f7f8 ff82 	bl	8000168 <__aeabi_dsub>
 8007264:	4603      	mov	r3, r0
 8007266:	460c      	mov	r4, r1
 8007268:	4618      	mov	r0, r3
 800726a:	4621      	mov	r1, r4
 800726c:	f7f9 fc0c 	bl	8000a88 <__aeabi_d2f>
 8007270:	4602      	mov	r2, r0
 8007272:	4b23      	ldr	r3, [pc, #140]	; (8007300 <Batt_Protection_when_chargedischarge+0xc68>)
 8007274:	601a      	str	r2, [r3, #0]
	  if(T_trip_cycle < 0)
 8007276:	4b21      	ldr	r3, [pc, #132]	; (80072fc <Batt_Protection_when_chargedischarge+0xc64>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f04f 0100 	mov.w	r1, #0
 800727e:	4618      	mov	r0, r3
 8007280:	f7f9 fefe 	bl	8001080 <__aeabi_fcmplt>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <Batt_Protection_when_chargedischarge+0xbfa>
		  T_trip_cycle=0;
 800728a:	4b1c      	ldr	r3, [pc, #112]	; (80072fc <Batt_Protection_when_chargedischarge+0xc64>)
 800728c:	f04f 0200 	mov.w	r2, #0
 8007290:	601a      	str	r2, [r3, #0]
	  if(T_I_Over_trip_cycle < 0)
 8007292:	4b1b      	ldr	r3, [pc, #108]	; (8007300 <Batt_Protection_when_chargedischarge+0xc68>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f04f 0100 	mov.w	r1, #0
 800729a:	4618      	mov	r0, r3
 800729c:	f7f9 fef0 	bl	8001080 <__aeabi_fcmplt>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d100      	bne.n	80072a8 <Batt_Protection_when_chargedischarge+0xc10>
}
 80072a6:	e007      	b.n	80072b8 <Batt_Protection_when_chargedischarge+0xc20>
		  T_I_Over_trip_cycle=0;
 80072a8:	4b15      	ldr	r3, [pc, #84]	; (8007300 <Batt_Protection_when_chargedischarge+0xc68>)
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	601a      	str	r2, [r3, #0]
}
 80072b0:	e002      	b.n	80072b8 <Batt_Protection_when_chargedischarge+0xc20>
		if(flag_trip_undervoltage==OFF) {
 80072b2:	bf00      	nop
 80072b4:	e000      	b.n	80072b8 <Batt_Protection_when_chargedischarge+0xc20>
		if(flag_trip_overcurrentdischarge==OFF)
 80072b6:	bf00      	nop
}
 80072b8:	bf00      	nop
 80072ba:	bdb0      	pop	{r4, r5, r7, pc}
 80072bc:	f3af 8000 	nop.w
 80072c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80072c4:	3f50624d 	.word	0x3f50624d
 80072c8:	20000068 	.word	0x20000068
 80072cc:	20000be4 	.word	0x20000be4
 80072d0:	20000bdc 	.word	0x20000bdc
 80072d4:	10624dd3 	.word	0x10624dd3
 80072d8:	40011000 	.word	0x40011000
 80072dc:	200010ec 	.word	0x200010ec
 80072e0:	20000078 	.word	0x20000078
 80072e4:	20000bb8 	.word	0x20000bb8
 80072e8:	41200000 	.word	0x41200000
 80072ec:	200010c0 	.word	0x200010c0
 80072f0:	20000c88 	.word	0x20000c88
 80072f4:	200014fc 	.word	0x200014fc
 80072f8:	20001080 	.word	0x20001080
 80072fc:	200010cc 	.word	0x200010cc
 8007300:	200010fc 	.word	0x200010fc

08007304 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800730c:	4b11      	ldr	r3, [pc, #68]	; (8007354 <_sbrk+0x50>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d102      	bne.n	800731a <_sbrk+0x16>
		heap_end = &end;
 8007314:	4b0f      	ldr	r3, [pc, #60]	; (8007354 <_sbrk+0x50>)
 8007316:	4a10      	ldr	r2, [pc, #64]	; (8007358 <_sbrk+0x54>)
 8007318:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800731a:	4b0e      	ldr	r3, [pc, #56]	; (8007354 <_sbrk+0x50>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007320:	4b0c      	ldr	r3, [pc, #48]	; (8007354 <_sbrk+0x50>)
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4413      	add	r3, r2
 8007328:	466a      	mov	r2, sp
 800732a:	4293      	cmp	r3, r2
 800732c:	d907      	bls.n	800733e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800732e:	f004 f95b 	bl	800b5e8 <__errno>
 8007332:	4602      	mov	r2, r0
 8007334:	230c      	movs	r3, #12
 8007336:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007338:	f04f 33ff 	mov.w	r3, #4294967295
 800733c:	e006      	b.n	800734c <_sbrk+0x48>
	}

	heap_end += incr;
 800733e:	4b05      	ldr	r3, [pc, #20]	; (8007354 <_sbrk+0x50>)
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4413      	add	r3, r2
 8007346:	4a03      	ldr	r2, [pc, #12]	; (8007354 <_sbrk+0x50>)
 8007348:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800734a:	68fb      	ldr	r3, [r7, #12]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	200006a0 	.word	0x200006a0
 8007358:	20001610 	.word	0x20001610

0800735c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8007360:	4b15      	ldr	r3, [pc, #84]	; (80073b8 <SystemInit+0x5c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a14      	ldr	r2, [pc, #80]	; (80073b8 <SystemInit+0x5c>)
 8007366:	f043 0301 	orr.w	r3, r3, #1
 800736a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800736c:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <SystemInit+0x5c>)
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	4911      	ldr	r1, [pc, #68]	; (80073b8 <SystemInit+0x5c>)
 8007372:	4b12      	ldr	r3, [pc, #72]	; (80073bc <SystemInit+0x60>)
 8007374:	4013      	ands	r3, r2
 8007376:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8007378:	4b0f      	ldr	r3, [pc, #60]	; (80073b8 <SystemInit+0x5c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a0e      	ldr	r2, [pc, #56]	; (80073b8 <SystemInit+0x5c>)
 800737e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007386:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007388:	4b0b      	ldr	r3, [pc, #44]	; (80073b8 <SystemInit+0x5c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a0a      	ldr	r2, [pc, #40]	; (80073b8 <SystemInit+0x5c>)
 800738e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007392:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8007394:	4b08      	ldr	r3, [pc, #32]	; (80073b8 <SystemInit+0x5c>)
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	4a07      	ldr	r2, [pc, #28]	; (80073b8 <SystemInit+0x5c>)
 800739a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800739e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80073a0:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <SystemInit+0x5c>)
 80073a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80073a6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <SystemInit+0x64>)
 80073aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80073ae:	609a      	str	r2, [r3, #8]
#endif 
}
 80073b0:	bf00      	nop
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bc80      	pop	{r7}
 80073b6:	4770      	bx	lr
 80073b8:	40021000 	.word	0x40021000
 80073bc:	f8ff0000 	.word	0xf8ff0000
 80073c0:	e000ed00 	.word	0xe000ed00

080073c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80073ca:	f107 0308 	add.w	r3, r7, #8
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	605a      	str	r2, [r3, #4]
 80073d4:	609a      	str	r2, [r3, #8]
 80073d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80073d8:	463b      	mov	r3, r7
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80073e0:	4b1d      	ldr	r3, [pc, #116]	; (8007458 <MX_TIM2_Init+0x94>)
 80073e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80073e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80073e8:	4b1b      	ldr	r3, [pc, #108]	; (8007458 <MX_TIM2_Init+0x94>)
 80073ea:	223f      	movs	r2, #63	; 0x3f
 80073ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073ee:	4b1a      	ldr	r3, [pc, #104]	; (8007458 <MX_TIM2_Init+0x94>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80073f4:	4b18      	ldr	r3, [pc, #96]	; (8007458 <MX_TIM2_Init+0x94>)
 80073f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80073fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80073fc:	4b16      	ldr	r3, [pc, #88]	; (8007458 <MX_TIM2_Init+0x94>)
 80073fe:	2200      	movs	r2, #0
 8007400:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007402:	4b15      	ldr	r3, [pc, #84]	; (8007458 <MX_TIM2_Init+0x94>)
 8007404:	2200      	movs	r2, #0
 8007406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007408:	4813      	ldr	r0, [pc, #76]	; (8007458 <MX_TIM2_Init+0x94>)
 800740a:	f003 fc3c 	bl	800ac86 <HAL_TIM_Base_Init>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007414:	f7fb fe48 	bl	80030a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800741c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800741e:	f107 0308 	add.w	r3, r7, #8
 8007422:	4619      	mov	r1, r3
 8007424:	480c      	ldr	r0, [pc, #48]	; (8007458 <MX_TIM2_Init+0x94>)
 8007426:	f003 fd84 	bl	800af32 <HAL_TIM_ConfigClockSource>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007430:	f7fb fe3a 	bl	80030a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007434:	2300      	movs	r3, #0
 8007436:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007438:	2300      	movs	r3, #0
 800743a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800743c:	463b      	mov	r3, r7
 800743e:	4619      	mov	r1, r3
 8007440:	4805      	ldr	r0, [pc, #20]	; (8007458 <MX_TIM2_Init+0x94>)
 8007442:	f003 ff53 	bl	800b2ec <HAL_TIMEx_MasterConfigSynchronization>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800744c:	f7fb fe2c 	bl	80030a8 <Error_Handler>
  }

}
 8007450:	bf00      	nop
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	20001548 	.word	0x20001548

0800745c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007462:	f107 0308 	add.w	r3, r7, #8
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	605a      	str	r2, [r3, #4]
 800746c:	609a      	str	r2, [r3, #8]
 800746e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007470:	463b      	mov	r3, r7
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8007478:	4b1d      	ldr	r3, [pc, #116]	; (80074f0 <MX_TIM3_Init+0x94>)
 800747a:	4a1e      	ldr	r2, [pc, #120]	; (80074f4 <MX_TIM3_Init+0x98>)
 800747c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 800747e:	4b1c      	ldr	r3, [pc, #112]	; (80074f0 <MX_TIM3_Init+0x94>)
 8007480:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8007484:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007486:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <MX_TIM3_Init+0x94>)
 8007488:	2200      	movs	r2, #0
 800748a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800748c:	4b18      	ldr	r3, [pc, #96]	; (80074f0 <MX_TIM3_Init+0x94>)
 800748e:	2263      	movs	r2, #99	; 0x63
 8007490:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007492:	4b17      	ldr	r3, [pc, #92]	; (80074f0 <MX_TIM3_Init+0x94>)
 8007494:	2200      	movs	r2, #0
 8007496:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007498:	4b15      	ldr	r3, [pc, #84]	; (80074f0 <MX_TIM3_Init+0x94>)
 800749a:	2200      	movs	r2, #0
 800749c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800749e:	4814      	ldr	r0, [pc, #80]	; (80074f0 <MX_TIM3_Init+0x94>)
 80074a0:	f003 fbf1 	bl	800ac86 <HAL_TIM_Base_Init>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80074aa:	f7fb fdfd 	bl	80030a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80074ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80074b4:	f107 0308 	add.w	r3, r7, #8
 80074b8:	4619      	mov	r1, r3
 80074ba:	480d      	ldr	r0, [pc, #52]	; (80074f0 <MX_TIM3_Init+0x94>)
 80074bc:	f003 fd39 	bl	800af32 <HAL_TIM_ConfigClockSource>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80074c6:	f7fb fdef 	bl	80030a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074ca:	2300      	movs	r3, #0
 80074cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074ce:	2300      	movs	r3, #0
 80074d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80074d2:	463b      	mov	r3, r7
 80074d4:	4619      	mov	r1, r3
 80074d6:	4806      	ldr	r0, [pc, #24]	; (80074f0 <MX_TIM3_Init+0x94>)
 80074d8:	f003 ff08 	bl	800b2ec <HAL_TIMEx_MasterConfigSynchronization>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80074e2:	f7fb fde1 	bl	80030a8 <Error_Handler>
  }

}
 80074e6:	bf00      	nop
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20001508 	.word	0x20001508
 80074f4:	40000400 	.word	0x40000400

080074f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007508:	d114      	bne.n	8007534 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800750a:	4b19      	ldr	r3, [pc, #100]	; (8007570 <HAL_TIM_Base_MspInit+0x78>)
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	4a18      	ldr	r2, [pc, #96]	; (8007570 <HAL_TIM_Base_MspInit+0x78>)
 8007510:	f043 0301 	orr.w	r3, r3, #1
 8007514:	61d3      	str	r3, [r2, #28]
 8007516:	4b16      	ldr	r3, [pc, #88]	; (8007570 <HAL_TIM_Base_MspInit+0x78>)
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8007522:	2200      	movs	r2, #0
 8007524:	2102      	movs	r1, #2
 8007526:	201c      	movs	r0, #28
 8007528:	f001 fd01 	bl	8008f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800752c:	201c      	movs	r0, #28
 800752e:	f001 fd1a 	bl	8008f66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007532:	e018      	b.n	8007566 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a0e      	ldr	r2, [pc, #56]	; (8007574 <HAL_TIM_Base_MspInit+0x7c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d113      	bne.n	8007566 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800753e:	4b0c      	ldr	r3, [pc, #48]	; (8007570 <HAL_TIM_Base_MspInit+0x78>)
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	4a0b      	ldr	r2, [pc, #44]	; (8007570 <HAL_TIM_Base_MspInit+0x78>)
 8007544:	f043 0302 	orr.w	r3, r3, #2
 8007548:	61d3      	str	r3, [r2, #28]
 800754a:	4b09      	ldr	r3, [pc, #36]	; (8007570 <HAL_TIM_Base_MspInit+0x78>)
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	60bb      	str	r3, [r7, #8]
 8007554:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8007556:	2200      	movs	r2, #0
 8007558:	2101      	movs	r1, #1
 800755a:	201d      	movs	r0, #29
 800755c:	f001 fce7 	bl	8008f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007560:	201d      	movs	r0, #29
 8007562:	f001 fd00 	bl	8008f66 <HAL_NVIC_EnableIRQ>
}
 8007566:	bf00      	nop
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	40021000 	.word	0x40021000
 8007574:	40000400 	.word	0x40000400

08007578 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800757c:	4b11      	ldr	r3, [pc, #68]	; (80075c4 <MX_USART1_UART_Init+0x4c>)
 800757e:	4a12      	ldr	r2, [pc, #72]	; (80075c8 <MX_USART1_UART_Init+0x50>)
 8007580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007582:	4b10      	ldr	r3, [pc, #64]	; (80075c4 <MX_USART1_UART_Init+0x4c>)
 8007584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800758a:	4b0e      	ldr	r3, [pc, #56]	; (80075c4 <MX_USART1_UART_Init+0x4c>)
 800758c:	2200      	movs	r2, #0
 800758e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007590:	4b0c      	ldr	r3, [pc, #48]	; (80075c4 <MX_USART1_UART_Init+0x4c>)
 8007592:	2200      	movs	r2, #0
 8007594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007596:	4b0b      	ldr	r3, [pc, #44]	; (80075c4 <MX_USART1_UART_Init+0x4c>)
 8007598:	2200      	movs	r2, #0
 800759a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800759c:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <MX_USART1_UART_Init+0x4c>)
 800759e:	220c      	movs	r2, #12
 80075a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075a2:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <MX_USART1_UART_Init+0x4c>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80075a8:	4b06      	ldr	r3, [pc, #24]	; (80075c4 <MX_USART1_UART_Init+0x4c>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80075ae:	4805      	ldr	r0, [pc, #20]	; (80075c4 <MX_USART1_UART_Init+0x4c>)
 80075b0:	f003 fef2 	bl	800b398 <HAL_UART_Init>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80075ba:	f7fb fd75 	bl	80030a8 <Error_Handler>
  }

}
 80075be:	bf00      	nop
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	200015c8 	.word	0x200015c8
 80075c8:	40013800 	.word	0x40013800

080075cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80075d0:	4b11      	ldr	r3, [pc, #68]	; (8007618 <MX_USART3_UART_Init+0x4c>)
 80075d2:	4a12      	ldr	r2, [pc, #72]	; (800761c <MX_USART3_UART_Init+0x50>)
 80075d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80075d6:	4b10      	ldr	r3, [pc, #64]	; (8007618 <MX_USART3_UART_Init+0x4c>)
 80075d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80075dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80075de:	4b0e      	ldr	r3, [pc, #56]	; (8007618 <MX_USART3_UART_Init+0x4c>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80075e4:	4b0c      	ldr	r3, [pc, #48]	; (8007618 <MX_USART3_UART_Init+0x4c>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80075ea:	4b0b      	ldr	r3, [pc, #44]	; (8007618 <MX_USART3_UART_Init+0x4c>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80075f0:	4b09      	ldr	r3, [pc, #36]	; (8007618 <MX_USART3_UART_Init+0x4c>)
 80075f2:	220c      	movs	r2, #12
 80075f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075f6:	4b08      	ldr	r3, [pc, #32]	; (8007618 <MX_USART3_UART_Init+0x4c>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80075fc:	4b06      	ldr	r3, [pc, #24]	; (8007618 <MX_USART3_UART_Init+0x4c>)
 80075fe:	2200      	movs	r2, #0
 8007600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007602:	4805      	ldr	r0, [pc, #20]	; (8007618 <MX_USART3_UART_Init+0x4c>)
 8007604:	f003 fec8 	bl	800b398 <HAL_UART_Init>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800760e:	f7fb fd4b 	bl	80030a8 <Error_Handler>
  }

}
 8007612:	bf00      	nop
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20001588 	.word	0x20001588
 800761c:	40004800 	.word	0x40004800

08007620 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08c      	sub	sp, #48	; 0x30
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007628:	f107 031c 	add.w	r3, r7, #28
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	605a      	str	r2, [r3, #4]
 8007632:	609a      	str	r2, [r3, #8]
 8007634:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a41      	ldr	r2, [pc, #260]	; (8007740 <HAL_UART_MspInit+0x120>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d132      	bne.n	80076a6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007640:	4b40      	ldr	r3, [pc, #256]	; (8007744 <HAL_UART_MspInit+0x124>)
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	4a3f      	ldr	r2, [pc, #252]	; (8007744 <HAL_UART_MspInit+0x124>)
 8007646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800764a:	6193      	str	r3, [r2, #24]
 800764c:	4b3d      	ldr	r3, [pc, #244]	; (8007744 <HAL_UART_MspInit+0x124>)
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007654:	61bb      	str	r3, [r7, #24]
 8007656:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007658:	4b3a      	ldr	r3, [pc, #232]	; (8007744 <HAL_UART_MspInit+0x124>)
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	4a39      	ldr	r2, [pc, #228]	; (8007744 <HAL_UART_MspInit+0x124>)
 800765e:	f043 0304 	orr.w	r3, r3, #4
 8007662:	6193      	str	r3, [r2, #24]
 8007664:	4b37      	ldr	r3, [pc, #220]	; (8007744 <HAL_UART_MspInit+0x124>)
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007676:	2302      	movs	r3, #2
 8007678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800767a:	2303      	movs	r3, #3
 800767c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800767e:	f107 031c 	add.w	r3, r7, #28
 8007682:	4619      	mov	r1, r3
 8007684:	4830      	ldr	r0, [pc, #192]	; (8007748 <HAL_UART_MspInit+0x128>)
 8007686:	f001 fe9d 	bl	80093c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800768a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800768e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007690:	2300      	movs	r3, #0
 8007692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007694:	2300      	movs	r3, #0
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007698:	f107 031c 	add.w	r3, r7, #28
 800769c:	4619      	mov	r1, r3
 800769e:	482a      	ldr	r0, [pc, #168]	; (8007748 <HAL_UART_MspInit+0x128>)
 80076a0:	f001 fe90 	bl	80093c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80076a4:	e048      	b.n	8007738 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a28      	ldr	r2, [pc, #160]	; (800774c <HAL_UART_MspInit+0x12c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d143      	bne.n	8007738 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART3_CLK_ENABLE();
 80076b0:	4b24      	ldr	r3, [pc, #144]	; (8007744 <HAL_UART_MspInit+0x124>)
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	4a23      	ldr	r2, [pc, #140]	; (8007744 <HAL_UART_MspInit+0x124>)
 80076b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076ba:	61d3      	str	r3, [r2, #28]
 80076bc:	4b21      	ldr	r3, [pc, #132]	; (8007744 <HAL_UART_MspInit+0x124>)
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80076c8:	4b1e      	ldr	r3, [pc, #120]	; (8007744 <HAL_UART_MspInit+0x124>)
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	4a1d      	ldr	r2, [pc, #116]	; (8007744 <HAL_UART_MspInit+0x124>)
 80076ce:	f043 0310 	orr.w	r3, r3, #16
 80076d2:	6193      	str	r3, [r2, #24]
 80076d4:	4b1b      	ldr	r3, [pc, #108]	; (8007744 <HAL_UART_MspInit+0x124>)
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	f003 0310 	and.w	r3, r3, #16
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80076e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076e6:	2302      	movs	r3, #2
 80076e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80076ea:	2303      	movs	r3, #3
 80076ec:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076ee:	f107 031c 	add.w	r3, r7, #28
 80076f2:	4619      	mov	r1, r3
 80076f4:	4816      	ldr	r0, [pc, #88]	; (8007750 <HAL_UART_MspInit+0x130>)
 80076f6:	f001 fe65 	bl	80093c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80076fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007700:	2300      	movs	r3, #0
 8007702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007704:	2300      	movs	r3, #0
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007708:	f107 031c 	add.w	r3, r7, #28
 800770c:	4619      	mov	r1, r3
 800770e:	4810      	ldr	r0, [pc, #64]	; (8007750 <HAL_UART_MspInit+0x130>)
 8007710:	f001 fe58 	bl	80093c4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8007714:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <HAL_UART_MspInit+0x134>)
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8007728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	f043 0310 	orr.w	r3, r3, #16
 8007730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007732:	4a08      	ldr	r2, [pc, #32]	; (8007754 <HAL_UART_MspInit+0x134>)
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007736:	6053      	str	r3, [r2, #4]
}
 8007738:	bf00      	nop
 800773a:	3730      	adds	r7, #48	; 0x30
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	40013800 	.word	0x40013800
 8007744:	40021000 	.word	0x40021000
 8007748:	40010800 	.word	0x40010800
 800774c:	40004800 	.word	0x40004800
 8007750:	40011000 	.word	0x40011000
 8007754:	40010000 	.word	0x40010000

08007758 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007758:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800775a:	e003      	b.n	8007764 <LoopCopyDataInit>

0800775c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800775c:	4b0b      	ldr	r3, [pc, #44]	; (800778c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800775e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007760:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007762:	3104      	adds	r1, #4

08007764 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007764:	480a      	ldr	r0, [pc, #40]	; (8007790 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007766:	4b0b      	ldr	r3, [pc, #44]	; (8007794 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007768:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800776a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800776c:	d3f6      	bcc.n	800775c <CopyDataInit>
  ldr r2, =_sbss
 800776e:	4a0a      	ldr	r2, [pc, #40]	; (8007798 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007770:	e002      	b.n	8007778 <LoopFillZerobss>

08007772 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007772:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007774:	f842 3b04 	str.w	r3, [r2], #4

08007778 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007778:	4b08      	ldr	r3, [pc, #32]	; (800779c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800777a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800777c:	d3f9      	bcc.n	8007772 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800777e:	f7ff fded 	bl	800735c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007782:	f003 ff37 	bl	800b5f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007786:	f7fa ff87 	bl	8002698 <main>
  bx lr
 800778a:	4770      	bx	lr
  ldr r3, =_sidata
 800778c:	0800e954 	.word	0x0800e954
  ldr r0, =_sdata
 8007790:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007794:	20000264 	.word	0x20000264
  ldr r2, =_sbss
 8007798:	20000264 	.word	0x20000264
  ldr r3, = _ebss
 800779c:	20001610 	.word	0x20001610

080077a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80077a0:	e7fe      	b.n	80077a0 <ADC1_2_IRQHandler>
	...

080077a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80077a8:	4b08      	ldr	r3, [pc, #32]	; (80077cc <HAL_Init+0x28>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a07      	ldr	r2, [pc, #28]	; (80077cc <HAL_Init+0x28>)
 80077ae:	f043 0310 	orr.w	r3, r3, #16
 80077b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077b4:	2003      	movs	r0, #3
 80077b6:	f001 fbaf 	bl	8008f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80077ba:	2000      	movs	r0, #0
 80077bc:	f000 f808 	bl	80077d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80077c0:	f7fd f8b4 	bl	800492c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	40022000 	.word	0x40022000

080077d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80077d8:	4b12      	ldr	r3, [pc, #72]	; (8007824 <HAL_InitTick+0x54>)
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	4b12      	ldr	r3, [pc, #72]	; (8007828 <HAL_InitTick+0x58>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	4619      	mov	r1, r3
 80077e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80077ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ee:	4618      	mov	r0, r3
 80077f0:	f001 fbc7 	bl	8008f82 <HAL_SYSTICK_Config>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e00e      	b.n	800781c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b0f      	cmp	r3, #15
 8007802:	d80a      	bhi.n	800781a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007804:	2200      	movs	r2, #0
 8007806:	6879      	ldr	r1, [r7, #4]
 8007808:	f04f 30ff 	mov.w	r0, #4294967295
 800780c:	f001 fb8f 	bl	8008f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007810:	4a06      	ldr	r2, [pc, #24]	; (800782c <HAL_InitTick+0x5c>)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	e000      	b.n	800781c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
}
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000084 	.word	0x20000084
 8007828:	2000008c 	.word	0x2000008c
 800782c:	20000088 	.word	0x20000088

08007830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007834:	4b05      	ldr	r3, [pc, #20]	; (800784c <HAL_IncTick+0x1c>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	4b05      	ldr	r3, [pc, #20]	; (8007850 <HAL_IncTick+0x20>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4413      	add	r3, r2
 8007840:	4a03      	ldr	r2, [pc, #12]	; (8007850 <HAL_IncTick+0x20>)
 8007842:	6013      	str	r3, [r2, #0]
}
 8007844:	bf00      	nop
 8007846:	46bd      	mov	sp, r7
 8007848:	bc80      	pop	{r7}
 800784a:	4770      	bx	lr
 800784c:	2000008c 	.word	0x2000008c
 8007850:	20001608 	.word	0x20001608

08007854 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007854:	b480      	push	{r7}
 8007856:	af00      	add	r7, sp, #0
  return uwTick;
 8007858:	4b02      	ldr	r3, [pc, #8]	; (8007864 <HAL_GetTick+0x10>)
 800785a:	681b      	ldr	r3, [r3, #0]
}
 800785c:	4618      	mov	r0, r3
 800785e:	46bd      	mov	sp, r7
 8007860:	bc80      	pop	{r7}
 8007862:	4770      	bx	lr
 8007864:	20001608 	.word	0x20001608

08007868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007870:	f7ff fff0 	bl	8007854 <HAL_GetTick>
 8007874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007880:	d005      	beq.n	800788e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007882:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <HAL_Delay+0x40>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	4413      	add	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800788e:	bf00      	nop
 8007890:	f7ff ffe0 	bl	8007854 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	429a      	cmp	r2, r3
 800789e:	d8f7      	bhi.n	8007890 <HAL_Delay+0x28>
  {
  }
}
 80078a0:	bf00      	nop
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	2000008c 	.word	0x2000008c

080078ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80078b8:	2300      	movs	r3, #0
 80078ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80078c0:	2300      	movs	r3, #0
 80078c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e0be      	b.n	8007a4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d109      	bne.n	80078f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7fa fc3a 	bl	8002164 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 faf7 	bl	8007ee4 <ADC_ConversionStop_Disable>
 80078f6:	4603      	mov	r3, r0
 80078f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fe:	f003 0310 	and.w	r3, r3, #16
 8007902:	2b00      	cmp	r3, #0
 8007904:	f040 8099 	bne.w	8007a3a <HAL_ADC_Init+0x18e>
 8007908:	7dfb      	ldrb	r3, [r7, #23]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f040 8095 	bne.w	8007a3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007914:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007918:	f023 0302 	bic.w	r3, r3, #2
 800791c:	f043 0202 	orr.w	r2, r3, #2
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800792c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	7b1b      	ldrb	r3, [r3, #12]
 8007932:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007934:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	4313      	orrs	r3, r2
 800793a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007944:	d003      	beq.n	800794e <HAL_ADC_Init+0xa2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d102      	bne.n	8007954 <HAL_ADC_Init+0xa8>
 800794e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007952:	e000      	b.n	8007956 <HAL_ADC_Init+0xaa>
 8007954:	2300      	movs	r3, #0
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	4313      	orrs	r3, r2
 800795a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	7d1b      	ldrb	r3, [r3, #20]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d119      	bne.n	8007998 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	7b1b      	ldrb	r3, [r3, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	3b01      	subs	r3, #1
 8007972:	035a      	lsls	r2, r3, #13
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	4313      	orrs	r3, r2
 8007978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	e00b      	b.n	8007998 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	f043 0220 	orr.w	r2, r3, #32
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	f043 0201 	orr.w	r2, r3, #1
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689a      	ldr	r2, [r3, #8]
 80079b2:	4b28      	ldr	r3, [pc, #160]	; (8007a54 <HAL_ADC_Init+0x1a8>)
 80079b4:	4013      	ands	r3, r2
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	6812      	ldr	r2, [r2, #0]
 80079ba:	68b9      	ldr	r1, [r7, #8]
 80079bc:	430b      	orrs	r3, r1
 80079be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c8:	d003      	beq.n	80079d2 <HAL_ADC_Init+0x126>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d104      	bne.n	80079dc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	051b      	lsls	r3, r3, #20
 80079da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689a      	ldr	r2, [r3, #8]
 80079f6:	4b18      	ldr	r3, [pc, #96]	; (8007a58 <HAL_ADC_Init+0x1ac>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d10b      	bne.n	8007a18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	f043 0201 	orr.w	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007a16:	e018      	b.n	8007a4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1c:	f023 0312 	bic.w	r3, r3, #18
 8007a20:	f043 0210 	orr.w	r2, r3, #16
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	f043 0201 	orr.w	r2, r3, #1
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007a38:	e007      	b.n	8007a4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3e:	f043 0210 	orr.w	r2, r3, #16
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	ffe1f7fd 	.word	0xffe1f7fd
 8007a58:	ff1f0efe 	.word	0xff1f0efe

08007a5c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a64      	ldr	r2, [pc, #400]	; (8007c04 <HAL_ADC_Start_DMA+0x1a8>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d004      	beq.n	8007a80 <HAL_ADC_Start_DMA+0x24>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a63      	ldr	r2, [pc, #396]	; (8007c08 <HAL_ADC_Start_DMA+0x1ac>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d106      	bne.n	8007a8e <HAL_ADC_Start_DMA+0x32>
 8007a80:	4b60      	ldr	r3, [pc, #384]	; (8007c04 <HAL_ADC_Start_DMA+0x1a8>)
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f040 80b3 	bne.w	8007bf4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d101      	bne.n	8007a9c <HAL_ADC_Start_DMA+0x40>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	e0ae      	b.n	8007bfa <HAL_ADC_Start_DMA+0x19e>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 f9cb 	bl	8007e40 <ADC_Enable>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f040 809a 	bne.w	8007bea <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007abe:	f023 0301 	bic.w	r3, r3, #1
 8007ac2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a4e      	ldr	r2, [pc, #312]	; (8007c08 <HAL_ADC_Start_DMA+0x1ac>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d105      	bne.n	8007ae0 <HAL_ADC_Start_DMA+0x84>
 8007ad4:	4b4b      	ldr	r3, [pc, #300]	; (8007c04 <HAL_ADC_Start_DMA+0x1a8>)
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d115      	bne.n	8007b0c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d026      	beq.n	8007b48 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007b02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007b0a:	e01d      	b.n	8007b48 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a39      	ldr	r2, [pc, #228]	; (8007c04 <HAL_ADC_Start_DMA+0x1a8>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d004      	beq.n	8007b2c <HAL_ADC_Start_DMA+0xd0>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a38      	ldr	r2, [pc, #224]	; (8007c08 <HAL_ADC_Start_DMA+0x1ac>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d10d      	bne.n	8007b48 <HAL_ADC_Start_DMA+0xec>
 8007b2c:	4b35      	ldr	r3, [pc, #212]	; (8007c04 <HAL_ADC_Start_DMA+0x1a8>)
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007b40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d006      	beq.n	8007b62 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	f023 0206 	bic.w	r2, r3, #6
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b60:	e002      	b.n	8007b68 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	4a25      	ldr	r2, [pc, #148]	; (8007c0c <HAL_ADC_Start_DMA+0x1b0>)
 8007b76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	4a24      	ldr	r2, [pc, #144]	; (8007c10 <HAL_ADC_Start_DMA+0x1b4>)
 8007b7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	4a23      	ldr	r2, [pc, #140]	; (8007c14 <HAL_ADC_Start_DMA+0x1b8>)
 8007b86:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f06f 0202 	mvn.w	r2, #2
 8007b90:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ba0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a18      	ldr	r0, [r3, #32]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	334c      	adds	r3, #76	; 0x4c
 8007bac:	4619      	mov	r1, r3
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f001 fa4d 	bl	8009050 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007bc0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007bc4:	d108      	bne.n	8007bd8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8007bd4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8007bd6:	e00f      	b.n	8007bf8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689a      	ldr	r2, [r3, #8]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007be6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8007be8:	e006      	b.n	8007bf8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8007bf2:	e001      	b.n	8007bf8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3718      	adds	r7, #24
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	40012400 	.word	0x40012400
 8007c08:	40012800 	.word	0x40012800
 8007c0c:	08007f59 	.word	0x08007f59
 8007c10:	08007fd5 	.word	0x08007fd5
 8007c14:	08007ff1 	.word	0x08007ff1

08007c18 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bc80      	pop	{r7}
 8007c28:	4770      	bx	lr

08007c2a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bc80      	pop	{r7}
 8007c3a:	4770      	bx	lr

08007c3c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bc80      	pop	{r7}
 8007c4c:	4770      	bx	lr
	...

08007c50 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_ADC_ConfigChannel+0x20>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e0dc      	b.n	8007e2a <HAL_ADC_ConfigChannel+0x1da>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	2b06      	cmp	r3, #6
 8007c7e:	d81c      	bhi.n	8007cba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	685a      	ldr	r2, [r3, #4]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	3b05      	subs	r3, #5
 8007c92:	221f      	movs	r2, #31
 8007c94:	fa02 f303 	lsl.w	r3, r2, r3
 8007c98:	43db      	mvns	r3, r3
 8007c9a:	4019      	ands	r1, r3
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	6818      	ldr	r0, [r3, #0]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	3b05      	subs	r3, #5
 8007cac:	fa00 f203 	lsl.w	r2, r0, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	635a      	str	r2, [r3, #52]	; 0x34
 8007cb8:	e03c      	b.n	8007d34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	2b0c      	cmp	r3, #12
 8007cc0:	d81c      	bhi.n	8007cfc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	3b23      	subs	r3, #35	; 0x23
 8007cd4:	221f      	movs	r2, #31
 8007cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cda:	43db      	mvns	r3, r3
 8007cdc:	4019      	ands	r1, r3
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	6818      	ldr	r0, [r3, #0]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	3b23      	subs	r3, #35	; 0x23
 8007cee:	fa00 f203 	lsl.w	r2, r0, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8007cfa:	e01b      	b.n	8007d34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	3b41      	subs	r3, #65	; 0x41
 8007d0e:	221f      	movs	r2, #31
 8007d10:	fa02 f303 	lsl.w	r3, r2, r3
 8007d14:	43db      	mvns	r3, r3
 8007d16:	4019      	ands	r1, r3
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	6818      	ldr	r0, [r3, #0]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	4613      	mov	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	3b41      	subs	r3, #65	; 0x41
 8007d28:	fa00 f203 	lsl.w	r2, r0, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b09      	cmp	r3, #9
 8007d3a:	d91c      	bls.n	8007d76 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68d9      	ldr	r1, [r3, #12]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	4613      	mov	r3, r2
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	4413      	add	r3, r2
 8007d4c:	3b1e      	subs	r3, #30
 8007d4e:	2207      	movs	r2, #7
 8007d50:	fa02 f303 	lsl.w	r3, r2, r3
 8007d54:	43db      	mvns	r3, r3
 8007d56:	4019      	ands	r1, r3
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	6898      	ldr	r0, [r3, #8]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	4613      	mov	r3, r2
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	4413      	add	r3, r2
 8007d66:	3b1e      	subs	r3, #30
 8007d68:	fa00 f203 	lsl.w	r2, r0, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	60da      	str	r2, [r3, #12]
 8007d74:	e019      	b.n	8007daa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6919      	ldr	r1, [r3, #16]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	4613      	mov	r3, r2
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	4413      	add	r3, r2
 8007d86:	2207      	movs	r2, #7
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	4019      	ands	r1, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	6898      	ldr	r0, [r3, #8]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	4413      	add	r3, r2
 8007d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b10      	cmp	r3, #16
 8007db0:	d003      	beq.n	8007dba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007db6:	2b11      	cmp	r3, #17
 8007db8:	d132      	bne.n	8007e20 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a1d      	ldr	r2, [pc, #116]	; (8007e34 <HAL_ADC_ConfigChannel+0x1e4>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d125      	bne.n	8007e10 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d126      	bne.n	8007e20 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007de0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b10      	cmp	r3, #16
 8007de8:	d11a      	bne.n	8007e20 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007dea:	4b13      	ldr	r3, [pc, #76]	; (8007e38 <HAL_ADC_ConfigChannel+0x1e8>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a13      	ldr	r2, [pc, #76]	; (8007e3c <HAL_ADC_ConfigChannel+0x1ec>)
 8007df0:	fba2 2303 	umull	r2, r3, r2, r3
 8007df4:	0c9a      	lsrs	r2, r3, #18
 8007df6:	4613      	mov	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007e00:	e002      	b.n	8007e08 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1f9      	bne.n	8007e02 <HAL_ADC_ConfigChannel+0x1b2>
 8007e0e:	e007      	b.n	8007e20 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e14:	f043 0220 	orr.w	r2, r3, #32
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bc80      	pop	{r7}
 8007e32:	4770      	bx	lr
 8007e34:	40012400 	.word	0x40012400
 8007e38:	20000084 	.word	0x20000084
 8007e3c:	431bde83 	.word	0x431bde83

08007e40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d039      	beq.n	8007ed2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f042 0201 	orr.w	r2, r2, #1
 8007e6c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007e6e:	4b1b      	ldr	r3, [pc, #108]	; (8007edc <ADC_Enable+0x9c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a1b      	ldr	r2, [pc, #108]	; (8007ee0 <ADC_Enable+0xa0>)
 8007e74:	fba2 2303 	umull	r2, r3, r2, r3
 8007e78:	0c9b      	lsrs	r3, r3, #18
 8007e7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007e7c:	e002      	b.n	8007e84 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1f9      	bne.n	8007e7e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007e8a:	f7ff fce3 	bl	8007854 <HAL_GetTick>
 8007e8e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007e90:	e018      	b.n	8007ec4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007e92:	f7ff fcdf 	bl	8007854 <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d911      	bls.n	8007ec4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea4:	f043 0210 	orr.w	r2, r3, #16
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb0:	f043 0201 	orr.w	r2, r3, #1
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e007      	b.n	8007ed4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d1df      	bne.n	8007e92 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	20000084 	.word	0x20000084
 8007ee0:	431bde83 	.word	0x431bde83

08007ee4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d127      	bne.n	8007f4e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0201 	bic.w	r2, r2, #1
 8007f0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007f0e:	f7ff fca1 	bl	8007854 <HAL_GetTick>
 8007f12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007f14:	e014      	b.n	8007f40 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007f16:	f7ff fc9d 	bl	8007854 <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d90d      	bls.n	8007f40 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f28:	f043 0210 	orr.w	r2, r3, #16
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f34:	f043 0201 	orr.w	r2, r3, #1
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e007      	b.n	8007f50 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d0e3      	beq.n	8007f16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d127      	bne.n	8007fc2 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007f88:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007f8c:	d115      	bne.n	8007fba <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d111      	bne.n	8007fba <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d105      	bne.n	8007fba <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb2:	f043 0201 	orr.w	r2, r3, #1
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f7ff fe2c 	bl	8007c18 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8007fc0:	e004      	b.n	8007fcc <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	4798      	blx	r3
}
 8007fcc:	bf00      	nop
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f7ff fe21 	bl	8007c2a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007fe8:	bf00      	nop
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800e:	f043 0204 	orr.w	r2, r3, #4
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f7ff fe10 	bl	8007c3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800801c:	bf00      	nop
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e0ed      	b.n	8008212 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d102      	bne.n	8008048 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7fa f92c 	bl	80022a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0202 	bic.w	r2, r2, #2
 8008056:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008058:	f7ff fbfc 	bl	8007854 <HAL_GetTick>
 800805c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800805e:	e012      	b.n	8008086 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008060:	f7ff fbf8 	bl	8007854 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b0a      	cmp	r3, #10
 800806c:	d90b      	bls.n	8008086 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2205      	movs	r2, #5
 800807e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e0c5      	b.n	8008212 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e5      	bne.n	8008060 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f042 0201 	orr.w	r2, r2, #1
 80080a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080a4:	f7ff fbd6 	bl	8007854 <HAL_GetTick>
 80080a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80080aa:	e012      	b.n	80080d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80080ac:	f7ff fbd2 	bl	8007854 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	2b0a      	cmp	r3, #10
 80080b8:	d90b      	bls.n	80080d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2205      	movs	r2, #5
 80080ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e09f      	b.n	8008212 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0e5      	beq.n	80080ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	7e1b      	ldrb	r3, [r3, #24]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d108      	bne.n	80080fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	e007      	b.n	800810a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008108:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	7e5b      	ldrb	r3, [r3, #25]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d108      	bne.n	8008124 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	e007      	b.n	8008134 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008132:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	7e9b      	ldrb	r3, [r3, #26]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d108      	bne.n	800814e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f042 0220 	orr.w	r2, r2, #32
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	e007      	b.n	800815e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f022 0220 	bic.w	r2, r2, #32
 800815c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	7edb      	ldrb	r3, [r3, #27]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d108      	bne.n	8008178 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 0210 	bic.w	r2, r2, #16
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	e007      	b.n	8008188 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0210 	orr.w	r2, r2, #16
 8008186:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	7f1b      	ldrb	r3, [r3, #28]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d108      	bne.n	80081a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0208 	orr.w	r2, r2, #8
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	e007      	b.n	80081b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f022 0208 	bic.w	r2, r2, #8
 80081b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	7f5b      	ldrb	r3, [r3, #29]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d108      	bne.n	80081cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f042 0204 	orr.w	r2, r2, #4
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	e007      	b.n	80081dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 0204 	bic.w	r2, r2, #4
 80081da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	431a      	orrs	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	431a      	orrs	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	ea42 0103 	orr.w	r1, r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	1e5a      	subs	r2, r3, #1
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800821a:	b480      	push	{r7}
 800821c:	b087      	sub	sp, #28
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008230:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008232:	7cfb      	ldrb	r3, [r7, #19]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d003      	beq.n	8008240 <HAL_CAN_ConfigFilter+0x26>
 8008238:	7cfb      	ldrb	r3, [r7, #19]
 800823a:	2b02      	cmp	r3, #2
 800823c:	f040 80aa 	bne.w	8008394 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008246:	f043 0201 	orr.w	r2, r3, #1
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	f003 031f 	and.w	r3, r3, #31
 8008258:	2201      	movs	r2, #1
 800825a:	fa02 f303 	lsl.w	r3, r2, r3
 800825e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	43db      	mvns	r3, r3
 800826a:	401a      	ands	r2, r3
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d123      	bne.n	80082c2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	43db      	mvns	r3, r3
 8008284:	401a      	ands	r2, r3
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800829c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	3248      	adds	r2, #72	; 0x48
 80082a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80082b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80082b8:	6979      	ldr	r1, [r7, #20]
 80082ba:	3348      	adds	r3, #72	; 0x48
 80082bc:	00db      	lsls	r3, r3, #3
 80082be:	440b      	add	r3, r1
 80082c0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d122      	bne.n	8008310 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	431a      	orrs	r2, r3
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80082ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	3248      	adds	r2, #72	; 0x48
 80082f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008304:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008306:	6979      	ldr	r1, [r7, #20]
 8008308:	3348      	adds	r3, #72	; 0x48
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	440b      	add	r3, r1
 800830e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d109      	bne.n	800832c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	43db      	mvns	r3, r3
 8008322:	401a      	ands	r2, r3
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800832a:	e007      	b.n	800833c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	431a      	orrs	r2, r3
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d109      	bne.n	8008358 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	43db      	mvns	r3, r3
 800834e:	401a      	ands	r2, r3
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008356:	e007      	b.n	8008368 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	431a      	orrs	r2, r3
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d107      	bne.n	8008380 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	431a      	orrs	r2, r3
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008386:	f023 0201 	bic.w	r2, r3, #1
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	e006      	b.n	80083a2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
  }
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	371c      	adds	r7, #28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr

080083ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d12e      	bne.n	800841e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0201 	bic.w	r2, r2, #1
 80083d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083d8:	f7ff fa3c 	bl	8007854 <HAL_GetTick>
 80083dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80083de:	e012      	b.n	8008406 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80083e0:	f7ff fa38 	bl	8007854 <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	2b0a      	cmp	r3, #10
 80083ec:	d90b      	bls.n	8008406 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2205      	movs	r2, #5
 80083fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e012      	b.n	800842c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e5      	bne.n	80083e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	e006      	b.n	800842c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
  }
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8008434:	b480      	push	{r7}
 8008436:	b089      	sub	sp, #36	; 0x24
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008448:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8008452:	7ffb      	ldrb	r3, [r7, #31]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d003      	beq.n	8008460 <HAL_CAN_AddTxMessage+0x2c>
 8008458:	7ffb      	ldrb	r3, [r7, #31]
 800845a:	2b02      	cmp	r3, #2
 800845c:	f040 80b8 	bne.w	80085d0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10a      	bne.n	8008480 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008470:	2b00      	cmp	r3, #0
 8008472:	d105      	bne.n	8008480 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 80a0 	beq.w	80085c0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	0e1b      	lsrs	r3, r3, #24
 8008484:	f003 0303 	and.w	r3, r3, #3
 8008488:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2b02      	cmp	r3, #2
 800848e:	d907      	bls.n	80084a0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e09e      	b.n	80085de <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80084a0:	2201      	movs	r2, #1
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	409a      	lsls	r2, r3
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10d      	bne.n	80084ce <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80084bc:	68f9      	ldr	r1, [r7, #12]
 80084be:	6809      	ldr	r1, [r1, #0]
 80084c0:	431a      	orrs	r2, r3
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	3318      	adds	r3, #24
 80084c6:	011b      	lsls	r3, r3, #4
 80084c8:	440b      	add	r3, r1
 80084ca:	601a      	str	r2, [r3, #0]
 80084cc:	e00f      	b.n	80084ee <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80084d8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80084de:	68f9      	ldr	r1, [r7, #12]
 80084e0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80084e2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	3318      	adds	r3, #24
 80084e8:	011b      	lsls	r3, r3, #4
 80084ea:	440b      	add	r3, r1
 80084ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6819      	ldr	r1, [r3, #0]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	691a      	ldr	r2, [r3, #16]
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	3318      	adds	r3, #24
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	440b      	add	r3, r1
 80084fe:	3304      	adds	r3, #4
 8008500:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	7d1b      	ldrb	r3, [r3, #20]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d111      	bne.n	800852e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	3318      	adds	r3, #24
 8008512:	011b      	lsls	r3, r3, #4
 8008514:	4413      	add	r3, r2
 8008516:	3304      	adds	r3, #4
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	6811      	ldr	r1, [r2, #0]
 800851e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	3318      	adds	r3, #24
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	440b      	add	r3, r1
 800852a:	3304      	adds	r3, #4
 800852c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	3307      	adds	r3, #7
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	061a      	lsls	r2, r3, #24
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3306      	adds	r3, #6
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	041b      	lsls	r3, r3, #16
 800853e:	431a      	orrs	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3305      	adds	r3, #5
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	021b      	lsls	r3, r3, #8
 8008548:	4313      	orrs	r3, r2
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	3204      	adds	r2, #4
 800854e:	7812      	ldrb	r2, [r2, #0]
 8008550:	4610      	mov	r0, r2
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	6811      	ldr	r1, [r2, #0]
 8008556:	ea43 0200 	orr.w	r2, r3, r0
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	011b      	lsls	r3, r3, #4
 800855e:	440b      	add	r3, r1
 8008560:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8008564:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	3303      	adds	r3, #3
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	061a      	lsls	r2, r3, #24
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	3302      	adds	r3, #2
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	041b      	lsls	r3, r3, #16
 8008576:	431a      	orrs	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3301      	adds	r3, #1
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	021b      	lsls	r3, r3, #8
 8008580:	4313      	orrs	r3, r2
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	7812      	ldrb	r2, [r2, #0]
 8008586:	4610      	mov	r0, r2
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	6811      	ldr	r1, [r2, #0]
 800858c:	ea43 0200 	orr.w	r2, r3, r0
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	011b      	lsls	r3, r3, #4
 8008594:	440b      	add	r3, r1
 8008596:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800859a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	3318      	adds	r3, #24
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	4413      	add	r3, r2
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	6811      	ldr	r1, [r2, #0]
 80085ae:	f043 0201 	orr.w	r2, r3, #1
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	3318      	adds	r3, #24
 80085b6:	011b      	lsls	r3, r3, #4
 80085b8:	440b      	add	r3, r1
 80085ba:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	e00e      	b.n	80085de <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e006      	b.n	80085de <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
  }
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3724      	adds	r7, #36	; 0x24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bc80      	pop	{r7}
 80085e6:	4770      	bx	lr

080085e8 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d002      	beq.n	8008606 <HAL_CAN_AbortTxRequest+0x1e>
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	2b02      	cmp	r3, #2
 8008604:	d128      	bne.n	8008658 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d007      	beq.n	8008620 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689a      	ldr	r2, [r3, #8]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800861e:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d007      	beq.n	800863a <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008638:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b00      	cmp	r3, #0
 8008642:	d007      	beq.n	8008654 <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689a      	ldr	r2, [r3, #8]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008652:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	e006      	b.n	8008666 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
  }
}
 8008666:	4618      	mov	r0, r3
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	bc80      	pop	{r7}
 800866e:	4770      	bx	lr

08008670 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008682:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8008684:	7afb      	ldrb	r3, [r7, #11]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d002      	beq.n	8008690 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800868a:	7afb      	ldrb	r3, [r7, #11]
 800868c:	2b02      	cmp	r3, #2
 800868e:	d11d      	bne.n	80086cc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3301      	adds	r3, #1
 80086a2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3301      	adds	r3, #1
 80086b6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d002      	beq.n	80086cc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3301      	adds	r3, #1
 80086ca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80086cc:	68fb      	ldr	r3, [r7, #12]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bc80      	pop	{r7}
 80086d6:	4770      	bx	lr

080086d8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80086d8:	b480      	push	{r7}
 80086da:	b087      	sub	sp, #28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
 80086e4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80086ec:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80086ee:	7dfb      	ldrb	r3, [r7, #23]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d003      	beq.n	80086fc <HAL_CAN_GetRxMessage+0x24>
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	f040 80f3 	bne.w	80088e2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10e      	bne.n	8008720 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	f003 0303 	and.w	r3, r3, #3
 800870c:	2b00      	cmp	r3, #0
 800870e:	d116      	bne.n	800873e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e0e7      	b.n	80088f0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	f003 0303 	and.w	r3, r3, #3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d107      	bne.n	800873e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008732:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e0d8      	b.n	80088f0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	331b      	adds	r3, #27
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	4413      	add	r3, r2
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0204 	and.w	r2, r3, #4
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10c      	bne.n	8008776 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	331b      	adds	r3, #27
 8008764:	011b      	lsls	r3, r3, #4
 8008766:	4413      	add	r3, r2
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	0d5b      	lsrs	r3, r3, #21
 800876c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	e00b      	b.n	800878e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	331b      	adds	r3, #27
 800877e:	011b      	lsls	r3, r3, #4
 8008780:	4413      	add	r3, r2
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	08db      	lsrs	r3, r3, #3
 8008786:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	331b      	adds	r3, #27
 8008796:	011b      	lsls	r3, r3, #4
 8008798:	4413      	add	r3, r2
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0202 	and.w	r2, r3, #2
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	331b      	adds	r3, #27
 80087ac:	011b      	lsls	r3, r3, #4
 80087ae:	4413      	add	r3, r2
 80087b0:	3304      	adds	r3, #4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 020f 	and.w	r2, r3, #15
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	331b      	adds	r3, #27
 80087c4:	011b      	lsls	r3, r3, #4
 80087c6:	4413      	add	r3, r2
 80087c8:	3304      	adds	r3, #4
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	0a1b      	lsrs	r3, r3, #8
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	331b      	adds	r3, #27
 80087dc:	011b      	lsls	r3, r3, #4
 80087de:	4413      	add	r3, r2
 80087e0:	3304      	adds	r3, #4
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	0c1b      	lsrs	r3, r3, #16
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	011b      	lsls	r3, r3, #4
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	011b      	lsls	r3, r3, #4
 800880a:	4413      	add	r3, r2
 800880c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	0a1a      	lsrs	r2, r3, #8
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	3301      	adds	r3, #1
 8008818:	b2d2      	uxtb	r2, r2
 800881a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	011b      	lsls	r3, r3, #4
 8008824:	4413      	add	r3, r2
 8008826:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	0c1a      	lsrs	r2, r3, #16
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	3302      	adds	r3, #2
 8008832:	b2d2      	uxtb	r2, r2
 8008834:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	011b      	lsls	r3, r3, #4
 800883e:	4413      	add	r3, r2
 8008840:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	0e1a      	lsrs	r2, r3, #24
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	3303      	adds	r3, #3
 800884c:	b2d2      	uxtb	r2, r2
 800884e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	4413      	add	r3, r2
 800885a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	3304      	adds	r3, #4
 8008864:	b2d2      	uxtb	r2, r2
 8008866:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	011b      	lsls	r3, r3, #4
 8008870:	4413      	add	r3, r2
 8008872:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	0a1a      	lsrs	r2, r3, #8
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	3305      	adds	r3, #5
 800887e:	b2d2      	uxtb	r2, r2
 8008880:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	011b      	lsls	r3, r3, #4
 800888a:	4413      	add	r3, r2
 800888c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	0c1a      	lsrs	r2, r3, #16
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	3306      	adds	r3, #6
 8008898:	b2d2      	uxtb	r2, r2
 800889a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	0e1a      	lsrs	r2, r3, #24
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	3307      	adds	r3, #7
 80088b2:	b2d2      	uxtb	r2, r2
 80088b4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d108      	bne.n	80088ce <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68da      	ldr	r2, [r3, #12]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0220 	orr.w	r2, r2, #32
 80088ca:	60da      	str	r2, [r3, #12]
 80088cc:	e007      	b.n	80088de <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	691a      	ldr	r2, [r3, #16]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f042 0220 	orr.w	r2, r2, #32
 80088dc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	e006      	b.n	80088f0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
  }
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	371c      	adds	r7, #28
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bc80      	pop	{r7}
 80088f8:	4770      	bx	lr

080088fa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b085      	sub	sp, #20
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800890a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d002      	beq.n	8008918 <HAL_CAN_ActivateNotification+0x1e>
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	2b02      	cmp	r3, #2
 8008916:	d109      	bne.n	800892c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6959      	ldr	r1, [r3, #20]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	e006      	b.n	800893a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
  }
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	bc80      	pop	{r7}
 8008942:	4770      	bx	lr

08008944 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08a      	sub	sp, #40	; 0x28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800894c:	2300      	movs	r3, #0
 800894e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d07c      	beq.n	8008a84 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	2b00      	cmp	r3, #0
 8008992:	d023      	beq.n	80089dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2201      	movs	r2, #1
 800899a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d003      	beq.n	80089ae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f97d 	bl	8008ca6 <HAL_CAN_TxMailbox0CompleteCallback>
 80089ac:	e016      	b.n	80089dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d004      	beq.n	80089c2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80089be:	627b      	str	r3, [r7, #36]	; 0x24
 80089c0:	e00c      	b.n	80089dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	f003 0308 	and.w	r3, r3, #8
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d004      	beq.n	80089d6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80089d2:	627b      	str	r3, [r7, #36]	; 0x24
 80089d4:	e002      	b.n	80089dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f980 	bl	8008cdc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d024      	beq.n	8008a30 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f95c 	bl	8008cb8 <HAL_CAN_TxMailbox1CompleteCallback>
 8008a00:	e016      	b.n	8008a30 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d004      	beq.n	8008a16 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
 8008a14:	e00c      	b.n	8008a30 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d004      	beq.n	8008a2a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a26:	627b      	str	r3, [r7, #36]	; 0x24
 8008a28:	e002      	b.n	8008a30 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f95f 	bl	8008cee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d024      	beq.n	8008a84 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008a42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f93b 	bl	8008cca <HAL_CAN_TxMailbox2CompleteCallback>
 8008a54:	e016      	b.n	8008a84 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d004      	beq.n	8008a6a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a66:	627b      	str	r3, [r7, #36]	; 0x24
 8008a68:	e00c      	b.n	8008a84 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d004      	beq.n	8008a7e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a7c:	e002      	b.n	8008a84 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f93e 	bl	8008d00 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	f003 0308 	and.w	r3, r3, #8
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00c      	beq.n	8008aa8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	f003 0310 	and.w	r3, r3, #16
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d007      	beq.n	8008aa8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2210      	movs	r2, #16
 8008aa6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	f003 0304 	and.w	r3, r3, #4
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00b      	beq.n	8008aca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f003 0308 	and.w	r3, r3, #8
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d006      	beq.n	8008aca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2208      	movs	r2, #8
 8008ac2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f924 	bl	8008d12 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	f003 0302 	and.w	r3, r3, #2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d009      	beq.n	8008ae8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	f003 0303 	and.w	r3, r3, #3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7f9 f908 	bl	8001cf8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00c      	beq.n	8008b0c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	f003 0310 	and.w	r3, r3, #16
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d007      	beq.n	8008b0c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2210      	movs	r2, #16
 8008b0a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00b      	beq.n	8008b2e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f003 0308 	and.w	r3, r3, #8
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d006      	beq.n	8008b2e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2208      	movs	r2, #8
 8008b26:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f904 	bl	8008d36 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	f003 0310 	and.w	r3, r3, #16
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d009      	beq.n	8008b4c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	f003 0303 	and.w	r3, r3, #3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f8ec 	bl	8008d24 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00b      	beq.n	8008b6e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	f003 0310 	and.w	r3, r3, #16
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d006      	beq.n	8008b6e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2210      	movs	r2, #16
 8008b66:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f8ed 	bl	8008d48 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00b      	beq.n	8008b90 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	f003 0308 	and.w	r3, r3, #8
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d006      	beq.n	8008b90 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2208      	movs	r2, #8
 8008b88:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f8e5 	bl	8008d5a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d075      	beq.n	8008c86 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	f003 0304 	and.w	r3, r3, #4
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d06c      	beq.n	8008c7e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d008      	beq.n	8008bc0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d003      	beq.n	8008bc0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	f043 0301 	orr.w	r3, r3, #1
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d008      	beq.n	8008bdc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d003      	beq.n	8008bdc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	f043 0302 	orr.w	r3, r3, #2
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d008      	beq.n	8008bf8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	f043 0304 	orr.w	r3, r3, #4
 8008bf6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d03d      	beq.n	8008c7e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d038      	beq.n	8008c7e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c12:	2b30      	cmp	r3, #48	; 0x30
 8008c14:	d017      	beq.n	8008c46 <HAL_CAN_IRQHandler+0x302>
 8008c16:	2b30      	cmp	r3, #48	; 0x30
 8008c18:	d804      	bhi.n	8008c24 <HAL_CAN_IRQHandler+0x2e0>
 8008c1a:	2b10      	cmp	r3, #16
 8008c1c:	d009      	beq.n	8008c32 <HAL_CAN_IRQHandler+0x2ee>
 8008c1e:	2b20      	cmp	r3, #32
 8008c20:	d00c      	beq.n	8008c3c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8008c22:	e024      	b.n	8008c6e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8008c24:	2b50      	cmp	r3, #80	; 0x50
 8008c26:	d018      	beq.n	8008c5a <HAL_CAN_IRQHandler+0x316>
 8008c28:	2b60      	cmp	r3, #96	; 0x60
 8008c2a:	d01b      	beq.n	8008c64 <HAL_CAN_IRQHandler+0x320>
 8008c2c:	2b40      	cmp	r3, #64	; 0x40
 8008c2e:	d00f      	beq.n	8008c50 <HAL_CAN_IRQHandler+0x30c>
            break;
 8008c30:	e01d      	b.n	8008c6e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	f043 0308 	orr.w	r3, r3, #8
 8008c38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008c3a:	e018      	b.n	8008c6e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3e:	f043 0310 	orr.w	r3, r3, #16
 8008c42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008c44:	e013      	b.n	8008c6e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8008c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c48:	f043 0320 	orr.w	r3, r3, #32
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008c4e:	e00e      	b.n	8008c6e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008c58:	e009      	b.n	8008c6e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008c62:	e004      	b.n	8008c6e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008c6c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	699a      	ldr	r2, [r3, #24]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008c7c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2204      	movs	r2, #4
 8008c84:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d008      	beq.n	8008c9e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	431a      	orrs	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f867 	bl	8008d6c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008c9e:	bf00      	nop
 8008ca0:	3728      	adds	r7, #40	; 0x28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008cae:	bf00      	nop
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bc80      	pop	{r7}
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bc80      	pop	{r7}
 8008cc8:	4770      	bx	lr

08008cca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b083      	sub	sp, #12
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008cd2:	bf00      	nop
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bc80      	pop	{r7}
 8008cda:	4770      	bx	lr

08008cdc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bc80      	pop	{r7}
 8008cec:	4770      	bx	lr

08008cee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b083      	sub	sp, #12
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008cf6:	bf00      	nop
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bc80      	pop	{r7}
 8008cfe:	4770      	bx	lr

08008d00 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bc80      	pop	{r7}
 8008d10:	4770      	bx	lr

08008d12 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b083      	sub	sp, #12
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008d1a:	bf00      	nop
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr

08008d24 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bc80      	pop	{r7}
 8008d34:	4770      	bx	lr

08008d36 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bc80      	pop	{r7}
 8008d46:	4770      	bx	lr

08008d48 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bc80      	pop	{r7}
 8008d58:	4770      	bx	lr

08008d5a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b083      	sub	sp, #12
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8008d62:	bf00      	nop
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bc80      	pop	{r7}
 8008d6a:	4770      	bx	lr

08008d6c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bc80      	pop	{r7}
 8008d7c:	4770      	bx	lr
	...

08008d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f003 0307 	and.w	r3, r3, #7
 8008d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008d90:	4b0c      	ldr	r3, [pc, #48]	; (8008dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008db2:	4a04      	ldr	r2, [pc, #16]	; (8008dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	60d3      	str	r3, [r2, #12]
}
 8008db8:	bf00      	nop
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bc80      	pop	{r7}
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	e000ed00 	.word	0xe000ed00

08008dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008dcc:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <__NVIC_GetPriorityGrouping+0x18>)
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	0a1b      	lsrs	r3, r3, #8
 8008dd2:	f003 0307 	and.w	r3, r3, #7
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bc80      	pop	{r7}
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	e000ed00 	.word	0xe000ed00

08008de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	4603      	mov	r3, r0
 8008dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	db0b      	blt.n	8008e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	f003 021f 	and.w	r2, r3, #31
 8008dfc:	4906      	ldr	r1, [pc, #24]	; (8008e18 <__NVIC_EnableIRQ+0x34>)
 8008dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e02:	095b      	lsrs	r3, r3, #5
 8008e04:	2001      	movs	r0, #1
 8008e06:	fa00 f202 	lsl.w	r2, r0, r2
 8008e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008e0e:	bf00      	nop
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bc80      	pop	{r7}
 8008e16:	4770      	bx	lr
 8008e18:	e000e100 	.word	0xe000e100

08008e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	6039      	str	r1, [r7, #0]
 8008e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	db0a      	blt.n	8008e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	490c      	ldr	r1, [pc, #48]	; (8008e68 <__NVIC_SetPriority+0x4c>)
 8008e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e3a:	0112      	lsls	r2, r2, #4
 8008e3c:	b2d2      	uxtb	r2, r2
 8008e3e:	440b      	add	r3, r1
 8008e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008e44:	e00a      	b.n	8008e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	4908      	ldr	r1, [pc, #32]	; (8008e6c <__NVIC_SetPriority+0x50>)
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	f003 030f 	and.w	r3, r3, #15
 8008e52:	3b04      	subs	r3, #4
 8008e54:	0112      	lsls	r2, r2, #4
 8008e56:	b2d2      	uxtb	r2, r2
 8008e58:	440b      	add	r3, r1
 8008e5a:	761a      	strb	r2, [r3, #24]
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bc80      	pop	{r7}
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	e000e100 	.word	0xe000e100
 8008e6c:	e000ed00 	.word	0xe000ed00

08008e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b089      	sub	sp, #36	; 0x24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f003 0307 	and.w	r3, r3, #7
 8008e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	f1c3 0307 	rsb	r3, r3, #7
 8008e8a:	2b04      	cmp	r3, #4
 8008e8c:	bf28      	it	cs
 8008e8e:	2304      	movcs	r3, #4
 8008e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	3304      	adds	r3, #4
 8008e96:	2b06      	cmp	r3, #6
 8008e98:	d902      	bls.n	8008ea0 <NVIC_EncodePriority+0x30>
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	3b03      	subs	r3, #3
 8008e9e:	e000      	b.n	8008ea2 <NVIC_EncodePriority+0x32>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008eae:	43da      	mvns	r2, r3
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	401a      	ands	r2, r3
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec2:	43d9      	mvns	r1, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ec8:	4313      	orrs	r3, r2
         );
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3724      	adds	r7, #36	; 0x24
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bc80      	pop	{r7}
 8008ed2:	4770      	bx	lr

08008ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ee4:	d301      	bcc.n	8008eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e00f      	b.n	8008f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008eea:	4a0a      	ldr	r2, [pc, #40]	; (8008f14 <SysTick_Config+0x40>)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008ef2:	210f      	movs	r1, #15
 8008ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef8:	f7ff ff90 	bl	8008e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008efc:	4b05      	ldr	r3, [pc, #20]	; (8008f14 <SysTick_Config+0x40>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008f02:	4b04      	ldr	r3, [pc, #16]	; (8008f14 <SysTick_Config+0x40>)
 8008f04:	2207      	movs	r2, #7
 8008f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	e000e010 	.word	0xe000e010

08008f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7ff ff2d 	bl	8008d80 <__NVIC_SetPriorityGrouping>
}
 8008f26:	bf00      	nop
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b086      	sub	sp, #24
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	4603      	mov	r3, r0
 8008f36:	60b9      	str	r1, [r7, #8]
 8008f38:	607a      	str	r2, [r7, #4]
 8008f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008f40:	f7ff ff42 	bl	8008dc8 <__NVIC_GetPriorityGrouping>
 8008f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	68b9      	ldr	r1, [r7, #8]
 8008f4a:	6978      	ldr	r0, [r7, #20]
 8008f4c:	f7ff ff90 	bl	8008e70 <NVIC_EncodePriority>
 8008f50:	4602      	mov	r2, r0
 8008f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f56:	4611      	mov	r1, r2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7ff ff5f 	bl	8008e1c <__NVIC_SetPriority>
}
 8008f5e:	bf00      	nop
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b082      	sub	sp, #8
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7ff ff35 	bl	8008de4 <__NVIC_EnableIRQ>
}
 8008f7a:	bf00      	nop
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b082      	sub	sp, #8
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff ffa2 	bl	8008ed4 <SysTick_Config>
 8008f90:	4603      	mov	r3, r0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e043      	b.n	800903a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	4b22      	ldr	r3, [pc, #136]	; (8009044 <HAL_DMA_Init+0xa8>)
 8008fba:	4413      	add	r3, r2
 8008fbc:	4a22      	ldr	r2, [pc, #136]	; (8009048 <HAL_DMA_Init+0xac>)
 8008fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc2:	091b      	lsrs	r3, r3, #4
 8008fc4:	009a      	lsls	r2, r3, #2
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a1f      	ldr	r2, [pc, #124]	; (800904c <HAL_DMA_Init+0xb0>)
 8008fce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008fe6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008fea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800900c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	4313      	orrs	r3, r2
 8009018:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	bc80      	pop	{r7}
 8009042:	4770      	bx	lr
 8009044:	bffdfff8 	.word	0xbffdfff8
 8009048:	cccccccd 	.word	0xcccccccd
 800904c:	40020000 	.word	0x40020000

08009050 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
 800905c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d101      	bne.n	8009070 <HAL_DMA_Start_IT+0x20>
 800906c:	2302      	movs	r3, #2
 800906e:	e04a      	b.n	8009106 <HAL_DMA_Start_IT+0xb6>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800907e:	2b01      	cmp	r3, #1
 8009080:	d13a      	bne.n	80090f8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2202      	movs	r2, #2
 8009086:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 0201 	bic.w	r2, r2, #1
 800909e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	68b9      	ldr	r1, [r7, #8]
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 f938 	bl	800931c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d008      	beq.n	80090c6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 020e 	orr.w	r2, r2, #14
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	e00f      	b.n	80090e6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0204 	bic.w	r2, r2, #4
 80090d4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 020a 	orr.w	r2, r2, #10
 80090e4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f042 0201 	orr.w	r2, r2, #1
 80090f4:	601a      	str	r2, [r3, #0]
 80090f6:	e005      	b.n	8009104 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8009100:	2302      	movs	r3, #2
 8009102:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8009104:	7dfb      	ldrb	r3, [r7, #23]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912c:	2204      	movs	r2, #4
 800912e:	409a      	lsls	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4013      	ands	r3, r2
 8009134:	2b00      	cmp	r3, #0
 8009136:	d04f      	beq.n	80091d8 <HAL_DMA_IRQHandler+0xc8>
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	f003 0304 	and.w	r3, r3, #4
 800913e:	2b00      	cmp	r3, #0
 8009140:	d04a      	beq.n	80091d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0320 	and.w	r3, r3, #32
 800914c:	2b00      	cmp	r3, #0
 800914e:	d107      	bne.n	8009160 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f022 0204 	bic.w	r2, r2, #4
 800915e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a66      	ldr	r2, [pc, #408]	; (8009300 <HAL_DMA_IRQHandler+0x1f0>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d029      	beq.n	80091be <HAL_DMA_IRQHandler+0xae>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a65      	ldr	r2, [pc, #404]	; (8009304 <HAL_DMA_IRQHandler+0x1f4>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d022      	beq.n	80091ba <HAL_DMA_IRQHandler+0xaa>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a63      	ldr	r2, [pc, #396]	; (8009308 <HAL_DMA_IRQHandler+0x1f8>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d01a      	beq.n	80091b4 <HAL_DMA_IRQHandler+0xa4>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a62      	ldr	r2, [pc, #392]	; (800930c <HAL_DMA_IRQHandler+0x1fc>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d012      	beq.n	80091ae <HAL_DMA_IRQHandler+0x9e>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a60      	ldr	r2, [pc, #384]	; (8009310 <HAL_DMA_IRQHandler+0x200>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d00a      	beq.n	80091a8 <HAL_DMA_IRQHandler+0x98>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a5f      	ldr	r2, [pc, #380]	; (8009314 <HAL_DMA_IRQHandler+0x204>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d102      	bne.n	80091a2 <HAL_DMA_IRQHandler+0x92>
 800919c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80091a0:	e00e      	b.n	80091c0 <HAL_DMA_IRQHandler+0xb0>
 80091a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80091a6:	e00b      	b.n	80091c0 <HAL_DMA_IRQHandler+0xb0>
 80091a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80091ac:	e008      	b.n	80091c0 <HAL_DMA_IRQHandler+0xb0>
 80091ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80091b2:	e005      	b.n	80091c0 <HAL_DMA_IRQHandler+0xb0>
 80091b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091b8:	e002      	b.n	80091c0 <HAL_DMA_IRQHandler+0xb0>
 80091ba:	2340      	movs	r3, #64	; 0x40
 80091bc:	e000      	b.n	80091c0 <HAL_DMA_IRQHandler+0xb0>
 80091be:	2304      	movs	r3, #4
 80091c0:	4a55      	ldr	r2, [pc, #340]	; (8009318 <HAL_DMA_IRQHandler+0x208>)
 80091c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 8094 	beq.w	80092f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80091d6:	e08e      	b.n	80092f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091dc:	2202      	movs	r2, #2
 80091de:	409a      	lsls	r2, r3
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	4013      	ands	r3, r2
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d056      	beq.n	8009296 <HAL_DMA_IRQHandler+0x186>
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f003 0302 	and.w	r3, r3, #2
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d051      	beq.n	8009296 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 0320 	and.w	r3, r3, #32
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10b      	bne.n	8009218 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f022 020a 	bic.w	r2, r2, #10
 800920e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a38      	ldr	r2, [pc, #224]	; (8009300 <HAL_DMA_IRQHandler+0x1f0>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d029      	beq.n	8009276 <HAL_DMA_IRQHandler+0x166>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a37      	ldr	r2, [pc, #220]	; (8009304 <HAL_DMA_IRQHandler+0x1f4>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d022      	beq.n	8009272 <HAL_DMA_IRQHandler+0x162>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a35      	ldr	r2, [pc, #212]	; (8009308 <HAL_DMA_IRQHandler+0x1f8>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d01a      	beq.n	800926c <HAL_DMA_IRQHandler+0x15c>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a34      	ldr	r2, [pc, #208]	; (800930c <HAL_DMA_IRQHandler+0x1fc>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d012      	beq.n	8009266 <HAL_DMA_IRQHandler+0x156>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a32      	ldr	r2, [pc, #200]	; (8009310 <HAL_DMA_IRQHandler+0x200>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d00a      	beq.n	8009260 <HAL_DMA_IRQHandler+0x150>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a31      	ldr	r2, [pc, #196]	; (8009314 <HAL_DMA_IRQHandler+0x204>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d102      	bne.n	800925a <HAL_DMA_IRQHandler+0x14a>
 8009254:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009258:	e00e      	b.n	8009278 <HAL_DMA_IRQHandler+0x168>
 800925a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800925e:	e00b      	b.n	8009278 <HAL_DMA_IRQHandler+0x168>
 8009260:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009264:	e008      	b.n	8009278 <HAL_DMA_IRQHandler+0x168>
 8009266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800926a:	e005      	b.n	8009278 <HAL_DMA_IRQHandler+0x168>
 800926c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009270:	e002      	b.n	8009278 <HAL_DMA_IRQHandler+0x168>
 8009272:	2320      	movs	r3, #32
 8009274:	e000      	b.n	8009278 <HAL_DMA_IRQHandler+0x168>
 8009276:	2302      	movs	r3, #2
 8009278:	4a27      	ldr	r2, [pc, #156]	; (8009318 <HAL_DMA_IRQHandler+0x208>)
 800927a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009288:	2b00      	cmp	r3, #0
 800928a:	d034      	beq.n	80092f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009294:	e02f      	b.n	80092f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929a:	2208      	movs	r2, #8
 800929c:	409a      	lsls	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	4013      	ands	r3, r2
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d028      	beq.n	80092f8 <HAL_DMA_IRQHandler+0x1e8>
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f003 0308 	and.w	r3, r3, #8
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d023      	beq.n	80092f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f022 020e 	bic.w	r2, r2, #14
 80092be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c8:	2101      	movs	r1, #1
 80092ca:	fa01 f202 	lsl.w	r2, r1, r2
 80092ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d004      	beq.n	80092f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	4798      	blx	r3
    }
  }
  return;
 80092f6:	bf00      	nop
 80092f8:	bf00      	nop
}
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	40020008 	.word	0x40020008
 8009304:	4002001c 	.word	0x4002001c
 8009308:	40020030 	.word	0x40020030
 800930c:	40020044 	.word	0x40020044
 8009310:	40020058 	.word	0x40020058
 8009314:	4002006c 	.word	0x4002006c
 8009318:	40020000 	.word	0x40020000

0800931c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
 8009328:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009332:	2101      	movs	r1, #1
 8009334:	fa01 f202 	lsl.w	r2, r1, r2
 8009338:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	2b10      	cmp	r3, #16
 8009348:	d108      	bne.n	800935c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800935a:	e007      	b.n	800936c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	60da      	str	r2, [r3, #12]
}
 800936c:	bf00      	nop
 800936e:	3714      	adds	r7, #20
 8009370:	46bd      	mov	sp, r7
 8009372:	bc80      	pop	{r7}
 8009374:	4770      	bx	lr
	...

08009378 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009382:	4b0d      	ldr	r3, [pc, #52]	; (80093b8 <HAL_FLASH_Unlock+0x40>)
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00d      	beq.n	80093aa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800938e:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <HAL_FLASH_Unlock+0x40>)
 8009390:	4a0a      	ldr	r2, [pc, #40]	; (80093bc <HAL_FLASH_Unlock+0x44>)
 8009392:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009394:	4b08      	ldr	r3, [pc, #32]	; (80093b8 <HAL_FLASH_Unlock+0x40>)
 8009396:	4a0a      	ldr	r2, [pc, #40]	; (80093c0 <HAL_FLASH_Unlock+0x48>)
 8009398:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800939a:	4b07      	ldr	r3, [pc, #28]	; (80093b8 <HAL_FLASH_Unlock+0x40>)
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80093aa:	79fb      	ldrb	r3, [r7, #7]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bc80      	pop	{r7}
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	40022000 	.word	0x40022000
 80093bc:	45670123 	.word	0x45670123
 80093c0:	cdef89ab 	.word	0xcdef89ab

080093c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b08b      	sub	sp, #44	; 0x2c
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80093ce:	2300      	movs	r3, #0
 80093d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80093d2:	2300      	movs	r3, #0
 80093d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80093d6:	e127      	b.n	8009628 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80093d8:	2201      	movs	r2, #1
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	fa02 f303 	lsl.w	r3, r2, r3
 80093e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	69fa      	ldr	r2, [r7, #28]
 80093e8:	4013      	ands	r3, r2
 80093ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	f040 8116 	bne.w	8009622 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	2b12      	cmp	r3, #18
 80093fc:	d034      	beq.n	8009468 <HAL_GPIO_Init+0xa4>
 80093fe:	2b12      	cmp	r3, #18
 8009400:	d80d      	bhi.n	800941e <HAL_GPIO_Init+0x5a>
 8009402:	2b02      	cmp	r3, #2
 8009404:	d02b      	beq.n	800945e <HAL_GPIO_Init+0x9a>
 8009406:	2b02      	cmp	r3, #2
 8009408:	d804      	bhi.n	8009414 <HAL_GPIO_Init+0x50>
 800940a:	2b00      	cmp	r3, #0
 800940c:	d031      	beq.n	8009472 <HAL_GPIO_Init+0xae>
 800940e:	2b01      	cmp	r3, #1
 8009410:	d01c      	beq.n	800944c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009412:	e048      	b.n	80094a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8009414:	2b03      	cmp	r3, #3
 8009416:	d043      	beq.n	80094a0 <HAL_GPIO_Init+0xdc>
 8009418:	2b11      	cmp	r3, #17
 800941a:	d01b      	beq.n	8009454 <HAL_GPIO_Init+0x90>
          break;
 800941c:	e043      	b.n	80094a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800941e:	4a89      	ldr	r2, [pc, #548]	; (8009644 <HAL_GPIO_Init+0x280>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d026      	beq.n	8009472 <HAL_GPIO_Init+0xae>
 8009424:	4a87      	ldr	r2, [pc, #540]	; (8009644 <HAL_GPIO_Init+0x280>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d806      	bhi.n	8009438 <HAL_GPIO_Init+0x74>
 800942a:	4a87      	ldr	r2, [pc, #540]	; (8009648 <HAL_GPIO_Init+0x284>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d020      	beq.n	8009472 <HAL_GPIO_Init+0xae>
 8009430:	4a86      	ldr	r2, [pc, #536]	; (800964c <HAL_GPIO_Init+0x288>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d01d      	beq.n	8009472 <HAL_GPIO_Init+0xae>
          break;
 8009436:	e036      	b.n	80094a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8009438:	4a85      	ldr	r2, [pc, #532]	; (8009650 <HAL_GPIO_Init+0x28c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d019      	beq.n	8009472 <HAL_GPIO_Init+0xae>
 800943e:	4a85      	ldr	r2, [pc, #532]	; (8009654 <HAL_GPIO_Init+0x290>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d016      	beq.n	8009472 <HAL_GPIO_Init+0xae>
 8009444:	4a84      	ldr	r2, [pc, #528]	; (8009658 <HAL_GPIO_Init+0x294>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d013      	beq.n	8009472 <HAL_GPIO_Init+0xae>
          break;
 800944a:	e02c      	b.n	80094a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	623b      	str	r3, [r7, #32]
          break;
 8009452:	e028      	b.n	80094a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	3304      	adds	r3, #4
 800945a:	623b      	str	r3, [r7, #32]
          break;
 800945c:	e023      	b.n	80094a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	3308      	adds	r3, #8
 8009464:	623b      	str	r3, [r7, #32]
          break;
 8009466:	e01e      	b.n	80094a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	330c      	adds	r3, #12
 800946e:	623b      	str	r3, [r7, #32]
          break;
 8009470:	e019      	b.n	80094a6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d102      	bne.n	8009480 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800947a:	2304      	movs	r3, #4
 800947c:	623b      	str	r3, [r7, #32]
          break;
 800947e:	e012      	b.n	80094a6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d105      	bne.n	8009494 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009488:	2308      	movs	r3, #8
 800948a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	69fa      	ldr	r2, [r7, #28]
 8009490:	611a      	str	r2, [r3, #16]
          break;
 8009492:	e008      	b.n	80094a6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009494:	2308      	movs	r3, #8
 8009496:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	69fa      	ldr	r2, [r7, #28]
 800949c:	615a      	str	r2, [r3, #20]
          break;
 800949e:	e002      	b.n	80094a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80094a0:	2300      	movs	r3, #0
 80094a2:	623b      	str	r3, [r7, #32]
          break;
 80094a4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	2bff      	cmp	r3, #255	; 0xff
 80094aa:	d801      	bhi.n	80094b0 <HAL_GPIO_Init+0xec>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	e001      	b.n	80094b4 <HAL_GPIO_Init+0xf0>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	3304      	adds	r3, #4
 80094b4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	2bff      	cmp	r3, #255	; 0xff
 80094ba:	d802      	bhi.n	80094c2 <HAL_GPIO_Init+0xfe>
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	e002      	b.n	80094c8 <HAL_GPIO_Init+0x104>
 80094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c4:	3b08      	subs	r3, #8
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	210f      	movs	r1, #15
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	fa01 f303 	lsl.w	r3, r1, r3
 80094d6:	43db      	mvns	r3, r3
 80094d8:	401a      	ands	r2, r3
 80094da:	6a39      	ldr	r1, [r7, #32]
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	fa01 f303 	lsl.w	r3, r1, r3
 80094e2:	431a      	orrs	r2, r3
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 8096 	beq.w	8009622 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80094f6:	4b59      	ldr	r3, [pc, #356]	; (800965c <HAL_GPIO_Init+0x298>)
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	4a58      	ldr	r2, [pc, #352]	; (800965c <HAL_GPIO_Init+0x298>)
 80094fc:	f043 0301 	orr.w	r3, r3, #1
 8009500:	6193      	str	r3, [r2, #24]
 8009502:	4b56      	ldr	r3, [pc, #344]	; (800965c <HAL_GPIO_Init+0x298>)
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	60bb      	str	r3, [r7, #8]
 800950c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800950e:	4a54      	ldr	r2, [pc, #336]	; (8009660 <HAL_GPIO_Init+0x29c>)
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	089b      	lsrs	r3, r3, #2
 8009514:	3302      	adds	r3, #2
 8009516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800951a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	f003 0303 	and.w	r3, r3, #3
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	220f      	movs	r2, #15
 8009526:	fa02 f303 	lsl.w	r3, r2, r3
 800952a:	43db      	mvns	r3, r3
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	4013      	ands	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a4b      	ldr	r2, [pc, #300]	; (8009664 <HAL_GPIO_Init+0x2a0>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d013      	beq.n	8009562 <HAL_GPIO_Init+0x19e>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a4a      	ldr	r2, [pc, #296]	; (8009668 <HAL_GPIO_Init+0x2a4>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d00d      	beq.n	800955e <HAL_GPIO_Init+0x19a>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a49      	ldr	r2, [pc, #292]	; (800966c <HAL_GPIO_Init+0x2a8>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d007      	beq.n	800955a <HAL_GPIO_Init+0x196>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a48      	ldr	r2, [pc, #288]	; (8009670 <HAL_GPIO_Init+0x2ac>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d101      	bne.n	8009556 <HAL_GPIO_Init+0x192>
 8009552:	2303      	movs	r3, #3
 8009554:	e006      	b.n	8009564 <HAL_GPIO_Init+0x1a0>
 8009556:	2304      	movs	r3, #4
 8009558:	e004      	b.n	8009564 <HAL_GPIO_Init+0x1a0>
 800955a:	2302      	movs	r3, #2
 800955c:	e002      	b.n	8009564 <HAL_GPIO_Init+0x1a0>
 800955e:	2301      	movs	r3, #1
 8009560:	e000      	b.n	8009564 <HAL_GPIO_Init+0x1a0>
 8009562:	2300      	movs	r3, #0
 8009564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009566:	f002 0203 	and.w	r2, r2, #3
 800956a:	0092      	lsls	r2, r2, #2
 800956c:	4093      	lsls	r3, r2
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	4313      	orrs	r3, r2
 8009572:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009574:	493a      	ldr	r1, [pc, #232]	; (8009660 <HAL_GPIO_Init+0x29c>)
 8009576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009578:	089b      	lsrs	r3, r3, #2
 800957a:	3302      	adds	r3, #2
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d006      	beq.n	800959c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800958e:	4b39      	ldr	r3, [pc, #228]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	4938      	ldr	r1, [pc, #224]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	4313      	orrs	r3, r2
 8009598:	600b      	str	r3, [r1, #0]
 800959a:	e006      	b.n	80095aa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800959c:	4b35      	ldr	r3, [pc, #212]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	43db      	mvns	r3, r3
 80095a4:	4933      	ldr	r1, [pc, #204]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 80095a6:	4013      	ands	r3, r2
 80095a8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d006      	beq.n	80095c4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80095b6:	4b2f      	ldr	r3, [pc, #188]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	492e      	ldr	r1, [pc, #184]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	4313      	orrs	r3, r2
 80095c0:	604b      	str	r3, [r1, #4]
 80095c2:	e006      	b.n	80095d2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80095c4:	4b2b      	ldr	r3, [pc, #172]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	43db      	mvns	r3, r3
 80095cc:	4929      	ldr	r1, [pc, #164]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 80095ce:	4013      	ands	r3, r2
 80095d0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d006      	beq.n	80095ec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80095de:	4b25      	ldr	r3, [pc, #148]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 80095e0:	689a      	ldr	r2, [r3, #8]
 80095e2:	4924      	ldr	r1, [pc, #144]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	608b      	str	r3, [r1, #8]
 80095ea:	e006      	b.n	80095fa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80095ec:	4b21      	ldr	r3, [pc, #132]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 80095ee:	689a      	ldr	r2, [r3, #8]
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	43db      	mvns	r3, r3
 80095f4:	491f      	ldr	r1, [pc, #124]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 80095f6:	4013      	ands	r3, r2
 80095f8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d006      	beq.n	8009614 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009606:	4b1b      	ldr	r3, [pc, #108]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 8009608:	68da      	ldr	r2, [r3, #12]
 800960a:	491a      	ldr	r1, [pc, #104]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	4313      	orrs	r3, r2
 8009610:	60cb      	str	r3, [r1, #12]
 8009612:	e006      	b.n	8009622 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009614:	4b17      	ldr	r3, [pc, #92]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 8009616:	68da      	ldr	r2, [r3, #12]
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	43db      	mvns	r3, r3
 800961c:	4915      	ldr	r1, [pc, #84]	; (8009674 <HAL_GPIO_Init+0x2b0>)
 800961e:	4013      	ands	r3, r2
 8009620:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8009622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009624:	3301      	adds	r3, #1
 8009626:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	fa22 f303 	lsr.w	r3, r2, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	f47f aed0 	bne.w	80093d8 <HAL_GPIO_Init+0x14>
  }
}
 8009638:	bf00      	nop
 800963a:	372c      	adds	r7, #44	; 0x2c
 800963c:	46bd      	mov	sp, r7
 800963e:	bc80      	pop	{r7}
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	10210000 	.word	0x10210000
 8009648:	10110000 	.word	0x10110000
 800964c:	10120000 	.word	0x10120000
 8009650:	10310000 	.word	0x10310000
 8009654:	10320000 	.word	0x10320000
 8009658:	10220000 	.word	0x10220000
 800965c:	40021000 	.word	0x40021000
 8009660:	40010000 	.word	0x40010000
 8009664:	40010800 	.word	0x40010800
 8009668:	40010c00 	.word	0x40010c00
 800966c:	40011000 	.word	0x40011000
 8009670:	40011400 	.word	0x40011400
 8009674:	40010400 	.word	0x40010400

08009678 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	689a      	ldr	r2, [r3, #8]
 8009688:	887b      	ldrh	r3, [r7, #2]
 800968a:	4013      	ands	r3, r2
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009690:	2301      	movs	r3, #1
 8009692:	73fb      	strb	r3, [r7, #15]
 8009694:	e001      	b.n	800969a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009696:	2300      	movs	r3, #0
 8009698:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800969a:	7bfb      	ldrb	r3, [r7, #15]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3714      	adds	r7, #20
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bc80      	pop	{r7}
 80096a4:	4770      	bx	lr

080096a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b083      	sub	sp, #12
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	460b      	mov	r3, r1
 80096b0:	807b      	strh	r3, [r7, #2]
 80096b2:	4613      	mov	r3, r2
 80096b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80096b6:	787b      	ldrb	r3, [r7, #1]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d003      	beq.n	80096c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80096bc:	887a      	ldrh	r2, [r7, #2]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80096c2:	e003      	b.n	80096cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80096c4:	887b      	ldrh	r3, [r7, #2]
 80096c6:	041a      	lsls	r2, r3, #16
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	611a      	str	r2, [r3, #16]
}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bc80      	pop	{r7}
 80096d4:	4770      	bx	lr

080096d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b083      	sub	sp, #12
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	460b      	mov	r3, r1
 80096e0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	887b      	ldrh	r3, [r7, #2]
 80096e8:	4013      	ands	r3, r2
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80096ee:	887a      	ldrh	r2, [r7, #2]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80096f4:	e002      	b.n	80096fc <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80096f6:	887a      	ldrh	r2, [r7, #2]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	611a      	str	r2, [r3, #16]
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	bc80      	pop	{r7}
 8009704:	4770      	bx	lr
	...

08009708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e10f      	b.n	800993a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	d106      	bne.n	8009734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7f8 ff2a 	bl	8002588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2224      	movs	r2, #36	; 0x24
 8009738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f022 0201 	bic.w	r2, r2, #1
 800974a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800974c:	f001 f93e 	bl	800a9cc <HAL_RCC_GetPCLK1Freq>
 8009750:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	4a7b      	ldr	r2, [pc, #492]	; (8009944 <HAL_I2C_Init+0x23c>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d807      	bhi.n	800976c <HAL_I2C_Init+0x64>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	4a7a      	ldr	r2, [pc, #488]	; (8009948 <HAL_I2C_Init+0x240>)
 8009760:	4293      	cmp	r3, r2
 8009762:	bf94      	ite	ls
 8009764:	2301      	movls	r3, #1
 8009766:	2300      	movhi	r3, #0
 8009768:	b2db      	uxtb	r3, r3
 800976a:	e006      	b.n	800977a <HAL_I2C_Init+0x72>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4a77      	ldr	r2, [pc, #476]	; (800994c <HAL_I2C_Init+0x244>)
 8009770:	4293      	cmp	r3, r2
 8009772:	bf94      	ite	ls
 8009774:	2301      	movls	r3, #1
 8009776:	2300      	movhi	r3, #0
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e0db      	b.n	800993a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	4a72      	ldr	r2, [pc, #456]	; (8009950 <HAL_I2C_Init+0x248>)
 8009786:	fba2 2303 	umull	r2, r3, r2, r3
 800978a:	0c9b      	lsrs	r3, r3, #18
 800978c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	430a      	orrs	r2, r1
 80097a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6a1b      	ldr	r3, [r3, #32]
 80097a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	4a64      	ldr	r2, [pc, #400]	; (8009944 <HAL_I2C_Init+0x23c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d802      	bhi.n	80097bc <HAL_I2C_Init+0xb4>
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	3301      	adds	r3, #1
 80097ba:	e009      	b.n	80097d0 <HAL_I2C_Init+0xc8>
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80097c2:	fb02 f303 	mul.w	r3, r2, r3
 80097c6:	4a63      	ldr	r2, [pc, #396]	; (8009954 <HAL_I2C_Init+0x24c>)
 80097c8:	fba2 2303 	umull	r2, r3, r2, r3
 80097cc:	099b      	lsrs	r3, r3, #6
 80097ce:	3301      	adds	r3, #1
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	6812      	ldr	r2, [r2, #0]
 80097d4:	430b      	orrs	r3, r1
 80097d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80097e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	4956      	ldr	r1, [pc, #344]	; (8009944 <HAL_I2C_Init+0x23c>)
 80097ec:	428b      	cmp	r3, r1
 80097ee:	d80d      	bhi.n	800980c <HAL_I2C_Init+0x104>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	1e59      	subs	r1, r3, #1
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	005b      	lsls	r3, r3, #1
 80097fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80097fe:	3301      	adds	r3, #1
 8009800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009804:	2b04      	cmp	r3, #4
 8009806:	bf38      	it	cc
 8009808:	2304      	movcc	r3, #4
 800980a:	e04f      	b.n	80098ac <HAL_I2C_Init+0x1a4>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d111      	bne.n	8009838 <HAL_I2C_Init+0x130>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	1e58      	subs	r0, r3, #1
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6859      	ldr	r1, [r3, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	005b      	lsls	r3, r3, #1
 8009820:	440b      	add	r3, r1
 8009822:	fbb0 f3f3 	udiv	r3, r0, r3
 8009826:	3301      	adds	r3, #1
 8009828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800982c:	2b00      	cmp	r3, #0
 800982e:	bf0c      	ite	eq
 8009830:	2301      	moveq	r3, #1
 8009832:	2300      	movne	r3, #0
 8009834:	b2db      	uxtb	r3, r3
 8009836:	e012      	b.n	800985e <HAL_I2C_Init+0x156>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	1e58      	subs	r0, r3, #1
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6859      	ldr	r1, [r3, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	440b      	add	r3, r1
 8009846:	0099      	lsls	r1, r3, #2
 8009848:	440b      	add	r3, r1
 800984a:	fbb0 f3f3 	udiv	r3, r0, r3
 800984e:	3301      	adds	r3, #1
 8009850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009854:	2b00      	cmp	r3, #0
 8009856:	bf0c      	ite	eq
 8009858:	2301      	moveq	r3, #1
 800985a:	2300      	movne	r3, #0
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <HAL_I2C_Init+0x15e>
 8009862:	2301      	movs	r3, #1
 8009864:	e022      	b.n	80098ac <HAL_I2C_Init+0x1a4>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10e      	bne.n	800988c <HAL_I2C_Init+0x184>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	1e58      	subs	r0, r3, #1
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6859      	ldr	r1, [r3, #4]
 8009876:	460b      	mov	r3, r1
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	440b      	add	r3, r1
 800987c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009880:	3301      	adds	r3, #1
 8009882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800988a:	e00f      	b.n	80098ac <HAL_I2C_Init+0x1a4>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	1e58      	subs	r0, r3, #1
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6859      	ldr	r1, [r3, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	440b      	add	r3, r1
 800989a:	0099      	lsls	r1, r3, #2
 800989c:	440b      	add	r3, r1
 800989e:	fbb0 f3f3 	udiv	r3, r0, r3
 80098a2:	3301      	adds	r3, #1
 80098a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098ac:	6879      	ldr	r1, [r7, #4]
 80098ae:	6809      	ldr	r1, [r1, #0]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	69da      	ldr	r2, [r3, #28]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	431a      	orrs	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80098da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	6911      	ldr	r1, [r2, #16]
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	68d2      	ldr	r2, [r2, #12]
 80098e6:	4311      	orrs	r1, r2
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	6812      	ldr	r2, [r2, #0]
 80098ec:	430b      	orrs	r3, r1
 80098ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	695a      	ldr	r2, [r3, #20]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	431a      	orrs	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	430a      	orrs	r2, r1
 800990a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f042 0201 	orr.w	r2, r2, #1
 800991a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2220      	movs	r2, #32
 8009926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	000186a0 	.word	0x000186a0
 8009948:	001e847f 	.word	0x001e847f
 800994c:	003d08ff 	.word	0x003d08ff
 8009950:	431bde83 	.word	0x431bde83
 8009954:	10624dd3 	.word	0x10624dd3

08009958 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b088      	sub	sp, #32
 800995c:	af02      	add	r7, sp, #8
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	607a      	str	r2, [r7, #4]
 8009962:	461a      	mov	r2, r3
 8009964:	460b      	mov	r3, r1
 8009966:	817b      	strh	r3, [r7, #10]
 8009968:	4613      	mov	r3, r2
 800996a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800996c:	f7fd ff72 	bl	8007854 <HAL_GetTick>
 8009970:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b20      	cmp	r3, #32
 800997c:	f040 80e0 	bne.w	8009b40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	2319      	movs	r3, #25
 8009986:	2201      	movs	r2, #1
 8009988:	4970      	ldr	r1, [pc, #448]	; (8009b4c <HAL_I2C_Master_Transmit+0x1f4>)
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 fa7a 	bl	8009e84 <I2C_WaitOnFlagUntilTimeout>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d001      	beq.n	800999a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009996:	2302      	movs	r3, #2
 8009998:	e0d3      	b.n	8009b42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d101      	bne.n	80099a8 <HAL_I2C_Master_Transmit+0x50>
 80099a4:	2302      	movs	r3, #2
 80099a6:	e0cc      	b.n	8009b42 <HAL_I2C_Master_Transmit+0x1ea>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d007      	beq.n	80099ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f042 0201 	orr.w	r2, r2, #1
 80099cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2221      	movs	r2, #33	; 0x21
 80099e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2210      	movs	r2, #16
 80099ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	893a      	ldrh	r2, [r7, #8]
 80099fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	4a50      	ldr	r2, [pc, #320]	; (8009b50 <HAL_I2C_Master_Transmit+0x1f8>)
 8009a0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009a10:	8979      	ldrh	r1, [r7, #10]
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	6a3a      	ldr	r2, [r7, #32]
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f000 f9be 	bl	8009d98 <I2C_MasterRequestWrite>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e08d      	b.n	8009b42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a26:	2300      	movs	r3, #0
 8009a28:	613b      	str	r3, [r7, #16]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	613b      	str	r3, [r7, #16]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	613b      	str	r3, [r7, #16]
 8009a3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009a3c:	e066      	b.n	8009b0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	6a39      	ldr	r1, [r7, #32]
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f000 faf4 	bl	800a030 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00d      	beq.n	8009a6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a52:	2b04      	cmp	r3, #4
 8009a54:	d107      	bne.n	8009a66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e06b      	b.n	8009b42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6e:	781a      	ldrb	r2, [r3, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7a:	1c5a      	adds	r2, r3, #1
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	3b01      	subs	r3, #1
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a92:	3b01      	subs	r3, #1
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	695b      	ldr	r3, [r3, #20]
 8009aa0:	f003 0304 	and.w	r3, r3, #4
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	d11b      	bne.n	8009ae0 <HAL_I2C_Master_Transmit+0x188>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d017      	beq.n	8009ae0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab4:	781a      	ldrb	r2, [r3, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac0:	1c5a      	adds	r2, r3, #1
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	3b01      	subs	r3, #1
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ae0:	697a      	ldr	r2, [r7, #20]
 8009ae2:	6a39      	ldr	r1, [r7, #32]
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 fae4 	bl	800a0b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00d      	beq.n	8009b0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af4:	2b04      	cmp	r3, #4
 8009af6:	d107      	bne.n	8009b08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e01a      	b.n	8009b42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d194      	bne.n	8009a3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2220      	movs	r2, #32
 8009b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	e000      	b.n	8009b42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009b40:	2302      	movs	r3, #2
  }
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3718      	adds	r7, #24
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	00100002 	.word	0x00100002
 8009b50:	ffff0000 	.word	0xffff0000

08009b54 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b08a      	sub	sp, #40	; 0x28
 8009b58:	af02      	add	r7, sp, #8
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	607a      	str	r2, [r7, #4]
 8009b5e:	603b      	str	r3, [r7, #0]
 8009b60:	460b      	mov	r3, r1
 8009b62:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009b64:	f7fd fe76 	bl	8007854 <HAL_GetTick>
 8009b68:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b20      	cmp	r3, #32
 8009b78:	f040 8105 	bne.w	8009d86 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	2319      	movs	r3, #25
 8009b82:	2201      	movs	r2, #1
 8009b84:	4982      	ldr	r1, [pc, #520]	; (8009d90 <HAL_I2C_IsDeviceReady+0x23c>)
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f000 f97c 	bl	8009e84 <I2C_WaitOnFlagUntilTimeout>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009b92:	2302      	movs	r3, #2
 8009b94:	e0f8      	b.n	8009d88 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d101      	bne.n	8009ba4 <HAL_I2C_IsDeviceReady+0x50>
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	e0f1      	b.n	8009d88 <HAL_I2C_IsDeviceReady+0x234>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d007      	beq.n	8009bca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f042 0201 	orr.w	r2, r2, #1
 8009bc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2224      	movs	r2, #36	; 0x24
 8009bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	4a6a      	ldr	r2, [pc, #424]	; (8009d94 <HAL_I2C_IsDeviceReady+0x240>)
 8009bec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bfc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f000 f93a 	bl	8009e84 <I2C_WaitOnFlagUntilTimeout>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d001      	beq.n	8009c1a <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e0b6      	b.n	8009d88 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009c1a:	897b      	ldrh	r3, [r7, #10]
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	461a      	mov	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009c28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009c2a:	f7fd fe13 	bl	8007854 <HAL_GetTick>
 8009c2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	f003 0302 	and.w	r3, r3, #2
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	bf0c      	ite	eq
 8009c3e:	2301      	moveq	r3, #1
 8009c40:	2300      	movne	r3, #0
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	695b      	ldr	r3, [r3, #20]
 8009c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c54:	bf0c      	ite	eq
 8009c56:	2301      	moveq	r3, #1
 8009c58:	2300      	movne	r3, #0
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009c5e:	e025      	b.n	8009cac <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009c60:	f7fd fdf8 	bl	8007854 <HAL_GetTick>
 8009c64:	4602      	mov	r2, r0
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d302      	bcc.n	8009c76 <HAL_I2C_IsDeviceReady+0x122>
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d103      	bne.n	8009c7e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	22a0      	movs	r2, #160	; 0xa0
 8009c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	f003 0302 	and.w	r3, r3, #2
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	bf0c      	ite	eq
 8009c8c:	2301      	moveq	r3, #1
 8009c8e:	2300      	movne	r3, #0
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ca2:	bf0c      	ite	eq
 8009ca4:	2301      	moveq	r3, #1
 8009ca6:	2300      	movne	r3, #0
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	2ba0      	cmp	r3, #160	; 0xa0
 8009cb6:	d005      	beq.n	8009cc4 <HAL_I2C_IsDeviceReady+0x170>
 8009cb8:	7dfb      	ldrb	r3, [r7, #23]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d102      	bne.n	8009cc4 <HAL_I2C_IsDeviceReady+0x170>
 8009cbe:	7dbb      	ldrb	r3, [r7, #22]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d0cd      	beq.n	8009c60 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2220      	movs	r2, #32
 8009cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d129      	bne.n	8009d2e <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ce8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cea:	2300      	movs	r3, #0
 8009cec:	613b      	str	r3, [r7, #16]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	613b      	str	r3, [r7, #16]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	613b      	str	r3, [r7, #16]
 8009cfe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	2319      	movs	r3, #25
 8009d06:	2201      	movs	r2, #1
 8009d08:	4921      	ldr	r1, [pc, #132]	; (8009d90 <HAL_I2C_IsDeviceReady+0x23c>)
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f000 f8ba 	bl	8009e84 <I2C_WaitOnFlagUntilTimeout>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e036      	b.n	8009d88 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2220      	movs	r2, #32
 8009d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	e02c      	b.n	8009d88 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d3c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d46:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	2319      	movs	r3, #25
 8009d4e:	2201      	movs	r2, #1
 8009d50:	490f      	ldr	r1, [pc, #60]	; (8009d90 <HAL_I2C_IsDeviceReady+0x23c>)
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f000 f896 	bl	8009e84 <I2C_WaitOnFlagUntilTimeout>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e012      	b.n	8009d88 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	3301      	adds	r3, #1
 8009d66:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009d68:	69ba      	ldr	r2, [r7, #24]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	f4ff af3e 	bcc.w	8009bee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2220      	movs	r2, #32
 8009d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e000      	b.n	8009d88 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8009d86:	2302      	movs	r3, #2
  }
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3720      	adds	r7, #32
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	00100002 	.word	0x00100002
 8009d94:	ffff0000 	.word	0xffff0000

08009d98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b088      	sub	sp, #32
 8009d9c:	af02      	add	r7, sp, #8
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	607a      	str	r2, [r7, #4]
 8009da2:	603b      	str	r3, [r7, #0]
 8009da4:	460b      	mov	r3, r1
 8009da6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2b08      	cmp	r3, #8
 8009db2:	d006      	beq.n	8009dc2 <I2C_MasterRequestWrite+0x2a>
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d003      	beq.n	8009dc2 <I2C_MasterRequestWrite+0x2a>
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009dc0:	d108      	bne.n	8009dd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dd0:	601a      	str	r2, [r3, #0]
 8009dd2:	e00b      	b.n	8009dec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd8:	2b12      	cmp	r3, #18
 8009dda:	d107      	bne.n	8009dec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 f843 	bl	8009e84 <I2C_WaitOnFlagUntilTimeout>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e035      	b.n	8009e74 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e10:	d108      	bne.n	8009e24 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e12:	897b      	ldrh	r3, [r7, #10]
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	461a      	mov	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009e20:	611a      	str	r2, [r3, #16]
 8009e22:	e01b      	b.n	8009e5c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009e24:	897b      	ldrh	r3, [r7, #10]
 8009e26:	11db      	asrs	r3, r3, #7
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	f003 0306 	and.w	r3, r3, #6
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	f063 030f 	orn	r3, r3, #15
 8009e34:	b2da      	uxtb	r2, r3
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	490e      	ldr	r1, [pc, #56]	; (8009e7c <I2C_MasterRequestWrite+0xe4>)
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f000 f875 	bl	8009f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e010      	b.n	8009e74 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009e52:	897b      	ldrh	r3, [r7, #10]
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	4907      	ldr	r1, [pc, #28]	; (8009e80 <I2C_MasterRequestWrite+0xe8>)
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 f865 	bl	8009f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e000      	b.n	8009e74 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3718      	adds	r7, #24
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	00010008 	.word	0x00010008
 8009e80:	00010002 	.word	0x00010002

08009e84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	603b      	str	r3, [r7, #0]
 8009e90:	4613      	mov	r3, r2
 8009e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e94:	e025      	b.n	8009ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9c:	d021      	beq.n	8009ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e9e:	f7fd fcd9 	bl	8007854 <HAL_GetTick>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d302      	bcc.n	8009eb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d116      	bne.n	8009ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2220      	movs	r2, #32
 8009ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ece:	f043 0220 	orr.w	r2, r3, #32
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e023      	b.n	8009f2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	0c1b      	lsrs	r3, r3, #16
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d10d      	bne.n	8009f08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	43da      	mvns	r2, r3
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	bf0c      	ite	eq
 8009efe:	2301      	moveq	r3, #1
 8009f00:	2300      	movne	r3, #0
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	461a      	mov	r2, r3
 8009f06:	e00c      	b.n	8009f22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	43da      	mvns	r2, r3
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	4013      	ands	r3, r2
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	bf0c      	ite	eq
 8009f1a:	2301      	moveq	r3, #1
 8009f1c:	2300      	movne	r3, #0
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	461a      	mov	r2, r3
 8009f22:	79fb      	ldrb	r3, [r7, #7]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d0b6      	beq.n	8009e96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b084      	sub	sp, #16
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	60f8      	str	r0, [r7, #12]
 8009f3a:	60b9      	str	r1, [r7, #8]
 8009f3c:	607a      	str	r2, [r7, #4]
 8009f3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009f40:	e051      	b.n	8009fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f50:	d123      	bne.n	8009f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2220      	movs	r2, #32
 8009f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f86:	f043 0204 	orr.w	r2, r3, #4
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e046      	b.n	800a028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa0:	d021      	beq.n	8009fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fa2:	f7fd fc57 	bl	8007854 <HAL_GetTick>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d302      	bcc.n	8009fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d116      	bne.n	8009fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2220      	movs	r2, #32
 8009fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd2:	f043 0220 	orr.w	r2, r3, #32
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e020      	b.n	800a028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	0c1b      	lsrs	r3, r3, #16
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d10c      	bne.n	800a00a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	43da      	mvns	r2, r3
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	bf14      	ite	ne
 800a002:	2301      	movne	r3, #1
 800a004:	2300      	moveq	r3, #0
 800a006:	b2db      	uxtb	r3, r3
 800a008:	e00b      	b.n	800a022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	43da      	mvns	r2, r3
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	4013      	ands	r3, r2
 800a016:	b29b      	uxth	r3, r3
 800a018:	2b00      	cmp	r3, #0
 800a01a:	bf14      	ite	ne
 800a01c:	2301      	movne	r3, #1
 800a01e:	2300      	moveq	r3, #0
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d18d      	bne.n	8009f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a03c:	e02d      	b.n	800a09a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 f878 	bl	800a134 <I2C_IsAcknowledgeFailed>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e02d      	b.n	800a0aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a054:	d021      	beq.n	800a09a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a056:	f7fd fbfd 	bl	8007854 <HAL_GetTick>
 800a05a:	4602      	mov	r2, r0
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	429a      	cmp	r2, r3
 800a064:	d302      	bcc.n	800a06c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d116      	bne.n	800a09a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2220      	movs	r2, #32
 800a076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a086:	f043 0220 	orr.w	r2, r3, #32
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e007      	b.n	800a0aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0a4:	2b80      	cmp	r3, #128	; 0x80
 800a0a6:	d1ca      	bne.n	800a03e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	60f8      	str	r0, [r7, #12]
 800a0ba:	60b9      	str	r1, [r7, #8]
 800a0bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a0be:	e02d      	b.n	800a11c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f000 f837 	bl	800a134 <I2C_IsAcknowledgeFailed>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e02d      	b.n	800a12c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d6:	d021      	beq.n	800a11c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0d8:	f7fd fbbc 	bl	8007854 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d302      	bcc.n	800a0ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d116      	bne.n	800a11c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2220      	movs	r2, #32
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a108:	f043 0220 	orr.w	r2, r3, #32
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e007      	b.n	800a12c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	f003 0304 	and.w	r3, r3, #4
 800a126:	2b04      	cmp	r3, #4
 800a128:	d1ca      	bne.n	800a0c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	695b      	ldr	r3, [r3, #20]
 800a142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a14a:	d11b      	bne.n	800a184 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a154:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2220      	movs	r2, #32
 800a160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a170:	f043 0204 	orr.w	r2, r3, #4
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e000      	b.n	800a186 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bc80      	pop	{r7}
 800a18e:	4770      	bx	lr

0800a190 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d101      	bne.n	800a1a2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e02b      	b.n	800a1fa <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a1aa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f245 5255 	movw	r2, #21845	; 0x5555
 800a1b4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	6852      	ldr	r2, [r2, #4]
 800a1be:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	6892      	ldr	r2, [r2, #8]
 800a1c8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a1ca:	f7fd fb43 	bl	8007854 <HAL_GetTick>
 800a1ce:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 800a1d0:	e008      	b.n	800a1e4 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a1d2:	f7fd fb3f 	bl	8007854 <HAL_GetTick>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	2b30      	cmp	r3, #48	; 0x30
 800a1de:	d901      	bls.n	800a1e4 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e00a      	b.n	800a1fa <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != RESET)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1f1      	bne.n	800a1d2 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a1f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a202:	b480      	push	{r7}
 800a204:	b083      	sub	sp, #12
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a212:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	370c      	adds	r7, #12
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bc80      	pop	{r7}
 800a21e:	4770      	bx	lr

0800a220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d101      	bne.n	800a232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e26c      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f000 8087 	beq.w	800a34e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a240:	4b92      	ldr	r3, [pc, #584]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	f003 030c 	and.w	r3, r3, #12
 800a248:	2b04      	cmp	r3, #4
 800a24a:	d00c      	beq.n	800a266 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a24c:	4b8f      	ldr	r3, [pc, #572]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	f003 030c 	and.w	r3, r3, #12
 800a254:	2b08      	cmp	r3, #8
 800a256:	d112      	bne.n	800a27e <HAL_RCC_OscConfig+0x5e>
 800a258:	4b8c      	ldr	r3, [pc, #560]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a264:	d10b      	bne.n	800a27e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a266:	4b89      	ldr	r3, [pc, #548]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d06c      	beq.n	800a34c <HAL_RCC_OscConfig+0x12c>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d168      	bne.n	800a34c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e246      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a286:	d106      	bne.n	800a296 <HAL_RCC_OscConfig+0x76>
 800a288:	4b80      	ldr	r3, [pc, #512]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a7f      	ldr	r2, [pc, #508]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a28e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a292:	6013      	str	r3, [r2, #0]
 800a294:	e02e      	b.n	800a2f4 <HAL_RCC_OscConfig+0xd4>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d10c      	bne.n	800a2b8 <HAL_RCC_OscConfig+0x98>
 800a29e:	4b7b      	ldr	r3, [pc, #492]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a7a      	ldr	r2, [pc, #488]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a2a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2a8:	6013      	str	r3, [r2, #0]
 800a2aa:	4b78      	ldr	r3, [pc, #480]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a77      	ldr	r2, [pc, #476]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a2b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2b4:	6013      	str	r3, [r2, #0]
 800a2b6:	e01d      	b.n	800a2f4 <HAL_RCC_OscConfig+0xd4>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2c0:	d10c      	bne.n	800a2dc <HAL_RCC_OscConfig+0xbc>
 800a2c2:	4b72      	ldr	r3, [pc, #456]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a71      	ldr	r2, [pc, #452]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a2c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2cc:	6013      	str	r3, [r2, #0]
 800a2ce:	4b6f      	ldr	r3, [pc, #444]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a6e      	ldr	r2, [pc, #440]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a2d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2d8:	6013      	str	r3, [r2, #0]
 800a2da:	e00b      	b.n	800a2f4 <HAL_RCC_OscConfig+0xd4>
 800a2dc:	4b6b      	ldr	r3, [pc, #428]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a6a      	ldr	r2, [pc, #424]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a2e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2e6:	6013      	str	r3, [r2, #0]
 800a2e8:	4b68      	ldr	r3, [pc, #416]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a67      	ldr	r2, [pc, #412]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a2ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d013      	beq.n	800a324 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2fc:	f7fd faaa 	bl	8007854 <HAL_GetTick>
 800a300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a302:	e008      	b.n	800a316 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a304:	f7fd faa6 	bl	8007854 <HAL_GetTick>
 800a308:	4602      	mov	r2, r0
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	2b64      	cmp	r3, #100	; 0x64
 800a310:	d901      	bls.n	800a316 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a312:	2303      	movs	r3, #3
 800a314:	e1fa      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a316:	4b5d      	ldr	r3, [pc, #372]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d0f0      	beq.n	800a304 <HAL_RCC_OscConfig+0xe4>
 800a322:	e014      	b.n	800a34e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a324:	f7fd fa96 	bl	8007854 <HAL_GetTick>
 800a328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a32a:	e008      	b.n	800a33e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a32c:	f7fd fa92 	bl	8007854 <HAL_GetTick>
 800a330:	4602      	mov	r2, r0
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	1ad3      	subs	r3, r2, r3
 800a336:	2b64      	cmp	r3, #100	; 0x64
 800a338:	d901      	bls.n	800a33e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e1e6      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a33e:	4b53      	ldr	r3, [pc, #332]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1f0      	bne.n	800a32c <HAL_RCC_OscConfig+0x10c>
 800a34a:	e000      	b.n	800a34e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a34c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0302 	and.w	r3, r3, #2
 800a356:	2b00      	cmp	r3, #0
 800a358:	d063      	beq.n	800a422 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a35a:	4b4c      	ldr	r3, [pc, #304]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	f003 030c 	and.w	r3, r3, #12
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00b      	beq.n	800a37e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a366:	4b49      	ldr	r3, [pc, #292]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	f003 030c 	and.w	r3, r3, #12
 800a36e:	2b08      	cmp	r3, #8
 800a370:	d11c      	bne.n	800a3ac <HAL_RCC_OscConfig+0x18c>
 800a372:	4b46      	ldr	r3, [pc, #280]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d116      	bne.n	800a3ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a37e:	4b43      	ldr	r3, [pc, #268]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f003 0302 	and.w	r3, r3, #2
 800a386:	2b00      	cmp	r3, #0
 800a388:	d005      	beq.n	800a396 <HAL_RCC_OscConfig+0x176>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d001      	beq.n	800a396 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e1ba      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a396:	4b3d      	ldr	r3, [pc, #244]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	4939      	ldr	r1, [pc, #228]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a3aa:	e03a      	b.n	800a422 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d020      	beq.n	800a3f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a3b4:	4b36      	ldr	r3, [pc, #216]	; (800a490 <HAL_RCC_OscConfig+0x270>)
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3ba:	f7fd fa4b 	bl	8007854 <HAL_GetTick>
 800a3be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3c0:	e008      	b.n	800a3d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3c2:	f7fd fa47 	bl	8007854 <HAL_GetTick>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d901      	bls.n	800a3d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e19b      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3d4:	4b2d      	ldr	r3, [pc, #180]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 0302 	and.w	r3, r3, #2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d0f0      	beq.n	800a3c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3e0:	4b2a      	ldr	r3, [pc, #168]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	695b      	ldr	r3, [r3, #20]
 800a3ec:	00db      	lsls	r3, r3, #3
 800a3ee:	4927      	ldr	r1, [pc, #156]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	600b      	str	r3, [r1, #0]
 800a3f4:	e015      	b.n	800a422 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a3f6:	4b26      	ldr	r3, [pc, #152]	; (800a490 <HAL_RCC_OscConfig+0x270>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3fc:	f7fd fa2a 	bl	8007854 <HAL_GetTick>
 800a400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a402:	e008      	b.n	800a416 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a404:	f7fd fa26 	bl	8007854 <HAL_GetTick>
 800a408:	4602      	mov	r2, r0
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	1ad3      	subs	r3, r2, r3
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d901      	bls.n	800a416 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a412:	2303      	movs	r3, #3
 800a414:	e17a      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a416:	4b1d      	ldr	r3, [pc, #116]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f003 0302 	and.w	r3, r3, #2
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1f0      	bne.n	800a404 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 0308 	and.w	r3, r3, #8
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d03a      	beq.n	800a4a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d019      	beq.n	800a46a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a436:	4b17      	ldr	r3, [pc, #92]	; (800a494 <HAL_RCC_OscConfig+0x274>)
 800a438:	2201      	movs	r2, #1
 800a43a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a43c:	f7fd fa0a 	bl	8007854 <HAL_GetTick>
 800a440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a442:	e008      	b.n	800a456 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a444:	f7fd fa06 	bl	8007854 <HAL_GetTick>
 800a448:	4602      	mov	r2, r0
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	1ad3      	subs	r3, r2, r3
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d901      	bls.n	800a456 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a452:	2303      	movs	r3, #3
 800a454:	e15a      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a456:	4b0d      	ldr	r3, [pc, #52]	; (800a48c <HAL_RCC_OscConfig+0x26c>)
 800a458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45a:	f003 0302 	and.w	r3, r3, #2
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d0f0      	beq.n	800a444 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a462:	2001      	movs	r0, #1
 800a464:	f000 fada 	bl	800aa1c <RCC_Delay>
 800a468:	e01c      	b.n	800a4a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a46a:	4b0a      	ldr	r3, [pc, #40]	; (800a494 <HAL_RCC_OscConfig+0x274>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a470:	f7fd f9f0 	bl	8007854 <HAL_GetTick>
 800a474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a476:	e00f      	b.n	800a498 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a478:	f7fd f9ec 	bl	8007854 <HAL_GetTick>
 800a47c:	4602      	mov	r2, r0
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	2b02      	cmp	r3, #2
 800a484:	d908      	bls.n	800a498 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a486:	2303      	movs	r3, #3
 800a488:	e140      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
 800a48a:	bf00      	nop
 800a48c:	40021000 	.word	0x40021000
 800a490:	42420000 	.word	0x42420000
 800a494:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a498:	4b9e      	ldr	r3, [pc, #632]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49c:	f003 0302 	and.w	r3, r3, #2
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1e9      	bne.n	800a478 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0304 	and.w	r3, r3, #4
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 80a6 	beq.w	800a5fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a4b6:	4b97      	ldr	r3, [pc, #604]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a4b8:	69db      	ldr	r3, [r3, #28]
 800a4ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10d      	bne.n	800a4de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a4c2:	4b94      	ldr	r3, [pc, #592]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a4c4:	69db      	ldr	r3, [r3, #28]
 800a4c6:	4a93      	ldr	r2, [pc, #588]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a4c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4cc:	61d3      	str	r3, [r2, #28]
 800a4ce:	4b91      	ldr	r3, [pc, #580]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a4d0:	69db      	ldr	r3, [r3, #28]
 800a4d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4d6:	60bb      	str	r3, [r7, #8]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4de:	4b8e      	ldr	r3, [pc, #568]	; (800a718 <HAL_RCC_OscConfig+0x4f8>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d118      	bne.n	800a51c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a4ea:	4b8b      	ldr	r3, [pc, #556]	; (800a718 <HAL_RCC_OscConfig+0x4f8>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a8a      	ldr	r2, [pc, #552]	; (800a718 <HAL_RCC_OscConfig+0x4f8>)
 800a4f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a4f6:	f7fd f9ad 	bl	8007854 <HAL_GetTick>
 800a4fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4fc:	e008      	b.n	800a510 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4fe:	f7fd f9a9 	bl	8007854 <HAL_GetTick>
 800a502:	4602      	mov	r2, r0
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	1ad3      	subs	r3, r2, r3
 800a508:	2b64      	cmp	r3, #100	; 0x64
 800a50a:	d901      	bls.n	800a510 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e0fd      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a510:	4b81      	ldr	r3, [pc, #516]	; (800a718 <HAL_RCC_OscConfig+0x4f8>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d0f0      	beq.n	800a4fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d106      	bne.n	800a532 <HAL_RCC_OscConfig+0x312>
 800a524:	4b7b      	ldr	r3, [pc, #492]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a526:	6a1b      	ldr	r3, [r3, #32]
 800a528:	4a7a      	ldr	r2, [pc, #488]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a52a:	f043 0301 	orr.w	r3, r3, #1
 800a52e:	6213      	str	r3, [r2, #32]
 800a530:	e02d      	b.n	800a58e <HAL_RCC_OscConfig+0x36e>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d10c      	bne.n	800a554 <HAL_RCC_OscConfig+0x334>
 800a53a:	4b76      	ldr	r3, [pc, #472]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a53c:	6a1b      	ldr	r3, [r3, #32]
 800a53e:	4a75      	ldr	r2, [pc, #468]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a540:	f023 0301 	bic.w	r3, r3, #1
 800a544:	6213      	str	r3, [r2, #32]
 800a546:	4b73      	ldr	r3, [pc, #460]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	4a72      	ldr	r2, [pc, #456]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a54c:	f023 0304 	bic.w	r3, r3, #4
 800a550:	6213      	str	r3, [r2, #32]
 800a552:	e01c      	b.n	800a58e <HAL_RCC_OscConfig+0x36e>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	2b05      	cmp	r3, #5
 800a55a:	d10c      	bne.n	800a576 <HAL_RCC_OscConfig+0x356>
 800a55c:	4b6d      	ldr	r3, [pc, #436]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a55e:	6a1b      	ldr	r3, [r3, #32]
 800a560:	4a6c      	ldr	r2, [pc, #432]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a562:	f043 0304 	orr.w	r3, r3, #4
 800a566:	6213      	str	r3, [r2, #32]
 800a568:	4b6a      	ldr	r3, [pc, #424]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a56a:	6a1b      	ldr	r3, [r3, #32]
 800a56c:	4a69      	ldr	r2, [pc, #420]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a56e:	f043 0301 	orr.w	r3, r3, #1
 800a572:	6213      	str	r3, [r2, #32]
 800a574:	e00b      	b.n	800a58e <HAL_RCC_OscConfig+0x36e>
 800a576:	4b67      	ldr	r3, [pc, #412]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a578:	6a1b      	ldr	r3, [r3, #32]
 800a57a:	4a66      	ldr	r2, [pc, #408]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a57c:	f023 0301 	bic.w	r3, r3, #1
 800a580:	6213      	str	r3, [r2, #32]
 800a582:	4b64      	ldr	r3, [pc, #400]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	4a63      	ldr	r2, [pc, #396]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a588:	f023 0304 	bic.w	r3, r3, #4
 800a58c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d015      	beq.n	800a5c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a596:	f7fd f95d 	bl	8007854 <HAL_GetTick>
 800a59a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a59c:	e00a      	b.n	800a5b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a59e:	f7fd f959 	bl	8007854 <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d901      	bls.n	800a5b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	e0ab      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5b4:	4b57      	ldr	r3, [pc, #348]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a5b6:	6a1b      	ldr	r3, [r3, #32]
 800a5b8:	f003 0302 	and.w	r3, r3, #2
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d0ee      	beq.n	800a59e <HAL_RCC_OscConfig+0x37e>
 800a5c0:	e014      	b.n	800a5ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5c2:	f7fd f947 	bl	8007854 <HAL_GetTick>
 800a5c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a5c8:	e00a      	b.n	800a5e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5ca:	f7fd f943 	bl	8007854 <HAL_GetTick>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d901      	bls.n	800a5e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e095      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a5e0:	4b4c      	ldr	r3, [pc, #304]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a5e2:	6a1b      	ldr	r3, [r3, #32]
 800a5e4:	f003 0302 	and.w	r3, r3, #2
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d1ee      	bne.n	800a5ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a5ec:	7dfb      	ldrb	r3, [r7, #23]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d105      	bne.n	800a5fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5f2:	4b48      	ldr	r3, [pc, #288]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	4a47      	ldr	r2, [pc, #284]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a5f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	2b00      	cmp	r3, #0
 800a604:	f000 8081 	beq.w	800a70a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a608:	4b42      	ldr	r3, [pc, #264]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	f003 030c 	and.w	r3, r3, #12
 800a610:	2b08      	cmp	r3, #8
 800a612:	d061      	beq.n	800a6d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	69db      	ldr	r3, [r3, #28]
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d146      	bne.n	800a6aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a61c:	4b3f      	ldr	r3, [pc, #252]	; (800a71c <HAL_RCC_OscConfig+0x4fc>)
 800a61e:	2200      	movs	r2, #0
 800a620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a622:	f7fd f917 	bl	8007854 <HAL_GetTick>
 800a626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a628:	e008      	b.n	800a63c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a62a:	f7fd f913 	bl	8007854 <HAL_GetTick>
 800a62e:	4602      	mov	r2, r0
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	2b02      	cmp	r3, #2
 800a636:	d901      	bls.n	800a63c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a638:	2303      	movs	r3, #3
 800a63a:	e067      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a63c:	4b35      	ldr	r3, [pc, #212]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1f0      	bne.n	800a62a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a1b      	ldr	r3, [r3, #32]
 800a64c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a650:	d108      	bne.n	800a664 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a652:	4b30      	ldr	r3, [pc, #192]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	492d      	ldr	r1, [pc, #180]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a660:	4313      	orrs	r3, r2
 800a662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a664:	4b2b      	ldr	r3, [pc, #172]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a19      	ldr	r1, [r3, #32]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	430b      	orrs	r3, r1
 800a676:	4927      	ldr	r1, [pc, #156]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a678:	4313      	orrs	r3, r2
 800a67a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a67c:	4b27      	ldr	r3, [pc, #156]	; (800a71c <HAL_RCC_OscConfig+0x4fc>)
 800a67e:	2201      	movs	r2, #1
 800a680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a682:	f7fd f8e7 	bl	8007854 <HAL_GetTick>
 800a686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a688:	e008      	b.n	800a69c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a68a:	f7fd f8e3 	bl	8007854 <HAL_GetTick>
 800a68e:	4602      	mov	r2, r0
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	1ad3      	subs	r3, r2, r3
 800a694:	2b02      	cmp	r3, #2
 800a696:	d901      	bls.n	800a69c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a698:	2303      	movs	r3, #3
 800a69a:	e037      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a69c:	4b1d      	ldr	r3, [pc, #116]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d0f0      	beq.n	800a68a <HAL_RCC_OscConfig+0x46a>
 800a6a8:	e02f      	b.n	800a70a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6aa:	4b1c      	ldr	r3, [pc, #112]	; (800a71c <HAL_RCC_OscConfig+0x4fc>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6b0:	f7fd f8d0 	bl	8007854 <HAL_GetTick>
 800a6b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a6b6:	e008      	b.n	800a6ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6b8:	f7fd f8cc 	bl	8007854 <HAL_GetTick>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d901      	bls.n	800a6ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e020      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a6ca:	4b12      	ldr	r3, [pc, #72]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d1f0      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x498>
 800a6d6:	e018      	b.n	800a70a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	69db      	ldr	r3, [r3, #28]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d101      	bne.n	800a6e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e013      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a6e4:	4b0b      	ldr	r3, [pc, #44]	; (800a714 <HAL_RCC_OscConfig+0x4f4>)
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a1b      	ldr	r3, [r3, #32]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d106      	bne.n	800a706 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a702:	429a      	cmp	r2, r3
 800a704:	d001      	beq.n	800a70a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e000      	b.n	800a70c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3718      	adds	r7, #24
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	40021000 	.word	0x40021000
 800a718:	40007000 	.word	0x40007000
 800a71c:	42420060 	.word	0x42420060

0800a720 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d101      	bne.n	800a734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	e0d0      	b.n	800a8d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a734:	4b6a      	ldr	r3, [pc, #424]	; (800a8e0 <HAL_RCC_ClockConfig+0x1c0>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0307 	and.w	r3, r3, #7
 800a73c:	683a      	ldr	r2, [r7, #0]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d910      	bls.n	800a764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a742:	4b67      	ldr	r3, [pc, #412]	; (800a8e0 <HAL_RCC_ClockConfig+0x1c0>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f023 0207 	bic.w	r2, r3, #7
 800a74a:	4965      	ldr	r1, [pc, #404]	; (800a8e0 <HAL_RCC_ClockConfig+0x1c0>)
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	4313      	orrs	r3, r2
 800a750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a752:	4b63      	ldr	r3, [pc, #396]	; (800a8e0 <HAL_RCC_ClockConfig+0x1c0>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 0307 	and.w	r3, r3, #7
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d001      	beq.n	800a764 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	e0b8      	b.n	800a8d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 0302 	and.w	r3, r3, #2
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d020      	beq.n	800a7b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f003 0304 	and.w	r3, r3, #4
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d005      	beq.n	800a788 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a77c:	4b59      	ldr	r3, [pc, #356]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	4a58      	ldr	r2, [pc, #352]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a782:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a786:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0308 	and.w	r3, r3, #8
 800a790:	2b00      	cmp	r3, #0
 800a792:	d005      	beq.n	800a7a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a794:	4b53      	ldr	r3, [pc, #332]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	4a52      	ldr	r2, [pc, #328]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a79a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a79e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7a0:	4b50      	ldr	r3, [pc, #320]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	494d      	ldr	r1, [pc, #308]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d040      	beq.n	800a840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d107      	bne.n	800a7d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7c6:	4b47      	ldr	r3, [pc, #284]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d115      	bne.n	800a7fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e07f      	b.n	800a8d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	2b02      	cmp	r3, #2
 800a7dc:	d107      	bne.n	800a7ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7de:	4b41      	ldr	r3, [pc, #260]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d109      	bne.n	800a7fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e073      	b.n	800a8d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7ee:	4b3d      	ldr	r3, [pc, #244]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f003 0302 	and.w	r3, r3, #2
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d101      	bne.n	800a7fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e06b      	b.n	800a8d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a7fe:	4b39      	ldr	r3, [pc, #228]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	f023 0203 	bic.w	r2, r3, #3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	4936      	ldr	r1, [pc, #216]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a80c:	4313      	orrs	r3, r2
 800a80e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a810:	f7fd f820 	bl	8007854 <HAL_GetTick>
 800a814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a816:	e00a      	b.n	800a82e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a818:	f7fd f81c 	bl	8007854 <HAL_GetTick>
 800a81c:	4602      	mov	r2, r0
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	f241 3288 	movw	r2, #5000	; 0x1388
 800a826:	4293      	cmp	r3, r2
 800a828:	d901      	bls.n	800a82e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a82a:	2303      	movs	r3, #3
 800a82c:	e053      	b.n	800a8d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a82e:	4b2d      	ldr	r3, [pc, #180]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	f003 020c 	and.w	r2, r3, #12
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d1eb      	bne.n	800a818 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a840:	4b27      	ldr	r3, [pc, #156]	; (800a8e0 <HAL_RCC_ClockConfig+0x1c0>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f003 0307 	and.w	r3, r3, #7
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d210      	bcs.n	800a870 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a84e:	4b24      	ldr	r3, [pc, #144]	; (800a8e0 <HAL_RCC_ClockConfig+0x1c0>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f023 0207 	bic.w	r2, r3, #7
 800a856:	4922      	ldr	r1, [pc, #136]	; (800a8e0 <HAL_RCC_ClockConfig+0x1c0>)
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a85e:	4b20      	ldr	r3, [pc, #128]	; (800a8e0 <HAL_RCC_ClockConfig+0x1c0>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 0307 	and.w	r3, r3, #7
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d001      	beq.n	800a870 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e032      	b.n	800a8d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 0304 	and.w	r3, r3, #4
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d008      	beq.n	800a88e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a87c:	4b19      	ldr	r3, [pc, #100]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	4916      	ldr	r1, [pc, #88]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a88a:	4313      	orrs	r3, r2
 800a88c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 0308 	and.w	r3, r3, #8
 800a896:	2b00      	cmp	r3, #0
 800a898:	d009      	beq.n	800a8ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a89a:	4b12      	ldr	r3, [pc, #72]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	00db      	lsls	r3, r3, #3
 800a8a8:	490e      	ldr	r1, [pc, #56]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a8ae:	f000 f821 	bl	800a8f4 <HAL_RCC_GetSysClockFreq>
 800a8b2:	4601      	mov	r1, r0
 800a8b4:	4b0b      	ldr	r3, [pc, #44]	; (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	091b      	lsrs	r3, r3, #4
 800a8ba:	f003 030f 	and.w	r3, r3, #15
 800a8be:	4a0a      	ldr	r2, [pc, #40]	; (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a8c0:	5cd3      	ldrb	r3, [r2, r3]
 800a8c2:	fa21 f303 	lsr.w	r3, r1, r3
 800a8c6:	4a09      	ldr	r2, [pc, #36]	; (800a8ec <HAL_RCC_ClockConfig+0x1cc>)
 800a8c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a8ca:	4b09      	ldr	r3, [pc, #36]	; (800a8f0 <HAL_RCC_ClockConfig+0x1d0>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fc ff7e 	bl	80077d0 <HAL_InitTick>

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	40022000 	.word	0x40022000
 800a8e4:	40021000 	.word	0x40021000
 800a8e8:	0800e6a8 	.word	0x0800e6a8
 800a8ec:	20000084 	.word	0x20000084
 800a8f0:	20000088 	.word	0x20000088

0800a8f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8f4:	b490      	push	{r4, r7}
 800a8f6:	b08a      	sub	sp, #40	; 0x28
 800a8f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800a8fa:	4b2a      	ldr	r3, [pc, #168]	; (800a9a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800a8fc:	1d3c      	adds	r4, r7, #4
 800a8fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800a904:	4b28      	ldr	r3, [pc, #160]	; (800a9a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	61fb      	str	r3, [r7, #28]
 800a90e:	2300      	movs	r3, #0
 800a910:	61bb      	str	r3, [r7, #24]
 800a912:	2300      	movs	r3, #0
 800a914:	627b      	str	r3, [r7, #36]	; 0x24
 800a916:	2300      	movs	r3, #0
 800a918:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a91a:	2300      	movs	r3, #0
 800a91c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a91e:	4b23      	ldr	r3, [pc, #140]	; (800a9ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	f003 030c 	and.w	r3, r3, #12
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d002      	beq.n	800a934 <HAL_RCC_GetSysClockFreq+0x40>
 800a92e:	2b08      	cmp	r3, #8
 800a930:	d003      	beq.n	800a93a <HAL_RCC_GetSysClockFreq+0x46>
 800a932:	e02d      	b.n	800a990 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a934:	4b1e      	ldr	r3, [pc, #120]	; (800a9b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a936:	623b      	str	r3, [r7, #32]
      break;
 800a938:	e02d      	b.n	800a996 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	0c9b      	lsrs	r3, r3, #18
 800a93e:	f003 030f 	and.w	r3, r3, #15
 800a942:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a946:	4413      	add	r3, r2
 800a948:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800a94c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d013      	beq.n	800a980 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a958:	4b14      	ldr	r3, [pc, #80]	; (800a9ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	0c5b      	lsrs	r3, r3, #17
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a966:	4413      	add	r3, r2
 800a968:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a96c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	4a0f      	ldr	r2, [pc, #60]	; (800a9b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a972:	fb02 f203 	mul.w	r2, r2, r3
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	fbb2 f3f3 	udiv	r3, r2, r3
 800a97c:	627b      	str	r3, [r7, #36]	; 0x24
 800a97e:	e004      	b.n	800a98a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	4a0c      	ldr	r2, [pc, #48]	; (800a9b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a984:	fb02 f303 	mul.w	r3, r2, r3
 800a988:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98c:	623b      	str	r3, [r7, #32]
      break;
 800a98e:	e002      	b.n	800a996 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a990:	4b07      	ldr	r3, [pc, #28]	; (800a9b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a992:	623b      	str	r3, [r7, #32]
      break;
 800a994:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a996:	6a3b      	ldr	r3, [r7, #32]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3728      	adds	r7, #40	; 0x28
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bc90      	pop	{r4, r7}
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	0800dd28 	.word	0x0800dd28
 800a9a8:	0800dd38 	.word	0x0800dd38
 800a9ac:	40021000 	.word	0x40021000
 800a9b0:	007a1200 	.word	0x007a1200
 800a9b4:	003d0900 	.word	0x003d0900

0800a9b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a9bc:	4b02      	ldr	r3, [pc, #8]	; (800a9c8 <HAL_RCC_GetHCLKFreq+0x10>)
 800a9be:	681b      	ldr	r3, [r3, #0]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bc80      	pop	{r7}
 800a9c6:	4770      	bx	lr
 800a9c8:	20000084 	.word	0x20000084

0800a9cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a9d0:	f7ff fff2 	bl	800a9b8 <HAL_RCC_GetHCLKFreq>
 800a9d4:	4601      	mov	r1, r0
 800a9d6:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	0a1b      	lsrs	r3, r3, #8
 800a9dc:	f003 0307 	and.w	r3, r3, #7
 800a9e0:	4a03      	ldr	r2, [pc, #12]	; (800a9f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a9e2:	5cd3      	ldrb	r3, [r2, r3]
 800a9e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	40021000 	.word	0x40021000
 800a9f0:	0800e6b8 	.word	0x0800e6b8

0800a9f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a9f8:	f7ff ffde 	bl	800a9b8 <HAL_RCC_GetHCLKFreq>
 800a9fc:	4601      	mov	r1, r0
 800a9fe:	4b05      	ldr	r3, [pc, #20]	; (800aa14 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	0adb      	lsrs	r3, r3, #11
 800aa04:	f003 0307 	and.w	r3, r3, #7
 800aa08:	4a03      	ldr	r2, [pc, #12]	; (800aa18 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa0a:	5cd3      	ldrb	r3, [r2, r3]
 800aa0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	40021000 	.word	0x40021000
 800aa18:	0800e6b8 	.word	0x0800e6b8

0800aa1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800aa24:	4b0a      	ldr	r3, [pc, #40]	; (800aa50 <RCC_Delay+0x34>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a0a      	ldr	r2, [pc, #40]	; (800aa54 <RCC_Delay+0x38>)
 800aa2a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa2e:	0a5b      	lsrs	r3, r3, #9
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	fb02 f303 	mul.w	r3, r2, r3
 800aa36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800aa38:	bf00      	nop
  }
  while (Delay --);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	1e5a      	subs	r2, r3, #1
 800aa3e:	60fa      	str	r2, [r7, #12]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1f9      	bne.n	800aa38 <RCC_Delay+0x1c>
}
 800aa44:	bf00      	nop
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bc80      	pop	{r7}
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	20000084 	.word	0x20000084
 800aa54:	10624dd3 	.word	0x10624dd3

0800aa58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800aa60:	2300      	movs	r3, #0
 800aa62:	613b      	str	r3, [r7, #16]
 800aa64:	2300      	movs	r3, #0
 800aa66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 0301 	and.w	r3, r3, #1
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d07d      	beq.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800aa74:	2300      	movs	r3, #0
 800aa76:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa78:	4b4f      	ldr	r3, [pc, #316]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa7a:	69db      	ldr	r3, [r3, #28]
 800aa7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10d      	bne.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa84:	4b4c      	ldr	r3, [pc, #304]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa86:	69db      	ldr	r3, [r3, #28]
 800aa88:	4a4b      	ldr	r2, [pc, #300]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa8e:	61d3      	str	r3, [r2, #28]
 800aa90:	4b49      	ldr	r3, [pc, #292]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa92:	69db      	ldr	r3, [r3, #28]
 800aa94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa98:	60bb      	str	r3, [r7, #8]
 800aa9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aaa0:	4b46      	ldr	r3, [pc, #280]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d118      	bne.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aaac:	4b43      	ldr	r3, [pc, #268]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a42      	ldr	r2, [pc, #264]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aab6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aab8:	f7fc fecc 	bl	8007854 <HAL_GetTick>
 800aabc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aabe:	e008      	b.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aac0:	f7fc fec8 	bl	8007854 <HAL_GetTick>
 800aac4:	4602      	mov	r2, r0
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	2b64      	cmp	r3, #100	; 0x64
 800aacc:	d901      	bls.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	e06d      	b.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aad2:	4b3a      	ldr	r3, [pc, #232]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0f0      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800aade:	4b36      	ldr	r3, [pc, #216]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aae6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d02e      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d027      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aafc:	4b2e      	ldr	r3, [pc, #184]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ab06:	4b2e      	ldr	r3, [pc, #184]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ab08:	2201      	movs	r2, #1
 800ab0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ab0c:	4b2c      	ldr	r3, [pc, #176]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800ab12:	4a29      	ldr	r2, [pc, #164]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f003 0301 	and.w	r3, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d014      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab22:	f7fc fe97 	bl	8007854 <HAL_GetTick>
 800ab26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab28:	e00a      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab2a:	f7fc fe93 	bl	8007854 <HAL_GetTick>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d901      	bls.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	e036      	b.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab40:	4b1d      	ldr	r3, [pc, #116]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	f003 0302 	and.w	r3, r3, #2
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d0ee      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ab4c:	4b1a      	ldr	r3, [pc, #104]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab4e:	6a1b      	ldr	r3, [r3, #32]
 800ab50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	4917      	ldr	r1, [pc, #92]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d105      	bne.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab64:	4b14      	ldr	r3, [pc, #80]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab66:	69db      	ldr	r3, [r3, #28]
 800ab68:	4a13      	ldr	r2, [pc, #76]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 0302 	and.w	r3, r3, #2
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d008      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab7c:	4b0e      	ldr	r3, [pc, #56]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	490b      	ldr	r1, [pc, #44]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 0310 	and.w	r3, r3, #16
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d008      	beq.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab9a:	4b07      	ldr	r3, [pc, #28]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	4904      	ldr	r1, [pc, #16]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aba8:	4313      	orrs	r3, r2
 800abaa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3718      	adds	r7, #24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	40021000 	.word	0x40021000
 800abbc:	40007000 	.word	0x40007000
 800abc0:	42420440 	.word	0x42420440

0800abc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e053      	b.n	800ac7e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d106      	bne.n	800abf6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f7f9 fb97 	bl	8004324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2202      	movs	r2, #2
 800abfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac0c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	431a      	orrs	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	431a      	orrs	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	431a      	orrs	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	431a      	orrs	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	699b      	ldr	r3, [r3, #24]
 800ac2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac32:	431a      	orrs	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	69db      	ldr	r3, [r3, #28]
 800ac38:	431a      	orrs	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a1b      	ldr	r3, [r3, #32]
 800ac3e:	ea42 0103 	orr.w	r1, r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	430a      	orrs	r2, r1
 800ac4c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	0c1a      	lsrs	r2, r3, #16
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f002 0204 	and.w	r2, r2, #4
 800ac5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	69da      	ldr	r2, [r3, #28]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b082      	sub	sp, #8
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d101      	bne.n	800ac98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	e01d      	b.n	800acd4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d106      	bne.n	800acb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7fc fc23 	bl	80074f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2202      	movs	r2, #2
 800acb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	3304      	adds	r3, #4
 800acc2:	4619      	mov	r1, r3
 800acc4:	4610      	mov	r0, r2
 800acc6:	f000 fa19 	bl	800b0fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68da      	ldr	r2, [r3, #12]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f042 0201 	orr.w	r2, r2, #1
 800acf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	f003 0307 	and.w	r3, r3, #7
 800acfe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b06      	cmp	r3, #6
 800ad04:	d007      	beq.n	800ad16 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f042 0201 	orr.w	r2, r2, #1
 800ad14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3714      	adds	r7, #20
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bc80      	pop	{r7}
 800ad20:	4770      	bx	lr

0800ad22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	f003 0302 	and.w	r3, r3, #2
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d122      	bne.n	800ad7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d11b      	bne.n	800ad7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f06f 0202 	mvn.w	r2, #2
 800ad4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	f003 0303 	and.w	r3, r3, #3
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d003      	beq.n	800ad6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f9ad 	bl	800b0c4 <HAL_TIM_IC_CaptureCallback>
 800ad6a:	e005      	b.n	800ad78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f9a0 	bl	800b0b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f9af 	bl	800b0d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	691b      	ldr	r3, [r3, #16]
 800ad84:	f003 0304 	and.w	r3, r3, #4
 800ad88:	2b04      	cmp	r3, #4
 800ad8a:	d122      	bne.n	800add2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	f003 0304 	and.w	r3, r3, #4
 800ad96:	2b04      	cmp	r3, #4
 800ad98:	d11b      	bne.n	800add2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f06f 0204 	mvn.w	r2, #4
 800ada2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2202      	movs	r2, #2
 800ada8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d003      	beq.n	800adc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 f983 	bl	800b0c4 <HAL_TIM_IC_CaptureCallback>
 800adbe:	e005      	b.n	800adcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 f976 	bl	800b0b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f985 	bl	800b0d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	f003 0308 	and.w	r3, r3, #8
 800addc:	2b08      	cmp	r3, #8
 800adde:	d122      	bne.n	800ae26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	f003 0308 	and.w	r3, r3, #8
 800adea:	2b08      	cmp	r3, #8
 800adec:	d11b      	bne.n	800ae26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f06f 0208 	mvn.w	r2, #8
 800adf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2204      	movs	r2, #4
 800adfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	69db      	ldr	r3, [r3, #28]
 800ae04:	f003 0303 	and.w	r3, r3, #3
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d003      	beq.n	800ae14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f959 	bl	800b0c4 <HAL_TIM_IC_CaptureCallback>
 800ae12:	e005      	b.n	800ae20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f94c 	bl	800b0b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f95b 	bl	800b0d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	f003 0310 	and.w	r3, r3, #16
 800ae30:	2b10      	cmp	r3, #16
 800ae32:	d122      	bne.n	800ae7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	f003 0310 	and.w	r3, r3, #16
 800ae3e:	2b10      	cmp	r3, #16
 800ae40:	d11b      	bne.n	800ae7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f06f 0210 	mvn.w	r2, #16
 800ae4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2208      	movs	r2, #8
 800ae50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d003      	beq.n	800ae68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 f92f 	bl	800b0c4 <HAL_TIM_IC_CaptureCallback>
 800ae66:	e005      	b.n	800ae74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f922 	bl	800b0b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f931 	bl	800b0d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d10e      	bne.n	800aea6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	f003 0301 	and.w	r3, r3, #1
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d107      	bne.n	800aea6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f06f 0201 	mvn.w	r2, #1
 800ae9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f8fd 	bl	800b0a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeb0:	2b80      	cmp	r3, #128	; 0x80
 800aeb2:	d10e      	bne.n	800aed2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aebe:	2b80      	cmp	r3, #128	; 0x80
 800aec0:	d107      	bne.n	800aed2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aeca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fa5a 	bl	800b386 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	691b      	ldr	r3, [r3, #16]
 800aed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aedc:	2b40      	cmp	r3, #64	; 0x40
 800aede:	d10e      	bne.n	800aefe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeea:	2b40      	cmp	r3, #64	; 0x40
 800aeec:	d107      	bne.n	800aefe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f8f5 	bl	800b0e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	f003 0320 	and.w	r3, r3, #32
 800af08:	2b20      	cmp	r3, #32
 800af0a:	d10e      	bne.n	800af2a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	f003 0320 	and.w	r3, r3, #32
 800af16:	2b20      	cmp	r3, #32
 800af18:	d107      	bne.n	800af2a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f06f 0220 	mvn.w	r2, #32
 800af22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fa25 	bl	800b374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af2a:	bf00      	nop
 800af2c:	3708      	adds	r7, #8
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b084      	sub	sp, #16
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af42:	2b01      	cmp	r3, #1
 800af44:	d101      	bne.n	800af4a <HAL_TIM_ConfigClockSource+0x18>
 800af46:	2302      	movs	r3, #2
 800af48:	e0a6      	b.n	800b098 <HAL_TIM_ConfigClockSource+0x166>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2202      	movs	r2, #2
 800af56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800af68:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af70:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b40      	cmp	r3, #64	; 0x40
 800af80:	d067      	beq.n	800b052 <HAL_TIM_ConfigClockSource+0x120>
 800af82:	2b40      	cmp	r3, #64	; 0x40
 800af84:	d80b      	bhi.n	800af9e <HAL_TIM_ConfigClockSource+0x6c>
 800af86:	2b10      	cmp	r3, #16
 800af88:	d073      	beq.n	800b072 <HAL_TIM_ConfigClockSource+0x140>
 800af8a:	2b10      	cmp	r3, #16
 800af8c:	d802      	bhi.n	800af94 <HAL_TIM_ConfigClockSource+0x62>
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d06f      	beq.n	800b072 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800af92:	e078      	b.n	800b086 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800af94:	2b20      	cmp	r3, #32
 800af96:	d06c      	beq.n	800b072 <HAL_TIM_ConfigClockSource+0x140>
 800af98:	2b30      	cmp	r3, #48	; 0x30
 800af9a:	d06a      	beq.n	800b072 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800af9c:	e073      	b.n	800b086 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800af9e:	2b70      	cmp	r3, #112	; 0x70
 800afa0:	d00d      	beq.n	800afbe <HAL_TIM_ConfigClockSource+0x8c>
 800afa2:	2b70      	cmp	r3, #112	; 0x70
 800afa4:	d804      	bhi.n	800afb0 <HAL_TIM_ConfigClockSource+0x7e>
 800afa6:	2b50      	cmp	r3, #80	; 0x50
 800afa8:	d033      	beq.n	800b012 <HAL_TIM_ConfigClockSource+0xe0>
 800afaa:	2b60      	cmp	r3, #96	; 0x60
 800afac:	d041      	beq.n	800b032 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800afae:	e06a      	b.n	800b086 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800afb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afb4:	d066      	beq.n	800b084 <HAL_TIM_ConfigClockSource+0x152>
 800afb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afba:	d017      	beq.n	800afec <HAL_TIM_ConfigClockSource+0xba>
      break;
 800afbc:	e063      	b.n	800b086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6818      	ldr	r0, [r3, #0]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	6899      	ldr	r1, [r3, #8]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	685a      	ldr	r2, [r3, #4]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	f000 f96e 	bl	800b2ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800afe0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	609a      	str	r2, [r3, #8]
      break;
 800afea:	e04c      	b.n	800b086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6818      	ldr	r0, [r3, #0]
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	6899      	ldr	r1, [r3, #8]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	685a      	ldr	r2, [r3, #4]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	f000 f957 	bl	800b2ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	689a      	ldr	r2, [r3, #8]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b00e:	609a      	str	r2, [r3, #8]
      break;
 800b010:	e039      	b.n	800b086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6818      	ldr	r0, [r3, #0]
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	6859      	ldr	r1, [r3, #4]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	461a      	mov	r2, r3
 800b020:	f000 f8ce 	bl	800b1c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2150      	movs	r1, #80	; 0x50
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 f925 	bl	800b27a <TIM_ITRx_SetConfig>
      break;
 800b030:	e029      	b.n	800b086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6818      	ldr	r0, [r3, #0]
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	6859      	ldr	r1, [r3, #4]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	461a      	mov	r2, r3
 800b040:	f000 f8ec 	bl	800b21c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2160      	movs	r1, #96	; 0x60
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 f915 	bl	800b27a <TIM_ITRx_SetConfig>
      break;
 800b050:	e019      	b.n	800b086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6818      	ldr	r0, [r3, #0]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	6859      	ldr	r1, [r3, #4]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	461a      	mov	r2, r3
 800b060:	f000 f8ae 	bl	800b1c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2140      	movs	r1, #64	; 0x40
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 f905 	bl	800b27a <TIM_ITRx_SetConfig>
      break;
 800b070:	e009      	b.n	800b086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4619      	mov	r1, r3
 800b07c:	4610      	mov	r0, r2
 800b07e:	f000 f8fc 	bl	800b27a <TIM_ITRx_SetConfig>
      break;
 800b082:	e000      	b.n	800b086 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b084:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2201      	movs	r2, #1
 800b08a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bc80      	pop	{r7}
 800b0b0:	4770      	bx	lr

0800b0b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0b2:	b480      	push	{r7}
 800b0b4:	b083      	sub	sp, #12
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0ba:	bf00      	nop
 800b0bc:	370c      	adds	r7, #12
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bc80      	pop	{r7}
 800b0c2:	4770      	bx	lr

0800b0c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b0cc:	bf00      	nop
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bc80      	pop	{r7}
 800b0d4:	4770      	bx	lr

0800b0d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b0d6:	b480      	push	{r7}
 800b0d8:	b083      	sub	sp, #12
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b0de:	bf00      	nop
 800b0e0:	370c      	adds	r7, #12
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bc80      	pop	{r7}
 800b0e6:	4770      	bx	lr

0800b0e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b0f0:	bf00      	nop
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bc80      	pop	{r7}
 800b0f8:	4770      	bx	lr
	...

0800b0fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4a29      	ldr	r2, [pc, #164]	; (800b1b4 <TIM_Base_SetConfig+0xb8>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d00b      	beq.n	800b12c <TIM_Base_SetConfig+0x30>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b11a:	d007      	beq.n	800b12c <TIM_Base_SetConfig+0x30>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	4a26      	ldr	r2, [pc, #152]	; (800b1b8 <TIM_Base_SetConfig+0xbc>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d003      	beq.n	800b12c <TIM_Base_SetConfig+0x30>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4a25      	ldr	r2, [pc, #148]	; (800b1bc <TIM_Base_SetConfig+0xc0>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d108      	bne.n	800b13e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a1c      	ldr	r2, [pc, #112]	; (800b1b4 <TIM_Base_SetConfig+0xb8>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d00b      	beq.n	800b15e <TIM_Base_SetConfig+0x62>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b14c:	d007      	beq.n	800b15e <TIM_Base_SetConfig+0x62>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a19      	ldr	r2, [pc, #100]	; (800b1b8 <TIM_Base_SetConfig+0xbc>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d003      	beq.n	800b15e <TIM_Base_SetConfig+0x62>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a18      	ldr	r2, [pc, #96]	; (800b1bc <TIM_Base_SetConfig+0xc0>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d108      	bne.n	800b170 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	695b      	ldr	r3, [r3, #20]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	689a      	ldr	r2, [r3, #8]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4a07      	ldr	r2, [pc, #28]	; (800b1b4 <TIM_Base_SetConfig+0xb8>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d103      	bne.n	800b1a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	691a      	ldr	r2, [r3, #16]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	615a      	str	r2, [r3, #20]
}
 800b1aa:	bf00      	nop
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bc80      	pop	{r7}
 800b1b2:	4770      	bx	lr
 800b1b4:	40012c00 	.word	0x40012c00
 800b1b8:	40000400 	.word	0x40000400
 800b1bc:	40000800 	.word	0x40000800

0800b1c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b087      	sub	sp, #28
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6a1b      	ldr	r3, [r3, #32]
 800b1d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6a1b      	ldr	r3, [r3, #32]
 800b1d6:	f023 0201 	bic.w	r2, r3, #1
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b1ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	011b      	lsls	r3, r3, #4
 800b1f0:	693a      	ldr	r2, [r7, #16]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	f023 030a 	bic.w	r3, r3, #10
 800b1fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b1fe:	697a      	ldr	r2, [r7, #20]
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	4313      	orrs	r3, r2
 800b204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	697a      	ldr	r2, [r7, #20]
 800b210:	621a      	str	r2, [r3, #32]
}
 800b212:	bf00      	nop
 800b214:	371c      	adds	r7, #28
 800b216:	46bd      	mov	sp, r7
 800b218:	bc80      	pop	{r7}
 800b21a:	4770      	bx	lr

0800b21c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b087      	sub	sp, #28
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6a1b      	ldr	r3, [r3, #32]
 800b22c:	f023 0210 	bic.w	r2, r3, #16
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	699b      	ldr	r3, [r3, #24]
 800b238:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b246:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	031b      	lsls	r3, r3, #12
 800b24c:	697a      	ldr	r2, [r7, #20]
 800b24e:	4313      	orrs	r3, r2
 800b250:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b258:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	011b      	lsls	r3, r3, #4
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	4313      	orrs	r3, r2
 800b262:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	693a      	ldr	r2, [r7, #16]
 800b26e:	621a      	str	r2, [r3, #32]
}
 800b270:	bf00      	nop
 800b272:	371c      	adds	r7, #28
 800b274:	46bd      	mov	sp, r7
 800b276:	bc80      	pop	{r7}
 800b278:	4770      	bx	lr

0800b27a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b27a:	b480      	push	{r7}
 800b27c:	b085      	sub	sp, #20
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
 800b282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b292:	683a      	ldr	r2, [r7, #0]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	4313      	orrs	r3, r2
 800b298:	f043 0307 	orr.w	r3, r3, #7
 800b29c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	609a      	str	r2, [r3, #8]
}
 800b2a4:	bf00      	nop
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bc80      	pop	{r7}
 800b2ac:	4770      	bx	lr

0800b2ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b087      	sub	sp, #28
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	60f8      	str	r0, [r7, #12]
 800b2b6:	60b9      	str	r1, [r7, #8]
 800b2b8:	607a      	str	r2, [r7, #4]
 800b2ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	021a      	lsls	r2, r3, #8
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	431a      	orrs	r2, r3
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	609a      	str	r2, [r3, #8]
}
 800b2e2:	bf00      	nop
 800b2e4:	371c      	adds	r7, #28
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bc80      	pop	{r7}
 800b2ea:	4770      	bx	lr

0800b2ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d101      	bne.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b300:	2302      	movs	r3, #2
 800b302:	e032      	b.n	800b36a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2202      	movs	r2, #2
 800b310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b32a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68fa      	ldr	r2, [r7, #12]
 800b332:	4313      	orrs	r3, r2
 800b334:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b33c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	4313      	orrs	r3, r2
 800b346:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3714      	adds	r7, #20
 800b36e:	46bd      	mov	sp, r7
 800b370:	bc80      	pop	{r7}
 800b372:	4770      	bx	lr

0800b374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b37c:	bf00      	nop
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	bc80      	pop	{r7}
 800b384:	4770      	bx	lr

0800b386 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b386:	b480      	push	{r7}
 800b388:	b083      	sub	sp, #12
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b38e:	bf00      	nop
 800b390:	370c      	adds	r7, #12
 800b392:	46bd      	mov	sp, r7
 800b394:	bc80      	pop	{r7}
 800b396:	4770      	bx	lr

0800b398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d101      	bne.n	800b3aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e03f      	b.n	800b42a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d106      	bne.n	800b3c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7fc f92e 	bl	8007620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2224      	movs	r2, #36	; 0x24
 800b3c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68da      	ldr	r2, [r3, #12]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 f829 	bl	800b434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	691a      	ldr	r2, [r3, #16]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	695a      	ldr	r2, [r3, #20]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68da      	ldr	r2, [r3, #12]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2220      	movs	r2, #32
 800b41c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2220      	movs	r2, #32
 800b424:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
	...

0800b434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	691b      	ldr	r3, [r3, #16]
 800b442:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	68da      	ldr	r2, [r3, #12]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	430a      	orrs	r2, r1
 800b450:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	689a      	ldr	r2, [r3, #8]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	431a      	orrs	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	4313      	orrs	r3, r2
 800b462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b46e:	f023 030c 	bic.w	r3, r3, #12
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	6812      	ldr	r2, [r2, #0]
 800b476:	68f9      	ldr	r1, [r7, #12]
 800b478:	430b      	orrs	r3, r1
 800b47a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	699a      	ldr	r2, [r3, #24]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	430a      	orrs	r2, r1
 800b490:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a52      	ldr	r2, [pc, #328]	; (800b5e0 <UART_SetConfig+0x1ac>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d14e      	bne.n	800b53a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b49c:	f7ff faaa 	bl	800a9f4 <HAL_RCC_GetPCLK2Freq>
 800b4a0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b4a2:	68ba      	ldr	r2, [r7, #8]
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	4413      	add	r3, r2
 800b4aa:	009a      	lsls	r2, r3, #2
 800b4ac:	441a      	add	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4b8:	4a4a      	ldr	r2, [pc, #296]	; (800b5e4 <UART_SetConfig+0x1b0>)
 800b4ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b4be:	095b      	lsrs	r3, r3, #5
 800b4c0:	0119      	lsls	r1, r3, #4
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	4413      	add	r3, r2
 800b4ca:	009a      	lsls	r2, r3, #2
 800b4cc:	441a      	add	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b4d8:	4b42      	ldr	r3, [pc, #264]	; (800b5e4 <UART_SetConfig+0x1b0>)
 800b4da:	fba3 0302 	umull	r0, r3, r3, r2
 800b4de:	095b      	lsrs	r3, r3, #5
 800b4e0:	2064      	movs	r0, #100	; 0x64
 800b4e2:	fb00 f303 	mul.w	r3, r0, r3
 800b4e6:	1ad3      	subs	r3, r2, r3
 800b4e8:	011b      	lsls	r3, r3, #4
 800b4ea:	3332      	adds	r3, #50	; 0x32
 800b4ec:	4a3d      	ldr	r2, [pc, #244]	; (800b5e4 <UART_SetConfig+0x1b0>)
 800b4ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b4f2:	095b      	lsrs	r3, r3, #5
 800b4f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4f8:	4419      	add	r1, r3
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	4413      	add	r3, r2
 800b502:	009a      	lsls	r2, r3, #2
 800b504:	441a      	add	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b510:	4b34      	ldr	r3, [pc, #208]	; (800b5e4 <UART_SetConfig+0x1b0>)
 800b512:	fba3 0302 	umull	r0, r3, r3, r2
 800b516:	095b      	lsrs	r3, r3, #5
 800b518:	2064      	movs	r0, #100	; 0x64
 800b51a:	fb00 f303 	mul.w	r3, r0, r3
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	011b      	lsls	r3, r3, #4
 800b522:	3332      	adds	r3, #50	; 0x32
 800b524:	4a2f      	ldr	r2, [pc, #188]	; (800b5e4 <UART_SetConfig+0x1b0>)
 800b526:	fba2 2303 	umull	r2, r3, r2, r3
 800b52a:	095b      	lsrs	r3, r3, #5
 800b52c:	f003 020f 	and.w	r2, r3, #15
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	440a      	add	r2, r1
 800b536:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800b538:	e04d      	b.n	800b5d6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800b53a:	f7ff fa47 	bl	800a9cc <HAL_RCC_GetPCLK1Freq>
 800b53e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	4613      	mov	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	4413      	add	r3, r2
 800b548:	009a      	lsls	r2, r3, #2
 800b54a:	441a      	add	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	fbb2 f3f3 	udiv	r3, r2, r3
 800b556:	4a23      	ldr	r2, [pc, #140]	; (800b5e4 <UART_SetConfig+0x1b0>)
 800b558:	fba2 2303 	umull	r2, r3, r2, r3
 800b55c:	095b      	lsrs	r3, r3, #5
 800b55e:	0119      	lsls	r1, r3, #4
 800b560:	68ba      	ldr	r2, [r7, #8]
 800b562:	4613      	mov	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	4413      	add	r3, r2
 800b568:	009a      	lsls	r2, r3, #2
 800b56a:	441a      	add	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	fbb2 f2f3 	udiv	r2, r2, r3
 800b576:	4b1b      	ldr	r3, [pc, #108]	; (800b5e4 <UART_SetConfig+0x1b0>)
 800b578:	fba3 0302 	umull	r0, r3, r3, r2
 800b57c:	095b      	lsrs	r3, r3, #5
 800b57e:	2064      	movs	r0, #100	; 0x64
 800b580:	fb00 f303 	mul.w	r3, r0, r3
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	011b      	lsls	r3, r3, #4
 800b588:	3332      	adds	r3, #50	; 0x32
 800b58a:	4a16      	ldr	r2, [pc, #88]	; (800b5e4 <UART_SetConfig+0x1b0>)
 800b58c:	fba2 2303 	umull	r2, r3, r2, r3
 800b590:	095b      	lsrs	r3, r3, #5
 800b592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b596:	4419      	add	r1, r3
 800b598:	68ba      	ldr	r2, [r7, #8]
 800b59a:	4613      	mov	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4413      	add	r3, r2
 800b5a0:	009a      	lsls	r2, r3, #2
 800b5a2:	441a      	add	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	fbb2 f2f3 	udiv	r2, r2, r3
 800b5ae:	4b0d      	ldr	r3, [pc, #52]	; (800b5e4 <UART_SetConfig+0x1b0>)
 800b5b0:	fba3 0302 	umull	r0, r3, r3, r2
 800b5b4:	095b      	lsrs	r3, r3, #5
 800b5b6:	2064      	movs	r0, #100	; 0x64
 800b5b8:	fb00 f303 	mul.w	r3, r0, r3
 800b5bc:	1ad3      	subs	r3, r2, r3
 800b5be:	011b      	lsls	r3, r3, #4
 800b5c0:	3332      	adds	r3, #50	; 0x32
 800b5c2:	4a08      	ldr	r2, [pc, #32]	; (800b5e4 <UART_SetConfig+0x1b0>)
 800b5c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c8:	095b      	lsrs	r3, r3, #5
 800b5ca:	f003 020f 	and.w	r2, r3, #15
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	440a      	add	r2, r1
 800b5d4:	609a      	str	r2, [r3, #8]
}
 800b5d6:	bf00      	nop
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	40013800 	.word	0x40013800
 800b5e4:	51eb851f 	.word	0x51eb851f

0800b5e8 <__errno>:
 800b5e8:	4b01      	ldr	r3, [pc, #4]	; (800b5f0 <__errno+0x8>)
 800b5ea:	6818      	ldr	r0, [r3, #0]
 800b5ec:	4770      	bx	lr
 800b5ee:	bf00      	nop
 800b5f0:	20000090 	.word	0x20000090

0800b5f4 <__libc_init_array>:
 800b5f4:	b570      	push	{r4, r5, r6, lr}
 800b5f6:	2500      	movs	r5, #0
 800b5f8:	4e0c      	ldr	r6, [pc, #48]	; (800b62c <__libc_init_array+0x38>)
 800b5fa:	4c0d      	ldr	r4, [pc, #52]	; (800b630 <__libc_init_array+0x3c>)
 800b5fc:	1ba4      	subs	r4, r4, r6
 800b5fe:	10a4      	asrs	r4, r4, #2
 800b600:	42a5      	cmp	r5, r4
 800b602:	d109      	bne.n	800b618 <__libc_init_array+0x24>
 800b604:	f002 fafe 	bl	800dc04 <_init>
 800b608:	2500      	movs	r5, #0
 800b60a:	4e0a      	ldr	r6, [pc, #40]	; (800b634 <__libc_init_array+0x40>)
 800b60c:	4c0a      	ldr	r4, [pc, #40]	; (800b638 <__libc_init_array+0x44>)
 800b60e:	1ba4      	subs	r4, r4, r6
 800b610:	10a4      	asrs	r4, r4, #2
 800b612:	42a5      	cmp	r5, r4
 800b614:	d105      	bne.n	800b622 <__libc_init_array+0x2e>
 800b616:	bd70      	pop	{r4, r5, r6, pc}
 800b618:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b61c:	4798      	blx	r3
 800b61e:	3501      	adds	r5, #1
 800b620:	e7ee      	b.n	800b600 <__libc_init_array+0xc>
 800b622:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b626:	4798      	blx	r3
 800b628:	3501      	adds	r5, #1
 800b62a:	e7f2      	b.n	800b612 <__libc_init_array+0x1e>
 800b62c:	0800e94c 	.word	0x0800e94c
 800b630:	0800e94c 	.word	0x0800e94c
 800b634:	0800e94c 	.word	0x0800e94c
 800b638:	0800e950 	.word	0x0800e950

0800b63c <__itoa>:
 800b63c:	1e93      	subs	r3, r2, #2
 800b63e:	2b22      	cmp	r3, #34	; 0x22
 800b640:	b510      	push	{r4, lr}
 800b642:	460c      	mov	r4, r1
 800b644:	d904      	bls.n	800b650 <__itoa+0x14>
 800b646:	2300      	movs	r3, #0
 800b648:	461c      	mov	r4, r3
 800b64a:	700b      	strb	r3, [r1, #0]
 800b64c:	4620      	mov	r0, r4
 800b64e:	bd10      	pop	{r4, pc}
 800b650:	2a0a      	cmp	r2, #10
 800b652:	d109      	bne.n	800b668 <__itoa+0x2c>
 800b654:	2800      	cmp	r0, #0
 800b656:	da07      	bge.n	800b668 <__itoa+0x2c>
 800b658:	232d      	movs	r3, #45	; 0x2d
 800b65a:	700b      	strb	r3, [r1, #0]
 800b65c:	2101      	movs	r1, #1
 800b65e:	4240      	negs	r0, r0
 800b660:	4421      	add	r1, r4
 800b662:	f000 fc9d 	bl	800bfa0 <__utoa>
 800b666:	e7f1      	b.n	800b64c <__itoa+0x10>
 800b668:	2100      	movs	r1, #0
 800b66a:	e7f9      	b.n	800b660 <__itoa+0x24>

0800b66c <itoa>:
 800b66c:	f7ff bfe6 	b.w	800b63c <__itoa>

0800b670 <__locale_ctype_ptr>:
 800b670:	4b04      	ldr	r3, [pc, #16]	; (800b684 <__locale_ctype_ptr+0x14>)
 800b672:	4a05      	ldr	r2, [pc, #20]	; (800b688 <__locale_ctype_ptr+0x18>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6a1b      	ldr	r3, [r3, #32]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	bf08      	it	eq
 800b67c:	4613      	moveq	r3, r2
 800b67e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800b682:	4770      	bx	lr
 800b684:	20000090 	.word	0x20000090
 800b688:	200000f4 	.word	0x200000f4

0800b68c <__ascii_mbtowc>:
 800b68c:	b082      	sub	sp, #8
 800b68e:	b901      	cbnz	r1, 800b692 <__ascii_mbtowc+0x6>
 800b690:	a901      	add	r1, sp, #4
 800b692:	b142      	cbz	r2, 800b6a6 <__ascii_mbtowc+0x1a>
 800b694:	b14b      	cbz	r3, 800b6aa <__ascii_mbtowc+0x1e>
 800b696:	7813      	ldrb	r3, [r2, #0]
 800b698:	600b      	str	r3, [r1, #0]
 800b69a:	7812      	ldrb	r2, [r2, #0]
 800b69c:	1c10      	adds	r0, r2, #0
 800b69e:	bf18      	it	ne
 800b6a0:	2001      	movne	r0, #1
 800b6a2:	b002      	add	sp, #8
 800b6a4:	4770      	bx	lr
 800b6a6:	4610      	mov	r0, r2
 800b6a8:	e7fb      	b.n	800b6a2 <__ascii_mbtowc+0x16>
 800b6aa:	f06f 0001 	mvn.w	r0, #1
 800b6ae:	e7f8      	b.n	800b6a2 <__ascii_mbtowc+0x16>

0800b6b0 <memset>:
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	4402      	add	r2, r0
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d100      	bne.n	800b6ba <memset+0xa>
 800b6b8:	4770      	bx	lr
 800b6ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b6be:	e7f9      	b.n	800b6b4 <memset+0x4>

0800b6c0 <__cvt>:
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6c6:	461e      	mov	r6, r3
 800b6c8:	bfbb      	ittet	lt
 800b6ca:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b6ce:	461e      	movlt	r6, r3
 800b6d0:	2300      	movge	r3, #0
 800b6d2:	232d      	movlt	r3, #45	; 0x2d
 800b6d4:	b088      	sub	sp, #32
 800b6d6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b6d8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800b6dc:	f027 0720 	bic.w	r7, r7, #32
 800b6e0:	2f46      	cmp	r7, #70	; 0x46
 800b6e2:	4614      	mov	r4, r2
 800b6e4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b6e6:	700b      	strb	r3, [r1, #0]
 800b6e8:	d004      	beq.n	800b6f4 <__cvt+0x34>
 800b6ea:	2f45      	cmp	r7, #69	; 0x45
 800b6ec:	d100      	bne.n	800b6f0 <__cvt+0x30>
 800b6ee:	3501      	adds	r5, #1
 800b6f0:	2302      	movs	r3, #2
 800b6f2:	e000      	b.n	800b6f6 <__cvt+0x36>
 800b6f4:	2303      	movs	r3, #3
 800b6f6:	aa07      	add	r2, sp, #28
 800b6f8:	9204      	str	r2, [sp, #16]
 800b6fa:	aa06      	add	r2, sp, #24
 800b6fc:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b700:	e9cd 3500 	strd	r3, r5, [sp]
 800b704:	4622      	mov	r2, r4
 800b706:	4633      	mov	r3, r6
 800b708:	f000 fd26 	bl	800c158 <_dtoa_r>
 800b70c:	2f47      	cmp	r7, #71	; 0x47
 800b70e:	4680      	mov	r8, r0
 800b710:	d102      	bne.n	800b718 <__cvt+0x58>
 800b712:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b714:	07db      	lsls	r3, r3, #31
 800b716:	d526      	bpl.n	800b766 <__cvt+0xa6>
 800b718:	2f46      	cmp	r7, #70	; 0x46
 800b71a:	eb08 0905 	add.w	r9, r8, r5
 800b71e:	d111      	bne.n	800b744 <__cvt+0x84>
 800b720:	f898 3000 	ldrb.w	r3, [r8]
 800b724:	2b30      	cmp	r3, #48	; 0x30
 800b726:	d10a      	bne.n	800b73e <__cvt+0x7e>
 800b728:	2200      	movs	r2, #0
 800b72a:	2300      	movs	r3, #0
 800b72c:	4620      	mov	r0, r4
 800b72e:	4631      	mov	r1, r6
 800b730:	f7f5 f93a 	bl	80009a8 <__aeabi_dcmpeq>
 800b734:	b918      	cbnz	r0, 800b73e <__cvt+0x7e>
 800b736:	f1c5 0501 	rsb	r5, r5, #1
 800b73a:	f8ca 5000 	str.w	r5, [sl]
 800b73e:	f8da 3000 	ldr.w	r3, [sl]
 800b742:	4499      	add	r9, r3
 800b744:	2200      	movs	r2, #0
 800b746:	2300      	movs	r3, #0
 800b748:	4620      	mov	r0, r4
 800b74a:	4631      	mov	r1, r6
 800b74c:	f7f5 f92c 	bl	80009a8 <__aeabi_dcmpeq>
 800b750:	b938      	cbnz	r0, 800b762 <__cvt+0xa2>
 800b752:	2230      	movs	r2, #48	; 0x30
 800b754:	9b07      	ldr	r3, [sp, #28]
 800b756:	454b      	cmp	r3, r9
 800b758:	d205      	bcs.n	800b766 <__cvt+0xa6>
 800b75a:	1c59      	adds	r1, r3, #1
 800b75c:	9107      	str	r1, [sp, #28]
 800b75e:	701a      	strb	r2, [r3, #0]
 800b760:	e7f8      	b.n	800b754 <__cvt+0x94>
 800b762:	f8cd 901c 	str.w	r9, [sp, #28]
 800b766:	4640      	mov	r0, r8
 800b768:	9b07      	ldr	r3, [sp, #28]
 800b76a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b76c:	eba3 0308 	sub.w	r3, r3, r8
 800b770:	6013      	str	r3, [r2, #0]
 800b772:	b008      	add	sp, #32
 800b774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b778 <__exponent>:
 800b778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b77a:	2900      	cmp	r1, #0
 800b77c:	bfb4      	ite	lt
 800b77e:	232d      	movlt	r3, #45	; 0x2d
 800b780:	232b      	movge	r3, #43	; 0x2b
 800b782:	4604      	mov	r4, r0
 800b784:	bfb8      	it	lt
 800b786:	4249      	neglt	r1, r1
 800b788:	2909      	cmp	r1, #9
 800b78a:	f804 2b02 	strb.w	r2, [r4], #2
 800b78e:	7043      	strb	r3, [r0, #1]
 800b790:	dd21      	ble.n	800b7d6 <__exponent+0x5e>
 800b792:	f10d 0307 	add.w	r3, sp, #7
 800b796:	461f      	mov	r7, r3
 800b798:	260a      	movs	r6, #10
 800b79a:	fb91 f5f6 	sdiv	r5, r1, r6
 800b79e:	fb06 1115 	mls	r1, r6, r5, r1
 800b7a2:	2d09      	cmp	r5, #9
 800b7a4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800b7a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b7ac:	f103 32ff 	add.w	r2, r3, #4294967295
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	dc09      	bgt.n	800b7c8 <__exponent+0x50>
 800b7b4:	3130      	adds	r1, #48	; 0x30
 800b7b6:	3b02      	subs	r3, #2
 800b7b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b7bc:	42bb      	cmp	r3, r7
 800b7be:	4622      	mov	r2, r4
 800b7c0:	d304      	bcc.n	800b7cc <__exponent+0x54>
 800b7c2:	1a10      	subs	r0, r2, r0
 800b7c4:	b003      	add	sp, #12
 800b7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	e7e6      	b.n	800b79a <__exponent+0x22>
 800b7cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7d0:	f804 2b01 	strb.w	r2, [r4], #1
 800b7d4:	e7f2      	b.n	800b7bc <__exponent+0x44>
 800b7d6:	2330      	movs	r3, #48	; 0x30
 800b7d8:	4419      	add	r1, r3
 800b7da:	7083      	strb	r3, [r0, #2]
 800b7dc:	1d02      	adds	r2, r0, #4
 800b7de:	70c1      	strb	r1, [r0, #3]
 800b7e0:	e7ef      	b.n	800b7c2 <__exponent+0x4a>
	...

0800b7e4 <_printf_float>:
 800b7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e8:	b091      	sub	sp, #68	; 0x44
 800b7ea:	460c      	mov	r4, r1
 800b7ec:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b7ee:	4693      	mov	fp, r2
 800b7f0:	461e      	mov	r6, r3
 800b7f2:	4605      	mov	r5, r0
 800b7f4:	f001 fa64 	bl	800ccc0 <_localeconv_r>
 800b7f8:	6803      	ldr	r3, [r0, #0]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b7fe:	f7f4 fca7 	bl	8000150 <strlen>
 800b802:	2300      	movs	r3, #0
 800b804:	930e      	str	r3, [sp, #56]	; 0x38
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	900a      	str	r0, [sp, #40]	; 0x28
 800b80a:	3307      	adds	r3, #7
 800b80c:	f023 0307 	bic.w	r3, r3, #7
 800b810:	f103 0208 	add.w	r2, r3, #8
 800b814:	f894 8018 	ldrb.w	r8, [r4, #24]
 800b818:	f8d4 a000 	ldr.w	sl, [r4]
 800b81c:	603a      	str	r2, [r7, #0]
 800b81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b822:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b826:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800b82a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b82e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b830:	f04f 32ff 	mov.w	r2, #4294967295
 800b834:	4ba6      	ldr	r3, [pc, #664]	; (800bad0 <_printf_float+0x2ec>)
 800b836:	4638      	mov	r0, r7
 800b838:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b83a:	f7f5 f8e7 	bl	8000a0c <__aeabi_dcmpun>
 800b83e:	bb68      	cbnz	r0, 800b89c <_printf_float+0xb8>
 800b840:	f04f 32ff 	mov.w	r2, #4294967295
 800b844:	4ba2      	ldr	r3, [pc, #648]	; (800bad0 <_printf_float+0x2ec>)
 800b846:	4638      	mov	r0, r7
 800b848:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b84a:	f7f5 f8c1 	bl	80009d0 <__aeabi_dcmple>
 800b84e:	bb28      	cbnz	r0, 800b89c <_printf_float+0xb8>
 800b850:	2200      	movs	r2, #0
 800b852:	2300      	movs	r3, #0
 800b854:	4638      	mov	r0, r7
 800b856:	4649      	mov	r1, r9
 800b858:	f7f5 f8b0 	bl	80009bc <__aeabi_dcmplt>
 800b85c:	b110      	cbz	r0, 800b864 <_printf_float+0x80>
 800b85e:	232d      	movs	r3, #45	; 0x2d
 800b860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b864:	4f9b      	ldr	r7, [pc, #620]	; (800bad4 <_printf_float+0x2f0>)
 800b866:	4b9c      	ldr	r3, [pc, #624]	; (800bad8 <_printf_float+0x2f4>)
 800b868:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b86c:	bf98      	it	ls
 800b86e:	461f      	movls	r7, r3
 800b870:	2303      	movs	r3, #3
 800b872:	f04f 0900 	mov.w	r9, #0
 800b876:	6123      	str	r3, [r4, #16]
 800b878:	f02a 0304 	bic.w	r3, sl, #4
 800b87c:	6023      	str	r3, [r4, #0]
 800b87e:	9600      	str	r6, [sp, #0]
 800b880:	465b      	mov	r3, fp
 800b882:	aa0f      	add	r2, sp, #60	; 0x3c
 800b884:	4621      	mov	r1, r4
 800b886:	4628      	mov	r0, r5
 800b888:	f000 f9e2 	bl	800bc50 <_printf_common>
 800b88c:	3001      	adds	r0, #1
 800b88e:	f040 8090 	bne.w	800b9b2 <_printf_float+0x1ce>
 800b892:	f04f 30ff 	mov.w	r0, #4294967295
 800b896:	b011      	add	sp, #68	; 0x44
 800b898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89c:	463a      	mov	r2, r7
 800b89e:	464b      	mov	r3, r9
 800b8a0:	4638      	mov	r0, r7
 800b8a2:	4649      	mov	r1, r9
 800b8a4:	f7f5 f8b2 	bl	8000a0c <__aeabi_dcmpun>
 800b8a8:	b110      	cbz	r0, 800b8b0 <_printf_float+0xcc>
 800b8aa:	4f8c      	ldr	r7, [pc, #560]	; (800badc <_printf_float+0x2f8>)
 800b8ac:	4b8c      	ldr	r3, [pc, #560]	; (800bae0 <_printf_float+0x2fc>)
 800b8ae:	e7db      	b.n	800b868 <_printf_float+0x84>
 800b8b0:	6863      	ldr	r3, [r4, #4]
 800b8b2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800b8b6:	1c59      	adds	r1, r3, #1
 800b8b8:	a80d      	add	r0, sp, #52	; 0x34
 800b8ba:	a90e      	add	r1, sp, #56	; 0x38
 800b8bc:	d140      	bne.n	800b940 <_printf_float+0x15c>
 800b8be:	2306      	movs	r3, #6
 800b8c0:	6063      	str	r3, [r4, #4]
 800b8c2:	f04f 0c00 	mov.w	ip, #0
 800b8c6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800b8ca:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800b8ce:	6863      	ldr	r3, [r4, #4]
 800b8d0:	6022      	str	r2, [r4, #0]
 800b8d2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	463a      	mov	r2, r7
 800b8da:	464b      	mov	r3, r9
 800b8dc:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	f7ff feed 	bl	800b6c0 <__cvt>
 800b8e6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800b8ea:	2b47      	cmp	r3, #71	; 0x47
 800b8ec:	4607      	mov	r7, r0
 800b8ee:	d109      	bne.n	800b904 <_printf_float+0x120>
 800b8f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8f2:	1cd8      	adds	r0, r3, #3
 800b8f4:	db02      	blt.n	800b8fc <_printf_float+0x118>
 800b8f6:	6862      	ldr	r2, [r4, #4]
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	dd47      	ble.n	800b98c <_printf_float+0x1a8>
 800b8fc:	f1a8 0802 	sub.w	r8, r8, #2
 800b900:	fa5f f888 	uxtb.w	r8, r8
 800b904:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800b908:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b90a:	d824      	bhi.n	800b956 <_printf_float+0x172>
 800b90c:	3901      	subs	r1, #1
 800b90e:	4642      	mov	r2, r8
 800b910:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b914:	910d      	str	r1, [sp, #52]	; 0x34
 800b916:	f7ff ff2f 	bl	800b778 <__exponent>
 800b91a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b91c:	4681      	mov	r9, r0
 800b91e:	1813      	adds	r3, r2, r0
 800b920:	2a01      	cmp	r2, #1
 800b922:	6123      	str	r3, [r4, #16]
 800b924:	dc02      	bgt.n	800b92c <_printf_float+0x148>
 800b926:	6822      	ldr	r2, [r4, #0]
 800b928:	07d1      	lsls	r1, r2, #31
 800b92a:	d501      	bpl.n	800b930 <_printf_float+0x14c>
 800b92c:	3301      	adds	r3, #1
 800b92e:	6123      	str	r3, [r4, #16]
 800b930:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b934:	2b00      	cmp	r3, #0
 800b936:	d0a2      	beq.n	800b87e <_printf_float+0x9a>
 800b938:	232d      	movs	r3, #45	; 0x2d
 800b93a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b93e:	e79e      	b.n	800b87e <_printf_float+0x9a>
 800b940:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800b944:	f000 816e 	beq.w	800bc24 <_printf_float+0x440>
 800b948:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b94c:	d1b9      	bne.n	800b8c2 <_printf_float+0xde>
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1b7      	bne.n	800b8c2 <_printf_float+0xde>
 800b952:	2301      	movs	r3, #1
 800b954:	e7b4      	b.n	800b8c0 <_printf_float+0xdc>
 800b956:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800b95a:	d119      	bne.n	800b990 <_printf_float+0x1ac>
 800b95c:	2900      	cmp	r1, #0
 800b95e:	6863      	ldr	r3, [r4, #4]
 800b960:	dd0c      	ble.n	800b97c <_printf_float+0x198>
 800b962:	6121      	str	r1, [r4, #16]
 800b964:	b913      	cbnz	r3, 800b96c <_printf_float+0x188>
 800b966:	6822      	ldr	r2, [r4, #0]
 800b968:	07d2      	lsls	r2, r2, #31
 800b96a:	d502      	bpl.n	800b972 <_printf_float+0x18e>
 800b96c:	3301      	adds	r3, #1
 800b96e:	440b      	add	r3, r1
 800b970:	6123      	str	r3, [r4, #16]
 800b972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b974:	f04f 0900 	mov.w	r9, #0
 800b978:	65a3      	str	r3, [r4, #88]	; 0x58
 800b97a:	e7d9      	b.n	800b930 <_printf_float+0x14c>
 800b97c:	b913      	cbnz	r3, 800b984 <_printf_float+0x1a0>
 800b97e:	6822      	ldr	r2, [r4, #0]
 800b980:	07d0      	lsls	r0, r2, #31
 800b982:	d501      	bpl.n	800b988 <_printf_float+0x1a4>
 800b984:	3302      	adds	r3, #2
 800b986:	e7f3      	b.n	800b970 <_printf_float+0x18c>
 800b988:	2301      	movs	r3, #1
 800b98a:	e7f1      	b.n	800b970 <_printf_float+0x18c>
 800b98c:	f04f 0867 	mov.w	r8, #103	; 0x67
 800b990:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b994:	4293      	cmp	r3, r2
 800b996:	db05      	blt.n	800b9a4 <_printf_float+0x1c0>
 800b998:	6822      	ldr	r2, [r4, #0]
 800b99a:	6123      	str	r3, [r4, #16]
 800b99c:	07d1      	lsls	r1, r2, #31
 800b99e:	d5e8      	bpl.n	800b972 <_printf_float+0x18e>
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	e7e5      	b.n	800b970 <_printf_float+0x18c>
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	bfcc      	ite	gt
 800b9a8:	2301      	movgt	r3, #1
 800b9aa:	f1c3 0302 	rsble	r3, r3, #2
 800b9ae:	4413      	add	r3, r2
 800b9b0:	e7de      	b.n	800b970 <_printf_float+0x18c>
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	055a      	lsls	r2, r3, #21
 800b9b6:	d407      	bmi.n	800b9c8 <_printf_float+0x1e4>
 800b9b8:	6923      	ldr	r3, [r4, #16]
 800b9ba:	463a      	mov	r2, r7
 800b9bc:	4659      	mov	r1, fp
 800b9be:	4628      	mov	r0, r5
 800b9c0:	47b0      	blx	r6
 800b9c2:	3001      	adds	r0, #1
 800b9c4:	d129      	bne.n	800ba1a <_printf_float+0x236>
 800b9c6:	e764      	b.n	800b892 <_printf_float+0xae>
 800b9c8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800b9cc:	f240 80d7 	bls.w	800bb7e <_printf_float+0x39a>
 800b9d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	f7f4 ffe6 	bl	80009a8 <__aeabi_dcmpeq>
 800b9dc:	b388      	cbz	r0, 800ba42 <_printf_float+0x25e>
 800b9de:	2301      	movs	r3, #1
 800b9e0:	4a40      	ldr	r2, [pc, #256]	; (800bae4 <_printf_float+0x300>)
 800b9e2:	4659      	mov	r1, fp
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	47b0      	blx	r6
 800b9e8:	3001      	adds	r0, #1
 800b9ea:	f43f af52 	beq.w	800b892 <_printf_float+0xae>
 800b9ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	db02      	blt.n	800b9fc <_printf_float+0x218>
 800b9f6:	6823      	ldr	r3, [r4, #0]
 800b9f8:	07d8      	lsls	r0, r3, #31
 800b9fa:	d50e      	bpl.n	800ba1a <_printf_float+0x236>
 800b9fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba00:	4659      	mov	r1, fp
 800ba02:	4628      	mov	r0, r5
 800ba04:	47b0      	blx	r6
 800ba06:	3001      	adds	r0, #1
 800ba08:	f43f af43 	beq.w	800b892 <_printf_float+0xae>
 800ba0c:	2700      	movs	r7, #0
 800ba0e:	f104 081a 	add.w	r8, r4, #26
 800ba12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba14:	3b01      	subs	r3, #1
 800ba16:	42bb      	cmp	r3, r7
 800ba18:	dc09      	bgt.n	800ba2e <_printf_float+0x24a>
 800ba1a:	6823      	ldr	r3, [r4, #0]
 800ba1c:	079f      	lsls	r7, r3, #30
 800ba1e:	f100 80fd 	bmi.w	800bc1c <_printf_float+0x438>
 800ba22:	68e0      	ldr	r0, [r4, #12]
 800ba24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba26:	4298      	cmp	r0, r3
 800ba28:	bfb8      	it	lt
 800ba2a:	4618      	movlt	r0, r3
 800ba2c:	e733      	b.n	800b896 <_printf_float+0xb2>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	4642      	mov	r2, r8
 800ba32:	4659      	mov	r1, fp
 800ba34:	4628      	mov	r0, r5
 800ba36:	47b0      	blx	r6
 800ba38:	3001      	adds	r0, #1
 800ba3a:	f43f af2a 	beq.w	800b892 <_printf_float+0xae>
 800ba3e:	3701      	adds	r7, #1
 800ba40:	e7e7      	b.n	800ba12 <_printf_float+0x22e>
 800ba42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	dc2b      	bgt.n	800baa0 <_printf_float+0x2bc>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	4a26      	ldr	r2, [pc, #152]	; (800bae4 <_printf_float+0x300>)
 800ba4c:	4659      	mov	r1, fp
 800ba4e:	4628      	mov	r0, r5
 800ba50:	47b0      	blx	r6
 800ba52:	3001      	adds	r0, #1
 800ba54:	f43f af1d 	beq.w	800b892 <_printf_float+0xae>
 800ba58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba5a:	b923      	cbnz	r3, 800ba66 <_printf_float+0x282>
 800ba5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba5e:	b913      	cbnz	r3, 800ba66 <_printf_float+0x282>
 800ba60:	6823      	ldr	r3, [r4, #0]
 800ba62:	07d9      	lsls	r1, r3, #31
 800ba64:	d5d9      	bpl.n	800ba1a <_printf_float+0x236>
 800ba66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba6a:	4659      	mov	r1, fp
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	47b0      	blx	r6
 800ba70:	3001      	adds	r0, #1
 800ba72:	f43f af0e 	beq.w	800b892 <_printf_float+0xae>
 800ba76:	f04f 0800 	mov.w	r8, #0
 800ba7a:	f104 091a 	add.w	r9, r4, #26
 800ba7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba80:	425b      	negs	r3, r3
 800ba82:	4543      	cmp	r3, r8
 800ba84:	dc01      	bgt.n	800ba8a <_printf_float+0x2a6>
 800ba86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba88:	e797      	b.n	800b9ba <_printf_float+0x1d6>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	464a      	mov	r2, r9
 800ba8e:	4659      	mov	r1, fp
 800ba90:	4628      	mov	r0, r5
 800ba92:	47b0      	blx	r6
 800ba94:	3001      	adds	r0, #1
 800ba96:	f43f aefc 	beq.w	800b892 <_printf_float+0xae>
 800ba9a:	f108 0801 	add.w	r8, r8, #1
 800ba9e:	e7ee      	b.n	800ba7e <_printf_float+0x29a>
 800baa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800baa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800baa4:	429a      	cmp	r2, r3
 800baa6:	bfa8      	it	ge
 800baa8:	461a      	movge	r2, r3
 800baaa:	2a00      	cmp	r2, #0
 800baac:	4690      	mov	r8, r2
 800baae:	dd07      	ble.n	800bac0 <_printf_float+0x2dc>
 800bab0:	4613      	mov	r3, r2
 800bab2:	4659      	mov	r1, fp
 800bab4:	463a      	mov	r2, r7
 800bab6:	4628      	mov	r0, r5
 800bab8:	47b0      	blx	r6
 800baba:	3001      	adds	r0, #1
 800babc:	f43f aee9 	beq.w	800b892 <_printf_float+0xae>
 800bac0:	f104 031a 	add.w	r3, r4, #26
 800bac4:	f04f 0a00 	mov.w	sl, #0
 800bac8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800bacc:	930b      	str	r3, [sp, #44]	; 0x2c
 800bace:	e015      	b.n	800bafc <_printf_float+0x318>
 800bad0:	7fefffff 	.word	0x7fefffff
 800bad4:	0800e6ce 	.word	0x0800e6ce
 800bad8:	0800e6ca 	.word	0x0800e6ca
 800badc:	0800e6d6 	.word	0x0800e6d6
 800bae0:	0800e6d2 	.word	0x0800e6d2
 800bae4:	0800e6da 	.word	0x0800e6da
 800bae8:	2301      	movs	r3, #1
 800baea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800baec:	4659      	mov	r1, fp
 800baee:	4628      	mov	r0, r5
 800baf0:	47b0      	blx	r6
 800baf2:	3001      	adds	r0, #1
 800baf4:	f43f aecd 	beq.w	800b892 <_printf_float+0xae>
 800baf8:	f10a 0a01 	add.w	sl, sl, #1
 800bafc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800bb00:	eba9 0308 	sub.w	r3, r9, r8
 800bb04:	4553      	cmp	r3, sl
 800bb06:	dcef      	bgt.n	800bae8 <_printf_float+0x304>
 800bb08:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	444f      	add	r7, r9
 800bb10:	db14      	blt.n	800bb3c <_printf_float+0x358>
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	07da      	lsls	r2, r3, #31
 800bb16:	d411      	bmi.n	800bb3c <_printf_float+0x358>
 800bb18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bb1c:	eba3 0209 	sub.w	r2, r3, r9
 800bb20:	eba3 0901 	sub.w	r9, r3, r1
 800bb24:	4591      	cmp	r9, r2
 800bb26:	bfa8      	it	ge
 800bb28:	4691      	movge	r9, r2
 800bb2a:	f1b9 0f00 	cmp.w	r9, #0
 800bb2e:	dc0d      	bgt.n	800bb4c <_printf_float+0x368>
 800bb30:	2700      	movs	r7, #0
 800bb32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb36:	f104 081a 	add.w	r8, r4, #26
 800bb3a:	e018      	b.n	800bb6e <_printf_float+0x38a>
 800bb3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb40:	4659      	mov	r1, fp
 800bb42:	4628      	mov	r0, r5
 800bb44:	47b0      	blx	r6
 800bb46:	3001      	adds	r0, #1
 800bb48:	d1e6      	bne.n	800bb18 <_printf_float+0x334>
 800bb4a:	e6a2      	b.n	800b892 <_printf_float+0xae>
 800bb4c:	464b      	mov	r3, r9
 800bb4e:	463a      	mov	r2, r7
 800bb50:	4659      	mov	r1, fp
 800bb52:	4628      	mov	r0, r5
 800bb54:	47b0      	blx	r6
 800bb56:	3001      	adds	r0, #1
 800bb58:	d1ea      	bne.n	800bb30 <_printf_float+0x34c>
 800bb5a:	e69a      	b.n	800b892 <_printf_float+0xae>
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	4642      	mov	r2, r8
 800bb60:	4659      	mov	r1, fp
 800bb62:	4628      	mov	r0, r5
 800bb64:	47b0      	blx	r6
 800bb66:	3001      	adds	r0, #1
 800bb68:	f43f ae93 	beq.w	800b892 <_printf_float+0xae>
 800bb6c:	3701      	adds	r7, #1
 800bb6e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bb72:	1a9b      	subs	r3, r3, r2
 800bb74:	eba3 0309 	sub.w	r3, r3, r9
 800bb78:	42bb      	cmp	r3, r7
 800bb7a:	dcef      	bgt.n	800bb5c <_printf_float+0x378>
 800bb7c:	e74d      	b.n	800ba1a <_printf_float+0x236>
 800bb7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb80:	2a01      	cmp	r2, #1
 800bb82:	dc01      	bgt.n	800bb88 <_printf_float+0x3a4>
 800bb84:	07db      	lsls	r3, r3, #31
 800bb86:	d538      	bpl.n	800bbfa <_printf_float+0x416>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	463a      	mov	r2, r7
 800bb8c:	4659      	mov	r1, fp
 800bb8e:	4628      	mov	r0, r5
 800bb90:	47b0      	blx	r6
 800bb92:	3001      	adds	r0, #1
 800bb94:	f43f ae7d 	beq.w	800b892 <_printf_float+0xae>
 800bb98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb9c:	4659      	mov	r1, fp
 800bb9e:	4628      	mov	r0, r5
 800bba0:	47b0      	blx	r6
 800bba2:	3001      	adds	r0, #1
 800bba4:	f107 0701 	add.w	r7, r7, #1
 800bba8:	f43f ae73 	beq.w	800b892 <_printf_float+0xae>
 800bbac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bbb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f103 38ff 	add.w	r8, r3, #4294967295
 800bbb8:	2300      	movs	r3, #0
 800bbba:	f7f4 fef5 	bl	80009a8 <__aeabi_dcmpeq>
 800bbbe:	b9c0      	cbnz	r0, 800bbf2 <_printf_float+0x40e>
 800bbc0:	4643      	mov	r3, r8
 800bbc2:	463a      	mov	r2, r7
 800bbc4:	4659      	mov	r1, fp
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	47b0      	blx	r6
 800bbca:	3001      	adds	r0, #1
 800bbcc:	d10d      	bne.n	800bbea <_printf_float+0x406>
 800bbce:	e660      	b.n	800b892 <_printf_float+0xae>
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	4642      	mov	r2, r8
 800bbd4:	4659      	mov	r1, fp
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	47b0      	blx	r6
 800bbda:	3001      	adds	r0, #1
 800bbdc:	f43f ae59 	beq.w	800b892 <_printf_float+0xae>
 800bbe0:	3701      	adds	r7, #1
 800bbe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	42bb      	cmp	r3, r7
 800bbe8:	dcf2      	bgt.n	800bbd0 <_printf_float+0x3ec>
 800bbea:	464b      	mov	r3, r9
 800bbec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bbf0:	e6e4      	b.n	800b9bc <_printf_float+0x1d8>
 800bbf2:	2700      	movs	r7, #0
 800bbf4:	f104 081a 	add.w	r8, r4, #26
 800bbf8:	e7f3      	b.n	800bbe2 <_printf_float+0x3fe>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e7e1      	b.n	800bbc2 <_printf_float+0x3de>
 800bbfe:	2301      	movs	r3, #1
 800bc00:	4642      	mov	r2, r8
 800bc02:	4659      	mov	r1, fp
 800bc04:	4628      	mov	r0, r5
 800bc06:	47b0      	blx	r6
 800bc08:	3001      	adds	r0, #1
 800bc0a:	f43f ae42 	beq.w	800b892 <_printf_float+0xae>
 800bc0e:	3701      	adds	r7, #1
 800bc10:	68e3      	ldr	r3, [r4, #12]
 800bc12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bc14:	1a9b      	subs	r3, r3, r2
 800bc16:	42bb      	cmp	r3, r7
 800bc18:	dcf1      	bgt.n	800bbfe <_printf_float+0x41a>
 800bc1a:	e702      	b.n	800ba22 <_printf_float+0x23e>
 800bc1c:	2700      	movs	r7, #0
 800bc1e:	f104 0819 	add.w	r8, r4, #25
 800bc22:	e7f5      	b.n	800bc10 <_printf_float+0x42c>
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	f43f ae94 	beq.w	800b952 <_printf_float+0x16e>
 800bc2a:	f04f 0c00 	mov.w	ip, #0
 800bc2e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800bc32:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800bc36:	6022      	str	r2, [r4, #0]
 800bc38:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800bc3c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	463a      	mov	r2, r7
 800bc44:	464b      	mov	r3, r9
 800bc46:	4628      	mov	r0, r5
 800bc48:	f7ff fd3a 	bl	800b6c0 <__cvt>
 800bc4c:	4607      	mov	r7, r0
 800bc4e:	e64f      	b.n	800b8f0 <_printf_float+0x10c>

0800bc50 <_printf_common>:
 800bc50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc54:	4691      	mov	r9, r2
 800bc56:	461f      	mov	r7, r3
 800bc58:	688a      	ldr	r2, [r1, #8]
 800bc5a:	690b      	ldr	r3, [r1, #16]
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	bfb8      	it	lt
 800bc62:	4613      	movlt	r3, r2
 800bc64:	f8c9 3000 	str.w	r3, [r9]
 800bc68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc72:	b112      	cbz	r2, 800bc7a <_printf_common+0x2a>
 800bc74:	3301      	adds	r3, #1
 800bc76:	f8c9 3000 	str.w	r3, [r9]
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	0699      	lsls	r1, r3, #26
 800bc7e:	bf42      	ittt	mi
 800bc80:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bc84:	3302      	addmi	r3, #2
 800bc86:	f8c9 3000 	strmi.w	r3, [r9]
 800bc8a:	6825      	ldr	r5, [r4, #0]
 800bc8c:	f015 0506 	ands.w	r5, r5, #6
 800bc90:	d107      	bne.n	800bca2 <_printf_common+0x52>
 800bc92:	f104 0a19 	add.w	sl, r4, #25
 800bc96:	68e3      	ldr	r3, [r4, #12]
 800bc98:	f8d9 2000 	ldr.w	r2, [r9]
 800bc9c:	1a9b      	subs	r3, r3, r2
 800bc9e:	42ab      	cmp	r3, r5
 800bca0:	dc29      	bgt.n	800bcf6 <_printf_common+0xa6>
 800bca2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bca6:	6822      	ldr	r2, [r4, #0]
 800bca8:	3300      	adds	r3, #0
 800bcaa:	bf18      	it	ne
 800bcac:	2301      	movne	r3, #1
 800bcae:	0692      	lsls	r2, r2, #26
 800bcb0:	d42e      	bmi.n	800bd10 <_printf_common+0xc0>
 800bcb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcb6:	4639      	mov	r1, r7
 800bcb8:	4630      	mov	r0, r6
 800bcba:	47c0      	blx	r8
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	d021      	beq.n	800bd04 <_printf_common+0xb4>
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	68e5      	ldr	r5, [r4, #12]
 800bcc4:	f003 0306 	and.w	r3, r3, #6
 800bcc8:	2b04      	cmp	r3, #4
 800bcca:	bf18      	it	ne
 800bccc:	2500      	movne	r5, #0
 800bcce:	f8d9 2000 	ldr.w	r2, [r9]
 800bcd2:	f04f 0900 	mov.w	r9, #0
 800bcd6:	bf08      	it	eq
 800bcd8:	1aad      	subeq	r5, r5, r2
 800bcda:	68a3      	ldr	r3, [r4, #8]
 800bcdc:	6922      	ldr	r2, [r4, #16]
 800bcde:	bf08      	it	eq
 800bce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bce4:	4293      	cmp	r3, r2
 800bce6:	bfc4      	itt	gt
 800bce8:	1a9b      	subgt	r3, r3, r2
 800bcea:	18ed      	addgt	r5, r5, r3
 800bcec:	341a      	adds	r4, #26
 800bcee:	454d      	cmp	r5, r9
 800bcf0:	d11a      	bne.n	800bd28 <_printf_common+0xd8>
 800bcf2:	2000      	movs	r0, #0
 800bcf4:	e008      	b.n	800bd08 <_printf_common+0xb8>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	4652      	mov	r2, sl
 800bcfa:	4639      	mov	r1, r7
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	47c0      	blx	r8
 800bd00:	3001      	adds	r0, #1
 800bd02:	d103      	bne.n	800bd0c <_printf_common+0xbc>
 800bd04:	f04f 30ff 	mov.w	r0, #4294967295
 800bd08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd0c:	3501      	adds	r5, #1
 800bd0e:	e7c2      	b.n	800bc96 <_printf_common+0x46>
 800bd10:	2030      	movs	r0, #48	; 0x30
 800bd12:	18e1      	adds	r1, r4, r3
 800bd14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd18:	1c5a      	adds	r2, r3, #1
 800bd1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd1e:	4422      	add	r2, r4
 800bd20:	3302      	adds	r3, #2
 800bd22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd26:	e7c4      	b.n	800bcb2 <_printf_common+0x62>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	4622      	mov	r2, r4
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	4630      	mov	r0, r6
 800bd30:	47c0      	blx	r8
 800bd32:	3001      	adds	r0, #1
 800bd34:	d0e6      	beq.n	800bd04 <_printf_common+0xb4>
 800bd36:	f109 0901 	add.w	r9, r9, #1
 800bd3a:	e7d8      	b.n	800bcee <_printf_common+0x9e>

0800bd3c <_printf_i>:
 800bd3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bd44:	460c      	mov	r4, r1
 800bd46:	7e09      	ldrb	r1, [r1, #24]
 800bd48:	b085      	sub	sp, #20
 800bd4a:	296e      	cmp	r1, #110	; 0x6e
 800bd4c:	4617      	mov	r7, r2
 800bd4e:	4606      	mov	r6, r0
 800bd50:	4698      	mov	r8, r3
 800bd52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd54:	f000 80b3 	beq.w	800bebe <_printf_i+0x182>
 800bd58:	d822      	bhi.n	800bda0 <_printf_i+0x64>
 800bd5a:	2963      	cmp	r1, #99	; 0x63
 800bd5c:	d036      	beq.n	800bdcc <_printf_i+0x90>
 800bd5e:	d80a      	bhi.n	800bd76 <_printf_i+0x3a>
 800bd60:	2900      	cmp	r1, #0
 800bd62:	f000 80b9 	beq.w	800bed8 <_printf_i+0x19c>
 800bd66:	2958      	cmp	r1, #88	; 0x58
 800bd68:	f000 8083 	beq.w	800be72 <_printf_i+0x136>
 800bd6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bd74:	e032      	b.n	800bddc <_printf_i+0xa0>
 800bd76:	2964      	cmp	r1, #100	; 0x64
 800bd78:	d001      	beq.n	800bd7e <_printf_i+0x42>
 800bd7a:	2969      	cmp	r1, #105	; 0x69
 800bd7c:	d1f6      	bne.n	800bd6c <_printf_i+0x30>
 800bd7e:	6820      	ldr	r0, [r4, #0]
 800bd80:	6813      	ldr	r3, [r2, #0]
 800bd82:	0605      	lsls	r5, r0, #24
 800bd84:	f103 0104 	add.w	r1, r3, #4
 800bd88:	d52a      	bpl.n	800bde0 <_printf_i+0xa4>
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	6011      	str	r1, [r2, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	da03      	bge.n	800bd9a <_printf_i+0x5e>
 800bd92:	222d      	movs	r2, #45	; 0x2d
 800bd94:	425b      	negs	r3, r3
 800bd96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bd9a:	486f      	ldr	r0, [pc, #444]	; (800bf58 <_printf_i+0x21c>)
 800bd9c:	220a      	movs	r2, #10
 800bd9e:	e039      	b.n	800be14 <_printf_i+0xd8>
 800bda0:	2973      	cmp	r1, #115	; 0x73
 800bda2:	f000 809d 	beq.w	800bee0 <_printf_i+0x1a4>
 800bda6:	d808      	bhi.n	800bdba <_printf_i+0x7e>
 800bda8:	296f      	cmp	r1, #111	; 0x6f
 800bdaa:	d020      	beq.n	800bdee <_printf_i+0xb2>
 800bdac:	2970      	cmp	r1, #112	; 0x70
 800bdae:	d1dd      	bne.n	800bd6c <_printf_i+0x30>
 800bdb0:	6823      	ldr	r3, [r4, #0]
 800bdb2:	f043 0320 	orr.w	r3, r3, #32
 800bdb6:	6023      	str	r3, [r4, #0]
 800bdb8:	e003      	b.n	800bdc2 <_printf_i+0x86>
 800bdba:	2975      	cmp	r1, #117	; 0x75
 800bdbc:	d017      	beq.n	800bdee <_printf_i+0xb2>
 800bdbe:	2978      	cmp	r1, #120	; 0x78
 800bdc0:	d1d4      	bne.n	800bd6c <_printf_i+0x30>
 800bdc2:	2378      	movs	r3, #120	; 0x78
 800bdc4:	4865      	ldr	r0, [pc, #404]	; (800bf5c <_printf_i+0x220>)
 800bdc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bdca:	e055      	b.n	800be78 <_printf_i+0x13c>
 800bdcc:	6813      	ldr	r3, [r2, #0]
 800bdce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdd2:	1d19      	adds	r1, r3, #4
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	6011      	str	r1, [r2, #0]
 800bdd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bddc:	2301      	movs	r3, #1
 800bdde:	e08c      	b.n	800befa <_printf_i+0x1be>
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bde6:	6011      	str	r1, [r2, #0]
 800bde8:	bf18      	it	ne
 800bdea:	b21b      	sxthne	r3, r3
 800bdec:	e7cf      	b.n	800bd8e <_printf_i+0x52>
 800bdee:	6813      	ldr	r3, [r2, #0]
 800bdf0:	6825      	ldr	r5, [r4, #0]
 800bdf2:	1d18      	adds	r0, r3, #4
 800bdf4:	6010      	str	r0, [r2, #0]
 800bdf6:	0628      	lsls	r0, r5, #24
 800bdf8:	d501      	bpl.n	800bdfe <_printf_i+0xc2>
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	e002      	b.n	800be04 <_printf_i+0xc8>
 800bdfe:	0668      	lsls	r0, r5, #25
 800be00:	d5fb      	bpl.n	800bdfa <_printf_i+0xbe>
 800be02:	881b      	ldrh	r3, [r3, #0]
 800be04:	296f      	cmp	r1, #111	; 0x6f
 800be06:	bf14      	ite	ne
 800be08:	220a      	movne	r2, #10
 800be0a:	2208      	moveq	r2, #8
 800be0c:	4852      	ldr	r0, [pc, #328]	; (800bf58 <_printf_i+0x21c>)
 800be0e:	2100      	movs	r1, #0
 800be10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be14:	6865      	ldr	r5, [r4, #4]
 800be16:	2d00      	cmp	r5, #0
 800be18:	60a5      	str	r5, [r4, #8]
 800be1a:	f2c0 8095 	blt.w	800bf48 <_printf_i+0x20c>
 800be1e:	6821      	ldr	r1, [r4, #0]
 800be20:	f021 0104 	bic.w	r1, r1, #4
 800be24:	6021      	str	r1, [r4, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d13d      	bne.n	800bea6 <_printf_i+0x16a>
 800be2a:	2d00      	cmp	r5, #0
 800be2c:	f040 808e 	bne.w	800bf4c <_printf_i+0x210>
 800be30:	4665      	mov	r5, ip
 800be32:	2a08      	cmp	r2, #8
 800be34:	d10b      	bne.n	800be4e <_printf_i+0x112>
 800be36:	6823      	ldr	r3, [r4, #0]
 800be38:	07db      	lsls	r3, r3, #31
 800be3a:	d508      	bpl.n	800be4e <_printf_i+0x112>
 800be3c:	6923      	ldr	r3, [r4, #16]
 800be3e:	6862      	ldr	r2, [r4, #4]
 800be40:	429a      	cmp	r2, r3
 800be42:	bfde      	ittt	le
 800be44:	2330      	movle	r3, #48	; 0x30
 800be46:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be4e:	ebac 0305 	sub.w	r3, ip, r5
 800be52:	6123      	str	r3, [r4, #16]
 800be54:	f8cd 8000 	str.w	r8, [sp]
 800be58:	463b      	mov	r3, r7
 800be5a:	aa03      	add	r2, sp, #12
 800be5c:	4621      	mov	r1, r4
 800be5e:	4630      	mov	r0, r6
 800be60:	f7ff fef6 	bl	800bc50 <_printf_common>
 800be64:	3001      	adds	r0, #1
 800be66:	d14d      	bne.n	800bf04 <_printf_i+0x1c8>
 800be68:	f04f 30ff 	mov.w	r0, #4294967295
 800be6c:	b005      	add	sp, #20
 800be6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be72:	4839      	ldr	r0, [pc, #228]	; (800bf58 <_printf_i+0x21c>)
 800be74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800be78:	6813      	ldr	r3, [r2, #0]
 800be7a:	6821      	ldr	r1, [r4, #0]
 800be7c:	1d1d      	adds	r5, r3, #4
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	6015      	str	r5, [r2, #0]
 800be82:	060a      	lsls	r2, r1, #24
 800be84:	d50b      	bpl.n	800be9e <_printf_i+0x162>
 800be86:	07ca      	lsls	r2, r1, #31
 800be88:	bf44      	itt	mi
 800be8a:	f041 0120 	orrmi.w	r1, r1, #32
 800be8e:	6021      	strmi	r1, [r4, #0]
 800be90:	b91b      	cbnz	r3, 800be9a <_printf_i+0x15e>
 800be92:	6822      	ldr	r2, [r4, #0]
 800be94:	f022 0220 	bic.w	r2, r2, #32
 800be98:	6022      	str	r2, [r4, #0]
 800be9a:	2210      	movs	r2, #16
 800be9c:	e7b7      	b.n	800be0e <_printf_i+0xd2>
 800be9e:	064d      	lsls	r5, r1, #25
 800bea0:	bf48      	it	mi
 800bea2:	b29b      	uxthmi	r3, r3
 800bea4:	e7ef      	b.n	800be86 <_printf_i+0x14a>
 800bea6:	4665      	mov	r5, ip
 800bea8:	fbb3 f1f2 	udiv	r1, r3, r2
 800beac:	fb02 3311 	mls	r3, r2, r1, r3
 800beb0:	5cc3      	ldrb	r3, [r0, r3]
 800beb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800beb6:	460b      	mov	r3, r1
 800beb8:	2900      	cmp	r1, #0
 800beba:	d1f5      	bne.n	800bea8 <_printf_i+0x16c>
 800bebc:	e7b9      	b.n	800be32 <_printf_i+0xf6>
 800bebe:	6813      	ldr	r3, [r2, #0]
 800bec0:	6825      	ldr	r5, [r4, #0]
 800bec2:	1d18      	adds	r0, r3, #4
 800bec4:	6961      	ldr	r1, [r4, #20]
 800bec6:	6010      	str	r0, [r2, #0]
 800bec8:	0628      	lsls	r0, r5, #24
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	d501      	bpl.n	800bed2 <_printf_i+0x196>
 800bece:	6019      	str	r1, [r3, #0]
 800bed0:	e002      	b.n	800bed8 <_printf_i+0x19c>
 800bed2:	066a      	lsls	r2, r5, #25
 800bed4:	d5fb      	bpl.n	800bece <_printf_i+0x192>
 800bed6:	8019      	strh	r1, [r3, #0]
 800bed8:	2300      	movs	r3, #0
 800beda:	4665      	mov	r5, ip
 800bedc:	6123      	str	r3, [r4, #16]
 800bede:	e7b9      	b.n	800be54 <_printf_i+0x118>
 800bee0:	6813      	ldr	r3, [r2, #0]
 800bee2:	1d19      	adds	r1, r3, #4
 800bee4:	6011      	str	r1, [r2, #0]
 800bee6:	681d      	ldr	r5, [r3, #0]
 800bee8:	6862      	ldr	r2, [r4, #4]
 800beea:	2100      	movs	r1, #0
 800beec:	4628      	mov	r0, r5
 800beee:	f000 fefd 	bl	800ccec <memchr>
 800bef2:	b108      	cbz	r0, 800bef8 <_printf_i+0x1bc>
 800bef4:	1b40      	subs	r0, r0, r5
 800bef6:	6060      	str	r0, [r4, #4]
 800bef8:	6863      	ldr	r3, [r4, #4]
 800befa:	6123      	str	r3, [r4, #16]
 800befc:	2300      	movs	r3, #0
 800befe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf02:	e7a7      	b.n	800be54 <_printf_i+0x118>
 800bf04:	6923      	ldr	r3, [r4, #16]
 800bf06:	462a      	mov	r2, r5
 800bf08:	4639      	mov	r1, r7
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	47c0      	blx	r8
 800bf0e:	3001      	adds	r0, #1
 800bf10:	d0aa      	beq.n	800be68 <_printf_i+0x12c>
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	079b      	lsls	r3, r3, #30
 800bf16:	d413      	bmi.n	800bf40 <_printf_i+0x204>
 800bf18:	68e0      	ldr	r0, [r4, #12]
 800bf1a:	9b03      	ldr	r3, [sp, #12]
 800bf1c:	4298      	cmp	r0, r3
 800bf1e:	bfb8      	it	lt
 800bf20:	4618      	movlt	r0, r3
 800bf22:	e7a3      	b.n	800be6c <_printf_i+0x130>
 800bf24:	2301      	movs	r3, #1
 800bf26:	464a      	mov	r2, r9
 800bf28:	4639      	mov	r1, r7
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	47c0      	blx	r8
 800bf2e:	3001      	adds	r0, #1
 800bf30:	d09a      	beq.n	800be68 <_printf_i+0x12c>
 800bf32:	3501      	adds	r5, #1
 800bf34:	68e3      	ldr	r3, [r4, #12]
 800bf36:	9a03      	ldr	r2, [sp, #12]
 800bf38:	1a9b      	subs	r3, r3, r2
 800bf3a:	42ab      	cmp	r3, r5
 800bf3c:	dcf2      	bgt.n	800bf24 <_printf_i+0x1e8>
 800bf3e:	e7eb      	b.n	800bf18 <_printf_i+0x1dc>
 800bf40:	2500      	movs	r5, #0
 800bf42:	f104 0919 	add.w	r9, r4, #25
 800bf46:	e7f5      	b.n	800bf34 <_printf_i+0x1f8>
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d1ac      	bne.n	800bea6 <_printf_i+0x16a>
 800bf4c:	7803      	ldrb	r3, [r0, #0]
 800bf4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf56:	e76c      	b.n	800be32 <_printf_i+0xf6>
 800bf58:	0800e6dc 	.word	0x0800e6dc
 800bf5c:	0800e6ed 	.word	0x0800e6ed

0800bf60 <siprintf>:
 800bf60:	b40e      	push	{r1, r2, r3}
 800bf62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bf66:	b500      	push	{lr}
 800bf68:	b09c      	sub	sp, #112	; 0x70
 800bf6a:	ab1d      	add	r3, sp, #116	; 0x74
 800bf6c:	9002      	str	r0, [sp, #8]
 800bf6e:	9006      	str	r0, [sp, #24]
 800bf70:	9107      	str	r1, [sp, #28]
 800bf72:	9104      	str	r1, [sp, #16]
 800bf74:	4808      	ldr	r0, [pc, #32]	; (800bf98 <siprintf+0x38>)
 800bf76:	4909      	ldr	r1, [pc, #36]	; (800bf9c <siprintf+0x3c>)
 800bf78:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf7c:	9105      	str	r1, [sp, #20]
 800bf7e:	6800      	ldr	r0, [r0, #0]
 800bf80:	a902      	add	r1, sp, #8
 800bf82:	9301      	str	r3, [sp, #4]
 800bf84:	f001 fab6 	bl	800d4f4 <_svfiprintf_r>
 800bf88:	2200      	movs	r2, #0
 800bf8a:	9b02      	ldr	r3, [sp, #8]
 800bf8c:	701a      	strb	r2, [r3, #0]
 800bf8e:	b01c      	add	sp, #112	; 0x70
 800bf90:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf94:	b003      	add	sp, #12
 800bf96:	4770      	bx	lr
 800bf98:	20000090 	.word	0x20000090
 800bf9c:	ffff0208 	.word	0xffff0208

0800bfa0 <__utoa>:
 800bfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfa2:	b08b      	sub	sp, #44	; 0x2c
 800bfa4:	4605      	mov	r5, r0
 800bfa6:	460c      	mov	r4, r1
 800bfa8:	466e      	mov	r6, sp
 800bfaa:	4b1b      	ldr	r3, [pc, #108]	; (800c018 <__utoa+0x78>)
 800bfac:	f103 0c20 	add.w	ip, r3, #32
 800bfb0:	4637      	mov	r7, r6
 800bfb2:	6818      	ldr	r0, [r3, #0]
 800bfb4:	6859      	ldr	r1, [r3, #4]
 800bfb6:	3308      	adds	r3, #8
 800bfb8:	c703      	stmia	r7!, {r0, r1}
 800bfba:	4563      	cmp	r3, ip
 800bfbc:	463e      	mov	r6, r7
 800bfbe:	d1f7      	bne.n	800bfb0 <__utoa+0x10>
 800bfc0:	6818      	ldr	r0, [r3, #0]
 800bfc2:	791b      	ldrb	r3, [r3, #4]
 800bfc4:	6038      	str	r0, [r7, #0]
 800bfc6:	713b      	strb	r3, [r7, #4]
 800bfc8:	1e93      	subs	r3, r2, #2
 800bfca:	2b22      	cmp	r3, #34	; 0x22
 800bfcc:	f04f 0300 	mov.w	r3, #0
 800bfd0:	d904      	bls.n	800bfdc <__utoa+0x3c>
 800bfd2:	7023      	strb	r3, [r4, #0]
 800bfd4:	461c      	mov	r4, r3
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	b00b      	add	sp, #44	; 0x2c
 800bfda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfdc:	1e66      	subs	r6, r4, #1
 800bfde:	fbb5 f0f2 	udiv	r0, r5, r2
 800bfe2:	fb02 5510 	mls	r5, r2, r0, r5
 800bfe6:	af0a      	add	r7, sp, #40	; 0x28
 800bfe8:	443d      	add	r5, r7
 800bfea:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800bfee:	1c59      	adds	r1, r3, #1
 800bff0:	f806 5f01 	strb.w	r5, [r6, #1]!
 800bff4:	4605      	mov	r5, r0
 800bff6:	b968      	cbnz	r0, 800c014 <__utoa+0x74>
 800bff8:	4622      	mov	r2, r4
 800bffa:	5460      	strb	r0, [r4, r1]
 800bffc:	4423      	add	r3, r4
 800bffe:	1b19      	subs	r1, r3, r4
 800c000:	1b10      	subs	r0, r2, r4
 800c002:	4281      	cmp	r1, r0
 800c004:	dde7      	ble.n	800bfd6 <__utoa+0x36>
 800c006:	7811      	ldrb	r1, [r2, #0]
 800c008:	7818      	ldrb	r0, [r3, #0]
 800c00a:	f802 0b01 	strb.w	r0, [r2], #1
 800c00e:	f803 1901 	strb.w	r1, [r3], #-1
 800c012:	e7f4      	b.n	800bffe <__utoa+0x5e>
 800c014:	460b      	mov	r3, r1
 800c016:	e7e2      	b.n	800bfde <__utoa+0x3e>
 800c018:	0800e6fe 	.word	0x0800e6fe

0800c01c <__ascii_wctomb>:
 800c01c:	b149      	cbz	r1, 800c032 <__ascii_wctomb+0x16>
 800c01e:	2aff      	cmp	r2, #255	; 0xff
 800c020:	bf8b      	itete	hi
 800c022:	238a      	movhi	r3, #138	; 0x8a
 800c024:	700a      	strbls	r2, [r1, #0]
 800c026:	6003      	strhi	r3, [r0, #0]
 800c028:	2001      	movls	r0, #1
 800c02a:	bf88      	it	hi
 800c02c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c030:	4770      	bx	lr
 800c032:	4608      	mov	r0, r1
 800c034:	4770      	bx	lr

0800c036 <quorem>:
 800c036:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03a:	6903      	ldr	r3, [r0, #16]
 800c03c:	690c      	ldr	r4, [r1, #16]
 800c03e:	4680      	mov	r8, r0
 800c040:	42a3      	cmp	r3, r4
 800c042:	f2c0 8084 	blt.w	800c14e <quorem+0x118>
 800c046:	3c01      	subs	r4, #1
 800c048:	f101 0714 	add.w	r7, r1, #20
 800c04c:	f100 0614 	add.w	r6, r0, #20
 800c050:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c054:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c058:	3501      	adds	r5, #1
 800c05a:	fbb0 f5f5 	udiv	r5, r0, r5
 800c05e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c062:	eb06 030c 	add.w	r3, r6, ip
 800c066:	eb07 090c 	add.w	r9, r7, ip
 800c06a:	9301      	str	r3, [sp, #4]
 800c06c:	b39d      	cbz	r5, 800c0d6 <quorem+0xa0>
 800c06e:	f04f 0a00 	mov.w	sl, #0
 800c072:	4638      	mov	r0, r7
 800c074:	46b6      	mov	lr, r6
 800c076:	46d3      	mov	fp, sl
 800c078:	f850 2b04 	ldr.w	r2, [r0], #4
 800c07c:	b293      	uxth	r3, r2
 800c07e:	fb05 a303 	mla	r3, r5, r3, sl
 800c082:	0c12      	lsrs	r2, r2, #16
 800c084:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c088:	fb05 a202 	mla	r2, r5, r2, sl
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	ebab 0303 	sub.w	r3, fp, r3
 800c092:	f8de b000 	ldr.w	fp, [lr]
 800c096:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c09a:	fa1f fb8b 	uxth.w	fp, fp
 800c09e:	445b      	add	r3, fp
 800c0a0:	fa1f fb82 	uxth.w	fp, r2
 800c0a4:	f8de 2000 	ldr.w	r2, [lr]
 800c0a8:	4581      	cmp	r9, r0
 800c0aa:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c0ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c0bc:	f84e 3b04 	str.w	r3, [lr], #4
 800c0c0:	d2da      	bcs.n	800c078 <quorem+0x42>
 800c0c2:	f856 300c 	ldr.w	r3, [r6, ip]
 800c0c6:	b933      	cbnz	r3, 800c0d6 <quorem+0xa0>
 800c0c8:	9b01      	ldr	r3, [sp, #4]
 800c0ca:	3b04      	subs	r3, #4
 800c0cc:	429e      	cmp	r6, r3
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	d331      	bcc.n	800c136 <quorem+0x100>
 800c0d2:	f8c8 4010 	str.w	r4, [r8, #16]
 800c0d6:	4640      	mov	r0, r8
 800c0d8:	f001 f836 	bl	800d148 <__mcmp>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	db26      	blt.n	800c12e <quorem+0xf8>
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f04f 0c00 	mov.w	ip, #0
 800c0e6:	3501      	adds	r5, #1
 800c0e8:	f857 1b04 	ldr.w	r1, [r7], #4
 800c0ec:	f8d0 e000 	ldr.w	lr, [r0]
 800c0f0:	b28b      	uxth	r3, r1
 800c0f2:	ebac 0303 	sub.w	r3, ip, r3
 800c0f6:	fa1f f28e 	uxth.w	r2, lr
 800c0fa:	4413      	add	r3, r2
 800c0fc:	0c0a      	lsrs	r2, r1, #16
 800c0fe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c102:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c106:	b29b      	uxth	r3, r3
 800c108:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c10c:	45b9      	cmp	r9, r7
 800c10e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c112:	f840 3b04 	str.w	r3, [r0], #4
 800c116:	d2e7      	bcs.n	800c0e8 <quorem+0xb2>
 800c118:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c11c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c120:	b92a      	cbnz	r2, 800c12e <quorem+0xf8>
 800c122:	3b04      	subs	r3, #4
 800c124:	429e      	cmp	r6, r3
 800c126:	461a      	mov	r2, r3
 800c128:	d30b      	bcc.n	800c142 <quorem+0x10c>
 800c12a:	f8c8 4010 	str.w	r4, [r8, #16]
 800c12e:	4628      	mov	r0, r5
 800c130:	b003      	add	sp, #12
 800c132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c136:	6812      	ldr	r2, [r2, #0]
 800c138:	3b04      	subs	r3, #4
 800c13a:	2a00      	cmp	r2, #0
 800c13c:	d1c9      	bne.n	800c0d2 <quorem+0x9c>
 800c13e:	3c01      	subs	r4, #1
 800c140:	e7c4      	b.n	800c0cc <quorem+0x96>
 800c142:	6812      	ldr	r2, [r2, #0]
 800c144:	3b04      	subs	r3, #4
 800c146:	2a00      	cmp	r2, #0
 800c148:	d1ef      	bne.n	800c12a <quorem+0xf4>
 800c14a:	3c01      	subs	r4, #1
 800c14c:	e7ea      	b.n	800c124 <quorem+0xee>
 800c14e:	2000      	movs	r0, #0
 800c150:	e7ee      	b.n	800c130 <quorem+0xfa>
 800c152:	0000      	movs	r0, r0
 800c154:	0000      	movs	r0, r0
	...

0800c158 <_dtoa_r>:
 800c158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c15c:	4616      	mov	r6, r2
 800c15e:	461f      	mov	r7, r3
 800c160:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c162:	b095      	sub	sp, #84	; 0x54
 800c164:	4604      	mov	r4, r0
 800c166:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800c16a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c16e:	b93d      	cbnz	r5, 800c180 <_dtoa_r+0x28>
 800c170:	2010      	movs	r0, #16
 800c172:	f000 fdb3 	bl	800ccdc <malloc>
 800c176:	6260      	str	r0, [r4, #36]	; 0x24
 800c178:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c17c:	6005      	str	r5, [r0, #0]
 800c17e:	60c5      	str	r5, [r0, #12]
 800c180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c182:	6819      	ldr	r1, [r3, #0]
 800c184:	b151      	cbz	r1, 800c19c <_dtoa_r+0x44>
 800c186:	685a      	ldr	r2, [r3, #4]
 800c188:	2301      	movs	r3, #1
 800c18a:	4093      	lsls	r3, r2
 800c18c:	604a      	str	r2, [r1, #4]
 800c18e:	608b      	str	r3, [r1, #8]
 800c190:	4620      	mov	r0, r4
 800c192:	f000 fdf8 	bl	800cd86 <_Bfree>
 800c196:	2200      	movs	r2, #0
 800c198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	1e3b      	subs	r3, r7, #0
 800c19e:	bfaf      	iteee	ge
 800c1a0:	2300      	movge	r3, #0
 800c1a2:	2201      	movlt	r2, #1
 800c1a4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c1a8:	9303      	strlt	r3, [sp, #12]
 800c1aa:	bfac      	ite	ge
 800c1ac:	f8c8 3000 	strge.w	r3, [r8]
 800c1b0:	f8c8 2000 	strlt.w	r2, [r8]
 800c1b4:	4bae      	ldr	r3, [pc, #696]	; (800c470 <_dtoa_r+0x318>)
 800c1b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c1ba:	ea33 0308 	bics.w	r3, r3, r8
 800c1be:	d11b      	bne.n	800c1f8 <_dtoa_r+0xa0>
 800c1c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800c1c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c1c6:	6013      	str	r3, [r2, #0]
 800c1c8:	9b02      	ldr	r3, [sp, #8]
 800c1ca:	b923      	cbnz	r3, 800c1d6 <_dtoa_r+0x7e>
 800c1cc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	f000 8545 	beq.w	800cc60 <_dtoa_r+0xb08>
 800c1d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1d8:	b953      	cbnz	r3, 800c1f0 <_dtoa_r+0x98>
 800c1da:	4ba6      	ldr	r3, [pc, #664]	; (800c474 <_dtoa_r+0x31c>)
 800c1dc:	e021      	b.n	800c222 <_dtoa_r+0xca>
 800c1de:	4ba6      	ldr	r3, [pc, #664]	; (800c478 <_dtoa_r+0x320>)
 800c1e0:	9306      	str	r3, [sp, #24]
 800c1e2:	3308      	adds	r3, #8
 800c1e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c1e6:	6013      	str	r3, [r2, #0]
 800c1e8:	9806      	ldr	r0, [sp, #24]
 800c1ea:	b015      	add	sp, #84	; 0x54
 800c1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f0:	4ba0      	ldr	r3, [pc, #640]	; (800c474 <_dtoa_r+0x31c>)
 800c1f2:	9306      	str	r3, [sp, #24]
 800c1f4:	3303      	adds	r3, #3
 800c1f6:	e7f5      	b.n	800c1e4 <_dtoa_r+0x8c>
 800c1f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	2300      	movs	r3, #0
 800c200:	4630      	mov	r0, r6
 800c202:	4639      	mov	r1, r7
 800c204:	f7f4 fbd0 	bl	80009a8 <__aeabi_dcmpeq>
 800c208:	4682      	mov	sl, r0
 800c20a:	b160      	cbz	r0, 800c226 <_dtoa_r+0xce>
 800c20c:	2301      	movs	r3, #1
 800c20e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c210:	6013      	str	r3, [r2, #0]
 800c212:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c214:	2b00      	cmp	r3, #0
 800c216:	f000 8520 	beq.w	800cc5a <_dtoa_r+0xb02>
 800c21a:	4b98      	ldr	r3, [pc, #608]	; (800c47c <_dtoa_r+0x324>)
 800c21c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c21e:	6013      	str	r3, [r2, #0]
 800c220:	3b01      	subs	r3, #1
 800c222:	9306      	str	r3, [sp, #24]
 800c224:	e7e0      	b.n	800c1e8 <_dtoa_r+0x90>
 800c226:	ab12      	add	r3, sp, #72	; 0x48
 800c228:	9301      	str	r3, [sp, #4]
 800c22a:	ab13      	add	r3, sp, #76	; 0x4c
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	4632      	mov	r2, r6
 800c230:	463b      	mov	r3, r7
 800c232:	4620      	mov	r0, r4
 800c234:	f001 f800 	bl	800d238 <__d2b>
 800c238:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c23c:	4683      	mov	fp, r0
 800c23e:	2d00      	cmp	r5, #0
 800c240:	d07d      	beq.n	800c33e <_dtoa_r+0x1e6>
 800c242:	46b0      	mov	r8, r6
 800c244:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c248:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800c24c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800c250:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c254:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800c258:	2200      	movs	r2, #0
 800c25a:	4b89      	ldr	r3, [pc, #548]	; (800c480 <_dtoa_r+0x328>)
 800c25c:	4640      	mov	r0, r8
 800c25e:	4649      	mov	r1, r9
 800c260:	f7f3 ff82 	bl	8000168 <__aeabi_dsub>
 800c264:	a37c      	add	r3, pc, #496	; (adr r3, 800c458 <_dtoa_r+0x300>)
 800c266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26a:	f7f4 f935 	bl	80004d8 <__aeabi_dmul>
 800c26e:	a37c      	add	r3, pc, #496	; (adr r3, 800c460 <_dtoa_r+0x308>)
 800c270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c274:	f7f3 ff7a 	bl	800016c <__adddf3>
 800c278:	4606      	mov	r6, r0
 800c27a:	4628      	mov	r0, r5
 800c27c:	460f      	mov	r7, r1
 800c27e:	f7f4 f8c1 	bl	8000404 <__aeabi_i2d>
 800c282:	a379      	add	r3, pc, #484	; (adr r3, 800c468 <_dtoa_r+0x310>)
 800c284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c288:	f7f4 f926 	bl	80004d8 <__aeabi_dmul>
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	4630      	mov	r0, r6
 800c292:	4639      	mov	r1, r7
 800c294:	f7f3 ff6a 	bl	800016c <__adddf3>
 800c298:	4606      	mov	r6, r0
 800c29a:	460f      	mov	r7, r1
 800c29c:	f7f4 fbcc 	bl	8000a38 <__aeabi_d2iz>
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	4682      	mov	sl, r0
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	4639      	mov	r1, r7
 800c2aa:	f7f4 fb87 	bl	80009bc <__aeabi_dcmplt>
 800c2ae:	b148      	cbz	r0, 800c2c4 <_dtoa_r+0x16c>
 800c2b0:	4650      	mov	r0, sl
 800c2b2:	f7f4 f8a7 	bl	8000404 <__aeabi_i2d>
 800c2b6:	4632      	mov	r2, r6
 800c2b8:	463b      	mov	r3, r7
 800c2ba:	f7f4 fb75 	bl	80009a8 <__aeabi_dcmpeq>
 800c2be:	b908      	cbnz	r0, 800c2c4 <_dtoa_r+0x16c>
 800c2c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2c4:	f1ba 0f16 	cmp.w	sl, #22
 800c2c8:	d85a      	bhi.n	800c380 <_dtoa_r+0x228>
 800c2ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2ce:	496d      	ldr	r1, [pc, #436]	; (800c484 <_dtoa_r+0x32c>)
 800c2d0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c2d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2d8:	f7f4 fb8e 	bl	80009f8 <__aeabi_dcmpgt>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	d051      	beq.n	800c384 <_dtoa_r+0x22c>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2e6:	930d      	str	r3, [sp, #52]	; 0x34
 800c2e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c2ea:	1b5d      	subs	r5, r3, r5
 800c2ec:	1e6b      	subs	r3, r5, #1
 800c2ee:	9307      	str	r3, [sp, #28]
 800c2f0:	bf43      	ittte	mi
 800c2f2:	2300      	movmi	r3, #0
 800c2f4:	f1c5 0901 	rsbmi	r9, r5, #1
 800c2f8:	9307      	strmi	r3, [sp, #28]
 800c2fa:	f04f 0900 	movpl.w	r9, #0
 800c2fe:	f1ba 0f00 	cmp.w	sl, #0
 800c302:	db41      	blt.n	800c388 <_dtoa_r+0x230>
 800c304:	9b07      	ldr	r3, [sp, #28]
 800c306:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800c30a:	4453      	add	r3, sl
 800c30c:	9307      	str	r3, [sp, #28]
 800c30e:	2300      	movs	r3, #0
 800c310:	9308      	str	r3, [sp, #32]
 800c312:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c314:	2b09      	cmp	r3, #9
 800c316:	f200 808f 	bhi.w	800c438 <_dtoa_r+0x2e0>
 800c31a:	2b05      	cmp	r3, #5
 800c31c:	bfc4      	itt	gt
 800c31e:	3b04      	subgt	r3, #4
 800c320:	931e      	strgt	r3, [sp, #120]	; 0x78
 800c322:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c324:	bfc8      	it	gt
 800c326:	2500      	movgt	r5, #0
 800c328:	f1a3 0302 	sub.w	r3, r3, #2
 800c32c:	bfd8      	it	le
 800c32e:	2501      	movle	r5, #1
 800c330:	2b03      	cmp	r3, #3
 800c332:	f200 808d 	bhi.w	800c450 <_dtoa_r+0x2f8>
 800c336:	e8df f003 	tbb	[pc, r3]
 800c33a:	7d7b      	.short	0x7d7b
 800c33c:	6f2f      	.short	0x6f2f
 800c33e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c342:	441d      	add	r5, r3
 800c344:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c348:	2820      	cmp	r0, #32
 800c34a:	dd13      	ble.n	800c374 <_dtoa_r+0x21c>
 800c34c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c350:	9b02      	ldr	r3, [sp, #8]
 800c352:	fa08 f800 	lsl.w	r8, r8, r0
 800c356:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c35a:	fa23 f000 	lsr.w	r0, r3, r0
 800c35e:	ea48 0000 	orr.w	r0, r8, r0
 800c362:	f7f4 f83f 	bl	80003e4 <__aeabi_ui2d>
 800c366:	2301      	movs	r3, #1
 800c368:	4680      	mov	r8, r0
 800c36a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800c36e:	3d01      	subs	r5, #1
 800c370:	9310      	str	r3, [sp, #64]	; 0x40
 800c372:	e771      	b.n	800c258 <_dtoa_r+0x100>
 800c374:	9b02      	ldr	r3, [sp, #8]
 800c376:	f1c0 0020 	rsb	r0, r0, #32
 800c37a:	fa03 f000 	lsl.w	r0, r3, r0
 800c37e:	e7f0      	b.n	800c362 <_dtoa_r+0x20a>
 800c380:	2301      	movs	r3, #1
 800c382:	e7b0      	b.n	800c2e6 <_dtoa_r+0x18e>
 800c384:	900d      	str	r0, [sp, #52]	; 0x34
 800c386:	e7af      	b.n	800c2e8 <_dtoa_r+0x190>
 800c388:	f1ca 0300 	rsb	r3, sl, #0
 800c38c:	9308      	str	r3, [sp, #32]
 800c38e:	2300      	movs	r3, #0
 800c390:	eba9 090a 	sub.w	r9, r9, sl
 800c394:	930c      	str	r3, [sp, #48]	; 0x30
 800c396:	e7bc      	b.n	800c312 <_dtoa_r+0x1ba>
 800c398:	2301      	movs	r3, #1
 800c39a:	9309      	str	r3, [sp, #36]	; 0x24
 800c39c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	dd74      	ble.n	800c48c <_dtoa_r+0x334>
 800c3a2:	4698      	mov	r8, r3
 800c3a4:	9304      	str	r3, [sp, #16]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c3aa:	6072      	str	r2, [r6, #4]
 800c3ac:	2204      	movs	r2, #4
 800c3ae:	f102 0014 	add.w	r0, r2, #20
 800c3b2:	4298      	cmp	r0, r3
 800c3b4:	6871      	ldr	r1, [r6, #4]
 800c3b6:	d96e      	bls.n	800c496 <_dtoa_r+0x33e>
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	f000 fcb0 	bl	800cd1e <_Balloc>
 800c3be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3c0:	6030      	str	r0, [r6, #0]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f1b8 0f0e 	cmp.w	r8, #14
 800c3c8:	9306      	str	r3, [sp, #24]
 800c3ca:	f200 80ed 	bhi.w	800c5a8 <_dtoa_r+0x450>
 800c3ce:	2d00      	cmp	r5, #0
 800c3d0:	f000 80ea 	beq.w	800c5a8 <_dtoa_r+0x450>
 800c3d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3d8:	f1ba 0f00 	cmp.w	sl, #0
 800c3dc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c3e0:	dd77      	ble.n	800c4d2 <_dtoa_r+0x37a>
 800c3e2:	4a28      	ldr	r2, [pc, #160]	; (800c484 <_dtoa_r+0x32c>)
 800c3e4:	f00a 030f 	and.w	r3, sl, #15
 800c3e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c3ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c3f0:	06f0      	lsls	r0, r6, #27
 800c3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c3fa:	d568      	bpl.n	800c4ce <_dtoa_r+0x376>
 800c3fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c400:	4b21      	ldr	r3, [pc, #132]	; (800c488 <_dtoa_r+0x330>)
 800c402:	2503      	movs	r5, #3
 800c404:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c408:	f7f4 f990 	bl	800072c <__aeabi_ddiv>
 800c40c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c410:	f006 060f 	and.w	r6, r6, #15
 800c414:	4f1c      	ldr	r7, [pc, #112]	; (800c488 <_dtoa_r+0x330>)
 800c416:	e04f      	b.n	800c4b8 <_dtoa_r+0x360>
 800c418:	2301      	movs	r3, #1
 800c41a:	9309      	str	r3, [sp, #36]	; 0x24
 800c41c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c41e:	4453      	add	r3, sl
 800c420:	f103 0801 	add.w	r8, r3, #1
 800c424:	9304      	str	r3, [sp, #16]
 800c426:	4643      	mov	r3, r8
 800c428:	2b01      	cmp	r3, #1
 800c42a:	bfb8      	it	lt
 800c42c:	2301      	movlt	r3, #1
 800c42e:	e7ba      	b.n	800c3a6 <_dtoa_r+0x24e>
 800c430:	2300      	movs	r3, #0
 800c432:	e7b2      	b.n	800c39a <_dtoa_r+0x242>
 800c434:	2300      	movs	r3, #0
 800c436:	e7f0      	b.n	800c41a <_dtoa_r+0x2c2>
 800c438:	2501      	movs	r5, #1
 800c43a:	2300      	movs	r3, #0
 800c43c:	9509      	str	r5, [sp, #36]	; 0x24
 800c43e:	931e      	str	r3, [sp, #120]	; 0x78
 800c440:	f04f 33ff 	mov.w	r3, #4294967295
 800c444:	2200      	movs	r2, #0
 800c446:	9304      	str	r3, [sp, #16]
 800c448:	4698      	mov	r8, r3
 800c44a:	2312      	movs	r3, #18
 800c44c:	921f      	str	r2, [sp, #124]	; 0x7c
 800c44e:	e7aa      	b.n	800c3a6 <_dtoa_r+0x24e>
 800c450:	2301      	movs	r3, #1
 800c452:	9309      	str	r3, [sp, #36]	; 0x24
 800c454:	e7f4      	b.n	800c440 <_dtoa_r+0x2e8>
 800c456:	bf00      	nop
 800c458:	636f4361 	.word	0x636f4361
 800c45c:	3fd287a7 	.word	0x3fd287a7
 800c460:	8b60c8b3 	.word	0x8b60c8b3
 800c464:	3fc68a28 	.word	0x3fc68a28
 800c468:	509f79fb 	.word	0x509f79fb
 800c46c:	3fd34413 	.word	0x3fd34413
 800c470:	7ff00000 	.word	0x7ff00000
 800c474:	0800e82d 	.word	0x0800e82d
 800c478:	0800e824 	.word	0x0800e824
 800c47c:	0800e6db 	.word	0x0800e6db
 800c480:	3ff80000 	.word	0x3ff80000
 800c484:	0800e860 	.word	0x0800e860
 800c488:	0800e838 	.word	0x0800e838
 800c48c:	2301      	movs	r3, #1
 800c48e:	9304      	str	r3, [sp, #16]
 800c490:	4698      	mov	r8, r3
 800c492:	461a      	mov	r2, r3
 800c494:	e7da      	b.n	800c44c <_dtoa_r+0x2f4>
 800c496:	3101      	adds	r1, #1
 800c498:	6071      	str	r1, [r6, #4]
 800c49a:	0052      	lsls	r2, r2, #1
 800c49c:	e787      	b.n	800c3ae <_dtoa_r+0x256>
 800c49e:	07f1      	lsls	r1, r6, #31
 800c4a0:	d508      	bpl.n	800c4b4 <_dtoa_r+0x35c>
 800c4a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c4a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4aa:	f7f4 f815 	bl	80004d8 <__aeabi_dmul>
 800c4ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c4b2:	3501      	adds	r5, #1
 800c4b4:	1076      	asrs	r6, r6, #1
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	2e00      	cmp	r6, #0
 800c4ba:	d1f0      	bne.n	800c49e <_dtoa_r+0x346>
 800c4bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c4c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4c4:	f7f4 f932 	bl	800072c <__aeabi_ddiv>
 800c4c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4cc:	e01b      	b.n	800c506 <_dtoa_r+0x3ae>
 800c4ce:	2502      	movs	r5, #2
 800c4d0:	e7a0      	b.n	800c414 <_dtoa_r+0x2bc>
 800c4d2:	f000 80a4 	beq.w	800c61e <_dtoa_r+0x4c6>
 800c4d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c4da:	f1ca 0600 	rsb	r6, sl, #0
 800c4de:	4ba0      	ldr	r3, [pc, #640]	; (800c760 <_dtoa_r+0x608>)
 800c4e0:	f006 020f 	and.w	r2, r6, #15
 800c4e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ec:	f7f3 fff4 	bl	80004d8 <__aeabi_dmul>
 800c4f0:	2502      	movs	r5, #2
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4f8:	4f9a      	ldr	r7, [pc, #616]	; (800c764 <_dtoa_r+0x60c>)
 800c4fa:	1136      	asrs	r6, r6, #4
 800c4fc:	2e00      	cmp	r6, #0
 800c4fe:	f040 8083 	bne.w	800c608 <_dtoa_r+0x4b0>
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1e0      	bne.n	800c4c8 <_dtoa_r+0x370>
 800c506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f000 808a 	beq.w	800c622 <_dtoa_r+0x4ca>
 800c50e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c512:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c516:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c51a:	2200      	movs	r2, #0
 800c51c:	4b92      	ldr	r3, [pc, #584]	; (800c768 <_dtoa_r+0x610>)
 800c51e:	f7f4 fa4d 	bl	80009bc <__aeabi_dcmplt>
 800c522:	2800      	cmp	r0, #0
 800c524:	d07d      	beq.n	800c622 <_dtoa_r+0x4ca>
 800c526:	f1b8 0f00 	cmp.w	r8, #0
 800c52a:	d07a      	beq.n	800c622 <_dtoa_r+0x4ca>
 800c52c:	9b04      	ldr	r3, [sp, #16]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	dd36      	ble.n	800c5a0 <_dtoa_r+0x448>
 800c532:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c536:	2200      	movs	r2, #0
 800c538:	4b8c      	ldr	r3, [pc, #560]	; (800c76c <_dtoa_r+0x614>)
 800c53a:	f7f3 ffcd 	bl	80004d8 <__aeabi_dmul>
 800c53e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c542:	9e04      	ldr	r6, [sp, #16]
 800c544:	f10a 37ff 	add.w	r7, sl, #4294967295
 800c548:	3501      	adds	r5, #1
 800c54a:	4628      	mov	r0, r5
 800c54c:	f7f3 ff5a 	bl	8000404 <__aeabi_i2d>
 800c550:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c554:	f7f3 ffc0 	bl	80004d8 <__aeabi_dmul>
 800c558:	2200      	movs	r2, #0
 800c55a:	4b85      	ldr	r3, [pc, #532]	; (800c770 <_dtoa_r+0x618>)
 800c55c:	f7f3 fe06 	bl	800016c <__adddf3>
 800c560:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800c564:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c568:	950b      	str	r5, [sp, #44]	; 0x2c
 800c56a:	2e00      	cmp	r6, #0
 800c56c:	d15c      	bne.n	800c628 <_dtoa_r+0x4d0>
 800c56e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c572:	2200      	movs	r2, #0
 800c574:	4b7f      	ldr	r3, [pc, #508]	; (800c774 <_dtoa_r+0x61c>)
 800c576:	f7f3 fdf7 	bl	8000168 <__aeabi_dsub>
 800c57a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c57c:	462b      	mov	r3, r5
 800c57e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c582:	f7f4 fa39 	bl	80009f8 <__aeabi_dcmpgt>
 800c586:	2800      	cmp	r0, #0
 800c588:	f040 8281 	bne.w	800ca8e <_dtoa_r+0x936>
 800c58c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c592:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c596:	f7f4 fa11 	bl	80009bc <__aeabi_dcmplt>
 800c59a:	2800      	cmp	r0, #0
 800c59c:	f040 8275 	bne.w	800ca8a <_dtoa_r+0x932>
 800c5a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c5a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c5a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f2c0 814b 	blt.w	800c846 <_dtoa_r+0x6ee>
 800c5b0:	f1ba 0f0e 	cmp.w	sl, #14
 800c5b4:	f300 8147 	bgt.w	800c846 <_dtoa_r+0x6ee>
 800c5b8:	4b69      	ldr	r3, [pc, #420]	; (800c760 <_dtoa_r+0x608>)
 800c5ba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c5c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f280 80d7 	bge.w	800c77c <_dtoa_r+0x624>
 800c5ce:	f1b8 0f00 	cmp.w	r8, #0
 800c5d2:	f300 80d3 	bgt.w	800c77c <_dtoa_r+0x624>
 800c5d6:	f040 8257 	bne.w	800ca88 <_dtoa_r+0x930>
 800c5da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	4b64      	ldr	r3, [pc, #400]	; (800c774 <_dtoa_r+0x61c>)
 800c5e2:	f7f3 ff79 	bl	80004d8 <__aeabi_dmul>
 800c5e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5ea:	f7f4 f9fb 	bl	80009e4 <__aeabi_dcmpge>
 800c5ee:	4646      	mov	r6, r8
 800c5f0:	4647      	mov	r7, r8
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	f040 822d 	bne.w	800ca52 <_dtoa_r+0x8fa>
 800c5f8:	9b06      	ldr	r3, [sp, #24]
 800c5fa:	9a06      	ldr	r2, [sp, #24]
 800c5fc:	1c5d      	adds	r5, r3, #1
 800c5fe:	2331      	movs	r3, #49	; 0x31
 800c600:	f10a 0a01 	add.w	sl, sl, #1
 800c604:	7013      	strb	r3, [r2, #0]
 800c606:	e228      	b.n	800ca5a <_dtoa_r+0x902>
 800c608:	07f2      	lsls	r2, r6, #31
 800c60a:	d505      	bpl.n	800c618 <_dtoa_r+0x4c0>
 800c60c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c610:	f7f3 ff62 	bl	80004d8 <__aeabi_dmul>
 800c614:	2301      	movs	r3, #1
 800c616:	3501      	adds	r5, #1
 800c618:	1076      	asrs	r6, r6, #1
 800c61a:	3708      	adds	r7, #8
 800c61c:	e76e      	b.n	800c4fc <_dtoa_r+0x3a4>
 800c61e:	2502      	movs	r5, #2
 800c620:	e771      	b.n	800c506 <_dtoa_r+0x3ae>
 800c622:	4657      	mov	r7, sl
 800c624:	4646      	mov	r6, r8
 800c626:	e790      	b.n	800c54a <_dtoa_r+0x3f2>
 800c628:	4b4d      	ldr	r3, [pc, #308]	; (800c760 <_dtoa_r+0x608>)
 800c62a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c62e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c634:	2b00      	cmp	r3, #0
 800c636:	d048      	beq.n	800c6ca <_dtoa_r+0x572>
 800c638:	4602      	mov	r2, r0
 800c63a:	460b      	mov	r3, r1
 800c63c:	2000      	movs	r0, #0
 800c63e:	494e      	ldr	r1, [pc, #312]	; (800c778 <_dtoa_r+0x620>)
 800c640:	f7f4 f874 	bl	800072c <__aeabi_ddiv>
 800c644:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c648:	f7f3 fd8e 	bl	8000168 <__aeabi_dsub>
 800c64c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c650:	9d06      	ldr	r5, [sp, #24]
 800c652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c656:	f7f4 f9ef 	bl	8000a38 <__aeabi_d2iz>
 800c65a:	9011      	str	r0, [sp, #68]	; 0x44
 800c65c:	f7f3 fed2 	bl	8000404 <__aeabi_i2d>
 800c660:	4602      	mov	r2, r0
 800c662:	460b      	mov	r3, r1
 800c664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c668:	f7f3 fd7e 	bl	8000168 <__aeabi_dsub>
 800c66c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c66e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c672:	3330      	adds	r3, #48	; 0x30
 800c674:	f805 3b01 	strb.w	r3, [r5], #1
 800c678:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c67c:	f7f4 f99e 	bl	80009bc <__aeabi_dcmplt>
 800c680:	2800      	cmp	r0, #0
 800c682:	d163      	bne.n	800c74c <_dtoa_r+0x5f4>
 800c684:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c688:	2000      	movs	r0, #0
 800c68a:	4937      	ldr	r1, [pc, #220]	; (800c768 <_dtoa_r+0x610>)
 800c68c:	f7f3 fd6c 	bl	8000168 <__aeabi_dsub>
 800c690:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c694:	f7f4 f992 	bl	80009bc <__aeabi_dcmplt>
 800c698:	2800      	cmp	r0, #0
 800c69a:	f040 80b5 	bne.w	800c808 <_dtoa_r+0x6b0>
 800c69e:	9b06      	ldr	r3, [sp, #24]
 800c6a0:	1aeb      	subs	r3, r5, r3
 800c6a2:	429e      	cmp	r6, r3
 800c6a4:	f77f af7c 	ble.w	800c5a0 <_dtoa_r+0x448>
 800c6a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	4b2f      	ldr	r3, [pc, #188]	; (800c76c <_dtoa_r+0x614>)
 800c6b0:	f7f3 ff12 	bl	80004d8 <__aeabi_dmul>
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c6ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6be:	4b2b      	ldr	r3, [pc, #172]	; (800c76c <_dtoa_r+0x614>)
 800c6c0:	f7f3 ff0a 	bl	80004d8 <__aeabi_dmul>
 800c6c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6c8:	e7c3      	b.n	800c652 <_dtoa_r+0x4fa>
 800c6ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c6ce:	f7f3 ff03 	bl	80004d8 <__aeabi_dmul>
 800c6d2:	9b06      	ldr	r3, [sp, #24]
 800c6d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c6d8:	199d      	adds	r5, r3, r6
 800c6da:	461e      	mov	r6, r3
 800c6dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6e0:	f7f4 f9aa 	bl	8000a38 <__aeabi_d2iz>
 800c6e4:	9011      	str	r0, [sp, #68]	; 0x44
 800c6e6:	f7f3 fe8d 	bl	8000404 <__aeabi_i2d>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6f2:	f7f3 fd39 	bl	8000168 <__aeabi_dsub>
 800c6f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6fc:	3330      	adds	r3, #48	; 0x30
 800c6fe:	f806 3b01 	strb.w	r3, [r6], #1
 800c702:	42ae      	cmp	r6, r5
 800c704:	f04f 0200 	mov.w	r2, #0
 800c708:	d124      	bne.n	800c754 <_dtoa_r+0x5fc>
 800c70a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c70e:	4b1a      	ldr	r3, [pc, #104]	; (800c778 <_dtoa_r+0x620>)
 800c710:	f7f3 fd2c 	bl	800016c <__adddf3>
 800c714:	4602      	mov	r2, r0
 800c716:	460b      	mov	r3, r1
 800c718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c71c:	f7f4 f96c 	bl	80009f8 <__aeabi_dcmpgt>
 800c720:	2800      	cmp	r0, #0
 800c722:	d171      	bne.n	800c808 <_dtoa_r+0x6b0>
 800c724:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c728:	2000      	movs	r0, #0
 800c72a:	4913      	ldr	r1, [pc, #76]	; (800c778 <_dtoa_r+0x620>)
 800c72c:	f7f3 fd1c 	bl	8000168 <__aeabi_dsub>
 800c730:	4602      	mov	r2, r0
 800c732:	460b      	mov	r3, r1
 800c734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c738:	f7f4 f940 	bl	80009bc <__aeabi_dcmplt>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	f43f af2f 	beq.w	800c5a0 <_dtoa_r+0x448>
 800c742:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c746:	1e6a      	subs	r2, r5, #1
 800c748:	2b30      	cmp	r3, #48	; 0x30
 800c74a:	d001      	beq.n	800c750 <_dtoa_r+0x5f8>
 800c74c:	46ba      	mov	sl, r7
 800c74e:	e04a      	b.n	800c7e6 <_dtoa_r+0x68e>
 800c750:	4615      	mov	r5, r2
 800c752:	e7f6      	b.n	800c742 <_dtoa_r+0x5ea>
 800c754:	4b05      	ldr	r3, [pc, #20]	; (800c76c <_dtoa_r+0x614>)
 800c756:	f7f3 febf 	bl	80004d8 <__aeabi_dmul>
 800c75a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c75e:	e7bd      	b.n	800c6dc <_dtoa_r+0x584>
 800c760:	0800e860 	.word	0x0800e860
 800c764:	0800e838 	.word	0x0800e838
 800c768:	3ff00000 	.word	0x3ff00000
 800c76c:	40240000 	.word	0x40240000
 800c770:	401c0000 	.word	0x401c0000
 800c774:	40140000 	.word	0x40140000
 800c778:	3fe00000 	.word	0x3fe00000
 800c77c:	9d06      	ldr	r5, [sp, #24]
 800c77e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c786:	4630      	mov	r0, r6
 800c788:	4639      	mov	r1, r7
 800c78a:	f7f3 ffcf 	bl	800072c <__aeabi_ddiv>
 800c78e:	f7f4 f953 	bl	8000a38 <__aeabi_d2iz>
 800c792:	4681      	mov	r9, r0
 800c794:	f7f3 fe36 	bl	8000404 <__aeabi_i2d>
 800c798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c79c:	f7f3 fe9c 	bl	80004d8 <__aeabi_dmul>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	4639      	mov	r1, r7
 800c7a8:	f7f3 fcde 	bl	8000168 <__aeabi_dsub>
 800c7ac:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800c7b0:	f805 6b01 	strb.w	r6, [r5], #1
 800c7b4:	9e06      	ldr	r6, [sp, #24]
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	1bae      	subs	r6, r5, r6
 800c7ba:	45b0      	cmp	r8, r6
 800c7bc:	460b      	mov	r3, r1
 800c7be:	d135      	bne.n	800c82c <_dtoa_r+0x6d4>
 800c7c0:	f7f3 fcd4 	bl	800016c <__adddf3>
 800c7c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7c8:	4606      	mov	r6, r0
 800c7ca:	460f      	mov	r7, r1
 800c7cc:	f7f4 f914 	bl	80009f8 <__aeabi_dcmpgt>
 800c7d0:	b9c8      	cbnz	r0, 800c806 <_dtoa_r+0x6ae>
 800c7d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	4639      	mov	r1, r7
 800c7da:	f7f4 f8e5 	bl	80009a8 <__aeabi_dcmpeq>
 800c7de:	b110      	cbz	r0, 800c7e6 <_dtoa_r+0x68e>
 800c7e0:	f019 0f01 	tst.w	r9, #1
 800c7e4:	d10f      	bne.n	800c806 <_dtoa_r+0x6ae>
 800c7e6:	4659      	mov	r1, fp
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f000 facc 	bl	800cd86 <_Bfree>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c7f2:	702b      	strb	r3, [r5, #0]
 800c7f4:	f10a 0301 	add.w	r3, sl, #1
 800c7f8:	6013      	str	r3, [r2, #0]
 800c7fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f43f acf3 	beq.w	800c1e8 <_dtoa_r+0x90>
 800c802:	601d      	str	r5, [r3, #0]
 800c804:	e4f0      	b.n	800c1e8 <_dtoa_r+0x90>
 800c806:	4657      	mov	r7, sl
 800c808:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c80c:	1e6b      	subs	r3, r5, #1
 800c80e:	2a39      	cmp	r2, #57	; 0x39
 800c810:	d106      	bne.n	800c820 <_dtoa_r+0x6c8>
 800c812:	9a06      	ldr	r2, [sp, #24]
 800c814:	429a      	cmp	r2, r3
 800c816:	d107      	bne.n	800c828 <_dtoa_r+0x6d0>
 800c818:	2330      	movs	r3, #48	; 0x30
 800c81a:	7013      	strb	r3, [r2, #0]
 800c81c:	4613      	mov	r3, r2
 800c81e:	3701      	adds	r7, #1
 800c820:	781a      	ldrb	r2, [r3, #0]
 800c822:	3201      	adds	r2, #1
 800c824:	701a      	strb	r2, [r3, #0]
 800c826:	e791      	b.n	800c74c <_dtoa_r+0x5f4>
 800c828:	461d      	mov	r5, r3
 800c82a:	e7ed      	b.n	800c808 <_dtoa_r+0x6b0>
 800c82c:	2200      	movs	r2, #0
 800c82e:	4b99      	ldr	r3, [pc, #612]	; (800ca94 <_dtoa_r+0x93c>)
 800c830:	f7f3 fe52 	bl	80004d8 <__aeabi_dmul>
 800c834:	2200      	movs	r2, #0
 800c836:	2300      	movs	r3, #0
 800c838:	4606      	mov	r6, r0
 800c83a:	460f      	mov	r7, r1
 800c83c:	f7f4 f8b4 	bl	80009a8 <__aeabi_dcmpeq>
 800c840:	2800      	cmp	r0, #0
 800c842:	d09e      	beq.n	800c782 <_dtoa_r+0x62a>
 800c844:	e7cf      	b.n	800c7e6 <_dtoa_r+0x68e>
 800c846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c848:	2a00      	cmp	r2, #0
 800c84a:	f000 8088 	beq.w	800c95e <_dtoa_r+0x806>
 800c84e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c850:	2a01      	cmp	r2, #1
 800c852:	dc6d      	bgt.n	800c930 <_dtoa_r+0x7d8>
 800c854:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c856:	2a00      	cmp	r2, #0
 800c858:	d066      	beq.n	800c928 <_dtoa_r+0x7d0>
 800c85a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c85e:	464d      	mov	r5, r9
 800c860:	9e08      	ldr	r6, [sp, #32]
 800c862:	9a07      	ldr	r2, [sp, #28]
 800c864:	2101      	movs	r1, #1
 800c866:	441a      	add	r2, r3
 800c868:	4620      	mov	r0, r4
 800c86a:	4499      	add	r9, r3
 800c86c:	9207      	str	r2, [sp, #28]
 800c86e:	f000 fb2a 	bl	800cec6 <__i2b>
 800c872:	4607      	mov	r7, r0
 800c874:	2d00      	cmp	r5, #0
 800c876:	dd0b      	ble.n	800c890 <_dtoa_r+0x738>
 800c878:	9b07      	ldr	r3, [sp, #28]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	dd08      	ble.n	800c890 <_dtoa_r+0x738>
 800c87e:	42ab      	cmp	r3, r5
 800c880:	bfa8      	it	ge
 800c882:	462b      	movge	r3, r5
 800c884:	9a07      	ldr	r2, [sp, #28]
 800c886:	eba9 0903 	sub.w	r9, r9, r3
 800c88a:	1aed      	subs	r5, r5, r3
 800c88c:	1ad3      	subs	r3, r2, r3
 800c88e:	9307      	str	r3, [sp, #28]
 800c890:	9b08      	ldr	r3, [sp, #32]
 800c892:	b1eb      	cbz	r3, 800c8d0 <_dtoa_r+0x778>
 800c894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c896:	2b00      	cmp	r3, #0
 800c898:	d065      	beq.n	800c966 <_dtoa_r+0x80e>
 800c89a:	b18e      	cbz	r6, 800c8c0 <_dtoa_r+0x768>
 800c89c:	4639      	mov	r1, r7
 800c89e:	4632      	mov	r2, r6
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	f000 fbaf 	bl	800d004 <__pow5mult>
 800c8a6:	465a      	mov	r2, fp
 800c8a8:	4601      	mov	r1, r0
 800c8aa:	4607      	mov	r7, r0
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f000 fb13 	bl	800ced8 <__multiply>
 800c8b2:	4659      	mov	r1, fp
 800c8b4:	900a      	str	r0, [sp, #40]	; 0x28
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f000 fa65 	bl	800cd86 <_Bfree>
 800c8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8be:	469b      	mov	fp, r3
 800c8c0:	9b08      	ldr	r3, [sp, #32]
 800c8c2:	1b9a      	subs	r2, r3, r6
 800c8c4:	d004      	beq.n	800c8d0 <_dtoa_r+0x778>
 800c8c6:	4659      	mov	r1, fp
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	f000 fb9b 	bl	800d004 <__pow5mult>
 800c8ce:	4683      	mov	fp, r0
 800c8d0:	2101      	movs	r1, #1
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f000 faf7 	bl	800cec6 <__i2b>
 800c8d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8da:	4606      	mov	r6, r0
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f000 81c6 	beq.w	800cc6e <_dtoa_r+0xb16>
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	4601      	mov	r1, r0
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	f000 fb8c 	bl	800d004 <__pow5mult>
 800c8ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c8ee:	4606      	mov	r6, r0
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	dc3e      	bgt.n	800c972 <_dtoa_r+0x81a>
 800c8f4:	9b02      	ldr	r3, [sp, #8]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d137      	bne.n	800c96a <_dtoa_r+0x812>
 800c8fa:	9b03      	ldr	r3, [sp, #12]
 800c8fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c900:	2b00      	cmp	r3, #0
 800c902:	d134      	bne.n	800c96e <_dtoa_r+0x816>
 800c904:	9b03      	ldr	r3, [sp, #12]
 800c906:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c90a:	0d1b      	lsrs	r3, r3, #20
 800c90c:	051b      	lsls	r3, r3, #20
 800c90e:	b12b      	cbz	r3, 800c91c <_dtoa_r+0x7c4>
 800c910:	9b07      	ldr	r3, [sp, #28]
 800c912:	f109 0901 	add.w	r9, r9, #1
 800c916:	3301      	adds	r3, #1
 800c918:	9307      	str	r3, [sp, #28]
 800c91a:	2301      	movs	r3, #1
 800c91c:	9308      	str	r3, [sp, #32]
 800c91e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c920:	2b00      	cmp	r3, #0
 800c922:	d128      	bne.n	800c976 <_dtoa_r+0x81e>
 800c924:	2001      	movs	r0, #1
 800c926:	e02e      	b.n	800c986 <_dtoa_r+0x82e>
 800c928:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c92a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c92e:	e796      	b.n	800c85e <_dtoa_r+0x706>
 800c930:	9b08      	ldr	r3, [sp, #32]
 800c932:	f108 36ff 	add.w	r6, r8, #4294967295
 800c936:	42b3      	cmp	r3, r6
 800c938:	bfb7      	itett	lt
 800c93a:	9b08      	ldrlt	r3, [sp, #32]
 800c93c:	1b9e      	subge	r6, r3, r6
 800c93e:	1af2      	sublt	r2, r6, r3
 800c940:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800c942:	bfbf      	itttt	lt
 800c944:	9608      	strlt	r6, [sp, #32]
 800c946:	189b      	addlt	r3, r3, r2
 800c948:	930c      	strlt	r3, [sp, #48]	; 0x30
 800c94a:	2600      	movlt	r6, #0
 800c94c:	f1b8 0f00 	cmp.w	r8, #0
 800c950:	bfb9      	ittee	lt
 800c952:	eba9 0508 	sublt.w	r5, r9, r8
 800c956:	2300      	movlt	r3, #0
 800c958:	464d      	movge	r5, r9
 800c95a:	4643      	movge	r3, r8
 800c95c:	e781      	b.n	800c862 <_dtoa_r+0x70a>
 800c95e:	9e08      	ldr	r6, [sp, #32]
 800c960:	464d      	mov	r5, r9
 800c962:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c964:	e786      	b.n	800c874 <_dtoa_r+0x71c>
 800c966:	9a08      	ldr	r2, [sp, #32]
 800c968:	e7ad      	b.n	800c8c6 <_dtoa_r+0x76e>
 800c96a:	2300      	movs	r3, #0
 800c96c:	e7d6      	b.n	800c91c <_dtoa_r+0x7c4>
 800c96e:	9b02      	ldr	r3, [sp, #8]
 800c970:	e7d4      	b.n	800c91c <_dtoa_r+0x7c4>
 800c972:	2300      	movs	r3, #0
 800c974:	9308      	str	r3, [sp, #32]
 800c976:	6933      	ldr	r3, [r6, #16]
 800c978:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c97c:	6918      	ldr	r0, [r3, #16]
 800c97e:	f000 fa54 	bl	800ce2a <__hi0bits>
 800c982:	f1c0 0020 	rsb	r0, r0, #32
 800c986:	9b07      	ldr	r3, [sp, #28]
 800c988:	4418      	add	r0, r3
 800c98a:	f010 001f 	ands.w	r0, r0, #31
 800c98e:	d047      	beq.n	800ca20 <_dtoa_r+0x8c8>
 800c990:	f1c0 0320 	rsb	r3, r0, #32
 800c994:	2b04      	cmp	r3, #4
 800c996:	dd3b      	ble.n	800ca10 <_dtoa_r+0x8b8>
 800c998:	9b07      	ldr	r3, [sp, #28]
 800c99a:	f1c0 001c 	rsb	r0, r0, #28
 800c99e:	4481      	add	r9, r0
 800c9a0:	4405      	add	r5, r0
 800c9a2:	4403      	add	r3, r0
 800c9a4:	9307      	str	r3, [sp, #28]
 800c9a6:	f1b9 0f00 	cmp.w	r9, #0
 800c9aa:	dd05      	ble.n	800c9b8 <_dtoa_r+0x860>
 800c9ac:	4659      	mov	r1, fp
 800c9ae:	464a      	mov	r2, r9
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f000 fb75 	bl	800d0a0 <__lshift>
 800c9b6:	4683      	mov	fp, r0
 800c9b8:	9b07      	ldr	r3, [sp, #28]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	dd05      	ble.n	800c9ca <_dtoa_r+0x872>
 800c9be:	4631      	mov	r1, r6
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	f000 fb6c 	bl	800d0a0 <__lshift>
 800c9c8:	4606      	mov	r6, r0
 800c9ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9cc:	b353      	cbz	r3, 800ca24 <_dtoa_r+0x8cc>
 800c9ce:	4631      	mov	r1, r6
 800c9d0:	4658      	mov	r0, fp
 800c9d2:	f000 fbb9 	bl	800d148 <__mcmp>
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	da24      	bge.n	800ca24 <_dtoa_r+0x8cc>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	4659      	mov	r1, fp
 800c9de:	220a      	movs	r2, #10
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f000 f9e7 	bl	800cdb4 <__multadd>
 800c9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c9ec:	4683      	mov	fp, r0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	f000 8144 	beq.w	800cc7c <_dtoa_r+0xb24>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	4639      	mov	r1, r7
 800c9f8:	220a      	movs	r2, #10
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f000 f9da 	bl	800cdb4 <__multadd>
 800ca00:	9b04      	ldr	r3, [sp, #16]
 800ca02:	4607      	mov	r7, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	dc4d      	bgt.n	800caa4 <_dtoa_r+0x94c>
 800ca08:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ca0a:	2b02      	cmp	r3, #2
 800ca0c:	dd4a      	ble.n	800caa4 <_dtoa_r+0x94c>
 800ca0e:	e011      	b.n	800ca34 <_dtoa_r+0x8dc>
 800ca10:	d0c9      	beq.n	800c9a6 <_dtoa_r+0x84e>
 800ca12:	9a07      	ldr	r2, [sp, #28]
 800ca14:	331c      	adds	r3, #28
 800ca16:	441a      	add	r2, r3
 800ca18:	4499      	add	r9, r3
 800ca1a:	441d      	add	r5, r3
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	e7c1      	b.n	800c9a4 <_dtoa_r+0x84c>
 800ca20:	4603      	mov	r3, r0
 800ca22:	e7f6      	b.n	800ca12 <_dtoa_r+0x8ba>
 800ca24:	f1b8 0f00 	cmp.w	r8, #0
 800ca28:	dc36      	bgt.n	800ca98 <_dtoa_r+0x940>
 800ca2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	dd33      	ble.n	800ca98 <_dtoa_r+0x940>
 800ca30:	f8cd 8010 	str.w	r8, [sp, #16]
 800ca34:	9b04      	ldr	r3, [sp, #16]
 800ca36:	b963      	cbnz	r3, 800ca52 <_dtoa_r+0x8fa>
 800ca38:	4631      	mov	r1, r6
 800ca3a:	2205      	movs	r2, #5
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f000 f9b9 	bl	800cdb4 <__multadd>
 800ca42:	4601      	mov	r1, r0
 800ca44:	4606      	mov	r6, r0
 800ca46:	4658      	mov	r0, fp
 800ca48:	f000 fb7e 	bl	800d148 <__mcmp>
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	f73f add3 	bgt.w	800c5f8 <_dtoa_r+0x4a0>
 800ca52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ca54:	9d06      	ldr	r5, [sp, #24]
 800ca56:	ea6f 0a03 	mvn.w	sl, r3
 800ca5a:	f04f 0900 	mov.w	r9, #0
 800ca5e:	4631      	mov	r1, r6
 800ca60:	4620      	mov	r0, r4
 800ca62:	f000 f990 	bl	800cd86 <_Bfree>
 800ca66:	2f00      	cmp	r7, #0
 800ca68:	f43f aebd 	beq.w	800c7e6 <_dtoa_r+0x68e>
 800ca6c:	f1b9 0f00 	cmp.w	r9, #0
 800ca70:	d005      	beq.n	800ca7e <_dtoa_r+0x926>
 800ca72:	45b9      	cmp	r9, r7
 800ca74:	d003      	beq.n	800ca7e <_dtoa_r+0x926>
 800ca76:	4649      	mov	r1, r9
 800ca78:	4620      	mov	r0, r4
 800ca7a:	f000 f984 	bl	800cd86 <_Bfree>
 800ca7e:	4639      	mov	r1, r7
 800ca80:	4620      	mov	r0, r4
 800ca82:	f000 f980 	bl	800cd86 <_Bfree>
 800ca86:	e6ae      	b.n	800c7e6 <_dtoa_r+0x68e>
 800ca88:	2600      	movs	r6, #0
 800ca8a:	4637      	mov	r7, r6
 800ca8c:	e7e1      	b.n	800ca52 <_dtoa_r+0x8fa>
 800ca8e:	46ba      	mov	sl, r7
 800ca90:	4637      	mov	r7, r6
 800ca92:	e5b1      	b.n	800c5f8 <_dtoa_r+0x4a0>
 800ca94:	40240000 	.word	0x40240000
 800ca98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca9a:	f8cd 8010 	str.w	r8, [sp, #16]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f000 80f3 	beq.w	800cc8a <_dtoa_r+0xb32>
 800caa4:	2d00      	cmp	r5, #0
 800caa6:	dd05      	ble.n	800cab4 <_dtoa_r+0x95c>
 800caa8:	4639      	mov	r1, r7
 800caaa:	462a      	mov	r2, r5
 800caac:	4620      	mov	r0, r4
 800caae:	f000 faf7 	bl	800d0a0 <__lshift>
 800cab2:	4607      	mov	r7, r0
 800cab4:	9b08      	ldr	r3, [sp, #32]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d04c      	beq.n	800cb54 <_dtoa_r+0x9fc>
 800caba:	6879      	ldr	r1, [r7, #4]
 800cabc:	4620      	mov	r0, r4
 800cabe:	f000 f92e 	bl	800cd1e <_Balloc>
 800cac2:	4605      	mov	r5, r0
 800cac4:	693a      	ldr	r2, [r7, #16]
 800cac6:	f107 010c 	add.w	r1, r7, #12
 800caca:	3202      	adds	r2, #2
 800cacc:	0092      	lsls	r2, r2, #2
 800cace:	300c      	adds	r0, #12
 800cad0:	f000 f91a 	bl	800cd08 <memcpy>
 800cad4:	2201      	movs	r2, #1
 800cad6:	4629      	mov	r1, r5
 800cad8:	4620      	mov	r0, r4
 800cada:	f000 fae1 	bl	800d0a0 <__lshift>
 800cade:	46b9      	mov	r9, r7
 800cae0:	4607      	mov	r7, r0
 800cae2:	9b06      	ldr	r3, [sp, #24]
 800cae4:	9307      	str	r3, [sp, #28]
 800cae6:	9b02      	ldr	r3, [sp, #8]
 800cae8:	f003 0301 	and.w	r3, r3, #1
 800caec:	9308      	str	r3, [sp, #32]
 800caee:	4631      	mov	r1, r6
 800caf0:	4658      	mov	r0, fp
 800caf2:	f7ff faa0 	bl	800c036 <quorem>
 800caf6:	4649      	mov	r1, r9
 800caf8:	4605      	mov	r5, r0
 800cafa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cafe:	4658      	mov	r0, fp
 800cb00:	f000 fb22 	bl	800d148 <__mcmp>
 800cb04:	463a      	mov	r2, r7
 800cb06:	9002      	str	r0, [sp, #8]
 800cb08:	4631      	mov	r1, r6
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f000 fb36 	bl	800d17c <__mdiff>
 800cb10:	68c3      	ldr	r3, [r0, #12]
 800cb12:	4602      	mov	r2, r0
 800cb14:	bb03      	cbnz	r3, 800cb58 <_dtoa_r+0xa00>
 800cb16:	4601      	mov	r1, r0
 800cb18:	9009      	str	r0, [sp, #36]	; 0x24
 800cb1a:	4658      	mov	r0, fp
 800cb1c:	f000 fb14 	bl	800d148 <__mcmp>
 800cb20:	4603      	mov	r3, r0
 800cb22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb24:	4611      	mov	r1, r2
 800cb26:	4620      	mov	r0, r4
 800cb28:	9309      	str	r3, [sp, #36]	; 0x24
 800cb2a:	f000 f92c 	bl	800cd86 <_Bfree>
 800cb2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb30:	b9a3      	cbnz	r3, 800cb5c <_dtoa_r+0xa04>
 800cb32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cb34:	b992      	cbnz	r2, 800cb5c <_dtoa_r+0xa04>
 800cb36:	9a08      	ldr	r2, [sp, #32]
 800cb38:	b982      	cbnz	r2, 800cb5c <_dtoa_r+0xa04>
 800cb3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cb3e:	d029      	beq.n	800cb94 <_dtoa_r+0xa3c>
 800cb40:	9b02      	ldr	r3, [sp, #8]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	dd01      	ble.n	800cb4a <_dtoa_r+0x9f2>
 800cb46:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800cb4a:	9b07      	ldr	r3, [sp, #28]
 800cb4c:	1c5d      	adds	r5, r3, #1
 800cb4e:	f883 8000 	strb.w	r8, [r3]
 800cb52:	e784      	b.n	800ca5e <_dtoa_r+0x906>
 800cb54:	4638      	mov	r0, r7
 800cb56:	e7c2      	b.n	800cade <_dtoa_r+0x986>
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e7e3      	b.n	800cb24 <_dtoa_r+0x9cc>
 800cb5c:	9a02      	ldr	r2, [sp, #8]
 800cb5e:	2a00      	cmp	r2, #0
 800cb60:	db04      	blt.n	800cb6c <_dtoa_r+0xa14>
 800cb62:	d123      	bne.n	800cbac <_dtoa_r+0xa54>
 800cb64:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cb66:	bb0a      	cbnz	r2, 800cbac <_dtoa_r+0xa54>
 800cb68:	9a08      	ldr	r2, [sp, #32]
 800cb6a:	b9fa      	cbnz	r2, 800cbac <_dtoa_r+0xa54>
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	ddec      	ble.n	800cb4a <_dtoa_r+0x9f2>
 800cb70:	4659      	mov	r1, fp
 800cb72:	2201      	movs	r2, #1
 800cb74:	4620      	mov	r0, r4
 800cb76:	f000 fa93 	bl	800d0a0 <__lshift>
 800cb7a:	4631      	mov	r1, r6
 800cb7c:	4683      	mov	fp, r0
 800cb7e:	f000 fae3 	bl	800d148 <__mcmp>
 800cb82:	2800      	cmp	r0, #0
 800cb84:	dc03      	bgt.n	800cb8e <_dtoa_r+0xa36>
 800cb86:	d1e0      	bne.n	800cb4a <_dtoa_r+0x9f2>
 800cb88:	f018 0f01 	tst.w	r8, #1
 800cb8c:	d0dd      	beq.n	800cb4a <_dtoa_r+0x9f2>
 800cb8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cb92:	d1d8      	bne.n	800cb46 <_dtoa_r+0x9ee>
 800cb94:	9b07      	ldr	r3, [sp, #28]
 800cb96:	9a07      	ldr	r2, [sp, #28]
 800cb98:	1c5d      	adds	r5, r3, #1
 800cb9a:	2339      	movs	r3, #57	; 0x39
 800cb9c:	7013      	strb	r3, [r2, #0]
 800cb9e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cba2:	1e6a      	subs	r2, r5, #1
 800cba4:	2b39      	cmp	r3, #57	; 0x39
 800cba6:	d04d      	beq.n	800cc44 <_dtoa_r+0xaec>
 800cba8:	3301      	adds	r3, #1
 800cbaa:	e052      	b.n	800cc52 <_dtoa_r+0xafa>
 800cbac:	9a07      	ldr	r2, [sp, #28]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	f102 0501 	add.w	r5, r2, #1
 800cbb4:	dd06      	ble.n	800cbc4 <_dtoa_r+0xa6c>
 800cbb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cbba:	d0eb      	beq.n	800cb94 <_dtoa_r+0xa3c>
 800cbbc:	f108 0801 	add.w	r8, r8, #1
 800cbc0:	9b07      	ldr	r3, [sp, #28]
 800cbc2:	e7c4      	b.n	800cb4e <_dtoa_r+0x9f6>
 800cbc4:	9b06      	ldr	r3, [sp, #24]
 800cbc6:	9a04      	ldr	r2, [sp, #16]
 800cbc8:	1aeb      	subs	r3, r5, r3
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	f805 8c01 	strb.w	r8, [r5, #-1]
 800cbd0:	d021      	beq.n	800cc16 <_dtoa_r+0xabe>
 800cbd2:	4659      	mov	r1, fp
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	220a      	movs	r2, #10
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f000 f8eb 	bl	800cdb4 <__multadd>
 800cbde:	45b9      	cmp	r9, r7
 800cbe0:	4683      	mov	fp, r0
 800cbe2:	f04f 0300 	mov.w	r3, #0
 800cbe6:	f04f 020a 	mov.w	r2, #10
 800cbea:	4649      	mov	r1, r9
 800cbec:	4620      	mov	r0, r4
 800cbee:	d105      	bne.n	800cbfc <_dtoa_r+0xaa4>
 800cbf0:	f000 f8e0 	bl	800cdb4 <__multadd>
 800cbf4:	4681      	mov	r9, r0
 800cbf6:	4607      	mov	r7, r0
 800cbf8:	9507      	str	r5, [sp, #28]
 800cbfa:	e778      	b.n	800caee <_dtoa_r+0x996>
 800cbfc:	f000 f8da 	bl	800cdb4 <__multadd>
 800cc00:	4639      	mov	r1, r7
 800cc02:	4681      	mov	r9, r0
 800cc04:	2300      	movs	r3, #0
 800cc06:	220a      	movs	r2, #10
 800cc08:	4620      	mov	r0, r4
 800cc0a:	f000 f8d3 	bl	800cdb4 <__multadd>
 800cc0e:	4607      	mov	r7, r0
 800cc10:	e7f2      	b.n	800cbf8 <_dtoa_r+0xaa0>
 800cc12:	f04f 0900 	mov.w	r9, #0
 800cc16:	4659      	mov	r1, fp
 800cc18:	2201      	movs	r2, #1
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	f000 fa40 	bl	800d0a0 <__lshift>
 800cc20:	4631      	mov	r1, r6
 800cc22:	4683      	mov	fp, r0
 800cc24:	f000 fa90 	bl	800d148 <__mcmp>
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	dcb8      	bgt.n	800cb9e <_dtoa_r+0xa46>
 800cc2c:	d102      	bne.n	800cc34 <_dtoa_r+0xadc>
 800cc2e:	f018 0f01 	tst.w	r8, #1
 800cc32:	d1b4      	bne.n	800cb9e <_dtoa_r+0xa46>
 800cc34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc38:	1e6a      	subs	r2, r5, #1
 800cc3a:	2b30      	cmp	r3, #48	; 0x30
 800cc3c:	f47f af0f 	bne.w	800ca5e <_dtoa_r+0x906>
 800cc40:	4615      	mov	r5, r2
 800cc42:	e7f7      	b.n	800cc34 <_dtoa_r+0xadc>
 800cc44:	9b06      	ldr	r3, [sp, #24]
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d105      	bne.n	800cc56 <_dtoa_r+0xafe>
 800cc4a:	2331      	movs	r3, #49	; 0x31
 800cc4c:	9a06      	ldr	r2, [sp, #24]
 800cc4e:	f10a 0a01 	add.w	sl, sl, #1
 800cc52:	7013      	strb	r3, [r2, #0]
 800cc54:	e703      	b.n	800ca5e <_dtoa_r+0x906>
 800cc56:	4615      	mov	r5, r2
 800cc58:	e7a1      	b.n	800cb9e <_dtoa_r+0xa46>
 800cc5a:	4b17      	ldr	r3, [pc, #92]	; (800ccb8 <_dtoa_r+0xb60>)
 800cc5c:	f7ff bae1 	b.w	800c222 <_dtoa_r+0xca>
 800cc60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f47f aabb 	bne.w	800c1de <_dtoa_r+0x86>
 800cc68:	4b14      	ldr	r3, [pc, #80]	; (800ccbc <_dtoa_r+0xb64>)
 800cc6a:	f7ff bada 	b.w	800c222 <_dtoa_r+0xca>
 800cc6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	f77f ae3f 	ble.w	800c8f4 <_dtoa_r+0x79c>
 800cc76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc78:	9308      	str	r3, [sp, #32]
 800cc7a:	e653      	b.n	800c924 <_dtoa_r+0x7cc>
 800cc7c:	9b04      	ldr	r3, [sp, #16]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	dc03      	bgt.n	800cc8a <_dtoa_r+0xb32>
 800cc82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	f73f aed5 	bgt.w	800ca34 <_dtoa_r+0x8dc>
 800cc8a:	9d06      	ldr	r5, [sp, #24]
 800cc8c:	4631      	mov	r1, r6
 800cc8e:	4658      	mov	r0, fp
 800cc90:	f7ff f9d1 	bl	800c036 <quorem>
 800cc94:	9b06      	ldr	r3, [sp, #24]
 800cc96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cc9a:	f805 8b01 	strb.w	r8, [r5], #1
 800cc9e:	9a04      	ldr	r2, [sp, #16]
 800cca0:	1aeb      	subs	r3, r5, r3
 800cca2:	429a      	cmp	r2, r3
 800cca4:	ddb5      	ble.n	800cc12 <_dtoa_r+0xaba>
 800cca6:	4659      	mov	r1, fp
 800cca8:	2300      	movs	r3, #0
 800ccaa:	220a      	movs	r2, #10
 800ccac:	4620      	mov	r0, r4
 800ccae:	f000 f881 	bl	800cdb4 <__multadd>
 800ccb2:	4683      	mov	fp, r0
 800ccb4:	e7ea      	b.n	800cc8c <_dtoa_r+0xb34>
 800ccb6:	bf00      	nop
 800ccb8:	0800e6da 	.word	0x0800e6da
 800ccbc:	0800e824 	.word	0x0800e824

0800ccc0 <_localeconv_r>:
 800ccc0:	4b04      	ldr	r3, [pc, #16]	; (800ccd4 <_localeconv_r+0x14>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	6a18      	ldr	r0, [r3, #32]
 800ccc6:	4b04      	ldr	r3, [pc, #16]	; (800ccd8 <_localeconv_r+0x18>)
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	bf08      	it	eq
 800cccc:	4618      	moveq	r0, r3
 800ccce:	30f0      	adds	r0, #240	; 0xf0
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop
 800ccd4:	20000090 	.word	0x20000090
 800ccd8:	200000f4 	.word	0x200000f4

0800ccdc <malloc>:
 800ccdc:	4b02      	ldr	r3, [pc, #8]	; (800cce8 <malloc+0xc>)
 800ccde:	4601      	mov	r1, r0
 800cce0:	6818      	ldr	r0, [r3, #0]
 800cce2:	f000 bb53 	b.w	800d38c <_malloc_r>
 800cce6:	bf00      	nop
 800cce8:	20000090 	.word	0x20000090

0800ccec <memchr>:
 800ccec:	b510      	push	{r4, lr}
 800ccee:	b2c9      	uxtb	r1, r1
 800ccf0:	4402      	add	r2, r0
 800ccf2:	4290      	cmp	r0, r2
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	d101      	bne.n	800ccfc <memchr+0x10>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	e003      	b.n	800cd04 <memchr+0x18>
 800ccfc:	781c      	ldrb	r4, [r3, #0]
 800ccfe:	3001      	adds	r0, #1
 800cd00:	428c      	cmp	r4, r1
 800cd02:	d1f6      	bne.n	800ccf2 <memchr+0x6>
 800cd04:	4618      	mov	r0, r3
 800cd06:	bd10      	pop	{r4, pc}

0800cd08 <memcpy>:
 800cd08:	b510      	push	{r4, lr}
 800cd0a:	1e43      	subs	r3, r0, #1
 800cd0c:	440a      	add	r2, r1
 800cd0e:	4291      	cmp	r1, r2
 800cd10:	d100      	bne.n	800cd14 <memcpy+0xc>
 800cd12:	bd10      	pop	{r4, pc}
 800cd14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd1c:	e7f7      	b.n	800cd0e <memcpy+0x6>

0800cd1e <_Balloc>:
 800cd1e:	b570      	push	{r4, r5, r6, lr}
 800cd20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cd22:	4604      	mov	r4, r0
 800cd24:	460e      	mov	r6, r1
 800cd26:	b93d      	cbnz	r5, 800cd38 <_Balloc+0x1a>
 800cd28:	2010      	movs	r0, #16
 800cd2a:	f7ff ffd7 	bl	800ccdc <malloc>
 800cd2e:	6260      	str	r0, [r4, #36]	; 0x24
 800cd30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cd34:	6005      	str	r5, [r0, #0]
 800cd36:	60c5      	str	r5, [r0, #12]
 800cd38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cd3a:	68eb      	ldr	r3, [r5, #12]
 800cd3c:	b183      	cbz	r3, 800cd60 <_Balloc+0x42>
 800cd3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd40:	68db      	ldr	r3, [r3, #12]
 800cd42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cd46:	b9b8      	cbnz	r0, 800cd78 <_Balloc+0x5a>
 800cd48:	2101      	movs	r1, #1
 800cd4a:	fa01 f506 	lsl.w	r5, r1, r6
 800cd4e:	1d6a      	adds	r2, r5, #5
 800cd50:	0092      	lsls	r2, r2, #2
 800cd52:	4620      	mov	r0, r4
 800cd54:	f000 fabf 	bl	800d2d6 <_calloc_r>
 800cd58:	b160      	cbz	r0, 800cd74 <_Balloc+0x56>
 800cd5a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800cd5e:	e00e      	b.n	800cd7e <_Balloc+0x60>
 800cd60:	2221      	movs	r2, #33	; 0x21
 800cd62:	2104      	movs	r1, #4
 800cd64:	4620      	mov	r0, r4
 800cd66:	f000 fab6 	bl	800d2d6 <_calloc_r>
 800cd6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd6c:	60e8      	str	r0, [r5, #12]
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1e4      	bne.n	800cd3e <_Balloc+0x20>
 800cd74:	2000      	movs	r0, #0
 800cd76:	bd70      	pop	{r4, r5, r6, pc}
 800cd78:	6802      	ldr	r2, [r0, #0]
 800cd7a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cd7e:	2300      	movs	r3, #0
 800cd80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd84:	e7f7      	b.n	800cd76 <_Balloc+0x58>

0800cd86 <_Bfree>:
 800cd86:	b570      	push	{r4, r5, r6, lr}
 800cd88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	460d      	mov	r5, r1
 800cd8e:	b93c      	cbnz	r4, 800cda0 <_Bfree+0x1a>
 800cd90:	2010      	movs	r0, #16
 800cd92:	f7ff ffa3 	bl	800ccdc <malloc>
 800cd96:	6270      	str	r0, [r6, #36]	; 0x24
 800cd98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd9c:	6004      	str	r4, [r0, #0]
 800cd9e:	60c4      	str	r4, [r0, #12]
 800cda0:	b13d      	cbz	r5, 800cdb2 <_Bfree+0x2c>
 800cda2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cda4:	686a      	ldr	r2, [r5, #4]
 800cda6:	68db      	ldr	r3, [r3, #12]
 800cda8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdac:	6029      	str	r1, [r5, #0]
 800cdae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cdb2:	bd70      	pop	{r4, r5, r6, pc}

0800cdb4 <__multadd>:
 800cdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb8:	461f      	mov	r7, r3
 800cdba:	4606      	mov	r6, r0
 800cdbc:	460c      	mov	r4, r1
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	690d      	ldr	r5, [r1, #16]
 800cdc2:	f101 0c14 	add.w	ip, r1, #20
 800cdc6:	f8dc 0000 	ldr.w	r0, [ip]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	b281      	uxth	r1, r0
 800cdce:	fb02 7101 	mla	r1, r2, r1, r7
 800cdd2:	0c00      	lsrs	r0, r0, #16
 800cdd4:	0c0f      	lsrs	r7, r1, #16
 800cdd6:	fb02 7000 	mla	r0, r2, r0, r7
 800cdda:	b289      	uxth	r1, r1
 800cddc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cde0:	429d      	cmp	r5, r3
 800cde2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cde6:	f84c 1b04 	str.w	r1, [ip], #4
 800cdea:	dcec      	bgt.n	800cdc6 <__multadd+0x12>
 800cdec:	b1d7      	cbz	r7, 800ce24 <__multadd+0x70>
 800cdee:	68a3      	ldr	r3, [r4, #8]
 800cdf0:	42ab      	cmp	r3, r5
 800cdf2:	dc12      	bgt.n	800ce1a <__multadd+0x66>
 800cdf4:	6861      	ldr	r1, [r4, #4]
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	3101      	adds	r1, #1
 800cdfa:	f7ff ff90 	bl	800cd1e <_Balloc>
 800cdfe:	4680      	mov	r8, r0
 800ce00:	6922      	ldr	r2, [r4, #16]
 800ce02:	f104 010c 	add.w	r1, r4, #12
 800ce06:	3202      	adds	r2, #2
 800ce08:	0092      	lsls	r2, r2, #2
 800ce0a:	300c      	adds	r0, #12
 800ce0c:	f7ff ff7c 	bl	800cd08 <memcpy>
 800ce10:	4621      	mov	r1, r4
 800ce12:	4630      	mov	r0, r6
 800ce14:	f7ff ffb7 	bl	800cd86 <_Bfree>
 800ce18:	4644      	mov	r4, r8
 800ce1a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce1e:	3501      	adds	r5, #1
 800ce20:	615f      	str	r7, [r3, #20]
 800ce22:	6125      	str	r5, [r4, #16]
 800ce24:	4620      	mov	r0, r4
 800ce26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ce2a <__hi0bits>:
 800ce2a:	0c02      	lsrs	r2, r0, #16
 800ce2c:	0412      	lsls	r2, r2, #16
 800ce2e:	4603      	mov	r3, r0
 800ce30:	b9b2      	cbnz	r2, 800ce60 <__hi0bits+0x36>
 800ce32:	0403      	lsls	r3, r0, #16
 800ce34:	2010      	movs	r0, #16
 800ce36:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ce3a:	bf04      	itt	eq
 800ce3c:	021b      	lsleq	r3, r3, #8
 800ce3e:	3008      	addeq	r0, #8
 800ce40:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ce44:	bf04      	itt	eq
 800ce46:	011b      	lsleq	r3, r3, #4
 800ce48:	3004      	addeq	r0, #4
 800ce4a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ce4e:	bf04      	itt	eq
 800ce50:	009b      	lsleq	r3, r3, #2
 800ce52:	3002      	addeq	r0, #2
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	db06      	blt.n	800ce66 <__hi0bits+0x3c>
 800ce58:	005b      	lsls	r3, r3, #1
 800ce5a:	d503      	bpl.n	800ce64 <__hi0bits+0x3a>
 800ce5c:	3001      	adds	r0, #1
 800ce5e:	4770      	bx	lr
 800ce60:	2000      	movs	r0, #0
 800ce62:	e7e8      	b.n	800ce36 <__hi0bits+0xc>
 800ce64:	2020      	movs	r0, #32
 800ce66:	4770      	bx	lr

0800ce68 <__lo0bits>:
 800ce68:	6803      	ldr	r3, [r0, #0]
 800ce6a:	4601      	mov	r1, r0
 800ce6c:	f013 0207 	ands.w	r2, r3, #7
 800ce70:	d00b      	beq.n	800ce8a <__lo0bits+0x22>
 800ce72:	07da      	lsls	r2, r3, #31
 800ce74:	d423      	bmi.n	800cebe <__lo0bits+0x56>
 800ce76:	0798      	lsls	r0, r3, #30
 800ce78:	bf49      	itett	mi
 800ce7a:	085b      	lsrmi	r3, r3, #1
 800ce7c:	089b      	lsrpl	r3, r3, #2
 800ce7e:	2001      	movmi	r0, #1
 800ce80:	600b      	strmi	r3, [r1, #0]
 800ce82:	bf5c      	itt	pl
 800ce84:	600b      	strpl	r3, [r1, #0]
 800ce86:	2002      	movpl	r0, #2
 800ce88:	4770      	bx	lr
 800ce8a:	b298      	uxth	r0, r3
 800ce8c:	b9a8      	cbnz	r0, 800ceba <__lo0bits+0x52>
 800ce8e:	2010      	movs	r0, #16
 800ce90:	0c1b      	lsrs	r3, r3, #16
 800ce92:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ce96:	bf04      	itt	eq
 800ce98:	0a1b      	lsreq	r3, r3, #8
 800ce9a:	3008      	addeq	r0, #8
 800ce9c:	071a      	lsls	r2, r3, #28
 800ce9e:	bf04      	itt	eq
 800cea0:	091b      	lsreq	r3, r3, #4
 800cea2:	3004      	addeq	r0, #4
 800cea4:	079a      	lsls	r2, r3, #30
 800cea6:	bf04      	itt	eq
 800cea8:	089b      	lsreq	r3, r3, #2
 800ceaa:	3002      	addeq	r0, #2
 800ceac:	07da      	lsls	r2, r3, #31
 800ceae:	d402      	bmi.n	800ceb6 <__lo0bits+0x4e>
 800ceb0:	085b      	lsrs	r3, r3, #1
 800ceb2:	d006      	beq.n	800cec2 <__lo0bits+0x5a>
 800ceb4:	3001      	adds	r0, #1
 800ceb6:	600b      	str	r3, [r1, #0]
 800ceb8:	4770      	bx	lr
 800ceba:	4610      	mov	r0, r2
 800cebc:	e7e9      	b.n	800ce92 <__lo0bits+0x2a>
 800cebe:	2000      	movs	r0, #0
 800cec0:	4770      	bx	lr
 800cec2:	2020      	movs	r0, #32
 800cec4:	4770      	bx	lr

0800cec6 <__i2b>:
 800cec6:	b510      	push	{r4, lr}
 800cec8:	460c      	mov	r4, r1
 800ceca:	2101      	movs	r1, #1
 800cecc:	f7ff ff27 	bl	800cd1e <_Balloc>
 800ced0:	2201      	movs	r2, #1
 800ced2:	6144      	str	r4, [r0, #20]
 800ced4:	6102      	str	r2, [r0, #16]
 800ced6:	bd10      	pop	{r4, pc}

0800ced8 <__multiply>:
 800ced8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cedc:	4614      	mov	r4, r2
 800cede:	690a      	ldr	r2, [r1, #16]
 800cee0:	6923      	ldr	r3, [r4, #16]
 800cee2:	4688      	mov	r8, r1
 800cee4:	429a      	cmp	r2, r3
 800cee6:	bfbe      	ittt	lt
 800cee8:	460b      	movlt	r3, r1
 800ceea:	46a0      	movlt	r8, r4
 800ceec:	461c      	movlt	r4, r3
 800ceee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cef2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cef6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cefa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cefe:	eb07 0609 	add.w	r6, r7, r9
 800cf02:	42b3      	cmp	r3, r6
 800cf04:	bfb8      	it	lt
 800cf06:	3101      	addlt	r1, #1
 800cf08:	f7ff ff09 	bl	800cd1e <_Balloc>
 800cf0c:	f100 0514 	add.w	r5, r0, #20
 800cf10:	462b      	mov	r3, r5
 800cf12:	2200      	movs	r2, #0
 800cf14:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800cf18:	4573      	cmp	r3, lr
 800cf1a:	d316      	bcc.n	800cf4a <__multiply+0x72>
 800cf1c:	f104 0214 	add.w	r2, r4, #20
 800cf20:	f108 0114 	add.w	r1, r8, #20
 800cf24:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800cf28:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800cf2c:	9300      	str	r3, [sp, #0]
 800cf2e:	9b00      	ldr	r3, [sp, #0]
 800cf30:	9201      	str	r2, [sp, #4]
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d80c      	bhi.n	800cf50 <__multiply+0x78>
 800cf36:	2e00      	cmp	r6, #0
 800cf38:	dd03      	ble.n	800cf42 <__multiply+0x6a>
 800cf3a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d05d      	beq.n	800cffe <__multiply+0x126>
 800cf42:	6106      	str	r6, [r0, #16]
 800cf44:	b003      	add	sp, #12
 800cf46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf4a:	f843 2b04 	str.w	r2, [r3], #4
 800cf4e:	e7e3      	b.n	800cf18 <__multiply+0x40>
 800cf50:	f8b2 b000 	ldrh.w	fp, [r2]
 800cf54:	f1bb 0f00 	cmp.w	fp, #0
 800cf58:	d023      	beq.n	800cfa2 <__multiply+0xca>
 800cf5a:	4689      	mov	r9, r1
 800cf5c:	46ac      	mov	ip, r5
 800cf5e:	f04f 0800 	mov.w	r8, #0
 800cf62:	f859 4b04 	ldr.w	r4, [r9], #4
 800cf66:	f8dc a000 	ldr.w	sl, [ip]
 800cf6a:	b2a3      	uxth	r3, r4
 800cf6c:	fa1f fa8a 	uxth.w	sl, sl
 800cf70:	fb0b a303 	mla	r3, fp, r3, sl
 800cf74:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cf78:	f8dc 4000 	ldr.w	r4, [ip]
 800cf7c:	4443      	add	r3, r8
 800cf7e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cf82:	fb0b 840a 	mla	r4, fp, sl, r8
 800cf86:	46e2      	mov	sl, ip
 800cf88:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cf92:	454f      	cmp	r7, r9
 800cf94:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cf98:	f84a 3b04 	str.w	r3, [sl], #4
 800cf9c:	d82b      	bhi.n	800cff6 <__multiply+0x11e>
 800cf9e:	f8cc 8004 	str.w	r8, [ip, #4]
 800cfa2:	9b01      	ldr	r3, [sp, #4]
 800cfa4:	3204      	adds	r2, #4
 800cfa6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cfaa:	f1ba 0f00 	cmp.w	sl, #0
 800cfae:	d020      	beq.n	800cff2 <__multiply+0x11a>
 800cfb0:	4689      	mov	r9, r1
 800cfb2:	46a8      	mov	r8, r5
 800cfb4:	f04f 0b00 	mov.w	fp, #0
 800cfb8:	682b      	ldr	r3, [r5, #0]
 800cfba:	f8b9 c000 	ldrh.w	ip, [r9]
 800cfbe:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	fb0a 440c 	mla	r4, sl, ip, r4
 800cfc8:	46c4      	mov	ip, r8
 800cfca:	445c      	add	r4, fp
 800cfcc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cfd0:	f84c 3b04 	str.w	r3, [ip], #4
 800cfd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800cfd8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cfdc:	0c1b      	lsrs	r3, r3, #16
 800cfde:	fb0a b303 	mla	r3, sl, r3, fp
 800cfe2:	454f      	cmp	r7, r9
 800cfe4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cfe8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cfec:	d805      	bhi.n	800cffa <__multiply+0x122>
 800cfee:	f8c8 3004 	str.w	r3, [r8, #4]
 800cff2:	3504      	adds	r5, #4
 800cff4:	e79b      	b.n	800cf2e <__multiply+0x56>
 800cff6:	46d4      	mov	ip, sl
 800cff8:	e7b3      	b.n	800cf62 <__multiply+0x8a>
 800cffa:	46e0      	mov	r8, ip
 800cffc:	e7dd      	b.n	800cfba <__multiply+0xe2>
 800cffe:	3e01      	subs	r6, #1
 800d000:	e799      	b.n	800cf36 <__multiply+0x5e>
	...

0800d004 <__pow5mult>:
 800d004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d008:	4615      	mov	r5, r2
 800d00a:	f012 0203 	ands.w	r2, r2, #3
 800d00e:	4606      	mov	r6, r0
 800d010:	460f      	mov	r7, r1
 800d012:	d007      	beq.n	800d024 <__pow5mult+0x20>
 800d014:	4c21      	ldr	r4, [pc, #132]	; (800d09c <__pow5mult+0x98>)
 800d016:	3a01      	subs	r2, #1
 800d018:	2300      	movs	r3, #0
 800d01a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d01e:	f7ff fec9 	bl	800cdb4 <__multadd>
 800d022:	4607      	mov	r7, r0
 800d024:	10ad      	asrs	r5, r5, #2
 800d026:	d035      	beq.n	800d094 <__pow5mult+0x90>
 800d028:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d02a:	b93c      	cbnz	r4, 800d03c <__pow5mult+0x38>
 800d02c:	2010      	movs	r0, #16
 800d02e:	f7ff fe55 	bl	800ccdc <malloc>
 800d032:	6270      	str	r0, [r6, #36]	; 0x24
 800d034:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d038:	6004      	str	r4, [r0, #0]
 800d03a:	60c4      	str	r4, [r0, #12]
 800d03c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d040:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d044:	b94c      	cbnz	r4, 800d05a <__pow5mult+0x56>
 800d046:	f240 2171 	movw	r1, #625	; 0x271
 800d04a:	4630      	mov	r0, r6
 800d04c:	f7ff ff3b 	bl	800cec6 <__i2b>
 800d050:	2300      	movs	r3, #0
 800d052:	4604      	mov	r4, r0
 800d054:	f8c8 0008 	str.w	r0, [r8, #8]
 800d058:	6003      	str	r3, [r0, #0]
 800d05a:	f04f 0800 	mov.w	r8, #0
 800d05e:	07eb      	lsls	r3, r5, #31
 800d060:	d50a      	bpl.n	800d078 <__pow5mult+0x74>
 800d062:	4639      	mov	r1, r7
 800d064:	4622      	mov	r2, r4
 800d066:	4630      	mov	r0, r6
 800d068:	f7ff ff36 	bl	800ced8 <__multiply>
 800d06c:	4681      	mov	r9, r0
 800d06e:	4639      	mov	r1, r7
 800d070:	4630      	mov	r0, r6
 800d072:	f7ff fe88 	bl	800cd86 <_Bfree>
 800d076:	464f      	mov	r7, r9
 800d078:	106d      	asrs	r5, r5, #1
 800d07a:	d00b      	beq.n	800d094 <__pow5mult+0x90>
 800d07c:	6820      	ldr	r0, [r4, #0]
 800d07e:	b938      	cbnz	r0, 800d090 <__pow5mult+0x8c>
 800d080:	4622      	mov	r2, r4
 800d082:	4621      	mov	r1, r4
 800d084:	4630      	mov	r0, r6
 800d086:	f7ff ff27 	bl	800ced8 <__multiply>
 800d08a:	6020      	str	r0, [r4, #0]
 800d08c:	f8c0 8000 	str.w	r8, [r0]
 800d090:	4604      	mov	r4, r0
 800d092:	e7e4      	b.n	800d05e <__pow5mult+0x5a>
 800d094:	4638      	mov	r0, r7
 800d096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d09a:	bf00      	nop
 800d09c:	0800e928 	.word	0x0800e928

0800d0a0 <__lshift>:
 800d0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a4:	460c      	mov	r4, r1
 800d0a6:	4607      	mov	r7, r0
 800d0a8:	4616      	mov	r6, r2
 800d0aa:	6923      	ldr	r3, [r4, #16]
 800d0ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d0b0:	eb0a 0903 	add.w	r9, sl, r3
 800d0b4:	6849      	ldr	r1, [r1, #4]
 800d0b6:	68a3      	ldr	r3, [r4, #8]
 800d0b8:	f109 0501 	add.w	r5, r9, #1
 800d0bc:	42ab      	cmp	r3, r5
 800d0be:	db32      	blt.n	800d126 <__lshift+0x86>
 800d0c0:	4638      	mov	r0, r7
 800d0c2:	f7ff fe2c 	bl	800cd1e <_Balloc>
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	4680      	mov	r8, r0
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	f100 0114 	add.w	r1, r0, #20
 800d0d0:	4553      	cmp	r3, sl
 800d0d2:	db2b      	blt.n	800d12c <__lshift+0x8c>
 800d0d4:	6920      	ldr	r0, [r4, #16]
 800d0d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0da:	f104 0314 	add.w	r3, r4, #20
 800d0de:	f016 021f 	ands.w	r2, r6, #31
 800d0e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d0ea:	d025      	beq.n	800d138 <__lshift+0x98>
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	f1c2 0e20 	rsb	lr, r2, #32
 800d0f2:	468a      	mov	sl, r1
 800d0f4:	681e      	ldr	r6, [r3, #0]
 800d0f6:	4096      	lsls	r6, r2
 800d0f8:	4330      	orrs	r0, r6
 800d0fa:	f84a 0b04 	str.w	r0, [sl], #4
 800d0fe:	f853 0b04 	ldr.w	r0, [r3], #4
 800d102:	459c      	cmp	ip, r3
 800d104:	fa20 f00e 	lsr.w	r0, r0, lr
 800d108:	d814      	bhi.n	800d134 <__lshift+0x94>
 800d10a:	6048      	str	r0, [r1, #4]
 800d10c:	b108      	cbz	r0, 800d112 <__lshift+0x72>
 800d10e:	f109 0502 	add.w	r5, r9, #2
 800d112:	3d01      	subs	r5, #1
 800d114:	4638      	mov	r0, r7
 800d116:	f8c8 5010 	str.w	r5, [r8, #16]
 800d11a:	4621      	mov	r1, r4
 800d11c:	f7ff fe33 	bl	800cd86 <_Bfree>
 800d120:	4640      	mov	r0, r8
 800d122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d126:	3101      	adds	r1, #1
 800d128:	005b      	lsls	r3, r3, #1
 800d12a:	e7c7      	b.n	800d0bc <__lshift+0x1c>
 800d12c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d130:	3301      	adds	r3, #1
 800d132:	e7cd      	b.n	800d0d0 <__lshift+0x30>
 800d134:	4651      	mov	r1, sl
 800d136:	e7dc      	b.n	800d0f2 <__lshift+0x52>
 800d138:	3904      	subs	r1, #4
 800d13a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d13e:	459c      	cmp	ip, r3
 800d140:	f841 2f04 	str.w	r2, [r1, #4]!
 800d144:	d8f9      	bhi.n	800d13a <__lshift+0x9a>
 800d146:	e7e4      	b.n	800d112 <__lshift+0x72>

0800d148 <__mcmp>:
 800d148:	6903      	ldr	r3, [r0, #16]
 800d14a:	690a      	ldr	r2, [r1, #16]
 800d14c:	b530      	push	{r4, r5, lr}
 800d14e:	1a9b      	subs	r3, r3, r2
 800d150:	d10c      	bne.n	800d16c <__mcmp+0x24>
 800d152:	0092      	lsls	r2, r2, #2
 800d154:	3014      	adds	r0, #20
 800d156:	3114      	adds	r1, #20
 800d158:	1884      	adds	r4, r0, r2
 800d15a:	4411      	add	r1, r2
 800d15c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d160:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d164:	4295      	cmp	r5, r2
 800d166:	d003      	beq.n	800d170 <__mcmp+0x28>
 800d168:	d305      	bcc.n	800d176 <__mcmp+0x2e>
 800d16a:	2301      	movs	r3, #1
 800d16c:	4618      	mov	r0, r3
 800d16e:	bd30      	pop	{r4, r5, pc}
 800d170:	42a0      	cmp	r0, r4
 800d172:	d3f3      	bcc.n	800d15c <__mcmp+0x14>
 800d174:	e7fa      	b.n	800d16c <__mcmp+0x24>
 800d176:	f04f 33ff 	mov.w	r3, #4294967295
 800d17a:	e7f7      	b.n	800d16c <__mcmp+0x24>

0800d17c <__mdiff>:
 800d17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d180:	460d      	mov	r5, r1
 800d182:	4607      	mov	r7, r0
 800d184:	4611      	mov	r1, r2
 800d186:	4628      	mov	r0, r5
 800d188:	4614      	mov	r4, r2
 800d18a:	f7ff ffdd 	bl	800d148 <__mcmp>
 800d18e:	1e06      	subs	r6, r0, #0
 800d190:	d108      	bne.n	800d1a4 <__mdiff+0x28>
 800d192:	4631      	mov	r1, r6
 800d194:	4638      	mov	r0, r7
 800d196:	f7ff fdc2 	bl	800cd1e <_Balloc>
 800d19a:	2301      	movs	r3, #1
 800d19c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1a4:	bfa4      	itt	ge
 800d1a6:	4623      	movge	r3, r4
 800d1a8:	462c      	movge	r4, r5
 800d1aa:	4638      	mov	r0, r7
 800d1ac:	6861      	ldr	r1, [r4, #4]
 800d1ae:	bfa6      	itte	ge
 800d1b0:	461d      	movge	r5, r3
 800d1b2:	2600      	movge	r6, #0
 800d1b4:	2601      	movlt	r6, #1
 800d1b6:	f7ff fdb2 	bl	800cd1e <_Balloc>
 800d1ba:	f04f 0e00 	mov.w	lr, #0
 800d1be:	60c6      	str	r6, [r0, #12]
 800d1c0:	692b      	ldr	r3, [r5, #16]
 800d1c2:	6926      	ldr	r6, [r4, #16]
 800d1c4:	f104 0214 	add.w	r2, r4, #20
 800d1c8:	f105 0914 	add.w	r9, r5, #20
 800d1cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d1d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d1d4:	f100 0114 	add.w	r1, r0, #20
 800d1d8:	f852 ab04 	ldr.w	sl, [r2], #4
 800d1dc:	f859 5b04 	ldr.w	r5, [r9], #4
 800d1e0:	fa1f f38a 	uxth.w	r3, sl
 800d1e4:	4473      	add	r3, lr
 800d1e6:	b2ac      	uxth	r4, r5
 800d1e8:	1b1b      	subs	r3, r3, r4
 800d1ea:	0c2c      	lsrs	r4, r5, #16
 800d1ec:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800d1f0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800d1fa:	45c8      	cmp	r8, r9
 800d1fc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800d200:	4694      	mov	ip, r2
 800d202:	f841 4b04 	str.w	r4, [r1], #4
 800d206:	d8e7      	bhi.n	800d1d8 <__mdiff+0x5c>
 800d208:	45bc      	cmp	ip, r7
 800d20a:	d304      	bcc.n	800d216 <__mdiff+0x9a>
 800d20c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d210:	b183      	cbz	r3, 800d234 <__mdiff+0xb8>
 800d212:	6106      	str	r6, [r0, #16]
 800d214:	e7c4      	b.n	800d1a0 <__mdiff+0x24>
 800d216:	f85c 4b04 	ldr.w	r4, [ip], #4
 800d21a:	b2a2      	uxth	r2, r4
 800d21c:	4472      	add	r2, lr
 800d21e:	1413      	asrs	r3, r2, #16
 800d220:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d224:	b292      	uxth	r2, r2
 800d226:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d22a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d22e:	f841 2b04 	str.w	r2, [r1], #4
 800d232:	e7e9      	b.n	800d208 <__mdiff+0x8c>
 800d234:	3e01      	subs	r6, #1
 800d236:	e7e9      	b.n	800d20c <__mdiff+0x90>

0800d238 <__d2b>:
 800d238:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d23c:	461c      	mov	r4, r3
 800d23e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800d242:	2101      	movs	r1, #1
 800d244:	4690      	mov	r8, r2
 800d246:	f7ff fd6a 	bl	800cd1e <_Balloc>
 800d24a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800d24e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800d252:	4607      	mov	r7, r0
 800d254:	bb34      	cbnz	r4, 800d2a4 <__d2b+0x6c>
 800d256:	9201      	str	r2, [sp, #4]
 800d258:	f1b8 0200 	subs.w	r2, r8, #0
 800d25c:	d027      	beq.n	800d2ae <__d2b+0x76>
 800d25e:	a802      	add	r0, sp, #8
 800d260:	f840 2d08 	str.w	r2, [r0, #-8]!
 800d264:	f7ff fe00 	bl	800ce68 <__lo0bits>
 800d268:	9900      	ldr	r1, [sp, #0]
 800d26a:	b1f0      	cbz	r0, 800d2aa <__d2b+0x72>
 800d26c:	9a01      	ldr	r2, [sp, #4]
 800d26e:	f1c0 0320 	rsb	r3, r0, #32
 800d272:	fa02 f303 	lsl.w	r3, r2, r3
 800d276:	430b      	orrs	r3, r1
 800d278:	40c2      	lsrs	r2, r0
 800d27a:	617b      	str	r3, [r7, #20]
 800d27c:	9201      	str	r2, [sp, #4]
 800d27e:	9b01      	ldr	r3, [sp, #4]
 800d280:	2b00      	cmp	r3, #0
 800d282:	bf14      	ite	ne
 800d284:	2102      	movne	r1, #2
 800d286:	2101      	moveq	r1, #1
 800d288:	61bb      	str	r3, [r7, #24]
 800d28a:	6139      	str	r1, [r7, #16]
 800d28c:	b1c4      	cbz	r4, 800d2c0 <__d2b+0x88>
 800d28e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d292:	4404      	add	r4, r0
 800d294:	6034      	str	r4, [r6, #0]
 800d296:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d29a:	6028      	str	r0, [r5, #0]
 800d29c:	4638      	mov	r0, r7
 800d29e:	b002      	add	sp, #8
 800d2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d2a8:	e7d5      	b.n	800d256 <__d2b+0x1e>
 800d2aa:	6179      	str	r1, [r7, #20]
 800d2ac:	e7e7      	b.n	800d27e <__d2b+0x46>
 800d2ae:	a801      	add	r0, sp, #4
 800d2b0:	f7ff fdda 	bl	800ce68 <__lo0bits>
 800d2b4:	2101      	movs	r1, #1
 800d2b6:	9b01      	ldr	r3, [sp, #4]
 800d2b8:	6139      	str	r1, [r7, #16]
 800d2ba:	617b      	str	r3, [r7, #20]
 800d2bc:	3020      	adds	r0, #32
 800d2be:	e7e5      	b.n	800d28c <__d2b+0x54>
 800d2c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d2c4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d2c8:	6030      	str	r0, [r6, #0]
 800d2ca:	6918      	ldr	r0, [r3, #16]
 800d2cc:	f7ff fdad 	bl	800ce2a <__hi0bits>
 800d2d0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d2d4:	e7e1      	b.n	800d29a <__d2b+0x62>

0800d2d6 <_calloc_r>:
 800d2d6:	b538      	push	{r3, r4, r5, lr}
 800d2d8:	fb02 f401 	mul.w	r4, r2, r1
 800d2dc:	4621      	mov	r1, r4
 800d2de:	f000 f855 	bl	800d38c <_malloc_r>
 800d2e2:	4605      	mov	r5, r0
 800d2e4:	b118      	cbz	r0, 800d2ee <_calloc_r+0x18>
 800d2e6:	4622      	mov	r2, r4
 800d2e8:	2100      	movs	r1, #0
 800d2ea:	f7fe f9e1 	bl	800b6b0 <memset>
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d2f4 <_free_r>:
 800d2f4:	b538      	push	{r3, r4, r5, lr}
 800d2f6:	4605      	mov	r5, r0
 800d2f8:	2900      	cmp	r1, #0
 800d2fa:	d043      	beq.n	800d384 <_free_r+0x90>
 800d2fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d300:	1f0c      	subs	r4, r1, #4
 800d302:	2b00      	cmp	r3, #0
 800d304:	bfb8      	it	lt
 800d306:	18e4      	addlt	r4, r4, r3
 800d308:	f000 fa15 	bl	800d736 <__malloc_lock>
 800d30c:	4a1e      	ldr	r2, [pc, #120]	; (800d388 <_free_r+0x94>)
 800d30e:	6813      	ldr	r3, [r2, #0]
 800d310:	4610      	mov	r0, r2
 800d312:	b933      	cbnz	r3, 800d322 <_free_r+0x2e>
 800d314:	6063      	str	r3, [r4, #4]
 800d316:	6014      	str	r4, [r2, #0]
 800d318:	4628      	mov	r0, r5
 800d31a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d31e:	f000 ba0b 	b.w	800d738 <__malloc_unlock>
 800d322:	42a3      	cmp	r3, r4
 800d324:	d90b      	bls.n	800d33e <_free_r+0x4a>
 800d326:	6821      	ldr	r1, [r4, #0]
 800d328:	1862      	adds	r2, r4, r1
 800d32a:	4293      	cmp	r3, r2
 800d32c:	bf01      	itttt	eq
 800d32e:	681a      	ldreq	r2, [r3, #0]
 800d330:	685b      	ldreq	r3, [r3, #4]
 800d332:	1852      	addeq	r2, r2, r1
 800d334:	6022      	streq	r2, [r4, #0]
 800d336:	6063      	str	r3, [r4, #4]
 800d338:	6004      	str	r4, [r0, #0]
 800d33a:	e7ed      	b.n	800d318 <_free_r+0x24>
 800d33c:	4613      	mov	r3, r2
 800d33e:	685a      	ldr	r2, [r3, #4]
 800d340:	b10a      	cbz	r2, 800d346 <_free_r+0x52>
 800d342:	42a2      	cmp	r2, r4
 800d344:	d9fa      	bls.n	800d33c <_free_r+0x48>
 800d346:	6819      	ldr	r1, [r3, #0]
 800d348:	1858      	adds	r0, r3, r1
 800d34a:	42a0      	cmp	r0, r4
 800d34c:	d10b      	bne.n	800d366 <_free_r+0x72>
 800d34e:	6820      	ldr	r0, [r4, #0]
 800d350:	4401      	add	r1, r0
 800d352:	1858      	adds	r0, r3, r1
 800d354:	4282      	cmp	r2, r0
 800d356:	6019      	str	r1, [r3, #0]
 800d358:	d1de      	bne.n	800d318 <_free_r+0x24>
 800d35a:	6810      	ldr	r0, [r2, #0]
 800d35c:	6852      	ldr	r2, [r2, #4]
 800d35e:	4401      	add	r1, r0
 800d360:	6019      	str	r1, [r3, #0]
 800d362:	605a      	str	r2, [r3, #4]
 800d364:	e7d8      	b.n	800d318 <_free_r+0x24>
 800d366:	d902      	bls.n	800d36e <_free_r+0x7a>
 800d368:	230c      	movs	r3, #12
 800d36a:	602b      	str	r3, [r5, #0]
 800d36c:	e7d4      	b.n	800d318 <_free_r+0x24>
 800d36e:	6820      	ldr	r0, [r4, #0]
 800d370:	1821      	adds	r1, r4, r0
 800d372:	428a      	cmp	r2, r1
 800d374:	bf01      	itttt	eq
 800d376:	6811      	ldreq	r1, [r2, #0]
 800d378:	6852      	ldreq	r2, [r2, #4]
 800d37a:	1809      	addeq	r1, r1, r0
 800d37c:	6021      	streq	r1, [r4, #0]
 800d37e:	6062      	str	r2, [r4, #4]
 800d380:	605c      	str	r4, [r3, #4]
 800d382:	e7c9      	b.n	800d318 <_free_r+0x24>
 800d384:	bd38      	pop	{r3, r4, r5, pc}
 800d386:	bf00      	nop
 800d388:	200006a4 	.word	0x200006a4

0800d38c <_malloc_r>:
 800d38c:	b570      	push	{r4, r5, r6, lr}
 800d38e:	1ccd      	adds	r5, r1, #3
 800d390:	f025 0503 	bic.w	r5, r5, #3
 800d394:	3508      	adds	r5, #8
 800d396:	2d0c      	cmp	r5, #12
 800d398:	bf38      	it	cc
 800d39a:	250c      	movcc	r5, #12
 800d39c:	2d00      	cmp	r5, #0
 800d39e:	4606      	mov	r6, r0
 800d3a0:	db01      	blt.n	800d3a6 <_malloc_r+0x1a>
 800d3a2:	42a9      	cmp	r1, r5
 800d3a4:	d903      	bls.n	800d3ae <_malloc_r+0x22>
 800d3a6:	230c      	movs	r3, #12
 800d3a8:	6033      	str	r3, [r6, #0]
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	bd70      	pop	{r4, r5, r6, pc}
 800d3ae:	f000 f9c2 	bl	800d736 <__malloc_lock>
 800d3b2:	4a21      	ldr	r2, [pc, #132]	; (800d438 <_malloc_r+0xac>)
 800d3b4:	6814      	ldr	r4, [r2, #0]
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	b991      	cbnz	r1, 800d3e0 <_malloc_r+0x54>
 800d3ba:	4c20      	ldr	r4, [pc, #128]	; (800d43c <_malloc_r+0xb0>)
 800d3bc:	6823      	ldr	r3, [r4, #0]
 800d3be:	b91b      	cbnz	r3, 800d3c8 <_malloc_r+0x3c>
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	f000 f98f 	bl	800d6e4 <_sbrk_r>
 800d3c6:	6020      	str	r0, [r4, #0]
 800d3c8:	4629      	mov	r1, r5
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	f000 f98a 	bl	800d6e4 <_sbrk_r>
 800d3d0:	1c43      	adds	r3, r0, #1
 800d3d2:	d124      	bne.n	800d41e <_malloc_r+0x92>
 800d3d4:	230c      	movs	r3, #12
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	6033      	str	r3, [r6, #0]
 800d3da:	f000 f9ad 	bl	800d738 <__malloc_unlock>
 800d3de:	e7e4      	b.n	800d3aa <_malloc_r+0x1e>
 800d3e0:	680b      	ldr	r3, [r1, #0]
 800d3e2:	1b5b      	subs	r3, r3, r5
 800d3e4:	d418      	bmi.n	800d418 <_malloc_r+0x8c>
 800d3e6:	2b0b      	cmp	r3, #11
 800d3e8:	d90f      	bls.n	800d40a <_malloc_r+0x7e>
 800d3ea:	600b      	str	r3, [r1, #0]
 800d3ec:	18cc      	adds	r4, r1, r3
 800d3ee:	50cd      	str	r5, [r1, r3]
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	f000 f9a1 	bl	800d738 <__malloc_unlock>
 800d3f6:	f104 000b 	add.w	r0, r4, #11
 800d3fa:	1d23      	adds	r3, r4, #4
 800d3fc:	f020 0007 	bic.w	r0, r0, #7
 800d400:	1ac3      	subs	r3, r0, r3
 800d402:	d0d3      	beq.n	800d3ac <_malloc_r+0x20>
 800d404:	425a      	negs	r2, r3
 800d406:	50e2      	str	r2, [r4, r3]
 800d408:	e7d0      	b.n	800d3ac <_malloc_r+0x20>
 800d40a:	684b      	ldr	r3, [r1, #4]
 800d40c:	428c      	cmp	r4, r1
 800d40e:	bf16      	itet	ne
 800d410:	6063      	strne	r3, [r4, #4]
 800d412:	6013      	streq	r3, [r2, #0]
 800d414:	460c      	movne	r4, r1
 800d416:	e7eb      	b.n	800d3f0 <_malloc_r+0x64>
 800d418:	460c      	mov	r4, r1
 800d41a:	6849      	ldr	r1, [r1, #4]
 800d41c:	e7cc      	b.n	800d3b8 <_malloc_r+0x2c>
 800d41e:	1cc4      	adds	r4, r0, #3
 800d420:	f024 0403 	bic.w	r4, r4, #3
 800d424:	42a0      	cmp	r0, r4
 800d426:	d005      	beq.n	800d434 <_malloc_r+0xa8>
 800d428:	1a21      	subs	r1, r4, r0
 800d42a:	4630      	mov	r0, r6
 800d42c:	f000 f95a 	bl	800d6e4 <_sbrk_r>
 800d430:	3001      	adds	r0, #1
 800d432:	d0cf      	beq.n	800d3d4 <_malloc_r+0x48>
 800d434:	6025      	str	r5, [r4, #0]
 800d436:	e7db      	b.n	800d3f0 <_malloc_r+0x64>
 800d438:	200006a4 	.word	0x200006a4
 800d43c:	200006a8 	.word	0x200006a8

0800d440 <__ssputs_r>:
 800d440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d444:	688e      	ldr	r6, [r1, #8]
 800d446:	4682      	mov	sl, r0
 800d448:	429e      	cmp	r6, r3
 800d44a:	460c      	mov	r4, r1
 800d44c:	4690      	mov	r8, r2
 800d44e:	4699      	mov	r9, r3
 800d450:	d837      	bhi.n	800d4c2 <__ssputs_r+0x82>
 800d452:	898a      	ldrh	r2, [r1, #12]
 800d454:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d458:	d031      	beq.n	800d4be <__ssputs_r+0x7e>
 800d45a:	2302      	movs	r3, #2
 800d45c:	6825      	ldr	r5, [r4, #0]
 800d45e:	6909      	ldr	r1, [r1, #16]
 800d460:	1a6f      	subs	r7, r5, r1
 800d462:	6965      	ldr	r5, [r4, #20]
 800d464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d468:	fb95 f5f3 	sdiv	r5, r5, r3
 800d46c:	f109 0301 	add.w	r3, r9, #1
 800d470:	443b      	add	r3, r7
 800d472:	429d      	cmp	r5, r3
 800d474:	bf38      	it	cc
 800d476:	461d      	movcc	r5, r3
 800d478:	0553      	lsls	r3, r2, #21
 800d47a:	d530      	bpl.n	800d4de <__ssputs_r+0x9e>
 800d47c:	4629      	mov	r1, r5
 800d47e:	f7ff ff85 	bl	800d38c <_malloc_r>
 800d482:	4606      	mov	r6, r0
 800d484:	b950      	cbnz	r0, 800d49c <__ssputs_r+0x5c>
 800d486:	230c      	movs	r3, #12
 800d488:	f04f 30ff 	mov.w	r0, #4294967295
 800d48c:	f8ca 3000 	str.w	r3, [sl]
 800d490:	89a3      	ldrh	r3, [r4, #12]
 800d492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d496:	81a3      	strh	r3, [r4, #12]
 800d498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d49c:	463a      	mov	r2, r7
 800d49e:	6921      	ldr	r1, [r4, #16]
 800d4a0:	f7ff fc32 	bl	800cd08 <memcpy>
 800d4a4:	89a3      	ldrh	r3, [r4, #12]
 800d4a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d4aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4ae:	81a3      	strh	r3, [r4, #12]
 800d4b0:	6126      	str	r6, [r4, #16]
 800d4b2:	443e      	add	r6, r7
 800d4b4:	6026      	str	r6, [r4, #0]
 800d4b6:	464e      	mov	r6, r9
 800d4b8:	6165      	str	r5, [r4, #20]
 800d4ba:	1bed      	subs	r5, r5, r7
 800d4bc:	60a5      	str	r5, [r4, #8]
 800d4be:	454e      	cmp	r6, r9
 800d4c0:	d900      	bls.n	800d4c4 <__ssputs_r+0x84>
 800d4c2:	464e      	mov	r6, r9
 800d4c4:	4632      	mov	r2, r6
 800d4c6:	4641      	mov	r1, r8
 800d4c8:	6820      	ldr	r0, [r4, #0]
 800d4ca:	f000 f91b 	bl	800d704 <memmove>
 800d4ce:	68a3      	ldr	r3, [r4, #8]
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	1b9b      	subs	r3, r3, r6
 800d4d4:	60a3      	str	r3, [r4, #8]
 800d4d6:	6823      	ldr	r3, [r4, #0]
 800d4d8:	441e      	add	r6, r3
 800d4da:	6026      	str	r6, [r4, #0]
 800d4dc:	e7dc      	b.n	800d498 <__ssputs_r+0x58>
 800d4de:	462a      	mov	r2, r5
 800d4e0:	f000 f92b 	bl	800d73a <_realloc_r>
 800d4e4:	4606      	mov	r6, r0
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	d1e2      	bne.n	800d4b0 <__ssputs_r+0x70>
 800d4ea:	6921      	ldr	r1, [r4, #16]
 800d4ec:	4650      	mov	r0, sl
 800d4ee:	f7ff ff01 	bl	800d2f4 <_free_r>
 800d4f2:	e7c8      	b.n	800d486 <__ssputs_r+0x46>

0800d4f4 <_svfiprintf_r>:
 800d4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f8:	461d      	mov	r5, r3
 800d4fa:	898b      	ldrh	r3, [r1, #12]
 800d4fc:	b09d      	sub	sp, #116	; 0x74
 800d4fe:	061f      	lsls	r7, r3, #24
 800d500:	4680      	mov	r8, r0
 800d502:	460c      	mov	r4, r1
 800d504:	4616      	mov	r6, r2
 800d506:	d50f      	bpl.n	800d528 <_svfiprintf_r+0x34>
 800d508:	690b      	ldr	r3, [r1, #16]
 800d50a:	b96b      	cbnz	r3, 800d528 <_svfiprintf_r+0x34>
 800d50c:	2140      	movs	r1, #64	; 0x40
 800d50e:	f7ff ff3d 	bl	800d38c <_malloc_r>
 800d512:	6020      	str	r0, [r4, #0]
 800d514:	6120      	str	r0, [r4, #16]
 800d516:	b928      	cbnz	r0, 800d524 <_svfiprintf_r+0x30>
 800d518:	230c      	movs	r3, #12
 800d51a:	f8c8 3000 	str.w	r3, [r8]
 800d51e:	f04f 30ff 	mov.w	r0, #4294967295
 800d522:	e0c8      	b.n	800d6b6 <_svfiprintf_r+0x1c2>
 800d524:	2340      	movs	r3, #64	; 0x40
 800d526:	6163      	str	r3, [r4, #20]
 800d528:	2300      	movs	r3, #0
 800d52a:	9309      	str	r3, [sp, #36]	; 0x24
 800d52c:	2320      	movs	r3, #32
 800d52e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d532:	2330      	movs	r3, #48	; 0x30
 800d534:	f04f 0b01 	mov.w	fp, #1
 800d538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d53c:	9503      	str	r5, [sp, #12]
 800d53e:	4637      	mov	r7, r6
 800d540:	463d      	mov	r5, r7
 800d542:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d546:	b10b      	cbz	r3, 800d54c <_svfiprintf_r+0x58>
 800d548:	2b25      	cmp	r3, #37	; 0x25
 800d54a:	d13e      	bne.n	800d5ca <_svfiprintf_r+0xd6>
 800d54c:	ebb7 0a06 	subs.w	sl, r7, r6
 800d550:	d00b      	beq.n	800d56a <_svfiprintf_r+0x76>
 800d552:	4653      	mov	r3, sl
 800d554:	4632      	mov	r2, r6
 800d556:	4621      	mov	r1, r4
 800d558:	4640      	mov	r0, r8
 800d55a:	f7ff ff71 	bl	800d440 <__ssputs_r>
 800d55e:	3001      	adds	r0, #1
 800d560:	f000 80a4 	beq.w	800d6ac <_svfiprintf_r+0x1b8>
 800d564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d566:	4453      	add	r3, sl
 800d568:	9309      	str	r3, [sp, #36]	; 0x24
 800d56a:	783b      	ldrb	r3, [r7, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 809d 	beq.w	800d6ac <_svfiprintf_r+0x1b8>
 800d572:	2300      	movs	r3, #0
 800d574:	f04f 32ff 	mov.w	r2, #4294967295
 800d578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d57c:	9304      	str	r3, [sp, #16]
 800d57e:	9307      	str	r3, [sp, #28]
 800d580:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d584:	931a      	str	r3, [sp, #104]	; 0x68
 800d586:	462f      	mov	r7, r5
 800d588:	2205      	movs	r2, #5
 800d58a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d58e:	4850      	ldr	r0, [pc, #320]	; (800d6d0 <_svfiprintf_r+0x1dc>)
 800d590:	f7ff fbac 	bl	800ccec <memchr>
 800d594:	9b04      	ldr	r3, [sp, #16]
 800d596:	b9d0      	cbnz	r0, 800d5ce <_svfiprintf_r+0xda>
 800d598:	06d9      	lsls	r1, r3, #27
 800d59a:	bf44      	itt	mi
 800d59c:	2220      	movmi	r2, #32
 800d59e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d5a2:	071a      	lsls	r2, r3, #28
 800d5a4:	bf44      	itt	mi
 800d5a6:	222b      	movmi	r2, #43	; 0x2b
 800d5a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d5ac:	782a      	ldrb	r2, [r5, #0]
 800d5ae:	2a2a      	cmp	r2, #42	; 0x2a
 800d5b0:	d015      	beq.n	800d5de <_svfiprintf_r+0xea>
 800d5b2:	462f      	mov	r7, r5
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	250a      	movs	r5, #10
 800d5b8:	9a07      	ldr	r2, [sp, #28]
 800d5ba:	4639      	mov	r1, r7
 800d5bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5c0:	3b30      	subs	r3, #48	; 0x30
 800d5c2:	2b09      	cmp	r3, #9
 800d5c4:	d94d      	bls.n	800d662 <_svfiprintf_r+0x16e>
 800d5c6:	b1b8      	cbz	r0, 800d5f8 <_svfiprintf_r+0x104>
 800d5c8:	e00f      	b.n	800d5ea <_svfiprintf_r+0xf6>
 800d5ca:	462f      	mov	r7, r5
 800d5cc:	e7b8      	b.n	800d540 <_svfiprintf_r+0x4c>
 800d5ce:	4a40      	ldr	r2, [pc, #256]	; (800d6d0 <_svfiprintf_r+0x1dc>)
 800d5d0:	463d      	mov	r5, r7
 800d5d2:	1a80      	subs	r0, r0, r2
 800d5d4:	fa0b f000 	lsl.w	r0, fp, r0
 800d5d8:	4318      	orrs	r0, r3
 800d5da:	9004      	str	r0, [sp, #16]
 800d5dc:	e7d3      	b.n	800d586 <_svfiprintf_r+0x92>
 800d5de:	9a03      	ldr	r2, [sp, #12]
 800d5e0:	1d11      	adds	r1, r2, #4
 800d5e2:	6812      	ldr	r2, [r2, #0]
 800d5e4:	9103      	str	r1, [sp, #12]
 800d5e6:	2a00      	cmp	r2, #0
 800d5e8:	db01      	blt.n	800d5ee <_svfiprintf_r+0xfa>
 800d5ea:	9207      	str	r2, [sp, #28]
 800d5ec:	e004      	b.n	800d5f8 <_svfiprintf_r+0x104>
 800d5ee:	4252      	negs	r2, r2
 800d5f0:	f043 0302 	orr.w	r3, r3, #2
 800d5f4:	9207      	str	r2, [sp, #28]
 800d5f6:	9304      	str	r3, [sp, #16]
 800d5f8:	783b      	ldrb	r3, [r7, #0]
 800d5fa:	2b2e      	cmp	r3, #46	; 0x2e
 800d5fc:	d10c      	bne.n	800d618 <_svfiprintf_r+0x124>
 800d5fe:	787b      	ldrb	r3, [r7, #1]
 800d600:	2b2a      	cmp	r3, #42	; 0x2a
 800d602:	d133      	bne.n	800d66c <_svfiprintf_r+0x178>
 800d604:	9b03      	ldr	r3, [sp, #12]
 800d606:	3702      	adds	r7, #2
 800d608:	1d1a      	adds	r2, r3, #4
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	9203      	str	r2, [sp, #12]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	bfb8      	it	lt
 800d612:	f04f 33ff 	movlt.w	r3, #4294967295
 800d616:	9305      	str	r3, [sp, #20]
 800d618:	4d2e      	ldr	r5, [pc, #184]	; (800d6d4 <_svfiprintf_r+0x1e0>)
 800d61a:	2203      	movs	r2, #3
 800d61c:	7839      	ldrb	r1, [r7, #0]
 800d61e:	4628      	mov	r0, r5
 800d620:	f7ff fb64 	bl	800ccec <memchr>
 800d624:	b138      	cbz	r0, 800d636 <_svfiprintf_r+0x142>
 800d626:	2340      	movs	r3, #64	; 0x40
 800d628:	1b40      	subs	r0, r0, r5
 800d62a:	fa03 f000 	lsl.w	r0, r3, r0
 800d62e:	9b04      	ldr	r3, [sp, #16]
 800d630:	3701      	adds	r7, #1
 800d632:	4303      	orrs	r3, r0
 800d634:	9304      	str	r3, [sp, #16]
 800d636:	7839      	ldrb	r1, [r7, #0]
 800d638:	2206      	movs	r2, #6
 800d63a:	4827      	ldr	r0, [pc, #156]	; (800d6d8 <_svfiprintf_r+0x1e4>)
 800d63c:	1c7e      	adds	r6, r7, #1
 800d63e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d642:	f7ff fb53 	bl	800ccec <memchr>
 800d646:	2800      	cmp	r0, #0
 800d648:	d038      	beq.n	800d6bc <_svfiprintf_r+0x1c8>
 800d64a:	4b24      	ldr	r3, [pc, #144]	; (800d6dc <_svfiprintf_r+0x1e8>)
 800d64c:	bb13      	cbnz	r3, 800d694 <_svfiprintf_r+0x1a0>
 800d64e:	9b03      	ldr	r3, [sp, #12]
 800d650:	3307      	adds	r3, #7
 800d652:	f023 0307 	bic.w	r3, r3, #7
 800d656:	3308      	adds	r3, #8
 800d658:	9303      	str	r3, [sp, #12]
 800d65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d65c:	444b      	add	r3, r9
 800d65e:	9309      	str	r3, [sp, #36]	; 0x24
 800d660:	e76d      	b.n	800d53e <_svfiprintf_r+0x4a>
 800d662:	fb05 3202 	mla	r2, r5, r2, r3
 800d666:	2001      	movs	r0, #1
 800d668:	460f      	mov	r7, r1
 800d66a:	e7a6      	b.n	800d5ba <_svfiprintf_r+0xc6>
 800d66c:	2300      	movs	r3, #0
 800d66e:	250a      	movs	r5, #10
 800d670:	4619      	mov	r1, r3
 800d672:	3701      	adds	r7, #1
 800d674:	9305      	str	r3, [sp, #20]
 800d676:	4638      	mov	r0, r7
 800d678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d67c:	3a30      	subs	r2, #48	; 0x30
 800d67e:	2a09      	cmp	r2, #9
 800d680:	d903      	bls.n	800d68a <_svfiprintf_r+0x196>
 800d682:	2b00      	cmp	r3, #0
 800d684:	d0c8      	beq.n	800d618 <_svfiprintf_r+0x124>
 800d686:	9105      	str	r1, [sp, #20]
 800d688:	e7c6      	b.n	800d618 <_svfiprintf_r+0x124>
 800d68a:	fb05 2101 	mla	r1, r5, r1, r2
 800d68e:	2301      	movs	r3, #1
 800d690:	4607      	mov	r7, r0
 800d692:	e7f0      	b.n	800d676 <_svfiprintf_r+0x182>
 800d694:	ab03      	add	r3, sp, #12
 800d696:	9300      	str	r3, [sp, #0]
 800d698:	4622      	mov	r2, r4
 800d69a:	4b11      	ldr	r3, [pc, #68]	; (800d6e0 <_svfiprintf_r+0x1ec>)
 800d69c:	a904      	add	r1, sp, #16
 800d69e:	4640      	mov	r0, r8
 800d6a0:	f7fe f8a0 	bl	800b7e4 <_printf_float>
 800d6a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d6a8:	4681      	mov	r9, r0
 800d6aa:	d1d6      	bne.n	800d65a <_svfiprintf_r+0x166>
 800d6ac:	89a3      	ldrh	r3, [r4, #12]
 800d6ae:	065b      	lsls	r3, r3, #25
 800d6b0:	f53f af35 	bmi.w	800d51e <_svfiprintf_r+0x2a>
 800d6b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6b6:	b01d      	add	sp, #116	; 0x74
 800d6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6bc:	ab03      	add	r3, sp, #12
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	4622      	mov	r2, r4
 800d6c2:	4b07      	ldr	r3, [pc, #28]	; (800d6e0 <_svfiprintf_r+0x1ec>)
 800d6c4:	a904      	add	r1, sp, #16
 800d6c6:	4640      	mov	r0, r8
 800d6c8:	f7fe fb38 	bl	800bd3c <_printf_i>
 800d6cc:	e7ea      	b.n	800d6a4 <_svfiprintf_r+0x1b0>
 800d6ce:	bf00      	nop
 800d6d0:	0800e934 	.word	0x0800e934
 800d6d4:	0800e93a 	.word	0x0800e93a
 800d6d8:	0800e93e 	.word	0x0800e93e
 800d6dc:	0800b7e5 	.word	0x0800b7e5
 800d6e0:	0800d441 	.word	0x0800d441

0800d6e4 <_sbrk_r>:
 800d6e4:	b538      	push	{r3, r4, r5, lr}
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	4c05      	ldr	r4, [pc, #20]	; (800d700 <_sbrk_r+0x1c>)
 800d6ea:	4605      	mov	r5, r0
 800d6ec:	4608      	mov	r0, r1
 800d6ee:	6023      	str	r3, [r4, #0]
 800d6f0:	f7f9 fe08 	bl	8007304 <_sbrk>
 800d6f4:	1c43      	adds	r3, r0, #1
 800d6f6:	d102      	bne.n	800d6fe <_sbrk_r+0x1a>
 800d6f8:	6823      	ldr	r3, [r4, #0]
 800d6fa:	b103      	cbz	r3, 800d6fe <_sbrk_r+0x1a>
 800d6fc:	602b      	str	r3, [r5, #0]
 800d6fe:	bd38      	pop	{r3, r4, r5, pc}
 800d700:	2000160c 	.word	0x2000160c

0800d704 <memmove>:
 800d704:	4288      	cmp	r0, r1
 800d706:	b510      	push	{r4, lr}
 800d708:	eb01 0302 	add.w	r3, r1, r2
 800d70c:	d807      	bhi.n	800d71e <memmove+0x1a>
 800d70e:	1e42      	subs	r2, r0, #1
 800d710:	4299      	cmp	r1, r3
 800d712:	d00a      	beq.n	800d72a <memmove+0x26>
 800d714:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d718:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d71c:	e7f8      	b.n	800d710 <memmove+0xc>
 800d71e:	4283      	cmp	r3, r0
 800d720:	d9f5      	bls.n	800d70e <memmove+0xa>
 800d722:	1881      	adds	r1, r0, r2
 800d724:	1ad2      	subs	r2, r2, r3
 800d726:	42d3      	cmn	r3, r2
 800d728:	d100      	bne.n	800d72c <memmove+0x28>
 800d72a:	bd10      	pop	{r4, pc}
 800d72c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d730:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d734:	e7f7      	b.n	800d726 <memmove+0x22>

0800d736 <__malloc_lock>:
 800d736:	4770      	bx	lr

0800d738 <__malloc_unlock>:
 800d738:	4770      	bx	lr

0800d73a <_realloc_r>:
 800d73a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73c:	4607      	mov	r7, r0
 800d73e:	4614      	mov	r4, r2
 800d740:	460e      	mov	r6, r1
 800d742:	b921      	cbnz	r1, 800d74e <_realloc_r+0x14>
 800d744:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d748:	4611      	mov	r1, r2
 800d74a:	f7ff be1f 	b.w	800d38c <_malloc_r>
 800d74e:	b922      	cbnz	r2, 800d75a <_realloc_r+0x20>
 800d750:	f7ff fdd0 	bl	800d2f4 <_free_r>
 800d754:	4625      	mov	r5, r4
 800d756:	4628      	mov	r0, r5
 800d758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d75a:	f000 f814 	bl	800d786 <_malloc_usable_size_r>
 800d75e:	42a0      	cmp	r0, r4
 800d760:	d20f      	bcs.n	800d782 <_realloc_r+0x48>
 800d762:	4621      	mov	r1, r4
 800d764:	4638      	mov	r0, r7
 800d766:	f7ff fe11 	bl	800d38c <_malloc_r>
 800d76a:	4605      	mov	r5, r0
 800d76c:	2800      	cmp	r0, #0
 800d76e:	d0f2      	beq.n	800d756 <_realloc_r+0x1c>
 800d770:	4631      	mov	r1, r6
 800d772:	4622      	mov	r2, r4
 800d774:	f7ff fac8 	bl	800cd08 <memcpy>
 800d778:	4631      	mov	r1, r6
 800d77a:	4638      	mov	r0, r7
 800d77c:	f7ff fdba 	bl	800d2f4 <_free_r>
 800d780:	e7e9      	b.n	800d756 <_realloc_r+0x1c>
 800d782:	4635      	mov	r5, r6
 800d784:	e7e7      	b.n	800d756 <_realloc_r+0x1c>

0800d786 <_malloc_usable_size_r>:
 800d786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d78a:	1f18      	subs	r0, r3, #4
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	bfbc      	itt	lt
 800d790:	580b      	ldrlt	r3, [r1, r0]
 800d792:	18c0      	addlt	r0, r0, r3
 800d794:	4770      	bx	lr
	...

0800d798 <log>:
 800d798:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800d79c:	b08a      	sub	sp, #40	; 0x28
 800d79e:	4604      	mov	r4, r0
 800d7a0:	460d      	mov	r5, r1
 800d7a2:	f000 f875 	bl	800d890 <__ieee754_log>
 800d7a6:	4b34      	ldr	r3, [pc, #208]	; (800d878 <log+0xe0>)
 800d7a8:	4680      	mov	r8, r0
 800d7aa:	f993 6000 	ldrsb.w	r6, [r3]
 800d7ae:	4689      	mov	r9, r1
 800d7b0:	1c73      	adds	r3, r6, #1
 800d7b2:	d05b      	beq.n	800d86c <log+0xd4>
 800d7b4:	4622      	mov	r2, r4
 800d7b6:	462b      	mov	r3, r5
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	4629      	mov	r1, r5
 800d7bc:	f7f3 f926 	bl	8000a0c <__aeabi_dcmpun>
 800d7c0:	2800      	cmp	r0, #0
 800d7c2:	d153      	bne.n	800d86c <log+0xd4>
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	4629      	mov	r1, r5
 800d7cc:	f7f3 f914 	bl	80009f8 <__aeabi_dcmpgt>
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	d14b      	bne.n	800d86c <log+0xd4>
 800d7d4:	4b29      	ldr	r3, [pc, #164]	; (800d87c <log+0xe4>)
 800d7d6:	9008      	str	r0, [sp, #32]
 800d7d8:	9301      	str	r3, [sp, #4]
 800d7da:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d7de:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d7e2:	b9a6      	cbnz	r6, 800d80e <log+0x76>
 800d7e4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d7e8:	4b25      	ldr	r3, [pc, #148]	; (800d880 <log+0xe8>)
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d7f0:	4629      	mov	r1, r5
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	f7f3 f8d7 	bl	80009a8 <__aeabi_dcmpeq>
 800d7fa:	bb40      	cbnz	r0, 800d84e <log+0xb6>
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	2e02      	cmp	r6, #2
 800d800:	9300      	str	r3, [sp, #0]
 800d802:	d119      	bne.n	800d838 <log+0xa0>
 800d804:	f7fd fef0 	bl	800b5e8 <__errno>
 800d808:	2321      	movs	r3, #33	; 0x21
 800d80a:	6003      	str	r3, [r0, #0]
 800d80c:	e019      	b.n	800d842 <log+0xaa>
 800d80e:	2200      	movs	r2, #0
 800d810:	4b1c      	ldr	r3, [pc, #112]	; (800d884 <log+0xec>)
 800d812:	4620      	mov	r0, r4
 800d814:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d818:	4629      	mov	r1, r5
 800d81a:	2200      	movs	r2, #0
 800d81c:	2300      	movs	r3, #0
 800d81e:	f7f3 f8c3 	bl	80009a8 <__aeabi_dcmpeq>
 800d822:	2800      	cmp	r0, #0
 800d824:	d0ea      	beq.n	800d7fc <log+0x64>
 800d826:	2302      	movs	r3, #2
 800d828:	429e      	cmp	r6, r3
 800d82a:	9300      	str	r3, [sp, #0]
 800d82c:	d111      	bne.n	800d852 <log+0xba>
 800d82e:	f7fd fedb 	bl	800b5e8 <__errno>
 800d832:	2322      	movs	r3, #34	; 0x22
 800d834:	6003      	str	r3, [r0, #0]
 800d836:	e011      	b.n	800d85c <log+0xc4>
 800d838:	4668      	mov	r0, sp
 800d83a:	f000 f9db 	bl	800dbf4 <matherr>
 800d83e:	2800      	cmp	r0, #0
 800d840:	d0e0      	beq.n	800d804 <log+0x6c>
 800d842:	4811      	ldr	r0, [pc, #68]	; (800d888 <log+0xf0>)
 800d844:	f000 f9d8 	bl	800dbf8 <nan>
 800d848:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d84c:	e006      	b.n	800d85c <log+0xc4>
 800d84e:	2302      	movs	r3, #2
 800d850:	9300      	str	r3, [sp, #0]
 800d852:	4668      	mov	r0, sp
 800d854:	f000 f9ce 	bl	800dbf4 <matherr>
 800d858:	2800      	cmp	r0, #0
 800d85a:	d0e8      	beq.n	800d82e <log+0x96>
 800d85c:	9b08      	ldr	r3, [sp, #32]
 800d85e:	b11b      	cbz	r3, 800d868 <log+0xd0>
 800d860:	f7fd fec2 	bl	800b5e8 <__errno>
 800d864:	9b08      	ldr	r3, [sp, #32]
 800d866:	6003      	str	r3, [r0, #0]
 800d868:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800d86c:	4640      	mov	r0, r8
 800d86e:	4649      	mov	r1, r9
 800d870:	b00a      	add	sp, #40	; 0x28
 800d872:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d876:	bf00      	nop
 800d878:	20000260 	.word	0x20000260
 800d87c:	0800e945 	.word	0x0800e945
 800d880:	c7efffff 	.word	0xc7efffff
 800d884:	fff00000 	.word	0xfff00000
 800d888:	0800e939 	.word	0x0800e939
 800d88c:	00000000 	.word	0x00000000

0800d890 <__ieee754_log>:
 800d890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d894:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d898:	b087      	sub	sp, #28
 800d89a:	4602      	mov	r2, r0
 800d89c:	460b      	mov	r3, r1
 800d89e:	460d      	mov	r5, r1
 800d8a0:	da24      	bge.n	800d8ec <__ieee754_log+0x5c>
 800d8a2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800d8a6:	4304      	orrs	r4, r0
 800d8a8:	d108      	bne.n	800d8bc <__ieee754_log+0x2c>
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	49cb      	ldr	r1, [pc, #812]	; (800dbe0 <__ieee754_log+0x350>)
 800d8b2:	f7f2 ff3b 	bl	800072c <__aeabi_ddiv>
 800d8b6:	b007      	add	sp, #28
 800d8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8bc:	2900      	cmp	r1, #0
 800d8be:	da04      	bge.n	800d8ca <__ieee754_log+0x3a>
 800d8c0:	f7f2 fc52 	bl	8000168 <__aeabi_dsub>
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	e7f3      	b.n	800d8b2 <__ieee754_log+0x22>
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	4bc5      	ldr	r3, [pc, #788]	; (800dbe4 <__ieee754_log+0x354>)
 800d8ce:	f7f2 fe03 	bl	80004d8 <__aeabi_dmul>
 800d8d2:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	460d      	mov	r5, r1
 800d8dc:	49c2      	ldr	r1, [pc, #776]	; (800dbe8 <__ieee754_log+0x358>)
 800d8de:	428d      	cmp	r5, r1
 800d8e0:	dd06      	ble.n	800d8f0 <__ieee754_log+0x60>
 800d8e2:	4610      	mov	r0, r2
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	f7f2 fc41 	bl	800016c <__adddf3>
 800d8ea:	e7e4      	b.n	800d8b6 <__ieee754_log+0x26>
 800d8ec:	2600      	movs	r6, #0
 800d8ee:	e7f5      	b.n	800d8dc <__ieee754_log+0x4c>
 800d8f0:	152c      	asrs	r4, r5, #20
 800d8f2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d8f6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800d8fa:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d8fe:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800d902:	4426      	add	r6, r4
 800d904:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800d908:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800d90c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800d910:	ea41 0305 	orr.w	r3, r1, r5
 800d914:	4610      	mov	r0, r2
 800d916:	4619      	mov	r1, r3
 800d918:	2200      	movs	r2, #0
 800d91a:	4bb4      	ldr	r3, [pc, #720]	; (800dbec <__ieee754_log+0x35c>)
 800d91c:	f7f2 fc24 	bl	8000168 <__aeabi_dsub>
 800d920:	1cab      	adds	r3, r5, #2
 800d922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d926:	2b02      	cmp	r3, #2
 800d928:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800d92c:	4682      	mov	sl, r0
 800d92e:	468b      	mov	fp, r1
 800d930:	f04f 0200 	mov.w	r2, #0
 800d934:	dc53      	bgt.n	800d9de <__ieee754_log+0x14e>
 800d936:	2300      	movs	r3, #0
 800d938:	f7f3 f836 	bl	80009a8 <__aeabi_dcmpeq>
 800d93c:	b1d0      	cbz	r0, 800d974 <__ieee754_log+0xe4>
 800d93e:	2c00      	cmp	r4, #0
 800d940:	f000 8120 	beq.w	800db84 <__ieee754_log+0x2f4>
 800d944:	4620      	mov	r0, r4
 800d946:	f7f2 fd5d 	bl	8000404 <__aeabi_i2d>
 800d94a:	a391      	add	r3, pc, #580	; (adr r3, 800db90 <__ieee754_log+0x300>)
 800d94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d950:	4606      	mov	r6, r0
 800d952:	460f      	mov	r7, r1
 800d954:	f7f2 fdc0 	bl	80004d8 <__aeabi_dmul>
 800d958:	a38f      	add	r3, pc, #572	; (adr r3, 800db98 <__ieee754_log+0x308>)
 800d95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95e:	4604      	mov	r4, r0
 800d960:	460d      	mov	r5, r1
 800d962:	4630      	mov	r0, r6
 800d964:	4639      	mov	r1, r7
 800d966:	f7f2 fdb7 	bl	80004d8 <__aeabi_dmul>
 800d96a:	4602      	mov	r2, r0
 800d96c:	460b      	mov	r3, r1
 800d96e:	4620      	mov	r0, r4
 800d970:	4629      	mov	r1, r5
 800d972:	e7b8      	b.n	800d8e6 <__ieee754_log+0x56>
 800d974:	a38a      	add	r3, pc, #552	; (adr r3, 800dba0 <__ieee754_log+0x310>)
 800d976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97a:	4650      	mov	r0, sl
 800d97c:	4659      	mov	r1, fp
 800d97e:	f7f2 fdab 	bl	80004d8 <__aeabi_dmul>
 800d982:	4602      	mov	r2, r0
 800d984:	460b      	mov	r3, r1
 800d986:	2000      	movs	r0, #0
 800d988:	4999      	ldr	r1, [pc, #612]	; (800dbf0 <__ieee754_log+0x360>)
 800d98a:	f7f2 fbed 	bl	8000168 <__aeabi_dsub>
 800d98e:	4652      	mov	r2, sl
 800d990:	4606      	mov	r6, r0
 800d992:	460f      	mov	r7, r1
 800d994:	465b      	mov	r3, fp
 800d996:	4650      	mov	r0, sl
 800d998:	4659      	mov	r1, fp
 800d99a:	f7f2 fd9d 	bl	80004d8 <__aeabi_dmul>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	4630      	mov	r0, r6
 800d9a4:	4639      	mov	r1, r7
 800d9a6:	f7f2 fd97 	bl	80004d8 <__aeabi_dmul>
 800d9aa:	4606      	mov	r6, r0
 800d9ac:	460f      	mov	r7, r1
 800d9ae:	b914      	cbnz	r4, 800d9b6 <__ieee754_log+0x126>
 800d9b0:	4632      	mov	r2, r6
 800d9b2:	463b      	mov	r3, r7
 800d9b4:	e0a0      	b.n	800daf8 <__ieee754_log+0x268>
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	f7f2 fd24 	bl	8000404 <__aeabi_i2d>
 800d9bc:	a374      	add	r3, pc, #464	; (adr r3, 800db90 <__ieee754_log+0x300>)
 800d9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c2:	4680      	mov	r8, r0
 800d9c4:	4689      	mov	r9, r1
 800d9c6:	f7f2 fd87 	bl	80004d8 <__aeabi_dmul>
 800d9ca:	a373      	add	r3, pc, #460	; (adr r3, 800db98 <__ieee754_log+0x308>)
 800d9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d0:	4604      	mov	r4, r0
 800d9d2:	460d      	mov	r5, r1
 800d9d4:	4640      	mov	r0, r8
 800d9d6:	4649      	mov	r1, r9
 800d9d8:	f7f2 fd7e 	bl	80004d8 <__aeabi_dmul>
 800d9dc:	e0a5      	b.n	800db2a <__ieee754_log+0x29a>
 800d9de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9e2:	f7f2 fbc3 	bl	800016c <__adddf3>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	4650      	mov	r0, sl
 800d9ec:	4659      	mov	r1, fp
 800d9ee:	f7f2 fe9d 	bl	800072c <__aeabi_ddiv>
 800d9f2:	e9cd 0100 	strd	r0, r1, [sp]
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f7f2 fd04 	bl	8000404 <__aeabi_i2d>
 800d9fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da04:	4610      	mov	r0, r2
 800da06:	4619      	mov	r1, r3
 800da08:	f7f2 fd66 	bl	80004d8 <__aeabi_dmul>
 800da0c:	4602      	mov	r2, r0
 800da0e:	460b      	mov	r3, r1
 800da10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da14:	f7f2 fd60 	bl	80004d8 <__aeabi_dmul>
 800da18:	a363      	add	r3, pc, #396	; (adr r3, 800dba8 <__ieee754_log+0x318>)
 800da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1e:	4680      	mov	r8, r0
 800da20:	4689      	mov	r9, r1
 800da22:	f7f2 fd59 	bl	80004d8 <__aeabi_dmul>
 800da26:	a362      	add	r3, pc, #392	; (adr r3, 800dbb0 <__ieee754_log+0x320>)
 800da28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2c:	f7f2 fb9e 	bl	800016c <__adddf3>
 800da30:	4642      	mov	r2, r8
 800da32:	464b      	mov	r3, r9
 800da34:	f7f2 fd50 	bl	80004d8 <__aeabi_dmul>
 800da38:	a35f      	add	r3, pc, #380	; (adr r3, 800dbb8 <__ieee754_log+0x328>)
 800da3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3e:	f7f2 fb95 	bl	800016c <__adddf3>
 800da42:	4642      	mov	r2, r8
 800da44:	464b      	mov	r3, r9
 800da46:	f7f2 fd47 	bl	80004d8 <__aeabi_dmul>
 800da4a:	a35d      	add	r3, pc, #372	; (adr r3, 800dbc0 <__ieee754_log+0x330>)
 800da4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da50:	f7f2 fb8c 	bl	800016c <__adddf3>
 800da54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da58:	f7f2 fd3e 	bl	80004d8 <__aeabi_dmul>
 800da5c:	a35a      	add	r3, pc, #360	; (adr r3, 800dbc8 <__ieee754_log+0x338>)
 800da5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da66:	4640      	mov	r0, r8
 800da68:	4649      	mov	r1, r9
 800da6a:	f7f2 fd35 	bl	80004d8 <__aeabi_dmul>
 800da6e:	a358      	add	r3, pc, #352	; (adr r3, 800dbd0 <__ieee754_log+0x340>)
 800da70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da74:	f7f2 fb7a 	bl	800016c <__adddf3>
 800da78:	4642      	mov	r2, r8
 800da7a:	464b      	mov	r3, r9
 800da7c:	f7f2 fd2c 	bl	80004d8 <__aeabi_dmul>
 800da80:	a355      	add	r3, pc, #340	; (adr r3, 800dbd8 <__ieee754_log+0x348>)
 800da82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da86:	f7f2 fb71 	bl	800016c <__adddf3>
 800da8a:	4642      	mov	r2, r8
 800da8c:	464b      	mov	r3, r9
 800da8e:	f7f2 fd23 	bl	80004d8 <__aeabi_dmul>
 800da92:	4602      	mov	r2, r0
 800da94:	460b      	mov	r3, r1
 800da96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da9a:	f7f2 fb67 	bl	800016c <__adddf3>
 800da9e:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800daa2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800daa6:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800daaa:	3551      	adds	r5, #81	; 0x51
 800daac:	4335      	orrs	r5, r6
 800daae:	2d00      	cmp	r5, #0
 800dab0:	4680      	mov	r8, r0
 800dab2:	4689      	mov	r9, r1
 800dab4:	dd48      	ble.n	800db48 <__ieee754_log+0x2b8>
 800dab6:	2200      	movs	r2, #0
 800dab8:	4b4d      	ldr	r3, [pc, #308]	; (800dbf0 <__ieee754_log+0x360>)
 800daba:	4650      	mov	r0, sl
 800dabc:	4659      	mov	r1, fp
 800dabe:	f7f2 fd0b 	bl	80004d8 <__aeabi_dmul>
 800dac2:	4652      	mov	r2, sl
 800dac4:	465b      	mov	r3, fp
 800dac6:	f7f2 fd07 	bl	80004d8 <__aeabi_dmul>
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	4606      	mov	r6, r0
 800dad0:	460f      	mov	r7, r1
 800dad2:	4640      	mov	r0, r8
 800dad4:	4649      	mov	r1, r9
 800dad6:	f7f2 fb49 	bl	800016c <__adddf3>
 800dada:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dade:	f7f2 fcfb 	bl	80004d8 <__aeabi_dmul>
 800dae2:	4680      	mov	r8, r0
 800dae4:	4689      	mov	r9, r1
 800dae6:	b964      	cbnz	r4, 800db02 <__ieee754_log+0x272>
 800dae8:	4602      	mov	r2, r0
 800daea:	460b      	mov	r3, r1
 800daec:	4630      	mov	r0, r6
 800daee:	4639      	mov	r1, r7
 800daf0:	f7f2 fb3a 	bl	8000168 <__aeabi_dsub>
 800daf4:	4602      	mov	r2, r0
 800daf6:	460b      	mov	r3, r1
 800daf8:	4650      	mov	r0, sl
 800dafa:	4659      	mov	r1, fp
 800dafc:	f7f2 fb34 	bl	8000168 <__aeabi_dsub>
 800db00:	e6d9      	b.n	800d8b6 <__ieee754_log+0x26>
 800db02:	a323      	add	r3, pc, #140	; (adr r3, 800db90 <__ieee754_log+0x300>)
 800db04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db0c:	f7f2 fce4 	bl	80004d8 <__aeabi_dmul>
 800db10:	a321      	add	r3, pc, #132	; (adr r3, 800db98 <__ieee754_log+0x308>)
 800db12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db16:	4604      	mov	r4, r0
 800db18:	460d      	mov	r5, r1
 800db1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db1e:	f7f2 fcdb 	bl	80004d8 <__aeabi_dmul>
 800db22:	4642      	mov	r2, r8
 800db24:	464b      	mov	r3, r9
 800db26:	f7f2 fb21 	bl	800016c <__adddf3>
 800db2a:	4602      	mov	r2, r0
 800db2c:	460b      	mov	r3, r1
 800db2e:	4630      	mov	r0, r6
 800db30:	4639      	mov	r1, r7
 800db32:	f7f2 fb19 	bl	8000168 <__aeabi_dsub>
 800db36:	4652      	mov	r2, sl
 800db38:	465b      	mov	r3, fp
 800db3a:	f7f2 fb15 	bl	8000168 <__aeabi_dsub>
 800db3e:	4602      	mov	r2, r0
 800db40:	460b      	mov	r3, r1
 800db42:	4620      	mov	r0, r4
 800db44:	4629      	mov	r1, r5
 800db46:	e7d9      	b.n	800dafc <__ieee754_log+0x26c>
 800db48:	4602      	mov	r2, r0
 800db4a:	460b      	mov	r3, r1
 800db4c:	4650      	mov	r0, sl
 800db4e:	4659      	mov	r1, fp
 800db50:	f7f2 fb0a 	bl	8000168 <__aeabi_dsub>
 800db54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db58:	f7f2 fcbe 	bl	80004d8 <__aeabi_dmul>
 800db5c:	4606      	mov	r6, r0
 800db5e:	460f      	mov	r7, r1
 800db60:	2c00      	cmp	r4, #0
 800db62:	f43f af25 	beq.w	800d9b0 <__ieee754_log+0x120>
 800db66:	a30a      	add	r3, pc, #40	; (adr r3, 800db90 <__ieee754_log+0x300>)
 800db68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db70:	f7f2 fcb2 	bl	80004d8 <__aeabi_dmul>
 800db74:	a308      	add	r3, pc, #32	; (adr r3, 800db98 <__ieee754_log+0x308>)
 800db76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7a:	4604      	mov	r4, r0
 800db7c:	460d      	mov	r5, r1
 800db7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db82:	e729      	b.n	800d9d8 <__ieee754_log+0x148>
 800db84:	2000      	movs	r0, #0
 800db86:	2100      	movs	r1, #0
 800db88:	e695      	b.n	800d8b6 <__ieee754_log+0x26>
 800db8a:	bf00      	nop
 800db8c:	f3af 8000 	nop.w
 800db90:	fee00000 	.word	0xfee00000
 800db94:	3fe62e42 	.word	0x3fe62e42
 800db98:	35793c76 	.word	0x35793c76
 800db9c:	3dea39ef 	.word	0x3dea39ef
 800dba0:	55555555 	.word	0x55555555
 800dba4:	3fd55555 	.word	0x3fd55555
 800dba8:	df3e5244 	.word	0xdf3e5244
 800dbac:	3fc2f112 	.word	0x3fc2f112
 800dbb0:	96cb03de 	.word	0x96cb03de
 800dbb4:	3fc74664 	.word	0x3fc74664
 800dbb8:	94229359 	.word	0x94229359
 800dbbc:	3fd24924 	.word	0x3fd24924
 800dbc0:	55555593 	.word	0x55555593
 800dbc4:	3fe55555 	.word	0x3fe55555
 800dbc8:	d078c69f 	.word	0xd078c69f
 800dbcc:	3fc39a09 	.word	0x3fc39a09
 800dbd0:	1d8e78af 	.word	0x1d8e78af
 800dbd4:	3fcc71c5 	.word	0x3fcc71c5
 800dbd8:	9997fa04 	.word	0x9997fa04
 800dbdc:	3fd99999 	.word	0x3fd99999
 800dbe0:	c3500000 	.word	0xc3500000
 800dbe4:	43500000 	.word	0x43500000
 800dbe8:	7fefffff 	.word	0x7fefffff
 800dbec:	3ff00000 	.word	0x3ff00000
 800dbf0:	3fe00000 	.word	0x3fe00000

0800dbf4 <matherr>:
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	4770      	bx	lr

0800dbf8 <nan>:
 800dbf8:	2000      	movs	r0, #0
 800dbfa:	4901      	ldr	r1, [pc, #4]	; (800dc00 <nan+0x8>)
 800dbfc:	4770      	bx	lr
 800dbfe:	bf00      	nop
 800dc00:	7ff80000 	.word	0x7ff80000

0800dc04 <_init>:
 800dc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc06:	bf00      	nop
 800dc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc0a:	bc08      	pop	{r3}
 800dc0c:	469e      	mov	lr, r3
 800dc0e:	4770      	bx	lr

0800dc10 <_fini>:
 800dc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc12:	bf00      	nop
 800dc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc16:	bc08      	pop	{r3}
 800dc18:	469e      	mov	lr, r3
 800dc1a:	4770      	bx	lr
