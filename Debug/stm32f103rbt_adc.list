
stm32f103rbt_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c70c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d04  0800c820  0800c820  0001c820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d524  0800d524  00020260  2**0
                  CONTENTS
  4 .ARM          00000000  0800d524  0800d524  00020260  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d524  0800d524  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d524  0800d524  0001d524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d528  0800d528  0001d528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800d52c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001354  20000260  0800d78c  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015b4  0800d78c  000215b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bec9  00000000  00000000  00020289  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fb1  00000000  00000000  0003c152  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016c0  00000000  00000000  00040108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b8  00000000  00000000  000417c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000189d1  00000000  00000000  00042c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000178ef  00000000  00000000  0005b651  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080e4b  00000000  00000000  00072f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3d8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006908  00000000  00000000  000f3e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000260 	.word	0x20000260
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c804 	.word	0x0800c804

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000264 	.word	0x20000264
 800014c:	0800c804 	.word	0x0800c804

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <Batt_Discharge_Mode>:
extern uint8_t				charge_state,
							discharge_state,
							sleep_state;

void Batt_Discharge_Mode(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON||
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <Batt_Discharge_Mode+0x80>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d01b      	beq.n	80011a0 <Batt_Discharge_Mode+0x44>
			flag_trip_overtemperature==ON||
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <Batt_Discharge_Mode+0x84>)
 800116a:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON||
 800116c:	2b01      	cmp	r3, #1
 800116e:	d017      	beq.n	80011a0 <Batt_Discharge_Mode+0x44>
			flag_trip_undertemperature==ON||
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <Batt_Discharge_Mode+0x88>)
 8001172:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON||
 8001174:	2b01      	cmp	r3, #1
 8001176:	d013      	beq.n	80011a0 <Batt_Discharge_Mode+0x44>
			flag_trip_overcurrentdischarge==ON||
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <Batt_Discharge_Mode+0x8c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON||
 800117c:	2b01      	cmp	r3, #1
 800117e:	d00f      	beq.n	80011a0 <Batt_Discharge_Mode+0x44>
			flag_trip_SOCOverDischarge==ON||
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <Batt_Discharge_Mode+0x90>)
 8001182:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 8001184:	2b01      	cmp	r3, #1
 8001186:	d00b      	beq.n	80011a0 <Batt_Discharge_Mode+0x44>
			flag_trip_shortcircuit==ON||
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <Batt_Discharge_Mode+0x94>)
 800118a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON||
 800118c:	2b01      	cmp	r3, #1
 800118e:	d007      	beq.n	80011a0 <Batt_Discharge_Mode+0x44>
			flag_trip_unbalance==ON||
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <Batt_Discharge_Mode+0x98>)
 8001192:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON||
 8001194:	2b01      	cmp	r3, #1
 8001196:	d003      	beq.n	80011a0 <Batt_Discharge_Mode+0x44>
			flag_trip_systemfailure==ON)
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <Batt_Discharge_Mode+0x9c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON||
 800119c:	2b01      	cmp	r3, #1
 800119e:	d102      	bne.n	80011a6 <Batt_Discharge_Mode+0x4a>
	{
		Batt_Open_Mode();
 80011a0:	f000 f8fc 	bl	800139c <Batt_Open_Mode>
 80011a4:	e017      	b.n	80011d6 <Batt_Discharge_Mode+0x7a>
	}
	else
	{
		HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ac:	4813      	ldr	r0, [pc, #76]	; (80011fc <Batt_Discharge_Mode+0xa0>)
 80011ae:	f007 f8e6 	bl	800837e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b8:	4811      	ldr	r0, [pc, #68]	; (8001200 <Batt_Discharge_Mode+0xa4>)
 80011ba:	f007 f8e0 	bl	800837e <HAL_GPIO_WritePin>
		BATT_State=STATE_DISCHARGE;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <Batt_Discharge_Mode+0xa8>)
 80011c0:	2202      	movs	r2, #2
 80011c2:	701a      	strb	r2, [r3, #0]

		charge_state=0;
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <Batt_Discharge_Mode+0xac>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <Batt_Discharge_Mode+0xb0>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <Batt_Discharge_Mode+0xb4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
	}


}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20001065 	.word	0x20001065
 80011e0:	20001044 	.word	0x20001044
 80011e4:	20001064 	.word	0x20001064
 80011e8:	20001074 	.word	0x20001074
 80011ec:	20001090 	.word	0x20001090
 80011f0:	20000c3e 	.word	0x20000c3e
 80011f4:	20000c3c 	.word	0x20000c3c
 80011f8:	2000102c 	.word	0x2000102c
 80011fc:	40010800 	.word	0x40010800
 8001200:	40011000 	.word	0x40011000
 8001204:	20000966 	.word	0x20000966
 8001208:	20000000 	.word	0x20000000
 800120c:	20000001 	.word	0x20000001
 8001210:	2000027c 	.word	0x2000027c

08001214 <Batt_Charge_Mode>:

void Batt_Charge_Mode(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	if(flag_trip_overvoltage==ON			||
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <Batt_Charge_Mode+0x78>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d017      	beq.n	8001250 <Batt_Charge_Mode+0x3c>
			flag_trip_overtemperature==ON	||
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <Batt_Charge_Mode+0x7c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_overvoltage==ON			||
 8001224:	2b01      	cmp	r3, #1
 8001226:	d013      	beq.n	8001250 <Batt_Charge_Mode+0x3c>
			flag_trip_undertemperature==ON	||
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <Batt_Charge_Mode+0x80>)
 800122a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 800122c:	2b01      	cmp	r3, #1
 800122e:	d00f      	beq.n	8001250 <Batt_Charge_Mode+0x3c>
			flag_trip_overcurrentcharge==ON	||
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <Batt_Charge_Mode+0x84>)
 8001232:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 8001234:	2b01      	cmp	r3, #1
 8001236:	d00b      	beq.n	8001250 <Batt_Charge_Mode+0x3c>
			flag_trip_SOCOverCharge==ON		||
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <Batt_Charge_Mode+0x88>)
 800123a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 800123c:	2b01      	cmp	r3, #1
 800123e:	d007      	beq.n	8001250 <Batt_Charge_Mode+0x3c>
			flag_trip_shortcircuit==ON		||
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <Batt_Charge_Mode+0x8c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 8001244:	2b01      	cmp	r3, #1
 8001246:	d003      	beq.n	8001250 <Batt_Charge_Mode+0x3c>
			flag_trip_systemfailure==ON		)
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <Batt_Charge_Mode+0x90>)
 800124a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 800124c:	2b01      	cmp	r3, #1
 800124e:	d102      	bne.n	8001256 <Batt_Charge_Mode+0x42>
	{
		Batt_Open_Mode();
 8001250:	f000 f8a4 	bl	800139c <Batt_Open_Mode>
 8001254:	e017      	b.n	8001286 <Batt_Charge_Mode+0x72>
	}
	else
	{
		HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_SET);
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800125c:	4812      	ldr	r0, [pc, #72]	; (80012a8 <Batt_Charge_Mode+0x94>)
 800125e:	f007 f88e 	bl	800837e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001268:	4810      	ldr	r0, [pc, #64]	; (80012ac <Batt_Charge_Mode+0x98>)
 800126a:	f007 f888 	bl	800837e <HAL_GPIO_WritePin>
		BATT_State=STATE_CHARGE;
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <Batt_Charge_Mode+0x9c>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <Batt_Charge_Mode+0xa0>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
		discharge_state=0;
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <Batt_Charge_Mode+0xa4>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <Batt_Charge_Mode+0xa8>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
	}

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200014a1 	.word	0x200014a1
 8001290:	20001044 	.word	0x20001044
 8001294:	20001064 	.word	0x20001064
 8001298:	20001088 	.word	0x20001088
 800129c:	20000c3d 	.word	0x20000c3d
 80012a0:	20000c3e 	.word	0x20000c3e
 80012a4:	2000102c 	.word	0x2000102c
 80012a8:	40010800 	.word	0x40010800
 80012ac:	40011000 	.word	0x40011000
 80012b0:	20000966 	.word	0x20000966
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000001 	.word	0x20000001
 80012bc:	2000027c 	.word	0x2000027c

080012c0 <Batt_Full_CD_Mode>:

void Batt_Full_CD_Mode(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON			||
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <Batt_Full_CD_Mode+0x98>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d027      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_overvoltage==ON		||
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <Batt_Full_CD_Mode+0x9c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON			||
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d023      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_overtemperature==ON	||
 80012d4:	4b22      	ldr	r3, [pc, #136]	; (8001360 <Batt_Full_CD_Mode+0xa0>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overvoltage==ON		||
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d01f      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_undertemperature==ON	||
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <Batt_Full_CD_Mode+0xa4>)
 80012de:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d01b      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentdischarge==ON||
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <Batt_Full_CD_Mode+0xa8>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d017      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentcharge==ON	||
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <Batt_Full_CD_Mode+0xac>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d013      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverDischarge==ON	||
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <Batt_Full_CD_Mode+0xb0>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d00f      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverCharge==ON		||
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <Batt_Full_CD_Mode+0xb4>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON	||
 8001300:	2b01      	cmp	r3, #1
 8001302:	d00b      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_shortcircuit==ON		||
 8001304:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <Batt_Full_CD_Mode+0xb8>)
 8001306:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 8001308:	2b01      	cmp	r3, #1
 800130a:	d007      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_unbalance==ON			||
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <Batt_Full_CD_Mode+0xbc>)
 800130e:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 8001310:	2b01      	cmp	r3, #1
 8001312:	d003      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_systemfailure==ON		)
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <Batt_Full_CD_Mode+0xc0>)
 8001316:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON			||
 8001318:	2b01      	cmp	r3, #1
 800131a:	d102      	bne.n	8001322 <Batt_Full_CD_Mode+0x62>
	{
		Batt_Open_Mode();
 800131c:	f000 f83e 	bl	800139c <Batt_Open_Mode>
 8001320:	e017      	b.n	8001352 <Batt_Full_CD_Mode+0x92>
	}
	else
	{
		HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_SET);
 8001322:	2201      	movs	r2, #1
 8001324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001328:	4816      	ldr	r0, [pc, #88]	; (8001384 <Batt_Full_CD_Mode+0xc4>)
 800132a:	f007 f828 	bl	800837e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001334:	4814      	ldr	r0, [pc, #80]	; (8001388 <Batt_Full_CD_Mode+0xc8>)
 8001336:	f007 f822 	bl	800837e <HAL_GPIO_WritePin>
		BATT_State=STATE_FULL_CHARGE_DISCHARGE;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <Batt_Full_CD_Mode+0xcc>)
 800133c:	2203      	movs	r2, #3
 800133e:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <Batt_Full_CD_Mode+0xd0>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <Batt_Full_CD_Mode+0xd4>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <Batt_Full_CD_Mode+0xd8>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
	}
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20001065 	.word	0x20001065
 800135c:	200014a1 	.word	0x200014a1
 8001360:	20001044 	.word	0x20001044
 8001364:	20001064 	.word	0x20001064
 8001368:	20001074 	.word	0x20001074
 800136c:	20001088 	.word	0x20001088
 8001370:	20001090 	.word	0x20001090
 8001374:	20000c3d 	.word	0x20000c3d
 8001378:	20000c3e 	.word	0x20000c3e
 800137c:	20000c3c 	.word	0x20000c3c
 8001380:	2000102c 	.word	0x2000102c
 8001384:	40010800 	.word	0x40010800
 8001388:	40011000 	.word	0x40011000
 800138c:	20000966 	.word	0x20000966
 8001390:	20000000 	.word	0x20000000
 8001394:	20000001 	.word	0x20000001
 8001398:	2000027c 	.word	0x2000027c

0800139c <Batt_Open_Mode>:

void Batt_Open_Mode(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a6:	480f      	ldr	r0, [pc, #60]	; (80013e4 <Batt_Open_Mode+0x48>)
 80013a8:	f006 ffe9 	bl	800837e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <Batt_Open_Mode+0x4c>)
 80013b4:	f006 ffe3 	bl	800837e <HAL_GPIO_WritePin>
	BATT_State=STATE_STANDBY;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <Batt_Open_Mode+0x50>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
	charge_state=0;
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <Batt_Open_Mode+0x54>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
	discharge_state=0;
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <Batt_Open_Mode+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
	sleep_state=1;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <Batt_Open_Mode+0x5c>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2104      	movs	r1, #4
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <Batt_Open_Mode+0x4c>)
 80013d6:	f006 ffd2 	bl	800837e <HAL_GPIO_WritePin>

	check_SOC_Based_OCV();
 80013da:	f000 f811 	bl	8001400 <check_SOC_Based_OCV>
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40010800 	.word	0x40010800
 80013e8:	40011000 	.word	0x40011000
 80013ec:	20000966 	.word	0x20000966
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000001 	.word	0x20000001
 80013f8:	2000027c 	.word	0x2000027c
 80013fc:	00000000 	.word	0x00000000

08001400 <check_SOC_Based_OCV>:

void check_SOC_Based_OCV(void)
{
 8001400:	b598      	push	{r3, r4, r7, lr}
 8001402:	af00      	add	r7, sp, #0
	//Pack_SOC=0.226863411166458*VBATT*VBATT-18.618705166771*VBATT+378.560621625972;   //Persamaan Baterai INR 21700
	Pack_SOC=(147.471026094008*(VBATT/15.0) - 494.687746093127);  // Persamaan Baterai EVE ICR18650/26V
 8001404:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <check_SOC_Based_OCV+0xb8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f80d 	bl	8000428 <__aeabi_f2d>
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <check_SOC_Based_OCV+0xbc>)
 8001414:	f7ff f98a 	bl	800072c <__aeabi_ddiv>
 8001418:	4603      	mov	r3, r0
 800141a:	460c      	mov	r4, r1
 800141c:	4618      	mov	r0, r3
 800141e:	4621      	mov	r1, r4
 8001420:	a321      	add	r3, pc, #132	; (adr r3, 80014a8 <check_SOC_Based_OCV+0xa8>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff f857 	bl	80004d8 <__aeabi_dmul>
 800142a:	4603      	mov	r3, r0
 800142c:	460c      	mov	r4, r1
 800142e:	4618      	mov	r0, r3
 8001430:	4621      	mov	r1, r4
 8001432:	a31f      	add	r3, pc, #124	; (adr r3, 80014b0 <check_SOC_Based_OCV+0xb0>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7fe fe96 	bl	8000168 <__aeabi_dsub>
 800143c:	4603      	mov	r3, r0
 800143e:	460c      	mov	r4, r1
 8001440:	4618      	mov	r0, r3
 8001442:	4621      	mov	r1, r4
 8001444:	f7ff fb20 	bl	8000a88 <__aeabi_d2f>
 8001448:	4602      	mov	r2, r0
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <check_SOC_Based_OCV+0xc0>)
 800144c:	601a      	str	r2, [r3, #0]

	if(Pack_SOC>130) Pack_SOC=100;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <check_SOC_Based_OCV+0xc0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	491c      	ldr	r1, [pc, #112]	; (80014c4 <check_SOC_Based_OCV+0xc4>)
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fe31 	bl	80010bc <__aeabi_fcmpgt>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <check_SOC_Based_OCV+0x68>
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <check_SOC_Based_OCV+0xc0>)
 8001462:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <check_SOC_Based_OCV+0xc8>)
 8001464:	601a      	str	r2, [r3, #0]
	else if(Pack_SOC>100) Pack_SOC=100;
	else if(Pack_SOC<0) Pack_SOC=0;
}
 8001466:	e01b      	b.n	80014a0 <check_SOC_Based_OCV+0xa0>
	else if(Pack_SOC>100) Pack_SOC=100;
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <check_SOC_Based_OCV+0xc0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4916      	ldr	r1, [pc, #88]	; (80014c8 <check_SOC_Based_OCV+0xc8>)
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fe24 	bl	80010bc <__aeabi_fcmpgt>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <check_SOC_Based_OCV+0x82>
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <check_SOC_Based_OCV+0xc0>)
 800147c:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <check_SOC_Based_OCV+0xc8>)
 800147e:	601a      	str	r2, [r3, #0]
}
 8001480:	e00e      	b.n	80014a0 <check_SOC_Based_OCV+0xa0>
	else if(Pack_SOC<0) Pack_SOC=0;
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <check_SOC_Based_OCV+0xc0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f04f 0100 	mov.w	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fdf8 	bl	8001080 <__aeabi_fcmplt>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d100      	bne.n	8001498 <check_SOC_Based_OCV+0x98>
}
 8001496:	e003      	b.n	80014a0 <check_SOC_Based_OCV+0xa0>
	else if(Pack_SOC<0) Pack_SOC=0;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <check_SOC_Based_OCV+0xc0>)
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
}
 80014a0:	bf00      	nop
 80014a2:	bd98      	pop	{r3, r4, r7, pc}
 80014a4:	f3af 8000 	nop.w
 80014a8:	a550aa77 	.word	0xa550aa77
 80014ac:	40626f12 	.word	0x40626f12
 80014b0:	020c1eea 	.word	0x020c1eea
 80014b4:	407eeb01 	.word	0x407eeb01
 80014b8:	20001048 	.word	0x20001048
 80014bc:	402e0000 	.word	0x402e0000
 80014c0:	20000b98 	.word	0x20000b98
 80014c4:	43020000 	.word	0x43020000
 80014c8:	42c80000 	.word	0x42c80000

080014cc <BMS_CAN_Tx>:
//uint8_t				Handshaking = 0,
//					identified = 0,
//					Delay_Charger = 0;

void BMS_CAN_Tx()
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
		int i;
		Batt_voltage.m_uint16_t=VBATT*100;
 80014d2:	4b56      	ldr	r3, [pc, #344]	; (800162c <BMS_CAN_Tx+0x160>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4956      	ldr	r1, [pc, #344]	; (8001630 <BMS_CAN_Tx+0x164>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fc33 	bl	8000d44 <__aeabi_fmul>
 80014de:	4603      	mov	r3, r0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fe1b 	bl	800111c <__aeabi_f2uiz>
 80014e6:	4603      	mov	r3, r0
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	4b52      	ldr	r3, [pc, #328]	; (8001634 <BMS_CAN_Tx+0x168>)
 80014ec:	801a      	strh	r2, [r3, #0]
		Batt_current.m_uint16_t=(IBATT+50)*100;
 80014ee:	4b52      	ldr	r3, [pc, #328]	; (8001638 <BMS_CAN_Tx+0x16c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4952      	ldr	r1, [pc, #328]	; (800163c <BMS_CAN_Tx+0x170>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fb1d 	bl	8000b34 <__addsf3>
 80014fa:	4603      	mov	r3, r0
 80014fc:	494c      	ldr	r1, [pc, #304]	; (8001630 <BMS_CAN_Tx+0x164>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fc20 	bl	8000d44 <__aeabi_fmul>
 8001504:	4603      	mov	r3, r0
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fe08 	bl	800111c <__aeabi_f2uiz>
 800150c:	4603      	mov	r3, r0
 800150e:	b29a      	uxth	r2, r3
 8001510:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <BMS_CAN_Tx+0x174>)
 8001512:	801a      	strh	r2, [r3, #0]
		Batt_SOC.m_uint16_t=(int)Pack_SOC;
 8001514:	4b4b      	ldr	r3, [pc, #300]	; (8001644 <BMS_CAN_Tx+0x178>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fdd9 	bl	80010d0 <__aeabi_f2iz>
 800151e:	4603      	mov	r3, r0
 8001520:	b29a      	uxth	r2, r3
 8001522:	4b49      	ldr	r3, [pc, #292]	; (8001648 <BMS_CAN_Tx+0x17c>)
 8001524:	801a      	strh	r2, [r3, #0]
		Batt_temp.m_uint16_t=(int)((Suhu_T1+Suhu_T2)/2)+40;
 8001526:	4b49      	ldr	r3, [pc, #292]	; (800164c <BMS_CAN_Tx+0x180>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b49      	ldr	r3, [pc, #292]	; (8001650 <BMS_CAN_Tx+0x184>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4619      	mov	r1, r3
 8001530:	4610      	mov	r0, r2
 8001532:	f7ff faff 	bl	8000b34 <__addsf3>
 8001536:	4603      	mov	r3, r0
 8001538:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fcb5 	bl	8000eac <__aeabi_fdiv>
 8001542:	4603      	mov	r3, r0
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fdc3 	bl	80010d0 <__aeabi_f2iz>
 800154a:	4603      	mov	r3, r0
 800154c:	b29b      	uxth	r3, r3
 800154e:	3328      	adds	r3, #40	; 0x28
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b40      	ldr	r3, [pc, #256]	; (8001654 <BMS_CAN_Tx+0x188>)
 8001554:	801a      	strh	r2, [r3, #0]
		Batt_capacity.m_uint16_t=Pack_Cap*100;
 8001556:	4b40      	ldr	r3, [pc, #256]	; (8001658 <BMS_CAN_Tx+0x18c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4935      	ldr	r1, [pc, #212]	; (8001630 <BMS_CAN_Tx+0x164>)
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fbf1 	bl	8000d44 <__aeabi_fmul>
 8001562:	4603      	mov	r3, r0
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fdd9 	bl	800111c <__aeabi_f2uiz>
 800156a:	4603      	mov	r3, r0
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <BMS_CAN_Tx+0x190>)
 8001570:	801a      	strh	r2, [r3, #0]
		Batt_SOH.m_uint16_t=(int)SOH_batt;
 8001572:	4b3b      	ldr	r3, [pc, #236]	; (8001660 <BMS_CAN_Tx+0x194>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fdaa 	bl	80010d0 <__aeabi_f2iz>
 800157c:	4603      	mov	r3, r0
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b38      	ldr	r3, [pc, #224]	; (8001664 <BMS_CAN_Tx+0x198>)
 8001582:	801a      	strh	r2, [r3, #0]
		Batt_cycle.m_uint16_t=LifeTime;
 8001584:	4b38      	ldr	r3, [pc, #224]	; (8001668 <BMS_CAN_Tx+0x19c>)
 8001586:	881a      	ldrh	r2, [r3, #0]
 8001588:	4b38      	ldr	r3, [pc, #224]	; (800166c <BMS_CAN_Tx+0x1a0>)
 800158a:	801a      	strh	r2, [r3, #0]

		for(int mn=0;mn<15;mn++)
 800158c:	2300      	movs	r3, #0
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	e00a      	b.n	80015a8 <BMS_CAN_Tx+0xdc>
		{
			vcell_15databyte[mn].m_uint16_t=vcell_15data_digi[mn];
 8001592:	4a37      	ldr	r2, [pc, #220]	; (8001670 <BMS_CAN_Tx+0x1a4>)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800159a:	4a36      	ldr	r2, [pc, #216]	; (8001674 <BMS_CAN_Tx+0x1a8>)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		for(int mn=0;mn<15;mn++)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2b0e      	cmp	r3, #14
 80015ac:	ddf1      	ble.n	8001592 <BMS_CAN_Tx+0xc6>
		}

//	if(Handshaking==1){
		// CAN ID transmit #1
		Tx_Header.ExtId = (0x0B0<<20|UNIQUE_Code);  //7b1
 80015ae:	4b32      	ldr	r3, [pc, #200]	; (8001678 <BMS_CAN_Tx+0x1ac>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 80015b6:	4a31      	ldr	r2, [pc, #196]	; (800167c <BMS_CAN_Tx+0x1b0>)
 80015b8:	6053      	str	r3, [r2, #4]
		//CAN Data #1
		Tx_data[0] = Batt_voltage.m_bytes[1];
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <BMS_CAN_Tx+0x168>)
 80015bc:	785a      	ldrb	r2, [r3, #1]
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <BMS_CAN_Tx+0x1b4>)
 80015c0:	701a      	strb	r2, [r3, #0]
		Tx_data[1] = Batt_voltage.m_bytes[0];
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <BMS_CAN_Tx+0x168>)
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <BMS_CAN_Tx+0x1b4>)
 80015c8:	705a      	strb	r2, [r3, #1]
		Tx_data[2] = Batt_current.m_bytes[1];
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <BMS_CAN_Tx+0x174>)
 80015cc:	785a      	ldrb	r2, [r3, #1]
 80015ce:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <BMS_CAN_Tx+0x1b4>)
 80015d0:	709a      	strb	r2, [r3, #2]
		Tx_data[3] = Batt_current.m_bytes[0];
 80015d2:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <BMS_CAN_Tx+0x174>)
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <BMS_CAN_Tx+0x1b4>)
 80015d8:	70da      	strb	r2, [r3, #3]
		Tx_data[4] = Batt_SOC.m_bytes[1];
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <BMS_CAN_Tx+0x17c>)
 80015dc:	785a      	ldrb	r2, [r3, #1]
 80015de:	4b28      	ldr	r3, [pc, #160]	; (8001680 <BMS_CAN_Tx+0x1b4>)
 80015e0:	711a      	strb	r2, [r3, #4]
		Tx_data[5] = Batt_SOC.m_bytes[0];
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <BMS_CAN_Tx+0x17c>)
 80015e4:	781a      	ldrb	r2, [r3, #0]
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <BMS_CAN_Tx+0x1b4>)
 80015e8:	715a      	strb	r2, [r3, #5]
		Tx_data[6] = Batt_temp.m_bytes[1];
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <BMS_CAN_Tx+0x188>)
 80015ec:	785a      	ldrb	r2, [r3, #1]
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <BMS_CAN_Tx+0x1b4>)
 80015f0:	719a      	strb	r2, [r3, #6]
		Tx_data[7] = Batt_temp.m_bytes[0];
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <BMS_CAN_Tx+0x188>)
 80015f4:	781a      	ldrb	r2, [r3, #0]
 80015f6:	4b22      	ldr	r3, [pc, #136]	; (8001680 <BMS_CAN_Tx+0x1b4>)
 80015f8:	71da      	strb	r2, [r3, #7]
		//CAN Tx message #1
		Tx_Header.DLC = 8;
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <BMS_CAN_Tx+0x1b0>)
 80015fc:	2208      	movs	r2, #8
 80015fe:	611a      	str	r2, [r3, #16]
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8001600:	bf00      	nop
 8001602:	4820      	ldr	r0, [pc, #128]	; (8001684 <BMS_CAN_Tx+0x1b8>)
 8001604:	f005 febc 	bl	8007380 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f9      	beq.n	8001602 <BMS_CAN_Tx+0x136>
		if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <BMS_CAN_Tx+0x1bc>)
 8001610:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <BMS_CAN_Tx+0x1b4>)
 8001612:	491a      	ldr	r1, [pc, #104]	; (800167c <BMS_CAN_Tx+0x1b0>)
 8001614:	481b      	ldr	r0, [pc, #108]	; (8001684 <BMS_CAN_Tx+0x1b8>)
 8001616:	f005 fdd9 	bl	80071cc <HAL_CAN_AddTxMessage>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <BMS_CAN_Tx+0x158>
 8001620:	f001 fb10 	bl	8002c44 <Error_Handler>
		i=1000;
 8001624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001628:	607b      	str	r3, [r7, #4]
		while(i>1) i--;
 800162a:	e032      	b.n	8001692 <BMS_CAN_Tx+0x1c6>
 800162c:	20001048 	.word	0x20001048
 8001630:	42c80000 	.word	0x42c80000
 8001634:	20000794 	.word	0x20000794
 8001638:	2000105c 	.word	0x2000105c
 800163c:	42480000 	.word	0x42480000
 8001640:	200006d8 	.word	0x200006d8
 8001644:	20000b98 	.word	0x20000b98
 8001648:	200006e0 	.word	0x200006e0
 800164c:	20001070 	.word	0x20001070
 8001650:	200014a4 	.word	0x200014a4
 8001654:	20000724 	.word	0x20000724
 8001658:	20000014 	.word	0x20000014
 800165c:	2000078c 	.word	0x2000078c
 8001660:	20000004 	.word	0x20000004
 8001664:	200006a4 	.word	0x200006a4
 8001668:	20000968 	.word	0x20000968
 800166c:	200006d0 	.word	0x200006d0
 8001670:	20000904 	.word	0x20000904
 8001674:	200006e4 	.word	0x200006e4
 8001678:	20000008 	.word	0x20000008
 800167c:	20000774 	.word	0x20000774
 8001680:	200006b4 	.word	0x200006b4
 8001684:	2000080c 	.word	0x2000080c
 8001688:	20000758 	.word	0x20000758
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b01      	cmp	r3, #1
 8001696:	dcf9      	bgt.n	800168c <BMS_CAN_Tx+0x1c0>

		// CAN ID transmit #2
		Tx_Header.ExtId = (0x0B1<<20|UNIQUE_Code); //7b2
 8001698:	4b82      	ldr	r3, [pc, #520]	; (80018a4 <BMS_CAN_Tx+0x3d8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f043 6331 	orr.w	r3, r3, #185597952	; 0xb100000
 80016a0:	4a81      	ldr	r2, [pc, #516]	; (80018a8 <BMS_CAN_Tx+0x3dc>)
 80016a2:	6053      	str	r3, [r2, #4]
		//CAN Data #2
		Tx_data[0] = Batt_capacity.m_bytes[1];
 80016a4:	4b81      	ldr	r3, [pc, #516]	; (80018ac <BMS_CAN_Tx+0x3e0>)
 80016a6:	785a      	ldrb	r2, [r3, #1]
 80016a8:	4b81      	ldr	r3, [pc, #516]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80016aa:	701a      	strb	r2, [r3, #0]
		Tx_data[1] = Batt_capacity.m_bytes[0];
 80016ac:	4b7f      	ldr	r3, [pc, #508]	; (80018ac <BMS_CAN_Tx+0x3e0>)
 80016ae:	781a      	ldrb	r2, [r3, #0]
 80016b0:	4b7f      	ldr	r3, [pc, #508]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80016b2:	705a      	strb	r2, [r3, #1]
		Tx_data[2] = Batt_SOH.m_bytes[1];
 80016b4:	4b7f      	ldr	r3, [pc, #508]	; (80018b4 <BMS_CAN_Tx+0x3e8>)
 80016b6:	785a      	ldrb	r2, [r3, #1]
 80016b8:	4b7d      	ldr	r3, [pc, #500]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80016ba:	709a      	strb	r2, [r3, #2]
		Tx_data[3] = Batt_SOH.m_bytes[0];
 80016bc:	4b7d      	ldr	r3, [pc, #500]	; (80018b4 <BMS_CAN_Tx+0x3e8>)
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	4b7b      	ldr	r3, [pc, #492]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80016c2:	70da      	strb	r2, [r3, #3]
		Tx_data[4] = Batt_cycle.m_bytes[1];
 80016c4:	4b7c      	ldr	r3, [pc, #496]	; (80018b8 <BMS_CAN_Tx+0x3ec>)
 80016c6:	785a      	ldrb	r2, [r3, #1]
 80016c8:	4b79      	ldr	r3, [pc, #484]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80016ca:	711a      	strb	r2, [r3, #4]
		Tx_data[5] = Batt_cycle.m_bytes[0];
 80016cc:	4b7a      	ldr	r3, [pc, #488]	; (80018b8 <BMS_CAN_Tx+0x3ec>)
 80016ce:	781a      	ldrb	r2, [r3, #0]
 80016d0:	4b77      	ldr	r3, [pc, #476]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80016d2:	715a      	strb	r2, [r3, #5]
		Tx_data[6] = flag_trip_shortcircuit&0x01;
 80016d4:	4b79      	ldr	r3, [pc, #484]	; (80018bc <BMS_CAN_Tx+0x3f0>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b74      	ldr	r3, [pc, #464]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80016e0:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overcurrentdischarge&0x01)<<1;
 80016e2:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80016e4:	799b      	ldrb	r3, [r3, #6]
 80016e6:	b25a      	sxtb	r2, r3
 80016e8:	4b75      	ldr	r3, [pc, #468]	; (80018c0 <BMS_CAN_Tx+0x3f4>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	4313      	orrs	r3, r2
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b6c      	ldr	r3, [pc, #432]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80016fe:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overcurrentcharge&0x01)<<2;
 8001700:	4b6b      	ldr	r3, [pc, #428]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 8001702:	799b      	ldrb	r3, [r3, #6]
 8001704:	b25a      	sxtb	r2, r3
 8001706:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <BMS_CAN_Tx+0x3f8>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	b25b      	sxtb	r3, r3
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	b25b      	sxtb	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b25b      	sxtb	r3, r3
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b65      	ldr	r3, [pc, #404]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 800171c:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overtemperature&0x01)<<3;
 800171e:	4b64      	ldr	r3, [pc, #400]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 8001720:	799b      	ldrb	r3, [r3, #6]
 8001722:	b25a      	sxtb	r2, r3
 8001724:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <BMS_CAN_Tx+0x3fc>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	b25b      	sxtb	r3, r3
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b5d      	ldr	r3, [pc, #372]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 800173a:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_undertemperature&0x01)<<4;
 800173c:	4b5c      	ldr	r3, [pc, #368]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 800173e:	799b      	ldrb	r3, [r3, #6]
 8001740:	b25a      	sxtb	r2, r3
 8001742:	4b62      	ldr	r3, [pc, #392]	; (80018cc <BMS_CAN_Tx+0x400>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	011b      	lsls	r3, r3, #4
 8001748:	b25b      	sxtb	r3, r3
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	b25b      	sxtb	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b25b      	sxtb	r3, r3
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b56      	ldr	r3, [pc, #344]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 8001758:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overtemperature&0x01)<<5;
 800175a:	4b55      	ldr	r3, [pc, #340]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 800175c:	799b      	ldrb	r3, [r3, #6]
 800175e:	b25a      	sxtb	r2, r3
 8001760:	4b59      	ldr	r3, [pc, #356]	; (80018c8 <BMS_CAN_Tx+0x3fc>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	015b      	lsls	r3, r3, #5
 8001766:	b25b      	sxtb	r3, r3
 8001768:	f003 0320 	and.w	r3, r3, #32
 800176c:	b25b      	sxtb	r3, r3
 800176e:	4313      	orrs	r3, r2
 8001770:	b25b      	sxtb	r3, r3
 8001772:	b2da      	uxtb	r2, r3
 8001774:	4b4e      	ldr	r3, [pc, #312]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 8001776:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_undertemperature&0x01)<<6;
 8001778:	4b4d      	ldr	r3, [pc, #308]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 800177a:	799b      	ldrb	r3, [r3, #6]
 800177c:	b25a      	sxtb	r2, r3
 800177e:	4b53      	ldr	r3, [pc, #332]	; (80018cc <BMS_CAN_Tx+0x400>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	019b      	lsls	r3, r3, #6
 8001784:	b25b      	sxtb	r3, r3
 8001786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800178a:	b25b      	sxtb	r3, r3
 800178c:	4313      	orrs	r3, r2
 800178e:	b25b      	sxtb	r3, r3
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 8001794:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_unbalance&0x01)<<7;
 8001796:	4b46      	ldr	r3, [pc, #280]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 8001798:	799b      	ldrb	r3, [r3, #6]
 800179a:	b25a      	sxtb	r2, r3
 800179c:	4b4c      	ldr	r3, [pc, #304]	; (80018d0 <BMS_CAN_Tx+0x404>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	01db      	lsls	r3, r3, #7
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	4313      	orrs	r3, r2
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80017ac:	719a      	strb	r2, [r3, #6]

		Tx_data[7] =  (flag_trip_undervoltage&0x01);
 80017ae:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <BMS_CAN_Tx+0x408>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80017ba:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (flag_trip_overvoltage&0x01)<<1;
 80017bc:	4b3c      	ldr	r3, [pc, #240]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80017be:	79db      	ldrb	r3, [r3, #7]
 80017c0:	b25a      	sxtb	r2, r3
 80017c2:	4b45      	ldr	r3, [pc, #276]	; (80018d8 <BMS_CAN_Tx+0x40c>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80017d8:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (flag_trip_SOCOverDischarge&0x01)<<2;
 80017da:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80017dc:	79db      	ldrb	r3, [r3, #7]
 80017de:	b25a      	sxtb	r2, r3
 80017e0:	4b3e      	ldr	r3, [pc, #248]	; (80018dc <BMS_CAN_Tx+0x410>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80017f6:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (flag_trip_systemfailure&0x01)<<3;
 80017f8:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 80017fa:	79db      	ldrb	r3, [r3, #7]
 80017fc:	b25a      	sxtb	r2, r3
 80017fe:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <BMS_CAN_Tx+0x414>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	b25b      	sxtb	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b25b      	sxtb	r3, r3
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 8001814:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (charge_state&0x01)<<4;
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 8001818:	79db      	ldrb	r3, [r3, #7]
 800181a:	b25a      	sxtb	r2, r3
 800181c:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <BMS_CAN_Tx+0x418>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	b25b      	sxtb	r3, r3
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	b25b      	sxtb	r3, r3
 800182a:	4313      	orrs	r3, r2
 800182c:	b25b      	sxtb	r3, r3
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 8001832:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (discharge_state&0x01)<<5;
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 8001836:	79db      	ldrb	r3, [r3, #7]
 8001838:	b25a      	sxtb	r2, r3
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <BMS_CAN_Tx+0x41c>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	015b      	lsls	r3, r3, #5
 8001840:	b25b      	sxtb	r3, r3
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	b25b      	sxtb	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	b25b      	sxtb	r3, r3
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 8001850:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (sleep_state&0x01)<<6;
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 8001854:	79db      	ldrb	r3, [r3, #7]
 8001856:	b25a      	sxtb	r2, r3
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <BMS_CAN_Tx+0x420>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	019b      	lsls	r3, r3, #6
 800185e:	b25b      	sxtb	r3, r3
 8001860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001864:	b25b      	sxtb	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	b25b      	sxtb	r3, r3
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 800186e:	71da      	strb	r2, [r3, #7]

		//CAN Tx message #2
		Tx_Header.DLC = 8;
 8001870:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <BMS_CAN_Tx+0x3dc>)
 8001872:	2208      	movs	r2, #8
 8001874:	611a      	str	r2, [r3, #16]
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8001876:	bf00      	nop
 8001878:	481d      	ldr	r0, [pc, #116]	; (80018f0 <BMS_CAN_Tx+0x424>)
 800187a:	f005 fd81 	bl	8007380 <HAL_CAN_GetTxMailboxesFreeLevel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f9      	beq.n	8001878 <BMS_CAN_Tx+0x3ac>
		if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <BMS_CAN_Tx+0x428>)
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <BMS_CAN_Tx+0x3e4>)
 8001888:	4907      	ldr	r1, [pc, #28]	; (80018a8 <BMS_CAN_Tx+0x3dc>)
 800188a:	4819      	ldr	r0, [pc, #100]	; (80018f0 <BMS_CAN_Tx+0x424>)
 800188c:	f005 fc9e 	bl	80071cc <HAL_CAN_AddTxMessage>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <BMS_CAN_Tx+0x3ce>
 8001896:	f001 f9d5 	bl	8002c44 <Error_Handler>
		i=1000;
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	607b      	str	r3, [r7, #4]
		while(i>1) i--;
 80018a0:	e02d      	b.n	80018fe <BMS_CAN_Tx+0x432>
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008
 80018a8:	20000774 	.word	0x20000774
 80018ac:	2000078c 	.word	0x2000078c
 80018b0:	200006b4 	.word	0x200006b4
 80018b4:	200006a4 	.word	0x200006a4
 80018b8:	200006d0 	.word	0x200006d0
 80018bc:	20000c3e 	.word	0x20000c3e
 80018c0:	20001074 	.word	0x20001074
 80018c4:	20001088 	.word	0x20001088
 80018c8:	20001044 	.word	0x20001044
 80018cc:	20001064 	.word	0x20001064
 80018d0:	20000c3c 	.word	0x20000c3c
 80018d4:	20001065 	.word	0x20001065
 80018d8:	200014a1 	.word	0x200014a1
 80018dc:	20001090 	.word	0x20001090
 80018e0:	2000102c 	.word	0x2000102c
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000001 	.word	0x20000001
 80018ec:	2000027c 	.word	0x2000027c
 80018f0:	2000080c 	.word	0x2000080c
 80018f4:	20000758 	.word	0x20000758
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b01      	cmp	r3, #1
 8001902:	dcf9      	bgt.n	80018f8 <BMS_CAN_Tx+0x42c>


		// *********************** Start Cell  Voltage Data Send ******************************
		// CAN ID transmit #4
		Tx_Header.ExtId=(0x0B4<<20|UNIQUE_Code); //b4
 8001904:	4b93      	ldr	r3, [pc, #588]	; (8001b54 <BMS_CAN_Tx+0x688>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f043 6334 	orr.w	r3, r3, #188743680	; 0xb400000
 800190c:	4a92      	ldr	r2, [pc, #584]	; (8001b58 <BMS_CAN_Tx+0x68c>)
 800190e:	6053      	str	r3, [r2, #4]
		//CAN Data #4
		Tx_data[0]=vcell_15databyte[0].m_bytes[1];
 8001910:	4b92      	ldr	r3, [pc, #584]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001912:	785a      	ldrb	r2, [r3, #1]
 8001914:	4b92      	ldr	r3, [pc, #584]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001916:	701a      	strb	r2, [r3, #0]
		Tx_data[1]=vcell_15databyte[0].m_bytes[0];
 8001918:	4b90      	ldr	r3, [pc, #576]	; (8001b5c <BMS_CAN_Tx+0x690>)
 800191a:	781a      	ldrb	r2, [r3, #0]
 800191c:	4b90      	ldr	r3, [pc, #576]	; (8001b60 <BMS_CAN_Tx+0x694>)
 800191e:	705a      	strb	r2, [r3, #1]
		Tx_data[2]=vcell_15databyte[1].m_bytes[1];
 8001920:	4b8e      	ldr	r3, [pc, #568]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001922:	795a      	ldrb	r2, [r3, #5]
 8001924:	4b8e      	ldr	r3, [pc, #568]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001926:	709a      	strb	r2, [r3, #2]
		Tx_data[3]=vcell_15databyte[1].m_bytes[0];
 8001928:	4b8c      	ldr	r3, [pc, #560]	; (8001b5c <BMS_CAN_Tx+0x690>)
 800192a:	791a      	ldrb	r2, [r3, #4]
 800192c:	4b8c      	ldr	r3, [pc, #560]	; (8001b60 <BMS_CAN_Tx+0x694>)
 800192e:	70da      	strb	r2, [r3, #3]
		Tx_data[4]=vcell_15databyte[2].m_bytes[1];
 8001930:	4b8a      	ldr	r3, [pc, #552]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001932:	7a5a      	ldrb	r2, [r3, #9]
 8001934:	4b8a      	ldr	r3, [pc, #552]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001936:	711a      	strb	r2, [r3, #4]
		Tx_data[5]=vcell_15databyte[2].m_bytes[0];
 8001938:	4b88      	ldr	r3, [pc, #544]	; (8001b5c <BMS_CAN_Tx+0x690>)
 800193a:	7a1a      	ldrb	r2, [r3, #8]
 800193c:	4b88      	ldr	r3, [pc, #544]	; (8001b60 <BMS_CAN_Tx+0x694>)
 800193e:	715a      	strb	r2, [r3, #5]
		Tx_data[6]=vcell_15databyte[3].m_bytes[1];
 8001940:	4b86      	ldr	r3, [pc, #536]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001942:	7b5a      	ldrb	r2, [r3, #13]
 8001944:	4b86      	ldr	r3, [pc, #536]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001946:	719a      	strb	r2, [r3, #6]
		Tx_data[7]=vcell_15databyte[3].m_bytes[0];
 8001948:	4b84      	ldr	r3, [pc, #528]	; (8001b5c <BMS_CAN_Tx+0x690>)
 800194a:	7b1a      	ldrb	r2, [r3, #12]
 800194c:	4b84      	ldr	r3, [pc, #528]	; (8001b60 <BMS_CAN_Tx+0x694>)
 800194e:	71da      	strb	r2, [r3, #7]

		//CAN Tx message #4
		Tx_Header.DLC = 8;
 8001950:	4b81      	ldr	r3, [pc, #516]	; (8001b58 <BMS_CAN_Tx+0x68c>)
 8001952:	2208      	movs	r2, #8
 8001954:	611a      	str	r2, [r3, #16]
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8001956:	bf00      	nop
 8001958:	4882      	ldr	r0, [pc, #520]	; (8001b64 <BMS_CAN_Tx+0x698>)
 800195a:	f005 fd11 	bl	8007380 <HAL_CAN_GetTxMailboxesFreeLevel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f9      	beq.n	8001958 <BMS_CAN_Tx+0x48c>
		if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8001964:	4b80      	ldr	r3, [pc, #512]	; (8001b68 <BMS_CAN_Tx+0x69c>)
 8001966:	4a7e      	ldr	r2, [pc, #504]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001968:	497b      	ldr	r1, [pc, #492]	; (8001b58 <BMS_CAN_Tx+0x68c>)
 800196a:	487e      	ldr	r0, [pc, #504]	; (8001b64 <BMS_CAN_Tx+0x698>)
 800196c:	f005 fc2e 	bl	80071cc <HAL_CAN_AddTxMessage>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <BMS_CAN_Tx+0x4ae>
 8001976:	f001 f965 	bl	8002c44 <Error_Handler>
		i=1000;
 800197a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197e:	607b      	str	r3, [r7, #4]
		while(i>1) i--;
 8001980:	e002      	b.n	8001988 <BMS_CAN_Tx+0x4bc>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3b01      	subs	r3, #1
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b01      	cmp	r3, #1
 800198c:	dcf9      	bgt.n	8001982 <BMS_CAN_Tx+0x4b6>

		// CAN ID transmit #5
		Tx_Header.ExtId=(0x0B5<<20|UNIQUE_Code);  //b5
 800198e:	4b71      	ldr	r3, [pc, #452]	; (8001b54 <BMS_CAN_Tx+0x688>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f043 6335 	orr.w	r3, r3, #189792256	; 0xb500000
 8001996:	4a70      	ldr	r2, [pc, #448]	; (8001b58 <BMS_CAN_Tx+0x68c>)
 8001998:	6053      	str	r3, [r2, #4]
		//CAN Data #4
		Tx_data[0]=vcell_15databyte[4].m_bytes[1];
 800199a:	4b70      	ldr	r3, [pc, #448]	; (8001b5c <BMS_CAN_Tx+0x690>)
 800199c:	7c5a      	ldrb	r2, [r3, #17]
 800199e:	4b70      	ldr	r3, [pc, #448]	; (8001b60 <BMS_CAN_Tx+0x694>)
 80019a0:	701a      	strb	r2, [r3, #0]
		Tx_data[1]=vcell_15databyte[4].m_bytes[0];
 80019a2:	4b6e      	ldr	r3, [pc, #440]	; (8001b5c <BMS_CAN_Tx+0x690>)
 80019a4:	7c1a      	ldrb	r2, [r3, #16]
 80019a6:	4b6e      	ldr	r3, [pc, #440]	; (8001b60 <BMS_CAN_Tx+0x694>)
 80019a8:	705a      	strb	r2, [r3, #1]
		Tx_data[2]=vcell_15databyte[5].m_bytes[1];
 80019aa:	4b6c      	ldr	r3, [pc, #432]	; (8001b5c <BMS_CAN_Tx+0x690>)
 80019ac:	7d5a      	ldrb	r2, [r3, #21]
 80019ae:	4b6c      	ldr	r3, [pc, #432]	; (8001b60 <BMS_CAN_Tx+0x694>)
 80019b0:	709a      	strb	r2, [r3, #2]
		Tx_data[3]=vcell_15databyte[5].m_bytes[0];
 80019b2:	4b6a      	ldr	r3, [pc, #424]	; (8001b5c <BMS_CAN_Tx+0x690>)
 80019b4:	7d1a      	ldrb	r2, [r3, #20]
 80019b6:	4b6a      	ldr	r3, [pc, #424]	; (8001b60 <BMS_CAN_Tx+0x694>)
 80019b8:	70da      	strb	r2, [r3, #3]
		Tx_data[4]=vcell_15databyte[6].m_bytes[1];
 80019ba:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <BMS_CAN_Tx+0x690>)
 80019bc:	7e5a      	ldrb	r2, [r3, #25]
 80019be:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <BMS_CAN_Tx+0x694>)
 80019c0:	711a      	strb	r2, [r3, #4]
		Tx_data[5]=vcell_15databyte[6].m_bytes[0];
 80019c2:	4b66      	ldr	r3, [pc, #408]	; (8001b5c <BMS_CAN_Tx+0x690>)
 80019c4:	7e1a      	ldrb	r2, [r3, #24]
 80019c6:	4b66      	ldr	r3, [pc, #408]	; (8001b60 <BMS_CAN_Tx+0x694>)
 80019c8:	715a      	strb	r2, [r3, #5]
		Tx_data[6]=vcell_15databyte[7].m_bytes[1];
 80019ca:	4b64      	ldr	r3, [pc, #400]	; (8001b5c <BMS_CAN_Tx+0x690>)
 80019cc:	7f5a      	ldrb	r2, [r3, #29]
 80019ce:	4b64      	ldr	r3, [pc, #400]	; (8001b60 <BMS_CAN_Tx+0x694>)
 80019d0:	719a      	strb	r2, [r3, #6]
		Tx_data[7]=vcell_15databyte[7].m_bytes[0];
 80019d2:	4b62      	ldr	r3, [pc, #392]	; (8001b5c <BMS_CAN_Tx+0x690>)
 80019d4:	7f1a      	ldrb	r2, [r3, #28]
 80019d6:	4b62      	ldr	r3, [pc, #392]	; (8001b60 <BMS_CAN_Tx+0x694>)
 80019d8:	71da      	strb	r2, [r3, #7]
		//CAN Tx message #4
		Tx_Header.DLC = 8;
 80019da:	4b5f      	ldr	r3, [pc, #380]	; (8001b58 <BMS_CAN_Tx+0x68c>)
 80019dc:	2208      	movs	r2, #8
 80019de:	611a      	str	r2, [r3, #16]
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 80019e0:	bf00      	nop
 80019e2:	4860      	ldr	r0, [pc, #384]	; (8001b64 <BMS_CAN_Tx+0x698>)
 80019e4:	f005 fccc 	bl	8007380 <HAL_CAN_GetTxMailboxesFreeLevel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f9      	beq.n	80019e2 <BMS_CAN_Tx+0x516>
		if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 80019ee:	4b5e      	ldr	r3, [pc, #376]	; (8001b68 <BMS_CAN_Tx+0x69c>)
 80019f0:	4a5b      	ldr	r2, [pc, #364]	; (8001b60 <BMS_CAN_Tx+0x694>)
 80019f2:	4959      	ldr	r1, [pc, #356]	; (8001b58 <BMS_CAN_Tx+0x68c>)
 80019f4:	485b      	ldr	r0, [pc, #364]	; (8001b64 <BMS_CAN_Tx+0x698>)
 80019f6:	f005 fbe9 	bl	80071cc <HAL_CAN_AddTxMessage>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <BMS_CAN_Tx+0x538>
 8001a00:	f001 f920 	bl	8002c44 <Error_Handler>
		i=1000;
 8001a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a08:	607b      	str	r3, [r7, #4]
		while(i>1) i--;
 8001a0a:	e002      	b.n	8001a12 <BMS_CAN_Tx+0x546>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	dcf9      	bgt.n	8001a0c <BMS_CAN_Tx+0x540>

		// CAN ID transmit #6
		Tx_Header.ExtId=(0x0B6<<20|UNIQUE_Code); //b6
 8001a18:	4b4e      	ldr	r3, [pc, #312]	; (8001b54 <BMS_CAN_Tx+0x688>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f043 6336 	orr.w	r3, r3, #190840832	; 0xb600000
 8001a20:	4a4d      	ldr	r2, [pc, #308]	; (8001b58 <BMS_CAN_Tx+0x68c>)
 8001a22:	6053      	str	r3, [r2, #4]
		//CAN Data #4
		Tx_data[0]=vcell_15databyte[8].m_bytes[1];
 8001a24:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001a26:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001a2a:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001a2c:	701a      	strb	r2, [r3, #0]
		Tx_data[1]=vcell_15databyte[8].m_bytes[0];
 8001a2e:	4b4b      	ldr	r3, [pc, #300]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001a30:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001a34:	4b4a      	ldr	r3, [pc, #296]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001a36:	705a      	strb	r2, [r3, #1]
		Tx_data[2]=vcell_15databyte[9].m_bytes[1];
 8001a38:	4b48      	ldr	r3, [pc, #288]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001a3a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001a3e:	4b48      	ldr	r3, [pc, #288]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001a40:	709a      	strb	r2, [r3, #2]
		Tx_data[3]=vcell_15databyte[9].m_bytes[0];
 8001a42:	4b46      	ldr	r3, [pc, #280]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001a44:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001a48:	4b45      	ldr	r3, [pc, #276]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001a4a:	70da      	strb	r2, [r3, #3]
		Tx_data[4]=vcell_15databyte[10].m_bytes[1];
 8001a4c:	4b43      	ldr	r3, [pc, #268]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001a4e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001a52:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001a54:	711a      	strb	r2, [r3, #4]
		Tx_data[5]=vcell_15databyte[10].m_bytes[0];
 8001a56:	4b41      	ldr	r3, [pc, #260]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001a58:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001a5c:	4b40      	ldr	r3, [pc, #256]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001a5e:	715a      	strb	r2, [r3, #5]
		Tx_data[6]=vcell_15databyte[11].m_bytes[1];
 8001a60:	4b3e      	ldr	r3, [pc, #248]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001a62:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8001a66:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001a68:	719a      	strb	r2, [r3, #6]
		Tx_data[7]=vcell_15databyte[11].m_bytes[0];
 8001a6a:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001a6c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001a70:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001a72:	71da      	strb	r2, [r3, #7]
		//CAN Tx message #4
		Tx_Header.DLC = 8;
 8001a74:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <BMS_CAN_Tx+0x68c>)
 8001a76:	2208      	movs	r2, #8
 8001a78:	611a      	str	r2, [r3, #16]
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8001a7a:	bf00      	nop
 8001a7c:	4839      	ldr	r0, [pc, #228]	; (8001b64 <BMS_CAN_Tx+0x698>)
 8001a7e:	f005 fc7f 	bl	8007380 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f9      	beq.n	8001a7c <BMS_CAN_Tx+0x5b0>
		if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8001a88:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <BMS_CAN_Tx+0x69c>)
 8001a8a:	4a35      	ldr	r2, [pc, #212]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001a8c:	4932      	ldr	r1, [pc, #200]	; (8001b58 <BMS_CAN_Tx+0x68c>)
 8001a8e:	4835      	ldr	r0, [pc, #212]	; (8001b64 <BMS_CAN_Tx+0x698>)
 8001a90:	f005 fb9c 	bl	80071cc <HAL_CAN_AddTxMessage>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <BMS_CAN_Tx+0x5d2>
 8001a9a:	f001 f8d3 	bl	8002c44 <Error_Handler>
		i=1000;
 8001a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa2:	607b      	str	r3, [r7, #4]
		while(i>1) i--;
 8001aa4:	e002      	b.n	8001aac <BMS_CAN_Tx+0x5e0>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	dcf9      	bgt.n	8001aa6 <BMS_CAN_Tx+0x5da>

		// CAN ID transmit #4
		Tx_Header.ExtId=(0x0B7<<20|UNIQUE_Code); //b7
 8001ab2:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <BMS_CAN_Tx+0x688>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f043 6337 	orr.w	r3, r3, #191889408	; 0xb700000
 8001aba:	4a27      	ldr	r2, [pc, #156]	; (8001b58 <BMS_CAN_Tx+0x68c>)
 8001abc:	6053      	str	r3, [r2, #4]
		//CAN Data #4
		Tx_data[0]=vcell_15databyte[12].m_bytes[1];
 8001abe:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001ac0:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8001ac4:	4b26      	ldr	r3, [pc, #152]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001ac6:	701a      	strb	r2, [r3, #0]
		Tx_data[1]=vcell_15databyte[12].m_bytes[0];
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001aca:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001ace:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001ad0:	705a      	strb	r2, [r3, #1]
		Tx_data[2]=vcell_15databyte[13].m_bytes[1];
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001ad4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8001ad8:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001ada:	709a      	strb	r2, [r3, #2]
		Tx_data[3]=vcell_15databyte[13].m_bytes[0];
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001ade:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001ae4:	70da      	strb	r2, [r3, #3]
		Tx_data[4]=vcell_15databyte[14].m_bytes[1];
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001ae8:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001aee:	711a      	strb	r2, [r3, #4]
		Tx_data[5]=vcell_15databyte[14].m_bytes[0];
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001af2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001af8:	715a      	strb	r2, [r3, #5]
		Tx_data[6]=vcell_15databyte[14].m_bytes[1];
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001afc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001b02:	719a      	strb	r2, [r3, #6]
		Tx_data[7]=vcell_15databyte[14].m_bytes[0];
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <BMS_CAN_Tx+0x690>)
 8001b06:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001b0c:	71da      	strb	r2, [r3, #7]
		//CAN Tx message #4
		Tx_Header.DLC = 8;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <BMS_CAN_Tx+0x68c>)
 8001b10:	2208      	movs	r2, #8
 8001b12:	611a      	str	r2, [r3, #16]
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8001b14:	bf00      	nop
 8001b16:	4813      	ldr	r0, [pc, #76]	; (8001b64 <BMS_CAN_Tx+0x698>)
 8001b18:	f005 fc32 	bl	8007380 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f9      	beq.n	8001b16 <BMS_CAN_Tx+0x64a>
		if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <BMS_CAN_Tx+0x69c>)
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <BMS_CAN_Tx+0x694>)
 8001b26:	490c      	ldr	r1, [pc, #48]	; (8001b58 <BMS_CAN_Tx+0x68c>)
 8001b28:	480e      	ldr	r0, [pc, #56]	; (8001b64 <BMS_CAN_Tx+0x698>)
 8001b2a:	f005 fb4f 	bl	80071cc <HAL_CAN_AddTxMessage>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <BMS_CAN_Tx+0x66c>
 8001b34:	f001 f886 	bl	8002c44 <Error_Handler>
		i=1000;
 8001b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3c:	607b      	str	r3, [r7, #4]
		while(i>1) i--;
 8001b3e:	e002      	b.n	8001b46 <BMS_CAN_Tx+0x67a>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	dcf9      	bgt.n	8001b40 <BMS_CAN_Tx+0x674>
			if(Rx_data[6]==0xAA && identified==1){
				Handshaking = 1;
			}
		}
	}*/
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000008 	.word	0x20000008
 8001b58:	20000774 	.word	0x20000774
 8001b5c:	200006e4 	.word	0x200006e4
 8001b60:	200006b4 	.word	0x200006b4
 8001b64:	2000080c 	.word	0x2000080c
 8001b68:	20000758 	.word	0x20000758

08001b6c <BMS_CAN_Rx>:

void BMS_CAN_Rx()
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &Rx_Header, Rx_data)== HAL_OK)
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <BMS_CAN_Rx+0x74>)
 8001b72:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <BMS_CAN_Rx+0x78>)
 8001b74:	2100      	movs	r1, #0
 8001b76:	481c      	ldr	r0, [pc, #112]	; (8001be8 <BMS_CAN_Rx+0x7c>)
 8001b78:	f005 fc36 	bl	80073e8 <HAL_CAN_GetRxMessage>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d12c      	bne.n	8001bdc <BMS_CAN_Rx+0x70>

		if(Rx_Header.StdId==0x1B2){
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <BMS_CAN_Rx+0x78>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
 8001b8a:	d127      	bne.n	8001bdc <BMS_CAN_Rx+0x70>
			flag_start_shutdown=Rx_data[0]&0x01;
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <BMS_CAN_Rx+0x74>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <BMS_CAN_Rx+0x80>)
 8001b98:	701a      	strb	r2, [r3, #0]
			BMS_mode=(Rx_data[0]>>1)&0x03;
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <BMS_CAN_Rx+0x74>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	085b      	lsrs	r3, r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <BMS_CAN_Rx+0x84>)
 8001baa:	701a      	strb	r2, [r3, #0]
			Clear_Trip_overcurrentdischarge=(Rx_data[0]>>3)&&0x01;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <BMS_CAN_Rx+0x74>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	08db      	lsrs	r3, r3, #3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bf14      	ite	ne
 8001bb8:	2301      	movne	r3, #1
 8001bba:	2300      	moveq	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <BMS_CAN_Rx+0x88>)
 8001bc2:	701a      	strb	r2, [r3, #0]
			Clear_Trip_undervoltage=(Rx_data[0]>>4)&&0x01;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <BMS_CAN_Rx+0x74>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf14      	ite	ne
 8001bd0:	2301      	movne	r3, #1
 8001bd2:	2300      	moveq	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <BMS_CAN_Rx+0x8c>)
 8001bda:	701a      	strb	r2, [r3, #0]
		}

}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200006bc 	.word	0x200006bc
 8001be4:	2000073c 	.word	0x2000073c
 8001be8:	2000080c 	.word	0x2000080c
 8001bec:	20000960 	.word	0x20000960
 8001bf0:	20000b94 	.word	0x20000b94
 8001bf4:	20001050 	.word	0x20001050
 8001bf8:	200010a8 	.word	0x200010a8

08001bfc <BMS_CAN_Config>:


void BMS_CAN_Config()
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
	/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001c22:	2301      	movs	r3, #1
 8001c24:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001c26:	230e      	movs	r3, #14
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) Error_Handler();
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480e      	ldr	r0, [pc, #56]	; (8001c68 <BMS_CAN_Config+0x6c>)
 8001c30:	f005 f9bf 	bl	8006fb2 <HAL_CAN_ConfigFilter>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <BMS_CAN_Config+0x42>
 8001c3a:	f001 f803 	bl	8002c44 <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan) != HAL_OK) Error_Handler();
 8001c3e:	480a      	ldr	r0, [pc, #40]	; (8001c68 <BMS_CAN_Config+0x6c>)
 8001c40:	f005 fa80 	bl	8007144 <HAL_CAN_Start>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <BMS_CAN_Config+0x52>
 8001c4a:	f000 fffb 	bl	8002c44 <Error_Handler>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <BMS_CAN_Config+0x70>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <BMS_CAN_Config+0x70>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_EXT;
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <BMS_CAN_Config+0x70>)
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	609a      	str	r2, [r3, #8]
}
 8001c60:	bf00      	nop
 8001c62:	3728      	adds	r7, #40	; 0x28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2000080c 	.word	0x2000080c
 8001c6c:	20000774 	.word	0x20000774

08001c70 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001c80:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <MX_ADC1_Init+0x108>)
 8001c82:	4a3e      	ldr	r2, [pc, #248]	; (8001d7c <MX_ADC1_Init+0x10c>)
 8001c84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c86:	4b3c      	ldr	r3, [pc, #240]	; (8001d78 <MX_ADC1_Init+0x108>)
 8001c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c8e:	4b3a      	ldr	r3, [pc, #232]	; (8001d78 <MX_ADC1_Init+0x108>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c94:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <MX_ADC1_Init+0x108>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c9a:	4b37      	ldr	r3, [pc, #220]	; (8001d78 <MX_ADC1_Init+0x108>)
 8001c9c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001ca0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ca2:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <MX_ADC1_Init+0x108>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8001ca8:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <MX_ADC1_Init+0x108>)
 8001caa:	2206      	movs	r2, #6
 8001cac:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cae:	4832      	ldr	r0, [pc, #200]	; (8001d78 <MX_ADC1_Init+0x108>)
 8001cb0:	f004 fcc8 	bl	8006644 <HAL_ADC_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001cba:	f000 ffc3 	bl	8002c44 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	4619      	mov	r1, r3
 8001cce:	482a      	ldr	r0, [pc, #168]	; (8001d78 <MX_ADC1_Init+0x108>)
 8001cd0:	f004 fe8a 	bl	80069e8 <HAL_ADC_ConfigChannel>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001cda:	f000 ffb3 	bl	8002c44 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001cde:	2305      	movs	r3, #5
 8001ce0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4823      	ldr	r0, [pc, #140]	; (8001d78 <MX_ADC1_Init+0x108>)
 8001cec:	f004 fe7c 	bl	80069e8 <HAL_ADC_ConfigChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001cf6:	f000 ffa5 	bl	8002c44 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	481c      	ldr	r0, [pc, #112]	; (8001d78 <MX_ADC1_Init+0x108>)
 8001d08:	f004 fe6e 	bl	80069e8 <HAL_ADC_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001d12:	f000 ff97 	bl	8002c44 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d16:	2302      	movs	r3, #2
 8001d18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4815      	ldr	r0, [pc, #84]	; (8001d78 <MX_ADC1_Init+0x108>)
 8001d24:	f004 fe60 	bl	80069e8 <HAL_ADC_ConfigChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001d2e:	f000 ff89 	bl	8002c44 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d32:	2303      	movs	r3, #3
 8001d34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001d36:	2305      	movs	r3, #5
 8001d38:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001d3a:	2306      	movs	r3, #6
 8001d3c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	4619      	mov	r1, r3
 8001d42:	480d      	ldr	r0, [pc, #52]	; (8001d78 <MX_ADC1_Init+0x108>)
 8001d44:	f004 fe50 	bl	80069e8 <HAL_ADC_ConfigChannel>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001d4e:	f000 ff79 	bl	8002c44 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d52:	2304      	movs	r3, #4
 8001d54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001d56:	2306      	movs	r3, #6
 8001d58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <MX_ADC1_Init+0x108>)
 8001d60:	f004 fe42 	bl	80069e8 <HAL_ADC_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001d6a:	f000 ff6b 	bl	8002c44 <Error_Handler>
  }

}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000798 	.word	0x20000798
 8001d7c:	40012400 	.word	0x40012400

08001d80 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a28      	ldr	r2, [pc, #160]	; (8001e3c <HAL_ADC_MspInit+0xbc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d149      	bne.n	8001e34 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_ADC_MspInit+0xc0>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <HAL_ADC_MspInit+0xc0>)
 8001da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001daa:	6193      	str	r3, [r2, #24]
 8001dac:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_ADC_MspInit+0xc0>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_ADC_MspInit+0xc0>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a20      	ldr	r2, [pc, #128]	; (8001e40 <HAL_ADC_MspInit+0xc0>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_ADC_MspInit+0xc0>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001dd0:	233f      	movs	r3, #63	; 0x3f
 8001dd2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 0310 	add.w	r3, r7, #16
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4819      	ldr	r0, [pc, #100]	; (8001e44 <HAL_ADC_MspInit+0xc4>)
 8001de0:	f006 f95c 	bl	800809c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_ADC_MspInit+0xc8>)
 8001de6:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <HAL_ADC_MspInit+0xcc>)
 8001de8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_ADC_MspInit+0xc8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df0:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_ADC_MspInit+0xc8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <HAL_ADC_MspInit+0xc8>)
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_ADC_MspInit+0xc8>)
 8001dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e02:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e04:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_ADC_MspInit+0xc8>)
 8001e06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e0a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_ADC_MspInit+0xc8>)
 8001e0e:	2220      	movs	r2, #32
 8001e10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_ADC_MspInit+0xc8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e18:	480b      	ldr	r0, [pc, #44]	; (8001e48 <HAL_ADC_MspInit+0xc8>)
 8001e1a:	f005 ff2b 	bl	8007c74 <HAL_DMA_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001e24:	f000 ff0e 	bl	8002c44 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_ADC_MspInit+0xc8>)
 8001e2c:	621a      	str	r2, [r3, #32]
 8001e2e:	4a06      	ldr	r2, [pc, #24]	; (8001e48 <HAL_ADC_MspInit+0xc8>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001e34:	bf00      	nop
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40012400 	.word	0x40012400
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010800 	.word	0x40010800
 8001e48:	200007c8 	.word	0x200007c8
 8001e4c:	40020008 	.word	0x40020008

08001e50 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 8001e54:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <MX_CAN_Init+0x64>)
 8001e56:	4a18      	ldr	r2, [pc, #96]	; (8001eb8 <MX_CAN_Init+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8001e5a:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <MX_CAN_Init+0x64>)
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <MX_CAN_Init+0x64>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e66:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <MX_CAN_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <MX_CAN_Init+0x64>)
 8001e6e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001e72:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <MX_CAN_Init+0x64>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <MX_CAN_Init+0x64>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <MX_CAN_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <MX_CAN_Init+0x64>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <MX_CAN_Init+0x64>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <MX_CAN_Init+0x64>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <MX_CAN_Init+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001e9e:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <MX_CAN_Init+0x64>)
 8001ea0:	f004 ff8c 	bl	8006dbc <HAL_CAN_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8001eaa:	f000 fecb 	bl	8002c44 <Error_Handler>
  }

}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	2000080c 	.word	0x2000080c
 8001eb8:	40006400 	.word	0x40006400

08001ebc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a2d      	ldr	r2, [pc, #180]	; (8001f8c <HAL_CAN_MspInit+0xd0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d153      	bne.n	8001f84 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001edc:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <HAL_CAN_MspInit+0xd4>)
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	4a2b      	ldr	r2, [pc, #172]	; (8001f90 <HAL_CAN_MspInit+0xd4>)
 8001ee2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ee6:	61d3      	str	r3, [r2, #28]
 8001ee8:	4b29      	ldr	r3, [pc, #164]	; (8001f90 <HAL_CAN_MspInit+0xd4>)
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef4:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <HAL_CAN_MspInit+0xd4>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a25      	ldr	r2, [pc, #148]	; (8001f90 <HAL_CAN_MspInit+0xd4>)
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_CAN_MspInit+0xd4>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	481c      	ldr	r0, [pc, #112]	; (8001f94 <HAL_CAN_MspInit+0xd8>)
 8001f22:	f006 f8bb 	bl	800809c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4816      	ldr	r0, [pc, #88]	; (8001f94 <HAL_CAN_MspInit+0xd8>)
 8001f3c:	f006 f8ae 	bl	800809c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_CAN_MspInit+0xdc>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <HAL_CAN_MspInit+0xdc>)
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2100      	movs	r1, #0
 8001f68:	2015      	movs	r0, #21
 8001f6a:	f005 fe4c 	bl	8007c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001f6e:	2015      	movs	r0, #21
 8001f70:	f005 fe65 	bl	8007c3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2100      	movs	r1, #0
 8001f78:	2016      	movs	r0, #22
 8001f7a:	f005 fe44 	bl	8007c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001f7e:	2016      	movs	r0, #22
 8001f80:	f005 fe5d 	bl	8007c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	; 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40006400 	.word	0x40006400
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010c00 	.word	0x40010c00
 8001f98:	40010000 	.word	0x40010000

08001f9c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <MX_DMA_Init+0x38>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <MX_DMA_Init+0x38>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6153      	str	r3, [r2, #20]
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_DMA_Init+0x38>)
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	200b      	movs	r0, #11
 8001fc0:	f005 fe21 	bl	8007c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fc4:	200b      	movs	r0, #11
 8001fc6:	f005 fe3a 	bl	8007c3e <HAL_NVIC_EnableIRQ>

}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fec:	4b3f      	ldr	r3, [pc, #252]	; (80020ec <MX_GPIO_Init+0x114>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a3e      	ldr	r2, [pc, #248]	; (80020ec <MX_GPIO_Init+0x114>)
 8001ff2:	f043 0310 	orr.w	r3, r3, #16
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b3c      	ldr	r3, [pc, #240]	; (80020ec <MX_GPIO_Init+0x114>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002004:	4b39      	ldr	r3, [pc, #228]	; (80020ec <MX_GPIO_Init+0x114>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a38      	ldr	r2, [pc, #224]	; (80020ec <MX_GPIO_Init+0x114>)
 800200a:	f043 0304 	orr.w	r3, r3, #4
 800200e:	6193      	str	r3, [r2, #24]
 8002010:	4b36      	ldr	r3, [pc, #216]	; (80020ec <MX_GPIO_Init+0x114>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800201c:	4b33      	ldr	r3, [pc, #204]	; (80020ec <MX_GPIO_Init+0x114>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a32      	ldr	r2, [pc, #200]	; (80020ec <MX_GPIO_Init+0x114>)
 8002022:	f043 0308 	orr.w	r3, r3, #8
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b30      	ldr	r3, [pc, #192]	; (80020ec <MX_GPIO_Init+0x114>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZ_Pin|LED_Pin|GPIO_PIN_5|BAT_CUT_N_Pin, GPIO_PIN_RESET);
 8002034:	2200      	movs	r2, #0
 8002036:	f44f 710d 	mov.w	r1, #564	; 0x234
 800203a:	482d      	ldr	r0, [pc, #180]	; (80020f0 <MX_GPIO_Init+0x118>)
 800203c:	f006 f99f 	bl	800837e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_SPI1_Pin|GPIO_PIN_1|MEM_WP_Pin, GPIO_PIN_RESET);
 8002040:	2200      	movs	r2, #0
 8002042:	f241 0103 	movw	r1, #4099	; 0x1003
 8002046:	482b      	ldr	r0, [pc, #172]	; (80020f4 <MX_GPIO_Init+0x11c>)
 8002048:	f006 f999 	bl	800837e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002052:	4829      	ldr	r0, [pc, #164]	; (80020f8 <MX_GPIO_Init+0x120>)
 8002054:	f006 f993 	bl	800837e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIP1_Pin|DIP2_Pin;
 8002058:	2303      	movs	r3, #3
 800205a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002060:	2302      	movs	r3, #2
 8002062:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002064:	f107 0310 	add.w	r3, r7, #16
 8002068:	4619      	mov	r1, r3
 800206a:	4821      	ldr	r0, [pc, #132]	; (80020f0 <MX_GPIO_Init+0x118>)
 800206c:	f006 f816 	bl	800809c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PC5 PCPin */
  GPIO_InitStruct.Pin = BUZZ_Pin|LED_Pin|GPIO_PIN_5|BAT_CUT_N_Pin;
 8002070:	f44f 730d 	mov.w	r3, #564	; 0x234
 8002074:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002076:	2301      	movs	r3, #1
 8002078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2302      	movs	r3, #2
 8002080:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002082:	f107 0310 	add.w	r3, r7, #16
 8002086:	4619      	mov	r1, r3
 8002088:	4819      	ldr	r0, [pc, #100]	; (80020f0 <MX_GPIO_Init+0x118>)
 800208a:	f006 f807 	bl	800809c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB1 PBPin */
  GPIO_InitStruct.Pin = CS_SPI1_Pin|GPIO_PIN_1|MEM_WP_Pin;
 800208e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002092:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002094:	2301      	movs	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2302      	movs	r3, #2
 800209e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	4619      	mov	r1, r3
 80020a6:	4813      	ldr	r0, [pc, #76]	; (80020f4 <MX_GPIO_Init+0x11c>)
 80020a8:	f005 fff8 	bl	800809c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020ac:	2304      	movs	r3, #4
 80020ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	4619      	mov	r1, r3
 80020be:	480d      	ldr	r0, [pc, #52]	; (80020f4 <MX_GPIO_Init+0x11c>)
 80020c0:	f005 ffec 	bl	800809c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BAT_CUT_P_Pin;
 80020c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ca:	2301      	movs	r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2302      	movs	r3, #2
 80020d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAT_CUT_P_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f107 0310 	add.w	r3, r7, #16
 80020da:	4619      	mov	r1, r3
 80020dc:	4806      	ldr	r0, [pc, #24]	; (80020f8 <MX_GPIO_Init+0x120>)
 80020de:	f005 ffdd 	bl	800809c <HAL_GPIO_Init>

}
 80020e2:	bf00      	nop
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40011000 	.word	0x40011000
 80020f4:	40010c00 	.word	0x40010c00
 80020f8:	40010800 	.word	0x40010800

080020fc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <MX_I2C1_Init+0x50>)
 8002102:	4a13      	ldr	r2, [pc, #76]	; (8002150 <MX_I2C1_Init+0x54>)
 8002104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <MX_I2C1_Init+0x50>)
 8002108:	4a12      	ldr	r2, [pc, #72]	; (8002154 <MX_I2C1_Init+0x58>)
 800210a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <MX_I2C1_Init+0x50>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_I2C1_Init+0x50>)
 8002114:	2200      	movs	r2, #0
 8002116:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_I2C1_Init+0x50>)
 800211a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800211e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <MX_I2C1_Init+0x50>)
 8002122:	2200      	movs	r2, #0
 8002124:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_I2C1_Init+0x50>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <MX_I2C1_Init+0x50>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_I2C1_Init+0x50>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002138:	4804      	ldr	r0, [pc, #16]	; (800214c <MX_I2C1_Init+0x50>)
 800213a:	f006 f951 	bl	80083e0 <HAL_I2C_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002144:	f000 fd7e 	bl	8002c44 <Error_Handler>
  }

}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000834 	.word	0x20000834
 8002150:	40005400 	.word	0x40005400
 8002154:	00061a80 	.word	0x00061a80

08002158 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <MX_I2C2_Init+0x50>)
 800215e:	4a13      	ldr	r2, [pc, #76]	; (80021ac <MX_I2C2_Init+0x54>)
 8002160:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <MX_I2C2_Init+0x50>)
 8002164:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <MX_I2C2_Init+0x58>)
 8002166:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <MX_I2C2_Init+0x50>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <MX_I2C2_Init+0x50>)
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <MX_I2C2_Init+0x50>)
 8002176:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800217a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800217c:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <MX_I2C2_Init+0x50>)
 800217e:	2200      	movs	r2, #0
 8002180:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <MX_I2C2_Init+0x50>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002188:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <MX_I2C2_Init+0x50>)
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <MX_I2C2_Init+0x50>)
 8002190:	2200      	movs	r2, #0
 8002192:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002194:	4804      	ldr	r0, [pc, #16]	; (80021a8 <MX_I2C2_Init+0x50>)
 8002196:	f006 f923 	bl	80083e0 <HAL_I2C_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80021a0:	f000 fd50 	bl	8002c44 <Error_Handler>
  }

}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000888 	.word	0x20000888
 80021ac:	40005800 	.word	0x40005800
 80021b0:	000186a0 	.word	0x000186a0

080021b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0318 	add.w	r3, r7, #24
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a2b      	ldr	r2, [pc, #172]	; (800227c <HAL_I2C_MspInit+0xc8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d124      	bne.n	800221e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d4:	4b2a      	ldr	r3, [pc, #168]	; (8002280 <HAL_I2C_MspInit+0xcc>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	4a29      	ldr	r2, [pc, #164]	; (8002280 <HAL_I2C_MspInit+0xcc>)
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	6193      	str	r3, [r2, #24]
 80021e0:	4b27      	ldr	r3, [pc, #156]	; (8002280 <HAL_I2C_MspInit+0xcc>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021ec:	23c0      	movs	r3, #192	; 0xc0
 80021ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f0:	2312      	movs	r3, #18
 80021f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f8:	f107 0318 	add.w	r3, r7, #24
 80021fc:	4619      	mov	r1, r3
 80021fe:	4821      	ldr	r0, [pc, #132]	; (8002284 <HAL_I2C_MspInit+0xd0>)
 8002200:	f005 ff4c 	bl	800809c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_I2C_MspInit+0xcc>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	4a1d      	ldr	r2, [pc, #116]	; (8002280 <HAL_I2C_MspInit+0xcc>)
 800220a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800220e:	61d3      	str	r3, [r2, #28]
 8002210:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HAL_I2C_MspInit+0xcc>)
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800221c:	e029      	b.n	8002272 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a19      	ldr	r2, [pc, #100]	; (8002288 <HAL_I2C_MspInit+0xd4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d124      	bne.n	8002272 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_I2C_MspInit+0xcc>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	4a14      	ldr	r2, [pc, #80]	; (8002280 <HAL_I2C_MspInit+0xcc>)
 800222e:	f043 0308 	orr.w	r3, r3, #8
 8002232:	6193      	str	r3, [r2, #24]
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_I2C_MspInit+0xcc>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002240:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002246:	2312      	movs	r3, #18
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800224a:	2303      	movs	r3, #3
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224e:	f107 0318 	add.w	r3, r7, #24
 8002252:	4619      	mov	r1, r3
 8002254:	480b      	ldr	r0, [pc, #44]	; (8002284 <HAL_I2C_MspInit+0xd0>)
 8002256:	f005 ff21 	bl	800809c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_I2C_MspInit+0xcc>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4a08      	ldr	r2, [pc, #32]	; (8002280 <HAL_I2C_MspInit+0xcc>)
 8002260:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002264:	61d3      	str	r3, [r2, #28]
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_I2C_MspInit+0xcc>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
}
 8002272:	bf00      	nop
 8002274:	3728      	adds	r7, #40	; 0x28
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40005400 	.word	0x40005400
 8002280:	40021000 	.word	0x40021000
 8002284:	40010c00 	.word	0x40010c00
 8002288:	40005800 	.word	0x40005800

0800228c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <MX_IWDG_Init+0x2c>)
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <MX_IWDG_Init+0x30>)
 8002294:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <MX_IWDG_Init+0x2c>)
 8002298:	2205      	movs	r2, #5
 800229a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <MX_IWDG_Init+0x2c>)
 800229e:	f640 72ff 	movw	r2, #4095	; 0xfff
 80022a2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80022a4:	4804      	ldr	r0, [pc, #16]	; (80022b8 <MX_IWDG_Init+0x2c>)
 80022a6:	f006 fddf 	bl	8008e68 <HAL_IWDG_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80022b0:	f000 fcc8 	bl	8002c44 <Error_Handler>
  }

}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	200008dc 	.word	0x200008dc
 80022bc:	40003000 	.word	0x40003000

080022c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022c4:	f004 f93a 	bl	800653c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022c8:	f000 f8f4 	bl	80024b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //BMS_CAN_Config();
   HAL_FLASH_Unlock();
 80022cc:	f005 fec0 	bl	8008050 <HAL_FLASH_Unlock>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022d0:	f7ff fe82 	bl	8001fd8 <MX_GPIO_Init>
  MX_DMA_Init();
 80022d4:	f7ff fe62 	bl	8001f9c <MX_DMA_Init>
  MX_ADC1_Init();
 80022d8:	f7ff fcca 	bl	8001c70 <MX_ADC1_Init>
  MX_CAN_Init();
 80022dc:	f7ff fdb8 	bl	8001e50 <MX_CAN_Init>
  MX_I2C1_Init();
 80022e0:	f7ff ff0c 	bl	80020fc <MX_I2C1_Init>
  MX_I2C2_Init();
 80022e4:	f7ff ff38 	bl	8002158 <MX_I2C2_Init>
  MX_SPI1_Init();
 80022e8:	f001 fdb2 	bl	8003e50 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80022ec:	f004 f810 	bl	8006310 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80022f0:	f004 f838 	bl	8006364 <MX_USART3_UART_Init>
  MX_IWDG_Init();
 80022f4:	f7ff ffca 	bl	800228c <MX_IWDG_Init>
  MX_TIM2_Init();
 80022f8:	f003 ff30 	bl	800615c <MX_TIM2_Init>
  MX_TIM3_Init();
 80022fc:	f003 ff7a 	bl	80061f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //USART3 untuk RS485, tidak digunakan untuk BOARD v1.

  ltc6812_GPIO_Config();
 8002300:	f000 fca6 	bl	8002c50 <ltc6812_GPIO_Config>
  ltc6812_SPIInit();
 8002304:	f000 fd00 	bl	8002d08 <ltc6812_SPIInit>

  HAL_Delay(10);
 8002308:	200a      	movs	r0, #10
 800230a:	f004 f979 	bl	8006600 <HAL_Delay>
  read_v_15cell(vcell_15data_digi, vcell_15data);
 800230e:	495c      	ldr	r1, [pc, #368]	; (8002480 <main+0x1c0>)
 8002310:	485c      	ldr	r0, [pc, #368]	; (8002484 <main+0x1c4>)
 8002312:	f000 ff1d 	bl	8003150 <read_v_15cell>
  for(ij=0,v_cell_tot=0;ij<15;ij++)
 8002316:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <main+0x1c8>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	4b5b      	ldr	r3, [pc, #364]	; (800248c <main+0x1cc>)
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e013      	b.n	800234e <main+0x8e>
  {
 	v_cell_tot+=vcell_15data[ij];
 8002326:	4b58      	ldr	r3, [pc, #352]	; (8002488 <main+0x1c8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a55      	ldr	r2, [pc, #340]	; (8002480 <main+0x1c0>)
 800232c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002330:	4b56      	ldr	r3, [pc, #344]	; (800248c <main+0x1cc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4619      	mov	r1, r3
 8002336:	4610      	mov	r0, r2
 8002338:	f7fe fbfc 	bl	8000b34 <__addsf3>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	4b52      	ldr	r3, [pc, #328]	; (800248c <main+0x1cc>)
 8002342:	601a      	str	r2, [r3, #0]
  for(ij=0,v_cell_tot=0;ij<15;ij++)
 8002344:	4b50      	ldr	r3, [pc, #320]	; (8002488 <main+0x1c8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	4a4f      	ldr	r2, [pc, #316]	; (8002488 <main+0x1c8>)
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <main+0x1c8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b0e      	cmp	r3, #14
 8002354:	dde7      	ble.n	8002326 <main+0x66>
  }
  HAL_Delay(10);
 8002356:	200a      	movs	r0, #10
 8002358:	f004 f952 	bl	8006600 <HAL_Delay>

  BMS_CAN_Config();
 800235c:	f7ff fc4e 	bl	8001bfc <BMS_CAN_Config>

  BMS_ON_InitBeep();
 8002360:	f000 f902 	bl	8002568 <BMS_ON_InitBeep>

  BATT_Start_Up=1;
 8002364:	4b4a      	ldr	r3, [pc, #296]	; (8002490 <main+0x1d0>)
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]

  HAL_Delay(1000);
 800236a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800236e:	f004 f947 	bl	8006600 <HAL_Delay>

  flag_start_shutdown=1;
 8002372:	4b48      	ldr	r3, [pc, #288]	; (8002494 <main+0x1d4>)
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(DIP1 && !DIP2)			BMS_ScreenMode_ForceBalance();		//Mode Force Balancing
 8002378:	2101      	movs	r1, #1
 800237a:	4847      	ldr	r0, [pc, #284]	; (8002498 <main+0x1d8>)
 800237c:	f005 ffe8 	bl	8008350 <HAL_GPIO_ReadPin>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <main+0xda>
 8002386:	2102      	movs	r1, #2
 8002388:	4843      	ldr	r0, [pc, #268]	; (8002498 <main+0x1d8>)
 800238a:	f005 ffe1 	bl	8008350 <HAL_GPIO_ReadPin>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d102      	bne.n	800239a <main+0xda>
 8002394:	f000 fbd6 	bl	8002b44 <BMS_ScreenMode_ForceBalance>
 8002398:	e023      	b.n	80023e2 <main+0x122>
	  else if(!DIP1 && DIP2) 	BMS_ScreenMode_Locked_Ship();		//Mode Shipping
 800239a:	2101      	movs	r1, #1
 800239c:	483e      	ldr	r0, [pc, #248]	; (8002498 <main+0x1d8>)
 800239e:	f005 ffd7 	bl	8008350 <HAL_GPIO_ReadPin>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d109      	bne.n	80023bc <main+0xfc>
 80023a8:	2102      	movs	r1, #2
 80023aa:	483b      	ldr	r0, [pc, #236]	; (8002498 <main+0x1d8>)
 80023ac:	f005 ffd0 	bl	8008350 <HAL_GPIO_ReadPin>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <main+0xfc>
 80023b6:	f000 fb7f 	bl	8002ab8 <BMS_ScreenMode_Locked_Ship>
 80023ba:	e012      	b.n	80023e2 <main+0x122>
	  else if(DIP1 && DIP2)		BMS_ScreenMode_RUN();				//MODE RUN
 80023bc:	2101      	movs	r1, #1
 80023be:	4836      	ldr	r0, [pc, #216]	; (8002498 <main+0x1d8>)
 80023c0:	f005 ffc6 	bl	8008350 <HAL_GPIO_ReadPin>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <main+0x11e>
 80023ca:	2102      	movs	r1, #2
 80023cc:	4832      	ldr	r0, [pc, #200]	; (8002498 <main+0x1d8>)
 80023ce:	f005 ffbf 	bl	8008350 <HAL_GPIO_ReadPin>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <main+0x11e>
 80023d8:	f000 f968 	bl	80026ac <BMS_ScreenMode_RUN>
 80023dc:	e001      	b.n	80023e2 <main+0x122>
	  else						BMS_ScreenMode_Standby();			//Mode Standby
 80023de:	f000 f935 	bl	800264c <BMS_ScreenMode_Standby>

	  HAL_IWDG_Refresh(&hiwdg);
 80023e2:	482e      	ldr	r0, [pc, #184]	; (800249c <main+0x1dc>)
 80023e4:	f006 fd79 	bl	8008eda <HAL_IWDG_Refresh>

	  if(flag_start_shutdown==1)
 80023e8:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <main+0x1d4>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d13b      	bne.n	8002468 <main+0x1a8>
	  {
		  	  //Read voltage of each cell (15cell)
		  	  if(BATT_State==STATE_CHARGE)
 80023f0:	4b2b      	ldr	r3, [pc, #172]	; (80024a0 <main+0x1e0>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d104      	bne.n	8002402 <main+0x142>
		  	  {
		  		 // LTC681x_MUTE_UNMUTE_emul(1);
		  		  read_v_15cell(vcell_15data_digi, vcell_15data);
 80023f8:	4921      	ldr	r1, [pc, #132]	; (8002480 <main+0x1c0>)
 80023fa:	4822      	ldr	r0, [pc, #136]	; (8002484 <main+0x1c4>)
 80023fc:	f000 fea8 	bl	8003150 <read_v_15cell>
 8002400:	e003      	b.n	800240a <main+0x14a>
		  		  //LTC681x_MUTE_UNMUTE_emul(0);
		  	  }
		  	  else read_v_15cell(vcell_15data_digi, vcell_15data);
 8002402:	491f      	ldr	r1, [pc, #124]	; (8002480 <main+0x1c0>)
 8002404:	481f      	ldr	r0, [pc, #124]	; (8002484 <main+0x1c4>)
 8002406:	f000 fea3 	bl	8003150 <read_v_15cell>

		  	  //Get Balancing Data
		  	  get_balance_status(vcell_15data);
 800240a:	481d      	ldr	r0, [pc, #116]	; (8002480 <main+0x1c0>)
 800240c:	f001 fc6c 	bl	8003ce8 <get_balance_status>

		  	  // Balancing Process
		  	  if((IBATT<-0.1 && (v_cell_tot>VBATT_BALANCE_START)) || Flag_Force_Balance==1)     //arus charging 0.1 tidak perlu di balancing
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <main+0x1e4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f807 	bl	8000428 <__aeabi_f2d>
 800241a:	a317      	add	r3, pc, #92	; (adr r3, 8002478 <main+0x1b8>)
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	f7fe facc 	bl	80009bc <__aeabi_dcmplt>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <main+0x17c>
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <main+0x1cc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	491e      	ldr	r1, [pc, #120]	; (80024a8 <main+0x1e8>)
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe fe43 	bl	80010bc <__aeabi_fcmpgt>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <main+0x184>
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <main+0x1ec>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d105      	bne.n	8002450 <main+0x190>
		  	  {
		  		  LTC681x_balance_cell(balance_status);
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <main+0x1f0>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f001 fbe1 	bl	8003c10 <LTC681x_balance_cell>
 800244e:	e005      	b.n	800245c <main+0x19c>
		  	  }
		  	  else
		  	  {
		  			balance_status=0;
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <main+0x1f0>)
 8002452:	2200      	movs	r2, #0
 8002454:	801a      	strh	r2, [r3, #0]
		  			LTC681x_balance_cell(0x0000);
 8002456:	2000      	movs	r0, #0
 8002458:	f001 fbda 	bl	8003c10 <LTC681x_balance_cell>
		  	  }

		  	  //Calculate total Battery Voltage
		  	  Calc_vcell_tot();
 800245c:	f000 fbc8 	bl	8002bf0 <Calc_vcell_tot>

			  //Mark that System operating
			  HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8002460:	2110      	movs	r1, #16
 8002462:	480d      	ldr	r0, [pc, #52]	; (8002498 <main+0x1d8>)
 8002464:	f005 ffa3 	bl	80083ae <HAL_GPIO_TogglePin>
	  }

	  HAL_IWDG_Refresh(&hiwdg);
 8002468:	480c      	ldr	r0, [pc, #48]	; (800249c <main+0x1dc>)
 800246a:	f006 fd36 	bl	8008eda <HAL_IWDG_Refresh>
	  HAL_Delay(1);
 800246e:	2001      	movs	r0, #1
 8002470:	f004 f8c6 	bl	8006600 <HAL_Delay>
	  if(DIP1 && !DIP2)			BMS_ScreenMode_ForceBalance();		//Mode Force Balancing
 8002474:	e780      	b.n	8002378 <main+0xb8>
 8002476:	bf00      	nop
 8002478:	9999999a 	.word	0x9999999a
 800247c:	bfb99999 	.word	0xbfb99999
 8002480:	20000924 	.word	0x20000924
 8002484:	20000904 	.word	0x20000904
 8002488:	200008e8 	.word	0x200008e8
 800248c:	20000b70 	.word	0x20000b70
 8002490:	2000027d 	.word	0x2000027d
 8002494:	20000960 	.word	0x20000960
 8002498:	40011000 	.word	0x40011000
 800249c:	200008dc 	.word	0x200008dc
 80024a0:	20000966 	.word	0x20000966
 80024a4:	2000105c 	.word	0x2000105c
 80024a8:	425c0000 	.word	0x425c0000
 80024ac:	20000b74 	.word	0x20000b74
 80024b0:	20000ba2 	.word	0x20000ba2

080024b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b094      	sub	sp, #80	; 0x50
 80024b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024be:	2228      	movs	r2, #40	; 0x28
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f007 ff26 	bl	800a314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80024e4:	230a      	movs	r3, #10
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024e8:	2301      	movs	r3, #1
 80024ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024ec:	2310      	movs	r3, #16
 80024ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80024f0:	2301      	movs	r3, #1
 80024f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f4:	2302      	movs	r3, #2
 80024f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80024f8:	2300      	movs	r3, #0
 80024fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80024fc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002500:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002506:	4618      	mov	r0, r3
 8002508:	f006 fcf6 	bl	8008ef8 <HAL_RCC_OscConfig>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002512:	f000 fb97 	bl	8002c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002516:	230f      	movs	r3, #15
 8002518:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800251a:	2302      	movs	r3, #2
 800251c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002526:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	2102      	movs	r1, #2
 8002532:	4618      	mov	r0, r3
 8002534:	f006 ff60 	bl	80093f8 <HAL_RCC_ClockConfig>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800253e:	f000 fb81 	bl	8002c44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002542:	2302      	movs	r3, #2
 8002544:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800254a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	4618      	mov	r0, r3
 8002550:	f007 f8ee 	bl	8009730 <HAL_RCCEx_PeriphCLKConfig>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800255a:	f000 fb73 	bl	8002c44 <Error_Handler>
  }
}
 800255e:	bf00      	nop
 8002560:	3750      	adds	r7, #80	; 0x50
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <BMS_ON_InitBeep>:

/* USER CODE BEGIN 4 */
void BMS_ON_InitBeep(void)
{
 8002568:	b598      	push	{r3, r4, r7, lr}
 800256a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc_val, 6);
 800256c:	2206      	movs	r2, #6
 800256e:	492e      	ldr	r1, [pc, #184]	; (8002628 <BMS_ON_InitBeep+0xc0>)
 8002570:	482e      	ldr	r0, [pc, #184]	; (800262c <BMS_ON_InitBeep+0xc4>)
 8002572:	f004 f93f 	bl	80067f4 <HAL_ADC_Start_DMA>

	SSD1306_Init();
 8002576:	f001 fcfb 	bl	8003f70 <SSD1306_Init>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800257a:	2000      	movs	r0, #0
 800257c:	f001 fde4 	bl	8004148 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002580:	f001 fdb4 	bl	80040ec <SSD1306_UpdateScreen>

	HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 8002584:	2201      	movs	r2, #1
 8002586:	2104      	movs	r1, #4
 8002588:	4829      	ldr	r0, [pc, #164]	; (8002630 <BMS_ON_InitBeep+0xc8>)
 800258a:	f005 fef8 	bl	800837e <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800258e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002592:	f004 f835 	bl	8006600 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 8002596:	2104      	movs	r1, #4
 8002598:	4825      	ldr	r0, [pc, #148]	; (8002630 <BMS_ON_InitBeep+0xc8>)
 800259a:	f005 ff08 	bl	80083ae <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800259e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025a2:	f004 f82d 	bl	8006600 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80025a6:	2104      	movs	r1, #4
 80025a8:	4821      	ldr	r0, [pc, #132]	; (8002630 <BMS_ON_InitBeep+0xc8>)
 80025aa:	f005 ff00 	bl	80083ae <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80025ae:	2064      	movs	r0, #100	; 0x64
 80025b0:	f004 f826 	bl	8006600 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80025b4:	2104      	movs	r1, #4
 80025b6:	481e      	ldr	r0, [pc, #120]	; (8002630 <BMS_ON_InitBeep+0xc8>)
 80025b8:	f005 fef9 	bl	80083ae <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80025bc:	2064      	movs	r0, #100	; 0x64
 80025be:	f004 f81f 	bl	8006600 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80025c2:	2104      	movs	r1, #4
 80025c4:	481a      	ldr	r0, [pc, #104]	; (8002630 <BMS_ON_InitBeep+0xc8>)
 80025c6:	f005 fef2 	bl	80083ae <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80025ca:	2064      	movs	r0, #100	; 0x64
 80025cc:	f004 f818 	bl	8006600 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80025d0:	2104      	movs	r1, #4
 80025d2:	4817      	ldr	r0, [pc, #92]	; (8002630 <BMS_ON_InitBeep+0xc8>)
 80025d4:	f005 feeb 	bl	80083ae <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80025d8:	2064      	movs	r0, #100	; 0x64
 80025da:	f004 f811 	bl	8006600 <HAL_Delay>

	sprintf(pesan,"BMS - Gen.V2");
 80025de:	4a15      	ldr	r2, [pc, #84]	; (8002634 <BMS_ON_InitBeep+0xcc>)
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <BMS_ON_InitBeep+0xd0>)
 80025e2:	4614      	mov	r4, r2
 80025e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025e6:	6020      	str	r0, [r4, #0]
 80025e8:	6061      	str	r1, [r4, #4]
 80025ea:	60a2      	str	r2, [r4, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	7323      	strb	r3, [r4, #12]
	SSD1306_GotoXY(5,0);
 80025f0:	2100      	movs	r1, #0
 80025f2:	2005      	movs	r0, #5
 80025f4:	f001 fe1e 	bl	8004234 <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 80025f8:	2201      	movs	r2, #1
 80025fa:	4910      	ldr	r1, [pc, #64]	; (800263c <BMS_ON_InitBeep+0xd4>)
 80025fc:	480d      	ldr	r0, [pc, #52]	; (8002634 <BMS_ON_InitBeep+0xcc>)
 80025fe:	f001 feaf 	bl	8004360 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002602:	f001 fd73 	bl	80040ec <SSD1306_UpdateScreen>

	HAL_TIM_Base_Start_IT(&htim2);
 8002606:	480e      	ldr	r0, [pc, #56]	; (8002640 <BMS_ON_InitBeep+0xd8>)
 8002608:	f007 f9d4 	bl	80099b4 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 800260c:	480d      	ldr	r0, [pc, #52]	; (8002644 <BMS_ON_InitBeep+0xdc>)
 800260e:	f007 f9d1 	bl	80099b4 <HAL_TIM_Base_Start_IT>

	HAL_Delay(1000);
 8002612:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002616:	f003 fff3 	bl	8006600 <HAL_Delay>

	BATT_State=STATE_STANDBY;
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <BMS_ON_InitBeep+0xe0>)
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
	Batt_Open_Mode();
 8002620:	f7fe febc 	bl	800139c <Batt_Open_Mode>


}
 8002624:	bf00      	nop
 8002626:	bd98      	pop	{r3, r4, r7, pc}
 8002628:	200008ec 	.word	0x200008ec
 800262c:	20000798 	.word	0x20000798
 8002630:	40011000 	.word	0x40011000
 8002634:	20000b78 	.word	0x20000b78
 8002638:	0800c820 	.word	0x0800c820
 800263c:	2000000c 	.word	0x2000000c
 8002640:	200014ec 	.word	0x200014ec
 8002644:	200014ac 	.word	0x200014ac
 8002648:	20000966 	.word	0x20000966

0800264c <BMS_ScreenMode_Standby>:

void BMS_ScreenMode_Standby(void)
{
 800264c:	b598      	push	{r3, r4, r7, lr}
 800264e:	af00      	add	r7, sp, #0
	 Flag_Battery_Locked_for_Ship=0;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <BMS_ScreenMode_Standby+0x4c>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
	 Flag_Force_Balance=0;
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <BMS_ScreenMode_Standby+0x50>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]


	 SSD1306_Fill(SSD1306_COLOR_BLACK);
 800265c:	2000      	movs	r0, #0
 800265e:	f001 fd73 	bl	8004148 <SSD1306_Fill>
	 sprintf(pesan,"BMS - Gen.V2");
 8002662:	4a0f      	ldr	r2, [pc, #60]	; (80026a0 <BMS_ScreenMode_Standby+0x54>)
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <BMS_ScreenMode_Standby+0x58>)
 8002666:	4614      	mov	r4, r2
 8002668:	cb07      	ldmia	r3!, {r0, r1, r2}
 800266a:	6020      	str	r0, [r4, #0]
 800266c:	6061      	str	r1, [r4, #4]
 800266e:	60a2      	str	r2, [r4, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	7323      	strb	r3, [r4, #12]
	 SSD1306_GotoXY(20,28);
 8002674:	211c      	movs	r1, #28
 8002676:	2014      	movs	r0, #20
 8002678:	f001 fddc 	bl	8004234 <SSD1306_GotoXY>
	 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 800267c:	2201      	movs	r2, #1
 800267e:	490a      	ldr	r1, [pc, #40]	; (80026a8 <BMS_ScreenMode_Standby+0x5c>)
 8002680:	4807      	ldr	r0, [pc, #28]	; (80026a0 <BMS_ScreenMode_Standby+0x54>)
 8002682:	f001 fe6d 	bl	8004360 <SSD1306_Puts>
	 SSD1306_UpdateScreen();
 8002686:	f001 fd31 	bl	80040ec <SSD1306_UpdateScreen>
	 Batt_Open_Mode();
 800268a:	f7fe fe87 	bl	800139c <Batt_Open_Mode>

	 HAL_Delay(1);
 800268e:	2001      	movs	r0, #1
 8002690:	f003 ffb6 	bl	8006600 <HAL_Delay>
}
 8002694:	bf00      	nop
 8002696:	bd98      	pop	{r3, r4, r7, pc}
 8002698:	20000900 	.word	0x20000900
 800269c:	20000b74 	.word	0x20000b74
 80026a0:	20000b78 	.word	0x20000b78
 80026a4:	0800c820 	.word	0x0800c820
 80026a8:	2000000c 	.word	0x2000000c

080026ac <BMS_ScreenMode_RUN>:

void BMS_ScreenMode_RUN(void)
{
 80026ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b0:	b087      	sub	sp, #28
 80026b2:	af06      	add	r7, sp, #24
	Flag_Battery_Locked_for_Ship=0;
 80026b4:	4b5b      	ldr	r3, [pc, #364]	; (8002824 <BMS_ScreenMode_RUN+0x178>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
	Flag_Force_Balance=0;
 80026ba:	4b5b      	ldr	r3, [pc, #364]	; (8002828 <BMS_ScreenMode_RUN+0x17c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]

	if(flag_start_shutdown==0)
 80026c0:	4b5a      	ldr	r3, [pc, #360]	; (800282c <BMS_ScreenMode_RUN+0x180>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d158      	bne.n	800277a <BMS_ScreenMode_RUN+0xce>
	{
		 SSD1306_Fill(SSD1306_COLOR_BLACK);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f001 fd3d 	bl	8004148 <SSD1306_Fill>
			 sprintf(pesan,"BMS - Gen.V2 - RUN");
 80026ce:	4a58      	ldr	r2, [pc, #352]	; (8002830 <BMS_ScreenMode_RUN+0x184>)
 80026d0:	4b58      	ldr	r3, [pc, #352]	; (8002834 <BMS_ScreenMode_RUN+0x188>)
 80026d2:	4615      	mov	r5, r2
 80026d4:	461c      	mov	r4, r3
 80026d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d8:	6028      	str	r0, [r5, #0]
 80026da:	6069      	str	r1, [r5, #4]
 80026dc:	60aa      	str	r2, [r5, #8]
 80026de:	60eb      	str	r3, [r5, #12]
 80026e0:	8823      	ldrh	r3, [r4, #0]
 80026e2:	78a2      	ldrb	r2, [r4, #2]
 80026e4:	822b      	strh	r3, [r5, #16]
 80026e6:	4613      	mov	r3, r2
 80026e8:	74ab      	strb	r3, [r5, #18]
			 SSD1306_GotoXY(0,18);
 80026ea:	2112      	movs	r1, #18
 80026ec:	2000      	movs	r0, #0
 80026ee:	f001 fda1 	bl	8004234 <SSD1306_GotoXY>
			 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 80026f2:	2201      	movs	r2, #1
 80026f4:	4950      	ldr	r1, [pc, #320]	; (8002838 <BMS_ScreenMode_RUN+0x18c>)
 80026f6:	484e      	ldr	r0, [pc, #312]	; (8002830 <BMS_ScreenMode_RUN+0x184>)
 80026f8:	f001 fe32 	bl	8004360 <SSD1306_Puts>

			 sprintf(pesan,"SLEEP_STATE");
 80026fc:	4a4c      	ldr	r2, [pc, #304]	; (8002830 <BMS_ScreenMode_RUN+0x184>)
 80026fe:	4b4f      	ldr	r3, [pc, #316]	; (800283c <BMS_ScreenMode_RUN+0x190>)
 8002700:	4614      	mov	r4, r2
 8002702:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002704:	6020      	str	r0, [r4, #0]
 8002706:	6061      	str	r1, [r4, #4]
 8002708:	60a2      	str	r2, [r4, #8]
			 SSD1306_GotoXY(0,38);
 800270a:	2126      	movs	r1, #38	; 0x26
 800270c:	2000      	movs	r0, #0
 800270e:	f001 fd91 	bl	8004234 <SSD1306_GotoXY>
			 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002712:	2201      	movs	r2, #1
 8002714:	4948      	ldr	r1, [pc, #288]	; (8002838 <BMS_ScreenMode_RUN+0x18c>)
 8002716:	4846      	ldr	r0, [pc, #280]	; (8002830 <BMS_ScreenMode_RUN+0x184>)
 8002718:	f001 fe22 	bl	8004360 <SSD1306_Puts>
			 SSD1306_UpdateScreen();
 800271c:	f001 fce6 	bl	80040ec <SSD1306_UpdateScreen>
			 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002720:	2200      	movs	r2, #0
 8002722:	2110      	movs	r1, #16
 8002724:	4846      	ldr	r0, [pc, #280]	; (8002840 <BMS_ScreenMode_RUN+0x194>)
 8002726:	f005 fe2a 	bl	800837e <HAL_GPIO_WritePin>
			 Batt_Open_Mode();
 800272a:	f7fe fe37 	bl	800139c <Batt_Open_Mode>
			 flag_trip_overtemperature=OFF;
 800272e:	4b45      	ldr	r3, [pc, #276]	; (8002844 <BMS_ScreenMode_RUN+0x198>)
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
			 flag_trip_undertemperature=OFF;
 8002734:	4b44      	ldr	r3, [pc, #272]	; (8002848 <BMS_ScreenMode_RUN+0x19c>)
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
			 flag_trip_SOCOverDischarge=OFF;
 800273a:	4b44      	ldr	r3, [pc, #272]	; (800284c <BMS_ScreenMode_RUN+0x1a0>)
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
			 flag_trip_SOCOverCharge=OFF;			//di tiada kan..!
 8002740:	4b43      	ldr	r3, [pc, #268]	; (8002850 <BMS_ScreenMode_RUN+0x1a4>)
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
			 flag_trip_undervoltage=OFF;
 8002746:	4b43      	ldr	r3, [pc, #268]	; (8002854 <BMS_ScreenMode_RUN+0x1a8>)
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
			 flag_trip_overvoltage=OFF;
 800274c:	4b42      	ldr	r3, [pc, #264]	; (8002858 <BMS_ScreenMode_RUN+0x1ac>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
			 flag_trip_overcurrentdischarge=OFF;
 8002752:	4b42      	ldr	r3, [pc, #264]	; (800285c <BMS_ScreenMode_RUN+0x1b0>)
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
			 flag_trip_overcurrentcharge=OFF;
 8002758:	4b41      	ldr	r3, [pc, #260]	; (8002860 <BMS_ScreenMode_RUN+0x1b4>)
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
			 flag_trip_shortcircuit=OFF;
 800275e:	4b41      	ldr	r3, [pc, #260]	; (8002864 <BMS_ScreenMode_RUN+0x1b8>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
			 flag_trip_systemfailure=OFF;
 8002764:	4b40      	ldr	r3, [pc, #256]	; (8002868 <BMS_ScreenMode_RUN+0x1bc>)
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
			 flag_trip_unbalance=OFF;
 800276a:	4b40      	ldr	r3, [pc, #256]	; (800286c <BMS_ScreenMode_RUN+0x1c0>)
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
			 OFFSET_SENSOR_ARUS=IBATT_for_offset_cal;
 8002770:	4b3f      	ldr	r3, [pc, #252]	; (8002870 <BMS_ScreenMode_RUN+0x1c4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a3f      	ldr	r2, [pc, #252]	; (8002874 <BMS_ScreenMode_RUN+0x1c8>)
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	e167      	b.n	8002a4a <BMS_ScreenMode_RUN+0x39e>
	}
	else
	{
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 800277a:	2000      	movs	r0, #0
 800277c:	f001 fce4 	bl	8004148 <SSD1306_Fill>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002780:	2110      	movs	r1, #16
 8002782:	482f      	ldr	r0, [pc, #188]	; (8002840 <BMS_ScreenMode_RUN+0x194>)
 8002784:	f005 fe13 	bl	80083ae <HAL_GPIO_TogglePin>

		if(BATT_State==STATE_CHARGE)
 8002788:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <BMS_ScreenMode_RUN+0x1cc>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d114      	bne.n	80027ba <BMS_ScreenMode_RUN+0x10e>
		{
			sprintf(pesan,"BMS-RUN (Charge)");
 8002790:	4a27      	ldr	r2, [pc, #156]	; (8002830 <BMS_ScreenMode_RUN+0x184>)
 8002792:	4b3a      	ldr	r3, [pc, #232]	; (800287c <BMS_ScreenMode_RUN+0x1d0>)
 8002794:	4615      	mov	r5, r2
 8002796:	461c      	mov	r4, r3
 8002798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800279a:	6028      	str	r0, [r5, #0]
 800279c:	6069      	str	r1, [r5, #4]
 800279e:	60aa      	str	r2, [r5, #8]
 80027a0:	60eb      	str	r3, [r5, #12]
 80027a2:	7823      	ldrb	r3, [r4, #0]
 80027a4:	742b      	strb	r3, [r5, #16]
			SSD1306_GotoXY(0,0);
 80027a6:	2100      	movs	r1, #0
 80027a8:	2000      	movs	r0, #0
 80027aa:	f001 fd43 	bl	8004234 <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 80027ae:	2201      	movs	r2, #1
 80027b0:	4921      	ldr	r1, [pc, #132]	; (8002838 <BMS_ScreenMode_RUN+0x18c>)
 80027b2:	481f      	ldr	r0, [pc, #124]	; (8002830 <BMS_ScreenMode_RUN+0x184>)
 80027b4:	f001 fdd4 	bl	8004360 <SSD1306_Puts>
 80027b8:	e07e      	b.n	80028b8 <BMS_ScreenMode_RUN+0x20c>
		}
		else if(BATT_State==STATE_DISCHARGE)
 80027ba:	4b2f      	ldr	r3, [pc, #188]	; (8002878 <BMS_ScreenMode_RUN+0x1cc>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d114      	bne.n	80027ec <BMS_ScreenMode_RUN+0x140>
		{
			sprintf(pesan,"BMS-RUN (Discharge)");
 80027c2:	4a1b      	ldr	r2, [pc, #108]	; (8002830 <BMS_ScreenMode_RUN+0x184>)
 80027c4:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <BMS_ScreenMode_RUN+0x1d4>)
 80027c6:	4615      	mov	r5, r2
 80027c8:	461c      	mov	r4, r3
 80027ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027cc:	6028      	str	r0, [r5, #0]
 80027ce:	6069      	str	r1, [r5, #4]
 80027d0:	60aa      	str	r2, [r5, #8]
 80027d2:	60eb      	str	r3, [r5, #12]
 80027d4:	6820      	ldr	r0, [r4, #0]
 80027d6:	6128      	str	r0, [r5, #16]
			SSD1306_GotoXY(0,0);
 80027d8:	2100      	movs	r1, #0
 80027da:	2000      	movs	r0, #0
 80027dc:	f001 fd2a 	bl	8004234 <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 80027e0:	2201      	movs	r2, #1
 80027e2:	4915      	ldr	r1, [pc, #84]	; (8002838 <BMS_ScreenMode_RUN+0x18c>)
 80027e4:	4812      	ldr	r0, [pc, #72]	; (8002830 <BMS_ScreenMode_RUN+0x184>)
 80027e6:	f001 fdbb 	bl	8004360 <SSD1306_Puts>
 80027ea:	e065      	b.n	80028b8 <BMS_ScreenMode_RUN+0x20c>
		}
		else if(BATT_State==STATE_FULL_CHARGE_DISCHARGE)
 80027ec:	4b22      	ldr	r3, [pc, #136]	; (8002878 <BMS_ScreenMode_RUN+0x1cc>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d149      	bne.n	8002888 <BMS_ScreenMode_RUN+0x1dc>
		{
			sprintf(pesan,"BMS-RUN (Full C/D)");
 80027f4:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <BMS_ScreenMode_RUN+0x184>)
 80027f6:	4b23      	ldr	r3, [pc, #140]	; (8002884 <BMS_ScreenMode_RUN+0x1d8>)
 80027f8:	4615      	mov	r5, r2
 80027fa:	461c      	mov	r4, r3
 80027fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027fe:	6028      	str	r0, [r5, #0]
 8002800:	6069      	str	r1, [r5, #4]
 8002802:	60aa      	str	r2, [r5, #8]
 8002804:	60eb      	str	r3, [r5, #12]
 8002806:	8823      	ldrh	r3, [r4, #0]
 8002808:	78a2      	ldrb	r2, [r4, #2]
 800280a:	822b      	strh	r3, [r5, #16]
 800280c:	4613      	mov	r3, r2
 800280e:	74ab      	strb	r3, [r5, #18]
			SSD1306_GotoXY(0,0);
 8002810:	2100      	movs	r1, #0
 8002812:	2000      	movs	r0, #0
 8002814:	f001 fd0e 	bl	8004234 <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002818:	2201      	movs	r2, #1
 800281a:	4907      	ldr	r1, [pc, #28]	; (8002838 <BMS_ScreenMode_RUN+0x18c>)
 800281c:	4804      	ldr	r0, [pc, #16]	; (8002830 <BMS_ScreenMode_RUN+0x184>)
 800281e:	f001 fd9f 	bl	8004360 <SSD1306_Puts>
 8002822:	e049      	b.n	80028b8 <BMS_ScreenMode_RUN+0x20c>
 8002824:	20000900 	.word	0x20000900
 8002828:	20000b74 	.word	0x20000b74
 800282c:	20000960 	.word	0x20000960
 8002830:	20000b78 	.word	0x20000b78
 8002834:	0800c830 	.word	0x0800c830
 8002838:	2000000c 	.word	0x2000000c
 800283c:	0800c844 	.word	0x0800c844
 8002840:	40011000 	.word	0x40011000
 8002844:	20001044 	.word	0x20001044
 8002848:	20001064 	.word	0x20001064
 800284c:	20001090 	.word	0x20001090
 8002850:	20000c3d 	.word	0x20000c3d
 8002854:	20001065 	.word	0x20001065
 8002858:	200014a1 	.word	0x200014a1
 800285c:	20001074 	.word	0x20001074
 8002860:	20001088 	.word	0x20001088
 8002864:	20000c3e 	.word	0x20000c3e
 8002868:	2000102c 	.word	0x2000102c
 800286c:	20000c3c 	.word	0x20000c3c
 8002870:	200010b4 	.word	0x200010b4
 8002874:	200010b0 	.word	0x200010b0
 8002878:	20000966 	.word	0x20000966
 800287c:	0800c850 	.word	0x0800c850
 8002880:	0800c864 	.word	0x0800c864
 8002884:	0800c878 	.word	0x0800c878
		}
		else if(BATT_State==STATE_STANDBY)
 8002888:	4b74      	ldr	r3, [pc, #464]	; (8002a5c <BMS_ScreenMode_RUN+0x3b0>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d113      	bne.n	80028b8 <BMS_ScreenMode_RUN+0x20c>
		{
			sprintf(pesan,"BMS-RUN (Open)");
 8002890:	4a73      	ldr	r2, [pc, #460]	; (8002a60 <BMS_ScreenMode_RUN+0x3b4>)
 8002892:	4b74      	ldr	r3, [pc, #464]	; (8002a64 <BMS_ScreenMode_RUN+0x3b8>)
 8002894:	4614      	mov	r4, r2
 8002896:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002898:	6020      	str	r0, [r4, #0]
 800289a:	6061      	str	r1, [r4, #4]
 800289c:	60a2      	str	r2, [r4, #8]
 800289e:	881a      	ldrh	r2, [r3, #0]
 80028a0:	789b      	ldrb	r3, [r3, #2]
 80028a2:	81a2      	strh	r2, [r4, #12]
 80028a4:	73a3      	strb	r3, [r4, #14]
			SSD1306_GotoXY(0,0);
 80028a6:	2100      	movs	r1, #0
 80028a8:	2000      	movs	r0, #0
 80028aa:	f001 fcc3 	bl	8004234 <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 80028ae:	2201      	movs	r2, #1
 80028b0:	496d      	ldr	r1, [pc, #436]	; (8002a68 <BMS_ScreenMode_RUN+0x3bc>)
 80028b2:	486b      	ldr	r0, [pc, #428]	; (8002a60 <BMS_ScreenMode_RUN+0x3b4>)
 80028b4:	f001 fd54 	bl	8004360 <SSD1306_Puts>
		}

		sprintf(pesan,"V=%6.2f I=%6.2f",VBATT,IBATT);
 80028b8:	4b6c      	ldr	r3, [pc, #432]	; (8002a6c <BMS_ScreenMode_RUN+0x3c0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fdb3 	bl	8000428 <__aeabi_f2d>
 80028c2:	4605      	mov	r5, r0
 80028c4:	460e      	mov	r6, r1
 80028c6:	4b6a      	ldr	r3, [pc, #424]	; (8002a70 <BMS_ScreenMode_RUN+0x3c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fdac 	bl	8000428 <__aeabi_f2d>
 80028d0:	4603      	mov	r3, r0
 80028d2:	460c      	mov	r4, r1
 80028d4:	e9cd 3400 	strd	r3, r4, [sp]
 80028d8:	462a      	mov	r2, r5
 80028da:	4633      	mov	r3, r6
 80028dc:	4965      	ldr	r1, [pc, #404]	; (8002a74 <BMS_ScreenMode_RUN+0x3c8>)
 80028de:	4860      	ldr	r0, [pc, #384]	; (8002a60 <BMS_ScreenMode_RUN+0x3b4>)
 80028e0:	f008 f970 	bl	800abc4 <siprintf>
		SSD1306_GotoXY(0,10);
 80028e4:	210a      	movs	r1, #10
 80028e6:	2000      	movs	r0, #0
 80028e8:	f001 fca4 	bl	8004234 <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 80028ec:	2201      	movs	r2, #1
 80028ee:	495e      	ldr	r1, [pc, #376]	; (8002a68 <BMS_ScreenMode_RUN+0x3bc>)
 80028f0:	485b      	ldr	r0, [pc, #364]	; (8002a60 <BMS_ScreenMode_RUN+0x3b4>)
 80028f2:	f001 fd35 	bl	8004360 <SSD1306_Puts>
		sprintf(pesan,"T=%3.0f|%3.0f|%3.0f|%3.0f",Suhu_T1,Suhu_T2,Suhu_T3,Suhu_T4);
 80028f6:	4b60      	ldr	r3, [pc, #384]	; (8002a78 <BMS_ScreenMode_RUN+0x3cc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fd94 	bl	8000428 <__aeabi_f2d>
 8002900:	4682      	mov	sl, r0
 8002902:	468b      	mov	fp, r1
 8002904:	4b5d      	ldr	r3, [pc, #372]	; (8002a7c <BMS_ScreenMode_RUN+0x3d0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fd8d 	bl	8000428 <__aeabi_f2d>
 800290e:	4604      	mov	r4, r0
 8002910:	460d      	mov	r5, r1
 8002912:	4b5b      	ldr	r3, [pc, #364]	; (8002a80 <BMS_ScreenMode_RUN+0x3d4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fd86 	bl	8000428 <__aeabi_f2d>
 800291c:	4680      	mov	r8, r0
 800291e:	4689      	mov	r9, r1
 8002920:	4b58      	ldr	r3, [pc, #352]	; (8002a84 <BMS_ScreenMode_RUN+0x3d8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fd7f 	bl	8000428 <__aeabi_f2d>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002932:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002936:	e9cd 4500 	strd	r4, r5, [sp]
 800293a:	4652      	mov	r2, sl
 800293c:	465b      	mov	r3, fp
 800293e:	4952      	ldr	r1, [pc, #328]	; (8002a88 <BMS_ScreenMode_RUN+0x3dc>)
 8002940:	4847      	ldr	r0, [pc, #284]	; (8002a60 <BMS_ScreenMode_RUN+0x3b4>)
 8002942:	f008 f93f 	bl	800abc4 <siprintf>
		SSD1306_GotoXY(0,20);
 8002946:	2114      	movs	r1, #20
 8002948:	2000      	movs	r0, #0
 800294a:	f001 fc73 	bl	8004234 <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 800294e:	2201      	movs	r2, #1
 8002950:	4945      	ldr	r1, [pc, #276]	; (8002a68 <BMS_ScreenMode_RUN+0x3bc>)
 8002952:	4843      	ldr	r0, [pc, #268]	; (8002a60 <BMS_ScreenMode_RUN+0x3b4>)
 8002954:	f001 fd04 	bl	8004360 <SSD1306_Puts>
		sprintf(pesan,"C=%5.1f%c -- %d",Pack_SOC,'%',BMS_mode);
 8002958:	4b4c      	ldr	r3, [pc, #304]	; (8002a8c <BMS_ScreenMode_RUN+0x3e0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fd fd63 	bl	8000428 <__aeabi_f2d>
 8002962:	460a      	mov	r2, r1
 8002964:	4601      	mov	r1, r0
 8002966:	4b4a      	ldr	r3, [pc, #296]	; (8002a90 <BMS_ScreenMode_RUN+0x3e4>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	2325      	movs	r3, #37	; 0x25
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	460a      	mov	r2, r1
 8002974:	4947      	ldr	r1, [pc, #284]	; (8002a94 <BMS_ScreenMode_RUN+0x3e8>)
 8002976:	483a      	ldr	r0, [pc, #232]	; (8002a60 <BMS_ScreenMode_RUN+0x3b4>)
 8002978:	f008 f924 	bl	800abc4 <siprintf>
		SSD1306_GotoXY(0,30);
 800297c:	211e      	movs	r1, #30
 800297e:	2000      	movs	r0, #0
 8002980:	f001 fc58 	bl	8004234 <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002984:	2201      	movs	r2, #1
 8002986:	4938      	ldr	r1, [pc, #224]	; (8002a68 <BMS_ScreenMode_RUN+0x3bc>)
 8002988:	4835      	ldr	r0, [pc, #212]	; (8002a60 <BMS_ScreenMode_RUN+0x3b4>)
 800298a:	f001 fce9 	bl	8004360 <SSD1306_Puts>
		sprintf(pesan,"B=%5d, %5.2f",balance_status,persen_imbalance);
 800298e:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <BMS_ScreenMode_RUN+0x3ec>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	461d      	mov	r5, r3
 8002994:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <BMS_ScreenMode_RUN+0x3f0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fd45 	bl	8000428 <__aeabi_f2d>
 800299e:	4603      	mov	r3, r0
 80029a0:	460c      	mov	r4, r1
 80029a2:	e9cd 3400 	strd	r3, r4, [sp]
 80029a6:	462a      	mov	r2, r5
 80029a8:	493d      	ldr	r1, [pc, #244]	; (8002aa0 <BMS_ScreenMode_RUN+0x3f4>)
 80029aa:	482d      	ldr	r0, [pc, #180]	; (8002a60 <BMS_ScreenMode_RUN+0x3b4>)
 80029ac:	f008 f90a 	bl	800abc4 <siprintf>
		SSD1306_GotoXY(0,40);
 80029b0:	2128      	movs	r1, #40	; 0x28
 80029b2:	2000      	movs	r0, #0
 80029b4:	f001 fc3e 	bl	8004234 <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 80029b8:	2201      	movs	r2, #1
 80029ba:	492b      	ldr	r1, [pc, #172]	; (8002a68 <BMS_ScreenMode_RUN+0x3bc>)
 80029bc:	4828      	ldr	r0, [pc, #160]	; (8002a60 <BMS_ScreenMode_RUN+0x3b4>)
 80029be:	f001 fccf 	bl	8004360 <SSD1306_Puts>


		sprintf(pesan,"%d-%d -- %4.0f-%4.0f",fault_code,last_fault_code,T_I_Over_trip,T_I_Over_trip_cycle);
 80029c2:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <BMS_ScreenMode_RUN+0x3f8>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	461e      	mov	r6, r3
 80029c8:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <BMS_ScreenMode_RUN+0x3fc>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	4698      	mov	r8, r3
 80029ce:	4b37      	ldr	r3, [pc, #220]	; (8002aac <BMS_ScreenMode_RUN+0x400>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fd fd28 	bl	8000428 <__aeabi_f2d>
 80029d8:	4604      	mov	r4, r0
 80029da:	460d      	mov	r5, r1
 80029dc:	4b34      	ldr	r3, [pc, #208]	; (8002ab0 <BMS_ScreenMode_RUN+0x404>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fd21 	bl	8000428 <__aeabi_f2d>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80029ee:	e9cd 4500 	strd	r4, r5, [sp]
 80029f2:	4643      	mov	r3, r8
 80029f4:	4632      	mov	r2, r6
 80029f6:	492f      	ldr	r1, [pc, #188]	; (8002ab4 <BMS_ScreenMode_RUN+0x408>)
 80029f8:	4819      	ldr	r0, [pc, #100]	; (8002a60 <BMS_ScreenMode_RUN+0x3b4>)
 80029fa:	f008 f8e3 	bl	800abc4 <siprintf>
		SSD1306_GotoXY(0,50);
 80029fe:	2132      	movs	r1, #50	; 0x32
 8002a00:	2000      	movs	r0, #0
 8002a02:	f001 fc17 	bl	8004234 <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002a06:	2201      	movs	r2, #1
 8002a08:	4917      	ldr	r1, [pc, #92]	; (8002a68 <BMS_ScreenMode_RUN+0x3bc>)
 8002a0a:	4815      	ldr	r0, [pc, #84]	; (8002a60 <BMS_ScreenMode_RUN+0x3b4>)
 8002a0c:	f001 fca8 	bl	8004360 <SSD1306_Puts>


		SSD1306_UpdateScreen();
 8002a10:	f001 fb6c 	bl	80040ec <SSD1306_UpdateScreen>

		if(BMS_mode==0) Batt_Open_Mode();
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <BMS_ScreenMode_RUN+0x3e4>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <BMS_ScreenMode_RUN+0x376>
 8002a1c:	f7fe fcbe 	bl	800139c <Batt_Open_Mode>
 8002a20:	e013      	b.n	8002a4a <BMS_ScreenMode_RUN+0x39e>
		else if(BMS_mode==1) Batt_Discharge_Mode();
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <BMS_ScreenMode_RUN+0x3e4>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d102      	bne.n	8002a30 <BMS_ScreenMode_RUN+0x384>
 8002a2a:	f7fe fb97 	bl	800115c <Batt_Discharge_Mode>
 8002a2e:	e00c      	b.n	8002a4a <BMS_ScreenMode_RUN+0x39e>
		else if(BMS_mode==2) Batt_Charge_Mode();
 8002a30:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <BMS_ScreenMode_RUN+0x3e4>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d102      	bne.n	8002a3e <BMS_ScreenMode_RUN+0x392>
 8002a38:	f7fe fbec 	bl	8001214 <Batt_Charge_Mode>
 8002a3c:	e005      	b.n	8002a4a <BMS_ScreenMode_RUN+0x39e>
		else if(BMS_mode==3) Batt_Full_CD_Mode();
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <BMS_ScreenMode_RUN+0x3e4>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d101      	bne.n	8002a4a <BMS_ScreenMode_RUN+0x39e>
 8002a46:	f7fe fc3b 	bl	80012c0 <Batt_Full_CD_Mode>

	}

	HAL_Delay(1);
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f003 fdd8 	bl	8006600 <HAL_Delay>
}
 8002a50:	bf00      	nop
 8002a52:	3704      	adds	r7, #4
 8002a54:	46bd      	mov	sp, r7
 8002a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000966 	.word	0x20000966
 8002a60:	20000b78 	.word	0x20000b78
 8002a64:	0800c88c 	.word	0x0800c88c
 8002a68:	2000000c 	.word	0x2000000c
 8002a6c:	20001048 	.word	0x20001048
 8002a70:	2000105c 	.word	0x2000105c
 8002a74:	0800c89c 	.word	0x0800c89c
 8002a78:	20001070 	.word	0x20001070
 8002a7c:	200014a4 	.word	0x200014a4
 8002a80:	2000104c 	.word	0x2000104c
 8002a84:	2000109c 	.word	0x2000109c
 8002a88:	0800c8ac 	.word	0x0800c8ac
 8002a8c:	20000b98 	.word	0x20000b98
 8002a90:	20000b94 	.word	0x20000b94
 8002a94:	0800c8c8 	.word	0x0800c8c8
 8002a98:	20000ba2 	.word	0x20000ba2
 8002a9c:	20000b6c 	.word	0x20000b6c
 8002aa0:	0800c8d8 	.word	0x0800c8d8
 8002aa4:	2000106c 	.word	0x2000106c
 8002aa8:	200014a0 	.word	0x200014a0
 8002aac:	20001030 	.word	0x20001030
 8002ab0:	200010a0 	.word	0x200010a0
 8002ab4:	0800c8e8 	.word	0x0800c8e8

08002ab8 <BMS_ScreenMode_Locked_Ship>:

void BMS_ScreenMode_Locked_Ship(void)
{
 8002ab8:	b5b0      	push	{r4, r5, r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	 Flag_Battery_Locked_for_Ship=1;
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <BMS_ScreenMode_Locked_Ship+0x74>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	701a      	strb	r2, [r3, #0]
	 Flag_Force_Balance=0;
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <BMS_ScreenMode_Locked_Ship+0x78>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]

	 SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f001 fb3d 	bl	8004148 <SSD1306_Fill>
	 sprintf(pesan,"BMS - Gen.V2");
 8002ace:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <BMS_ScreenMode_Locked_Ship+0x80>)
 8002ad2:	4614      	mov	r4, r2
 8002ad4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ad6:	6020      	str	r0, [r4, #0]
 8002ad8:	6061      	str	r1, [r4, #4]
 8002ada:	60a2      	str	r2, [r4, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	7323      	strb	r3, [r4, #12]
	 SSD1306_GotoXY(20,18);
 8002ae0:	2112      	movs	r1, #18
 8002ae2:	2014      	movs	r0, #20
 8002ae4:	f001 fba6 	bl	8004234 <SSD1306_GotoXY>
	 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4914      	ldr	r1, [pc, #80]	; (8002b3c <BMS_ScreenMode_Locked_Ship+0x84>)
 8002aec:	4811      	ldr	r0, [pc, #68]	; (8002b34 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002aee:	f001 fc37 	bl	8004360 <SSD1306_Puts>

	 sprintf(pesan,"Pack Ready Shipped");
 8002af2:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <BMS_ScreenMode_Locked_Ship+0x88>)
 8002af6:	4615      	mov	r5, r2
 8002af8:	461c      	mov	r4, r3
 8002afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afc:	6028      	str	r0, [r5, #0]
 8002afe:	6069      	str	r1, [r5, #4]
 8002b00:	60aa      	str	r2, [r5, #8]
 8002b02:	60eb      	str	r3, [r5, #12]
 8002b04:	8823      	ldrh	r3, [r4, #0]
 8002b06:	78a2      	ldrb	r2, [r4, #2]
 8002b08:	822b      	strh	r3, [r5, #16]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	74ab      	strb	r3, [r5, #18]
	 SSD1306_GotoXY(0,38);
 8002b0e:	2126      	movs	r1, #38	; 0x26
 8002b10:	2000      	movs	r0, #0
 8002b12:	f001 fb8f 	bl	8004234 <SSD1306_GotoXY>
	 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002b16:	2201      	movs	r2, #1
 8002b18:	4908      	ldr	r1, [pc, #32]	; (8002b3c <BMS_ScreenMode_Locked_Ship+0x84>)
 8002b1a:	4806      	ldr	r0, [pc, #24]	; (8002b34 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002b1c:	f001 fc20 	bl	8004360 <SSD1306_Puts>
	 SSD1306_UpdateScreen();
 8002b20:	f001 fae4 	bl	80040ec <SSD1306_UpdateScreen>
	 Batt_Open_Mode();
 8002b24:	f7fe fc3a 	bl	800139c <Batt_Open_Mode>
}
 8002b28:	bf00      	nop
 8002b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b2c:	20000900 	.word	0x20000900
 8002b30:	20000b74 	.word	0x20000b74
 8002b34:	20000b78 	.word	0x20000b78
 8002b38:	0800c820 	.word	0x0800c820
 8002b3c:	2000000c 	.word	0x2000000c
 8002b40:	0800c900 	.word	0x0800c900

08002b44 <BMS_ScreenMode_ForceBalance>:

void BMS_ScreenMode_ForceBalance(void)
{
 8002b44:	b598      	push	{r3, r4, r7, lr}
 8002b46:	af00      	add	r7, sp, #0
	Flag_Battery_Locked_for_Ship=0;
 8002b48:	4b21      	ldr	r3, [pc, #132]	; (8002bd0 <BMS_ScreenMode_ForceBalance+0x8c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
	Flag_Force_Balance=1;
 8002b4e:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <BMS_ScreenMode_ForceBalance+0x90>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]

	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002b54:	2000      	movs	r0, #0
 8002b56:	f001 faf7 	bl	8004148 <SSD1306_Fill>
	sprintf(pesan,"BMS - Gen.V2");
 8002b5a:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <BMS_ScreenMode_ForceBalance+0x94>)
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <BMS_ScreenMode_ForceBalance+0x98>)
 8002b5e:	4614      	mov	r4, r2
 8002b60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b62:	6020      	str	r0, [r4, #0]
 8002b64:	6061      	str	r1, [r4, #4]
 8002b66:	60a2      	str	r2, [r4, #8]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	7323      	strb	r3, [r4, #12]
	SSD1306_GotoXY(20,0);
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	2014      	movs	r0, #20
 8002b70:	f001 fb60 	bl	8004234 <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002b74:	2201      	movs	r2, #1
 8002b76:	491a      	ldr	r1, [pc, #104]	; (8002be0 <BMS_ScreenMode_ForceBalance+0x9c>)
 8002b78:	4817      	ldr	r0, [pc, #92]	; (8002bd8 <BMS_ScreenMode_ForceBalance+0x94>)
 8002b7a:	f001 fbf1 	bl	8004360 <SSD1306_Puts>

	sprintf(pesan,"Force Balance");
 8002b7e:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <BMS_ScreenMode_ForceBalance+0x94>)
 8002b80:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <BMS_ScreenMode_ForceBalance+0xa0>)
 8002b82:	4614      	mov	r4, r2
 8002b84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b86:	6020      	str	r0, [r4, #0]
 8002b88:	6061      	str	r1, [r4, #4]
 8002b8a:	60a2      	str	r2, [r4, #8]
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	81a3      	strh	r3, [r4, #12]
	SSD1306_GotoXY(0,10);
 8002b90:	210a      	movs	r1, #10
 8002b92:	2000      	movs	r0, #0
 8002b94:	f001 fb4e 	bl	8004234 <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002b98:	2201      	movs	r2, #1
 8002b9a:	4911      	ldr	r1, [pc, #68]	; (8002be0 <BMS_ScreenMode_ForceBalance+0x9c>)
 8002b9c:	480e      	ldr	r0, [pc, #56]	; (8002bd8 <BMS_ScreenMode_ForceBalance+0x94>)
 8002b9e:	f001 fbdf 	bl	8004360 <SSD1306_Puts>

	sprintf(pesan,"B=%5d",balance_status);
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <BMS_ScreenMode_ForceBalance+0xa4>)
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4910      	ldr	r1, [pc, #64]	; (8002bec <BMS_ScreenMode_ForceBalance+0xa8>)
 8002baa:	480b      	ldr	r0, [pc, #44]	; (8002bd8 <BMS_ScreenMode_ForceBalance+0x94>)
 8002bac:	f008 f80a 	bl	800abc4 <siprintf>
	SSD1306_GotoXY(0,40);
 8002bb0:	2128      	movs	r1, #40	; 0x28
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f001 fb3e 	bl	8004234 <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002bb8:	2201      	movs	r2, #1
 8002bba:	4909      	ldr	r1, [pc, #36]	; (8002be0 <BMS_ScreenMode_ForceBalance+0x9c>)
 8002bbc:	4806      	ldr	r0, [pc, #24]	; (8002bd8 <BMS_ScreenMode_ForceBalance+0x94>)
 8002bbe:	f001 fbcf 	bl	8004360 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8002bc2:	f001 fa93 	bl	80040ec <SSD1306_UpdateScreen>
	Batt_Open_Mode();
 8002bc6:	f7fe fbe9 	bl	800139c <Batt_Open_Mode>
}
 8002bca:	bf00      	nop
 8002bcc:	bd98      	pop	{r3, r4, r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000900 	.word	0x20000900
 8002bd4:	20000b74 	.word	0x20000b74
 8002bd8:	20000b78 	.word	0x20000b78
 8002bdc:	0800c820 	.word	0x0800c820
 8002be0:	2000000c 	.word	0x2000000c
 8002be4:	0800c914 	.word	0x0800c914
 8002be8:	20000ba2 	.word	0x20000ba2
 8002bec:	0800c924 	.word	0x0800c924

08002bf0 <Calc_vcell_tot>:

void Calc_vcell_tot(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	for(ij=0,v_cell_tot=0;ij<15;ij++)
 8002bf4:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <Calc_vcell_tot+0x48>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <Calc_vcell_tot+0x4c>)
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e013      	b.n	8002c2c <Calc_vcell_tot+0x3c>
	{
		v_cell_tot+=vcell_15data[ij];
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <Calc_vcell_tot+0x48>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <Calc_vcell_tot+0x50>)
 8002c0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <Calc_vcell_tot+0x4c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4619      	mov	r1, r3
 8002c14:	4610      	mov	r0, r2
 8002c16:	f7fd ff8d 	bl	8000b34 <__addsf3>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <Calc_vcell_tot+0x4c>)
 8002c20:	601a      	str	r2, [r3, #0]
	for(ij=0,v_cell_tot=0;ij<15;ij++)
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <Calc_vcell_tot+0x48>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3301      	adds	r3, #1
 8002c28:	4a03      	ldr	r2, [pc, #12]	; (8002c38 <Calc_vcell_tot+0x48>)
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b02      	ldr	r3, [pc, #8]	; (8002c38 <Calc_vcell_tot+0x48>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b0e      	cmp	r3, #14
 8002c32:	dde7      	ble.n	8002c04 <Calc_vcell_tot+0x14>
	}
}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	200008e8 	.word	0x200008e8
 8002c3c:	20000b70 	.word	0x20000b70
 8002c40:	20000924 	.word	0x20000924

08002c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <ltc6812_GPIO_Config>:
void ltc6812_GPIO_Config(void);
void ltc6812_SPIInit(void);
void ltc6812_Delay(volatile uint32_t nCount);

void ltc6812_GPIO_Config(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIO clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c56:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <ltc6812_GPIO_Config+0xb0>)
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	4a29      	ldr	r2, [pc, #164]	; (8002d00 <ltc6812_GPIO_Config+0xb0>)
 8002c5c:	f043 0304 	orr.w	r3, r3, #4
 8002c60:	6193      	str	r3, [r2, #24]
 8002c62:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <ltc6812_GPIO_Config+0xb0>)
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <ltc6812_GPIO_Config+0xb0>)
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <ltc6812_GPIO_Config+0xb0>)
 8002c74:	f043 0308 	orr.w	r3, r3, #8
 8002c78:	6193      	str	r3, [r2, #24]
 8002c7a:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <ltc6812_GPIO_Config+0xb0>)
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002c86:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <ltc6812_GPIO_Config+0xb0>)
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <ltc6812_GPIO_Config+0xb0>)
 8002c8c:	f043 0310 	orr.w	r3, r3, #16
 8002c90:	6193      	str	r3, [r2, #24]
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <ltc6812_GPIO_Config+0xb0>)
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin       = ltc6812_CS_PIN;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002caa:	2303      	movs	r3, #3
 8002cac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6812_CS_PORT, &GPIO_InitStructure);
 8002cae:	f107 0310 	add.w	r3, r7, #16
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4813      	ldr	r0, [pc, #76]	; (8002d04 <ltc6812_GPIO_Config+0xb4>)
 8002cb6:	f005 f9f1 	bl	800809c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6812_SCK_PIN;
 8002cba:	2308      	movs	r3, #8
 8002cbc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6812_SCK_PORT, &GPIO_InitStructure);
 8002cbe:	f107 0310 	add.w	r3, r7, #16
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	480f      	ldr	r0, [pc, #60]	; (8002d04 <ltc6812_GPIO_Config+0xb4>)
 8002cc6:	f005 f9e9 	bl	800809c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6812_MOSI_PIN;
 8002cca:	2320      	movs	r3, #32
 8002ccc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6812_MOSI_PORT, &GPIO_InitStructure);
 8002cce:	f107 0310 	add.w	r3, r7, #16
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	480b      	ldr	r0, [pc, #44]	; (8002d04 <ltc6812_GPIO_Config+0xb4>)
 8002cd6:	f005 f9e1 	bl	800809c <HAL_GPIO_Init>

	

	GPIO_InitStructure.Pin       = ltc6812_MISO_PIN;
 8002cda:	2310      	movs	r3, #16
 8002cdc:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_INPUT;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6812_MISO_PORT, &GPIO_InitStructure);
 8002cea:	f107 0310 	add.w	r3, r7, #16
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4804      	ldr	r0, [pc, #16]	; (8002d04 <ltc6812_GPIO_Config+0xb4>)
 8002cf2:	f005 f9d3 	bl	800809c <HAL_GPIO_Init>
}
 8002cf6:	bf00      	nop
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40010c00 	.word	0x40010c00

08002d08 <ltc6812_SPIInit>:

void ltc6812_SPIInit(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0

	ltc6812_CS_SET(ltc6812_CS_PIN);
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	2101      	movs	r1, #1
 8002d10:	482a      	ldr	r0, [pc, #168]	; (8002dbc <ltc6812_SPIInit+0xb4>)
 8002d12:	f005 fb34 	bl	800837e <HAL_GPIO_WritePin>
	ltc6812_RESET_HIGH;
 8002d16:	2201      	movs	r2, #1
 8002d18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d1c:	4828      	ldr	r0, [pc, #160]	; (8002dc0 <ltc6812_SPIInit+0xb8>)
 8002d1e:	f005 fb2e 	bl	800837e <HAL_GPIO_WritePin>
	ltc6812_Delay(10);
 8002d22:	200a      	movs	r0, #10
 8002d24:	f000 f84e 	bl	8002dc4 <ltc6812_Delay>
	ltc6812_RESET_LOW;
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d2e:	4824      	ldr	r0, [pc, #144]	; (8002dc0 <ltc6812_SPIInit+0xb8>)
 8002d30:	f005 fb25 	bl	800837e <HAL_GPIO_WritePin>
	ltc6812_Delay(2000);
 8002d34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d38:	f000 f844 	bl	8002dc4 <ltc6812_Delay>
	ltc6812_RESET_HIGH;
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d42:	481f      	ldr	r0, [pc, #124]	; (8002dc0 <ltc6812_SPIInit+0xb8>)
 8002d44:	f005 fb1b 	bl	800837e <HAL_GPIO_WritePin>
	ltc6812_Delay(10);
 8002d48:	200a      	movs	r0, #10
 8002d4a:	f000 f83b 	bl	8002dc4 <ltc6812_Delay>

	//toggle CS 3 times to enter SPI Mode
	ltc6812_CS_RESET(ltc6812_CS_PIN);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2101      	movs	r1, #1
 8002d52:	481a      	ldr	r0, [pc, #104]	; (8002dbc <ltc6812_SPIInit+0xb4>)
 8002d54:	f005 fb13 	bl	800837e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 8002d58:	2064      	movs	r0, #100	; 0x64
 8002d5a:	f000 f833 	bl	8002dc4 <ltc6812_Delay>
	ltc6812_CS_SET(ltc6812_CS_PIN);
 8002d5e:	2201      	movs	r2, #1
 8002d60:	2101      	movs	r1, #1
 8002d62:	4816      	ldr	r0, [pc, #88]	; (8002dbc <ltc6812_SPIInit+0xb4>)
 8002d64:	f005 fb0b 	bl	800837e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 8002d68:	2064      	movs	r0, #100	; 0x64
 8002d6a:	f000 f82b 	bl	8002dc4 <ltc6812_Delay>
	ltc6812_CS_RESET(ltc6812_CS_PIN);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2101      	movs	r1, #1
 8002d72:	4812      	ldr	r0, [pc, #72]	; (8002dbc <ltc6812_SPIInit+0xb4>)
 8002d74:	f005 fb03 	bl	800837e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 8002d78:	2064      	movs	r0, #100	; 0x64
 8002d7a:	f000 f823 	bl	8002dc4 <ltc6812_Delay>
	ltc6812_CS_SET(ltc6812_CS_PIN);
 8002d7e:	2201      	movs	r2, #1
 8002d80:	2101      	movs	r1, #1
 8002d82:	480e      	ldr	r0, [pc, #56]	; (8002dbc <ltc6812_SPIInit+0xb4>)
 8002d84:	f005 fafb 	bl	800837e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 8002d88:	2064      	movs	r0, #100	; 0x64
 8002d8a:	f000 f81b 	bl	8002dc4 <ltc6812_Delay>
	ltc6812_CS_RESET(ltc6812_CS_PIN);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2101      	movs	r1, #1
 8002d92:	480a      	ldr	r0, [pc, #40]	; (8002dbc <ltc6812_SPIInit+0xb4>)
 8002d94:	f005 faf3 	bl	800837e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 8002d98:	2064      	movs	r0, #100	; 0x64
 8002d9a:	f000 f813 	bl	8002dc4 <ltc6812_Delay>
	ltc6812_CS_SET(ltc6812_CS_PIN);
 8002d9e:	2201      	movs	r2, #1
 8002da0:	2101      	movs	r1, #1
 8002da2:	4806      	ldr	r0, [pc, #24]	; (8002dbc <ltc6812_SPIInit+0xb4>)
 8002da4:	f005 faeb 	bl	800837e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 8002da8:	2064      	movs	r0, #100	; 0x64
 8002daa:	f000 f80b 	bl	8002dc4 <ltc6812_Delay>

	ltc6812_Delay(20000);
 8002dae:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002db2:	f000 f807 	bl	8002dc4 <ltc6812_Delay>
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40010c00 	.word	0x40010c00
 8002dc0:	40011000 	.word	0x40011000

08002dc4 <ltc6812_Delay>:

void ltc6812_Delay(volatile uint32_t nCount)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	while(nCount > 0) { nCount--; }
 8002dcc:	e002      	b.n	8002dd4 <ltc6812_Delay+0x10>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f9      	bne.n	8002dce <ltc6812_Delay+0xa>
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <ltc6812_Write8>:

void ltc6812_Write8(uint8_t out)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	//ltc6812_CS_SET(CS_Pin);
	//ltc6812_MOSI_RESET;
	ltc6812_SCK_RESET;
 8002dee:	2200      	movs	r2, #0
 8002df0:	2108      	movs	r1, #8
 8002df2:	481a      	ldr	r0, [pc, #104]	; (8002e5c <ltc6812_Write8+0x78>)
 8002df4:	f005 fac3 	bl	800837e <HAL_GPIO_WritePin>
	//ltc6812_CS_RESET(CS_Pin);
	//ltc6812_Delay(10);
	for (i = 0; i < 8; i++) {
 8002df8:	2300      	movs	r3, #0
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e027      	b.n	8002e4e <ltc6812_Write8+0x6a>
		if ((out >> (7-i)) & 0x01) {
 8002dfe:	79fa      	ldrb	r2, [r7, #7]
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	f1c3 0307 	rsb	r3, r3, #7
 8002e06:	fa42 f303 	asr.w	r3, r2, r3
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <ltc6812_Write8+0x3a>
			ltc6812_MOSI_SET;
 8002e12:	2201      	movs	r2, #1
 8002e14:	2120      	movs	r1, #32
 8002e16:	4811      	ldr	r0, [pc, #68]	; (8002e5c <ltc6812_Write8+0x78>)
 8002e18:	f005 fab1 	bl	800837e <HAL_GPIO_WritePin>
 8002e1c:	e004      	b.n	8002e28 <ltc6812_Write8+0x44>
		} else {
			ltc6812_MOSI_RESET;
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2120      	movs	r1, #32
 8002e22:	480e      	ldr	r0, [pc, #56]	; (8002e5c <ltc6812_Write8+0x78>)
 8002e24:	f005 faab 	bl	800837e <HAL_GPIO_WritePin>
		}
		ltc6812_Delay(10);
 8002e28:	200a      	movs	r0, #10
 8002e2a:	f7ff ffcb 	bl	8002dc4 <ltc6812_Delay>
		ltc6812_SCK_SET;
 8002e2e:	2201      	movs	r2, #1
 8002e30:	2108      	movs	r1, #8
 8002e32:	480a      	ldr	r0, [pc, #40]	; (8002e5c <ltc6812_Write8+0x78>)
 8002e34:	f005 faa3 	bl	800837e <HAL_GPIO_WritePin>
		ltc6812_Delay(10);
 8002e38:	200a      	movs	r0, #10
 8002e3a:	f7ff ffc3 	bl	8002dc4 <ltc6812_Delay>
		ltc6812_SCK_RESET;
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2108      	movs	r1, #8
 8002e42:	4806      	ldr	r0, [pc, #24]	; (8002e5c <ltc6812_Write8+0x78>)
 8002e44:	f005 fa9b 	bl	800837e <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	73fb      	strb	r3, [r7, #15]
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b07      	cmp	r3, #7
 8002e52:	d9d4      	bls.n	8002dfe <ltc6812_Write8+0x1a>
	}
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40010c00 	.word	0x40010c00

08002e60 <ltc6812_Read8>:
		ltc6812_SCK_SET;
	}
}

uint8_t ltc6812_Read8()
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t temp = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	71bb      	strb	r3, [r7, #6]
	//ltc6812_Delay(10);
	//ltc6812_CS_RESET(CS_Pin);
	ltc6812_MOSI_RESET;
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2120      	movs	r1, #32
 8002e6e:	481e      	ldr	r0, [pc, #120]	; (8002ee8 <ltc6812_Read8+0x88>)
 8002e70:	f005 fa85 	bl	800837e <HAL_GPIO_WritePin>
	ltc6812_SCK_RESET;
 8002e74:	2200      	movs	r2, #0
 8002e76:	2108      	movs	r1, #8
 8002e78:	481b      	ldr	r0, [pc, #108]	; (8002ee8 <ltc6812_Read8+0x88>)
 8002e7a:	f005 fa80 	bl	800837e <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8002e7e:	2300      	movs	r3, #0
 8002e80:	71fb      	strb	r3, [r7, #7]
 8002e82:	e028      	b.n	8002ed6 <ltc6812_Read8+0x76>
		ltc6812_Delay(10);
 8002e84:	200a      	movs	r0, #10
 8002e86:	f7ff ff9d 	bl	8002dc4 <ltc6812_Delay>
		ltc6812_SCK_SET;
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	2108      	movs	r1, #8
 8002e8e:	4816      	ldr	r0, [pc, #88]	; (8002ee8 <ltc6812_Read8+0x88>)
 8002e90:	f005 fa75 	bl	800837e <HAL_GPIO_WritePin>
		ltc6812_Delay(10);
 8002e94:	200a      	movs	r0, #10
 8002e96:	f7ff ff95 	bl	8002dc4 <ltc6812_Delay>
		if (ltc6812_MISO == GPIO_PIN_SET) {
 8002e9a:	2110      	movs	r1, #16
 8002e9c:	4812      	ldr	r0, [pc, #72]	; (8002ee8 <ltc6812_Read8+0x88>)
 8002e9e:	f005 fa57 	bl	8008350 <HAL_GPIO_ReadPin>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d10b      	bne.n	8002ec0 <ltc6812_Read8+0x60>
			temp |= (1 << (7-i));
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	f1c3 0307 	rsb	r3, r3, #7
 8002eae:	2201      	movs	r2, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	b25a      	sxtb	r2, r3
 8002eb6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	b25b      	sxtb	r3, r3
 8002ebe:	71bb      	strb	r3, [r7, #6]
		}
		ltc6812_Delay(10);
 8002ec0:	200a      	movs	r0, #10
 8002ec2:	f7ff ff7f 	bl	8002dc4 <ltc6812_Delay>
		ltc6812_SCK_RESET;
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2108      	movs	r1, #8
 8002eca:	4807      	ldr	r0, [pc, #28]	; (8002ee8 <ltc6812_Read8+0x88>)
 8002ecc:	f005 fa57 	bl	800837e <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	71fb      	strb	r3, [r7, #7]
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	2b07      	cmp	r3, #7
 8002eda:	d9d3      	bls.n	8002e84 <ltc6812_Read8+0x24>
	}
	//ltc6812_CS_SET(CS_Pin);

	return temp;
 8002edc:	79bb      	ldrb	r3, [r7, #6]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40010c00 	.word	0x40010c00

08002eec <LTC681x_adcv_emul>:

void LTC681x_adcv_emul( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH //Cell Channels to be measured
                 )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	71bb      	strb	r3, [r7, #6]
 8002efa:	4613      	mov	r3, r2
 8002efc:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;
	
	md_bits = (MD & 0x02) >> 1;
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	105b      	asrs	r3, r3, #1
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	01db      	lsls	r3, r3, #7
 8002f16:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8002f18:	79bb      	ldrb	r3, [r7, #6]
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	4413      	add	r3, r2
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	797b      	ldrb	r3, [r7, #5]
 8002f26:	4413      	add	r3, r2
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	3360      	adds	r3, #96	; 0x60
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	737b      	strb	r3, [r7, #13]
	
	cmd_68_emul(cmd);
 8002f30:	f107 030c 	add.w	r3, r7, #12
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f805 	bl	8002f44 <cmd_68_emul>
}
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <cmd_68_emul>:

void cmd_68_emul(uint8_t tx_cmd[2])
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4];
    uint16_t cmd_pec;
//    uint8_t md_bits;

    cmd[0] = tx_cmd[0];
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	723b      	strb	r3, [r7, #8]
    cmd[1] =  tx_cmd[1];
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	785b      	ldrb	r3, [r3, #1]
 8002f56:	727b      	strb	r3, [r7, #9]
    cmd_pec = pec15_calc_emul(2, cmd);
 8002f58:	f107 0308 	add.w	r3, r7, #8
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	2002      	movs	r0, #2
 8002f60:	f000 f82a 	bl	8002fb8 <pec15_calc_emul>
 8002f64:	4603      	mov	r3, r0
 8002f66:	81fb      	strh	r3, [r7, #14]
    cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002f68:	89fb      	ldrh	r3, [r7, #14]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t)(cmd_pec);
 8002f72:	89fb      	ldrh	r3, [r7, #14]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	72fb      	strb	r3, [r7, #11]
    ltc6812_CS_RESET(ltc6812_CS_PIN);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	480d      	ldr	r0, [pc, #52]	; (8002fb4 <cmd_68_emul+0x70>)
 8002f7e:	f005 f9fe 	bl	800837e <HAL_GPIO_WritePin>
    ltc6812_Write8(cmd[0]);
 8002f82:	7a3b      	ldrb	r3, [r7, #8]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff2d 	bl	8002de4 <ltc6812_Write8>
		ltc6812_Write8(cmd[1]);
 8002f8a:	7a7b      	ldrb	r3, [r7, #9]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff29 	bl	8002de4 <ltc6812_Write8>
		ltc6812_Write8(cmd[2]);
 8002f92:	7abb      	ldrb	r3, [r7, #10]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff25 	bl	8002de4 <ltc6812_Write8>
		ltc6812_Write8(cmd[3]);
 8002f9a:	7afb      	ldrb	r3, [r7, #11]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff21 	bl	8002de4 <ltc6812_Write8>
    ltc6812_CS_SET(ltc6812_CS_PIN);
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	4803      	ldr	r0, [pc, #12]	; (8002fb4 <cmd_68_emul+0x70>)
 8002fa8:	f005 f9e9 	bl	800837e <HAL_GPIO_WritePin>

}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40010c00 	.word	0x40010c00

08002fb8 <pec15_calc_emul>:


uint16_t pec15_calc_emul(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
    uint16_t remainder,addr;

    remainder = 16;//initialize the PEC
 8002fc4:	2310      	movs	r3, #16
 8002fc6:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i<len; i++) { // loops for each byte in data array
 8002fc8:	2300      	movs	r3, #0
 8002fca:	737b      	strb	r3, [r7, #13]
 8002fcc:	e019      	b.n	8003002 <pec15_calc_emul+0x4a>
        addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8002fce:	89fb      	ldrh	r3, [r7, #14]
 8002fd0:	09db      	lsrs	r3, r3, #7
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	7b7b      	ldrb	r3, [r7, #13]
 8002fd6:	6839      	ldr	r1, [r7, #0]
 8002fd8:	440b      	add	r3, r1
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	4053      	eors	r3, r2
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	817b      	strh	r3, [r7, #10]
//#ifdef MBED
        remainder = (remainder<<8)^crc15Table[addr];
 8002fe6:	89fb      	ldrh	r3, [r7, #14]
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	b21a      	sxth	r2, r3
 8002fec:	897b      	ldrh	r3, [r7, #10]
 8002fee:	490b      	ldr	r1, [pc, #44]	; (800301c <pec15_calc_emul+0x64>)
 8002ff0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002ff4:	b21b      	sxth	r3, r3
 8002ff6:	4053      	eors	r3, r2
 8002ff8:	b21b      	sxth	r3, r3
 8002ffa:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i<len; i++) { // loops for each byte in data array
 8002ffc:	7b7b      	ldrb	r3, [r7, #13]
 8002ffe:	3301      	adds	r3, #1
 8003000:	737b      	strb	r3, [r7, #13]
 8003002:	7b7a      	ldrb	r2, [r7, #13]
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	429a      	cmp	r2, r3
 8003008:	d3e1      	bcc.n	8002fce <pec15_calc_emul+0x16>
//#else
//        remainder = (remainder<<8)^pgm_read_word_near(crc15Table+addr);
//#endif
    }
    return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 800300a:	89fb      	ldrh	r3, [r7, #14]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	b29b      	uxth	r3, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	0800d0ac 	.word	0x0800d0ac

08003020 <LTC681x_rdcv_reg_emul>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg_emul(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t data_out[8] //An array of the unparsed cell codes
                     )
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	603a      	str	r2, [r7, #0]
 800302a:	71fb      	strb	r3, [r7, #7]
 800302c:	460b      	mov	r3, r1
 800302e:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d104      	bne.n	8003040 <LTC681x_rdcv_reg_emul+0x20>
	{
		cmd[1] = 0x04;  //alamat asli 0x04
 8003036:	2304      	movs	r3, #4
 8003038:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800303a:	2300      	movs	r3, #0
 800303c:	723b      	strb	r3, [r7, #8]
 800303e:	e026      	b.n	800308e <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 2) //2: RDCVB
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d104      	bne.n	8003050 <LTC681x_rdcv_reg_emul+0x30>
	{
		cmd[1] = 0x06;
 8003046:	2306      	movs	r3, #6
 8003048:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800304a:	2300      	movs	r3, #0
 800304c:	723b      	strb	r3, [r7, #8]
 800304e:	e01e      	b.n	800308e <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 3) //3: RDCVC
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d104      	bne.n	8003060 <LTC681x_rdcv_reg_emul+0x40>
	{
		cmd[1] = 0x08;
 8003056:	2308      	movs	r3, #8
 8003058:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800305a:	2300      	movs	r3, #0
 800305c:	723b      	strb	r3, [r7, #8]
 800305e:	e016      	b.n	800308e <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 4) //4: RDCVD
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	2b04      	cmp	r3, #4
 8003064:	d104      	bne.n	8003070 <LTC681x_rdcv_reg_emul+0x50>
	{
		cmd[1] = 0x0A;
 8003066:	230a      	movs	r3, #10
 8003068:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800306a:	2300      	movs	r3, #0
 800306c:	723b      	strb	r3, [r7, #8]
 800306e:	e00e      	b.n	800308e <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 5) //4: RDCVE
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	2b05      	cmp	r3, #5
 8003074:	d104      	bne.n	8003080 <LTC681x_rdcv_reg_emul+0x60>
	{
		cmd[1] = 0x09;
 8003076:	2309      	movs	r3, #9
 8003078:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800307a:	2300      	movs	r3, #0
 800307c:	723b      	strb	r3, [r7, #8]
 800307e:	e006      	b.n	800308e <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 6) //4: RDCVF
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	2b06      	cmp	r3, #6
 8003084:	d103      	bne.n	800308e <LTC681x_rdcv_reg_emul+0x6e>
	{
		cmd[1] = 0x0B;
 8003086:	230b      	movs	r3, #11
 8003088:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800308a:	2300      	movs	r3, #0
 800308c:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc_emul(2, cmd);
 800308e:	f107 0308 	add.w	r3, r7, #8
 8003092:	4619      	mov	r1, r3
 8003094:	2002      	movs	r0, #2
 8003096:	f7ff ff8f 	bl	8002fb8 <pec15_calc_emul>
 800309a:	4603      	mov	r3, r0
 800309c:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800309e:	89fb      	ldrh	r3, [r7, #14]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 80030a8:	89fb      	ldrh	r3, [r7, #14]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	72fb      	strb	r3, [r7, #11]

	ltc6812_CS_RESET(ltc6812_CS_PIN);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2101      	movs	r1, #1
 80030b2:	4826      	ldr	r0, [pc, #152]	; (800314c <LTC681x_rdcv_reg_emul+0x12c>)
 80030b4:	f005 f963 	bl	800837e <HAL_GPIO_WritePin>
  ltc6812_Write8(cmd[0]);
 80030b8:	7a3b      	ldrb	r3, [r7, #8]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fe92 	bl	8002de4 <ltc6812_Write8>
	ltc6812_Write8(cmd[1]);
 80030c0:	7a7b      	ldrb	r3, [r7, #9]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fe8e 	bl	8002de4 <ltc6812_Write8>
	ltc6812_Write8(cmd[2]);
 80030c8:	7abb      	ldrb	r3, [r7, #10]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fe8a 	bl	8002de4 <ltc6812_Write8>
	ltc6812_Write8(cmd[3]);
 80030d0:	7afb      	ldrb	r3, [r7, #11]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fe86 	bl	8002de4 <ltc6812_Write8>
	
	data_out[0]= ltc6812_Read8();
 80030d8:	f7ff fec2 	bl	8002e60 <ltc6812_Read8>
 80030dc:	4603      	mov	r3, r0
 80030de:	461a      	mov	r2, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	701a      	strb	r2, [r3, #0]
	data_out[1]= ltc6812_Read8();
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	1c5c      	adds	r4, r3, #1
 80030e8:	f7ff feba 	bl	8002e60 <ltc6812_Read8>
 80030ec:	4603      	mov	r3, r0
 80030ee:	7023      	strb	r3, [r4, #0]
	data_out[2]= ltc6812_Read8();
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	1c9c      	adds	r4, r3, #2
 80030f4:	f7ff feb4 	bl	8002e60 <ltc6812_Read8>
 80030f8:	4603      	mov	r3, r0
 80030fa:	7023      	strb	r3, [r4, #0]
	data_out[3]= ltc6812_Read8();
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	1cdc      	adds	r4, r3, #3
 8003100:	f7ff feae 	bl	8002e60 <ltc6812_Read8>
 8003104:	4603      	mov	r3, r0
 8003106:	7023      	strb	r3, [r4, #0]
	data_out[4]= ltc6812_Read8();
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	1d1c      	adds	r4, r3, #4
 800310c:	f7ff fea8 	bl	8002e60 <ltc6812_Read8>
 8003110:	4603      	mov	r3, r0
 8003112:	7023      	strb	r3, [r4, #0]
	data_out[5]= ltc6812_Read8();
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	1d5c      	adds	r4, r3, #5
 8003118:	f7ff fea2 	bl	8002e60 <ltc6812_Read8>
 800311c:	4603      	mov	r3, r0
 800311e:	7023      	strb	r3, [r4, #0]
	data_out[6]= ltc6812_Read8();
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	1d9c      	adds	r4, r3, #6
 8003124:	f7ff fe9c 	bl	8002e60 <ltc6812_Read8>
 8003128:	4603      	mov	r3, r0
 800312a:	7023      	strb	r3, [r4, #0]
	data_out[7]= ltc6812_Read8();
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	1ddc      	adds	r4, r3, #7
 8003130:	f7ff fe96 	bl	8002e60 <ltc6812_Read8>
 8003134:	4603      	mov	r3, r0
 8003136:	7023      	strb	r3, [r4, #0]
	
  ltc6812_CS_SET(ltc6812_CS_PIN);
 8003138:	2201      	movs	r2, #1
 800313a:	2101      	movs	r1, #1
 800313c:	4803      	ldr	r0, [pc, #12]	; (800314c <LTC681x_rdcv_reg_emul+0x12c>)
 800313e:	f005 f91e 	bl	800837e <HAL_GPIO_WritePin>
	
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	bd90      	pop	{r4, r7, pc}
 800314a:	bf00      	nop
 800314c:	40010c00 	.word	0x40010c00

08003150 <read_v_15cell>:
	cell_data[ccc]=v_cell_digi*0.0001;
	
}

void read_v_15cell(uint16_t v_cell_digi[15],float vcell_data[15])
{
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
		uint8_t cmd_v[8];
		uint8_t cc=0;
 800315a:	2300      	movs	r3, #0
 800315c:	75fb      	strb	r3, [r7, #23]
		
		HAL_GPIO_WritePin(CS_SPI1_GPIO_Port,CS_SPI1_Pin,GPIO_PIN_RESET);
 800315e:	2200      	movs	r2, #0
 8003160:	2101      	movs	r1, #1
 8003162:	48c7      	ldr	r0, [pc, #796]	; (8003480 <read_v_15cell+0x330>)
 8003164:	f005 f90b 	bl	800837e <HAL_GPIO_WritePin>
		cmd2[0]=0x07;
 8003168:	4bc6      	ldr	r3, [pc, #792]	; (8003484 <read_v_15cell+0x334>)
 800316a:	2207      	movs	r2, #7
 800316c:	701a      	strb	r2, [r3, #0]
		cmd2[1]=0x23;
 800316e:	4bc5      	ldr	r3, [pc, #788]	; (8003484 <read_v_15cell+0x334>)
 8003170:	2223      	movs	r2, #35	; 0x23
 8003172:	705a      	strb	r2, [r3, #1]
		cmd_68_emul(cmd2);	
 8003174:	48c3      	ldr	r0, [pc, #780]	; (8003484 <read_v_15cell+0x334>)
 8003176:	f7ff fee5 	bl	8002f44 <cmd_68_emul>
		HAL_Delay(1);
 800317a:	2001      	movs	r0, #1
 800317c:	f003 fa40 	bl	8006600 <HAL_Delay>
		LTC681x_adcv_emul(0,1,0);
 8003180:	2200      	movs	r2, #0
 8003182:	2101      	movs	r1, #1
 8003184:	2000      	movs	r0, #0
 8003186:	f7ff feb1 	bl	8002eec <LTC681x_adcv_emul>
		HAL_Delay(700);
 800318a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800318e:	f003 fa37 	bl	8006600 <HAL_Delay>
	
		LTC681x_rdcv_reg_emul(1,1,cmd_v);
 8003192:	f107 030c 	add.w	r3, r7, #12
 8003196:	461a      	mov	r2, r3
 8003198:	2101      	movs	r1, #1
 800319a:	2001      	movs	r0, #1
 800319c:	f7ff ff40 	bl	8003020 <LTC681x_rdcv_reg_emul>
		
		v_cell_digi[cc]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc];
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	3301      	adds	r3, #1
 80031a6:	f107 0218 	add.w	r2, r7, #24
 80031aa:	4413      	add	r3, r2
 80031ac:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	7dfa      	ldrb	r2, [r7, #23]
 80031b4:	0052      	lsls	r2, r2, #1
 80031b6:	f107 0118 	add.w	r1, r7, #24
 80031ba:	440a      	add	r2, r1
 80031bc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd fd6a 	bl	8000c9c <__aeabi_i2f>
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	4aaf      	ldr	r2, [pc, #700]	; (8003488 <read_v_15cell+0x338>)
 80031cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d0:	4619      	mov	r1, r3
 80031d2:	f7fd fcad 	bl	8000b30 <__aeabi_fsub>
 80031d6:	4603      	mov	r3, r0
 80031d8:	4619      	mov	r1, r3
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	18d4      	adds	r4, r2, r3
 80031e2:	4608      	mov	r0, r1
 80031e4:	f7fd ff9a 	bl	800111c <__aeabi_f2uiz>
 80031e8:	4603      	mov	r3, r0
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	8023      	strh	r3, [r4, #0]
		vcell_data[cc]=v_cell_digi[cc]*0.0001;
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd f903 	bl	8000404 <__aeabi_i2d>
 80031fe:	a39e      	add	r3, pc, #632	; (adr r3, 8003478 <read_v_15cell+0x328>)
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	f7fd f968 	bl	80004d8 <__aeabi_dmul>
 8003208:	4603      	mov	r3, r0
 800320a:	460c      	mov	r4, r1
 800320c:	4618      	mov	r0, r3
 800320e:	4621      	mov	r1, r4
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	18d4      	adds	r4, r2, r3
 8003218:	f7fd fc36 	bl	8000a88 <__aeabi_d2f>
 800321c:	4603      	mov	r3, r0
 800321e:	6023      	str	r3, [r4, #0]
		cc++;
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	3301      	adds	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc];
 8003226:	7dfb      	ldrb	r3, [r7, #23]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	3301      	adds	r3, #1
 800322c:	f107 0218 	add.w	r2, r7, #24
 8003230:	4413      	add	r3, r2
 8003232:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	7dfa      	ldrb	r2, [r7, #23]
 800323a:	0052      	lsls	r2, r2, #1
 800323c:	f107 0118 	add.w	r1, r7, #24
 8003240:	440a      	add	r2, r1
 8003242:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003246:	4313      	orrs	r3, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd fd27 	bl	8000c9c <__aeabi_i2f>
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	4a8d      	ldr	r2, [pc, #564]	; (8003488 <read_v_15cell+0x338>)
 8003252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003256:	4619      	mov	r1, r3
 8003258:	f7fd fc6a 	bl	8000b30 <__aeabi_fsub>
 800325c:	4603      	mov	r3, r0
 800325e:	4619      	mov	r1, r3
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	18d4      	adds	r4, r2, r3
 8003268:	4608      	mov	r0, r1
 800326a:	f7fd ff57 	bl	800111c <__aeabi_f2uiz>
 800326e:	4603      	mov	r3, r0
 8003270:	b29b      	uxth	r3, r3
 8003272:	8023      	strh	r3, [r4, #0]
		vcell_data[cc]=v_cell_digi[cc]*0.0001;
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd f8c0 	bl	8000404 <__aeabi_i2d>
 8003284:	a37c      	add	r3, pc, #496	; (adr r3, 8003478 <read_v_15cell+0x328>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	f7fd f925 	bl	80004d8 <__aeabi_dmul>
 800328e:	4603      	mov	r3, r0
 8003290:	460c      	mov	r4, r1
 8003292:	4618      	mov	r0, r3
 8003294:	4621      	mov	r1, r4
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	18d4      	adds	r4, r2, r3
 800329e:	f7fd fbf3 	bl	8000a88 <__aeabi_d2f>
 80032a2:	4603      	mov	r3, r0
 80032a4:	6023      	str	r3, [r4, #0]
		cc++;
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
 80032a8:	3301      	adds	r3, #1
 80032aa:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc];
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	3301      	adds	r3, #1
 80032b2:	f107 0218 	add.w	r2, r7, #24
 80032b6:	4413      	add	r3, r2
 80032b8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	7dfa      	ldrb	r2, [r7, #23]
 80032c0:	0052      	lsls	r2, r2, #1
 80032c2:	f107 0118 	add.w	r1, r7, #24
 80032c6:	440a      	add	r2, r1
 80032c8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd fce4 	bl	8000c9c <__aeabi_i2f>
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	4a6c      	ldr	r2, [pc, #432]	; (8003488 <read_v_15cell+0x338>)
 80032d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032dc:	4619      	mov	r1, r3
 80032de:	f7fd fc27 	bl	8000b30 <__aeabi_fsub>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4619      	mov	r1, r3
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	18d4      	adds	r4, r2, r3
 80032ee:	4608      	mov	r0, r1
 80032f0:	f7fd ff14 	bl	800111c <__aeabi_f2uiz>
 80032f4:	4603      	mov	r3, r0
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	8023      	strh	r3, [r4, #0]
		vcell_data[cc]=v_cell_digi[cc]*0.0001;
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd f87d 	bl	8000404 <__aeabi_i2d>
 800330a:	a35b      	add	r3, pc, #364	; (adr r3, 8003478 <read_v_15cell+0x328>)
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f7fd f8e2 	bl	80004d8 <__aeabi_dmul>
 8003314:	4603      	mov	r3, r0
 8003316:	460c      	mov	r4, r1
 8003318:	4618      	mov	r0, r3
 800331a:	4621      	mov	r1, r4
 800331c:	7dfb      	ldrb	r3, [r7, #23]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	18d4      	adds	r4, r2, r3
 8003324:	f7fd fbb0 	bl	8000a88 <__aeabi_d2f>
 8003328:	4603      	mov	r3, r0
 800332a:	6023      	str	r3, [r4, #0]
		cc++;
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	3301      	adds	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(2,1,cmd_v);
 8003332:	f107 030c 	add.w	r3, r7, #12
 8003336:	461a      	mov	r2, r3
 8003338:	2101      	movs	r1, #1
 800333a:	2002      	movs	r0, #2
 800333c:	f7ff fe70 	bl	8003020 <LTC681x_rdcv_reg_emul>
		cc=0;
 8003340:	2300      	movs	r3, #0
 8003342:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+3]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+3];
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	3301      	adds	r3, #1
 800334a:	f107 0218 	add.w	r2, r7, #24
 800334e:	4413      	add	r3, r2
 8003350:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	7dfa      	ldrb	r2, [r7, #23]
 8003358:	0052      	lsls	r2, r2, #1
 800335a:	f107 0118 	add.w	r1, r7, #24
 800335e:	440a      	add	r2, r1
 8003360:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003364:	4313      	orrs	r3, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd fc98 	bl	8000c9c <__aeabi_i2f>
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	3303      	adds	r3, #3
 8003370:	4a45      	ldr	r2, [pc, #276]	; (8003488 <read_v_15cell+0x338>)
 8003372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003376:	4619      	mov	r1, r3
 8003378:	f7fd fbda 	bl	8000b30 <__aeabi_fsub>
 800337c:	4603      	mov	r3, r0
 800337e:	4619      	mov	r1, r3
 8003380:	7dfb      	ldrb	r3, [r7, #23]
 8003382:	3303      	adds	r3, #3
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	18d4      	adds	r4, r2, r3
 800338a:	4608      	mov	r0, r1
 800338c:	f7fd fec6 	bl	800111c <__aeabi_f2uiz>
 8003390:	4603      	mov	r3, r0
 8003392:	b29b      	uxth	r3, r3
 8003394:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+3]=v_cell_digi[cc+3]*0.0001;
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	3303      	adds	r3, #3
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	4413      	add	r3, r2
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd f82e 	bl	8000404 <__aeabi_i2d>
 80033a8:	a333      	add	r3, pc, #204	; (adr r3, 8003478 <read_v_15cell+0x328>)
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f7fd f893 	bl	80004d8 <__aeabi_dmul>
 80033b2:	4603      	mov	r3, r0
 80033b4:	460c      	mov	r4, r1
 80033b6:	4618      	mov	r0, r3
 80033b8:	4621      	mov	r1, r4
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
 80033bc:	3303      	adds	r3, #3
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	18d4      	adds	r4, r2, r3
 80033c4:	f7fd fb60 	bl	8000a88 <__aeabi_d2f>
 80033c8:	4603      	mov	r3, r0
 80033ca:	6023      	str	r3, [r4, #0]
		cc++;
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	3301      	adds	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+3]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+3];
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	3301      	adds	r3, #1
 80033d8:	f107 0218 	add.w	r2, r7, #24
 80033dc:	4413      	add	r3, r2
 80033de:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	7dfa      	ldrb	r2, [r7, #23]
 80033e6:	0052      	lsls	r2, r2, #1
 80033e8:	f107 0118 	add.w	r1, r7, #24
 80033ec:	440a      	add	r2, r1
 80033ee:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd fc51 	bl	8000c9c <__aeabi_i2f>
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
 80033fc:	3303      	adds	r3, #3
 80033fe:	4a22      	ldr	r2, [pc, #136]	; (8003488 <read_v_15cell+0x338>)
 8003400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003404:	4619      	mov	r1, r3
 8003406:	f7fd fb93 	bl	8000b30 <__aeabi_fsub>
 800340a:	4603      	mov	r3, r0
 800340c:	4619      	mov	r1, r3
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	3303      	adds	r3, #3
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	18d4      	adds	r4, r2, r3
 8003418:	4608      	mov	r0, r1
 800341a:	f7fd fe7f 	bl	800111c <__aeabi_f2uiz>
 800341e:	4603      	mov	r3, r0
 8003420:	b29b      	uxth	r3, r3
 8003422:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+3]=v_cell_digi[cc+3]*0.0001;
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	3303      	adds	r3, #3
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	4413      	add	r3, r2
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7fc ffe7 	bl	8000404 <__aeabi_i2d>
 8003436:	a310      	add	r3, pc, #64	; (adr r3, 8003478 <read_v_15cell+0x328>)
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f7fd f84c 	bl	80004d8 <__aeabi_dmul>
 8003440:	4603      	mov	r3, r0
 8003442:	460c      	mov	r4, r1
 8003444:	4618      	mov	r0, r3
 8003446:	4621      	mov	r1, r4
 8003448:	7dfb      	ldrb	r3, [r7, #23]
 800344a:	3303      	adds	r3, #3
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	18d4      	adds	r4, r2, r3
 8003452:	f7fd fb19 	bl	8000a88 <__aeabi_d2f>
 8003456:	4603      	mov	r3, r0
 8003458:	6023      	str	r3, [r4, #0]
		cc++;
 800345a:	7dfb      	ldrb	r3, [r7, #23]
 800345c:	3301      	adds	r3, #1
 800345e:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+3]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+3];
 8003460:	7dfb      	ldrb	r3, [r7, #23]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	3301      	adds	r3, #1
 8003466:	f107 0218 	add.w	r2, r7, #24
 800346a:	4413      	add	r3, r2
 800346c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	e00b      	b.n	800348c <read_v_15cell+0x33c>
 8003474:	f3af 8000 	nop.w
 8003478:	eb1c432d 	.word	0xeb1c432d
 800347c:	3f1a36e2 	.word	0x3f1a36e2
 8003480:	40010c00 	.word	0x40010c00
 8003484:	20000ba0 	.word	0x20000ba0
 8003488:	20000018 	.word	0x20000018
 800348c:	7dfa      	ldrb	r2, [r7, #23]
 800348e:	0052      	lsls	r2, r2, #1
 8003490:	f107 0118 	add.w	r1, r7, #24
 8003494:	440a      	add	r2, r1
 8003496:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800349a:	4313      	orrs	r3, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f7fd fbfd 	bl	8000c9c <__aeabi_i2f>
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	3303      	adds	r3, #3
 80034a6:	4ac6      	ldr	r2, [pc, #792]	; (80037c0 <read_v_15cell+0x670>)
 80034a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ac:	4619      	mov	r1, r3
 80034ae:	f7fd fb3f 	bl	8000b30 <__aeabi_fsub>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4619      	mov	r1, r3
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	3303      	adds	r3, #3
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	18d4      	adds	r4, r2, r3
 80034c0:	4608      	mov	r0, r1
 80034c2:	f7fd fe2b 	bl	800111c <__aeabi_f2uiz>
 80034c6:	4603      	mov	r3, r0
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+3]=v_cell_digi[cc+3]*0.0001;
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	3303      	adds	r3, #3
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fc ff93 	bl	8000404 <__aeabi_i2d>
 80034de:	a3b6      	add	r3, pc, #728	; (adr r3, 80037b8 <read_v_15cell+0x668>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f7fc fff8 	bl	80004d8 <__aeabi_dmul>
 80034e8:	4603      	mov	r3, r0
 80034ea:	460c      	mov	r4, r1
 80034ec:	4618      	mov	r0, r3
 80034ee:	4621      	mov	r1, r4
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	3303      	adds	r3, #3
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	18d4      	adds	r4, r2, r3
 80034fa:	f7fd fac5 	bl	8000a88 <__aeabi_d2f>
 80034fe:	4603      	mov	r3, r0
 8003500:	6023      	str	r3, [r4, #0]
		cc++;
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	3301      	adds	r3, #1
 8003506:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(3,1,cmd_v);
 8003508:	f107 030c 	add.w	r3, r7, #12
 800350c:	461a      	mov	r2, r3
 800350e:	2101      	movs	r1, #1
 8003510:	2003      	movs	r0, #3
 8003512:	f7ff fd85 	bl	8003020 <LTC681x_rdcv_reg_emul>
		cc=0;
 8003516:	2300      	movs	r3, #0
 8003518:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+6]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+6];
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	3301      	adds	r3, #1
 8003520:	f107 0218 	add.w	r2, r7, #24
 8003524:	4413      	add	r3, r2
 8003526:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	7dfa      	ldrb	r2, [r7, #23]
 800352e:	0052      	lsls	r2, r2, #1
 8003530:	f107 0118 	add.w	r1, r7, #24
 8003534:	440a      	add	r2, r1
 8003536:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800353a:	4313      	orrs	r3, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f7fd fbad 	bl	8000c9c <__aeabi_i2f>
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	3306      	adds	r3, #6
 8003546:	4a9e      	ldr	r2, [pc, #632]	; (80037c0 <read_v_15cell+0x670>)
 8003548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354c:	4619      	mov	r1, r3
 800354e:	f7fd faef 	bl	8000b30 <__aeabi_fsub>
 8003552:	4603      	mov	r3, r0
 8003554:	4619      	mov	r1, r3
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	3306      	adds	r3, #6
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	18d4      	adds	r4, r2, r3
 8003560:	4608      	mov	r0, r1
 8003562:	f7fd fddb 	bl	800111c <__aeabi_f2uiz>
 8003566:	4603      	mov	r3, r0
 8003568:	b29b      	uxth	r3, r3
 800356a:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+6]=v_cell_digi[cc+6]*0.0001;
 800356c:	7dfb      	ldrb	r3, [r7, #23]
 800356e:	3306      	adds	r3, #6
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7fc ff43 	bl	8000404 <__aeabi_i2d>
 800357e:	a38e      	add	r3, pc, #568	; (adr r3, 80037b8 <read_v_15cell+0x668>)
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f7fc ffa8 	bl	80004d8 <__aeabi_dmul>
 8003588:	4603      	mov	r3, r0
 800358a:	460c      	mov	r4, r1
 800358c:	4618      	mov	r0, r3
 800358e:	4621      	mov	r1, r4
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	3306      	adds	r3, #6
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	18d4      	adds	r4, r2, r3
 800359a:	f7fd fa75 	bl	8000a88 <__aeabi_d2f>
 800359e:	4603      	mov	r3, r0
 80035a0:	6023      	str	r3, [r4, #0]
		cc++;
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
 80035a4:	3301      	adds	r3, #1
 80035a6:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+6]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+6];
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	3301      	adds	r3, #1
 80035ae:	f107 0218 	add.w	r2, r7, #24
 80035b2:	4413      	add	r3, r2
 80035b4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	7dfa      	ldrb	r2, [r7, #23]
 80035bc:	0052      	lsls	r2, r2, #1
 80035be:	f107 0118 	add.w	r1, r7, #24
 80035c2:	440a      	add	r2, r1
 80035c4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fd fb66 	bl	8000c9c <__aeabi_i2f>
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	3306      	adds	r3, #6
 80035d4:	4a7a      	ldr	r2, [pc, #488]	; (80037c0 <read_v_15cell+0x670>)
 80035d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035da:	4619      	mov	r1, r3
 80035dc:	f7fd faa8 	bl	8000b30 <__aeabi_fsub>
 80035e0:	4603      	mov	r3, r0
 80035e2:	4619      	mov	r1, r3
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
 80035e6:	3306      	adds	r3, #6
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	18d4      	adds	r4, r2, r3
 80035ee:	4608      	mov	r0, r1
 80035f0:	f7fd fd94 	bl	800111c <__aeabi_f2uiz>
 80035f4:	4603      	mov	r3, r0
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+6]=v_cell_digi[cc+6]*0.0001;
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	3306      	adds	r3, #6
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	4413      	add	r3, r2
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fc fefc 	bl	8000404 <__aeabi_i2d>
 800360c:	a36a      	add	r3, pc, #424	; (adr r3, 80037b8 <read_v_15cell+0x668>)
 800360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003612:	f7fc ff61 	bl	80004d8 <__aeabi_dmul>
 8003616:	4603      	mov	r3, r0
 8003618:	460c      	mov	r4, r1
 800361a:	4618      	mov	r0, r3
 800361c:	4621      	mov	r1, r4
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	3306      	adds	r3, #6
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	18d4      	adds	r4, r2, r3
 8003628:	f7fd fa2e 	bl	8000a88 <__aeabi_d2f>
 800362c:	4603      	mov	r3, r0
 800362e:	6023      	str	r3, [r4, #0]
		cc++;
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	3301      	adds	r3, #1
 8003634:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+6]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+6];
 8003636:	7dfb      	ldrb	r3, [r7, #23]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	3301      	adds	r3, #1
 800363c:	f107 0218 	add.w	r2, r7, #24
 8003640:	4413      	add	r3, r2
 8003642:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	7dfa      	ldrb	r2, [r7, #23]
 800364a:	0052      	lsls	r2, r2, #1
 800364c:	f107 0118 	add.w	r1, r7, #24
 8003650:	440a      	add	r2, r1
 8003652:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003656:	4313      	orrs	r3, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f7fd fb1f 	bl	8000c9c <__aeabi_i2f>
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	3306      	adds	r3, #6
 8003662:	4a57      	ldr	r2, [pc, #348]	; (80037c0 <read_v_15cell+0x670>)
 8003664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003668:	4619      	mov	r1, r3
 800366a:	f7fd fa61 	bl	8000b30 <__aeabi_fsub>
 800366e:	4603      	mov	r3, r0
 8003670:	4619      	mov	r1, r3
 8003672:	7dfb      	ldrb	r3, [r7, #23]
 8003674:	3306      	adds	r3, #6
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	18d4      	adds	r4, r2, r3
 800367c:	4608      	mov	r0, r1
 800367e:	f7fd fd4d 	bl	800111c <__aeabi_f2uiz>
 8003682:	4603      	mov	r3, r0
 8003684:	b29b      	uxth	r3, r3
 8003686:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+6]=v_cell_digi[cc+6]*0.0001;
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	3306      	adds	r3, #6
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f7fc feb5 	bl	8000404 <__aeabi_i2d>
 800369a:	a347      	add	r3, pc, #284	; (adr r3, 80037b8 <read_v_15cell+0x668>)
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f7fc ff1a 	bl	80004d8 <__aeabi_dmul>
 80036a4:	4603      	mov	r3, r0
 80036a6:	460c      	mov	r4, r1
 80036a8:	4618      	mov	r0, r3
 80036aa:	4621      	mov	r1, r4
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	3306      	adds	r3, #6
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	18d4      	adds	r4, r2, r3
 80036b6:	f7fd f9e7 	bl	8000a88 <__aeabi_d2f>
 80036ba:	4603      	mov	r3, r0
 80036bc:	6023      	str	r3, [r4, #0]
		cc++;
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	3301      	adds	r3, #1
 80036c2:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(4,1,cmd_v);
 80036c4:	f107 030c 	add.w	r3, r7, #12
 80036c8:	461a      	mov	r2, r3
 80036ca:	2101      	movs	r1, #1
 80036cc:	2004      	movs	r0, #4
 80036ce:	f7ff fca7 	bl	8003020 <LTC681x_rdcv_reg_emul>
		cc=0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+9]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+9];
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	3301      	adds	r3, #1
 80036dc:	f107 0218 	add.w	r2, r7, #24
 80036e0:	4413      	add	r3, r2
 80036e2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	7dfa      	ldrb	r2, [r7, #23]
 80036ea:	0052      	lsls	r2, r2, #1
 80036ec:	f107 0118 	add.w	r1, r7, #24
 80036f0:	440a      	add	r2, r1
 80036f2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fd facf 	bl	8000c9c <__aeabi_i2f>
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	3309      	adds	r3, #9
 8003702:	4a2f      	ldr	r2, [pc, #188]	; (80037c0 <read_v_15cell+0x670>)
 8003704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003708:	4619      	mov	r1, r3
 800370a:	f7fd fa11 	bl	8000b30 <__aeabi_fsub>
 800370e:	4603      	mov	r3, r0
 8003710:	4619      	mov	r1, r3
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	3309      	adds	r3, #9
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	18d4      	adds	r4, r2, r3
 800371c:	4608      	mov	r0, r1
 800371e:	f7fd fcfd 	bl	800111c <__aeabi_f2uiz>
 8003722:	4603      	mov	r3, r0
 8003724:	b29b      	uxth	r3, r3
 8003726:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+9]=v_cell_digi[cc+9]*0.0001;
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	3309      	adds	r3, #9
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fc fe65 	bl	8000404 <__aeabi_i2d>
 800373a:	a31f      	add	r3, pc, #124	; (adr r3, 80037b8 <read_v_15cell+0x668>)
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f7fc feca 	bl	80004d8 <__aeabi_dmul>
 8003744:	4603      	mov	r3, r0
 8003746:	460c      	mov	r4, r1
 8003748:	4618      	mov	r0, r3
 800374a:	4621      	mov	r1, r4
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	3309      	adds	r3, #9
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	18d4      	adds	r4, r2, r3
 8003756:	f7fd f997 	bl	8000a88 <__aeabi_d2f>
 800375a:	4603      	mov	r3, r0
 800375c:	6023      	str	r3, [r4, #0]
		cc++;
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	3301      	adds	r3, #1
 8003762:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+9]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+9];
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	3301      	adds	r3, #1
 800376a:	f107 0218 	add.w	r2, r7, #24
 800376e:	4413      	add	r3, r2
 8003770:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	7dfa      	ldrb	r2, [r7, #23]
 8003778:	0052      	lsls	r2, r2, #1
 800377a:	f107 0118 	add.w	r1, r7, #24
 800377e:	440a      	add	r2, r1
 8003780:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003784:	4313      	orrs	r3, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd fa88 	bl	8000c9c <__aeabi_i2f>
 800378c:	7dfb      	ldrb	r3, [r7, #23]
 800378e:	3309      	adds	r3, #9
 8003790:	4a0b      	ldr	r2, [pc, #44]	; (80037c0 <read_v_15cell+0x670>)
 8003792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003796:	4619      	mov	r1, r3
 8003798:	f7fd f9ca 	bl	8000b30 <__aeabi_fsub>
 800379c:	4603      	mov	r3, r0
 800379e:	4619      	mov	r1, r3
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
 80037a2:	3309      	adds	r3, #9
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	18d4      	adds	r4, r2, r3
 80037aa:	4608      	mov	r0, r1
 80037ac:	f7fd fcb6 	bl	800111c <__aeabi_f2uiz>
 80037b0:	4603      	mov	r3, r0
 80037b2:	e007      	b.n	80037c4 <read_v_15cell+0x674>
 80037b4:	f3af 8000 	nop.w
 80037b8:	eb1c432d 	.word	0xeb1c432d
 80037bc:	3f1a36e2 	.word	0x3f1a36e2
 80037c0:	20000018 	.word	0x20000018
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+9]=v_cell_digi[cc+9]*0.0001;
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	3309      	adds	r3, #9
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fc fe15 	bl	8000404 <__aeabi_i2d>
 80037da:	a3a1      	add	r3, pc, #644	; (adr r3, 8003a60 <read_v_15cell+0x910>)
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f7fc fe7a 	bl	80004d8 <__aeabi_dmul>
 80037e4:	4603      	mov	r3, r0
 80037e6:	460c      	mov	r4, r1
 80037e8:	4618      	mov	r0, r3
 80037ea:	4621      	mov	r1, r4
 80037ec:	7dfb      	ldrb	r3, [r7, #23]
 80037ee:	3309      	adds	r3, #9
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	18d4      	adds	r4, r2, r3
 80037f6:	f7fd f947 	bl	8000a88 <__aeabi_d2f>
 80037fa:	4603      	mov	r3, r0
 80037fc:	6023      	str	r3, [r4, #0]
		cc++;
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
 8003800:	3301      	adds	r3, #1
 8003802:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+9]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+9];
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	3301      	adds	r3, #1
 800380a:	f107 0218 	add.w	r2, r7, #24
 800380e:	4413      	add	r3, r2
 8003810:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	7dfa      	ldrb	r2, [r7, #23]
 8003818:	0052      	lsls	r2, r2, #1
 800381a:	f107 0118 	add.w	r1, r7, #24
 800381e:	440a      	add	r2, r1
 8003820:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003824:	4313      	orrs	r3, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd fa38 	bl	8000c9c <__aeabi_i2f>
 800382c:	7dfb      	ldrb	r3, [r7, #23]
 800382e:	3309      	adds	r3, #9
 8003830:	4a8d      	ldr	r2, [pc, #564]	; (8003a68 <read_v_15cell+0x918>)
 8003832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003836:	4619      	mov	r1, r3
 8003838:	f7fd f97a 	bl	8000b30 <__aeabi_fsub>
 800383c:	4603      	mov	r3, r0
 800383e:	4619      	mov	r1, r3
 8003840:	7dfb      	ldrb	r3, [r7, #23]
 8003842:	3309      	adds	r3, #9
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	18d4      	adds	r4, r2, r3
 800384a:	4608      	mov	r0, r1
 800384c:	f7fd fc66 	bl	800111c <__aeabi_f2uiz>
 8003850:	4603      	mov	r3, r0
 8003852:	b29b      	uxth	r3, r3
 8003854:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+9]=v_cell_digi[cc+9]*0.0001;
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	3309      	adds	r3, #9
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7fc fdce 	bl	8000404 <__aeabi_i2d>
 8003868:	a37d      	add	r3, pc, #500	; (adr r3, 8003a60 <read_v_15cell+0x910>)
 800386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386e:	f7fc fe33 	bl	80004d8 <__aeabi_dmul>
 8003872:	4603      	mov	r3, r0
 8003874:	460c      	mov	r4, r1
 8003876:	4618      	mov	r0, r3
 8003878:	4621      	mov	r1, r4
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	3309      	adds	r3, #9
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	18d4      	adds	r4, r2, r3
 8003884:	f7fd f900 	bl	8000a88 <__aeabi_d2f>
 8003888:	4603      	mov	r3, r0
 800388a:	6023      	str	r3, [r4, #0]
		cc++;
 800388c:	7dfb      	ldrb	r3, [r7, #23]
 800388e:	3301      	adds	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(5,1,cmd_v);
 8003892:	f107 030c 	add.w	r3, r7, #12
 8003896:	461a      	mov	r2, r3
 8003898:	2101      	movs	r1, #1
 800389a:	2005      	movs	r0, #5
 800389c:	f7ff fbc0 	bl	8003020 <LTC681x_rdcv_reg_emul>
		cc=0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+12]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+12];
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	3301      	adds	r3, #1
 80038aa:	f107 0218 	add.w	r2, r7, #24
 80038ae:	4413      	add	r3, r2
 80038b0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	7dfa      	ldrb	r2, [r7, #23]
 80038b8:	0052      	lsls	r2, r2, #1
 80038ba:	f107 0118 	add.w	r1, r7, #24
 80038be:	440a      	add	r2, r1
 80038c0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fd f9e8 	bl	8000c9c <__aeabi_i2f>
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
 80038ce:	330c      	adds	r3, #12
 80038d0:	4a65      	ldr	r2, [pc, #404]	; (8003a68 <read_v_15cell+0x918>)
 80038d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d6:	4619      	mov	r1, r3
 80038d8:	f7fd f92a 	bl	8000b30 <__aeabi_fsub>
 80038dc:	4603      	mov	r3, r0
 80038de:	4619      	mov	r1, r3
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	330c      	adds	r3, #12
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	18d4      	adds	r4, r2, r3
 80038ea:	4608      	mov	r0, r1
 80038ec:	f7fd fc16 	bl	800111c <__aeabi_f2uiz>
 80038f0:	4603      	mov	r3, r0
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+12]=v_cell_digi[cc+12]*0.0001;
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
 80038f8:	330c      	adds	r3, #12
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4413      	add	r3, r2
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fc fd7e 	bl	8000404 <__aeabi_i2d>
 8003908:	a355      	add	r3, pc, #340	; (adr r3, 8003a60 <read_v_15cell+0x910>)
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f7fc fde3 	bl	80004d8 <__aeabi_dmul>
 8003912:	4603      	mov	r3, r0
 8003914:	460c      	mov	r4, r1
 8003916:	4618      	mov	r0, r3
 8003918:	4621      	mov	r1, r4
 800391a:	7dfb      	ldrb	r3, [r7, #23]
 800391c:	330c      	adds	r3, #12
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	18d4      	adds	r4, r2, r3
 8003924:	f7fd f8b0 	bl	8000a88 <__aeabi_d2f>
 8003928:	4603      	mov	r3, r0
 800392a:	6023      	str	r3, [r4, #0]
		cc++;
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	3301      	adds	r3, #1
 8003930:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+12]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+12];
 8003932:	7dfb      	ldrb	r3, [r7, #23]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	3301      	adds	r3, #1
 8003938:	f107 0218 	add.w	r2, r7, #24
 800393c:	4413      	add	r3, r2
 800393e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	7dfa      	ldrb	r2, [r7, #23]
 8003946:	0052      	lsls	r2, r2, #1
 8003948:	f107 0118 	add.w	r1, r7, #24
 800394c:	440a      	add	r2, r1
 800394e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003952:	4313      	orrs	r3, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f7fd f9a1 	bl	8000c9c <__aeabi_i2f>
 800395a:	7dfb      	ldrb	r3, [r7, #23]
 800395c:	330c      	adds	r3, #12
 800395e:	4a42      	ldr	r2, [pc, #264]	; (8003a68 <read_v_15cell+0x918>)
 8003960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003964:	4619      	mov	r1, r3
 8003966:	f7fd f8e3 	bl	8000b30 <__aeabi_fsub>
 800396a:	4603      	mov	r3, r0
 800396c:	4619      	mov	r1, r3
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	330c      	adds	r3, #12
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	18d4      	adds	r4, r2, r3
 8003978:	4608      	mov	r0, r1
 800397a:	f7fd fbcf 	bl	800111c <__aeabi_f2uiz>
 800397e:	4603      	mov	r3, r0
 8003980:	b29b      	uxth	r3, r3
 8003982:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+12]=v_cell_digi[cc+12]*0.0001;
 8003984:	7dfb      	ldrb	r3, [r7, #23]
 8003986:	330c      	adds	r3, #12
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7fc fd37 	bl	8000404 <__aeabi_i2d>
 8003996:	a332      	add	r3, pc, #200	; (adr r3, 8003a60 <read_v_15cell+0x910>)
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f7fc fd9c 	bl	80004d8 <__aeabi_dmul>
 80039a0:	4603      	mov	r3, r0
 80039a2:	460c      	mov	r4, r1
 80039a4:	4618      	mov	r0, r3
 80039a6:	4621      	mov	r1, r4
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
 80039aa:	330c      	adds	r3, #12
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	18d4      	adds	r4, r2, r3
 80039b2:	f7fd f869 	bl	8000a88 <__aeabi_d2f>
 80039b6:	4603      	mov	r3, r0
 80039b8:	6023      	str	r3, [r4, #0]
		cc++;
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
 80039bc:	3301      	adds	r3, #1
 80039be:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+12]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+12];
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	3301      	adds	r3, #1
 80039c6:	f107 0218 	add.w	r2, r7, #24
 80039ca:	4413      	add	r3, r2
 80039cc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	7dfa      	ldrb	r2, [r7, #23]
 80039d4:	0052      	lsls	r2, r2, #1
 80039d6:	f107 0118 	add.w	r1, r7, #24
 80039da:	440a      	add	r2, r1
 80039dc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd f95a 	bl	8000c9c <__aeabi_i2f>
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
 80039ea:	330c      	adds	r3, #12
 80039ec:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <read_v_15cell+0x918>)
 80039ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f2:	4619      	mov	r1, r3
 80039f4:	f7fd f89c 	bl	8000b30 <__aeabi_fsub>
 80039f8:	4603      	mov	r3, r0
 80039fa:	4619      	mov	r1, r3
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	330c      	adds	r3, #12
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	18d4      	adds	r4, r2, r3
 8003a06:	4608      	mov	r0, r1
 8003a08:	f7fd fb88 	bl	800111c <__aeabi_f2uiz>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+12]=v_cell_digi[cc+12]*0.0001;
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	330c      	adds	r3, #12
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fc fcf0 	bl	8000404 <__aeabi_i2d>
 8003a24:	a30e      	add	r3, pc, #56	; (adr r3, 8003a60 <read_v_15cell+0x910>)
 8003a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2a:	f7fc fd55 	bl	80004d8 <__aeabi_dmul>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	460c      	mov	r4, r1
 8003a32:	4618      	mov	r0, r3
 8003a34:	4621      	mov	r1, r4
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
 8003a38:	330c      	adds	r3, #12
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	18d4      	adds	r4, r2, r3
 8003a40:	f7fd f822 	bl	8000a88 <__aeabi_d2f>
 8003a44:	4603      	mov	r3, r0
 8003a46:	6023      	str	r3, [r4, #0]
		cc++;
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	75fb      	strb	r3, [r7, #23]
		
		HAL_GPIO_WritePin(CS_SPI1_GPIO_Port,CS_SPI1_Pin,GPIO_PIN_SET);
 8003a4e:	2201      	movs	r2, #1
 8003a50:	2101      	movs	r1, #1
 8003a52:	4806      	ldr	r0, [pc, #24]	; (8003a6c <read_v_15cell+0x91c>)
 8003a54:	f004 fc93 	bl	800837e <HAL_GPIO_WritePin>
}
 8003a58:	bf00      	nop
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd90      	pop	{r4, r7, pc}
 8003a60:	eb1c432d 	.word	0xeb1c432d
 8003a64:	3f1a36e2 	.word	0x3f1a36e2
 8003a68:	20000018 	.word	0x20000018
 8003a6c:	40010c00 	.word	0x40010c00

08003a70 <LTC681x_wrcfga_reg_emul>:
	
}

void LTC681x_wrcfga_reg_emul( uint8_t CFGA4, uint8_t CFGA5
                     )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	460a      	mov	r2, r1
 8003a7a:	71fb      	strb	r3, [r7, #7]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t data_in[8];

	cmd[1] = 0x01;  //WRCFGA
 8003a80:	2301      	movs	r3, #1
 8003a82:	757b      	strb	r3, [r7, #21]
	cmd[0] = 0x00;
 8003a84:	2300      	movs	r3, #0
 8003a86:	753b      	strb	r3, [r7, #20]
	
	cmd_pec = pec15_calc_emul(2, cmd);
 8003a88:	f107 0314 	add.w	r3, r7, #20
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	2002      	movs	r0, #2
 8003a90:	f7ff fa92 	bl	8002fb8 <pec15_calc_emul>
 8003a94:	4603      	mov	r3, r0
 8003a96:	837b      	strh	r3, [r7, #26]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003a98:	8b7b      	ldrh	r3, [r7, #26]
 8003a9a:	0a1b      	lsrs	r3, r3, #8
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t)(cmd_pec);
 8003aa2:	8b7b      	ldrh	r3, [r7, #26]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	75fb      	strb	r3, [r7, #23]

	ltc6812_CS_RESET(ltc6812_CS_PIN);
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2101      	movs	r1, #1
 8003aac:	4824      	ldr	r0, [pc, #144]	; (8003b40 <LTC681x_wrcfga_reg_emul+0xd0>)
 8003aae:	f004 fc66 	bl	800837e <HAL_GPIO_WritePin>
  ltc6812_Write8(cmd[0]);
 8003ab2:	7d3b      	ldrb	r3, [r7, #20]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff f995 	bl	8002de4 <ltc6812_Write8>
	ltc6812_Write8(cmd[1]);
 8003aba:	7d7b      	ldrb	r3, [r7, #21]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff f991 	bl	8002de4 <ltc6812_Write8>
	ltc6812_Write8(cmd[2]);
 8003ac2:	7dbb      	ldrb	r3, [r7, #22]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff f98d 	bl	8002de4 <ltc6812_Write8>
	ltc6812_Write8(cmd[3]);
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff f989 	bl	8002de4 <ltc6812_Write8>
	
	data_in[0]= 0x00;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	733b      	strb	r3, [r7, #12]
	data_in[1]= 0x00;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	737b      	strb	r3, [r7, #13]
	data_in[2]= 0x00;
 8003ada:	2300      	movs	r3, #0
 8003adc:	73bb      	strb	r3, [r7, #14]
	data_in[3]= 0x00;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	73fb      	strb	r3, [r7, #15]
	data_in[4]= CFGA4;
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	743b      	strb	r3, [r7, #16]
	data_in[5]= CFGA5;
 8003ae6:	79bb      	ldrb	r3, [r7, #6]
 8003ae8:	747b      	strb	r3, [r7, #17]
	cmd_pec=pec15_calc_emul(6,data_in);
 8003aea:	f107 030c 	add.w	r3, r7, #12
 8003aee:	4619      	mov	r1, r3
 8003af0:	2006      	movs	r0, #6
 8003af2:	f7ff fa61 	bl	8002fb8 <pec15_calc_emul>
 8003af6:	4603      	mov	r3, r0
 8003af8:	837b      	strh	r3, [r7, #26]
	data_in[6]= (uint8_t)(cmd_pec >> 8);
 8003afa:	8b7b      	ldrh	r3, [r7, #26]
 8003afc:	0a1b      	lsrs	r3, r3, #8
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	74bb      	strb	r3, [r7, #18]
	data_in[7]= (uint8_t)(cmd_pec);
 8003b04:	8b7b      	ldrh	r3, [r7, #26]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	74fb      	strb	r3, [r7, #19]
	
	for(int kl=0;kl<8;kl++)
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	e00a      	b.n	8003b26 <LTC681x_wrcfga_reg_emul+0xb6>
	{
		ltc6812_Write8(data_in[kl]);
 8003b10:	f107 020c 	add.w	r2, r7, #12
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff f962 	bl	8002de4 <ltc6812_Write8>
	for(int kl=0;kl<8;kl++)
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	3301      	adds	r3, #1
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2b07      	cmp	r3, #7
 8003b2a:	ddf1      	ble.n	8003b10 <LTC681x_wrcfga_reg_emul+0xa0>
	}
	
  ltc6812_CS_SET(ltc6812_CS_PIN);
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	2101      	movs	r1, #1
 8003b30:	4803      	ldr	r0, [pc, #12]	; (8003b40 <LTC681x_wrcfga_reg_emul+0xd0>)
 8003b32:	f004 fc24 	bl	800837e <HAL_GPIO_WritePin>
	
}
 8003b36:	bf00      	nop
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40010c00 	.word	0x40010c00

08003b44 <LTC681x_wrcfgb_reg_emul>:

void LTC681x_wrcfgb_reg_emul( uint8_t CFGB0
                     )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t data_in[8];

	cmd[1] = 0x24;  //WRCFGB
 8003b4e:	2324      	movs	r3, #36	; 0x24
 8003b50:	757b      	strb	r3, [r7, #21]
	cmd[0] = 0x00;
 8003b52:	2300      	movs	r3, #0
 8003b54:	753b      	strb	r3, [r7, #20]

	cmd_pec = pec15_calc_emul(2, cmd);
 8003b56:	f107 0314 	add.w	r3, r7, #20
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	2002      	movs	r0, #2
 8003b5e:	f7ff fa2b 	bl	8002fb8 <pec15_calc_emul>
 8003b62:	4603      	mov	r3, r0
 8003b64:	837b      	strh	r3, [r7, #26]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003b66:	8b7b      	ldrh	r3, [r7, #26]
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t)(cmd_pec);
 8003b70:	8b7b      	ldrh	r3, [r7, #26]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	75fb      	strb	r3, [r7, #23]

	ltc6812_CS_RESET(ltc6812_CS_PIN);
 8003b76:	2200      	movs	r2, #0
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4824      	ldr	r0, [pc, #144]	; (8003c0c <LTC681x_wrcfgb_reg_emul+0xc8>)
 8003b7c:	f004 fbff 	bl	800837e <HAL_GPIO_WritePin>
  ltc6812_Write8(cmd[0]);
 8003b80:	7d3b      	ldrb	r3, [r7, #20]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff f92e 	bl	8002de4 <ltc6812_Write8>
	ltc6812_Write8(cmd[1]);
 8003b88:	7d7b      	ldrb	r3, [r7, #21]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff f92a 	bl	8002de4 <ltc6812_Write8>
	ltc6812_Write8(cmd[2]);
 8003b90:	7dbb      	ldrb	r3, [r7, #22]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff f926 	bl	8002de4 <ltc6812_Write8>
	ltc6812_Write8(cmd[3]);
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff f922 	bl	8002de4 <ltc6812_Write8>

	data_in[0]= CFGB0;
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	733b      	strb	r3, [r7, #12]
	data_in[1]= 0x00;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	737b      	strb	r3, [r7, #13]
	data_in[2]= 0x00;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	73bb      	strb	r3, [r7, #14]
	data_in[3]= 0x00;
 8003bac:	2300      	movs	r3, #0
 8003bae:	73fb      	strb	r3, [r7, #15]
	data_in[4]= 0x00;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	743b      	strb	r3, [r7, #16]
	data_in[5]= 0x00;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	747b      	strb	r3, [r7, #17]
	cmd_pec=pec15_calc_emul(6,data_in);
 8003bb8:	f107 030c 	add.w	r3, r7, #12
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	2006      	movs	r0, #6
 8003bc0:	f7ff f9fa 	bl	8002fb8 <pec15_calc_emul>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	837b      	strh	r3, [r7, #26]
	data_in[6]= (uint8_t)(cmd_pec >> 8);
 8003bc8:	8b7b      	ldrh	r3, [r7, #26]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	74bb      	strb	r3, [r7, #18]
	data_in[7]= (uint8_t)(cmd_pec);
 8003bd2:	8b7b      	ldrh	r3, [r7, #26]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	74fb      	strb	r3, [r7, #19]

	for(int kl=0;kl<8;kl++)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	e00a      	b.n	8003bf4 <LTC681x_wrcfgb_reg_emul+0xb0>
	{
		ltc6812_Write8(data_in[kl]);
 8003bde:	f107 020c 	add.w	r2, r7, #12
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	4413      	add	r3, r2
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff f8fb 	bl	8002de4 <ltc6812_Write8>
	for(int kl=0;kl<8;kl++)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b07      	cmp	r3, #7
 8003bf8:	ddf1      	ble.n	8003bde <LTC681x_wrcfgb_reg_emul+0x9a>
	}

  ltc6812_CS_SET(ltc6812_CS_PIN);
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	4803      	ldr	r0, [pc, #12]	; (8003c0c <LTC681x_wrcfgb_reg_emul+0xc8>)
 8003c00:	f004 fbbd 	bl	800837e <HAL_GPIO_WritePin>

}
 8003c04:	bf00      	nop
 8003c06:	3720      	adds	r7, #32
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40010c00 	.word	0x40010c00

08003c10 <LTC681x_balance_cell>:
  ltc6812_CS_SET(ltc6812_CS_PIN);
	
}

void LTC681x_balance_cell(uint16_t Cell_to_balance)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	80fb      	strh	r3, [r7, #6]
	uint8_t cell_balance_status;
	uint16_t temp_var;
	CFGAR4=0x00;
 8003c1a:	4b2f      	ldr	r3, [pc, #188]	; (8003cd8 <LTC681x_balance_cell+0xc8>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
	CFGAR5=0x00;
 8003c20:	4b2e      	ldr	r3, [pc, #184]	; (8003cdc <LTC681x_balance_cell+0xcc>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
	CFGBR0=0x00;
 8003c26:	4b2e      	ldr	r3, [pc, #184]	; (8003ce0 <LTC681x_balance_cell+0xd0>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]

	for(int lm=0;lm<15;lm++)
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	e03d      	b.n	8003cae <LTC681x_balance_cell+0x9e>
	{
		cell_balance_status=Cell_to_balance>>lm & 0x0001;
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	fa42 f303 	asr.w	r3, r2, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	72fb      	strb	r3, [r7, #11]
		if(lm<8)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b07      	cmp	r3, #7
 8003c46:	dc0d      	bgt.n	8003c64 <LTC681x_balance_cell+0x54>
		{
			temp_var=cell_balance_status<<lm;
 8003c48:	7afa      	ldrb	r2, [r7, #11]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	813b      	strh	r3, [r7, #8]
			CFGAR4+=temp_var;
 8003c52:	893b      	ldrh	r3, [r7, #8]
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	4b20      	ldr	r3, [pc, #128]	; (8003cd8 <LTC681x_balance_cell+0xc8>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <LTC681x_balance_cell+0xc8>)
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e01f      	b.n	8003ca4 <LTC681x_balance_cell+0x94>
		}
		else if(lm<12)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b0b      	cmp	r3, #11
 8003c68:	dc0e      	bgt.n	8003c88 <LTC681x_balance_cell+0x78>
		{
			temp_var=cell_balance_status<<(lm-8);
 8003c6a:	7afa      	ldrb	r2, [r7, #11]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3b08      	subs	r3, #8
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	813b      	strh	r3, [r7, #8]
			CFGAR5+=temp_var;
 8003c76:	893b      	ldrh	r3, [r7, #8]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	4b18      	ldr	r3, [pc, #96]	; (8003cdc <LTC681x_balance_cell+0xcc>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	4b16      	ldr	r3, [pc, #88]	; (8003cdc <LTC681x_balance_cell+0xcc>)
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	e00d      	b.n	8003ca4 <LTC681x_balance_cell+0x94>
		}
		else
		{
			temp_var=cell_balance_status<<(lm-8);
 8003c88:	7afa      	ldrb	r2, [r7, #11]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3b08      	subs	r3, #8
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	813b      	strh	r3, [r7, #8]
			CFGBR0+=temp_var;
 8003c94:	893b      	ldrh	r3, [r7, #8]
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <LTC681x_balance_cell+0xd0>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <LTC681x_balance_cell+0xd0>)
 8003ca2:	701a      	strb	r2, [r3, #0]
		}
		temp_var=0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	813b      	strh	r3, [r7, #8]
	for(int lm=0;lm<15;lm++)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3301      	adds	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2b0e      	cmp	r3, #14
 8003cb2:	ddbe      	ble.n	8003c32 <LTC681x_balance_cell+0x22>
	}

	LTC681x_wrcfga_reg_emul(CFGAR4, CFGAR5);
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <LTC681x_balance_cell+0xc8>)
 8003cb6:	781a      	ldrb	r2, [r3, #0]
 8003cb8:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <LTC681x_balance_cell+0xcc>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f7ff fed6 	bl	8003a70 <LTC681x_wrcfga_reg_emul>
	LTC681x_wrcfgb_reg_emul(CFGBR0);
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <LTC681x_balance_cell+0xd0>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff ff3b 	bl	8003b44 <LTC681x_wrcfgb_reg_emul>

}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	2000027e 	.word	0x2000027e
 8003cdc:	2000027f 	.word	0x2000027f
 8003ce0:	20000280 	.word	0x20000280
 8003ce4:	00000000 	.word	0x00000000

08003ce8 <get_balance_status>:

void get_balance_status(float Cell_Voltage_15data[15])
{
 8003ce8:	b590      	push	{r4, r7, lr}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	Cell_Voltage_Lowest=4.2;
 8003cf0:	4b4f      	ldr	r3, [pc, #316]	; (8003e30 <get_balance_status+0x148>)
 8003cf2:	4a50      	ldr	r2, [pc, #320]	; (8003e34 <get_balance_status+0x14c>)
 8003cf4:	601a      	str	r2, [r3, #0]
	balance_status=0x0000;
 8003cf6:	4b50      	ldr	r3, [pc, #320]	; (8003e38 <get_balance_status+0x150>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	801a      	strh	r2, [r3, #0]
	uint16_t temp_dat;
	float buffer_imbalance;


		for(int ik=0;ik<15;ik++)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	e017      	b.n	8003d32 <get_balance_status+0x4a>
		{
			if(Cell_Voltage_15data[ik]<Cell_Voltage_Lowest) Cell_Voltage_Lowest=Cell_Voltage_15data[ik];
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4b48      	ldr	r3, [pc, #288]	; (8003e30 <get_balance_status+0x148>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f7fd f9b4 	bl	8001080 <__aeabi_fcmplt>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d006      	beq.n	8003d2c <get_balance_status+0x44>
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a41      	ldr	r2, [pc, #260]	; (8003e30 <get_balance_status+0x148>)
 8003d2a:	6013      	str	r3, [r2, #0]
		for(int ik=0;ik<15;ik++)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b0e      	cmp	r3, #14
 8003d36:	dde4      	ble.n	8003d02 <get_balance_status+0x1a>
		}

		for(int ik=0;ik<15;ik++)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	e04a      	b.n	8003dd4 <get_balance_status+0xec>
		{
		   delta_vbatt[ik] = Cell_Voltage_15data[ik] - Cell_Voltage_Lowest;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <get_balance_status+0x148>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4610      	mov	r0, r2
 8003d50:	f7fc feee 	bl	8000b30 <__aeabi_fsub>
 8003d54:	4603      	mov	r3, r0
 8003d56:	4619      	mov	r1, r3
 8003d58:	4a38      	ldr	r2, [pc, #224]	; (8003e3c <get_balance_status+0x154>)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		   buffer_imbalance+=delta_vbatt[ik];
 8003d60:	4a36      	ldr	r2, [pc, #216]	; (8003e3c <get_balance_status+0x154>)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6978      	ldr	r0, [r7, #20]
 8003d6c:	f7fc fee2 	bl	8000b34 <__addsf3>
 8003d70:	4603      	mov	r3, r0
 8003d72:	617b      	str	r3, [r7, #20]

		   if(delta_vbatt[ik]> 0.025 && Cell_Voltage_15data[ik]>VCELL_BALANCE_PERMITTED)
 8003d74:	4a31      	ldr	r2, [pc, #196]	; (8003e3c <get_balance_status+0x154>)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fb53 	bl	8000428 <__aeabi_f2d>
 8003d82:	a327      	add	r3, pc, #156	; (adr r3, 8003e20 <get_balance_status+0x138>)
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f7fc fe36 	bl	80009f8 <__aeabi_dcmpgt>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01d      	beq.n	8003dce <get_balance_status+0xe6>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fc fb43 	bl	8000428 <__aeabi_f2d>
 8003da2:	a321      	add	r3, pc, #132	; (adr r3, 8003e28 <get_balance_status+0x140>)
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	f7fc fe26 	bl	80009f8 <__aeabi_dcmpgt>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00d      	beq.n	8003dce <get_balance_status+0xe6>
		   {
			   temp_dat = 0x01;
 8003db2:	2301      	movs	r3, #1
 8003db4:	817b      	strh	r3, [r7, #10]
			   temp_dat = temp_dat << ik;
 8003db6:	897a      	ldrh	r2, [r7, #10]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	817b      	strh	r3, [r7, #10]
			   balance_status= balance_status+temp_dat;
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <get_balance_status+0x150>)
 8003dc2:	881a      	ldrh	r2, [r3, #0]
 8003dc4:	897b      	ldrh	r3, [r7, #10]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <get_balance_status+0x150>)
 8003dcc:	801a      	strh	r2, [r3, #0]
		for(int ik=0;ik<15;ik++)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b0e      	cmp	r3, #14
 8003dd8:	ddb1      	ble.n	8003d3e <get_balance_status+0x56>
		   }

		}
		persen_imbalance=buffer_imbalance*100/14.0/1.2;
 8003dda:	4919      	ldr	r1, [pc, #100]	; (8003e40 <get_balance_status+0x158>)
 8003ddc:	6978      	ldr	r0, [r7, #20]
 8003dde:	f7fc ffb1 	bl	8000d44 <__aeabi_fmul>
 8003de2:	4603      	mov	r3, r0
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fc fb1f 	bl	8000428 <__aeabi_f2d>
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <get_balance_status+0x15c>)
 8003df0:	f7fc fc9c 	bl	800072c <__aeabi_ddiv>
 8003df4:	4603      	mov	r3, r0
 8003df6:	460c      	mov	r4, r1
 8003df8:	4618      	mov	r0, r3
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003e00:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <get_balance_status+0x160>)
 8003e02:	f7fc fc93 	bl	800072c <__aeabi_ddiv>
 8003e06:	4603      	mov	r3, r0
 8003e08:	460c      	mov	r4, r1
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	f7fc fe3b 	bl	8000a88 <__aeabi_d2f>
 8003e12:	4602      	mov	r2, r0
 8003e14:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <get_balance_status+0x164>)
 8003e16:	601a      	str	r2, [r3, #0]


}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd90      	pop	{r4, r7, pc}
 8003e20:	9999999a 	.word	0x9999999a
 8003e24:	3f999999 	.word	0x3f999999
 8003e28:	33333333 	.word	0x33333333
 8003e2c:	400b3333 	.word	0x400b3333
 8003e30:	20000be0 	.word	0x20000be0
 8003e34:	40866666 	.word	0x40866666
 8003e38:	20000ba2 	.word	0x20000ba2
 8003e3c:	20000ba4 	.word	0x20000ba4
 8003e40:	42c80000 	.word	0x42c80000
 8003e44:	402c0000 	.word	0x402c0000
 8003e48:	3ff33333 	.word	0x3ff33333
 8003e4c:	20000b6c 	.word	0x20000b6c

08003e50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003e54:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <MX_SPI1_Init+0x64>)
 8003e56:	4a18      	ldr	r2, [pc, #96]	; (8003eb8 <MX_SPI1_Init+0x68>)
 8003e58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e5a:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <MX_SPI1_Init+0x64>)
 8003e5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e62:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <MX_SPI1_Init+0x64>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e68:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <MX_SPI1_Init+0x64>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e6e:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <MX_SPI1_Init+0x64>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e74:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <MX_SPI1_Init+0x64>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <MX_SPI1_Init+0x64>)
 8003e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003e82:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <MX_SPI1_Init+0x64>)
 8003e84:	2228      	movs	r2, #40	; 0x28
 8003e86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <MX_SPI1_Init+0x64>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <MX_SPI1_Init+0x64>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e94:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <MX_SPI1_Init+0x64>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <MX_SPI1_Init+0x64>)
 8003e9c:	220a      	movs	r2, #10
 8003e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ea0:	4804      	ldr	r0, [pc, #16]	; (8003eb4 <MX_SPI1_Init+0x64>)
 8003ea2:	f005 fcfb 	bl	800989c <HAL_SPI_Init>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003eac:	f7fe feca 	bl	8002c44 <Error_Handler>
  }

}
 8003eb0:	bf00      	nop
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000be4 	.word	0x20000be4
 8003eb8:	40013000 	.word	0x40013000

08003ebc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	; 0x28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec4:	f107 0314 	add.w	r3, r7, #20
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a22      	ldr	r2, [pc, #136]	; (8003f60 <HAL_SPI_MspInit+0xa4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d13d      	bne.n	8003f58 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003edc:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <HAL_SPI_MspInit+0xa8>)
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <HAL_SPI_MspInit+0xa8>)
 8003ee2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ee6:	6193      	str	r3, [r2, #24]
 8003ee8:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <HAL_SPI_MspInit+0xa8>)
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef4:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <HAL_SPI_MspInit+0xa8>)
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <HAL_SPI_MspInit+0xa8>)
 8003efa:	f043 0308 	orr.w	r3, r3, #8
 8003efe:	6193      	str	r3, [r2, #24]
 8003f00:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <HAL_SPI_MspInit+0xa8>)
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003f0c:	2328      	movs	r3, #40	; 0x28
 8003f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f10:	2302      	movs	r3, #2
 8003f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f14:	2303      	movs	r3, #3
 8003f16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f18:	f107 0314 	add.w	r3, r7, #20
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4812      	ldr	r0, [pc, #72]	; (8003f68 <HAL_SPI_MspInit+0xac>)
 8003f20:	f004 f8bc 	bl	800809c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f24:	2310      	movs	r3, #16
 8003f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f30:	f107 0314 	add.w	r3, r7, #20
 8003f34:	4619      	mov	r1, r3
 8003f36:	480c      	ldr	r0, [pc, #48]	; (8003f68 <HAL_SPI_MspInit+0xac>)
 8003f38:	f004 f8b0 	bl	800809c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_SPI_MspInit+0xb0>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
 8003f52:	4a06      	ldr	r2, [pc, #24]	; (8003f6c <HAL_SPI_MspInit+0xb0>)
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003f58:	bf00      	nop
 8003f5a:	3728      	adds	r7, #40	; 0x28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40013000 	.word	0x40013000
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40010c00 	.word	0x40010c00
 8003f6c:	40010000 	.word	0x40010000

08003f70 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003f76:	f000 fa19 	bl	80043ac <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003f7a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003f7e:	2201      	movs	r2, #1
 8003f80:	2178      	movs	r1, #120	; 0x78
 8003f82:	4858      	ldr	r0, [pc, #352]	; (80040e4 <SSD1306_Init+0x174>)
 8003f84:	f004 fc52 	bl	800882c <HAL_I2C_IsDeviceReady>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e0a4      	b.n	80040dc <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8003f92:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003f96:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003f98:	e002      	b.n	8003fa0 <SSD1306_Init+0x30>
		p--;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f9      	bne.n	8003f9a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003fa6:	22ae      	movs	r2, #174	; 0xae
 8003fa8:	2100      	movs	r1, #0
 8003faa:	2078      	movs	r0, #120	; 0x78
 8003fac:	f000 fa6c 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	2078      	movs	r0, #120	; 0x78
 8003fb6:	f000 fa67 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003fba:	2210      	movs	r2, #16
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	2078      	movs	r0, #120	; 0x78
 8003fc0:	f000 fa62 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003fc4:	22b0      	movs	r2, #176	; 0xb0
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	2078      	movs	r0, #120	; 0x78
 8003fca:	f000 fa5d 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003fce:	22c8      	movs	r2, #200	; 0xc8
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	2078      	movs	r0, #120	; 0x78
 8003fd4:	f000 fa58 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2100      	movs	r1, #0
 8003fdc:	2078      	movs	r0, #120	; 0x78
 8003fde:	f000 fa53 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003fe2:	2210      	movs	r2, #16
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	2078      	movs	r0, #120	; 0x78
 8003fe8:	f000 fa4e 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003fec:	2240      	movs	r2, #64	; 0x40
 8003fee:	2100      	movs	r1, #0
 8003ff0:	2078      	movs	r0, #120	; 0x78
 8003ff2:	f000 fa49 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003ff6:	2281      	movs	r2, #129	; 0x81
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	2078      	movs	r0, #120	; 0x78
 8003ffc:	f000 fa44 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004000:	22ff      	movs	r2, #255	; 0xff
 8004002:	2100      	movs	r1, #0
 8004004:	2078      	movs	r0, #120	; 0x78
 8004006:	f000 fa3f 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800400a:	22a1      	movs	r2, #161	; 0xa1
 800400c:	2100      	movs	r1, #0
 800400e:	2078      	movs	r0, #120	; 0x78
 8004010:	f000 fa3a 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004014:	22a6      	movs	r2, #166	; 0xa6
 8004016:	2100      	movs	r1, #0
 8004018:	2078      	movs	r0, #120	; 0x78
 800401a:	f000 fa35 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800401e:	22a8      	movs	r2, #168	; 0xa8
 8004020:	2100      	movs	r1, #0
 8004022:	2078      	movs	r0, #120	; 0x78
 8004024:	f000 fa30 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8004028:	223f      	movs	r2, #63	; 0x3f
 800402a:	2100      	movs	r1, #0
 800402c:	2078      	movs	r0, #120	; 0x78
 800402e:	f000 fa2b 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004032:	22a4      	movs	r2, #164	; 0xa4
 8004034:	2100      	movs	r1, #0
 8004036:	2078      	movs	r0, #120	; 0x78
 8004038:	f000 fa26 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800403c:	22d3      	movs	r2, #211	; 0xd3
 800403e:	2100      	movs	r1, #0
 8004040:	2078      	movs	r0, #120	; 0x78
 8004042:	f000 fa21 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8004046:	2200      	movs	r2, #0
 8004048:	2100      	movs	r1, #0
 800404a:	2078      	movs	r0, #120	; 0x78
 800404c:	f000 fa1c 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004050:	22d5      	movs	r2, #213	; 0xd5
 8004052:	2100      	movs	r1, #0
 8004054:	2078      	movs	r0, #120	; 0x78
 8004056:	f000 fa17 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800405a:	22f0      	movs	r2, #240	; 0xf0
 800405c:	2100      	movs	r1, #0
 800405e:	2078      	movs	r0, #120	; 0x78
 8004060:	f000 fa12 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004064:	22d9      	movs	r2, #217	; 0xd9
 8004066:	2100      	movs	r1, #0
 8004068:	2078      	movs	r0, #120	; 0x78
 800406a:	f000 fa0d 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800406e:	2222      	movs	r2, #34	; 0x22
 8004070:	2100      	movs	r1, #0
 8004072:	2078      	movs	r0, #120	; 0x78
 8004074:	f000 fa08 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8004078:	22da      	movs	r2, #218	; 0xda
 800407a:	2100      	movs	r1, #0
 800407c:	2078      	movs	r0, #120	; 0x78
 800407e:	f000 fa03 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8004082:	2212      	movs	r2, #18
 8004084:	2100      	movs	r1, #0
 8004086:	2078      	movs	r0, #120	; 0x78
 8004088:	f000 f9fe 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800408c:	22db      	movs	r2, #219	; 0xdb
 800408e:	2100      	movs	r1, #0
 8004090:	2078      	movs	r0, #120	; 0x78
 8004092:	f000 f9f9 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8004096:	2220      	movs	r2, #32
 8004098:	2100      	movs	r1, #0
 800409a:	2078      	movs	r0, #120	; 0x78
 800409c:	f000 f9f4 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80040a0:	228d      	movs	r2, #141	; 0x8d
 80040a2:	2100      	movs	r1, #0
 80040a4:	2078      	movs	r0, #120	; 0x78
 80040a6:	f000 f9ef 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80040aa:	2214      	movs	r2, #20
 80040ac:	2100      	movs	r1, #0
 80040ae:	2078      	movs	r0, #120	; 0x78
 80040b0:	f000 f9ea 	bl	8004488 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80040b4:	22af      	movs	r2, #175	; 0xaf
 80040b6:	2100      	movs	r1, #0
 80040b8:	2078      	movs	r0, #120	; 0x78
 80040ba:	f000 f9e5 	bl	8004488 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80040be:	2000      	movs	r0, #0
 80040c0:	f000 f842 	bl	8004148 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80040c4:	f000 f812 	bl	80040ec <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80040c8:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <SSD1306_Init+0x178>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <SSD1306_Init+0x178>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <SSD1306_Init+0x178>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80040da:	2301      	movs	r3, #1
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20000834 	.word	0x20000834
 80040e8:	20000684 	.word	0x20000684

080040ec <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80040f2:	2300      	movs	r3, #0
 80040f4:	71fb      	strb	r3, [r7, #7]
 80040f6:	e01d      	b.n	8004134 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	3b50      	subs	r3, #80	; 0x50
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	2100      	movs	r1, #0
 8004102:	2078      	movs	r0, #120	; 0x78
 8004104:	f000 f9c0 	bl	8004488 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004108:	2200      	movs	r2, #0
 800410a:	2100      	movs	r1, #0
 800410c:	2078      	movs	r0, #120	; 0x78
 800410e:	f000 f9bb 	bl	8004488 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004112:	2210      	movs	r2, #16
 8004114:	2100      	movs	r1, #0
 8004116:	2078      	movs	r0, #120	; 0x78
 8004118:	f000 f9b6 	bl	8004488 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	01db      	lsls	r3, r3, #7
 8004120:	4a08      	ldr	r2, [pc, #32]	; (8004144 <SSD1306_UpdateScreen+0x58>)
 8004122:	441a      	add	r2, r3
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	2140      	movs	r1, #64	; 0x40
 8004128:	2078      	movs	r0, #120	; 0x78
 800412a:	f000 f953 	bl	80043d4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800412e:	79fb      	ldrb	r3, [r7, #7]
 8004130:	3301      	adds	r3, #1
 8004132:	71fb      	strb	r3, [r7, #7]
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	2b07      	cmp	r3, #7
 8004138:	d9de      	bls.n	80040f8 <SSD1306_UpdateScreen+0xc>
	}
}
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000284 	.word	0x20000284

08004148 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0x100, sizeof(SSD1306_Buffer));
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <SSD1306_Fill+0x14>
 8004158:	2300      	movs	r3, #0
 800415a:	e001      	b.n	8004160 <SSD1306_Fill+0x18>
 800415c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004164:	4619      	mov	r1, r3
 8004166:	4803      	ldr	r0, [pc, #12]	; (8004174 <SSD1306_Fill+0x2c>)
 8004168:	f006 f8d4 	bl	800a314 <memset>
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20000284 	.word	0x20000284

08004178 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	80fb      	strh	r3, [r7, #6]
 8004182:	460b      	mov	r3, r1
 8004184:	80bb      	strh	r3, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	70fb      	strb	r3, [r7, #3]
	if (
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	2b7f      	cmp	r3, #127	; 0x7f
 800418e:	d848      	bhi.n	8004222 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8004190:	88bb      	ldrh	r3, [r7, #4]
 8004192:	2b3f      	cmp	r3, #63	; 0x3f
 8004194:	d845      	bhi.n	8004222 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8004196:	4b25      	ldr	r3, [pc, #148]	; (800422c <SSD1306_DrawPixel+0xb4>)
 8004198:	791b      	ldrb	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d006      	beq.n	80041ac <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d11a      	bne.n	80041e8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80041b2:	88fa      	ldrh	r2, [r7, #6]
 80041b4:	88bb      	ldrh	r3, [r7, #4]
 80041b6:	08db      	lsrs	r3, r3, #3
 80041b8:	b298      	uxth	r0, r3
 80041ba:	4603      	mov	r3, r0
 80041bc:	01db      	lsls	r3, r3, #7
 80041be:	4413      	add	r3, r2
 80041c0:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <SSD1306_DrawPixel+0xb8>)
 80041c2:	5cd3      	ldrb	r3, [r2, r3]
 80041c4:	b25a      	sxtb	r2, r3
 80041c6:	88bb      	ldrh	r3, [r7, #4]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	2101      	movs	r1, #1
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	b25b      	sxtb	r3, r3
 80041d4:	4313      	orrs	r3, r2
 80041d6:	b259      	sxtb	r1, r3
 80041d8:	88fa      	ldrh	r2, [r7, #6]
 80041da:	4603      	mov	r3, r0
 80041dc:	01db      	lsls	r3, r3, #7
 80041de:	4413      	add	r3, r2
 80041e0:	b2c9      	uxtb	r1, r1
 80041e2:	4a13      	ldr	r2, [pc, #76]	; (8004230 <SSD1306_DrawPixel+0xb8>)
 80041e4:	54d1      	strb	r1, [r2, r3]
 80041e6:	e01d      	b.n	8004224 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80041e8:	88fa      	ldrh	r2, [r7, #6]
 80041ea:	88bb      	ldrh	r3, [r7, #4]
 80041ec:	08db      	lsrs	r3, r3, #3
 80041ee:	b298      	uxth	r0, r3
 80041f0:	4603      	mov	r3, r0
 80041f2:	01db      	lsls	r3, r3, #7
 80041f4:	4413      	add	r3, r2
 80041f6:	4a0e      	ldr	r2, [pc, #56]	; (8004230 <SSD1306_DrawPixel+0xb8>)
 80041f8:	5cd3      	ldrb	r3, [r2, r3]
 80041fa:	b25a      	sxtb	r2, r3
 80041fc:	88bb      	ldrh	r3, [r7, #4]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	2101      	movs	r1, #1
 8004204:	fa01 f303 	lsl.w	r3, r1, r3
 8004208:	b25b      	sxtb	r3, r3
 800420a:	43db      	mvns	r3, r3
 800420c:	b25b      	sxtb	r3, r3
 800420e:	4013      	ands	r3, r2
 8004210:	b259      	sxtb	r1, r3
 8004212:	88fa      	ldrh	r2, [r7, #6]
 8004214:	4603      	mov	r3, r0
 8004216:	01db      	lsls	r3, r3, #7
 8004218:	4413      	add	r3, r2
 800421a:	b2c9      	uxtb	r1, r1
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <SSD1306_DrawPixel+0xb8>)
 800421e:	54d1      	strb	r1, [r2, r3]
 8004220:	e000      	b.n	8004224 <SSD1306_DrawPixel+0xac>
		return;
 8004222:	bf00      	nop
	}
}
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr
 800422c:	20000684 	.word	0x20000684
 8004230:	20000284 	.word	0x20000284

08004234 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	460a      	mov	r2, r1
 800423e:	80fb      	strh	r3, [r7, #6]
 8004240:	4613      	mov	r3, r2
 8004242:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004244:	4a05      	ldr	r2, [pc, #20]	; (800425c <SSD1306_GotoXY+0x28>)
 8004246:	88fb      	ldrh	r3, [r7, #6]
 8004248:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800424a:	4a04      	ldr	r2, [pc, #16]	; (800425c <SSD1306_GotoXY+0x28>)
 800424c:	88bb      	ldrh	r3, [r7, #4]
 800424e:	8053      	strh	r3, [r2, #2]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000684 	.word	0x20000684

08004260 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	6039      	str	r1, [r7, #0]
 800426a:	71fb      	strb	r3, [r7, #7]
 800426c:	4613      	mov	r3, r2
 800426e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004270:	4b3a      	ldr	r3, [pc, #232]	; (800435c <SSD1306_Putc+0xfc>)
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	4413      	add	r3, r2
	if (
 800427c:	2b7f      	cmp	r3, #127	; 0x7f
 800427e:	dc07      	bgt.n	8004290 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8004280:	4b36      	ldr	r3, [pc, #216]	; (800435c <SSD1306_Putc+0xfc>)
 8004282:	885b      	ldrh	r3, [r3, #2]
 8004284:	461a      	mov	r2, r3
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	785b      	ldrb	r3, [r3, #1]
 800428a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800428c:	2b3f      	cmp	r3, #63	; 0x3f
 800428e:	dd01      	ble.n	8004294 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8004290:	2300      	movs	r3, #0
 8004292:	e05e      	b.n	8004352 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	e04b      	b.n	8004332 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	3b20      	subs	r3, #32
 80042a2:	6839      	ldr	r1, [r7, #0]
 80042a4:	7849      	ldrb	r1, [r1, #1]
 80042a6:	fb01 f303 	mul.w	r3, r1, r3
 80042aa:	4619      	mov	r1, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	440b      	add	r3, r1
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	4413      	add	r3, r2
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80042b8:	2300      	movs	r3, #0
 80042ba:	613b      	str	r3, [r7, #16]
 80042bc:	e030      	b.n	8004320 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d010      	beq.n	80042f0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80042ce:	4b23      	ldr	r3, [pc, #140]	; (800435c <SSD1306_Putc+0xfc>)
 80042d0:	881a      	ldrh	r2, [r3, #0]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	4413      	add	r3, r2
 80042d8:	b298      	uxth	r0, r3
 80042da:	4b20      	ldr	r3, [pc, #128]	; (800435c <SSD1306_Putc+0xfc>)
 80042dc:	885a      	ldrh	r2, [r3, #2]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	4413      	add	r3, r2
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	79ba      	ldrb	r2, [r7, #6]
 80042e8:	4619      	mov	r1, r3
 80042ea:	f7ff ff45 	bl	8004178 <SSD1306_DrawPixel>
 80042ee:	e014      	b.n	800431a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80042f0:	4b1a      	ldr	r3, [pc, #104]	; (800435c <SSD1306_Putc+0xfc>)
 80042f2:	881a      	ldrh	r2, [r3, #0]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	4413      	add	r3, r2
 80042fa:	b298      	uxth	r0, r3
 80042fc:	4b17      	ldr	r3, [pc, #92]	; (800435c <SSD1306_Putc+0xfc>)
 80042fe:	885a      	ldrh	r2, [r3, #2]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	b29b      	uxth	r3, r3
 8004304:	4413      	add	r3, r2
 8004306:	b299      	uxth	r1, r3
 8004308:	79bb      	ldrb	r3, [r7, #6]
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	f7ff ff2f 	bl	8004178 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3301      	adds	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4293      	cmp	r3, r2
 800432a:	d3c8      	bcc.n	80042be <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	3301      	adds	r3, #1
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	785b      	ldrb	r3, [r3, #1]
 8004336:	461a      	mov	r2, r3
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	4293      	cmp	r3, r2
 800433c:	d3ad      	bcc.n	800429a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800433e:	4b07      	ldr	r3, [pc, #28]	; (800435c <SSD1306_Putc+0xfc>)
 8004340:	881a      	ldrh	r2, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	4413      	add	r3, r2
 800434a:	b29a      	uxth	r2, r3
 800434c:	4b03      	ldr	r3, [pc, #12]	; (800435c <SSD1306_Putc+0xfc>)
 800434e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8004350:	79fb      	ldrb	r3, [r7, #7]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000684 	.word	0x20000684

08004360 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	4613      	mov	r3, r2
 800436c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800436e:	e012      	b.n	8004396 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	79fa      	ldrb	r2, [r7, #7]
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff ff71 	bl	8004260 <SSD1306_Putc>
 800437e:	4603      	mov	r3, r0
 8004380:	461a      	mov	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d002      	beq.n	8004390 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	e008      	b.n	80043a2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3301      	adds	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e8      	bne.n	8004370 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	781b      	ldrb	r3, [r3, #0]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80043b2:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <ssd1306_I2C_Init+0x24>)
 80043b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80043b6:	e002      	b.n	80043be <ssd1306_I2C_Init+0x12>
		p--;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f9      	bne.n	80043b8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	0003d090 	.word	0x0003d090

080043d4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80043d4:	b5b0      	push	{r4, r5, r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af02      	add	r7, sp, #8
 80043da:	603a      	str	r2, [r7, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	4603      	mov	r3, r0
 80043e0:	71fb      	strb	r3, [r7, #7]
 80043e2:	460b      	mov	r3, r1
 80043e4:	71bb      	strb	r3, [r7, #6]
 80043e6:	4613      	mov	r3, r2
 80043e8:	80bb      	strh	r3, [r7, #4]
 80043ea:	466b      	mov	r3, sp
 80043ec:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 80043ee:	88bb      	ldrh	r3, [r7, #4]
 80043f0:	1c58      	adds	r0, r3, #1
 80043f2:	1e43      	subs	r3, r0, #1
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	4603      	mov	r3, r0
 80043f8:	4619      	mov	r1, r3
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	f04f 0400 	mov.w	r4, #0
 8004406:	00d4      	lsls	r4, r2, #3
 8004408:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800440c:	00cb      	lsls	r3, r1, #3
 800440e:	4603      	mov	r3, r0
 8004410:	4619      	mov	r1, r3
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	f04f 0400 	mov.w	r4, #0
 800441e:	00d4      	lsls	r4, r2, #3
 8004420:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004424:	00cb      	lsls	r3, r1, #3
 8004426:	4603      	mov	r3, r0
 8004428:	3307      	adds	r3, #7
 800442a:	08db      	lsrs	r3, r3, #3
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	ebad 0d03 	sub.w	sp, sp, r3
 8004432:	ab02      	add	r3, sp, #8
 8004434:	3300      	adds	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	79ba      	ldrb	r2, [r7, #6]
 800443c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 800443e:	2301      	movs	r3, #1
 8004440:	75fb      	strb	r3, [r7, #23]
 8004442:	e00a      	b.n	800445a <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8004444:	7dfb      	ldrb	r3, [r7, #23]
 8004446:	3b01      	subs	r3, #1
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	441a      	add	r2, r3
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	7811      	ldrb	r1, [r2, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8004454:	7dfb      	ldrb	r3, [r7, #23]
 8004456:	3301      	adds	r3, #1
 8004458:	75fb      	strb	r3, [r7, #23]
 800445a:	7dfb      	ldrb	r3, [r7, #23]
 800445c:	b29b      	uxth	r3, r3
 800445e:	88ba      	ldrh	r2, [r7, #4]
 8004460:	429a      	cmp	r2, r3
 8004462:	d2ef      	bcs.n	8004444 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	b299      	uxth	r1, r3
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	88b8      	ldrh	r0, [r7, #4]
 800446c:	230a      	movs	r3, #10
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	4603      	mov	r3, r0
 8004472:	4804      	ldr	r0, [pc, #16]	; (8004484 <ssd1306_I2C_WriteMulti+0xb0>)
 8004474:	f004 f8dc 	bl	8008630 <HAL_I2C_Master_Transmit>
 8004478:	46ad      	mov	sp, r5
}
 800447a:	bf00      	nop
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bdb0      	pop	{r4, r5, r7, pc}
 8004482:	bf00      	nop
 8004484:	20000834 	.word	0x20000834

08004488 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af02      	add	r7, sp, #8
 800448e:	4603      	mov	r3, r0
 8004490:	71fb      	strb	r3, [r7, #7]
 8004492:	460b      	mov	r3, r1
 8004494:	71bb      	strb	r3, [r7, #6]
 8004496:	4613      	mov	r3, r2
 8004498:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800449a:	79bb      	ldrb	r3, [r7, #6]
 800449c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800449e:	797b      	ldrb	r3, [r7, #5]
 80044a0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	b299      	uxth	r1, r3
 80044a6:	f107 020c 	add.w	r2, r7, #12
 80044aa:	230a      	movs	r3, #10
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	2302      	movs	r3, #2
 80044b0:	4803      	ldr	r0, [pc, #12]	; (80044c0 <ssd1306_I2C_Write+0x38>)
 80044b2:	f004 f8bd 	bl	8008630 <HAL_I2C_Master_Transmit>
}
 80044b6:	bf00      	nop
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000834 	.word	0x20000834

080044c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80044ca:	4b15      	ldr	r3, [pc, #84]	; (8004520 <HAL_MspInit+0x5c>)
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	4a14      	ldr	r2, [pc, #80]	; (8004520 <HAL_MspInit+0x5c>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	6193      	str	r3, [r2, #24]
 80044d6:	4b12      	ldr	r3, [pc, #72]	; (8004520 <HAL_MspInit+0x5c>)
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044e2:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <HAL_MspInit+0x5c>)
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	4a0e      	ldr	r2, [pc, #56]	; (8004520 <HAL_MspInit+0x5c>)
 80044e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ec:	61d3      	str	r3, [r2, #28]
 80044ee:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <HAL_MspInit+0x5c>)
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f6:	607b      	str	r3, [r7, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <HAL_MspInit+0x60>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	4a04      	ldr	r2, [pc, #16]	; (8004524 <HAL_MspInit+0x60>)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr
 8004520:	40021000 	.word	0x40021000
 8004524:	40010000 	.word	0x40010000

08004528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800452c:	bf00      	nop
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004538:	e7fe      	b.n	8004538 <HardFault_Handler+0x4>

0800453a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800453a:	b480      	push	{r7}
 800453c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800453e:	e7fe      	b.n	800453e <MemManage_Handler+0x4>

08004540 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004544:	e7fe      	b.n	8004544 <BusFault_Handler+0x4>

08004546 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004546:	b480      	push	{r7}
 8004548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800454a:	e7fe      	b.n	800454a <UsageFault_Handler+0x4>

0800454c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800455c:	bf00      	nop
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004568:	bf00      	nop
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr

08004570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004574:	f002 f828 	bl	80065c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8004578:	bf00      	nop
 800457a:	bd80      	pop	{r7, pc}

0800457c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004580:	4802      	ldr	r0, [pc, #8]	; (800458c <DMA1_Channel1_IRQHandler+0x10>)
 8004582:	f003 fc31 	bl	8007de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004586:	bf00      	nop
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	200007c8 	.word	0x200007c8

08004590 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004594:	4802      	ldr	r0, [pc, #8]	; (80045a0 <CAN1_RX1_IRQHandler+0x10>)
 8004596:	f003 f838 	bl	800760a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800459a:	bf00      	nop
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	2000080c 	.word	0x2000080c

080045a4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80045a8:	4802      	ldr	r0, [pc, #8]	; (80045b4 <CAN1_SCE_IRQHandler+0x10>)
 80045aa:	f003 f82e 	bl	800760a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	2000080c 	.word	0x2000080c

080045b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80045b8:	b5b0      	push	{r4, r5, r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80045bc:	48b8      	ldr	r0, [pc, #736]	; (80048a0 <TIM2_IRQHandler+0x2e8>)
 80045be:	f005 fa1c 	bl	80099fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  test_tim2++;
 80045c2:	4bb8      	ldr	r3, [pc, #736]	; (80048a4 <TIM2_IRQHandler+0x2ec>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3301      	adds	r3, #1
 80045c8:	4ab6      	ldr	r2, [pc, #728]	; (80048a4 <TIM2_IRQHandler+0x2ec>)
 80045ca:	6013      	str	r3, [r2, #0]
  hitung_suhu++;
 80045cc:	4bb6      	ldr	r3, [pc, #728]	; (80048a8 <TIM2_IRQHandler+0x2f0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	4ab5      	ldr	r2, [pc, #724]	; (80048a8 <TIM2_IRQHandler+0x2f0>)
 80045d4:	6013      	str	r3, [r2, #0]

  sumI=sumI-i_arrdata[i];
 80045d6:	4bb5      	ldr	r3, [pc, #724]	; (80048ac <TIM2_IRQHandler+0x2f4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4ab5      	ldr	r2, [pc, #724]	; (80048b0 <TIM2_IRQHandler+0x2f8>)
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	49b5      	ldr	r1, [pc, #724]	; (80048b4 <TIM2_IRQHandler+0x2fc>)
 80045e0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	4ab1      	ldr	r2, [pc, #708]	; (80048ac <TIM2_IRQHandler+0x2f4>)
 80045e8:	6013      	str	r3, [r2, #0]
  sumRef=sumRef-ref_arrdata[i];
 80045ea:	4bb3      	ldr	r3, [pc, #716]	; (80048b8 <TIM2_IRQHandler+0x300>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4ab0      	ldr	r2, [pc, #704]	; (80048b0 <TIM2_IRQHandler+0x2f8>)
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	49b2      	ldr	r1, [pc, #712]	; (80048bc <TIM2_IRQHandler+0x304>)
 80045f4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	4aaf      	ldr	r2, [pc, #700]	; (80048b8 <TIM2_IRQHandler+0x300>)
 80045fc:	6013      	str	r3, [r2, #0]

  i_arrdata[i]=adc_val[0];
 80045fe:	4bac      	ldr	r3, [pc, #688]	; (80048b0 <TIM2_IRQHandler+0x2f8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4aaf      	ldr	r2, [pc, #700]	; (80048c0 <TIM2_IRQHandler+0x308>)
 8004604:	8811      	ldrh	r1, [r2, #0]
 8004606:	4aab      	ldr	r2, [pc, #684]	; (80048b4 <TIM2_IRQHandler+0x2fc>)
 8004608:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  ref_arrdata[i]=adc_val[1];
 800460c:	4ba8      	ldr	r3, [pc, #672]	; (80048b0 <TIM2_IRQHandler+0x2f8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4aab      	ldr	r2, [pc, #684]	; (80048c0 <TIM2_IRQHandler+0x308>)
 8004612:	8851      	ldrh	r1, [r2, #2]
 8004614:	4aa9      	ldr	r2, [pc, #676]	; (80048bc <TIM2_IRQHandler+0x304>)
 8004616:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

  sumI=sumI+i_arrdata[i];
 800461a:	4ba5      	ldr	r3, [pc, #660]	; (80048b0 <TIM2_IRQHandler+0x2f8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4aa5      	ldr	r2, [pc, #660]	; (80048b4 <TIM2_IRQHandler+0x2fc>)
 8004620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004624:	461a      	mov	r2, r3
 8004626:	4ba1      	ldr	r3, [pc, #644]	; (80048ac <TIM2_IRQHandler+0x2f4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4413      	add	r3, r2
 800462c:	4a9f      	ldr	r2, [pc, #636]	; (80048ac <TIM2_IRQHandler+0x2f4>)
 800462e:	6013      	str	r3, [r2, #0]
  sumRef=sumRef+ref_arrdata[i];
 8004630:	4b9f      	ldr	r3, [pc, #636]	; (80048b0 <TIM2_IRQHandler+0x2f8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4aa1      	ldr	r2, [pc, #644]	; (80048bc <TIM2_IRQHandler+0x304>)
 8004636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800463a:	461a      	mov	r2, r3
 800463c:	4b9e      	ldr	r3, [pc, #632]	; (80048b8 <TIM2_IRQHandler+0x300>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4413      	add	r3, r2
 8004642:	4a9d      	ldr	r2, [pc, #628]	; (80048b8 <TIM2_IRQHandler+0x300>)
 8004644:	6013      	str	r3, [r2, #0]

  i_datadigi=sumI/maxdata;
 8004646:	4b99      	ldr	r3, [pc, #612]	; (80048ac <TIM2_IRQHandler+0x2f4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a9e      	ldr	r2, [pc, #632]	; (80048c4 <TIM2_IRQHandler+0x30c>)
 800464c:	fb82 1203 	smull	r1, r2, r2, r3
 8004650:	1152      	asrs	r2, r2, #5
 8004652:	17db      	asrs	r3, r3, #31
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	4618      	mov	r0, r3
 8004658:	f7fc fb20 	bl	8000c9c <__aeabi_i2f>
 800465c:	4602      	mov	r2, r0
 800465e:	4b9a      	ldr	r3, [pc, #616]	; (80048c8 <TIM2_IRQHandler+0x310>)
 8004660:	601a      	str	r2, [r3, #0]
  ref_datadigi=sumRef/maxdata;
 8004662:	4b95      	ldr	r3, [pc, #596]	; (80048b8 <TIM2_IRQHandler+0x300>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a97      	ldr	r2, [pc, #604]	; (80048c4 <TIM2_IRQHandler+0x30c>)
 8004668:	fb82 1203 	smull	r1, r2, r2, r3
 800466c:	1152      	asrs	r2, r2, #5
 800466e:	17db      	asrs	r3, r3, #31
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	4618      	mov	r0, r3
 8004674:	f7fc fb12 	bl	8000c9c <__aeabi_i2f>
 8004678:	4602      	mov	r2, r0
 800467a:	4b94      	ldr	r3, [pc, #592]	; (80048cc <TIM2_IRQHandler+0x314>)
 800467c:	601a      	str	r2, [r3, #0]


  // *************PROSES Konversi dari DATA ADC ke Data Real *******************************/////

  VBATT=v_cell_tot;
 800467e:	4b94      	ldr	r3, [pc, #592]	; (80048d0 <TIM2_IRQHandler+0x318>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a94      	ldr	r2, [pc, #592]	; (80048d4 <TIM2_IRQHandler+0x31c>)
 8004684:	6013      	str	r3, [r2, #0]
  if(VBATT<0) VBATT=-1;
 8004686:	4b93      	ldr	r3, [pc, #588]	; (80048d4 <TIM2_IRQHandler+0x31c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f04f 0100 	mov.w	r1, #0
 800468e:	4618      	mov	r0, r3
 8004690:	f7fc fcf6 	bl	8001080 <__aeabi_fcmplt>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <TIM2_IRQHandler+0xe8>
 800469a:	4b8e      	ldr	r3, [pc, #568]	; (80048d4 <TIM2_IRQHandler+0x31c>)
 800469c:	4a8e      	ldr	r2, [pc, #568]	; (80048d8 <TIM2_IRQHandler+0x320>)
 800469e:	601a      	str	r2, [r3, #0]
//	IBATT = -0.06189346733668010*i_datadigi + 121.153903517579 - OFFSET_SENSOR_ARUS; //modul A
//  IBATT_for_offset_cal = -0.06189346733668010*i_datadigi + 121.153903517579;
//  IBATT=0.95556329728489100*IBATT + 0.06243330788446070;// Modul A Recalibrate


  IBATT=-0.0399633588118257*i_datadigi + 77.3576930186035- OFFSET_SENSOR_ARUS; // Modul B
 80046a0:	4b89      	ldr	r3, [pc, #548]	; (80048c8 <TIM2_IRQHandler+0x310>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fb febf 	bl	8000428 <__aeabi_f2d>
 80046aa:	a375      	add	r3, pc, #468	; (adr r3, 8004880 <TIM2_IRQHandler+0x2c8>)
 80046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b0:	f7fb ff12 	bl	80004d8 <__aeabi_dmul>
 80046b4:	4603      	mov	r3, r0
 80046b6:	460c      	mov	r4, r1
 80046b8:	4618      	mov	r0, r3
 80046ba:	4621      	mov	r1, r4
 80046bc:	a372      	add	r3, pc, #456	; (adr r3, 8004888 <TIM2_IRQHandler+0x2d0>)
 80046be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c2:	f7fb fd53 	bl	800016c <__adddf3>
 80046c6:	4603      	mov	r3, r0
 80046c8:	460c      	mov	r4, r1
 80046ca:	4625      	mov	r5, r4
 80046cc:	461c      	mov	r4, r3
 80046ce:	4b83      	ldr	r3, [pc, #524]	; (80048dc <TIM2_IRQHandler+0x324>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fb fea8 	bl	8000428 <__aeabi_f2d>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4620      	mov	r0, r4
 80046de:	4629      	mov	r1, r5
 80046e0:	f7fb fd42 	bl	8000168 <__aeabi_dsub>
 80046e4:	4603      	mov	r3, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	4618      	mov	r0, r3
 80046ea:	4621      	mov	r1, r4
 80046ec:	f7fc f9cc 	bl	8000a88 <__aeabi_d2f>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b7b      	ldr	r3, [pc, #492]	; (80048e0 <TIM2_IRQHandler+0x328>)
 80046f4:	601a      	str	r2, [r3, #0]
  IBATT_for_offset_cal= -0.0399633588118257*i_datadigi + 77.3576930186035;
 80046f6:	4b74      	ldr	r3, [pc, #464]	; (80048c8 <TIM2_IRQHandler+0x310>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fb fe94 	bl	8000428 <__aeabi_f2d>
 8004700:	a35f      	add	r3, pc, #380	; (adr r3, 8004880 <TIM2_IRQHandler+0x2c8>)
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	f7fb fee7 	bl	80004d8 <__aeabi_dmul>
 800470a:	4603      	mov	r3, r0
 800470c:	460c      	mov	r4, r1
 800470e:	4618      	mov	r0, r3
 8004710:	4621      	mov	r1, r4
 8004712:	a35d      	add	r3, pc, #372	; (adr r3, 8004888 <TIM2_IRQHandler+0x2d0>)
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	f7fb fd28 	bl	800016c <__adddf3>
 800471c:	4603      	mov	r3, r0
 800471e:	460c      	mov	r4, r1
 8004720:	4618      	mov	r0, r3
 8004722:	4621      	mov	r1, r4
 8004724:	f7fc f9b0 	bl	8000a88 <__aeabi_d2f>
 8004728:	4602      	mov	r2, r0
 800472a:	4b6e      	ldr	r3, [pc, #440]	; (80048e4 <TIM2_IRQHandler+0x32c>)
 800472c:	601a      	str	r2, [r3, #0]

  if(hitung_suhu>=max_hitung_suhu)
 800472e:	4b5e      	ldr	r3, [pc, #376]	; (80048a8 <TIM2_IRQHandler+0x2f0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b09      	cmp	r3, #9
 8004734:	f340 811a 	ble.w	800496c <TIM2_IRQHandler+0x3b4>
  {
	  hitung_suhu=0;
 8004738:	4b5b      	ldr	r3, [pc, #364]	; (80048a8 <TIM2_IRQHandler+0x2f0>)
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
	  Res_T1=adc_val[2]*10000/(3900-adc_val[2]); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 800473e:	4b60      	ldr	r3, [pc, #384]	; (80048c0 <TIM2_IRQHandler+0x308>)
 8004740:	889b      	ldrh	r3, [r3, #4]
 8004742:	461a      	mov	r2, r3
 8004744:	f242 7310 	movw	r3, #10000	; 0x2710
 8004748:	fb03 f202 	mul.w	r2, r3, r2
 800474c:	4b5c      	ldr	r3, [pc, #368]	; (80048c0 <TIM2_IRQHandler+0x308>)
 800474e:	889b      	ldrh	r3, [r3, #4]
 8004750:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004754:	330c      	adds	r3, #12
 8004756:	fb92 f3f3 	sdiv	r3, r2, r3
 800475a:	4618      	mov	r0, r3
 800475c:	f7fc fa9e 	bl	8000c9c <__aeabi_i2f>
 8004760:	4602      	mov	r2, r0
 8004762:	4b61      	ldr	r3, [pc, #388]	; (80048e8 <TIM2_IRQHandler+0x330>)
 8004764:	601a      	str	r2, [r3, #0]
	  Suhu_T1= -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8004766:	4b60      	ldr	r3, [pc, #384]	; (80048e8 <TIM2_IRQHandler+0x330>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f7fb fe5c 	bl	8000428 <__aeabi_f2d>
 8004770:	4603      	mov	r3, r0
 8004772:	460c      	mov	r4, r1
 8004774:	4618      	mov	r0, r3
 8004776:	4621      	mov	r1, r4
 8004778:	f007 fe10 	bl	800c39c <log>
 800477c:	a344      	add	r3, pc, #272	; (adr r3, 8004890 <TIM2_IRQHandler+0x2d8>)
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	f7fb fea9 	bl	80004d8 <__aeabi_dmul>
 8004786:	4603      	mov	r3, r0
 8004788:	460c      	mov	r4, r1
 800478a:	4618      	mov	r0, r3
 800478c:	4621      	mov	r1, r4
 800478e:	a342      	add	r3, pc, #264	; (adr r3, 8004898 <TIM2_IRQHandler+0x2e0>)
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f7fb fcea 	bl	800016c <__adddf3>
 8004798:	4603      	mov	r3, r0
 800479a:	460c      	mov	r4, r1
 800479c:	4618      	mov	r0, r3
 800479e:	4621      	mov	r1, r4
 80047a0:	f7fc f972 	bl	8000a88 <__aeabi_d2f>
 80047a4:	4602      	mov	r2, r0
 80047a6:	4b51      	ldr	r3, [pc, #324]	; (80048ec <TIM2_IRQHandler+0x334>)
 80047a8:	601a      	str	r2, [r3, #0]
	  Res_T2=adc_val[3]*10000/(3900-adc_val[3]);
 80047aa:	4b45      	ldr	r3, [pc, #276]	; (80048c0 <TIM2_IRQHandler+0x308>)
 80047ac:	88db      	ldrh	r3, [r3, #6]
 80047ae:	461a      	mov	r2, r3
 80047b0:	f242 7310 	movw	r3, #10000	; 0x2710
 80047b4:	fb03 f202 	mul.w	r2, r3, r2
 80047b8:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <TIM2_IRQHandler+0x308>)
 80047ba:	88db      	ldrh	r3, [r3, #6]
 80047bc:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 80047c0:	330c      	adds	r3, #12
 80047c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fc fa68 	bl	8000c9c <__aeabi_i2f>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4b48      	ldr	r3, [pc, #288]	; (80048f0 <TIM2_IRQHandler+0x338>)
 80047d0:	601a      	str	r2, [r3, #0]
	  Suhu_T2= -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 80047d2:	4b47      	ldr	r3, [pc, #284]	; (80048f0 <TIM2_IRQHandler+0x338>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fb fe26 	bl	8000428 <__aeabi_f2d>
 80047dc:	4603      	mov	r3, r0
 80047de:	460c      	mov	r4, r1
 80047e0:	4618      	mov	r0, r3
 80047e2:	4621      	mov	r1, r4
 80047e4:	f007 fdda 	bl	800c39c <log>
 80047e8:	a329      	add	r3, pc, #164	; (adr r3, 8004890 <TIM2_IRQHandler+0x2d8>)
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f7fb fe73 	bl	80004d8 <__aeabi_dmul>
 80047f2:	4603      	mov	r3, r0
 80047f4:	460c      	mov	r4, r1
 80047f6:	4618      	mov	r0, r3
 80047f8:	4621      	mov	r1, r4
 80047fa:	a327      	add	r3, pc, #156	; (adr r3, 8004898 <TIM2_IRQHandler+0x2e0>)
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f7fb fcb4 	bl	800016c <__adddf3>
 8004804:	4603      	mov	r3, r0
 8004806:	460c      	mov	r4, r1
 8004808:	4618      	mov	r0, r3
 800480a:	4621      	mov	r1, r4
 800480c:	f7fc f93c 	bl	8000a88 <__aeabi_d2f>
 8004810:	4602      	mov	r2, r0
 8004812:	4b38      	ldr	r3, [pc, #224]	; (80048f4 <TIM2_IRQHandler+0x33c>)
 8004814:	601a      	str	r2, [r3, #0]
	  Res_T3=adc_val[4]*10000/(3900-adc_val[4]);
 8004816:	4b2a      	ldr	r3, [pc, #168]	; (80048c0 <TIM2_IRQHandler+0x308>)
 8004818:	891b      	ldrh	r3, [r3, #8]
 800481a:	461a      	mov	r2, r3
 800481c:	f242 7310 	movw	r3, #10000	; 0x2710
 8004820:	fb03 f202 	mul.w	r2, r3, r2
 8004824:	4b26      	ldr	r3, [pc, #152]	; (80048c0 <TIM2_IRQHandler+0x308>)
 8004826:	891b      	ldrh	r3, [r3, #8]
 8004828:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 800482c:	330c      	adds	r3, #12
 800482e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004832:	4618      	mov	r0, r3
 8004834:	f7fc fa32 	bl	8000c9c <__aeabi_i2f>
 8004838:	4602      	mov	r2, r0
 800483a:	4b2f      	ldr	r3, [pc, #188]	; (80048f8 <TIM2_IRQHandler+0x340>)
 800483c:	601a      	str	r2, [r3, #0]
	  Suhu_T3= -24.05*log(Res_T3) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 800483e:	4b2e      	ldr	r3, [pc, #184]	; (80048f8 <TIM2_IRQHandler+0x340>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7fb fdf0 	bl	8000428 <__aeabi_f2d>
 8004848:	4603      	mov	r3, r0
 800484a:	460c      	mov	r4, r1
 800484c:	4618      	mov	r0, r3
 800484e:	4621      	mov	r1, r4
 8004850:	f007 fda4 	bl	800c39c <log>
 8004854:	a30e      	add	r3, pc, #56	; (adr r3, 8004890 <TIM2_IRQHandler+0x2d8>)
 8004856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485a:	f7fb fe3d 	bl	80004d8 <__aeabi_dmul>
 800485e:	4603      	mov	r3, r0
 8004860:	460c      	mov	r4, r1
 8004862:	4618      	mov	r0, r3
 8004864:	4621      	mov	r1, r4
 8004866:	a30c      	add	r3, pc, #48	; (adr r3, 8004898 <TIM2_IRQHandler+0x2e0>)
 8004868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486c:	f7fb fc7e 	bl	800016c <__adddf3>
 8004870:	4603      	mov	r3, r0
 8004872:	460c      	mov	r4, r1
 8004874:	4618      	mov	r0, r3
 8004876:	4621      	mov	r1, r4
 8004878:	f7fc f906 	bl	8000a88 <__aeabi_d2f>
 800487c:	4602      	mov	r2, r0
 800487e:	e03d      	b.n	80048fc <TIM2_IRQHandler+0x344>
 8004880:	ce452c75 	.word	0xce452c75
 8004884:	bfa47613 	.word	0xbfa47613
 8004888:	71423a36 	.word	0x71423a36
 800488c:	405356e4 	.word	0x405356e4
 8004890:	cccccccd 	.word	0xcccccccd
 8004894:	c0380ccc 	.word	0xc0380ccc
 8004898:	b851eb85 	.word	0xb851eb85
 800489c:	406ecd1e 	.word	0x406ecd1e
 80048a0:	200014ec 	.word	0x200014ec
 80048a4:	20000b90 	.word	0x20000b90
 80048a8:	200010a4 	.word	0x200010a4
 80048ac:	20001098 	.word	0x20001098
 80048b0:	20001068 	.word	0x20001068
 80048b4:	20000c40 	.word	0x20000c40
 80048b8:	20001038 	.word	0x20001038
 80048bc:	200010b8 	.word	0x200010b8
 80048c0:	200008ec 	.word	0x200008ec
 80048c4:	10624dd3 	.word	0x10624dd3
 80048c8:	20001040 	.word	0x20001040
 80048cc:	20001058 	.word	0x20001058
 80048d0:	20000b70 	.word	0x20000b70
 80048d4:	20001048 	.word	0x20001048
 80048d8:	bf800000 	.word	0xbf800000
 80048dc:	200010b0 	.word	0x200010b0
 80048e0:	2000105c 	.word	0x2000105c
 80048e4:	200010b4 	.word	0x200010b4
 80048e8:	20001054 	.word	0x20001054
 80048ec:	20001070 	.word	0x20001070
 80048f0:	20001094 	.word	0x20001094
 80048f4:	200014a4 	.word	0x200014a4
 80048f8:	200010ac 	.word	0x200010ac
 80048fc:	4bae      	ldr	r3, [pc, #696]	; (8004bb8 <TIM2_IRQHandler+0x600>)
 80048fe:	601a      	str	r2, [r3, #0]
	  Res_T4=adc_val[5]*10000/(3900-adc_val[5]);
 8004900:	4bae      	ldr	r3, [pc, #696]	; (8004bbc <TIM2_IRQHandler+0x604>)
 8004902:	895b      	ldrh	r3, [r3, #10]
 8004904:	461a      	mov	r2, r3
 8004906:	f242 7310 	movw	r3, #10000	; 0x2710
 800490a:	fb03 f202 	mul.w	r2, r3, r2
 800490e:	4bab      	ldr	r3, [pc, #684]	; (8004bbc <TIM2_IRQHandler+0x604>)
 8004910:	895b      	ldrh	r3, [r3, #10]
 8004912:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004916:	330c      	adds	r3, #12
 8004918:	fb92 f3f3 	sdiv	r3, r2, r3
 800491c:	4618      	mov	r0, r3
 800491e:	f7fc f9bd 	bl	8000c9c <__aeabi_i2f>
 8004922:	4602      	mov	r2, r0
 8004924:	4ba6      	ldr	r3, [pc, #664]	; (8004bc0 <TIM2_IRQHandler+0x608>)
 8004926:	601a      	str	r2, [r3, #0]
	  Suhu_T4= -24.05*log(Res_T4) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8004928:	4ba5      	ldr	r3, [pc, #660]	; (8004bc0 <TIM2_IRQHandler+0x608>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f7fb fd7b 	bl	8000428 <__aeabi_f2d>
 8004932:	4603      	mov	r3, r0
 8004934:	460c      	mov	r4, r1
 8004936:	4618      	mov	r0, r3
 8004938:	4621      	mov	r1, r4
 800493a:	f007 fd2f 	bl	800c39c <log>
 800493e:	a398      	add	r3, pc, #608	; (adr r3, 8004ba0 <TIM2_IRQHandler+0x5e8>)
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f7fb fdc8 	bl	80004d8 <__aeabi_dmul>
 8004948:	4603      	mov	r3, r0
 800494a:	460c      	mov	r4, r1
 800494c:	4618      	mov	r0, r3
 800494e:	4621      	mov	r1, r4
 8004950:	a395      	add	r3, pc, #596	; (adr r3, 8004ba8 <TIM2_IRQHandler+0x5f0>)
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	f7fb fc09 	bl	800016c <__adddf3>
 800495a:	4603      	mov	r3, r0
 800495c:	460c      	mov	r4, r1
 800495e:	4618      	mov	r0, r3
 8004960:	4621      	mov	r1, r4
 8004962:	f7fc f891 	bl	8000a88 <__aeabi_d2f>
 8004966:	4602      	mov	r2, r0
 8004968:	4b96      	ldr	r3, [pc, #600]	; (8004bc4 <TIM2_IRQHandler+0x60c>)
 800496a:	601a      	str	r2, [r3, #0]
  }

  if(BATT_Start_Up==1)
 800496c:	4b96      	ldr	r3, [pc, #600]	; (8004bc8 <TIM2_IRQHandler+0x610>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	f040 80a7 	bne.w	8004ac4 <TIM2_IRQHandler+0x50c>
  {
	  if(BATT_State==STATE_DISCHARGE)
 8004976:	4b95      	ldr	r3, [pc, #596]	; (8004bcc <TIM2_IRQHandler+0x614>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d101      	bne.n	8004982 <TIM2_IRQHandler+0x3ca>
	  {
		 Batt_Protection_when_discharge();
 800497e:	f000 f99b 	bl	8004cb8 <Batt_Protection_when_discharge>
	  }

	  if(BATT_State==STATE_CHARGE)
 8004982:	4b92      	ldr	r3, [pc, #584]	; (8004bcc <TIM2_IRQHandler+0x614>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <TIM2_IRQHandler+0x3d6>
	  {
		  Batt_Protection_when_charge();
 800498a:	f000 ffc1 	bl	8005910 <Batt_Protection_when_charge>
	  }


	  //********************* Clearing protection status *****************************////
	  // ---> Clearing UnderVoltage
	  if(((Clear_Trip_undervoltage==1)||(VBATT>54))&&flag_trip_undervoltage==ON)
 800498e:	4b90      	ldr	r3, [pc, #576]	; (8004bd0 <TIM2_IRQHandler+0x618>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d008      	beq.n	80049a8 <TIM2_IRQHandler+0x3f0>
 8004996:	4b8f      	ldr	r3, [pc, #572]	; (8004bd4 <TIM2_IRQHandler+0x61c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	498f      	ldr	r1, [pc, #572]	; (8004bd8 <TIM2_IRQHandler+0x620>)
 800499c:	4618      	mov	r0, r3
 800499e:	f7fc fb8d 	bl	80010bc <__aeabi_fcmpgt>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d009      	beq.n	80049bc <TIM2_IRQHandler+0x404>
 80049a8:	4b8c      	ldr	r3, [pc, #560]	; (8004bdc <TIM2_IRQHandler+0x624>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d105      	bne.n	80049bc <TIM2_IRQHandler+0x404>
	  {
		  flag_trip_undervoltage=OFF;
 80049b0:	4b8a      	ldr	r3, [pc, #552]	; (8004bdc <TIM2_IRQHandler+0x624>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
		  Clear_Trip_undervoltage=0;
 80049b6:	4b86      	ldr	r3, [pc, #536]	; (8004bd0 <TIM2_IRQHandler+0x618>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverCurrent Discharge
	  if(flag_trip_overcurrentdischarge==ON && Clear_Trip_overcurrentdischarge==1)
 80049bc:	4b88      	ldr	r3, [pc, #544]	; (8004be0 <TIM2_IRQHandler+0x628>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d109      	bne.n	80049d8 <TIM2_IRQHandler+0x420>
 80049c4:	4b87      	ldr	r3, [pc, #540]	; (8004be4 <TIM2_IRQHandler+0x62c>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d105      	bne.n	80049d8 <TIM2_IRQHandler+0x420>
	  {
		  flag_trip_overcurrentdischarge=OFF;
 80049cc:	4b84      	ldr	r3, [pc, #528]	; (8004be0 <TIM2_IRQHandler+0x628>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]
		  Clear_Trip_overcurrentdischarge=0;
 80049d2:	4b84      	ldr	r3, [pc, #528]	; (8004be4 <TIM2_IRQHandler+0x62c>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverTemperature
	  if(flag_trip_overtemperature==ON && ((Suhu_T1<40)||(Suhu_T2<40)||(Suhu_T3<40)||(Suhu_T4<40)))
 80049d8:	4b83      	ldr	r3, [pc, #524]	; (8004be8 <TIM2_IRQHandler+0x630>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d126      	bne.n	8004a2e <TIM2_IRQHandler+0x476>
 80049e0:	4b82      	ldr	r3, [pc, #520]	; (8004bec <TIM2_IRQHandler+0x634>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4982      	ldr	r1, [pc, #520]	; (8004bf0 <TIM2_IRQHandler+0x638>)
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fc fb4a 	bl	8001080 <__aeabi_fcmplt>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d11a      	bne.n	8004a28 <TIM2_IRQHandler+0x470>
 80049f2:	4b80      	ldr	r3, [pc, #512]	; (8004bf4 <TIM2_IRQHandler+0x63c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	497e      	ldr	r1, [pc, #504]	; (8004bf0 <TIM2_IRQHandler+0x638>)
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fc fb41 	bl	8001080 <__aeabi_fcmplt>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d111      	bne.n	8004a28 <TIM2_IRQHandler+0x470>
 8004a04:	4b6c      	ldr	r3, [pc, #432]	; (8004bb8 <TIM2_IRQHandler+0x600>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4979      	ldr	r1, [pc, #484]	; (8004bf0 <TIM2_IRQHandler+0x638>)
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fc fb38 	bl	8001080 <__aeabi_fcmplt>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <TIM2_IRQHandler+0x470>
 8004a16:	4b6b      	ldr	r3, [pc, #428]	; (8004bc4 <TIM2_IRQHandler+0x60c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4975      	ldr	r1, [pc, #468]	; (8004bf0 <TIM2_IRQHandler+0x638>)
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fc fb2f 	bl	8001080 <__aeabi_fcmplt>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <TIM2_IRQHandler+0x476>
	  {
		  flag_trip_overtemperature=OFF;
 8004a28:	4b6f      	ldr	r3, [pc, #444]	; (8004be8 <TIM2_IRQHandler+0x630>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing UnderTemperature
	  if(flag_trip_undertemperature==ON && ((Suhu_T1>20)||(Suhu_T2>20)||(Suhu_T3>20)||(Suhu_T4>20)))
 8004a2e:	4b72      	ldr	r3, [pc, #456]	; (8004bf8 <TIM2_IRQHandler+0x640>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d126      	bne.n	8004a84 <TIM2_IRQHandler+0x4cc>
 8004a36:	4b6d      	ldr	r3, [pc, #436]	; (8004bec <TIM2_IRQHandler+0x634>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4970      	ldr	r1, [pc, #448]	; (8004bfc <TIM2_IRQHandler+0x644>)
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fc fb3d 	bl	80010bc <__aeabi_fcmpgt>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d11a      	bne.n	8004a7e <TIM2_IRQHandler+0x4c6>
 8004a48:	4b6a      	ldr	r3, [pc, #424]	; (8004bf4 <TIM2_IRQHandler+0x63c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	496b      	ldr	r1, [pc, #428]	; (8004bfc <TIM2_IRQHandler+0x644>)
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fc fb34 	bl	80010bc <__aeabi_fcmpgt>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d111      	bne.n	8004a7e <TIM2_IRQHandler+0x4c6>
 8004a5a:	4b57      	ldr	r3, [pc, #348]	; (8004bb8 <TIM2_IRQHandler+0x600>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4967      	ldr	r1, [pc, #412]	; (8004bfc <TIM2_IRQHandler+0x644>)
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fc fb2b 	bl	80010bc <__aeabi_fcmpgt>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d108      	bne.n	8004a7e <TIM2_IRQHandler+0x4c6>
 8004a6c:	4b55      	ldr	r3, [pc, #340]	; (8004bc4 <TIM2_IRQHandler+0x60c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4962      	ldr	r1, [pc, #392]	; (8004bfc <TIM2_IRQHandler+0x644>)
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fc fb22 	bl	80010bc <__aeabi_fcmpgt>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <TIM2_IRQHandler+0x4cc>
	  {
		  flag_trip_undertemperature=OFF;
 8004a7e:	4b5e      	ldr	r3, [pc, #376]	; (8004bf8 <TIM2_IRQHandler+0x640>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverDischarge
	   if(flag_trip_SOCOverDischarge==ON && Pack_SOC>20)
 8004a84:	4b5e      	ldr	r3, [pc, #376]	; (8004c00 <TIM2_IRQHandler+0x648>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d10b      	bne.n	8004aa4 <TIM2_IRQHandler+0x4ec>
 8004a8c:	4b5d      	ldr	r3, [pc, #372]	; (8004c04 <TIM2_IRQHandler+0x64c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	495a      	ldr	r1, [pc, #360]	; (8004bfc <TIM2_IRQHandler+0x644>)
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc fb12 	bl	80010bc <__aeabi_fcmpgt>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <TIM2_IRQHandler+0x4ec>
	   {
		  flag_trip_SOCOverDischarge=OFF;
 8004a9e:	4b58      	ldr	r3, [pc, #352]	; (8004c00 <TIM2_IRQHandler+0x648>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	701a      	strb	r2, [r3, #0]
	   }
	   // ---> Clearing OverCharge
	   if(flag_trip_SOCOverCharge==ON && Pack_SOC<70)
 8004aa4:	4b58      	ldr	r3, [pc, #352]	; (8004c08 <TIM2_IRQHandler+0x650>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d10b      	bne.n	8004ac4 <TIM2_IRQHandler+0x50c>
 8004aac:	4b55      	ldr	r3, [pc, #340]	; (8004c04 <TIM2_IRQHandler+0x64c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4956      	ldr	r1, [pc, #344]	; (8004c0c <TIM2_IRQHandler+0x654>)
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc fae4 	bl	8001080 <__aeabi_fcmplt>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <TIM2_IRQHandler+0x50c>
	   {
		  flag_trip_SOCOverCharge=OFF;
 8004abe:	4b52      	ldr	r3, [pc, #328]	; (8004c08 <TIM2_IRQHandler+0x650>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]
	   }
  }
	  i++;
 8004ac4:	4b52      	ldr	r3, [pc, #328]	; (8004c10 <TIM2_IRQHandler+0x658>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	4a51      	ldr	r2, [pc, #324]	; (8004c10 <TIM2_IRQHandler+0x658>)
 8004acc:	6013      	str	r3, [r2, #0]
	  i=i%maxdata;
 8004ace:	4b50      	ldr	r3, [pc, #320]	; (8004c10 <TIM2_IRQHandler+0x658>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	4b50      	ldr	r3, [pc, #320]	; (8004c14 <TIM2_IRQHandler+0x65c>)
 8004ad4:	fb83 1302 	smull	r1, r3, r3, r2
 8004ad8:	1159      	asrs	r1, r3, #5
 8004ada:	17d3      	asrs	r3, r2, #31
 8004adc:	1acb      	subs	r3, r1, r3
 8004ade:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004ae2:	fb01 f303 	mul.w	r3, r1, r3
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	4a49      	ldr	r2, [pc, #292]	; (8004c10 <TIM2_IRQHandler+0x658>)
 8004aea:	6013      	str	r3, [r2, #0]

  //////////// Bagian Hitung SOC /////// SOC akan dihitung berdasarkan state baterai (Jika charge maupun discharge)
  if(BATT_State==STATE_CHARGE||BATT_State==STATE_DISCHARGE||BATT_State==STATE_FULL_CHARGE_DISCHARGE||BATT_State==STATE_STANDBY)
 8004aec:	4b37      	ldr	r3, [pc, #220]	; (8004bcc <TIM2_IRQHandler+0x614>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d00c      	beq.n	8004b0e <TIM2_IRQHandler+0x556>
 8004af4:	4b35      	ldr	r3, [pc, #212]	; (8004bcc <TIM2_IRQHandler+0x614>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d008      	beq.n	8004b0e <TIM2_IRQHandler+0x556>
 8004afc:	4b33      	ldr	r3, [pc, #204]	; (8004bcc <TIM2_IRQHandler+0x614>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d004      	beq.n	8004b0e <TIM2_IRQHandler+0x556>
 8004b04:	4b31      	ldr	r3, [pc, #196]	; (8004bcc <TIM2_IRQHandler+0x614>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f040 80b2 	bne.w	8004c72 <TIM2_IRQHandler+0x6ba>
  {
	  time_soc++;
 8004b0e:	4b42      	ldr	r3, [pc, #264]	; (8004c18 <TIM2_IRQHandler+0x660>)
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	3301      	adds	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	4b40      	ldr	r3, [pc, #256]	; (8004c18 <TIM2_IRQHandler+0x660>)
 8004b18:	801a      	strh	r2, [r3, #0]
	  sum_current+=IBATT;
 8004b1a:	4b40      	ldr	r3, [pc, #256]	; (8004c1c <TIM2_IRQHandler+0x664>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b40      	ldr	r3, [pc, #256]	; (8004c20 <TIM2_IRQHandler+0x668>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f7fc f805 	bl	8000b34 <__addsf3>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4b3b      	ldr	r3, [pc, #236]	; (8004c1c <TIM2_IRQHandler+0x664>)
 8004b30:	601a      	str	r2, [r3, #0]
	  if(time_soc>999)
 8004b32:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <TIM2_IRQHandler+0x660>)
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b3a:	f0c0 809a 	bcc.w	8004c72 <TIM2_IRQHandler+0x6ba>
	  {
		  AH_Consumption = (-1*sum_current/1000*(1.0/3600.0))/Pack_Cap*100-(4e-5); //Konsumsi System 4e-5
 8004b3e:	4b37      	ldr	r3, [pc, #220]	; (8004c1c <TIM2_IRQHandler+0x664>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004b46:	4937      	ldr	r1, [pc, #220]	; (8004c24 <TIM2_IRQHandler+0x66c>)
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fc f9af 	bl	8000eac <__aeabi_fdiv>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fb fc69 	bl	8000428 <__aeabi_f2d>
 8004b56:	a316      	add	r3, pc, #88	; (adr r3, 8004bb0 <TIM2_IRQHandler+0x5f8>)
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f7fb fcbc 	bl	80004d8 <__aeabi_dmul>
 8004b60:	4603      	mov	r3, r0
 8004b62:	460c      	mov	r4, r1
 8004b64:	4625      	mov	r5, r4
 8004b66:	461c      	mov	r4, r3
 8004b68:	4b2f      	ldr	r3, [pc, #188]	; (8004c28 <TIM2_IRQHandler+0x670>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fb fc5b 	bl	8000428 <__aeabi_f2d>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4620      	mov	r0, r4
 8004b78:	4629      	mov	r1, r5
 8004b7a:	f7fb fdd7 	bl	800072c <__aeabi_ddiv>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	460c      	mov	r4, r1
 8004b82:	4618      	mov	r0, r3
 8004b84:	4621      	mov	r1, r4
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	4b28      	ldr	r3, [pc, #160]	; (8004c2c <TIM2_IRQHandler+0x674>)
 8004b8c:	f7fb fca4 	bl	80004d8 <__aeabi_dmul>
 8004b90:	4603      	mov	r3, r0
 8004b92:	460c      	mov	r4, r1
 8004b94:	4618      	mov	r0, r3
 8004b96:	4621      	mov	r1, r4
 8004b98:	e04a      	b.n	8004c30 <TIM2_IRQHandler+0x678>
 8004b9a:	bf00      	nop
 8004b9c:	f3af 8000 	nop.w
 8004ba0:	cccccccd 	.word	0xcccccccd
 8004ba4:	c0380ccc 	.word	0xc0380ccc
 8004ba8:	b851eb85 	.word	0xb851eb85
 8004bac:	406ecd1e 	.word	0x406ecd1e
 8004bb0:	789abcdf 	.word	0x789abcdf
 8004bb4:	3f323456 	.word	0x3f323456
 8004bb8:	2000104c 	.word	0x2000104c
 8004bbc:	200008ec 	.word	0x200008ec
 8004bc0:	20001060 	.word	0x20001060
 8004bc4:	2000109c 	.word	0x2000109c
 8004bc8:	2000027d 	.word	0x2000027d
 8004bcc:	20000966 	.word	0x20000966
 8004bd0:	200010a8 	.word	0x200010a8
 8004bd4:	20001048 	.word	0x20001048
 8004bd8:	42580000 	.word	0x42580000
 8004bdc:	20001065 	.word	0x20001065
 8004be0:	20001074 	.word	0x20001074
 8004be4:	20001050 	.word	0x20001050
 8004be8:	20001044 	.word	0x20001044
 8004bec:	20001070 	.word	0x20001070
 8004bf0:	42200000 	.word	0x42200000
 8004bf4:	200014a4 	.word	0x200014a4
 8004bf8:	20001064 	.word	0x20001064
 8004bfc:	41a00000 	.word	0x41a00000
 8004c00:	20001090 	.word	0x20001090
 8004c04:	20000b98 	.word	0x20000b98
 8004c08:	20000c3d 	.word	0x20000c3d
 8004c0c:	428c0000 	.word	0x428c0000
 8004c10:	20001068 	.word	0x20001068
 8004c14:	10624dd3 	.word	0x10624dd3
 8004c18:	20001046 	.word	0x20001046
 8004c1c:	200014a8 	.word	0x200014a8
 8004c20:	2000105c 	.word	0x2000105c
 8004c24:	447a0000 	.word	0x447a0000
 8004c28:	20000014 	.word	0x20000014
 8004c2c:	40590000 	.word	0x40590000
 8004c30:	a311      	add	r3, pc, #68	; (adr r3, 8004c78 <TIM2_IRQHandler+0x6c0>)
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	f7fb fa97 	bl	8000168 <__aeabi_dsub>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	4618      	mov	r0, r3
 8004c40:	4621      	mov	r1, r4
 8004c42:	f7fb ff21 	bl	8000a88 <__aeabi_d2f>
 8004c46:	4602      	mov	r2, r0
 8004c48:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <TIM2_IRQHandler+0x6c8>)
 8004c4a:	601a      	str	r2, [r3, #0]
		  Pack_SOC=Pack_SOC+AH_Consumption;
 8004c4c:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <TIM2_IRQHandler+0x6cc>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <TIM2_IRQHandler+0x6c8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4619      	mov	r1, r3
 8004c56:	4610      	mov	r0, r2
 8004c58:	f7fb ff6c 	bl	8000b34 <__addsf3>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	461a      	mov	r2, r3
 8004c60:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <TIM2_IRQHandler+0x6cc>)
 8004c62:	601a      	str	r2, [r3, #0]
		  time_soc=0;
 8004c64:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <TIM2_IRQHandler+0x6d0>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	801a      	strh	r2, [r3, #0]
		  sum_current=0;
 8004c6a:	4b08      	ldr	r3, [pc, #32]	; (8004c8c <TIM2_IRQHandler+0x6d4>)
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
	  }
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8004c72:	bf00      	nop
 8004c74:	bdb0      	pop	{r4, r5, r7, pc}
 8004c76:	bf00      	nop
 8004c78:	88e368f1 	.word	0x88e368f1
 8004c7c:	3f04f8b5 	.word	0x3f04f8b5
 8004c80:	20001028 	.word	0x20001028
 8004c84:	20000b98 	.word	0x20000b98
 8004c88:	20001046 	.word	0x20001046
 8004c8c:	200014a8 	.word	0x200014a8

08004c90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004c94:	4806      	ldr	r0, [pc, #24]	; (8004cb0 <TIM3_IRQHandler+0x20>)
 8004c96:	f004 feb0 	bl	80099fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(flag_start_shutdown==1)
 8004c9a:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <TIM3_IRQHandler+0x24>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <TIM3_IRQHandler+0x16>
  {
	  BMS_CAN_Tx();
 8004ca2:	f7fc fc13 	bl	80014cc <BMS_CAN_Tx>
  }
  BMS_CAN_Rx();
 8004ca6:	f7fc ff61 	bl	8001b6c <BMS_CAN_Rx>
  /* USER CODE END TIM3_IRQn 1 */
}
 8004caa:	bf00      	nop
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	200014ac 	.word	0x200014ac
 8004cb4:	20000960 	.word	0x20000960

08004cb8 <Batt_Protection_when_discharge>:

/* USER CODE BEGIN 1 */
void Batt_Protection_when_discharge(void)
{
 8004cb8:	b5b0      	push	{r4, r5, r7, lr}
 8004cba:	af00      	add	r7, sp, #0
	///////////////////// Short Circuit //////////////////////////////////////
			  	  if(IBATT>(VBATT/0.9))
 8004cbc:	4b7e      	ldr	r3, [pc, #504]	; (8004eb8 <Batt_Protection_when_discharge+0x200>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fb fbb1 	bl	8000428 <__aeabi_f2d>
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	460d      	mov	r5, r1
 8004cca:	4b7c      	ldr	r3, [pc, #496]	; (8004ebc <Batt_Protection_when_discharge+0x204>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fb fbaa 	bl	8000428 <__aeabi_f2d>
 8004cd4:	a374      	add	r3, pc, #464	; (adr r3, 8004ea8 <Batt_Protection_when_discharge+0x1f0>)
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	f7fb fd27 	bl	800072c <__aeabi_ddiv>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	f7fb fe87 	bl	80009f8 <__aeabi_dcmpgt>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00e      	beq.n	8004d0e <Batt_Protection_when_discharge+0x56>
	 		  	  {
	 		  		  fault_code=12;
 8004cf0:	4b73      	ldr	r3, [pc, #460]	; (8004ec0 <Batt_Protection_when_discharge+0x208>)
 8004cf2:	220c      	movs	r2, #12
 8004cf4:	701a      	strb	r2, [r3, #0]
	 		  		  Batt_Open_Mode();
 8004cf6:	f7fc fb51 	bl	800139c <Batt_Open_Mode>
	 		  		  flag_trip_shortcircuit=ON;
 8004cfa:	4b72      	ldr	r3, [pc, #456]	; (8004ec4 <Batt_Protection_when_discharge+0x20c>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	701a      	strb	r2, [r3, #0]
	 		  		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8004d00:	2200      	movs	r2, #0
 8004d02:	2104      	movs	r1, #4
 8004d04:	4870      	ldr	r0, [pc, #448]	; (8004ec8 <Batt_Protection_when_discharge+0x210>)
 8004d06:	f003 fb3a 	bl	800837e <HAL_GPIO_WritePin>
			  		  T_trip_cycle=T_trip_cycle-0.001;
			  		  T_I_Over_trip_cycle-=0.001;
			  		  if(T_trip_cycle<0) T_trip_cycle=0;
			  		if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
			  	  }
}
 8004d0a:	f000 bdee 	b.w	80058ea <Batt_Protection_when_discharge+0xc32>
			  	  else if(VBATT<V_Under_Set && flag_trip_undervoltage==OFF )   //Indikasi terjadi Undervoltage
 8004d0e:	4b6b      	ldr	r3, [pc, #428]	; (8004ebc <Batt_Protection_when_discharge+0x204>)
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4b6e      	ldr	r3, [pc, #440]	; (8004ecc <Batt_Protection_when_discharge+0x214>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4619      	mov	r1, r3
 8004d18:	4610      	mov	r0, r2
 8004d1a:	f7fc f9b1 	bl	8001080 <__aeabi_fcmplt>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 80e7 	beq.w	8004ef4 <Batt_Protection_when_discharge+0x23c>
 8004d26:	4b6a      	ldr	r3, [pc, #424]	; (8004ed0 <Batt_Protection_when_discharge+0x218>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f040 80e2 	bne.w	8004ef4 <Batt_Protection_when_discharge+0x23c>
			  		fault_code=1;
 8004d30:	4b63      	ldr	r3, [pc, #396]	; (8004ec0 <Batt_Protection_when_discharge+0x208>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]
			  		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 8004d36:	4b67      	ldr	r3, [pc, #412]	; (8004ed4 <Batt_Protection_when_discharge+0x21c>)
 8004d38:	681c      	ldr	r4, [r3, #0]
 8004d3a:	4b60      	ldr	r3, [pc, #384]	; (8004ebc <Batt_Protection_when_discharge+0x204>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b63      	ldr	r3, [pc, #396]	; (8004ecc <Batt_Protection_when_discharge+0x214>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4619      	mov	r1, r3
 8004d44:	4610      	mov	r0, r2
 8004d46:	f7fc f8b1 	bl	8000eac <__aeabi_fdiv>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004d52:	f7fb feed 	bl	8000b30 <__aeabi_fsub>
 8004d56:	4603      	mov	r3, r0
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f7fc f8a6 	bl	8000eac <__aeabi_fdiv>
 8004d60:	4603      	mov	r3, r0
 8004d62:	461a      	mov	r2, r3
 8004d64:	4b5c      	ldr	r3, [pc, #368]	; (8004ed8 <Batt_Protection_when_discharge+0x220>)
 8004d66:	601a      	str	r2, [r3, #0]
			  		T_trip_cycle+=0.001;
 8004d68:	4b5c      	ldr	r3, [pc, #368]	; (8004edc <Batt_Protection_when_discharge+0x224>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fb fb5b 	bl	8000428 <__aeabi_f2d>
 8004d72:	a34f      	add	r3, pc, #316	; (adr r3, 8004eb0 <Batt_Protection_when_discharge+0x1f8>)
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f7fb f9f8 	bl	800016c <__adddf3>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	460c      	mov	r4, r1
 8004d80:	4618      	mov	r0, r3
 8004d82:	4621      	mov	r1, r4
 8004d84:	f7fb fe80 	bl	8000a88 <__aeabi_d2f>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	4b54      	ldr	r3, [pc, #336]	; (8004edc <Batt_Protection_when_discharge+0x224>)
 8004d8c:	601a      	str	r2, [r3, #0]
			  		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF)
 8004d8e:	4b53      	ldr	r3, [pc, #332]	; (8004edc <Batt_Protection_when_discharge+0x224>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4b51      	ldr	r3, [pc, #324]	; (8004ed8 <Batt_Protection_when_discharge+0x220>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f7fc f98f 	bl	80010bc <__aeabi_fcmpgt>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d011      	beq.n	8004dc8 <Batt_Protection_when_discharge+0x110>
 8004da4:	4b4a      	ldr	r3, [pc, #296]	; (8004ed0 <Batt_Protection_when_discharge+0x218>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10d      	bne.n	8004dc8 <Batt_Protection_when_discharge+0x110>
			  			Batt_Open_Mode();
 8004dac:	f7fc faf6 	bl	800139c <Batt_Open_Mode>
			  			T_trip_cycle=T_Under_trip;
 8004db0:	4b49      	ldr	r3, [pc, #292]	; (8004ed8 <Batt_Protection_when_discharge+0x220>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a49      	ldr	r2, [pc, #292]	; (8004edc <Batt_Protection_when_discharge+0x224>)
 8004db6:	6013      	str	r3, [r2, #0]
			  			flag_trip_undervoltage=ON;
 8004db8:	4b45      	ldr	r3, [pc, #276]	; (8004ed0 <Batt_Protection_when_discharge+0x218>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
			  			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2104      	movs	r1, #4
 8004dc2:	4841      	ldr	r0, [pc, #260]	; (8004ec8 <Batt_Protection_when_discharge+0x210>)
 8004dc4:	f003 fadb 	bl	800837e <HAL_GPIO_WritePin>
			  		if(flag_trip_undervoltage==OFF)
 8004dc8:	4b41      	ldr	r3, [pc, #260]	; (8004ed0 <Batt_Protection_when_discharge+0x218>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f040 8589 	bne.w	80058e4 <Batt_Protection_when_discharge+0xc2c>
			  			if(T_Under_trip-T_trip_cycle>15)
 8004dd2:	4b41      	ldr	r3, [pc, #260]	; (8004ed8 <Batt_Protection_when_discharge+0x220>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b41      	ldr	r3, [pc, #260]	; (8004edc <Batt_Protection_when_discharge+0x224>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4610      	mov	r0, r2
 8004dde:	f7fb fea7 	bl	8000b30 <__aeabi_fsub>
 8004de2:	4603      	mov	r3, r0
 8004de4:	493e      	ldr	r1, [pc, #248]	; (8004ee0 <Batt_Protection_when_discharge+0x228>)
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fc f968 	bl	80010bc <__aeabi_fcmpgt>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d018      	beq.n	8004e24 <Batt_Protection_when_discharge+0x16c>
			  				if((test_tim2%1000)==0)
 8004df2:	4b3c      	ldr	r3, [pc, #240]	; (8004ee4 <Batt_Protection_when_discharge+0x22c>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4b3c      	ldr	r3, [pc, #240]	; (8004ee8 <Batt_Protection_when_discharge+0x230>)
 8004df8:	fb83 1302 	smull	r1, r3, r3, r2
 8004dfc:	1199      	asrs	r1, r3, #6
 8004dfe:	17d3      	asrs	r3, r2, #31
 8004e00:	1acb      	subs	r3, r1, r3
 8004e02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e06:	fb01 f303 	mul.w	r3, r1, r3
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f040 8569 	bne.w	80058e4 <Batt_Protection_when_discharge+0xc2c>
			  					BUZZ_Toggle;
 8004e12:	2104      	movs	r1, #4
 8004e14:	482c      	ldr	r0, [pc, #176]	; (8004ec8 <Batt_Protection_when_discharge+0x210>)
 8004e16:	f003 faca 	bl	80083ae <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 8004e1a:	4b32      	ldr	r3, [pc, #200]	; (8004ee4 <Batt_Protection_when_discharge+0x22c>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_undervoltage==OFF)
 8004e20:	f000 bd60 	b.w	80058e4 <Batt_Protection_when_discharge+0xc2c>
			  			else if(T_Under_trip-T_trip_cycle>10)
 8004e24:	4b2c      	ldr	r3, [pc, #176]	; (8004ed8 <Batt_Protection_when_discharge+0x220>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	4b2c      	ldr	r3, [pc, #176]	; (8004edc <Batt_Protection_when_discharge+0x224>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	f7fb fe7e 	bl	8000b30 <__aeabi_fsub>
 8004e34:	4603      	mov	r3, r0
 8004e36:	492d      	ldr	r1, [pc, #180]	; (8004eec <Batt_Protection_when_discharge+0x234>)
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fc f93f 	bl	80010bc <__aeabi_fcmpgt>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d017      	beq.n	8004e74 <Batt_Protection_when_discharge+0x1bc>
			  				if((test_tim2%100)==0)
 8004e44:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <Batt_Protection_when_discharge+0x22c>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	4b29      	ldr	r3, [pc, #164]	; (8004ef0 <Batt_Protection_when_discharge+0x238>)
 8004e4a:	fb83 1302 	smull	r1, r3, r3, r2
 8004e4e:	1159      	asrs	r1, r3, #5
 8004e50:	17d3      	asrs	r3, r2, #31
 8004e52:	1acb      	subs	r3, r1, r3
 8004e54:	2164      	movs	r1, #100	; 0x64
 8004e56:	fb01 f303 	mul.w	r3, r1, r3
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f040 8541 	bne.w	80058e4 <Batt_Protection_when_discharge+0xc2c>
			  					BUZZ_Toggle;
 8004e62:	2104      	movs	r1, #4
 8004e64:	4818      	ldr	r0, [pc, #96]	; (8004ec8 <Batt_Protection_when_discharge+0x210>)
 8004e66:	f003 faa2 	bl	80083ae <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 8004e6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <Batt_Protection_when_discharge+0x22c>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_undervoltage==OFF)
 8004e70:	f000 bd38 	b.w	80058e4 <Batt_Protection_when_discharge+0xc2c>
			  			else if(T_Under_trip-T_trip_cycle>1)
 8004e74:	4b18      	ldr	r3, [pc, #96]	; (8004ed8 <Batt_Protection_when_discharge+0x220>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	4b18      	ldr	r3, [pc, #96]	; (8004edc <Batt_Protection_when_discharge+0x224>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	f7fb fe56 	bl	8000b30 <__aeabi_fsub>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fc f916 	bl	80010bc <__aeabi_fcmpgt>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <Batt_Protection_when_discharge+0x1e2>
			  		if(flag_trip_undervoltage==OFF)
 8004e96:	f000 bd25 	b.w	80058e4 <Batt_Protection_when_discharge+0xc2c>
			  				HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	2104      	movs	r1, #4
 8004e9e:	480a      	ldr	r0, [pc, #40]	; (8004ec8 <Batt_Protection_when_discharge+0x210>)
 8004ea0:	f003 fa6d 	bl	800837e <HAL_GPIO_WritePin>
			  		if(flag_trip_undervoltage==OFF)
 8004ea4:	f000 bd1e 	b.w	80058e4 <Batt_Protection_when_discharge+0xc2c>
 8004ea8:	cccccccd 	.word	0xcccccccd
 8004eac:	3feccccc 	.word	0x3feccccc
 8004eb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004eb4:	3f50624d 	.word	0x3f50624d
 8004eb8:	2000105c 	.word	0x2000105c
 8004ebc:	20001048 	.word	0x20001048
 8004ec0:	2000106c 	.word	0x2000106c
 8004ec4:	20000c3e 	.word	0x20000c3e
 8004ec8:	40011000 	.word	0x40011000
 8004ecc:	20000074 	.word	0x20000074
 8004ed0:	20001065 	.word	0x20001065
 8004ed4:	20000054 	.word	0x20000054
 8004ed8:	20001034 	.word	0x20001034
 8004edc:	20001078 	.word	0x20001078
 8004ee0:	41700000 	.word	0x41700000
 8004ee4:	20000b90 	.word	0x20000b90
 8004ee8:	10624dd3 	.word	0x10624dd3
 8004eec:	41200000 	.word	0x41200000
 8004ef0:	51eb851f 	.word	0x51eb851f
			  	  else if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF)   //Indikasi terjadi Over Current
 8004ef4:	4b76      	ldr	r3, [pc, #472]	; (80050d0 <Batt_Protection_when_discharge+0x418>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	4b76      	ldr	r3, [pc, #472]	; (80050d4 <Batt_Protection_when_discharge+0x41c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4619      	mov	r1, r3
 8004efe:	4610      	mov	r0, r2
 8004f00:	f7fb fe16 	bl	8000b30 <__aeabi_fsub>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f04f 0100 	mov.w	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fc f8d6 	bl	80010bc <__aeabi_fcmpgt>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 80f8 	beq.w	8005108 <Batt_Protection_when_discharge+0x450>
 8004f18:	4b6f      	ldr	r3, [pc, #444]	; (80050d8 <Batt_Protection_when_discharge+0x420>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f040 80f3 	bne.w	8005108 <Batt_Protection_when_discharge+0x450>
			  		fault_code=2;
 8004f22:	4b6e      	ldr	r3, [pc, #440]	; (80050dc <Batt_Protection_when_discharge+0x424>)
 8004f24:	2202      	movs	r2, #2
 8004f26:	701a      	strb	r2, [r3, #0]
			  		T_I_Over_trip=TMS_I_Over/((IBATT/10.9)-1);
 8004f28:	4b6d      	ldr	r3, [pc, #436]	; (80050e0 <Batt_Protection_when_discharge+0x428>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fb fa7b 	bl	8000428 <__aeabi_f2d>
 8004f32:	4604      	mov	r4, r0
 8004f34:	460d      	mov	r5, r1
 8004f36:	4b66      	ldr	r3, [pc, #408]	; (80050d0 <Batt_Protection_when_discharge+0x418>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fb fa74 	bl	8000428 <__aeabi_f2d>
 8004f40:	a35f      	add	r3, pc, #380	; (adr r3, 80050c0 <Batt_Protection_when_discharge+0x408>)
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	f7fb fbf1 	bl	800072c <__aeabi_ddiv>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	4b63      	ldr	r3, [pc, #396]	; (80050e4 <Batt_Protection_when_discharge+0x42c>)
 8004f58:	f7fb f906 	bl	8000168 <__aeabi_dsub>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4620      	mov	r0, r4
 8004f62:	4629      	mov	r1, r5
 8004f64:	f7fb fbe2 	bl	800072c <__aeabi_ddiv>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	4621      	mov	r1, r4
 8004f70:	f7fb fd8a 	bl	8000a88 <__aeabi_d2f>
 8004f74:	4602      	mov	r2, r0
 8004f76:	4b5c      	ldr	r3, [pc, #368]	; (80050e8 <Batt_Protection_when_discharge+0x430>)
 8004f78:	601a      	str	r2, [r3, #0]
			  		T_I_Over_trip_cycle+=0.001;
 8004f7a:	4b5c      	ldr	r3, [pc, #368]	; (80050ec <Batt_Protection_when_discharge+0x434>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fb fa52 	bl	8000428 <__aeabi_f2d>
 8004f84:	a350      	add	r3, pc, #320	; (adr r3, 80050c8 <Batt_Protection_when_discharge+0x410>)
 8004f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8a:	f7fb f8ef 	bl	800016c <__adddf3>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	460c      	mov	r4, r1
 8004f92:	4618      	mov	r0, r3
 8004f94:	4621      	mov	r1, r4
 8004f96:	f7fb fd77 	bl	8000a88 <__aeabi_d2f>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	4b53      	ldr	r3, [pc, #332]	; (80050ec <Batt_Protection_when_discharge+0x434>)
 8004f9e:	601a      	str	r2, [r3, #0]
			  		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF)
 8004fa0:	4b52      	ldr	r3, [pc, #328]	; (80050ec <Batt_Protection_when_discharge+0x434>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4b50      	ldr	r3, [pc, #320]	; (80050e8 <Batt_Protection_when_discharge+0x430>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f7fc f886 	bl	80010bc <__aeabi_fcmpgt>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d011      	beq.n	8004fda <Batt_Protection_when_discharge+0x322>
 8004fb6:	4b48      	ldr	r3, [pc, #288]	; (80050d8 <Batt_Protection_when_discharge+0x420>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10d      	bne.n	8004fda <Batt_Protection_when_discharge+0x322>
			  			Batt_Open_Mode();
 8004fbe:	f7fc f9ed 	bl	800139c <Batt_Open_Mode>
			  			T_I_Over_trip_cycle=T_I_Over_trip;
 8004fc2:	4b49      	ldr	r3, [pc, #292]	; (80050e8 <Batt_Protection_when_discharge+0x430>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a49      	ldr	r2, [pc, #292]	; (80050ec <Batt_Protection_when_discharge+0x434>)
 8004fc8:	6013      	str	r3, [r2, #0]
			  			flag_trip_overcurrentdischarge=ON;
 8004fca:	4b43      	ldr	r3, [pc, #268]	; (80050d8 <Batt_Protection_when_discharge+0x420>)
 8004fcc:	2201      	movs	r2, #1
 8004fce:	701a      	strb	r2, [r3, #0]
			  			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2104      	movs	r1, #4
 8004fd4:	4846      	ldr	r0, [pc, #280]	; (80050f0 <Batt_Protection_when_discharge+0x438>)
 8004fd6:	f003 f9d2 	bl	800837e <HAL_GPIO_WritePin>
			  		if(flag_trip_overcurrentdischarge==OFF)
 8004fda:	4b3f      	ldr	r3, [pc, #252]	; (80050d8 <Batt_Protection_when_discharge+0x420>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f040 8482 	bne.w	80058e8 <Batt_Protection_when_discharge+0xc30>
		  				if(T_I_Over_trip-T_I_Over_trip_cycle>15)
 8004fe4:	4b40      	ldr	r3, [pc, #256]	; (80050e8 <Batt_Protection_when_discharge+0x430>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	4b40      	ldr	r3, [pc, #256]	; (80050ec <Batt_Protection_when_discharge+0x434>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f7fb fd9e 	bl	8000b30 <__aeabi_fsub>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	493f      	ldr	r1, [pc, #252]	; (80050f4 <Batt_Protection_when_discharge+0x43c>)
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fc f85f 	bl	80010bc <__aeabi_fcmpgt>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d018      	beq.n	8005036 <Batt_Protection_when_discharge+0x37e>
		  					if((test_tim2%1000)==0)
 8005004:	4b3c      	ldr	r3, [pc, #240]	; (80050f8 <Batt_Protection_when_discharge+0x440>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4b3c      	ldr	r3, [pc, #240]	; (80050fc <Batt_Protection_when_discharge+0x444>)
 800500a:	fb83 1302 	smull	r1, r3, r3, r2
 800500e:	1199      	asrs	r1, r3, #6
 8005010:	17d3      	asrs	r3, r2, #31
 8005012:	1acb      	subs	r3, r1, r3
 8005014:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	f040 8462 	bne.w	80058e8 <Batt_Protection_when_discharge+0xc30>
			  					BUZZ_Toggle;
 8005024:	2104      	movs	r1, #4
 8005026:	4832      	ldr	r0, [pc, #200]	; (80050f0 <Batt_Protection_when_discharge+0x438>)
 8005028:	f003 f9c1 	bl	80083ae <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 800502c:	4b32      	ldr	r3, [pc, #200]	; (80050f8 <Batt_Protection_when_discharge+0x440>)
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_overcurrentdischarge==OFF)
 8005032:	f000 bc59 	b.w	80058e8 <Batt_Protection_when_discharge+0xc30>
			  			else if(T_I_Over_trip-T_I_Over_trip_cycle>10)
 8005036:	4b2c      	ldr	r3, [pc, #176]	; (80050e8 <Batt_Protection_when_discharge+0x430>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4b2c      	ldr	r3, [pc, #176]	; (80050ec <Batt_Protection_when_discharge+0x434>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4619      	mov	r1, r3
 8005040:	4610      	mov	r0, r2
 8005042:	f7fb fd75 	bl	8000b30 <__aeabi_fsub>
 8005046:	4603      	mov	r3, r0
 8005048:	492d      	ldr	r1, [pc, #180]	; (8005100 <Batt_Protection_when_discharge+0x448>)
 800504a:	4618      	mov	r0, r3
 800504c:	f7fc f836 	bl	80010bc <__aeabi_fcmpgt>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d017      	beq.n	8005086 <Batt_Protection_when_discharge+0x3ce>
			  				if((test_tim2%100)==0)
 8005056:	4b28      	ldr	r3, [pc, #160]	; (80050f8 <Batt_Protection_when_discharge+0x440>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4b2a      	ldr	r3, [pc, #168]	; (8005104 <Batt_Protection_when_discharge+0x44c>)
 800505c:	fb83 1302 	smull	r1, r3, r3, r2
 8005060:	1159      	asrs	r1, r3, #5
 8005062:	17d3      	asrs	r3, r2, #31
 8005064:	1acb      	subs	r3, r1, r3
 8005066:	2164      	movs	r1, #100	; 0x64
 8005068:	fb01 f303 	mul.w	r3, r1, r3
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	f040 843a 	bne.w	80058e8 <Batt_Protection_when_discharge+0xc30>
			  					BUZZ_Toggle;
 8005074:	2104      	movs	r1, #4
 8005076:	481e      	ldr	r0, [pc, #120]	; (80050f0 <Batt_Protection_when_discharge+0x438>)
 8005078:	f003 f999 	bl	80083ae <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 800507c:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <Batt_Protection_when_discharge+0x440>)
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_overcurrentdischarge==OFF)
 8005082:	f000 bc31 	b.w	80058e8 <Batt_Protection_when_discharge+0xc30>
			  			else if(T_I_Over_trip-T_I_Over_trip_cycle>1)
 8005086:	4b18      	ldr	r3, [pc, #96]	; (80050e8 <Batt_Protection_when_discharge+0x430>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b18      	ldr	r3, [pc, #96]	; (80050ec <Batt_Protection_when_discharge+0x434>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f7fb fd4d 	bl	8000b30 <__aeabi_fsub>
 8005096:	4603      	mov	r3, r0
 8005098:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800509c:	4618      	mov	r0, r3
 800509e:	f7fc f80d 	bl	80010bc <__aeabi_fcmpgt>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <Batt_Protection_when_discharge+0x3f4>
			  		if(flag_trip_overcurrentdischarge==OFF)
 80050a8:	f000 bc1e 	b.w	80058e8 <Batt_Protection_when_discharge+0xc30>
			  				HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 80050ac:	2201      	movs	r2, #1
 80050ae:	2104      	movs	r1, #4
 80050b0:	480f      	ldr	r0, [pc, #60]	; (80050f0 <Batt_Protection_when_discharge+0x438>)
 80050b2:	f003 f964 	bl	800837e <HAL_GPIO_WritePin>
			  		if(flag_trip_overcurrentdischarge==OFF)
 80050b6:	f000 bc17 	b.w	80058e8 <Batt_Protection_when_discharge+0xc30>
 80050ba:	bf00      	nop
 80050bc:	f3af 8000 	nop.w
 80050c0:	cccccccd 	.word	0xcccccccd
 80050c4:	4025cccc 	.word	0x4025cccc
 80050c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80050cc:	3f50624d 	.word	0x3f50624d
 80050d0:	2000105c 	.word	0x2000105c
 80050d4:	2000005c 	.word	0x2000005c
 80050d8:	20001074 	.word	0x20001074
 80050dc:	2000106c 	.word	0x2000106c
 80050e0:	20000058 	.word	0x20000058
 80050e4:	3ff00000 	.word	0x3ff00000
 80050e8:	20001030 	.word	0x20001030
 80050ec:	200010a0 	.word	0x200010a0
 80050f0:	40011000 	.word	0x40011000
 80050f4:	41700000 	.word	0x41700000
 80050f8:	20000b90 	.word	0x20000b90
 80050fc:	10624dd3 	.word	0x10624dd3
 8005100:	41200000 	.word	0x41200000
 8005104:	51eb851f 	.word	0x51eb851f
			  	  else if(((50-Suhu_T1<10)||(85-Suhu_T2<10)||(50-Suhu_T3<10)||(85-Suhu_T4<10)) && flag_trip_overtemperature==OFF)
 8005108:	4b8c      	ldr	r3, [pc, #560]	; (800533c <Batt_Protection_when_discharge+0x684>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4619      	mov	r1, r3
 800510e:	488c      	ldr	r0, [pc, #560]	; (8005340 <Batt_Protection_when_discharge+0x688>)
 8005110:	f7fb fd0e 	bl	8000b30 <__aeabi_fsub>
 8005114:	4603      	mov	r3, r0
 8005116:	498b      	ldr	r1, [pc, #556]	; (8005344 <Batt_Protection_when_discharge+0x68c>)
 8005118:	4618      	mov	r0, r3
 800511a:	f7fb ffb1 	bl	8001080 <__aeabi_fcmplt>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d12a      	bne.n	800517a <Batt_Protection_when_discharge+0x4c2>
 8005124:	4b88      	ldr	r3, [pc, #544]	; (8005348 <Batt_Protection_when_discharge+0x690>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4619      	mov	r1, r3
 800512a:	4888      	ldr	r0, [pc, #544]	; (800534c <Batt_Protection_when_discharge+0x694>)
 800512c:	f7fb fd00 	bl	8000b30 <__aeabi_fsub>
 8005130:	4603      	mov	r3, r0
 8005132:	4984      	ldr	r1, [pc, #528]	; (8005344 <Batt_Protection_when_discharge+0x68c>)
 8005134:	4618      	mov	r0, r3
 8005136:	f7fb ffa3 	bl	8001080 <__aeabi_fcmplt>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d11c      	bne.n	800517a <Batt_Protection_when_discharge+0x4c2>
 8005140:	4b83      	ldr	r3, [pc, #524]	; (8005350 <Batt_Protection_when_discharge+0x698>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4619      	mov	r1, r3
 8005146:	487e      	ldr	r0, [pc, #504]	; (8005340 <Batt_Protection_when_discharge+0x688>)
 8005148:	f7fb fcf2 	bl	8000b30 <__aeabi_fsub>
 800514c:	4603      	mov	r3, r0
 800514e:	497d      	ldr	r1, [pc, #500]	; (8005344 <Batt_Protection_when_discharge+0x68c>)
 8005150:	4618      	mov	r0, r3
 8005152:	f7fb ff95 	bl	8001080 <__aeabi_fcmplt>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10e      	bne.n	800517a <Batt_Protection_when_discharge+0x4c2>
 800515c:	4b7d      	ldr	r3, [pc, #500]	; (8005354 <Batt_Protection_when_discharge+0x69c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	487a      	ldr	r0, [pc, #488]	; (800534c <Batt_Protection_when_discharge+0x694>)
 8005164:	f7fb fce4 	bl	8000b30 <__aeabi_fsub>
 8005168:	4603      	mov	r3, r0
 800516a:	4976      	ldr	r1, [pc, #472]	; (8005344 <Batt_Protection_when_discharge+0x68c>)
 800516c:	4618      	mov	r0, r3
 800516e:	f7fb ff87 	bl	8001080 <__aeabi_fcmplt>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 80fd 	beq.w	8005374 <Batt_Protection_when_discharge+0x6bc>
 800517a:	4b77      	ldr	r3, [pc, #476]	; (8005358 <Batt_Protection_when_discharge+0x6a0>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f040 80f8 	bne.w	8005374 <Batt_Protection_when_discharge+0x6bc>
			  		  fault_code=3;
 8005184:	4b75      	ldr	r3, [pc, #468]	; (800535c <Batt_Protection_when_discharge+0x6a4>)
 8005186:	2203      	movs	r2, #3
 8005188:	701a      	strb	r2, [r3, #0]
			  		  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 800518a:	4b75      	ldr	r3, [pc, #468]	; (8005360 <Batt_Protection_when_discharge+0x6a8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	496d      	ldr	r1, [pc, #436]	; (8005344 <Batt_Protection_when_discharge+0x68c>)
 8005190:	4618      	mov	r0, r3
 8005192:	f7fb fccd 	bl	8000b30 <__aeabi_fsub>
 8005196:	4603      	mov	r3, r0
 8005198:	461a      	mov	r2, r3
 800519a:	4b68      	ldr	r3, [pc, #416]	; (800533c <Batt_Protection_when_discharge+0x684>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4619      	mov	r1, r3
 80051a0:	4610      	mov	r0, r2
 80051a2:	f7fb ff6d 	bl	8001080 <__aeabi_fcmplt>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d028      	beq.n	80051fe <Batt_Protection_when_discharge+0x546>
 80051ac:	4b6c      	ldr	r3, [pc, #432]	; (8005360 <Batt_Protection_when_discharge+0x6a8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	496c      	ldr	r1, [pc, #432]	; (8005364 <Batt_Protection_when_discharge+0x6ac>)
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fb fcbc 	bl	8000b30 <__aeabi_fsub>
 80051b8:	4603      	mov	r3, r0
 80051ba:	461a      	mov	r2, r3
 80051bc:	4b5f      	ldr	r3, [pc, #380]	; (800533c <Batt_Protection_when_discharge+0x684>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f7fb ff70 	bl	80010a8 <__aeabi_fcmpge>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d017      	beq.n	80051fe <Batt_Protection_when_discharge+0x546>
			  			  if((test_tim2%1000)==0)
 80051ce:	4b66      	ldr	r3, [pc, #408]	; (8005368 <Batt_Protection_when_discharge+0x6b0>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4b66      	ldr	r3, [pc, #408]	; (800536c <Batt_Protection_when_discharge+0x6b4>)
 80051d4:	fb83 1302 	smull	r1, r3, r3, r2
 80051d8:	1199      	asrs	r1, r3, #6
 80051da:	17d3      	asrs	r3, r2, #31
 80051dc:	1acb      	subs	r3, r1, r3
 80051de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80051e2:	fb01 f303 	mul.w	r3, r1, r3
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f040 80a6 	bne.w	800533a <Batt_Protection_when_discharge+0x682>
			  				  BUZZ_Toggle;
 80051ee:	2104      	movs	r1, #4
 80051f0:	485f      	ldr	r0, [pc, #380]	; (8005370 <Batt_Protection_when_discharge+0x6b8>)
 80051f2:	f003 f8dc 	bl	80083ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 80051f6:	4b5c      	ldr	r3, [pc, #368]	; (8005368 <Batt_Protection_when_discharge+0x6b0>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%1000)==0)
 80051fc:	e09d      	b.n	800533a <Batt_Protection_when_discharge+0x682>
			  		  else if(Suhu_T1>Temp_Over_Set-5 && Suhu_T1<=Temp_Over_Set-2)
 80051fe:	4b58      	ldr	r3, [pc, #352]	; (8005360 <Batt_Protection_when_discharge+0x6a8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4958      	ldr	r1, [pc, #352]	; (8005364 <Batt_Protection_when_discharge+0x6ac>)
 8005204:	4618      	mov	r0, r3
 8005206:	f7fb fc93 	bl	8000b30 <__aeabi_fsub>
 800520a:	4603      	mov	r3, r0
 800520c:	461a      	mov	r2, r3
 800520e:	4b4b      	ldr	r3, [pc, #300]	; (800533c <Batt_Protection_when_discharge+0x684>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4619      	mov	r1, r3
 8005214:	4610      	mov	r0, r2
 8005216:	f7fb ff33 	bl	8001080 <__aeabi_fcmplt>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d028      	beq.n	8005272 <Batt_Protection_when_discharge+0x5ba>
 8005220:	4b4f      	ldr	r3, [pc, #316]	; (8005360 <Batt_Protection_when_discharge+0x6a8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005228:	4618      	mov	r0, r3
 800522a:	f7fb fc81 	bl	8000b30 <__aeabi_fsub>
 800522e:	4603      	mov	r3, r0
 8005230:	461a      	mov	r2, r3
 8005232:	4b42      	ldr	r3, [pc, #264]	; (800533c <Batt_Protection_when_discharge+0x684>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f7fb ff35 	bl	80010a8 <__aeabi_fcmpge>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d016      	beq.n	8005272 <Batt_Protection_when_discharge+0x5ba>
			  			  if((test_tim2%500)==0)
 8005244:	4b48      	ldr	r3, [pc, #288]	; (8005368 <Batt_Protection_when_discharge+0x6b0>)
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	4b48      	ldr	r3, [pc, #288]	; (800536c <Batt_Protection_when_discharge+0x6b4>)
 800524a:	fb83 1302 	smull	r1, r3, r3, r2
 800524e:	1159      	asrs	r1, r3, #5
 8005250:	17d3      	asrs	r3, r2, #31
 8005252:	1acb      	subs	r3, r1, r3
 8005254:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d16b      	bne.n	800533a <Batt_Protection_when_discharge+0x682>
			  				  BUZZ_Toggle;
 8005262:	2104      	movs	r1, #4
 8005264:	4842      	ldr	r0, [pc, #264]	; (8005370 <Batt_Protection_when_discharge+0x6b8>)
 8005266:	f003 f8a2 	bl	80083ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 800526a:	4b3f      	ldr	r3, [pc, #252]	; (8005368 <Batt_Protection_when_discharge+0x6b0>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005270:	e063      	b.n	800533a <Batt_Protection_when_discharge+0x682>
			  		  else if(Suhu_T1>Temp_Over_Set-2 && Suhu_T1<=Temp_Over_Set)
 8005272:	4b3b      	ldr	r3, [pc, #236]	; (8005360 <Batt_Protection_when_discharge+0x6a8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800527a:	4618      	mov	r0, r3
 800527c:	f7fb fc58 	bl	8000b30 <__aeabi_fsub>
 8005280:	4603      	mov	r3, r0
 8005282:	461a      	mov	r2, r3
 8005284:	4b2d      	ldr	r3, [pc, #180]	; (800533c <Batt_Protection_when_discharge+0x684>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4619      	mov	r1, r3
 800528a:	4610      	mov	r0, r2
 800528c:	f7fb fef8 	bl	8001080 <__aeabi_fcmplt>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d021      	beq.n	80052da <Batt_Protection_when_discharge+0x622>
 8005296:	4b29      	ldr	r3, [pc, #164]	; (800533c <Batt_Protection_when_discharge+0x684>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b31      	ldr	r3, [pc, #196]	; (8005360 <Batt_Protection_when_discharge+0x6a8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4619      	mov	r1, r3
 80052a0:	4610      	mov	r0, r2
 80052a2:	f7fb fef7 	bl	8001094 <__aeabi_fcmple>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d016      	beq.n	80052da <Batt_Protection_when_discharge+0x622>
			  			  if((test_tim2%500)==0)
 80052ac:	4b2e      	ldr	r3, [pc, #184]	; (8005368 <Batt_Protection_when_discharge+0x6b0>)
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	4b2e      	ldr	r3, [pc, #184]	; (800536c <Batt_Protection_when_discharge+0x6b4>)
 80052b2:	fb83 1302 	smull	r1, r3, r3, r2
 80052b6:	1159      	asrs	r1, r3, #5
 80052b8:	17d3      	asrs	r3, r2, #31
 80052ba:	1acb      	subs	r3, r1, r3
 80052bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80052c0:	fb01 f303 	mul.w	r3, r1, r3
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d137      	bne.n	800533a <Batt_Protection_when_discharge+0x682>
			  				  BUZZ_Toggle;
 80052ca:	2104      	movs	r1, #4
 80052cc:	4828      	ldr	r0, [pc, #160]	; (8005370 <Batt_Protection_when_discharge+0x6b8>)
 80052ce:	f003 f86e 	bl	80083ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 80052d2:	4b25      	ldr	r3, [pc, #148]	; (8005368 <Batt_Protection_when_discharge+0x6b0>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 80052d8:	e02f      	b.n	800533a <Batt_Protection_when_discharge+0x682>
			  		  else if(Suhu_T1>50||Suhu_T2>85||Suhu_T3>50||Suhu_T4>85)
 80052da:	4b18      	ldr	r3, [pc, #96]	; (800533c <Batt_Protection_when_discharge+0x684>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4918      	ldr	r1, [pc, #96]	; (8005340 <Batt_Protection_when_discharge+0x688>)
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fb feeb 	bl	80010bc <__aeabi_fcmpgt>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d11b      	bne.n	8005324 <Batt_Protection_when_discharge+0x66c>
 80052ec:	4b16      	ldr	r3, [pc, #88]	; (8005348 <Batt_Protection_when_discharge+0x690>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4916      	ldr	r1, [pc, #88]	; (800534c <Batt_Protection_when_discharge+0x694>)
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fb fee2 	bl	80010bc <__aeabi_fcmpgt>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d112      	bne.n	8005324 <Batt_Protection_when_discharge+0x66c>
 80052fe:	4b14      	ldr	r3, [pc, #80]	; (8005350 <Batt_Protection_when_discharge+0x698>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	490f      	ldr	r1, [pc, #60]	; (8005340 <Batt_Protection_when_discharge+0x688>)
 8005304:	4618      	mov	r0, r3
 8005306:	f7fb fed9 	bl	80010bc <__aeabi_fcmpgt>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d109      	bne.n	8005324 <Batt_Protection_when_discharge+0x66c>
 8005310:	4b10      	ldr	r3, [pc, #64]	; (8005354 <Batt_Protection_when_discharge+0x69c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	490d      	ldr	r1, [pc, #52]	; (800534c <Batt_Protection_when_discharge+0x694>)
 8005316:	4618      	mov	r0, r3
 8005318:	f7fb fed0 	bl	80010bc <__aeabi_fcmpgt>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d100      	bne.n	8005324 <Batt_Protection_when_discharge+0x66c>
			  		  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 8005322:	e2e2      	b.n	80058ea <Batt_Protection_when_discharge+0xc32>
			  			  Batt_Open_Mode();
 8005324:	f7fc f83a 	bl	800139c <Batt_Open_Mode>
			  			  flag_trip_overtemperature=ON;
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <Batt_Protection_when_discharge+0x6a0>)
 800532a:	2201      	movs	r2, #1
 800532c:	701a      	strb	r2, [r3, #0]
			  			  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 800532e:	2200      	movs	r2, #0
 8005330:	2104      	movs	r1, #4
 8005332:	480f      	ldr	r0, [pc, #60]	; (8005370 <Batt_Protection_when_discharge+0x6b8>)
 8005334:	f003 f823 	bl	800837e <HAL_GPIO_WritePin>
			  		  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 8005338:	e2d7      	b.n	80058ea <Batt_Protection_when_discharge+0xc32>
 800533a:	e2d6      	b.n	80058ea <Batt_Protection_when_discharge+0xc32>
 800533c:	20001070 	.word	0x20001070
 8005340:	42480000 	.word	0x42480000
 8005344:	41200000 	.word	0x41200000
 8005348:	200014a4 	.word	0x200014a4
 800534c:	42aa0000 	.word	0x42aa0000
 8005350:	2000104c 	.word	0x2000104c
 8005354:	2000109c 	.word	0x2000109c
 8005358:	20001044 	.word	0x20001044
 800535c:	2000106c 	.word	0x2000106c
 8005360:	20000064 	.word	0x20000064
 8005364:	40a00000 	.word	0x40a00000
 8005368:	20000b90 	.word	0x20000b90
 800536c:	10624dd3 	.word	0x10624dd3
 8005370:	40011000 	.word	0x40011000
			  	  else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF)
 8005374:	4b94      	ldr	r3, [pc, #592]	; (80055c8 <Batt_Protection_when_discharge+0x910>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	4b94      	ldr	r3, [pc, #592]	; (80055cc <Batt_Protection_when_discharge+0x914>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4619      	mov	r1, r3
 800537e:	4610      	mov	r0, r2
 8005380:	f7fb fbd6 	bl	8000b30 <__aeabi_fsub>
 8005384:	4603      	mov	r3, r0
 8005386:	4992      	ldr	r1, [pc, #584]	; (80055d0 <Batt_Protection_when_discharge+0x918>)
 8005388:	4618      	mov	r0, r3
 800538a:	f7fb fe83 	bl	8001094 <__aeabi_fcmple>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d130      	bne.n	80053f6 <Batt_Protection_when_discharge+0x73e>
 8005394:	4b8f      	ldr	r3, [pc, #572]	; (80055d4 <Batt_Protection_when_discharge+0x91c>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4b8c      	ldr	r3, [pc, #560]	; (80055cc <Batt_Protection_when_discharge+0x914>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4619      	mov	r1, r3
 800539e:	4610      	mov	r0, r2
 80053a0:	f7fb fbc6 	bl	8000b30 <__aeabi_fsub>
 80053a4:	4603      	mov	r3, r0
 80053a6:	498a      	ldr	r1, [pc, #552]	; (80055d0 <Batt_Protection_when_discharge+0x918>)
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fb fe73 	bl	8001094 <__aeabi_fcmple>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d120      	bne.n	80053f6 <Batt_Protection_when_discharge+0x73e>
 80053b4:	4b88      	ldr	r3, [pc, #544]	; (80055d8 <Batt_Protection_when_discharge+0x920>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4b84      	ldr	r3, [pc, #528]	; (80055cc <Batt_Protection_when_discharge+0x914>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4619      	mov	r1, r3
 80053be:	4610      	mov	r0, r2
 80053c0:	f7fb fbb6 	bl	8000b30 <__aeabi_fsub>
 80053c4:	4603      	mov	r3, r0
 80053c6:	4982      	ldr	r1, [pc, #520]	; (80055d0 <Batt_Protection_when_discharge+0x918>)
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fb fe63 	bl	8001094 <__aeabi_fcmple>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d110      	bne.n	80053f6 <Batt_Protection_when_discharge+0x73e>
 80053d4:	4b81      	ldr	r3, [pc, #516]	; (80055dc <Batt_Protection_when_discharge+0x924>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	4b7c      	ldr	r3, [pc, #496]	; (80055cc <Batt_Protection_when_discharge+0x914>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f7fb fba6 	bl	8000b30 <__aeabi_fsub>
 80053e4:	4603      	mov	r3, r0
 80053e6:	497a      	ldr	r1, [pc, #488]	; (80055d0 <Batt_Protection_when_discharge+0x918>)
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fb fe53 	bl	8001094 <__aeabi_fcmple>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 8101 	beq.w	80055f8 <Batt_Protection_when_discharge+0x940>
 80053f6:	4b7a      	ldr	r3, [pc, #488]	; (80055e0 <Batt_Protection_when_discharge+0x928>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f040 80fc 	bne.w	80055f8 <Batt_Protection_when_discharge+0x940>
			  		  fault_code=4;
 8005400:	4b78      	ldr	r3, [pc, #480]	; (80055e4 <Batt_Protection_when_discharge+0x92c>)
 8005402:	2204      	movs	r2, #4
 8005404:	701a      	strb	r2, [r3, #0]
			  		  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8005406:	4b71      	ldr	r3, [pc, #452]	; (80055cc <Batt_Protection_when_discharge+0x914>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4971      	ldr	r1, [pc, #452]	; (80055d0 <Batt_Protection_when_discharge+0x918>)
 800540c:	4618      	mov	r0, r3
 800540e:	f7fb fb91 	bl	8000b34 <__addsf3>
 8005412:	4603      	mov	r3, r0
 8005414:	461a      	mov	r2, r3
 8005416:	4b6c      	ldr	r3, [pc, #432]	; (80055c8 <Batt_Protection_when_discharge+0x910>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4619      	mov	r1, r3
 800541c:	4610      	mov	r0, r2
 800541e:	f7fb fe43 	bl	80010a8 <__aeabi_fcmpge>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d028      	beq.n	800547a <Batt_Protection_when_discharge+0x7c2>
 8005428:	4b68      	ldr	r3, [pc, #416]	; (80055cc <Batt_Protection_when_discharge+0x914>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	496e      	ldr	r1, [pc, #440]	; (80055e8 <Batt_Protection_when_discharge+0x930>)
 800542e:	4618      	mov	r0, r3
 8005430:	f7fb fb80 	bl	8000b34 <__addsf3>
 8005434:	4603      	mov	r3, r0
 8005436:	461a      	mov	r2, r3
 8005438:	4b63      	ldr	r3, [pc, #396]	; (80055c8 <Batt_Protection_when_discharge+0x910>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4619      	mov	r1, r3
 800543e:	4610      	mov	r0, r2
 8005440:	f7fb fe1e 	bl	8001080 <__aeabi_fcmplt>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d017      	beq.n	800547a <Batt_Protection_when_discharge+0x7c2>
			  			  if((test_tim2%1000)==0)
 800544a:	4b68      	ldr	r3, [pc, #416]	; (80055ec <Batt_Protection_when_discharge+0x934>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b68      	ldr	r3, [pc, #416]	; (80055f0 <Batt_Protection_when_discharge+0x938>)
 8005450:	fb83 1302 	smull	r1, r3, r3, r2
 8005454:	1199      	asrs	r1, r3, #6
 8005456:	17d3      	asrs	r3, r2, #31
 8005458:	1acb      	subs	r3, r1, r3
 800545a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800545e:	fb01 f303 	mul.w	r3, r1, r3
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	f040 80ae 	bne.w	80055c6 <Batt_Protection_when_discharge+0x90e>
			  				  BUZZ_Toggle;
 800546a:	2104      	movs	r1, #4
 800546c:	4861      	ldr	r0, [pc, #388]	; (80055f4 <Batt_Protection_when_discharge+0x93c>)
 800546e:	f002 ff9e 	bl	80083ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005472:	4b5e      	ldr	r3, [pc, #376]	; (80055ec <Batt_Protection_when_discharge+0x934>)
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%1000)==0)
 8005478:	e0a5      	b.n	80055c6 <Batt_Protection_when_discharge+0x90e>
			  		  else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2)
 800547a:	4b54      	ldr	r3, [pc, #336]	; (80055cc <Batt_Protection_when_discharge+0x914>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	495a      	ldr	r1, [pc, #360]	; (80055e8 <Batt_Protection_when_discharge+0x930>)
 8005480:	4618      	mov	r0, r3
 8005482:	f7fb fb57 	bl	8000b34 <__addsf3>
 8005486:	4603      	mov	r3, r0
 8005488:	461a      	mov	r2, r3
 800548a:	4b4f      	ldr	r3, [pc, #316]	; (80055c8 <Batt_Protection_when_discharge+0x910>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f7fb fe09 	bl	80010a8 <__aeabi_fcmpge>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d028      	beq.n	80054ee <Batt_Protection_when_discharge+0x836>
 800549c:	4b4b      	ldr	r3, [pc, #300]	; (80055cc <Batt_Protection_when_discharge+0x914>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fb fb45 	bl	8000b34 <__addsf3>
 80054aa:	4603      	mov	r3, r0
 80054ac:	461a      	mov	r2, r3
 80054ae:	4b46      	ldr	r3, [pc, #280]	; (80055c8 <Batt_Protection_when_discharge+0x910>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4619      	mov	r1, r3
 80054b4:	4610      	mov	r0, r2
 80054b6:	f7fb fde3 	bl	8001080 <__aeabi_fcmplt>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d016      	beq.n	80054ee <Batt_Protection_when_discharge+0x836>
			  			  if((test_tim2%500)==0)
 80054c0:	4b4a      	ldr	r3, [pc, #296]	; (80055ec <Batt_Protection_when_discharge+0x934>)
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	4b4a      	ldr	r3, [pc, #296]	; (80055f0 <Batt_Protection_when_discharge+0x938>)
 80054c6:	fb83 1302 	smull	r1, r3, r3, r2
 80054ca:	1159      	asrs	r1, r3, #5
 80054cc:	17d3      	asrs	r3, r2, #31
 80054ce:	1acb      	subs	r3, r1, r3
 80054d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d173      	bne.n	80055c6 <Batt_Protection_when_discharge+0x90e>
			  				  BUZZ_Toggle;
 80054de:	2104      	movs	r1, #4
 80054e0:	4844      	ldr	r0, [pc, #272]	; (80055f4 <Batt_Protection_when_discharge+0x93c>)
 80054e2:	f002 ff64 	bl	80083ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 80054e6:	4b41      	ldr	r3, [pc, #260]	; (80055ec <Batt_Protection_when_discharge+0x934>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 80054ec:	e06b      	b.n	80055c6 <Batt_Protection_when_discharge+0x90e>
			  		  else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set)
 80054ee:	4b37      	ldr	r3, [pc, #220]	; (80055cc <Batt_Protection_when_discharge+0x914>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fb fb1c 	bl	8000b34 <__addsf3>
 80054fc:	4603      	mov	r3, r0
 80054fe:	461a      	mov	r2, r3
 8005500:	4b31      	ldr	r3, [pc, #196]	; (80055c8 <Batt_Protection_when_discharge+0x910>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4619      	mov	r1, r3
 8005506:	4610      	mov	r0, r2
 8005508:	f7fb fdd8 	bl	80010bc <__aeabi_fcmpgt>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d021      	beq.n	8005556 <Batt_Protection_when_discharge+0x89e>
 8005512:	4b2d      	ldr	r3, [pc, #180]	; (80055c8 <Batt_Protection_when_discharge+0x910>)
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	4b2d      	ldr	r3, [pc, #180]	; (80055cc <Batt_Protection_when_discharge+0x914>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4619      	mov	r1, r3
 800551c:	4610      	mov	r0, r2
 800551e:	f7fb fdc3 	bl	80010a8 <__aeabi_fcmpge>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d016      	beq.n	8005556 <Batt_Protection_when_discharge+0x89e>
			  			  if((test_tim2%500)==0)
 8005528:	4b30      	ldr	r3, [pc, #192]	; (80055ec <Batt_Protection_when_discharge+0x934>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4b30      	ldr	r3, [pc, #192]	; (80055f0 <Batt_Protection_when_discharge+0x938>)
 800552e:	fb83 1302 	smull	r1, r3, r3, r2
 8005532:	1159      	asrs	r1, r3, #5
 8005534:	17d3      	asrs	r3, r2, #31
 8005536:	1acb      	subs	r3, r1, r3
 8005538:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d13f      	bne.n	80055c6 <Batt_Protection_when_discharge+0x90e>
			  				  BUZZ_Toggle;
 8005546:	2104      	movs	r1, #4
 8005548:	482a      	ldr	r0, [pc, #168]	; (80055f4 <Batt_Protection_when_discharge+0x93c>)
 800554a:	f002 ff30 	bl	80083ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 800554e:	4b27      	ldr	r3, [pc, #156]	; (80055ec <Batt_Protection_when_discharge+0x934>)
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005554:	e037      	b.n	80055c6 <Batt_Protection_when_discharge+0x90e>
			  		  else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set)
 8005556:	4b1c      	ldr	r3, [pc, #112]	; (80055c8 <Batt_Protection_when_discharge+0x910>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4b1c      	ldr	r3, [pc, #112]	; (80055cc <Batt_Protection_when_discharge+0x914>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f7fb fd8d 	bl	8001080 <__aeabi_fcmplt>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d121      	bne.n	80055b0 <Batt_Protection_when_discharge+0x8f8>
 800556c:	4b19      	ldr	r3, [pc, #100]	; (80055d4 <Batt_Protection_when_discharge+0x91c>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4b16      	ldr	r3, [pc, #88]	; (80055cc <Batt_Protection_when_discharge+0x914>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f7fb fd82 	bl	8001080 <__aeabi_fcmplt>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d116      	bne.n	80055b0 <Batt_Protection_when_discharge+0x8f8>
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <Batt_Protection_when_discharge+0x920>)
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	4b11      	ldr	r3, [pc, #68]	; (80055cc <Batt_Protection_when_discharge+0x914>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4619      	mov	r1, r3
 800558c:	4610      	mov	r0, r2
 800558e:	f7fb fd77 	bl	8001080 <__aeabi_fcmplt>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10b      	bne.n	80055b0 <Batt_Protection_when_discharge+0x8f8>
 8005598:	4b10      	ldr	r3, [pc, #64]	; (80055dc <Batt_Protection_when_discharge+0x924>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <Batt_Protection_when_discharge+0x914>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f7fb fd6c 	bl	8001080 <__aeabi_fcmplt>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d100      	bne.n	80055b0 <Batt_Protection_when_discharge+0x8f8>
			  		  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 80055ae:	e19c      	b.n	80058ea <Batt_Protection_when_discharge+0xc32>
			  			  Batt_Open_Mode();
 80055b0:	f7fb fef4 	bl	800139c <Batt_Open_Mode>
			  			  flag_trip_undertemperature=ON;
 80055b4:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <Batt_Protection_when_discharge+0x928>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	701a      	strb	r2, [r3, #0]
			  			  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80055ba:	2200      	movs	r2, #0
 80055bc:	2104      	movs	r1, #4
 80055be:	480d      	ldr	r0, [pc, #52]	; (80055f4 <Batt_Protection_when_discharge+0x93c>)
 80055c0:	f002 fedd 	bl	800837e <HAL_GPIO_WritePin>
			  		  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 80055c4:	e191      	b.n	80058ea <Batt_Protection_when_discharge+0xc32>
 80055c6:	e190      	b.n	80058ea <Batt_Protection_when_discharge+0xc32>
 80055c8:	20001070 	.word	0x20001070
 80055cc:	20000068 	.word	0x20000068
 80055d0:	41200000 	.word	0x41200000
 80055d4:	200014a4 	.word	0x200014a4
 80055d8:	2000104c 	.word	0x2000104c
 80055dc:	2000109c 	.word	0x2000109c
 80055e0:	20001064 	.word	0x20001064
 80055e4:	2000106c 	.word	0x2000106c
 80055e8:	40a00000 	.word	0x40a00000
 80055ec:	20000b90 	.word	0x20000b90
 80055f0:	10624dd3 	.word	0x10624dd3
 80055f4:	40011000 	.word	0x40011000
			  	  else if(Pack_SOC-SOC_Under_Set<=10 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE)
 80055f8:	4b81      	ldr	r3, [pc, #516]	; (8005800 <Batt_Protection_when_discharge+0xb48>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4b81      	ldr	r3, [pc, #516]	; (8005804 <Batt_Protection_when_discharge+0xb4c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4619      	mov	r1, r3
 8005602:	4610      	mov	r0, r2
 8005604:	f7fb fa94 	bl	8000b30 <__aeabi_fsub>
 8005608:	4603      	mov	r3, r0
 800560a:	497f      	ldr	r1, [pc, #508]	; (8005808 <Batt_Protection_when_discharge+0xb50>)
 800560c:	4618      	mov	r0, r3
 800560e:	f7fb fd41 	bl	8001094 <__aeabi_fcmple>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 80cd 	beq.w	80057b4 <Batt_Protection_when_discharge+0xafc>
 800561a:	4b7c      	ldr	r3, [pc, #496]	; (800580c <Batt_Protection_when_discharge+0xb54>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	f040 80c8 	bne.w	80057b4 <Batt_Protection_when_discharge+0xafc>
 8005624:	4b7a      	ldr	r3, [pc, #488]	; (8005810 <Batt_Protection_when_discharge+0xb58>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b02      	cmp	r3, #2
 800562a:	f040 80c3 	bne.w	80057b4 <Batt_Protection_when_discharge+0xafc>
			  		  fault_code=5;
 800562e:	4b79      	ldr	r3, [pc, #484]	; (8005814 <Batt_Protection_when_discharge+0xb5c>)
 8005630:	2205      	movs	r2, #5
 8005632:	701a      	strb	r2, [r3, #0]
			  		  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 8005634:	4b73      	ldr	r3, [pc, #460]	; (8005804 <Batt_Protection_when_discharge+0xb4c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4973      	ldr	r1, [pc, #460]	; (8005808 <Batt_Protection_when_discharge+0xb50>)
 800563a:	4618      	mov	r0, r3
 800563c:	f7fb fa7a 	bl	8000b34 <__addsf3>
 8005640:	4603      	mov	r3, r0
 8005642:	461a      	mov	r2, r3
 8005644:	4b6e      	ldr	r3, [pc, #440]	; (8005800 <Batt_Protection_when_discharge+0xb48>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f7fb fd2c 	bl	80010a8 <__aeabi_fcmpge>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d028      	beq.n	80056a8 <Batt_Protection_when_discharge+0x9f0>
 8005656:	4b6b      	ldr	r3, [pc, #428]	; (8005804 <Batt_Protection_when_discharge+0xb4c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	496f      	ldr	r1, [pc, #444]	; (8005818 <Batt_Protection_when_discharge+0xb60>)
 800565c:	4618      	mov	r0, r3
 800565e:	f7fb fa69 	bl	8000b34 <__addsf3>
 8005662:	4603      	mov	r3, r0
 8005664:	461a      	mov	r2, r3
 8005666:	4b66      	ldr	r3, [pc, #408]	; (8005800 <Batt_Protection_when_discharge+0xb48>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4619      	mov	r1, r3
 800566c:	4610      	mov	r0, r2
 800566e:	f7fb fd07 	bl	8001080 <__aeabi_fcmplt>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d017      	beq.n	80056a8 <Batt_Protection_when_discharge+0x9f0>
			  			  if((test_tim2%1000)==0)
 8005678:	4b68      	ldr	r3, [pc, #416]	; (800581c <Batt_Protection_when_discharge+0xb64>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	4b68      	ldr	r3, [pc, #416]	; (8005820 <Batt_Protection_when_discharge+0xb68>)
 800567e:	fb83 1302 	smull	r1, r3, r3, r2
 8005682:	1199      	asrs	r1, r3, #6
 8005684:	17d3      	asrs	r3, r2, #31
 8005686:	1acb      	subs	r3, r1, r3
 8005688:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800568c:	fb01 f303 	mul.w	r3, r1, r3
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	f040 808d 	bne.w	80057b2 <Batt_Protection_when_discharge+0xafa>
			  				  BUZZ_Toggle;
 8005698:	2104      	movs	r1, #4
 800569a:	4862      	ldr	r0, [pc, #392]	; (8005824 <Batt_Protection_when_discharge+0xb6c>)
 800569c:	f002 fe87 	bl	80083ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 80056a0:	4b5e      	ldr	r3, [pc, #376]	; (800581c <Batt_Protection_when_discharge+0xb64>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%1000)==0)
 80056a6:	e084      	b.n	80057b2 <Batt_Protection_when_discharge+0xafa>
			  		  else if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+2)
 80056a8:	4b56      	ldr	r3, [pc, #344]	; (8005804 <Batt_Protection_when_discharge+0xb4c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	495a      	ldr	r1, [pc, #360]	; (8005818 <Batt_Protection_when_discharge+0xb60>)
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fb fa40 	bl	8000b34 <__addsf3>
 80056b4:	4603      	mov	r3, r0
 80056b6:	461a      	mov	r2, r3
 80056b8:	4b51      	ldr	r3, [pc, #324]	; (8005800 <Batt_Protection_when_discharge+0xb48>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4619      	mov	r1, r3
 80056be:	4610      	mov	r0, r2
 80056c0:	f7fb fcf2 	bl	80010a8 <__aeabi_fcmpge>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d028      	beq.n	800571c <Batt_Protection_when_discharge+0xa64>
 80056ca:	4b4e      	ldr	r3, [pc, #312]	; (8005804 <Batt_Protection_when_discharge+0xb4c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fb fa2e 	bl	8000b34 <__addsf3>
 80056d8:	4603      	mov	r3, r0
 80056da:	461a      	mov	r2, r3
 80056dc:	4b48      	ldr	r3, [pc, #288]	; (8005800 <Batt_Protection_when_discharge+0xb48>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4619      	mov	r1, r3
 80056e2:	4610      	mov	r0, r2
 80056e4:	f7fb fccc 	bl	8001080 <__aeabi_fcmplt>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d016      	beq.n	800571c <Batt_Protection_when_discharge+0xa64>
			  			  if((test_tim2%500)==0)
 80056ee:	4b4b      	ldr	r3, [pc, #300]	; (800581c <Batt_Protection_when_discharge+0xb64>)
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	4b4b      	ldr	r3, [pc, #300]	; (8005820 <Batt_Protection_when_discharge+0xb68>)
 80056f4:	fb83 1302 	smull	r1, r3, r3, r2
 80056f8:	1159      	asrs	r1, r3, #5
 80056fa:	17d3      	asrs	r3, r2, #31
 80056fc:	1acb      	subs	r3, r1, r3
 80056fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005702:	fb01 f303 	mul.w	r3, r1, r3
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d152      	bne.n	80057b2 <Batt_Protection_when_discharge+0xafa>
			  				  BUZZ_Toggle;
 800570c:	2104      	movs	r1, #4
 800570e:	4845      	ldr	r0, [pc, #276]	; (8005824 <Batt_Protection_when_discharge+0xb6c>)
 8005710:	f002 fe4d 	bl	80083ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005714:	4b41      	ldr	r3, [pc, #260]	; (800581c <Batt_Protection_when_discharge+0xb64>)
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 800571a:	e04a      	b.n	80057b2 <Batt_Protection_when_discharge+0xafa>
			  		  else if(Pack_SOC<SOC_Under_Set+2 && Pack_SOC>=SOC_Under_Set)
 800571c:	4b39      	ldr	r3, [pc, #228]	; (8005804 <Batt_Protection_when_discharge+0xb4c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005724:	4618      	mov	r0, r3
 8005726:	f7fb fa05 	bl	8000b34 <__addsf3>
 800572a:	4603      	mov	r3, r0
 800572c:	461a      	mov	r2, r3
 800572e:	4b34      	ldr	r3, [pc, #208]	; (8005800 <Batt_Protection_when_discharge+0xb48>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f7fb fcc1 	bl	80010bc <__aeabi_fcmpgt>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d021      	beq.n	8005784 <Batt_Protection_when_discharge+0xacc>
 8005740:	4b2f      	ldr	r3, [pc, #188]	; (8005800 <Batt_Protection_when_discharge+0xb48>)
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	4b2f      	ldr	r3, [pc, #188]	; (8005804 <Batt_Protection_when_discharge+0xb4c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4619      	mov	r1, r3
 800574a:	4610      	mov	r0, r2
 800574c:	f7fb fcac 	bl	80010a8 <__aeabi_fcmpge>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d016      	beq.n	8005784 <Batt_Protection_when_discharge+0xacc>
			  			  if((test_tim2%500)==0)
 8005756:	4b31      	ldr	r3, [pc, #196]	; (800581c <Batt_Protection_when_discharge+0xb64>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4b31      	ldr	r3, [pc, #196]	; (8005820 <Batt_Protection_when_discharge+0xb68>)
 800575c:	fb83 1302 	smull	r1, r3, r3, r2
 8005760:	1159      	asrs	r1, r3, #5
 8005762:	17d3      	asrs	r3, r2, #31
 8005764:	1acb      	subs	r3, r1, r3
 8005766:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800576a:	fb01 f303 	mul.w	r3, r1, r3
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d11e      	bne.n	80057b2 <Batt_Protection_when_discharge+0xafa>
			  				  BUZZ_Toggle;
 8005774:	2104      	movs	r1, #4
 8005776:	482b      	ldr	r0, [pc, #172]	; (8005824 <Batt_Protection_when_discharge+0xb6c>)
 8005778:	f002 fe19 	bl	80083ae <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 800577c:	4b27      	ldr	r3, [pc, #156]	; (800581c <Batt_Protection_when_discharge+0xb64>)
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005782:	e016      	b.n	80057b2 <Batt_Protection_when_discharge+0xafa>
			  		  else if(Pack_SOC<SOC_Under_Set)
 8005784:	4b1e      	ldr	r3, [pc, #120]	; (8005800 <Batt_Protection_when_discharge+0xb48>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	4b1e      	ldr	r3, [pc, #120]	; (8005804 <Batt_Protection_when_discharge+0xb4c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f7fb fc76 	bl	8001080 <__aeabi_fcmplt>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d100      	bne.n	800579c <Batt_Protection_when_discharge+0xae4>
			  		  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 800579a:	e0a6      	b.n	80058ea <Batt_Protection_when_discharge+0xc32>
			  			  Batt_Open_Mode();
 800579c:	f7fb fdfe 	bl	800139c <Batt_Open_Mode>
			  			  flag_trip_SOCOverDischarge=ON;
 80057a0:	4b1a      	ldr	r3, [pc, #104]	; (800580c <Batt_Protection_when_discharge+0xb54>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	701a      	strb	r2, [r3, #0]
			  			  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80057a6:	2200      	movs	r2, #0
 80057a8:	2104      	movs	r1, #4
 80057aa:	481e      	ldr	r0, [pc, #120]	; (8005824 <Batt_Protection_when_discharge+0xb6c>)
 80057ac:	f002 fde7 	bl	800837e <HAL_GPIO_WritePin>
			  		  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 80057b0:	e09b      	b.n	80058ea <Batt_Protection_when_discharge+0xc32>
 80057b2:	e09a      	b.n	80058ea <Batt_Protection_when_discharge+0xc32>
			  	  else if(Persen_Imbalance_Set-persen_imbalance<10)
 80057b4:	4b1c      	ldr	r3, [pc, #112]	; (8005828 <Batt_Protection_when_discharge+0xb70>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	4b1c      	ldr	r3, [pc, #112]	; (800582c <Batt_Protection_when_discharge+0xb74>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4619      	mov	r1, r3
 80057be:	4610      	mov	r0, r2
 80057c0:	f7fb f9b6 	bl	8000b30 <__aeabi_fsub>
 80057c4:	4603      	mov	r3, r0
 80057c6:	4910      	ldr	r1, [pc, #64]	; (8005808 <Batt_Protection_when_discharge+0xb50>)
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fb fc59 	bl	8001080 <__aeabi_fcmplt>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d02f      	beq.n	8005834 <Batt_Protection_when_discharge+0xb7c>
			  		  fault_code=9;
 80057d4:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <Batt_Protection_when_discharge+0xb5c>)
 80057d6:	2209      	movs	r2, #9
 80057d8:	701a      	strb	r2, [r3, #0]
			  		  if(persen_imbalance>Persen_Imbalance_Set)
 80057da:	4b14      	ldr	r3, [pc, #80]	; (800582c <Batt_Protection_when_discharge+0xb74>)
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	4b12      	ldr	r3, [pc, #72]	; (8005828 <Batt_Protection_when_discharge+0xb70>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4619      	mov	r1, r3
 80057e4:	4610      	mov	r0, r2
 80057e6:	f7fb fc69 	bl	80010bc <__aeabi_fcmpgt>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d100      	bne.n	80057f2 <Batt_Protection_when_discharge+0xb3a>
}
 80057f0:	e07b      	b.n	80058ea <Batt_Protection_when_discharge+0xc32>
			  			flag_trip_unbalance=ON;
 80057f2:	4b0f      	ldr	r3, [pc, #60]	; (8005830 <Batt_Protection_when_discharge+0xb78>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	701a      	strb	r2, [r3, #0]
			  			Batt_Open_Mode();
 80057f8:	f7fb fdd0 	bl	800139c <Batt_Open_Mode>
}
 80057fc:	e075      	b.n	80058ea <Batt_Protection_when_discharge+0xc32>
 80057fe:	bf00      	nop
 8005800:	20000b98 	.word	0x20000b98
 8005804:	2000006c 	.word	0x2000006c
 8005808:	41200000 	.word	0x41200000
 800580c:	20001090 	.word	0x20001090
 8005810:	20000966 	.word	0x20000966
 8005814:	2000106c 	.word	0x2000106c
 8005818:	40a00000 	.word	0x40a00000
 800581c:	20000b90 	.word	0x20000b90
 8005820:	10624dd3 	.word	0x10624dd3
 8005824:	40011000 	.word	0x40011000
 8005828:	2000007c 	.word	0x2000007c
 800582c:	20000b6c 	.word	0x20000b6c
 8005830:	20000c3c 	.word	0x20000c3c
			  		  if(fault_code!=0) last_fault_code=fault_code;
 8005834:	4b30      	ldr	r3, [pc, #192]	; (80058f8 <Batt_Protection_when_discharge+0xc40>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <Batt_Protection_when_discharge+0xb8c>
 800583c:	4b2e      	ldr	r3, [pc, #184]	; (80058f8 <Batt_Protection_when_discharge+0xc40>)
 800583e:	781a      	ldrb	r2, [r3, #0]
 8005840:	4b2e      	ldr	r3, [pc, #184]	; (80058fc <Batt_Protection_when_discharge+0xc44>)
 8005842:	701a      	strb	r2, [r3, #0]
			  		  fault_code=0;
 8005844:	4b2c      	ldr	r3, [pc, #176]	; (80058f8 <Batt_Protection_when_discharge+0xc40>)
 8005846:	2200      	movs	r2, #0
 8005848:	701a      	strb	r2, [r3, #0]
			  		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 800584a:	2200      	movs	r2, #0
 800584c:	2104      	movs	r1, #4
 800584e:	482c      	ldr	r0, [pc, #176]	; (8005900 <Batt_Protection_when_discharge+0xc48>)
 8005850:	f002 fd95 	bl	800837e <HAL_GPIO_WritePin>
			  		  T_Under_trip=0;
 8005854:	4b2b      	ldr	r3, [pc, #172]	; (8005904 <Batt_Protection_when_discharge+0xc4c>)
 8005856:	f04f 0200 	mov.w	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
			  		  T_trip_cycle=T_trip_cycle-0.001;
 800585c:	4b2a      	ldr	r3, [pc, #168]	; (8005908 <Batt_Protection_when_discharge+0xc50>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f7fa fde1 	bl	8000428 <__aeabi_f2d>
 8005866:	a322      	add	r3, pc, #136	; (adr r3, 80058f0 <Batt_Protection_when_discharge+0xc38>)
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	f7fa fc7c 	bl	8000168 <__aeabi_dsub>
 8005870:	4603      	mov	r3, r0
 8005872:	460c      	mov	r4, r1
 8005874:	4618      	mov	r0, r3
 8005876:	4621      	mov	r1, r4
 8005878:	f7fb f906 	bl	8000a88 <__aeabi_d2f>
 800587c:	4602      	mov	r2, r0
 800587e:	4b22      	ldr	r3, [pc, #136]	; (8005908 <Batt_Protection_when_discharge+0xc50>)
 8005880:	601a      	str	r2, [r3, #0]
			  		  T_I_Over_trip_cycle-=0.001;
 8005882:	4b22      	ldr	r3, [pc, #136]	; (800590c <Batt_Protection_when_discharge+0xc54>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f7fa fdce 	bl	8000428 <__aeabi_f2d>
 800588c:	a318      	add	r3, pc, #96	; (adr r3, 80058f0 <Batt_Protection_when_discharge+0xc38>)
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	f7fa fc69 	bl	8000168 <__aeabi_dsub>
 8005896:	4603      	mov	r3, r0
 8005898:	460c      	mov	r4, r1
 800589a:	4618      	mov	r0, r3
 800589c:	4621      	mov	r1, r4
 800589e:	f7fb f8f3 	bl	8000a88 <__aeabi_d2f>
 80058a2:	4602      	mov	r2, r0
 80058a4:	4b19      	ldr	r3, [pc, #100]	; (800590c <Batt_Protection_when_discharge+0xc54>)
 80058a6:	601a      	str	r2, [r3, #0]
			  		  if(T_trip_cycle<0) T_trip_cycle=0;
 80058a8:	4b17      	ldr	r3, [pc, #92]	; (8005908 <Batt_Protection_when_discharge+0xc50>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f04f 0100 	mov.w	r1, #0
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fb fbe5 	bl	8001080 <__aeabi_fcmplt>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <Batt_Protection_when_discharge+0xc0c>
 80058bc:	4b12      	ldr	r3, [pc, #72]	; (8005908 <Batt_Protection_when_discharge+0xc50>)
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
			  		if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 80058c4:	4b11      	ldr	r3, [pc, #68]	; (800590c <Batt_Protection_when_discharge+0xc54>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f04f 0100 	mov.w	r1, #0
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fb fbd7 	bl	8001080 <__aeabi_fcmplt>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d100      	bne.n	80058da <Batt_Protection_when_discharge+0xc22>
}
 80058d8:	e007      	b.n	80058ea <Batt_Protection_when_discharge+0xc32>
			  		if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 80058da:	4b0c      	ldr	r3, [pc, #48]	; (800590c <Batt_Protection_when_discharge+0xc54>)
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
}
 80058e2:	e002      	b.n	80058ea <Batt_Protection_when_discharge+0xc32>
			  		if(flag_trip_undervoltage==OFF)
 80058e4:	bf00      	nop
 80058e6:	e000      	b.n	80058ea <Batt_Protection_when_discharge+0xc32>
			  		if(flag_trip_overcurrentdischarge==OFF)
 80058e8:	bf00      	nop
}
 80058ea:	bf00      	nop
 80058ec:	bdb0      	pop	{r4, r5, r7, pc}
 80058ee:	bf00      	nop
 80058f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80058f4:	3f50624d 	.word	0x3f50624d
 80058f8:	2000106c 	.word	0x2000106c
 80058fc:	200014a0 	.word	0x200014a0
 8005900:	40011000 	.word	0x40011000
 8005904:	20001034 	.word	0x20001034
 8005908:	20001078 	.word	0x20001078
 800590c:	200010a0 	.word	0x200010a0

08005910 <Batt_Protection_when_charge>:



void Batt_Protection_when_charge(void)
{
 8005910:	b5b0      	push	{r4, r5, r7, lr}
 8005912:	af00      	add	r7, sp, #0
					///////////////////// Short Circuit //////////////////////////////////////
					if(fabs(IBATT)>VBATT)
 8005914:	4b9d      	ldr	r3, [pc, #628]	; (8005b8c <Batt_Protection_when_charge+0x27c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800591c:	4b9c      	ldr	r3, [pc, #624]	; (8005b90 <Batt_Protection_when_charge+0x280>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f7fb fbca 	bl	80010bc <__aeabi_fcmpgt>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00d      	beq.n	800594a <Batt_Protection_when_charge+0x3a>
				  	{
				  		fault_code=12;
 800592e:	4b99      	ldr	r3, [pc, #612]	; (8005b94 <Batt_Protection_when_charge+0x284>)
 8005930:	220c      	movs	r2, #12
 8005932:	701a      	strb	r2, [r3, #0]
				  		Batt_Open_Mode();
 8005934:	f7fb fd32 	bl	800139c <Batt_Open_Mode>
				  		flag_trip_shortcircuit=ON;
 8005938:	4b97      	ldr	r3, [pc, #604]	; (8005b98 <Batt_Protection_when_charge+0x288>)
 800593a:	2201      	movs	r2, #1
 800593c:	701a      	strb	r2, [r3, #0]
				  		HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 800593e:	2200      	movs	r2, #0
 8005940:	2104      	movs	r1, #4
 8005942:	4896      	ldr	r0, [pc, #600]	; (8005b9c <Batt_Protection_when_charge+0x28c>)
 8005944:	f002 fd1b 	bl	800837e <HAL_GPIO_WritePin>
				    	  T_trip_cycle=T_trip_cycle-0.001;
				    	  T_I_Over_trip_cycle-=0.001;
				    	  if(T_trip_cycle<0) T_trip_cycle=0;
				    	  if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
				     }
}
 8005948:	e3a4      	b.n	8006094 <Batt_Protection_when_charge+0x784>
					else if(SOC_Over_Set-Pack_SOC<=10 && flag_trip_SOCOverCharge==OFF)
 800594a:	4b95      	ldr	r3, [pc, #596]	; (8005ba0 <Batt_Protection_when_charge+0x290>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b95      	ldr	r3, [pc, #596]	; (8005ba4 <Batt_Protection_when_charge+0x294>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4619      	mov	r1, r3
 8005954:	4610      	mov	r0, r2
 8005956:	f7fb f8eb 	bl	8000b30 <__aeabi_fsub>
 800595a:	4603      	mov	r3, r0
 800595c:	4992      	ldr	r1, [pc, #584]	; (8005ba8 <Batt_Protection_when_charge+0x298>)
 800595e:	4618      	mov	r0, r3
 8005960:	f7fb fb98 	bl	8001094 <__aeabi_fcmple>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01d      	beq.n	80059a6 <Batt_Protection_when_charge+0x96>
 800596a:	4b90      	ldr	r3, [pc, #576]	; (8005bac <Batt_Protection_when_charge+0x29c>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d119      	bne.n	80059a6 <Batt_Protection_when_charge+0x96>
			  		  fault_code=6;
 8005972:	4b88      	ldr	r3, [pc, #544]	; (8005b94 <Batt_Protection_when_charge+0x284>)
 8005974:	2206      	movs	r2, #6
 8005976:	701a      	strb	r2, [r3, #0]
			  		  if(Pack_SOC>SOC_Over_Set)
 8005978:	4b8a      	ldr	r3, [pc, #552]	; (8005ba4 <Batt_Protection_when_charge+0x294>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	4b88      	ldr	r3, [pc, #544]	; (8005ba0 <Batt_Protection_when_charge+0x290>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4619      	mov	r1, r3
 8005982:	4610      	mov	r0, r2
 8005984:	f7fb fb9a 	bl	80010bc <__aeabi_fcmpgt>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 8382 	beq.w	8006094 <Batt_Protection_when_charge+0x784>
			  				  Batt_Open_Mode();
 8005990:	f7fb fd04 	bl	800139c <Batt_Open_Mode>
			  				  flag_trip_SOCOverCharge=ON;
 8005994:	4b85      	ldr	r3, [pc, #532]	; (8005bac <Batt_Protection_when_charge+0x29c>)
 8005996:	2201      	movs	r2, #1
 8005998:	701a      	strb	r2, [r3, #0]
			  				  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 800599a:	2200      	movs	r2, #0
 800599c:	2104      	movs	r1, #4
 800599e:	487f      	ldr	r0, [pc, #508]	; (8005b9c <Batt_Protection_when_charge+0x28c>)
 80059a0:	f002 fced 	bl	800837e <HAL_GPIO_WritePin>
			  		  if(Pack_SOC>SOC_Over_Set)
 80059a4:	e376      	b.n	8006094 <Batt_Protection_when_charge+0x784>
			  		else if(((45-Suhu_T1<5)||(75-Suhu_T2<10)||(45-Suhu_T3<5)||(75-Suhu_T4<10)) && (flag_trip_overtemperature==OFF)) // Warning Over Temperature Charge 40 65 40 65
 80059a6:	4b82      	ldr	r3, [pc, #520]	; (8005bb0 <Batt_Protection_when_charge+0x2a0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4619      	mov	r1, r3
 80059ac:	4881      	ldr	r0, [pc, #516]	; (8005bb4 <Batt_Protection_when_charge+0x2a4>)
 80059ae:	f7fb f8bf 	bl	8000b30 <__aeabi_fsub>
 80059b2:	4603      	mov	r3, r0
 80059b4:	4980      	ldr	r1, [pc, #512]	; (8005bb8 <Batt_Protection_when_charge+0x2a8>)
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fb fb62 	bl	8001080 <__aeabi_fcmplt>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d129      	bne.n	8005a16 <Batt_Protection_when_charge+0x106>
 80059c2:	4b7e      	ldr	r3, [pc, #504]	; (8005bbc <Batt_Protection_when_charge+0x2ac>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4619      	mov	r1, r3
 80059c8:	487d      	ldr	r0, [pc, #500]	; (8005bc0 <Batt_Protection_when_charge+0x2b0>)
 80059ca:	f7fb f8b1 	bl	8000b30 <__aeabi_fsub>
 80059ce:	4603      	mov	r3, r0
 80059d0:	4975      	ldr	r1, [pc, #468]	; (8005ba8 <Batt_Protection_when_charge+0x298>)
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fb fb54 	bl	8001080 <__aeabi_fcmplt>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d11b      	bne.n	8005a16 <Batt_Protection_when_charge+0x106>
 80059de:	4b79      	ldr	r3, [pc, #484]	; (8005bc4 <Batt_Protection_when_charge+0x2b4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4619      	mov	r1, r3
 80059e4:	4873      	ldr	r0, [pc, #460]	; (8005bb4 <Batt_Protection_when_charge+0x2a4>)
 80059e6:	f7fb f8a3 	bl	8000b30 <__aeabi_fsub>
 80059ea:	4603      	mov	r3, r0
 80059ec:	4972      	ldr	r1, [pc, #456]	; (8005bb8 <Batt_Protection_when_charge+0x2a8>)
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fb fb46 	bl	8001080 <__aeabi_fcmplt>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10d      	bne.n	8005a16 <Batt_Protection_when_charge+0x106>
 80059fa:	4b73      	ldr	r3, [pc, #460]	; (8005bc8 <Batt_Protection_when_charge+0x2b8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4619      	mov	r1, r3
 8005a00:	486f      	ldr	r0, [pc, #444]	; (8005bc0 <Batt_Protection_when_charge+0x2b0>)
 8005a02:	f7fb f895 	bl	8000b30 <__aeabi_fsub>
 8005a06:	4603      	mov	r3, r0
 8005a08:	4967      	ldr	r1, [pc, #412]	; (8005ba8 <Batt_Protection_when_charge+0x298>)
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fb fb38 	bl	8001080 <__aeabi_fcmplt>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d036      	beq.n	8005a84 <Batt_Protection_when_charge+0x174>
 8005a16:	4b6d      	ldr	r3, [pc, #436]	; (8005bcc <Batt_Protection_when_charge+0x2bc>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d132      	bne.n	8005a84 <Batt_Protection_when_charge+0x174>
			  			  fault_code=7;
 8005a1e:	4b5d      	ldr	r3, [pc, #372]	; (8005b94 <Batt_Protection_when_charge+0x284>)
 8005a20:	2207      	movs	r2, #7
 8005a22:	701a      	strb	r2, [r3, #0]
			  			  if((Suhu_T1>45)||(Suhu_T2>75)||(Suhu_T3>45)||(Suhu_T4>75))
 8005a24:	4b62      	ldr	r3, [pc, #392]	; (8005bb0 <Batt_Protection_when_charge+0x2a0>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4962      	ldr	r1, [pc, #392]	; (8005bb4 <Batt_Protection_when_charge+0x2a4>)
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fb fb46 	bl	80010bc <__aeabi_fcmpgt>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d11b      	bne.n	8005a6e <Batt_Protection_when_charge+0x15e>
 8005a36:	4b61      	ldr	r3, [pc, #388]	; (8005bbc <Batt_Protection_when_charge+0x2ac>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4961      	ldr	r1, [pc, #388]	; (8005bc0 <Batt_Protection_when_charge+0x2b0>)
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fb fb3d 	bl	80010bc <__aeabi_fcmpgt>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d112      	bne.n	8005a6e <Batt_Protection_when_charge+0x15e>
 8005a48:	4b5e      	ldr	r3, [pc, #376]	; (8005bc4 <Batt_Protection_when_charge+0x2b4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4959      	ldr	r1, [pc, #356]	; (8005bb4 <Batt_Protection_when_charge+0x2a4>)
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fb fb34 	bl	80010bc <__aeabi_fcmpgt>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d109      	bne.n	8005a6e <Batt_Protection_when_charge+0x15e>
 8005a5a:	4b5b      	ldr	r3, [pc, #364]	; (8005bc8 <Batt_Protection_when_charge+0x2b8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4958      	ldr	r1, [pc, #352]	; (8005bc0 <Batt_Protection_when_charge+0x2b0>)
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fb fb2b 	bl	80010bc <__aeabi_fcmpgt>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d100      	bne.n	8005a6e <Batt_Protection_when_charge+0x15e>
 8005a6c:	e312      	b.n	8006094 <Batt_Protection_when_charge+0x784>
			  				  	  Batt_Open_Mode();
 8005a6e:	f7fb fc95 	bl	800139c <Batt_Open_Mode>
			  				  	  flag_trip_overtemperature=ON;
 8005a72:	4b56      	ldr	r3, [pc, #344]	; (8005bcc <Batt_Protection_when_charge+0x2bc>)
 8005a74:	2201      	movs	r2, #1
 8005a76:	701a      	strb	r2, [r3, #0]
			  				  	  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2104      	movs	r1, #4
 8005a7c:	4847      	ldr	r0, [pc, #284]	; (8005b9c <Batt_Protection_when_charge+0x28c>)
 8005a7e:	f002 fc7e 	bl	800837e <HAL_GPIO_WritePin>
			  			  if((Suhu_T1>45)||(Suhu_T2>75)||(Suhu_T3>45)||(Suhu_T4>75))
 8005a82:	e307      	b.n	8006094 <Batt_Protection_when_charge+0x784>
			  		else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF)
 8005a84:	4b4a      	ldr	r3, [pc, #296]	; (8005bb0 <Batt_Protection_when_charge+0x2a0>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	4b51      	ldr	r3, [pc, #324]	; (8005bd0 <Batt_Protection_when_charge+0x2c0>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	f7fb f84e 	bl	8000b30 <__aeabi_fsub>
 8005a94:	4603      	mov	r3, r0
 8005a96:	4944      	ldr	r1, [pc, #272]	; (8005ba8 <Batt_Protection_when_charge+0x298>)
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fb fafb 	bl	8001094 <__aeabi_fcmple>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d130      	bne.n	8005b06 <Batt_Protection_when_charge+0x1f6>
 8005aa4:	4b45      	ldr	r3, [pc, #276]	; (8005bbc <Batt_Protection_when_charge+0x2ac>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	4b49      	ldr	r3, [pc, #292]	; (8005bd0 <Batt_Protection_when_charge+0x2c0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4619      	mov	r1, r3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	f7fb f83e 	bl	8000b30 <__aeabi_fsub>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	493c      	ldr	r1, [pc, #240]	; (8005ba8 <Batt_Protection_when_charge+0x298>)
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fb faeb 	bl	8001094 <__aeabi_fcmple>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d120      	bne.n	8005b06 <Batt_Protection_when_charge+0x1f6>
 8005ac4:	4b3f      	ldr	r3, [pc, #252]	; (8005bc4 <Batt_Protection_when_charge+0x2b4>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	4b41      	ldr	r3, [pc, #260]	; (8005bd0 <Batt_Protection_when_charge+0x2c0>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f7fb f82e 	bl	8000b30 <__aeabi_fsub>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	4934      	ldr	r1, [pc, #208]	; (8005ba8 <Batt_Protection_when_charge+0x298>)
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fb fadb 	bl	8001094 <__aeabi_fcmple>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d110      	bne.n	8005b06 <Batt_Protection_when_charge+0x1f6>
 8005ae4:	4b38      	ldr	r3, [pc, #224]	; (8005bc8 <Batt_Protection_when_charge+0x2b8>)
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	4b39      	ldr	r3, [pc, #228]	; (8005bd0 <Batt_Protection_when_charge+0x2c0>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f7fb f81e 	bl	8000b30 <__aeabi_fsub>
 8005af4:	4603      	mov	r3, r0
 8005af6:	492c      	ldr	r1, [pc, #176]	; (8005ba8 <Batt_Protection_when_charge+0x298>)
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fb facb 	bl	8001094 <__aeabi_fcmple>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8129 	beq.w	8005d58 <Batt_Protection_when_charge+0x448>
 8005b06:	4b33      	ldr	r3, [pc, #204]	; (8005bd4 <Batt_Protection_when_charge+0x2c4>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f040 8124 	bne.w	8005d58 <Batt_Protection_when_charge+0x448>
			  			  fault_code=8;
 8005b10:	4b20      	ldr	r3, [pc, #128]	; (8005b94 <Batt_Protection_when_charge+0x284>)
 8005b12:	2208      	movs	r2, #8
 8005b14:	701a      	strb	r2, [r3, #0]
			  			  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8005b16:	4b2e      	ldr	r3, [pc, #184]	; (8005bd0 <Batt_Protection_when_charge+0x2c0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4923      	ldr	r1, [pc, #140]	; (8005ba8 <Batt_Protection_when_charge+0x298>)
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fb f809 	bl	8000b34 <__addsf3>
 8005b22:	4603      	mov	r3, r0
 8005b24:	461a      	mov	r2, r3
 8005b26:	4b22      	ldr	r3, [pc, #136]	; (8005bb0 <Batt_Protection_when_charge+0x2a0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	f7fb fabb 	bl	80010a8 <__aeabi_fcmpge>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d053      	beq.n	8005be0 <Batt_Protection_when_charge+0x2d0>
 8005b38:	4b25      	ldr	r3, [pc, #148]	; (8005bd0 <Batt_Protection_when_charge+0x2c0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	491e      	ldr	r1, [pc, #120]	; (8005bb8 <Batt_Protection_when_charge+0x2a8>)
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fa fff8 	bl	8000b34 <__addsf3>
 8005b44:	4603      	mov	r3, r0
 8005b46:	461a      	mov	r2, r3
 8005b48:	4b19      	ldr	r3, [pc, #100]	; (8005bb0 <Batt_Protection_when_charge+0x2a0>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4610      	mov	r0, r2
 8005b50:	f7fb fa96 	bl	8001080 <__aeabi_fcmplt>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d042      	beq.n	8005be0 <Batt_Protection_when_charge+0x2d0>
			  				  if((test_tim2%1000)==0)
 8005b5a:	4b1f      	ldr	r3, [pc, #124]	; (8005bd8 <Batt_Protection_when_charge+0x2c8>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4b1f      	ldr	r3, [pc, #124]	; (8005bdc <Batt_Protection_when_charge+0x2cc>)
 8005b60:	fb83 1302 	smull	r1, r3, r3, r2
 8005b64:	1199      	asrs	r1, r3, #6
 8005b66:	17d3      	asrs	r3, r2, #31
 8005b68:	1acb      	subs	r3, r1, r3
 8005b6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005b6e:	fb01 f303 	mul.w	r3, r1, r3
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f040 80d9 	bne.w	8005d2c <Batt_Protection_when_charge+0x41c>
			  					  BUZZ_Toggle;
 8005b7a:	2104      	movs	r1, #4
 8005b7c:	4807      	ldr	r0, [pc, #28]	; (8005b9c <Batt_Protection_when_charge+0x28c>)
 8005b7e:	f002 fc16 	bl	80083ae <HAL_GPIO_TogglePin>
			  					  test_tim2=0;
 8005b82:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <Batt_Protection_when_charge+0x2c8>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]
			  				  if((test_tim2%1000)==0)
 8005b88:	e0d0      	b.n	8005d2c <Batt_Protection_when_charge+0x41c>
 8005b8a:	bf00      	nop
 8005b8c:	2000105c 	.word	0x2000105c
 8005b90:	20001048 	.word	0x20001048
 8005b94:	2000106c 	.word	0x2000106c
 8005b98:	20000c3e 	.word	0x20000c3e
 8005b9c:	40011000 	.word	0x40011000
 8005ba0:	20000070 	.word	0x20000070
 8005ba4:	20000b98 	.word	0x20000b98
 8005ba8:	41200000 	.word	0x41200000
 8005bac:	20000c3d 	.word	0x20000c3d
 8005bb0:	20001070 	.word	0x20001070
 8005bb4:	42340000 	.word	0x42340000
 8005bb8:	40a00000 	.word	0x40a00000
 8005bbc:	200014a4 	.word	0x200014a4
 8005bc0:	42960000 	.word	0x42960000
 8005bc4:	2000104c 	.word	0x2000104c
 8005bc8:	2000109c 	.word	0x2000109c
 8005bcc:	20001044 	.word	0x20001044
 8005bd0:	20000068 	.word	0x20000068
 8005bd4:	20001064 	.word	0x20001064
 8005bd8:	20000b90 	.word	0x20000b90
 8005bdc:	10624dd3 	.word	0x10624dd3
			  			  else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2)
 8005be0:	4b53      	ldr	r3, [pc, #332]	; (8005d30 <Batt_Protection_when_charge+0x420>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4953      	ldr	r1, [pc, #332]	; (8005d34 <Batt_Protection_when_charge+0x424>)
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fa ffa4 	bl	8000b34 <__addsf3>
 8005bec:	4603      	mov	r3, r0
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4b51      	ldr	r3, [pc, #324]	; (8005d38 <Batt_Protection_when_charge+0x428>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	f7fb fa56 	bl	80010a8 <__aeabi_fcmpge>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d028      	beq.n	8005c54 <Batt_Protection_when_charge+0x344>
 8005c02:	4b4b      	ldr	r3, [pc, #300]	; (8005d30 <Batt_Protection_when_charge+0x420>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fa ff92 	bl	8000b34 <__addsf3>
 8005c10:	4603      	mov	r3, r0
 8005c12:	461a      	mov	r2, r3
 8005c14:	4b48      	ldr	r3, [pc, #288]	; (8005d38 <Batt_Protection_when_charge+0x428>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	f7fb fa30 	bl	8001080 <__aeabi_fcmplt>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d016      	beq.n	8005c54 <Batt_Protection_when_charge+0x344>
			  				  if((test_tim2%500)==0)
 8005c26:	4b45      	ldr	r3, [pc, #276]	; (8005d3c <Batt_Protection_when_charge+0x42c>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4b45      	ldr	r3, [pc, #276]	; (8005d40 <Batt_Protection_when_charge+0x430>)
 8005c2c:	fb83 1302 	smull	r1, r3, r3, r2
 8005c30:	1159      	asrs	r1, r3, #5
 8005c32:	17d3      	asrs	r3, r2, #31
 8005c34:	1acb      	subs	r3, r1, r3
 8005c36:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005c3a:	fb01 f303 	mul.w	r3, r1, r3
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d173      	bne.n	8005d2c <Batt_Protection_when_charge+0x41c>
			  					  BUZZ_Toggle;
 8005c44:	2104      	movs	r1, #4
 8005c46:	483f      	ldr	r0, [pc, #252]	; (8005d44 <Batt_Protection_when_charge+0x434>)
 8005c48:	f002 fbb1 	bl	80083ae <HAL_GPIO_TogglePin>
			  					  test_tim2=0;
 8005c4c:	4b3b      	ldr	r3, [pc, #236]	; (8005d3c <Batt_Protection_when_charge+0x42c>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
			  				  if((test_tim2%500)==0)
 8005c52:	e06b      	b.n	8005d2c <Batt_Protection_when_charge+0x41c>
			  			  else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set)
 8005c54:	4b36      	ldr	r3, [pc, #216]	; (8005d30 <Batt_Protection_when_charge+0x420>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fa ff69 	bl	8000b34 <__addsf3>
 8005c62:	4603      	mov	r3, r0
 8005c64:	461a      	mov	r2, r3
 8005c66:	4b34      	ldr	r3, [pc, #208]	; (8005d38 <Batt_Protection_when_charge+0x428>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f7fb fa25 	bl	80010bc <__aeabi_fcmpgt>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d021      	beq.n	8005cbc <Batt_Protection_when_charge+0x3ac>
 8005c78:	4b2f      	ldr	r3, [pc, #188]	; (8005d38 <Batt_Protection_when_charge+0x428>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	4b2c      	ldr	r3, [pc, #176]	; (8005d30 <Batt_Protection_when_charge+0x420>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4619      	mov	r1, r3
 8005c82:	4610      	mov	r0, r2
 8005c84:	f7fb fa10 	bl	80010a8 <__aeabi_fcmpge>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d016      	beq.n	8005cbc <Batt_Protection_when_charge+0x3ac>
			  				  if((test_tim2%500)==0)
 8005c8e:	4b2b      	ldr	r3, [pc, #172]	; (8005d3c <Batt_Protection_when_charge+0x42c>)
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	4b2b      	ldr	r3, [pc, #172]	; (8005d40 <Batt_Protection_when_charge+0x430>)
 8005c94:	fb83 1302 	smull	r1, r3, r3, r2
 8005c98:	1159      	asrs	r1, r3, #5
 8005c9a:	17d3      	asrs	r3, r2, #31
 8005c9c:	1acb      	subs	r3, r1, r3
 8005c9e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005ca2:	fb01 f303 	mul.w	r3, r1, r3
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d13f      	bne.n	8005d2c <Batt_Protection_when_charge+0x41c>
			  					  BUZZ_Toggle;
 8005cac:	2104      	movs	r1, #4
 8005cae:	4825      	ldr	r0, [pc, #148]	; (8005d44 <Batt_Protection_when_charge+0x434>)
 8005cb0:	f002 fb7d 	bl	80083ae <HAL_GPIO_TogglePin>
			  					  test_tim2=0;
 8005cb4:	4b21      	ldr	r3, [pc, #132]	; (8005d3c <Batt_Protection_when_charge+0x42c>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
			  				  if((test_tim2%500)==0)
 8005cba:	e037      	b.n	8005d2c <Batt_Protection_when_charge+0x41c>
			  			  else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set)
 8005cbc:	4b1e      	ldr	r3, [pc, #120]	; (8005d38 <Batt_Protection_when_charge+0x428>)
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	4b1b      	ldr	r3, [pc, #108]	; (8005d30 <Batt_Protection_when_charge+0x420>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	f7fb f9da 	bl	8001080 <__aeabi_fcmplt>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d121      	bne.n	8005d16 <Batt_Protection_when_charge+0x406>
 8005cd2:	4b1d      	ldr	r3, [pc, #116]	; (8005d48 <Batt_Protection_when_charge+0x438>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b16      	ldr	r3, [pc, #88]	; (8005d30 <Batt_Protection_when_charge+0x420>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4610      	mov	r0, r2
 8005cde:	f7fb f9cf 	bl	8001080 <__aeabi_fcmplt>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d116      	bne.n	8005d16 <Batt_Protection_when_charge+0x406>
 8005ce8:	4b18      	ldr	r3, [pc, #96]	; (8005d4c <Batt_Protection_when_charge+0x43c>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	4b10      	ldr	r3, [pc, #64]	; (8005d30 <Batt_Protection_when_charge+0x420>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	f7fb f9c4 	bl	8001080 <__aeabi_fcmplt>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10b      	bne.n	8005d16 <Batt_Protection_when_charge+0x406>
 8005cfe:	4b14      	ldr	r3, [pc, #80]	; (8005d50 <Batt_Protection_when_charge+0x440>)
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <Batt_Protection_when_charge+0x420>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f7fb f9b9 	bl	8001080 <__aeabi_fcmplt>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d100      	bne.n	8005d16 <Batt_Protection_when_charge+0x406>
			  			  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8005d14:	e1be      	b.n	8006094 <Batt_Protection_when_charge+0x784>
			  				  Batt_Open_Mode();
 8005d16:	f7fb fb41 	bl	800139c <Batt_Open_Mode>
			  				  flag_trip_undertemperature=ON;
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <Batt_Protection_when_charge+0x444>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	701a      	strb	r2, [r3, #0]
			  				  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005d20:	2200      	movs	r2, #0
 8005d22:	2104      	movs	r1, #4
 8005d24:	4807      	ldr	r0, [pc, #28]	; (8005d44 <Batt_Protection_when_charge+0x434>)
 8005d26:	f002 fb2a 	bl	800837e <HAL_GPIO_WritePin>
			  			  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8005d2a:	e1b3      	b.n	8006094 <Batt_Protection_when_charge+0x784>
 8005d2c:	e1b2      	b.n	8006094 <Batt_Protection_when_charge+0x784>
 8005d2e:	bf00      	nop
 8005d30:	20000068 	.word	0x20000068
 8005d34:	40a00000 	.word	0x40a00000
 8005d38:	20001070 	.word	0x20001070
 8005d3c:	20000b90 	.word	0x20000b90
 8005d40:	10624dd3 	.word	0x10624dd3
 8005d44:	40011000 	.word	0x40011000
 8005d48:	200014a4 	.word	0x200014a4
 8005d4c:	2000104c 	.word	0x2000104c
 8005d50:	2000109c 	.word	0x2000109c
 8005d54:	20001064 	.word	0x20001064
			  		else if((fabs(IBATT)-I_Over_Set_Charge)>0 && flag_trip_overcurrentcharge==OFF)   //Indikasi terjadi Over Current
 8005d58:	4bb7      	ldr	r3, [pc, #732]	; (8006038 <Batt_Protection_when_charge+0x728>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fa fb61 	bl	8000428 <__aeabi_f2d>
 8005d66:	4604      	mov	r4, r0
 8005d68:	460d      	mov	r5, r1
 8005d6a:	4bb4      	ldr	r3, [pc, #720]	; (800603c <Batt_Protection_when_charge+0x72c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fa fb5a 	bl	8000428 <__aeabi_f2d>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4620      	mov	r0, r4
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	f7fa f9f4 	bl	8000168 <__aeabi_dsub>
 8005d80:	4603      	mov	r3, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	4618      	mov	r0, r3
 8005d86:	4621      	mov	r1, r4
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	f7fa fe32 	bl	80009f8 <__aeabi_dcmpgt>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 80dd 	beq.w	8005f56 <Batt_Protection_when_charge+0x646>
 8005d9c:	4ba8      	ldr	r3, [pc, #672]	; (8006040 <Batt_Protection_when_charge+0x730>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f040 80d8 	bne.w	8005f56 <Batt_Protection_when_charge+0x646>
				    	fault_code=10;
 8005da6:	4ba7      	ldr	r3, [pc, #668]	; (8006044 <Batt_Protection_when_charge+0x734>)
 8005da8:	220a      	movs	r2, #10
 8005daa:	701a      	strb	r2, [r3, #0]
				    	T_I_Over_trip=14.5/(((IBATT/6.9)*(IBATT/6.9))-1);
 8005dac:	4ba2      	ldr	r3, [pc, #648]	; (8006038 <Batt_Protection_when_charge+0x728>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fa fb39 	bl	8000428 <__aeabi_f2d>
 8005db6:	a39c      	add	r3, pc, #624	; (adr r3, 8006028 <Batt_Protection_when_charge+0x718>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f7fa fcb6 	bl	800072c <__aeabi_ddiv>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	4625      	mov	r5, r4
 8005dc6:	461c      	mov	r4, r3
 8005dc8:	4b9b      	ldr	r3, [pc, #620]	; (8006038 <Batt_Protection_when_charge+0x728>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fa fb2b 	bl	8000428 <__aeabi_f2d>
 8005dd2:	a395      	add	r3, pc, #596	; (adr r3, 8006028 <Batt_Protection_when_charge+0x718>)
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	f7fa fca8 	bl	800072c <__aeabi_ddiv>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4620      	mov	r0, r4
 8005de2:	4629      	mov	r1, r5
 8005de4:	f7fa fb78 	bl	80004d8 <__aeabi_dmul>
 8005de8:	4603      	mov	r3, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	4618      	mov	r0, r3
 8005dee:	4621      	mov	r1, r4
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	4b94      	ldr	r3, [pc, #592]	; (8006048 <Batt_Protection_when_charge+0x738>)
 8005df6:	f7fa f9b7 	bl	8000168 <__aeabi_dsub>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4623      	mov	r3, r4
 8005e02:	f04f 0000 	mov.w	r0, #0
 8005e06:	4991      	ldr	r1, [pc, #580]	; (800604c <Batt_Protection_when_charge+0x73c>)
 8005e08:	f7fa fc90 	bl	800072c <__aeabi_ddiv>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	460c      	mov	r4, r1
 8005e10:	4618      	mov	r0, r3
 8005e12:	4621      	mov	r1, r4
 8005e14:	f7fa fe38 	bl	8000a88 <__aeabi_d2f>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	4b8d      	ldr	r3, [pc, #564]	; (8006050 <Batt_Protection_when_charge+0x740>)
 8005e1c:	601a      	str	r2, [r3, #0]
				    	T_I_Over_trip_cycle+=0.001;
 8005e1e:	4b8d      	ldr	r3, [pc, #564]	; (8006054 <Batt_Protection_when_charge+0x744>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fa fb00 	bl	8000428 <__aeabi_f2d>
 8005e28:	a381      	add	r3, pc, #516	; (adr r3, 8006030 <Batt_Protection_when_charge+0x720>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	f7fa f99d 	bl	800016c <__adddf3>
 8005e32:	4603      	mov	r3, r0
 8005e34:	460c      	mov	r4, r1
 8005e36:	4618      	mov	r0, r3
 8005e38:	4621      	mov	r1, r4
 8005e3a:	f7fa fe25 	bl	8000a88 <__aeabi_d2f>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	4b84      	ldr	r3, [pc, #528]	; (8006054 <Batt_Protection_when_charge+0x744>)
 8005e42:	601a      	str	r2, [r3, #0]
	    		  		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentcharge==OFF)
 8005e44:	4b83      	ldr	r3, [pc, #524]	; (8006054 <Batt_Protection_when_charge+0x744>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	4b81      	ldr	r3, [pc, #516]	; (8006050 <Batt_Protection_when_charge+0x740>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	f7fb f934 	bl	80010bc <__aeabi_fcmpgt>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d011      	beq.n	8005e7e <Batt_Protection_when_charge+0x56e>
 8005e5a:	4b79      	ldr	r3, [pc, #484]	; (8006040 <Batt_Protection_when_charge+0x730>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10d      	bne.n	8005e7e <Batt_Protection_when_charge+0x56e>
	    		  			Batt_Open_Mode();
 8005e62:	f7fb fa9b 	bl	800139c <Batt_Open_Mode>
	    		  			T_I_Over_trip_cycle=T_I_Over_trip;
 8005e66:	4b7a      	ldr	r3, [pc, #488]	; (8006050 <Batt_Protection_when_charge+0x740>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a7a      	ldr	r2, [pc, #488]	; (8006054 <Batt_Protection_when_charge+0x744>)
 8005e6c:	6013      	str	r3, [r2, #0]
	    		  			flag_trip_overcurrentcharge=ON;
 8005e6e:	4b74      	ldr	r3, [pc, #464]	; (8006040 <Batt_Protection_when_charge+0x730>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	701a      	strb	r2, [r3, #0]
	    		  			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005e74:	2200      	movs	r2, #0
 8005e76:	2104      	movs	r1, #4
 8005e78:	4877      	ldr	r0, [pc, #476]	; (8006058 <Batt_Protection_when_charge+0x748>)
 8005e7a:	f002 fa80 	bl	800837e <HAL_GPIO_WritePin>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 8005e7e:	4b70      	ldr	r3, [pc, #448]	; (8006040 <Batt_Protection_when_charge+0x730>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f040 8105 	bne.w	8006092 <Batt_Protection_when_charge+0x782>
				    		if(T_I_Over_trip-T_I_Over_trip_cycle>15)
 8005e88:	4b71      	ldr	r3, [pc, #452]	; (8006050 <Batt_Protection_when_charge+0x740>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4b71      	ldr	r3, [pc, #452]	; (8006054 <Batt_Protection_when_charge+0x744>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4619      	mov	r1, r3
 8005e92:	4610      	mov	r0, r2
 8005e94:	f7fa fe4c 	bl	8000b30 <__aeabi_fsub>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	4970      	ldr	r1, [pc, #448]	; (800605c <Batt_Protection_when_charge+0x74c>)
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fb f90d 	bl	80010bc <__aeabi_fcmpgt>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d017      	beq.n	8005ed8 <Batt_Protection_when_charge+0x5c8>
				    			if((test_tim2%1000)==0)
 8005ea8:	4b6d      	ldr	r3, [pc, #436]	; (8006060 <Batt_Protection_when_charge+0x750>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	4b6d      	ldr	r3, [pc, #436]	; (8006064 <Batt_Protection_when_charge+0x754>)
 8005eae:	fb83 1302 	smull	r1, r3, r3, r2
 8005eb2:	1199      	asrs	r1, r3, #6
 8005eb4:	17d3      	asrs	r3, r2, #31
 8005eb6:	1acb      	subs	r3, r1, r3
 8005eb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005ebc:	fb01 f303 	mul.w	r3, r1, r3
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f040 80e5 	bne.w	8006092 <Batt_Protection_when_charge+0x782>
				    				BUZZ_Toggle;
 8005ec8:	2104      	movs	r1, #4
 8005eca:	4863      	ldr	r0, [pc, #396]	; (8006058 <Batt_Protection_when_charge+0x748>)
 8005ecc:	f002 fa6f 	bl	80083ae <HAL_GPIO_TogglePin>
				    				test_tim2=0;
 8005ed0:	4b63      	ldr	r3, [pc, #396]	; (8006060 <Batt_Protection_when_charge+0x750>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
	    		  		if(flag_trip_overcurrentcharge==OFF)
 8005ed6:	e0dc      	b.n	8006092 <Batt_Protection_when_charge+0x782>
				    		else if(T_I_Over_trip-T_I_Over_trip_cycle>10)
 8005ed8:	4b5d      	ldr	r3, [pc, #372]	; (8006050 <Batt_Protection_when_charge+0x740>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	4b5d      	ldr	r3, [pc, #372]	; (8006054 <Batt_Protection_when_charge+0x744>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	f7fa fe24 	bl	8000b30 <__aeabi_fsub>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	495f      	ldr	r1, [pc, #380]	; (8006068 <Batt_Protection_when_charge+0x758>)
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fb f8e5 	bl	80010bc <__aeabi_fcmpgt>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d016      	beq.n	8005f26 <Batt_Protection_when_charge+0x616>
				    			if((test_tim2%100)==0)
 8005ef8:	4b59      	ldr	r3, [pc, #356]	; (8006060 <Batt_Protection_when_charge+0x750>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	4b5b      	ldr	r3, [pc, #364]	; (800606c <Batt_Protection_when_charge+0x75c>)
 8005efe:	fb83 1302 	smull	r1, r3, r3, r2
 8005f02:	1159      	asrs	r1, r3, #5
 8005f04:	17d3      	asrs	r3, r2, #31
 8005f06:	1acb      	subs	r3, r1, r3
 8005f08:	2164      	movs	r1, #100	; 0x64
 8005f0a:	fb01 f303 	mul.w	r3, r1, r3
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f040 80be 	bne.w	8006092 <Batt_Protection_when_charge+0x782>
				    				BUZZ_Toggle;
 8005f16:	2104      	movs	r1, #4
 8005f18:	484f      	ldr	r0, [pc, #316]	; (8006058 <Batt_Protection_when_charge+0x748>)
 8005f1a:	f002 fa48 	bl	80083ae <HAL_GPIO_TogglePin>
				    				test_tim2=0;
 8005f1e:	4b50      	ldr	r3, [pc, #320]	; (8006060 <Batt_Protection_when_charge+0x750>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
	    		  		if(flag_trip_overcurrentcharge==OFF)
 8005f24:	e0b5      	b.n	8006092 <Batt_Protection_when_charge+0x782>
				    		else if(T_I_Over_trip-T_I_Over_trip_cycle>1)
 8005f26:	4b4a      	ldr	r3, [pc, #296]	; (8006050 <Batt_Protection_when_charge+0x740>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	4b4a      	ldr	r3, [pc, #296]	; (8006054 <Batt_Protection_when_charge+0x744>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4610      	mov	r0, r2
 8005f32:	f7fa fdfd 	bl	8000b30 <__aeabi_fsub>
 8005f36:	4603      	mov	r3, r0
 8005f38:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fb f8bd 	bl	80010bc <__aeabi_fcmpgt>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d100      	bne.n	8005f4a <Batt_Protection_when_charge+0x63a>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 8005f48:	e0a3      	b.n	8006092 <Batt_Protection_when_charge+0x782>
				    			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	2104      	movs	r1, #4
 8005f4e:	4842      	ldr	r0, [pc, #264]	; (8006058 <Batt_Protection_when_charge+0x748>)
 8005f50:	f002 fa15 	bl	800837e <HAL_GPIO_WritePin>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 8005f54:	e09d      	b.n	8006092 <Batt_Protection_when_charge+0x782>
			  		else if(VBATT>V_Over_Set)
 8005f56:	4b46      	ldr	r3, [pc, #280]	; (8006070 <Batt_Protection_when_charge+0x760>)
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	4b46      	ldr	r3, [pc, #280]	; (8006074 <Batt_Protection_when_charge+0x764>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4610      	mov	r0, r2
 8005f62:	f7fb f8ab 	bl	80010bc <__aeabi_fcmpgt>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <Batt_Protection_when_charge+0x66e>
			  			fault_code=11;
 8005f6c:	4b35      	ldr	r3, [pc, #212]	; (8006044 <Batt_Protection_when_charge+0x734>)
 8005f6e:	220b      	movs	r2, #11
 8005f70:	701a      	strb	r2, [r3, #0]
			  			flag_trip_overvoltage=ON;
 8005f72:	4b41      	ldr	r3, [pc, #260]	; (8006078 <Batt_Protection_when_charge+0x768>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	701a      	strb	r2, [r3, #0]
			  			Batt_Open_Mode();
 8005f78:	f7fb fa10 	bl	800139c <Batt_Open_Mode>
}
 8005f7c:	e08a      	b.n	8006094 <Batt_Protection_when_charge+0x784>
				    	  if(fault_code!=0) last_fault_code=fault_code;
 8005f7e:	4b31      	ldr	r3, [pc, #196]	; (8006044 <Batt_Protection_when_charge+0x734>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <Batt_Protection_when_charge+0x67e>
 8005f86:	4b2f      	ldr	r3, [pc, #188]	; (8006044 <Batt_Protection_when_charge+0x734>)
 8005f88:	781a      	ldrb	r2, [r3, #0]
 8005f8a:	4b3c      	ldr	r3, [pc, #240]	; (800607c <Batt_Protection_when_charge+0x76c>)
 8005f8c:	701a      	strb	r2, [r3, #0]
				    	  fault_code=0;
 8005f8e:	4b2d      	ldr	r3, [pc, #180]	; (8006044 <Batt_Protection_when_charge+0x734>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
				    	  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005f94:	2200      	movs	r2, #0
 8005f96:	2104      	movs	r1, #4
 8005f98:	482f      	ldr	r0, [pc, #188]	; (8006058 <Batt_Protection_when_charge+0x748>)
 8005f9a:	f002 f9f0 	bl	800837e <HAL_GPIO_WritePin>
				    	  T_Under_trip=0;
 8005f9e:	4b38      	ldr	r3, [pc, #224]	; (8006080 <Batt_Protection_when_charge+0x770>)
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
				    	  T_trip_cycle=T_trip_cycle-0.001;
 8005fa6:	4b37      	ldr	r3, [pc, #220]	; (8006084 <Batt_Protection_when_charge+0x774>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fa fa3c 	bl	8000428 <__aeabi_f2d>
 8005fb0:	a31f      	add	r3, pc, #124	; (adr r3, 8006030 <Batt_Protection_when_charge+0x720>)
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	f7fa f8d7 	bl	8000168 <__aeabi_dsub>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	f7fa fd61 	bl	8000a88 <__aeabi_d2f>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	4b2e      	ldr	r3, [pc, #184]	; (8006084 <Batt_Protection_when_charge+0x774>)
 8005fca:	601a      	str	r2, [r3, #0]
				    	  T_I_Over_trip_cycle-=0.001;
 8005fcc:	4b21      	ldr	r3, [pc, #132]	; (8006054 <Batt_Protection_when_charge+0x744>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fa fa29 	bl	8000428 <__aeabi_f2d>
 8005fd6:	a316      	add	r3, pc, #88	; (adr r3, 8006030 <Batt_Protection_when_charge+0x720>)
 8005fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fdc:	f7fa f8c4 	bl	8000168 <__aeabi_dsub>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	f7fa fd4e 	bl	8000a88 <__aeabi_d2f>
 8005fec:	4602      	mov	r2, r0
 8005fee:	4b19      	ldr	r3, [pc, #100]	; (8006054 <Batt_Protection_when_charge+0x744>)
 8005ff0:	601a      	str	r2, [r3, #0]
				    	  if(T_trip_cycle<0) T_trip_cycle=0;
 8005ff2:	4b24      	ldr	r3, [pc, #144]	; (8006084 <Batt_Protection_when_charge+0x774>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f04f 0100 	mov.w	r1, #0
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fb f840 	bl	8001080 <__aeabi_fcmplt>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <Batt_Protection_when_charge+0x6fe>
 8006006:	4b1f      	ldr	r3, [pc, #124]	; (8006084 <Batt_Protection_when_charge+0x774>)
 8006008:	f04f 0200 	mov.w	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
				    	  if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 800600e:	4b11      	ldr	r3, [pc, #68]	; (8006054 <Batt_Protection_when_charge+0x744>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f04f 0100 	mov.w	r1, #0
 8006016:	4618      	mov	r0, r3
 8006018:	f7fb f832 	bl	8001080 <__aeabi_fcmplt>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d132      	bne.n	8006088 <Batt_Protection_when_charge+0x778>
}
 8006022:	e037      	b.n	8006094 <Batt_Protection_when_charge+0x784>
 8006024:	f3af 8000 	nop.w
 8006028:	9999999a 	.word	0x9999999a
 800602c:	401b9999 	.word	0x401b9999
 8006030:	d2f1a9fc 	.word	0xd2f1a9fc
 8006034:	3f50624d 	.word	0x3f50624d
 8006038:	2000105c 	.word	0x2000105c
 800603c:	20000060 	.word	0x20000060
 8006040:	20001088 	.word	0x20001088
 8006044:	2000106c 	.word	0x2000106c
 8006048:	3ff00000 	.word	0x3ff00000
 800604c:	402d0000 	.word	0x402d0000
 8006050:	20001030 	.word	0x20001030
 8006054:	200010a0 	.word	0x200010a0
 8006058:	40011000 	.word	0x40011000
 800605c:	41700000 	.word	0x41700000
 8006060:	20000b90 	.word	0x20000b90
 8006064:	10624dd3 	.word	0x10624dd3
 8006068:	41200000 	.word	0x41200000
 800606c:	51eb851f 	.word	0x51eb851f
 8006070:	20001048 	.word	0x20001048
 8006074:	20000078 	.word	0x20000078
 8006078:	200014a1 	.word	0x200014a1
 800607c:	200014a0 	.word	0x200014a0
 8006080:	20001034 	.word	0x20001034
 8006084:	20001078 	.word	0x20001078
				    	  if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 8006088:	4b03      	ldr	r3, [pc, #12]	; (8006098 <Batt_Protection_when_charge+0x788>)
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
}
 8006090:	e000      	b.n	8006094 <Batt_Protection_when_charge+0x784>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 8006092:	bf00      	nop
}
 8006094:	bf00      	nop
 8006096:	bdb0      	pop	{r4, r5, r7, pc}
 8006098:	200010a0 	.word	0x200010a0

0800609c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80060a4:	4b11      	ldr	r3, [pc, #68]	; (80060ec <_sbrk+0x50>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d102      	bne.n	80060b2 <_sbrk+0x16>
		heap_end = &end;
 80060ac:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <_sbrk+0x50>)
 80060ae:	4a10      	ldr	r2, [pc, #64]	; (80060f0 <_sbrk+0x54>)
 80060b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80060b2:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <_sbrk+0x50>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80060b8:	4b0c      	ldr	r3, [pc, #48]	; (80060ec <_sbrk+0x50>)
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4413      	add	r3, r2
 80060c0:	466a      	mov	r2, sp
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d907      	bls.n	80060d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80060c6:	f004 f8fb 	bl	800a2c0 <__errno>
 80060ca:	4602      	mov	r2, r0
 80060cc:	230c      	movs	r3, #12
 80060ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80060d0:	f04f 33ff 	mov.w	r3, #4294967295
 80060d4:	e006      	b.n	80060e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80060d6:	4b05      	ldr	r3, [pc, #20]	; (80060ec <_sbrk+0x50>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4413      	add	r3, r2
 80060de:	4a03      	ldr	r2, [pc, #12]	; (80060ec <_sbrk+0x50>)
 80060e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80060e2:	68fb      	ldr	r3, [r7, #12]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	2000068c 	.word	0x2000068c
 80060f0:	200015b8 	.word	0x200015b8

080060f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80060f8:	4b15      	ldr	r3, [pc, #84]	; (8006150 <SystemInit+0x5c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a14      	ldr	r2, [pc, #80]	; (8006150 <SystemInit+0x5c>)
 80060fe:	f043 0301 	orr.w	r3, r3, #1
 8006102:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006104:	4b12      	ldr	r3, [pc, #72]	; (8006150 <SystemInit+0x5c>)
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	4911      	ldr	r1, [pc, #68]	; (8006150 <SystemInit+0x5c>)
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <SystemInit+0x60>)
 800610c:	4013      	ands	r3, r2
 800610e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006110:	4b0f      	ldr	r3, [pc, #60]	; (8006150 <SystemInit+0x5c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a0e      	ldr	r2, [pc, #56]	; (8006150 <SystemInit+0x5c>)
 8006116:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800611a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800611e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006120:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <SystemInit+0x5c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a0a      	ldr	r2, [pc, #40]	; (8006150 <SystemInit+0x5c>)
 8006126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800612a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800612c:	4b08      	ldr	r3, [pc, #32]	; (8006150 <SystemInit+0x5c>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4a07      	ldr	r2, [pc, #28]	; (8006150 <SystemInit+0x5c>)
 8006132:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006136:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006138:	4b05      	ldr	r3, [pc, #20]	; (8006150 <SystemInit+0x5c>)
 800613a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800613e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006140:	4b05      	ldr	r3, [pc, #20]	; (8006158 <SystemInit+0x64>)
 8006142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006146:	609a      	str	r2, [r3, #8]
#endif 
}
 8006148:	bf00      	nop
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr
 8006150:	40021000 	.word	0x40021000
 8006154:	f8ff0000 	.word	0xf8ff0000
 8006158:	e000ed00 	.word	0xe000ed00

0800615c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006162:	f107 0308 	add.w	r3, r7, #8
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	605a      	str	r2, [r3, #4]
 800616c:	609a      	str	r2, [r3, #8]
 800616e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006170:	463b      	mov	r3, r7
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8006178:	4b1d      	ldr	r3, [pc, #116]	; (80061f0 <MX_TIM2_Init+0x94>)
 800617a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800617e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8006180:	4b1b      	ldr	r3, [pc, #108]	; (80061f0 <MX_TIM2_Init+0x94>)
 8006182:	223f      	movs	r2, #63	; 0x3f
 8006184:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006186:	4b1a      	ldr	r3, [pc, #104]	; (80061f0 <MX_TIM2_Init+0x94>)
 8006188:	2200      	movs	r2, #0
 800618a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800618c:	4b18      	ldr	r3, [pc, #96]	; (80061f0 <MX_TIM2_Init+0x94>)
 800618e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006192:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006194:	4b16      	ldr	r3, [pc, #88]	; (80061f0 <MX_TIM2_Init+0x94>)
 8006196:	2200      	movs	r2, #0
 8006198:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800619a:	4b15      	ldr	r3, [pc, #84]	; (80061f0 <MX_TIM2_Init+0x94>)
 800619c:	2200      	movs	r2, #0
 800619e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80061a0:	4813      	ldr	r0, [pc, #76]	; (80061f0 <MX_TIM2_Init+0x94>)
 80061a2:	f003 fbdc 	bl	800995e <HAL_TIM_Base_Init>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80061ac:	f7fc fd4a 	bl	8002c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80061b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80061b6:	f107 0308 	add.w	r3, r7, #8
 80061ba:	4619      	mov	r1, r3
 80061bc:	480c      	ldr	r0, [pc, #48]	; (80061f0 <MX_TIM2_Init+0x94>)
 80061be:	f003 fd24 	bl	8009c0a <HAL_TIM_ConfigClockSource>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80061c8:	f7fc fd3c 	bl	8002c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061cc:	2300      	movs	r3, #0
 80061ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061d0:	2300      	movs	r3, #0
 80061d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80061d4:	463b      	mov	r3, r7
 80061d6:	4619      	mov	r1, r3
 80061d8:	4805      	ldr	r0, [pc, #20]	; (80061f0 <MX_TIM2_Init+0x94>)
 80061da:	f003 fef3 	bl	8009fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80061e4:	f7fc fd2e 	bl	8002c44 <Error_Handler>
  }

}
 80061e8:	bf00      	nop
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	200014ec 	.word	0x200014ec

080061f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80061fa:	f107 0308 	add.w	r3, r7, #8
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	605a      	str	r2, [r3, #4]
 8006204:	609a      	str	r2, [r3, #8]
 8006206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006208:	463b      	mov	r3, r7
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8006210:	4b1d      	ldr	r3, [pc, #116]	; (8006288 <MX_TIM3_Init+0x94>)
 8006212:	4a1e      	ldr	r2, [pc, #120]	; (800628c <MX_TIM3_Init+0x98>)
 8006214:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8006216:	4b1c      	ldr	r3, [pc, #112]	; (8006288 <MX_TIM3_Init+0x94>)
 8006218:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800621c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800621e:	4b1a      	ldr	r3, [pc, #104]	; (8006288 <MX_TIM3_Init+0x94>)
 8006220:	2200      	movs	r2, #0
 8006222:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8006224:	4b18      	ldr	r3, [pc, #96]	; (8006288 <MX_TIM3_Init+0x94>)
 8006226:	2263      	movs	r2, #99	; 0x63
 8006228:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800622a:	4b17      	ldr	r3, [pc, #92]	; (8006288 <MX_TIM3_Init+0x94>)
 800622c:	2200      	movs	r2, #0
 800622e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006230:	4b15      	ldr	r3, [pc, #84]	; (8006288 <MX_TIM3_Init+0x94>)
 8006232:	2200      	movs	r2, #0
 8006234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006236:	4814      	ldr	r0, [pc, #80]	; (8006288 <MX_TIM3_Init+0x94>)
 8006238:	f003 fb91 	bl	800995e <HAL_TIM_Base_Init>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8006242:	f7fc fcff 	bl	8002c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800624a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800624c:	f107 0308 	add.w	r3, r7, #8
 8006250:	4619      	mov	r1, r3
 8006252:	480d      	ldr	r0, [pc, #52]	; (8006288 <MX_TIM3_Init+0x94>)
 8006254:	f003 fcd9 	bl	8009c0a <HAL_TIM_ConfigClockSource>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800625e:	f7fc fcf1 	bl	8002c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006262:	2300      	movs	r3, #0
 8006264:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006266:	2300      	movs	r3, #0
 8006268:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800626a:	463b      	mov	r3, r7
 800626c:	4619      	mov	r1, r3
 800626e:	4806      	ldr	r0, [pc, #24]	; (8006288 <MX_TIM3_Init+0x94>)
 8006270:	f003 fea8 	bl	8009fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800627a:	f7fc fce3 	bl	8002c44 <Error_Handler>
  }

}
 800627e:	bf00      	nop
 8006280:	3718      	adds	r7, #24
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	200014ac 	.word	0x200014ac
 800628c:	40000400 	.word	0x40000400

08006290 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a0:	d114      	bne.n	80062cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80062a2:	4b19      	ldr	r3, [pc, #100]	; (8006308 <HAL_TIM_Base_MspInit+0x78>)
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	4a18      	ldr	r2, [pc, #96]	; (8006308 <HAL_TIM_Base_MspInit+0x78>)
 80062a8:	f043 0301 	orr.w	r3, r3, #1
 80062ac:	61d3      	str	r3, [r2, #28]
 80062ae:	4b16      	ldr	r3, [pc, #88]	; (8006308 <HAL_TIM_Base_MspInit+0x78>)
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 1);
 80062ba:	2201      	movs	r2, #1
 80062bc:	2102      	movs	r1, #2
 80062be:	201c      	movs	r0, #28
 80062c0:	f001 fca1 	bl	8007c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80062c4:	201c      	movs	r0, #28
 80062c6:	f001 fcba 	bl	8007c3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80062ca:	e018      	b.n	80062fe <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a0e      	ldr	r2, [pc, #56]	; (800630c <HAL_TIM_Base_MspInit+0x7c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d113      	bne.n	80062fe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80062d6:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <HAL_TIM_Base_MspInit+0x78>)
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	4a0b      	ldr	r2, [pc, #44]	; (8006308 <HAL_TIM_Base_MspInit+0x78>)
 80062dc:	f043 0302 	orr.w	r3, r3, #2
 80062e0:	61d3      	str	r3, [r2, #28]
 80062e2:	4b09      	ldr	r3, [pc, #36]	; (8006308 <HAL_TIM_Base_MspInit+0x78>)
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	60bb      	str	r3, [r7, #8]
 80062ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80062ee:	2200      	movs	r2, #0
 80062f0:	2101      	movs	r1, #1
 80062f2:	201d      	movs	r0, #29
 80062f4:	f001 fc87 	bl	8007c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80062f8:	201d      	movs	r0, #29
 80062fa:	f001 fca0 	bl	8007c3e <HAL_NVIC_EnableIRQ>
}
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	40021000 	.word	0x40021000
 800630c:	40000400 	.word	0x40000400

08006310 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006314:	4b11      	ldr	r3, [pc, #68]	; (800635c <MX_USART1_UART_Init+0x4c>)
 8006316:	4a12      	ldr	r2, [pc, #72]	; (8006360 <MX_USART1_UART_Init+0x50>)
 8006318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800631a:	4b10      	ldr	r3, [pc, #64]	; (800635c <MX_USART1_UART_Init+0x4c>)
 800631c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006322:	4b0e      	ldr	r3, [pc, #56]	; (800635c <MX_USART1_UART_Init+0x4c>)
 8006324:	2200      	movs	r2, #0
 8006326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006328:	4b0c      	ldr	r3, [pc, #48]	; (800635c <MX_USART1_UART_Init+0x4c>)
 800632a:	2200      	movs	r2, #0
 800632c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800632e:	4b0b      	ldr	r3, [pc, #44]	; (800635c <MX_USART1_UART_Init+0x4c>)
 8006330:	2200      	movs	r2, #0
 8006332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006334:	4b09      	ldr	r3, [pc, #36]	; (800635c <MX_USART1_UART_Init+0x4c>)
 8006336:	220c      	movs	r2, #12
 8006338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800633a:	4b08      	ldr	r3, [pc, #32]	; (800635c <MX_USART1_UART_Init+0x4c>)
 800633c:	2200      	movs	r2, #0
 800633e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006340:	4b06      	ldr	r3, [pc, #24]	; (800635c <MX_USART1_UART_Init+0x4c>)
 8006342:	2200      	movs	r2, #0
 8006344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006346:	4805      	ldr	r0, [pc, #20]	; (800635c <MX_USART1_UART_Init+0x4c>)
 8006348:	f003 fe92 	bl	800a070 <HAL_UART_Init>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006352:	f7fc fc77 	bl	8002c44 <Error_Handler>
  }

}
 8006356:	bf00      	nop
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	2000156c 	.word	0x2000156c
 8006360:	40013800 	.word	0x40013800

08006364 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8006368:	4b11      	ldr	r3, [pc, #68]	; (80063b0 <MX_USART3_UART_Init+0x4c>)
 800636a:	4a12      	ldr	r2, [pc, #72]	; (80063b4 <MX_USART3_UART_Init+0x50>)
 800636c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800636e:	4b10      	ldr	r3, [pc, #64]	; (80063b0 <MX_USART3_UART_Init+0x4c>)
 8006370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006374:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006376:	4b0e      	ldr	r3, [pc, #56]	; (80063b0 <MX_USART3_UART_Init+0x4c>)
 8006378:	2200      	movs	r2, #0
 800637a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800637c:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <MX_USART3_UART_Init+0x4c>)
 800637e:	2200      	movs	r2, #0
 8006380:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006382:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <MX_USART3_UART_Init+0x4c>)
 8006384:	2200      	movs	r2, #0
 8006386:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006388:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <MX_USART3_UART_Init+0x4c>)
 800638a:	220c      	movs	r2, #12
 800638c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800638e:	4b08      	ldr	r3, [pc, #32]	; (80063b0 <MX_USART3_UART_Init+0x4c>)
 8006390:	2200      	movs	r2, #0
 8006392:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006394:	4b06      	ldr	r3, [pc, #24]	; (80063b0 <MX_USART3_UART_Init+0x4c>)
 8006396:	2200      	movs	r2, #0
 8006398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800639a:	4805      	ldr	r0, [pc, #20]	; (80063b0 <MX_USART3_UART_Init+0x4c>)
 800639c:	f003 fe68 	bl	800a070 <HAL_UART_Init>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80063a6:	f7fc fc4d 	bl	8002c44 <Error_Handler>
  }

}
 80063aa:	bf00      	nop
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	2000152c 	.word	0x2000152c
 80063b4:	40004800 	.word	0x40004800

080063b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08c      	sub	sp, #48	; 0x30
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063c0:	f107 031c 	add.w	r3, r7, #28
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	605a      	str	r2, [r3, #4]
 80063ca:	609a      	str	r2, [r3, #8]
 80063cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a41      	ldr	r2, [pc, #260]	; (80064d8 <HAL_UART_MspInit+0x120>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d132      	bne.n	800643e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80063d8:	4b40      	ldr	r3, [pc, #256]	; (80064dc <HAL_UART_MspInit+0x124>)
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	4a3f      	ldr	r2, [pc, #252]	; (80064dc <HAL_UART_MspInit+0x124>)
 80063de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063e2:	6193      	str	r3, [r2, #24]
 80063e4:	4b3d      	ldr	r3, [pc, #244]	; (80064dc <HAL_UART_MspInit+0x124>)
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063f0:	4b3a      	ldr	r3, [pc, #232]	; (80064dc <HAL_UART_MspInit+0x124>)
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	4a39      	ldr	r2, [pc, #228]	; (80064dc <HAL_UART_MspInit+0x124>)
 80063f6:	f043 0304 	orr.w	r3, r3, #4
 80063fa:	6193      	str	r3, [r2, #24]
 80063fc:	4b37      	ldr	r3, [pc, #220]	; (80064dc <HAL_UART_MspInit+0x124>)
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800640c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800640e:	2302      	movs	r3, #2
 8006410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006412:	2303      	movs	r3, #3
 8006414:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006416:	f107 031c 	add.w	r3, r7, #28
 800641a:	4619      	mov	r1, r3
 800641c:	4830      	ldr	r0, [pc, #192]	; (80064e0 <HAL_UART_MspInit+0x128>)
 800641e:	f001 fe3d 	bl	800809c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006428:	2300      	movs	r3, #0
 800642a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800642c:	2300      	movs	r3, #0
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006430:	f107 031c 	add.w	r3, r7, #28
 8006434:	4619      	mov	r1, r3
 8006436:	482a      	ldr	r0, [pc, #168]	; (80064e0 <HAL_UART_MspInit+0x128>)
 8006438:	f001 fe30 	bl	800809c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800643c:	e048      	b.n	80064d0 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a28      	ldr	r2, [pc, #160]	; (80064e4 <HAL_UART_MspInit+0x12c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d143      	bne.n	80064d0 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006448:	4b24      	ldr	r3, [pc, #144]	; (80064dc <HAL_UART_MspInit+0x124>)
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	4a23      	ldr	r2, [pc, #140]	; (80064dc <HAL_UART_MspInit+0x124>)
 800644e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006452:	61d3      	str	r3, [r2, #28]
 8006454:	4b21      	ldr	r3, [pc, #132]	; (80064dc <HAL_UART_MspInit+0x124>)
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006460:	4b1e      	ldr	r3, [pc, #120]	; (80064dc <HAL_UART_MspInit+0x124>)
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	4a1d      	ldr	r2, [pc, #116]	; (80064dc <HAL_UART_MspInit+0x124>)
 8006466:	f043 0310 	orr.w	r3, r3, #16
 800646a:	6193      	str	r3, [r2, #24]
 800646c:	4b1b      	ldr	r3, [pc, #108]	; (80064dc <HAL_UART_MspInit+0x124>)
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f003 0310 	and.w	r3, r3, #16
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800647c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800647e:	2302      	movs	r3, #2
 8006480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006482:	2303      	movs	r3, #3
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006486:	f107 031c 	add.w	r3, r7, #28
 800648a:	4619      	mov	r1, r3
 800648c:	4816      	ldr	r0, [pc, #88]	; (80064e8 <HAL_UART_MspInit+0x130>)
 800648e:	f001 fe05 	bl	800809c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006498:	2300      	movs	r3, #0
 800649a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800649c:	2300      	movs	r3, #0
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064a0:	f107 031c 	add.w	r3, r7, #28
 80064a4:	4619      	mov	r1, r3
 80064a6:	4810      	ldr	r0, [pc, #64]	; (80064e8 <HAL_UART_MspInit+0x130>)
 80064a8:	f001 fdf8 	bl	800809c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80064ac:	4b0f      	ldr	r3, [pc, #60]	; (80064ec <HAL_UART_MspInit+0x134>)
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80064c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	f043 0310 	orr.w	r3, r3, #16
 80064c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ca:	4a08      	ldr	r2, [pc, #32]	; (80064ec <HAL_UART_MspInit+0x134>)
 80064cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ce:	6053      	str	r3, [r2, #4]
}
 80064d0:	bf00      	nop
 80064d2:	3730      	adds	r7, #48	; 0x30
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40013800 	.word	0x40013800
 80064dc:	40021000 	.word	0x40021000
 80064e0:	40010800 	.word	0x40010800
 80064e4:	40004800 	.word	0x40004800
 80064e8:	40011000 	.word	0x40011000
 80064ec:	40010000 	.word	0x40010000

080064f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80064f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80064f2:	e003      	b.n	80064fc <LoopCopyDataInit>

080064f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80064f4:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80064f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80064f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80064fa:	3104      	adds	r1, #4

080064fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80064fc:	480a      	ldr	r0, [pc, #40]	; (8006528 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80064fe:	4b0b      	ldr	r3, [pc, #44]	; (800652c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006500:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006502:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006504:	d3f6      	bcc.n	80064f4 <CopyDataInit>
  ldr r2, =_sbss
 8006506:	4a0a      	ldr	r2, [pc, #40]	; (8006530 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006508:	e002      	b.n	8006510 <LoopFillZerobss>

0800650a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800650a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800650c:	f842 3b04 	str.w	r3, [r2], #4

08006510 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006510:	4b08      	ldr	r3, [pc, #32]	; (8006534 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006512:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006514:	d3f9      	bcc.n	800650a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006516:	f7ff fded 	bl	80060f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800651a:	f003 fed7 	bl	800a2cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800651e:	f7fb fecf 	bl	80022c0 <main>
  bx lr
 8006522:	4770      	bx	lr
  ldr r3, =_sidata
 8006524:	0800d52c 	.word	0x0800d52c
  ldr r0, =_sdata
 8006528:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800652c:	20000260 	.word	0x20000260
  ldr r2, =_sbss
 8006530:	20000260 	.word	0x20000260
  ldr r3, = _ebss
 8006534:	200015b4 	.word	0x200015b4

08006538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006538:	e7fe      	b.n	8006538 <ADC1_2_IRQHandler>
	...

0800653c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006540:	4b08      	ldr	r3, [pc, #32]	; (8006564 <HAL_Init+0x28>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a07      	ldr	r2, [pc, #28]	; (8006564 <HAL_Init+0x28>)
 8006546:	f043 0310 	orr.w	r3, r3, #16
 800654a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800654c:	2003      	movs	r0, #3
 800654e:	f001 fb4f 	bl	8007bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006552:	2000      	movs	r0, #0
 8006554:	f000 f808 	bl	8006568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006558:	f7fd ffb4 	bl	80044c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	40022000 	.word	0x40022000

08006568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006570:	4b12      	ldr	r3, [pc, #72]	; (80065bc <HAL_InitTick+0x54>)
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <HAL_InitTick+0x58>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	4619      	mov	r1, r3
 800657a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800657e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006582:	fbb2 f3f3 	udiv	r3, r2, r3
 8006586:	4618      	mov	r0, r3
 8006588:	f001 fb67 	bl	8007c5a <HAL_SYSTICK_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e00e      	b.n	80065b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b0f      	cmp	r3, #15
 800659a:	d80a      	bhi.n	80065b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800659c:	2200      	movs	r2, #0
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295
 80065a4:	f001 fb2f 	bl	8007c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80065a8:	4a06      	ldr	r2, [pc, #24]	; (80065c4 <HAL_InitTick+0x5c>)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	e000      	b.n	80065b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	20000080 	.word	0x20000080
 80065c0:	20000088 	.word	0x20000088
 80065c4:	20000084 	.word	0x20000084

080065c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80065cc:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <HAL_IncTick+0x1c>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	461a      	mov	r2, r3
 80065d2:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <HAL_IncTick+0x20>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4413      	add	r3, r2
 80065d8:	4a03      	ldr	r2, [pc, #12]	; (80065e8 <HAL_IncTick+0x20>)
 80065da:	6013      	str	r3, [r2, #0]
}
 80065dc:	bf00      	nop
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr
 80065e4:	20000088 	.word	0x20000088
 80065e8:	200015ac 	.word	0x200015ac

080065ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  return uwTick;
 80065f0:	4b02      	ldr	r3, [pc, #8]	; (80065fc <HAL_GetTick+0x10>)
 80065f2:	681b      	ldr	r3, [r3, #0]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr
 80065fc:	200015ac 	.word	0x200015ac

08006600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006608:	f7ff fff0 	bl	80065ec <HAL_GetTick>
 800660c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006618:	d005      	beq.n	8006626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <HAL_Delay+0x40>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006626:	bf00      	nop
 8006628:	f7ff ffe0 	bl	80065ec <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	429a      	cmp	r2, r3
 8006636:	d8f7      	bhi.n	8006628 <HAL_Delay+0x28>
  {
  }
}
 8006638:	bf00      	nop
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	20000088 	.word	0x20000088

08006644 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e0be      	b.n	80067e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006670:	2b00      	cmp	r3, #0
 8006672:	d109      	bne.n	8006688 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fb fb7c 	bl	8001d80 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 faf7 	bl	8006c7c <ADC_ConversionStop_Disable>
 800668e:	4603      	mov	r3, r0
 8006690:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b00      	cmp	r3, #0
 800669c:	f040 8099 	bne.w	80067d2 <HAL_ADC_Init+0x18e>
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f040 8095 	bne.w	80067d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80066b0:	f023 0302 	bic.w	r3, r3, #2
 80066b4:	f043 0202 	orr.w	r2, r3, #2
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80066c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	7b1b      	ldrb	r3, [r3, #12]
 80066ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80066cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066dc:	d003      	beq.n	80066e6 <HAL_ADC_Init+0xa2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d102      	bne.n	80066ec <HAL_ADC_Init+0xa8>
 80066e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066ea:	e000      	b.n	80066ee <HAL_ADC_Init+0xaa>
 80066ec:	2300      	movs	r3, #0
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7d1b      	ldrb	r3, [r3, #20]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d119      	bne.n	8006730 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	7b1b      	ldrb	r3, [r3, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d109      	bne.n	8006718 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	3b01      	subs	r3, #1
 800670a:	035a      	lsls	r2, r3, #13
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	e00b      	b.n	8006730 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671c:	f043 0220 	orr.w	r2, r3, #32
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	f043 0201 	orr.w	r2, r3, #1
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	430a      	orrs	r2, r1
 8006742:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	4b28      	ldr	r3, [pc, #160]	; (80067ec <HAL_ADC_Init+0x1a8>)
 800674c:	4013      	ands	r3, r2
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	68b9      	ldr	r1, [r7, #8]
 8006754:	430b      	orrs	r3, r1
 8006756:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006760:	d003      	beq.n	800676a <HAL_ADC_Init+0x126>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d104      	bne.n	8006774 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	3b01      	subs	r3, #1
 8006770:	051b      	lsls	r3, r3, #20
 8006772:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	430a      	orrs	r2, r1
 8006786:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	4b18      	ldr	r3, [pc, #96]	; (80067f0 <HAL_ADC_Init+0x1ac>)
 8006790:	4013      	ands	r3, r2
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	429a      	cmp	r2, r3
 8006796:	d10b      	bne.n	80067b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a2:	f023 0303 	bic.w	r3, r3, #3
 80067a6:	f043 0201 	orr.w	r2, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80067ae:	e018      	b.n	80067e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b4:	f023 0312 	bic.w	r3, r3, #18
 80067b8:	f043 0210 	orr.w	r2, r3, #16
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	f043 0201 	orr.w	r2, r3, #1
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80067d0:	e007      	b.n	80067e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d6:	f043 0210 	orr.w	r2, r3, #16
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	ffe1f7fd 	.word	0xffe1f7fd
 80067f0:	ff1f0efe 	.word	0xff1f0efe

080067f4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006800:	2300      	movs	r3, #0
 8006802:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a64      	ldr	r2, [pc, #400]	; (800699c <HAL_ADC_Start_DMA+0x1a8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d004      	beq.n	8006818 <HAL_ADC_Start_DMA+0x24>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a63      	ldr	r2, [pc, #396]	; (80069a0 <HAL_ADC_Start_DMA+0x1ac>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d106      	bne.n	8006826 <HAL_ADC_Start_DMA+0x32>
 8006818:	4b60      	ldr	r3, [pc, #384]	; (800699c <HAL_ADC_Start_DMA+0x1a8>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006820:	2b00      	cmp	r3, #0
 8006822:	f040 80b3 	bne.w	800698c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <HAL_ADC_Start_DMA+0x40>
 8006830:	2302      	movs	r3, #2
 8006832:	e0ae      	b.n	8006992 <HAL_ADC_Start_DMA+0x19e>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f9cb 	bl	8006bd8 <ADC_Enable>
 8006842:	4603      	mov	r3, r0
 8006844:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	2b00      	cmp	r3, #0
 800684a:	f040 809a 	bne.w	8006982 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006856:	f023 0301 	bic.w	r3, r3, #1
 800685a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a4e      	ldr	r2, [pc, #312]	; (80069a0 <HAL_ADC_Start_DMA+0x1ac>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d105      	bne.n	8006878 <HAL_ADC_Start_DMA+0x84>
 800686c:	4b4b      	ldr	r3, [pc, #300]	; (800699c <HAL_ADC_Start_DMA+0x1a8>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d115      	bne.n	80068a4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688e:	2b00      	cmp	r3, #0
 8006890:	d026      	beq.n	80068e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800689a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80068a2:	e01d      	b.n	80068e0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a39      	ldr	r2, [pc, #228]	; (800699c <HAL_ADC_Start_DMA+0x1a8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d004      	beq.n	80068c4 <HAL_ADC_Start_DMA+0xd0>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a38      	ldr	r2, [pc, #224]	; (80069a0 <HAL_ADC_Start_DMA+0x1ac>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d10d      	bne.n	80068e0 <HAL_ADC_Start_DMA+0xec>
 80068c4:	4b35      	ldr	r3, [pc, #212]	; (800699c <HAL_ADC_Start_DMA+0x1a8>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d007      	beq.n	80068e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80068d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d006      	beq.n	80068fa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	f023 0206 	bic.w	r2, r3, #6
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80068f8:	e002      	b.n	8006900 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	4a25      	ldr	r2, [pc, #148]	; (80069a4 <HAL_ADC_Start_DMA+0x1b0>)
 800690e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	4a24      	ldr	r2, [pc, #144]	; (80069a8 <HAL_ADC_Start_DMA+0x1b4>)
 8006916:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	4a23      	ldr	r2, [pc, #140]	; (80069ac <HAL_ADC_Start_DMA+0x1b8>)
 800691e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f06f 0202 	mvn.w	r2, #2
 8006928:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006938:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a18      	ldr	r0, [r3, #32]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	334c      	adds	r3, #76	; 0x4c
 8006944:	4619      	mov	r1, r3
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f001 f9ed 	bl	8007d28 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006958:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800695c:	d108      	bne.n	8006970 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800696c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800696e:	e00f      	b.n	8006990 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800697e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8006980:	e006      	b.n	8006990 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800698a:	e001      	b.n	8006990 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006990:	7dfb      	ldrb	r3, [r7, #23]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40012400 	.word	0x40012400
 80069a0:	40012800 	.word	0x40012800
 80069a4:	08006cf1 	.word	0x08006cf1
 80069a8:	08006d6d 	.word	0x08006d6d
 80069ac:	08006d89 	.word	0x08006d89

080069b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	bc80      	pop	{r7}
 80069c0:	4770      	bx	lr

080069c2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bc80      	pop	{r7}
 80069d2:	4770      	bx	lr

080069d4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bc80      	pop	{r7}
 80069e4:	4770      	bx	lr
	...

080069e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_ADC_ConfigChannel+0x20>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e0dc      	b.n	8006bc2 <HAL_ADC_ConfigChannel+0x1da>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2b06      	cmp	r3, #6
 8006a16:	d81c      	bhi.n	8006a52 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	3b05      	subs	r3, #5
 8006a2a:	221f      	movs	r2, #31
 8006a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a30:	43db      	mvns	r3, r3
 8006a32:	4019      	ands	r1, r3
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	6818      	ldr	r0, [r3, #0]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	3b05      	subs	r3, #5
 8006a44:	fa00 f203 	lsl.w	r2, r0, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	635a      	str	r2, [r3, #52]	; 0x34
 8006a50:	e03c      	b.n	8006acc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2b0c      	cmp	r3, #12
 8006a58:	d81c      	bhi.n	8006a94 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	3b23      	subs	r3, #35	; 0x23
 8006a6c:	221f      	movs	r2, #31
 8006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a72:	43db      	mvns	r3, r3
 8006a74:	4019      	ands	r1, r3
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	3b23      	subs	r3, #35	; 0x23
 8006a86:	fa00 f203 	lsl.w	r2, r0, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30
 8006a92:	e01b      	b.n	8006acc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	3b41      	subs	r3, #65	; 0x41
 8006aa6:	221f      	movs	r2, #31
 8006aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aac:	43db      	mvns	r3, r3
 8006aae:	4019      	ands	r1, r3
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	6818      	ldr	r0, [r3, #0]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	3b41      	subs	r3, #65	; 0x41
 8006ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b09      	cmp	r3, #9
 8006ad2:	d91c      	bls.n	8006b0e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68d9      	ldr	r1, [r3, #12]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3b1e      	subs	r3, #30
 8006ae6:	2207      	movs	r2, #7
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	43db      	mvns	r3, r3
 8006aee:	4019      	ands	r1, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	6898      	ldr	r0, [r3, #8]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	4613      	mov	r3, r2
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	4413      	add	r3, r2
 8006afe:	3b1e      	subs	r3, #30
 8006b00:	fa00 f203 	lsl.w	r2, r0, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	60da      	str	r2, [r3, #12]
 8006b0c:	e019      	b.n	8006b42 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6919      	ldr	r1, [r3, #16]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	4413      	add	r3, r2
 8006b1e:	2207      	movs	r2, #7
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	43db      	mvns	r3, r3
 8006b26:	4019      	ands	r1, r3
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	6898      	ldr	r0, [r3, #8]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	4613      	mov	r3, r2
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	4413      	add	r3, r2
 8006b36:	fa00 f203 	lsl.w	r2, r0, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b10      	cmp	r3, #16
 8006b48:	d003      	beq.n	8006b52 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006b4e:	2b11      	cmp	r3, #17
 8006b50:	d132      	bne.n	8006bb8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1d      	ldr	r2, [pc, #116]	; (8006bcc <HAL_ADC_ConfigChannel+0x1e4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d125      	bne.n	8006ba8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d126      	bne.n	8006bb8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006b78:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b10      	cmp	r3, #16
 8006b80:	d11a      	bne.n	8006bb8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006b82:	4b13      	ldr	r3, [pc, #76]	; (8006bd0 <HAL_ADC_ConfigChannel+0x1e8>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a13      	ldr	r2, [pc, #76]	; (8006bd4 <HAL_ADC_ConfigChannel+0x1ec>)
 8006b88:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8c:	0c9a      	lsrs	r2, r3, #18
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006b98:	e002      	b.n	8006ba0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1f9      	bne.n	8006b9a <HAL_ADC_ConfigChannel+0x1b2>
 8006ba6:	e007      	b.n	8006bb8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	f043 0220 	orr.w	r2, r3, #32
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr
 8006bcc:	40012400 	.word	0x40012400
 8006bd0:	20000080 	.word	0x20000080
 8006bd4:	431bde83 	.word	0x431bde83

08006bd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d039      	beq.n	8006c6a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0201 	orr.w	r2, r2, #1
 8006c04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006c06:	4b1b      	ldr	r3, [pc, #108]	; (8006c74 <ADC_Enable+0x9c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a1b      	ldr	r2, [pc, #108]	; (8006c78 <ADC_Enable+0xa0>)
 8006c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c10:	0c9b      	lsrs	r3, r3, #18
 8006c12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006c14:	e002      	b.n	8006c1c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1f9      	bne.n	8006c16 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006c22:	f7ff fce3 	bl	80065ec <HAL_GetTick>
 8006c26:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006c28:	e018      	b.n	8006c5c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006c2a:	f7ff fcdf 	bl	80065ec <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d911      	bls.n	8006c5c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3c:	f043 0210 	orr.w	r2, r3, #16
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	f043 0201 	orr.w	r2, r3, #1
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e007      	b.n	8006c6c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d1df      	bne.n	8006c2a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20000080 	.word	0x20000080
 8006c78:	431bde83 	.word	0x431bde83

08006c7c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d127      	bne.n	8006ce6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0201 	bic.w	r2, r2, #1
 8006ca4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006ca6:	f7ff fca1 	bl	80065ec <HAL_GetTick>
 8006caa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006cac:	e014      	b.n	8006cd8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006cae:	f7ff fc9d 	bl	80065ec <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d90d      	bls.n	8006cd8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc0:	f043 0210 	orr.w	r2, r3, #16
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	f043 0201 	orr.w	r2, r3, #1
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e007      	b.n	8006ce8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d0e3      	beq.n	8006cae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d127      	bne.n	8006d5a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006d20:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006d24:	d115      	bne.n	8006d52 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d111      	bne.n	8006d52 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d105      	bne.n	8006d52 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4a:	f043 0201 	orr.w	r2, r3, #1
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f7ff fe2c 	bl	80069b0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006d58:	e004      	b.n	8006d64 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	4798      	blx	r3
}
 8006d64:	bf00      	nop
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f7ff fe21 	bl	80069c2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d80:	bf00      	nop
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da6:	f043 0204 	orr.w	r2, r3, #4
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f7ff fe10 	bl	80069d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006db4:	bf00      	nop
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e0ed      	b.n	8006faa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d102      	bne.n	8006de0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7fb f86e 	bl	8001ebc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0202 	bic.w	r2, r2, #2
 8006dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006df0:	f7ff fbfc 	bl	80065ec <HAL_GetTick>
 8006df4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006df6:	e012      	b.n	8006e1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006df8:	f7ff fbf8 	bl	80065ec <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b0a      	cmp	r3, #10
 8006e04:	d90b      	bls.n	8006e1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2205      	movs	r2, #5
 8006e16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e0c5      	b.n	8006faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e5      	bne.n	8006df8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0201 	orr.w	r2, r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e3c:	f7ff fbd6 	bl	80065ec <HAL_GetTick>
 8006e40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006e42:	e012      	b.n	8006e6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006e44:	f7ff fbd2 	bl	80065ec <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b0a      	cmp	r3, #10
 8006e50:	d90b      	bls.n	8006e6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2205      	movs	r2, #5
 8006e62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e09f      	b.n	8006faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0e5      	beq.n	8006e44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	7e1b      	ldrb	r3, [r3, #24]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d108      	bne.n	8006e92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	e007      	b.n	8006ea2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	7e5b      	ldrb	r3, [r3, #25]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d108      	bne.n	8006ebc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	e007      	b.n	8006ecc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	7e9b      	ldrb	r3, [r3, #26]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d108      	bne.n	8006ee6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f042 0220 	orr.w	r2, r2, #32
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	e007      	b.n	8006ef6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0220 	bic.w	r2, r2, #32
 8006ef4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	7edb      	ldrb	r3, [r3, #27]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d108      	bne.n	8006f10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0210 	bic.w	r2, r2, #16
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	e007      	b.n	8006f20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0210 	orr.w	r2, r2, #16
 8006f1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	7f1b      	ldrb	r3, [r3, #28]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d108      	bne.n	8006f3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0208 	orr.w	r2, r2, #8
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	e007      	b.n	8006f4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0208 	bic.w	r2, r2, #8
 8006f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	7f5b      	ldrb	r3, [r3, #29]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d108      	bne.n	8006f64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f042 0204 	orr.w	r2, r2, #4
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	e007      	b.n	8006f74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0204 	bic.w	r2, r2, #4
 8006f72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	ea42 0103 	orr.w	r1, r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	1e5a      	subs	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b087      	sub	sp, #28
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006fc8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006fca:	7cfb      	ldrb	r3, [r7, #19]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d003      	beq.n	8006fd8 <HAL_CAN_ConfigFilter+0x26>
 8006fd0:	7cfb      	ldrb	r3, [r7, #19]
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	f040 80aa 	bne.w	800712c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006fde:	f043 0201 	orr.w	r2, r3, #1
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	f003 031f 	and.w	r3, r3, #31
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	43db      	mvns	r3, r3
 8007002:	401a      	ands	r2, r3
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d123      	bne.n	800705a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	43db      	mvns	r3, r3
 800701c:	401a      	ands	r2, r3
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007034:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	3248      	adds	r2, #72	; 0x48
 800703a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800704e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007050:	6979      	ldr	r1, [r7, #20]
 8007052:	3348      	adds	r3, #72	; 0x48
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	440b      	add	r3, r1
 8007058:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d122      	bne.n	80070a8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	431a      	orrs	r2, r3
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007082:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	3248      	adds	r2, #72	; 0x48
 8007088:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800709c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800709e:	6979      	ldr	r1, [r7, #20]
 80070a0:	3348      	adds	r3, #72	; 0x48
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	440b      	add	r3, r1
 80070a6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d109      	bne.n	80070c4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	43db      	mvns	r3, r3
 80070ba:	401a      	ands	r2, r3
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80070c2:	e007      	b.n	80070d4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	431a      	orrs	r2, r3
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d109      	bne.n	80070f0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	43db      	mvns	r3, r3
 80070e6:	401a      	ands	r2, r3
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80070ee:	e007      	b.n	8007100 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	431a      	orrs	r2, r3
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d107      	bne.n	8007118 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	431a      	orrs	r2, r3
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800711e:	f023 0201 	bic.w	r2, r3, #1
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	e006      	b.n	800713a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
  }
}
 800713a:	4618      	mov	r0, r3
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr

08007144 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b01      	cmp	r3, #1
 8007156:	d12e      	bne.n	80071b6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0201 	bic.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007170:	f7ff fa3c 	bl	80065ec <HAL_GetTick>
 8007174:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007176:	e012      	b.n	800719e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007178:	f7ff fa38 	bl	80065ec <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b0a      	cmp	r3, #10
 8007184:	d90b      	bls.n	800719e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2205      	movs	r2, #5
 8007196:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e012      	b.n	80071c4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e5      	bne.n	8007178 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	e006      	b.n	80071c4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
  }
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b089      	sub	sp, #36	; 0x24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80071ea:	7ffb      	ldrb	r3, [r7, #31]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d003      	beq.n	80071f8 <HAL_CAN_AddTxMessage+0x2c>
 80071f0:	7ffb      	ldrb	r3, [r7, #31]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	f040 80b8 	bne.w	8007368 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10a      	bne.n	8007218 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007208:	2b00      	cmp	r3, #0
 800720a:	d105      	bne.n	8007218 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 80a0 	beq.w	8007358 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	0e1b      	lsrs	r3, r3, #24
 800721c:	f003 0303 	and.w	r3, r3, #3
 8007220:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b02      	cmp	r3, #2
 8007226:	d907      	bls.n	8007238 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e09e      	b.n	8007376 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007238:	2201      	movs	r2, #1
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	409a      	lsls	r2, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10d      	bne.n	8007266 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007254:	68f9      	ldr	r1, [r7, #12]
 8007256:	6809      	ldr	r1, [r1, #0]
 8007258:	431a      	orrs	r2, r3
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	3318      	adds	r3, #24
 800725e:	011b      	lsls	r3, r3, #4
 8007260:	440b      	add	r3, r1
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	e00f      	b.n	8007286 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007270:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007276:	68f9      	ldr	r1, [r7, #12]
 8007278:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800727a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	3318      	adds	r3, #24
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	440b      	add	r3, r1
 8007284:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6819      	ldr	r1, [r3, #0]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	691a      	ldr	r2, [r3, #16]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	3318      	adds	r3, #24
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	440b      	add	r3, r1
 8007296:	3304      	adds	r3, #4
 8007298:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	7d1b      	ldrb	r3, [r3, #20]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d111      	bne.n	80072c6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	3318      	adds	r3, #24
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	4413      	add	r3, r2
 80072ae:	3304      	adds	r3, #4
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	6811      	ldr	r1, [r2, #0]
 80072b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	3318      	adds	r3, #24
 80072be:	011b      	lsls	r3, r3, #4
 80072c0:	440b      	add	r3, r1
 80072c2:	3304      	adds	r3, #4
 80072c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3307      	adds	r3, #7
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	061a      	lsls	r2, r3, #24
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3306      	adds	r3, #6
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	041b      	lsls	r3, r3, #16
 80072d6:	431a      	orrs	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3305      	adds	r3, #5
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	021b      	lsls	r3, r3, #8
 80072e0:	4313      	orrs	r3, r2
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	3204      	adds	r2, #4
 80072e6:	7812      	ldrb	r2, [r2, #0]
 80072e8:	4610      	mov	r0, r2
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	6811      	ldr	r1, [r2, #0]
 80072ee:	ea43 0200 	orr.w	r2, r3, r0
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	011b      	lsls	r3, r3, #4
 80072f6:	440b      	add	r3, r1
 80072f8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80072fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3303      	adds	r3, #3
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	061a      	lsls	r2, r3, #24
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3302      	adds	r3, #2
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	041b      	lsls	r3, r3, #16
 800730e:	431a      	orrs	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	3301      	adds	r3, #1
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	021b      	lsls	r3, r3, #8
 8007318:	4313      	orrs	r3, r2
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	7812      	ldrb	r2, [r2, #0]
 800731e:	4610      	mov	r0, r2
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	6811      	ldr	r1, [r2, #0]
 8007324:	ea43 0200 	orr.w	r2, r3, r0
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	011b      	lsls	r3, r3, #4
 800732c:	440b      	add	r3, r1
 800732e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007332:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	3318      	adds	r3, #24
 800733c:	011b      	lsls	r3, r3, #4
 800733e:	4413      	add	r3, r2
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	6811      	ldr	r1, [r2, #0]
 8007346:	f043 0201 	orr.w	r2, r3, #1
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	3318      	adds	r3, #24
 800734e:	011b      	lsls	r3, r3, #4
 8007350:	440b      	add	r3, r1
 8007352:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	e00e      	b.n	8007376 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e006      	b.n	8007376 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
  }
}
 8007376:	4618      	mov	r0, r3
 8007378:	3724      	adds	r7, #36	; 0x24
 800737a:	46bd      	mov	sp, r7
 800737c:	bc80      	pop	{r7}
 800737e:	4770      	bx	lr

08007380 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007392:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007394:	7afb      	ldrb	r3, [r7, #11]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d002      	beq.n	80073a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800739a:	7afb      	ldrb	r3, [r7, #11]
 800739c:	2b02      	cmp	r3, #2
 800739e:	d11d      	bne.n	80073dc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3301      	adds	r3, #1
 80073b2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3301      	adds	r3, #1
 80073c6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3301      	adds	r3, #1
 80073da:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80073dc:	68fb      	ldr	r3, [r7, #12]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bc80      	pop	{r7}
 80073e6:	4770      	bx	lr

080073e8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073fc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80073fe:	7dfb      	ldrb	r3, [r7, #23]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d003      	beq.n	800740c <HAL_CAN_GetRxMessage+0x24>
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	2b02      	cmp	r3, #2
 8007408:	f040 80f3 	bne.w	80075f2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10e      	bne.n	8007430 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d116      	bne.n	800744e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e0e7      	b.n	8007600 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d107      	bne.n	800744e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e0d8      	b.n	8007600 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	331b      	adds	r3, #27
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	4413      	add	r3, r2
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0204 	and.w	r2, r3, #4
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10c      	bne.n	8007486 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	331b      	adds	r3, #27
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	4413      	add	r3, r2
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	0d5b      	lsrs	r3, r3, #21
 800747c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	e00b      	b.n	800749e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	331b      	adds	r3, #27
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	4413      	add	r3, r2
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	08db      	lsrs	r3, r3, #3
 8007496:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	331b      	adds	r3, #27
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	4413      	add	r3, r2
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0202 	and.w	r2, r3, #2
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	331b      	adds	r3, #27
 80074bc:	011b      	lsls	r3, r3, #4
 80074be:	4413      	add	r3, r2
 80074c0:	3304      	adds	r3, #4
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 020f 	and.w	r2, r3, #15
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	331b      	adds	r3, #27
 80074d4:	011b      	lsls	r3, r3, #4
 80074d6:	4413      	add	r3, r2
 80074d8:	3304      	adds	r3, #4
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	0a1b      	lsrs	r3, r3, #8
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	331b      	adds	r3, #27
 80074ec:	011b      	lsls	r3, r3, #4
 80074ee:	4413      	add	r3, r2
 80074f0:	3304      	adds	r3, #4
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	0c1b      	lsrs	r3, r3, #16
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	011b      	lsls	r3, r3, #4
 8007504:	4413      	add	r3, r2
 8007506:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	b2da      	uxtb	r2, r3
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	011b      	lsls	r3, r3, #4
 800751a:	4413      	add	r3, r2
 800751c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	0a1a      	lsrs	r2, r3, #8
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	3301      	adds	r3, #1
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	011b      	lsls	r3, r3, #4
 8007534:	4413      	add	r3, r2
 8007536:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	0c1a      	lsrs	r2, r3, #16
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	3302      	adds	r3, #2
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	4413      	add	r3, r2
 8007550:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	0e1a      	lsrs	r2, r3, #24
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	3303      	adds	r3, #3
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	4413      	add	r3, r2
 800756a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	3304      	adds	r3, #4
 8007574:	b2d2      	uxtb	r2, r2
 8007576:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	4413      	add	r3, r2
 8007582:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	0a1a      	lsrs	r2, r3, #8
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	3305      	adds	r3, #5
 800758e:	b2d2      	uxtb	r2, r2
 8007590:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	011b      	lsls	r3, r3, #4
 800759a:	4413      	add	r3, r2
 800759c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	0c1a      	lsrs	r2, r3, #16
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	3306      	adds	r3, #6
 80075a8:	b2d2      	uxtb	r2, r2
 80075aa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	011b      	lsls	r3, r3, #4
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	0e1a      	lsrs	r2, r3, #24
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	3307      	adds	r3, #7
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d108      	bne.n	80075de <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f042 0220 	orr.w	r2, r2, #32
 80075da:	60da      	str	r2, [r3, #12]
 80075dc:	e007      	b.n	80075ee <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	691a      	ldr	r2, [r3, #16]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0220 	orr.w	r2, r2, #32
 80075ec:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	e006      	b.n	8007600 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
  }
}
 8007600:	4618      	mov	r0, r3
 8007602:	371c      	adds	r7, #28
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr

0800760a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b08a      	sub	sp, #40	; 0x28
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007612:	2300      	movs	r3, #0
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d07c      	beq.n	800774a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d023      	beq.n	80076a2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2201      	movs	r2, #1
 8007660:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f97d 	bl	800796c <HAL_CAN_TxMailbox0CompleteCallback>
 8007672:	e016      	b.n	80076a2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	f003 0304 	and.w	r3, r3, #4
 800767a:	2b00      	cmp	r3, #0
 800767c:	d004      	beq.n	8007688 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007684:	627b      	str	r3, [r7, #36]	; 0x24
 8007686:	e00c      	b.n	80076a2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	f003 0308 	and.w	r3, r3, #8
 800768e:	2b00      	cmp	r3, #0
 8007690:	d004      	beq.n	800769c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007698:	627b      	str	r3, [r7, #36]	; 0x24
 800769a:	e002      	b.n	80076a2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f980 	bl	80079a2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d024      	beq.n	80076f6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d003      	beq.n	80076c8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f95c 	bl	800797e <HAL_CAN_TxMailbox1CompleteCallback>
 80076c6:	e016      	b.n	80076f6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d004      	beq.n	80076dc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24
 80076da:	e00c      	b.n	80076f6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d004      	beq.n	80076f0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076ec:	627b      	str	r3, [r7, #36]	; 0x24
 80076ee:	e002      	b.n	80076f6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f95f 	bl	80079b4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d024      	beq.n	800774a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007708:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f93b 	bl	8007990 <HAL_CAN_TxMailbox2CompleteCallback>
 800771a:	e016      	b.n	800774a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d004      	beq.n	8007730 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800772c:	627b      	str	r3, [r7, #36]	; 0x24
 800772e:	e00c      	b.n	800774a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d004      	beq.n	8007744 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007740:	627b      	str	r3, [r7, #36]	; 0x24
 8007742:	e002      	b.n	800774a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f93e 	bl	80079c6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	f003 0308 	and.w	r3, r3, #8
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00c      	beq.n	800776e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f003 0310 	and.w	r3, r3, #16
 800775a:	2b00      	cmp	r3, #0
 800775c:	d007      	beq.n	800776e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007764:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2210      	movs	r2, #16
 800776c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	f003 0304 	and.w	r3, r3, #4
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00b      	beq.n	8007790 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f003 0308 	and.w	r3, r3, #8
 800777e:	2b00      	cmp	r3, #0
 8007780:	d006      	beq.n	8007790 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2208      	movs	r2, #8
 8007788:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f92d 	bl	80079ea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d009      	beq.n	80077ae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	f003 0303 	and.w	r3, r3, #3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f915 	bl	80079d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00c      	beq.n	80077d2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f003 0310 	and.w	r3, r3, #16
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d007      	beq.n	80077d2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2210      	movs	r2, #16
 80077d0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00b      	beq.n	80077f4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f003 0308 	and.w	r3, r3, #8
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d006      	beq.n	80077f4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2208      	movs	r2, #8
 80077ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f90d 	bl	8007a0e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	f003 0310 	and.w	r3, r3, #16
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d009      	beq.n	8007812 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f003 0303 	and.w	r3, r3, #3
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f8f5 	bl	80079fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00b      	beq.n	8007834 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f003 0310 	and.w	r3, r3, #16
 8007822:	2b00      	cmp	r3, #0
 8007824:	d006      	beq.n	8007834 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2210      	movs	r2, #16
 800782c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f8f6 	bl	8007a20 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00b      	beq.n	8007856 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d006      	beq.n	8007856 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2208      	movs	r2, #8
 800784e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f8ee 	bl	8007a32 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d075      	beq.n	800794c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	f003 0304 	and.w	r3, r3, #4
 8007866:	2b00      	cmp	r3, #0
 8007868:	d06c      	beq.n	8007944 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007870:	2b00      	cmp	r3, #0
 8007872:	d008      	beq.n	8007886 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	f043 0301 	orr.w	r3, r3, #1
 8007884:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800788c:	2b00      	cmp	r3, #0
 800788e:	d008      	beq.n	80078a2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	f043 0302 	orr.w	r3, r3, #2
 80078a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d008      	beq.n	80078be <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d003      	beq.n	80078be <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	f043 0304 	orr.w	r3, r3, #4
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d03d      	beq.n	8007944 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d038      	beq.n	8007944 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078d8:	2b30      	cmp	r3, #48	; 0x30
 80078da:	d017      	beq.n	800790c <HAL_CAN_IRQHandler+0x302>
 80078dc:	2b30      	cmp	r3, #48	; 0x30
 80078de:	d804      	bhi.n	80078ea <HAL_CAN_IRQHandler+0x2e0>
 80078e0:	2b10      	cmp	r3, #16
 80078e2:	d009      	beq.n	80078f8 <HAL_CAN_IRQHandler+0x2ee>
 80078e4:	2b20      	cmp	r3, #32
 80078e6:	d00c      	beq.n	8007902 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80078e8:	e024      	b.n	8007934 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80078ea:	2b50      	cmp	r3, #80	; 0x50
 80078ec:	d018      	beq.n	8007920 <HAL_CAN_IRQHandler+0x316>
 80078ee:	2b60      	cmp	r3, #96	; 0x60
 80078f0:	d01b      	beq.n	800792a <HAL_CAN_IRQHandler+0x320>
 80078f2:	2b40      	cmp	r3, #64	; 0x40
 80078f4:	d00f      	beq.n	8007916 <HAL_CAN_IRQHandler+0x30c>
            break;
 80078f6:	e01d      	b.n	8007934 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	f043 0308 	orr.w	r3, r3, #8
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007900:	e018      	b.n	8007934 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	f043 0310 	orr.w	r3, r3, #16
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800790a:	e013      	b.n	8007934 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	f043 0320 	orr.w	r3, r3, #32
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007914:	e00e      	b.n	8007934 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800791c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800791e:	e009      	b.n	8007934 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007928:	e004      	b.n	8007934 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007930:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007932:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	699a      	ldr	r2, [r3, #24]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007942:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2204      	movs	r2, #4
 800794a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	2b00      	cmp	r3, #0
 8007950:	d008      	beq.n	8007964 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	431a      	orrs	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f870 	bl	8007a44 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007964:	bf00      	nop
 8007966:	3728      	adds	r7, #40	; 0x28
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	bc80      	pop	{r7}
 800797c:	4770      	bx	lr

0800797e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	bc80      	pop	{r7}
 800798e:	4770      	bx	lr

08007990 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr

080079a2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bc80      	pop	{r7}
 80079b2:	4770      	bx	lr

080079b4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bc80      	pop	{r7}
 80079c4:	4770      	bx	lr

080079c6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bc80      	pop	{r7}
 80079d6:	4770      	bx	lr

080079d8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc80      	pop	{r7}
 80079e8:	4770      	bx	lr

080079ea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bc80      	pop	{r7}
 80079fa:	4770      	bx	lr

080079fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bc80      	pop	{r7}
 8007a0c:	4770      	bx	lr

08007a0e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bc80      	pop	{r7}
 8007a1e:	4770      	bx	lr

08007a20 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr

08007a32 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bc80      	pop	{r7}
 8007a42:	4770      	bx	lr

08007a44 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr
	...

08007a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a68:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <__NVIC_SetPriorityGrouping+0x44>)
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007a74:	4013      	ands	r3, r2
 8007a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a8a:	4a04      	ldr	r2, [pc, #16]	; (8007a9c <__NVIC_SetPriorityGrouping+0x44>)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	60d3      	str	r3, [r2, #12]
}
 8007a90:	bf00      	nop
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bc80      	pop	{r7}
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	e000ed00 	.word	0xe000ed00

08007aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007aa4:	4b04      	ldr	r3, [pc, #16]	; (8007ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	0a1b      	lsrs	r3, r3, #8
 8007aaa:	f003 0307 	and.w	r3, r3, #7
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bc80      	pop	{r7}
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	e000ed00 	.word	0xe000ed00

08007abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	db0b      	blt.n	8007ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	f003 021f 	and.w	r2, r3, #31
 8007ad4:	4906      	ldr	r1, [pc, #24]	; (8007af0 <__NVIC_EnableIRQ+0x34>)
 8007ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ada:	095b      	lsrs	r3, r3, #5
 8007adc:	2001      	movs	r0, #1
 8007ade:	fa00 f202 	lsl.w	r2, r0, r2
 8007ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007ae6:	bf00      	nop
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bc80      	pop	{r7}
 8007aee:	4770      	bx	lr
 8007af0:	e000e100 	.word	0xe000e100

08007af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	6039      	str	r1, [r7, #0]
 8007afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	db0a      	blt.n	8007b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	490c      	ldr	r1, [pc, #48]	; (8007b40 <__NVIC_SetPriority+0x4c>)
 8007b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b12:	0112      	lsls	r2, r2, #4
 8007b14:	b2d2      	uxtb	r2, r2
 8007b16:	440b      	add	r3, r1
 8007b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b1c:	e00a      	b.n	8007b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	4908      	ldr	r1, [pc, #32]	; (8007b44 <__NVIC_SetPriority+0x50>)
 8007b24:	79fb      	ldrb	r3, [r7, #7]
 8007b26:	f003 030f 	and.w	r3, r3, #15
 8007b2a:	3b04      	subs	r3, #4
 8007b2c:	0112      	lsls	r2, r2, #4
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	440b      	add	r3, r1
 8007b32:	761a      	strb	r2, [r3, #24]
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	e000e100 	.word	0xe000e100
 8007b44:	e000ed00 	.word	0xe000ed00

08007b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b089      	sub	sp, #36	; 0x24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	f1c3 0307 	rsb	r3, r3, #7
 8007b62:	2b04      	cmp	r3, #4
 8007b64:	bf28      	it	cs
 8007b66:	2304      	movcs	r3, #4
 8007b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	2b06      	cmp	r3, #6
 8007b70:	d902      	bls.n	8007b78 <NVIC_EncodePriority+0x30>
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	3b03      	subs	r3, #3
 8007b76:	e000      	b.n	8007b7a <NVIC_EncodePriority+0x32>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	fa02 f303 	lsl.w	r3, r2, r3
 8007b86:	43da      	mvns	r2, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	401a      	ands	r2, r3
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b90:	f04f 31ff 	mov.w	r1, #4294967295
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9a:	43d9      	mvns	r1, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ba0:	4313      	orrs	r3, r2
         );
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3724      	adds	r7, #36	; 0x24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bc80      	pop	{r7}
 8007baa:	4770      	bx	lr

08007bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bbc:	d301      	bcc.n	8007bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e00f      	b.n	8007be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007bc2:	4a0a      	ldr	r2, [pc, #40]	; (8007bec <SysTick_Config+0x40>)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007bca:	210f      	movs	r1, #15
 8007bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd0:	f7ff ff90 	bl	8007af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007bd4:	4b05      	ldr	r3, [pc, #20]	; (8007bec <SysTick_Config+0x40>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007bda:	4b04      	ldr	r3, [pc, #16]	; (8007bec <SysTick_Config+0x40>)
 8007bdc:	2207      	movs	r2, #7
 8007bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	e000e010 	.word	0xe000e010

08007bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff ff2d 	bl	8007a58 <__NVIC_SetPriorityGrouping>
}
 8007bfe:	bf00      	nop
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b086      	sub	sp, #24
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	607a      	str	r2, [r7, #4]
 8007c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c18:	f7ff ff42 	bl	8007aa0 <__NVIC_GetPriorityGrouping>
 8007c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	68b9      	ldr	r1, [r7, #8]
 8007c22:	6978      	ldr	r0, [r7, #20]
 8007c24:	f7ff ff90 	bl	8007b48 <NVIC_EncodePriority>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff ff5f 	bl	8007af4 <__NVIC_SetPriority>
}
 8007c36:	bf00      	nop
 8007c38:	3718      	adds	r7, #24
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	4603      	mov	r3, r0
 8007c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff ff35 	bl	8007abc <__NVIC_EnableIRQ>
}
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff ffa2 	bl	8007bac <SysTick_Config>
 8007c68:	4603      	mov	r3, r0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e043      	b.n	8007d12 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	4b22      	ldr	r3, [pc, #136]	; (8007d1c <HAL_DMA_Init+0xa8>)
 8007c92:	4413      	add	r3, r2
 8007c94:	4a22      	ldr	r2, [pc, #136]	; (8007d20 <HAL_DMA_Init+0xac>)
 8007c96:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9a:	091b      	lsrs	r3, r3, #4
 8007c9c:	009a      	lsls	r2, r3, #2
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a1f      	ldr	r2, [pc, #124]	; (8007d24 <HAL_DMA_Init+0xb0>)
 8007ca6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2202      	movs	r2, #2
 8007cac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007cbe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007cc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ce4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc80      	pop	{r7}
 8007d1a:	4770      	bx	lr
 8007d1c:	bffdfff8 	.word	0xbffdfff8
 8007d20:	cccccccd 	.word	0xcccccccd
 8007d24:	40020000 	.word	0x40020000

08007d28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d101      	bne.n	8007d48 <HAL_DMA_Start_IT+0x20>
 8007d44:	2302      	movs	r3, #2
 8007d46:	e04a      	b.n	8007dde <HAL_DMA_Start_IT+0xb6>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d13a      	bne.n	8007dd0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 0201 	bic.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	68b9      	ldr	r1, [r7, #8]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 f938 	bl	8007ff4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d008      	beq.n	8007d9e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 020e 	orr.w	r2, r2, #14
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	e00f      	b.n	8007dbe <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0204 	bic.w	r2, r2, #4
 8007dac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 020a 	orr.w	r2, r2, #10
 8007dbc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f042 0201 	orr.w	r2, r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	e005      	b.n	8007ddc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007dd8:	2302      	movs	r3, #2
 8007dda:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e04:	2204      	movs	r2, #4
 8007e06:	409a      	lsls	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d04f      	beq.n	8007eb0 <HAL_DMA_IRQHandler+0xc8>
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f003 0304 	and.w	r3, r3, #4
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d04a      	beq.n	8007eb0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0320 	and.w	r3, r3, #32
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d107      	bne.n	8007e38 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 0204 	bic.w	r2, r2, #4
 8007e36:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a66      	ldr	r2, [pc, #408]	; (8007fd8 <HAL_DMA_IRQHandler+0x1f0>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d029      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xae>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a65      	ldr	r2, [pc, #404]	; (8007fdc <HAL_DMA_IRQHandler+0x1f4>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d022      	beq.n	8007e92 <HAL_DMA_IRQHandler+0xaa>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a63      	ldr	r2, [pc, #396]	; (8007fe0 <HAL_DMA_IRQHandler+0x1f8>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d01a      	beq.n	8007e8c <HAL_DMA_IRQHandler+0xa4>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a62      	ldr	r2, [pc, #392]	; (8007fe4 <HAL_DMA_IRQHandler+0x1fc>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d012      	beq.n	8007e86 <HAL_DMA_IRQHandler+0x9e>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a60      	ldr	r2, [pc, #384]	; (8007fe8 <HAL_DMA_IRQHandler+0x200>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00a      	beq.n	8007e80 <HAL_DMA_IRQHandler+0x98>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a5f      	ldr	r2, [pc, #380]	; (8007fec <HAL_DMA_IRQHandler+0x204>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d102      	bne.n	8007e7a <HAL_DMA_IRQHandler+0x92>
 8007e74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e78:	e00e      	b.n	8007e98 <HAL_DMA_IRQHandler+0xb0>
 8007e7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007e7e:	e00b      	b.n	8007e98 <HAL_DMA_IRQHandler+0xb0>
 8007e80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007e84:	e008      	b.n	8007e98 <HAL_DMA_IRQHandler+0xb0>
 8007e86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e8a:	e005      	b.n	8007e98 <HAL_DMA_IRQHandler+0xb0>
 8007e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e90:	e002      	b.n	8007e98 <HAL_DMA_IRQHandler+0xb0>
 8007e92:	2340      	movs	r3, #64	; 0x40
 8007e94:	e000      	b.n	8007e98 <HAL_DMA_IRQHandler+0xb0>
 8007e96:	2304      	movs	r3, #4
 8007e98:	4a55      	ldr	r2, [pc, #340]	; (8007ff0 <HAL_DMA_IRQHandler+0x208>)
 8007e9a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 8094 	beq.w	8007fce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007eae:	e08e      	b.n	8007fce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	409a      	lsls	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4013      	ands	r3, r2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d056      	beq.n	8007f6e <HAL_DMA_IRQHandler+0x186>
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d051      	beq.n	8007f6e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0320 	and.w	r3, r3, #32
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10b      	bne.n	8007ef0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 020a 	bic.w	r2, r2, #10
 8007ee6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a38      	ldr	r2, [pc, #224]	; (8007fd8 <HAL_DMA_IRQHandler+0x1f0>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d029      	beq.n	8007f4e <HAL_DMA_IRQHandler+0x166>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a37      	ldr	r2, [pc, #220]	; (8007fdc <HAL_DMA_IRQHandler+0x1f4>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d022      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x162>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a35      	ldr	r2, [pc, #212]	; (8007fe0 <HAL_DMA_IRQHandler+0x1f8>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d01a      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x15c>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a34      	ldr	r2, [pc, #208]	; (8007fe4 <HAL_DMA_IRQHandler+0x1fc>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d012      	beq.n	8007f3e <HAL_DMA_IRQHandler+0x156>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a32      	ldr	r2, [pc, #200]	; (8007fe8 <HAL_DMA_IRQHandler+0x200>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d00a      	beq.n	8007f38 <HAL_DMA_IRQHandler+0x150>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a31      	ldr	r2, [pc, #196]	; (8007fec <HAL_DMA_IRQHandler+0x204>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d102      	bne.n	8007f32 <HAL_DMA_IRQHandler+0x14a>
 8007f2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007f30:	e00e      	b.n	8007f50 <HAL_DMA_IRQHandler+0x168>
 8007f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f36:	e00b      	b.n	8007f50 <HAL_DMA_IRQHandler+0x168>
 8007f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f3c:	e008      	b.n	8007f50 <HAL_DMA_IRQHandler+0x168>
 8007f3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f42:	e005      	b.n	8007f50 <HAL_DMA_IRQHandler+0x168>
 8007f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f48:	e002      	b.n	8007f50 <HAL_DMA_IRQHandler+0x168>
 8007f4a:	2320      	movs	r3, #32
 8007f4c:	e000      	b.n	8007f50 <HAL_DMA_IRQHandler+0x168>
 8007f4e:	2302      	movs	r3, #2
 8007f50:	4a27      	ldr	r2, [pc, #156]	; (8007ff0 <HAL_DMA_IRQHandler+0x208>)
 8007f52:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d034      	beq.n	8007fce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007f6c:	e02f      	b.n	8007fce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	2208      	movs	r2, #8
 8007f74:	409a      	lsls	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4013      	ands	r3, r2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d028      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x1e8>
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f003 0308 	and.w	r3, r3, #8
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d023      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 020e 	bic.w	r2, r2, #14
 8007f96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8007fa6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d004      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	4798      	blx	r3
    }
  }
  return;
 8007fce:	bf00      	nop
 8007fd0:	bf00      	nop
}
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	40020008 	.word	0x40020008
 8007fdc:	4002001c 	.word	0x4002001c
 8007fe0:	40020030 	.word	0x40020030
 8007fe4:	40020044 	.word	0x40020044
 8007fe8:	40020058 	.word	0x40020058
 8007fec:	4002006c 	.word	0x4002006c
 8007ff0:	40020000 	.word	0x40020000

08007ff4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800800a:	2101      	movs	r1, #1
 800800c:	fa01 f202 	lsl.w	r2, r1, r2
 8008010:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	2b10      	cmp	r3, #16
 8008020:	d108      	bne.n	8008034 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008032:	e007      	b.n	8008044 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	60da      	str	r2, [r3, #12]
}
 8008044:	bf00      	nop
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	bc80      	pop	{r7}
 800804c:	4770      	bx	lr
	...

08008050 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800805a:	4b0d      	ldr	r3, [pc, #52]	; (8008090 <HAL_FLASH_Unlock+0x40>)
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00d      	beq.n	8008082 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008066:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <HAL_FLASH_Unlock+0x40>)
 8008068:	4a0a      	ldr	r2, [pc, #40]	; (8008094 <HAL_FLASH_Unlock+0x44>)
 800806a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800806c:	4b08      	ldr	r3, [pc, #32]	; (8008090 <HAL_FLASH_Unlock+0x40>)
 800806e:	4a0a      	ldr	r2, [pc, #40]	; (8008098 <HAL_FLASH_Unlock+0x48>)
 8008070:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008072:	4b07      	ldr	r3, [pc, #28]	; (8008090 <HAL_FLASH_Unlock+0x40>)
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8008082:	79fb      	ldrb	r3, [r7, #7]
}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	bc80      	pop	{r7}
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	40022000 	.word	0x40022000
 8008094:	45670123 	.word	0x45670123
 8008098:	cdef89ab 	.word	0xcdef89ab

0800809c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800809c:	b480      	push	{r7}
 800809e:	b08b      	sub	sp, #44	; 0x2c
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80080a6:	2300      	movs	r3, #0
 80080a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80080aa:	2300      	movs	r3, #0
 80080ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080ae:	e127      	b.n	8008300 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80080b0:	2201      	movs	r2, #1
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	fa02 f303 	lsl.w	r3, r2, r3
 80080b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	69fa      	ldr	r2, [r7, #28]
 80080c0:	4013      	ands	r3, r2
 80080c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	f040 8116 	bne.w	80082fa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	2b12      	cmp	r3, #18
 80080d4:	d034      	beq.n	8008140 <HAL_GPIO_Init+0xa4>
 80080d6:	2b12      	cmp	r3, #18
 80080d8:	d80d      	bhi.n	80080f6 <HAL_GPIO_Init+0x5a>
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d02b      	beq.n	8008136 <HAL_GPIO_Init+0x9a>
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d804      	bhi.n	80080ec <HAL_GPIO_Init+0x50>
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d031      	beq.n	800814a <HAL_GPIO_Init+0xae>
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d01c      	beq.n	8008124 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80080ea:	e048      	b.n	800817e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d043      	beq.n	8008178 <HAL_GPIO_Init+0xdc>
 80080f0:	2b11      	cmp	r3, #17
 80080f2:	d01b      	beq.n	800812c <HAL_GPIO_Init+0x90>
          break;
 80080f4:	e043      	b.n	800817e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80080f6:	4a89      	ldr	r2, [pc, #548]	; (800831c <HAL_GPIO_Init+0x280>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d026      	beq.n	800814a <HAL_GPIO_Init+0xae>
 80080fc:	4a87      	ldr	r2, [pc, #540]	; (800831c <HAL_GPIO_Init+0x280>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d806      	bhi.n	8008110 <HAL_GPIO_Init+0x74>
 8008102:	4a87      	ldr	r2, [pc, #540]	; (8008320 <HAL_GPIO_Init+0x284>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d020      	beq.n	800814a <HAL_GPIO_Init+0xae>
 8008108:	4a86      	ldr	r2, [pc, #536]	; (8008324 <HAL_GPIO_Init+0x288>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d01d      	beq.n	800814a <HAL_GPIO_Init+0xae>
          break;
 800810e:	e036      	b.n	800817e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008110:	4a85      	ldr	r2, [pc, #532]	; (8008328 <HAL_GPIO_Init+0x28c>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d019      	beq.n	800814a <HAL_GPIO_Init+0xae>
 8008116:	4a85      	ldr	r2, [pc, #532]	; (800832c <HAL_GPIO_Init+0x290>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d016      	beq.n	800814a <HAL_GPIO_Init+0xae>
 800811c:	4a84      	ldr	r2, [pc, #528]	; (8008330 <HAL_GPIO_Init+0x294>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d013      	beq.n	800814a <HAL_GPIO_Init+0xae>
          break;
 8008122:	e02c      	b.n	800817e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	623b      	str	r3, [r7, #32]
          break;
 800812a:	e028      	b.n	800817e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	3304      	adds	r3, #4
 8008132:	623b      	str	r3, [r7, #32]
          break;
 8008134:	e023      	b.n	800817e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	3308      	adds	r3, #8
 800813c:	623b      	str	r3, [r7, #32]
          break;
 800813e:	e01e      	b.n	800817e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	330c      	adds	r3, #12
 8008146:	623b      	str	r3, [r7, #32]
          break;
 8008148:	e019      	b.n	800817e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d102      	bne.n	8008158 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008152:	2304      	movs	r3, #4
 8008154:	623b      	str	r3, [r7, #32]
          break;
 8008156:	e012      	b.n	800817e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d105      	bne.n	800816c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008160:	2308      	movs	r3, #8
 8008162:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	611a      	str	r2, [r3, #16]
          break;
 800816a:	e008      	b.n	800817e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800816c:	2308      	movs	r3, #8
 800816e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	615a      	str	r2, [r3, #20]
          break;
 8008176:	e002      	b.n	800817e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008178:	2300      	movs	r3, #0
 800817a:	623b      	str	r3, [r7, #32]
          break;
 800817c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	2bff      	cmp	r3, #255	; 0xff
 8008182:	d801      	bhi.n	8008188 <HAL_GPIO_Init+0xec>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	e001      	b.n	800818c <HAL_GPIO_Init+0xf0>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3304      	adds	r3, #4
 800818c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	2bff      	cmp	r3, #255	; 0xff
 8008192:	d802      	bhi.n	800819a <HAL_GPIO_Init+0xfe>
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	e002      	b.n	80081a0 <HAL_GPIO_Init+0x104>
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819c:	3b08      	subs	r3, #8
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	210f      	movs	r1, #15
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	fa01 f303 	lsl.w	r3, r1, r3
 80081ae:	43db      	mvns	r3, r3
 80081b0:	401a      	ands	r2, r3
 80081b2:	6a39      	ldr	r1, [r7, #32]
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	fa01 f303 	lsl.w	r3, r1, r3
 80081ba:	431a      	orrs	r2, r3
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 8096 	beq.w	80082fa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80081ce:	4b59      	ldr	r3, [pc, #356]	; (8008334 <HAL_GPIO_Init+0x298>)
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	4a58      	ldr	r2, [pc, #352]	; (8008334 <HAL_GPIO_Init+0x298>)
 80081d4:	f043 0301 	orr.w	r3, r3, #1
 80081d8:	6193      	str	r3, [r2, #24]
 80081da:	4b56      	ldr	r3, [pc, #344]	; (8008334 <HAL_GPIO_Init+0x298>)
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	60bb      	str	r3, [r7, #8]
 80081e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80081e6:	4a54      	ldr	r2, [pc, #336]	; (8008338 <HAL_GPIO_Init+0x29c>)
 80081e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ea:	089b      	lsrs	r3, r3, #2
 80081ec:	3302      	adds	r3, #2
 80081ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081f2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	220f      	movs	r2, #15
 80081fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008202:	43db      	mvns	r3, r3
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	4013      	ands	r3, r2
 8008208:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a4b      	ldr	r2, [pc, #300]	; (800833c <HAL_GPIO_Init+0x2a0>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d013      	beq.n	800823a <HAL_GPIO_Init+0x19e>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a4a      	ldr	r2, [pc, #296]	; (8008340 <HAL_GPIO_Init+0x2a4>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d00d      	beq.n	8008236 <HAL_GPIO_Init+0x19a>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a49      	ldr	r2, [pc, #292]	; (8008344 <HAL_GPIO_Init+0x2a8>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d007      	beq.n	8008232 <HAL_GPIO_Init+0x196>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a48      	ldr	r2, [pc, #288]	; (8008348 <HAL_GPIO_Init+0x2ac>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d101      	bne.n	800822e <HAL_GPIO_Init+0x192>
 800822a:	2303      	movs	r3, #3
 800822c:	e006      	b.n	800823c <HAL_GPIO_Init+0x1a0>
 800822e:	2304      	movs	r3, #4
 8008230:	e004      	b.n	800823c <HAL_GPIO_Init+0x1a0>
 8008232:	2302      	movs	r3, #2
 8008234:	e002      	b.n	800823c <HAL_GPIO_Init+0x1a0>
 8008236:	2301      	movs	r3, #1
 8008238:	e000      	b.n	800823c <HAL_GPIO_Init+0x1a0>
 800823a:	2300      	movs	r3, #0
 800823c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823e:	f002 0203 	and.w	r2, r2, #3
 8008242:	0092      	lsls	r2, r2, #2
 8008244:	4093      	lsls	r3, r2
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	4313      	orrs	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800824c:	493a      	ldr	r1, [pc, #232]	; (8008338 <HAL_GPIO_Init+0x29c>)
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	089b      	lsrs	r3, r3, #2
 8008252:	3302      	adds	r3, #2
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d006      	beq.n	8008274 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008266:	4b39      	ldr	r3, [pc, #228]	; (800834c <HAL_GPIO_Init+0x2b0>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	4938      	ldr	r1, [pc, #224]	; (800834c <HAL_GPIO_Init+0x2b0>)
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	4313      	orrs	r3, r2
 8008270:	600b      	str	r3, [r1, #0]
 8008272:	e006      	b.n	8008282 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008274:	4b35      	ldr	r3, [pc, #212]	; (800834c <HAL_GPIO_Init+0x2b0>)
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	43db      	mvns	r3, r3
 800827c:	4933      	ldr	r1, [pc, #204]	; (800834c <HAL_GPIO_Init+0x2b0>)
 800827e:	4013      	ands	r3, r2
 8008280:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d006      	beq.n	800829c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800828e:	4b2f      	ldr	r3, [pc, #188]	; (800834c <HAL_GPIO_Init+0x2b0>)
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	492e      	ldr	r1, [pc, #184]	; (800834c <HAL_GPIO_Init+0x2b0>)
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	4313      	orrs	r3, r2
 8008298:	604b      	str	r3, [r1, #4]
 800829a:	e006      	b.n	80082aa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800829c:	4b2b      	ldr	r3, [pc, #172]	; (800834c <HAL_GPIO_Init+0x2b0>)
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	43db      	mvns	r3, r3
 80082a4:	4929      	ldr	r1, [pc, #164]	; (800834c <HAL_GPIO_Init+0x2b0>)
 80082a6:	4013      	ands	r3, r2
 80082a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d006      	beq.n	80082c4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80082b6:	4b25      	ldr	r3, [pc, #148]	; (800834c <HAL_GPIO_Init+0x2b0>)
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	4924      	ldr	r1, [pc, #144]	; (800834c <HAL_GPIO_Init+0x2b0>)
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	4313      	orrs	r3, r2
 80082c0:	608b      	str	r3, [r1, #8]
 80082c2:	e006      	b.n	80082d2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80082c4:	4b21      	ldr	r3, [pc, #132]	; (800834c <HAL_GPIO_Init+0x2b0>)
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	43db      	mvns	r3, r3
 80082cc:	491f      	ldr	r1, [pc, #124]	; (800834c <HAL_GPIO_Init+0x2b0>)
 80082ce:	4013      	ands	r3, r2
 80082d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d006      	beq.n	80082ec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80082de:	4b1b      	ldr	r3, [pc, #108]	; (800834c <HAL_GPIO_Init+0x2b0>)
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	491a      	ldr	r1, [pc, #104]	; (800834c <HAL_GPIO_Init+0x2b0>)
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	60cb      	str	r3, [r1, #12]
 80082ea:	e006      	b.n	80082fa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80082ec:	4b17      	ldr	r3, [pc, #92]	; (800834c <HAL_GPIO_Init+0x2b0>)
 80082ee:	68da      	ldr	r2, [r3, #12]
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	43db      	mvns	r3, r3
 80082f4:	4915      	ldr	r1, [pc, #84]	; (800834c <HAL_GPIO_Init+0x2b0>)
 80082f6:	4013      	ands	r3, r2
 80082f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	3301      	adds	r3, #1
 80082fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	fa22 f303 	lsr.w	r3, r2, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	f47f aed0 	bne.w	80080b0 <HAL_GPIO_Init+0x14>
  }
}
 8008310:	bf00      	nop
 8008312:	372c      	adds	r7, #44	; 0x2c
 8008314:	46bd      	mov	sp, r7
 8008316:	bc80      	pop	{r7}
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	10210000 	.word	0x10210000
 8008320:	10110000 	.word	0x10110000
 8008324:	10120000 	.word	0x10120000
 8008328:	10310000 	.word	0x10310000
 800832c:	10320000 	.word	0x10320000
 8008330:	10220000 	.word	0x10220000
 8008334:	40021000 	.word	0x40021000
 8008338:	40010000 	.word	0x40010000
 800833c:	40010800 	.word	0x40010800
 8008340:	40010c00 	.word	0x40010c00
 8008344:	40011000 	.word	0x40011000
 8008348:	40011400 	.word	0x40011400
 800834c:	40010400 	.word	0x40010400

08008350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	887b      	ldrh	r3, [r7, #2]
 8008362:	4013      	ands	r3, r2
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008368:	2301      	movs	r3, #1
 800836a:	73fb      	strb	r3, [r7, #15]
 800836c:	e001      	b.n	8008372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800836e:	2300      	movs	r3, #0
 8008370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008372:	7bfb      	ldrb	r3, [r7, #15]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	bc80      	pop	{r7}
 800837c:	4770      	bx	lr

0800837e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800837e:	b480      	push	{r7}
 8008380:	b083      	sub	sp, #12
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	460b      	mov	r3, r1
 8008388:	807b      	strh	r3, [r7, #2]
 800838a:	4613      	mov	r3, r2
 800838c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800838e:	787b      	ldrb	r3, [r7, #1]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008394:	887a      	ldrh	r2, [r7, #2]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800839a:	e003      	b.n	80083a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800839c:	887b      	ldrh	r3, [r7, #2]
 800839e:	041a      	lsls	r2, r3, #16
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	611a      	str	r2, [r3, #16]
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bc80      	pop	{r7}
 80083ac:	4770      	bx	lr

080083ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	460b      	mov	r3, r1
 80083b8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68da      	ldr	r2, [r3, #12]
 80083be:	887b      	ldrh	r3, [r7, #2]
 80083c0:	4013      	ands	r3, r2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80083c6:	887a      	ldrh	r2, [r7, #2]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80083cc:	e002      	b.n	80083d4 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80083ce:	887a      	ldrh	r2, [r7, #2]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	611a      	str	r2, [r3, #16]
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr
	...

080083e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e10f      	b.n	8008612 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d106      	bne.n	800840c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7f9 fed4 	bl	80021b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2224      	movs	r2, #36	; 0x24
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 0201 	bic.w	r2, r2, #1
 8008422:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008424:	f001 f93e 	bl	80096a4 <HAL_RCC_GetPCLK1Freq>
 8008428:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	4a7b      	ldr	r2, [pc, #492]	; (800861c <HAL_I2C_Init+0x23c>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d807      	bhi.n	8008444 <HAL_I2C_Init+0x64>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4a7a      	ldr	r2, [pc, #488]	; (8008620 <HAL_I2C_Init+0x240>)
 8008438:	4293      	cmp	r3, r2
 800843a:	bf94      	ite	ls
 800843c:	2301      	movls	r3, #1
 800843e:	2300      	movhi	r3, #0
 8008440:	b2db      	uxtb	r3, r3
 8008442:	e006      	b.n	8008452 <HAL_I2C_Init+0x72>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	4a77      	ldr	r2, [pc, #476]	; (8008624 <HAL_I2C_Init+0x244>)
 8008448:	4293      	cmp	r3, r2
 800844a:	bf94      	ite	ls
 800844c:	2301      	movls	r3, #1
 800844e:	2300      	movhi	r3, #0
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e0db      	b.n	8008612 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	4a72      	ldr	r2, [pc, #456]	; (8008628 <HAL_I2C_Init+0x248>)
 800845e:	fba2 2303 	umull	r2, r3, r2, r3
 8008462:	0c9b      	lsrs	r3, r3, #18
 8008464:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	430a      	orrs	r2, r1
 8008478:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6a1b      	ldr	r3, [r3, #32]
 8008480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	4a64      	ldr	r2, [pc, #400]	; (800861c <HAL_I2C_Init+0x23c>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d802      	bhi.n	8008494 <HAL_I2C_Init+0xb4>
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	3301      	adds	r3, #1
 8008492:	e009      	b.n	80084a8 <HAL_I2C_Init+0xc8>
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800849a:	fb02 f303 	mul.w	r3, r2, r3
 800849e:	4a63      	ldr	r2, [pc, #396]	; (800862c <HAL_I2C_Init+0x24c>)
 80084a0:	fba2 2303 	umull	r2, r3, r2, r3
 80084a4:	099b      	lsrs	r3, r3, #6
 80084a6:	3301      	adds	r3, #1
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	6812      	ldr	r2, [r2, #0]
 80084ac:	430b      	orrs	r3, r1
 80084ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80084ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	4956      	ldr	r1, [pc, #344]	; (800861c <HAL_I2C_Init+0x23c>)
 80084c4:	428b      	cmp	r3, r1
 80084c6:	d80d      	bhi.n	80084e4 <HAL_I2C_Init+0x104>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	1e59      	subs	r1, r3, #1
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80084d6:	3301      	adds	r3, #1
 80084d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084dc:	2b04      	cmp	r3, #4
 80084de:	bf38      	it	cc
 80084e0:	2304      	movcc	r3, #4
 80084e2:	e04f      	b.n	8008584 <HAL_I2C_Init+0x1a4>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d111      	bne.n	8008510 <HAL_I2C_Init+0x130>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	1e58      	subs	r0, r3, #1
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6859      	ldr	r1, [r3, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	005b      	lsls	r3, r3, #1
 80084f8:	440b      	add	r3, r1
 80084fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80084fe:	3301      	adds	r3, #1
 8008500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008504:	2b00      	cmp	r3, #0
 8008506:	bf0c      	ite	eq
 8008508:	2301      	moveq	r3, #1
 800850a:	2300      	movne	r3, #0
 800850c:	b2db      	uxtb	r3, r3
 800850e:	e012      	b.n	8008536 <HAL_I2C_Init+0x156>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	1e58      	subs	r0, r3, #1
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6859      	ldr	r1, [r3, #4]
 8008518:	460b      	mov	r3, r1
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	440b      	add	r3, r1
 800851e:	0099      	lsls	r1, r3, #2
 8008520:	440b      	add	r3, r1
 8008522:	fbb0 f3f3 	udiv	r3, r0, r3
 8008526:	3301      	adds	r3, #1
 8008528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800852c:	2b00      	cmp	r3, #0
 800852e:	bf0c      	ite	eq
 8008530:	2301      	moveq	r3, #1
 8008532:	2300      	movne	r3, #0
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <HAL_I2C_Init+0x15e>
 800853a:	2301      	movs	r3, #1
 800853c:	e022      	b.n	8008584 <HAL_I2C_Init+0x1a4>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10e      	bne.n	8008564 <HAL_I2C_Init+0x184>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	1e58      	subs	r0, r3, #1
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6859      	ldr	r1, [r3, #4]
 800854e:	460b      	mov	r3, r1
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	440b      	add	r3, r1
 8008554:	fbb0 f3f3 	udiv	r3, r0, r3
 8008558:	3301      	adds	r3, #1
 800855a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800855e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008562:	e00f      	b.n	8008584 <HAL_I2C_Init+0x1a4>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	1e58      	subs	r0, r3, #1
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6859      	ldr	r1, [r3, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	440b      	add	r3, r1
 8008572:	0099      	lsls	r1, r3, #2
 8008574:	440b      	add	r3, r1
 8008576:	fbb0 f3f3 	udiv	r3, r0, r3
 800857a:	3301      	adds	r3, #1
 800857c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008584:	6879      	ldr	r1, [r7, #4]
 8008586:	6809      	ldr	r1, [r1, #0]
 8008588:	4313      	orrs	r3, r2
 800858a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	69da      	ldr	r2, [r3, #28]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	431a      	orrs	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	430a      	orrs	r2, r1
 80085a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80085b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6911      	ldr	r1, [r2, #16]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	68d2      	ldr	r2, [r2, #12]
 80085be:	4311      	orrs	r1, r2
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	6812      	ldr	r2, [r2, #0]
 80085c4:	430b      	orrs	r3, r1
 80085c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	695a      	ldr	r2, [r3, #20]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	431a      	orrs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f042 0201 	orr.w	r2, r2, #1
 80085f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	000186a0 	.word	0x000186a0
 8008620:	001e847f 	.word	0x001e847f
 8008624:	003d08ff 	.word	0x003d08ff
 8008628:	431bde83 	.word	0x431bde83
 800862c:	10624dd3 	.word	0x10624dd3

08008630 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b088      	sub	sp, #32
 8008634:	af02      	add	r7, sp, #8
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	607a      	str	r2, [r7, #4]
 800863a:	461a      	mov	r2, r3
 800863c:	460b      	mov	r3, r1
 800863e:	817b      	strh	r3, [r7, #10]
 8008640:	4613      	mov	r3, r2
 8008642:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008644:	f7fd ffd2 	bl	80065ec <HAL_GetTick>
 8008648:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b20      	cmp	r3, #32
 8008654:	f040 80e0 	bne.w	8008818 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	2319      	movs	r3, #25
 800865e:	2201      	movs	r2, #1
 8008660:	4970      	ldr	r1, [pc, #448]	; (8008824 <HAL_I2C_Master_Transmit+0x1f4>)
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f000 fa7a 	bl	8008b5c <I2C_WaitOnFlagUntilTimeout>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800866e:	2302      	movs	r3, #2
 8008670:	e0d3      	b.n	800881a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <HAL_I2C_Master_Transmit+0x50>
 800867c:	2302      	movs	r3, #2
 800867e:	e0cc      	b.n	800881a <HAL_I2C_Master_Transmit+0x1ea>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b01      	cmp	r3, #1
 8008694:	d007      	beq.n	80086a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f042 0201 	orr.w	r2, r2, #1
 80086a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2221      	movs	r2, #33	; 0x21
 80086ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2210      	movs	r2, #16
 80086c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	893a      	ldrh	r2, [r7, #8]
 80086d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086dc:	b29a      	uxth	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4a50      	ldr	r2, [pc, #320]	; (8008828 <HAL_I2C_Master_Transmit+0x1f8>)
 80086e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80086e8:	8979      	ldrh	r1, [r7, #10]
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	6a3a      	ldr	r2, [r7, #32]
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 f9be 	bl	8008a70 <I2C_MasterRequestWrite>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e08d      	b.n	800881a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086fe:	2300      	movs	r3, #0
 8008700:	613b      	str	r3, [r7, #16]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	613b      	str	r3, [r7, #16]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	613b      	str	r3, [r7, #16]
 8008712:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008714:	e066      	b.n	80087e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	6a39      	ldr	r1, [r7, #32]
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 faf4 	bl	8008d08 <I2C_WaitOnTXEFlagUntilTimeout>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00d      	beq.n	8008742 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	2b04      	cmp	r3, #4
 800872c:	d107      	bne.n	800873e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800873c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e06b      	b.n	800881a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008746:	781a      	ldrb	r2, [r3, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800875c:	b29b      	uxth	r3, r3
 800875e:	3b01      	subs	r3, #1
 8008760:	b29a      	uxth	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800876a:	3b01      	subs	r3, #1
 800876c:	b29a      	uxth	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b04      	cmp	r3, #4
 800877e:	d11b      	bne.n	80087b8 <HAL_I2C_Master_Transmit+0x188>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008784:	2b00      	cmp	r3, #0
 8008786:	d017      	beq.n	80087b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	781a      	ldrb	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008798:	1c5a      	adds	r2, r3, #1
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	3b01      	subs	r3, #1
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087b0:	3b01      	subs	r3, #1
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	6a39      	ldr	r1, [r7, #32]
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f000 fae4 	bl	8008d8a <I2C_WaitOnBTFFlagUntilTimeout>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00d      	beq.n	80087e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087cc:	2b04      	cmp	r3, #4
 80087ce:	d107      	bne.n	80087e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e01a      	b.n	800881a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d194      	bne.n	8008716 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2220      	movs	r2, #32
 8008800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	e000      	b.n	800881a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008818:	2302      	movs	r3, #2
  }
}
 800881a:	4618      	mov	r0, r3
 800881c:	3718      	adds	r7, #24
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	00100002 	.word	0x00100002
 8008828:	ffff0000 	.word	0xffff0000

0800882c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08a      	sub	sp, #40	; 0x28
 8008830:	af02      	add	r7, sp, #8
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	607a      	str	r2, [r7, #4]
 8008836:	603b      	str	r3, [r7, #0]
 8008838:	460b      	mov	r3, r1
 800883a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800883c:	f7fd fed6 	bl	80065ec <HAL_GetTick>
 8008840:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8008842:	2301      	movs	r3, #1
 8008844:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b20      	cmp	r3, #32
 8008850:	f040 8105 	bne.w	8008a5e <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	2319      	movs	r3, #25
 800885a:	2201      	movs	r2, #1
 800885c:	4982      	ldr	r1, [pc, #520]	; (8008a68 <HAL_I2C_IsDeviceReady+0x23c>)
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 f97c 	bl	8008b5c <I2C_WaitOnFlagUntilTimeout>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800886a:	2302      	movs	r3, #2
 800886c:	e0f8      	b.n	8008a60 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008874:	2b01      	cmp	r3, #1
 8008876:	d101      	bne.n	800887c <HAL_I2C_IsDeviceReady+0x50>
 8008878:	2302      	movs	r3, #2
 800887a:	e0f1      	b.n	8008a60 <HAL_I2C_IsDeviceReady+0x234>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b01      	cmp	r3, #1
 8008890:	d007      	beq.n	80088a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f042 0201 	orr.w	r2, r2, #1
 80088a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2224      	movs	r2, #36	; 0x24
 80088b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4a6a      	ldr	r2, [pc, #424]	; (8008a6c <HAL_I2C_IsDeviceReady+0x240>)
 80088c4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2200      	movs	r2, #0
 80088de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 f93a 	bl	8008b5c <I2C_WaitOnFlagUntilTimeout>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e0b6      	b.n	8008a60 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80088f2:	897b      	ldrh	r3, [r7, #10]
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	461a      	mov	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008900:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008902:	f7fd fe73 	bl	80065ec <HAL_GetTick>
 8008906:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	2b02      	cmp	r3, #2
 8008914:	bf0c      	ite	eq
 8008916:	2301      	moveq	r3, #1
 8008918:	2300      	movne	r3, #0
 800891a:	b2db      	uxtb	r3, r3
 800891c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800892c:	bf0c      	ite	eq
 800892e:	2301      	moveq	r3, #1
 8008930:	2300      	movne	r3, #0
 8008932:	b2db      	uxtb	r3, r3
 8008934:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008936:	e025      	b.n	8008984 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008938:	f7fd fe58 	bl	80065ec <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	429a      	cmp	r2, r3
 8008946:	d302      	bcc.n	800894e <HAL_I2C_IsDeviceReady+0x122>
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d103      	bne.n	8008956 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	22a0      	movs	r2, #160	; 0xa0
 8008952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	f003 0302 	and.w	r3, r3, #2
 8008960:	2b02      	cmp	r3, #2
 8008962:	bf0c      	ite	eq
 8008964:	2301      	moveq	r3, #1
 8008966:	2300      	movne	r3, #0
 8008968:	b2db      	uxtb	r3, r3
 800896a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800897a:	bf0c      	ite	eq
 800897c:	2301      	moveq	r3, #1
 800897e:	2300      	movne	r3, #0
 8008980:	b2db      	uxtb	r3, r3
 8008982:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2ba0      	cmp	r3, #160	; 0xa0
 800898e:	d005      	beq.n	800899c <HAL_I2C_IsDeviceReady+0x170>
 8008990:	7dfb      	ldrb	r3, [r7, #23]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d102      	bne.n	800899c <HAL_I2C_IsDeviceReady+0x170>
 8008996:	7dbb      	ldrb	r3, [r7, #22]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d0cd      	beq.n	8008938 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2220      	movs	r2, #32
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	f003 0302 	and.w	r3, r3, #2
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d129      	bne.n	8008a06 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089c2:	2300      	movs	r3, #0
 80089c4:	613b      	str	r3, [r7, #16]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	613b      	str	r3, [r7, #16]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	613b      	str	r3, [r7, #16]
 80089d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	2319      	movs	r3, #25
 80089de:	2201      	movs	r2, #1
 80089e0:	4921      	ldr	r1, [pc, #132]	; (8008a68 <HAL_I2C_IsDeviceReady+0x23c>)
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 f8ba 	bl	8008b5c <I2C_WaitOnFlagUntilTimeout>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e036      	b.n	8008a60 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2220      	movs	r2, #32
 80089f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	e02c      	b.n	8008a60 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a14:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a1e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	2319      	movs	r3, #25
 8008a26:	2201      	movs	r2, #1
 8008a28:	490f      	ldr	r1, [pc, #60]	; (8008a68 <HAL_I2C_IsDeviceReady+0x23c>)
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 f896 	bl	8008b5c <I2C_WaitOnFlagUntilTimeout>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e012      	b.n	8008a60 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008a40:	69ba      	ldr	r2, [r7, #24]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	f4ff af3e 	bcc.w	80088c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e000      	b.n	8008a60 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8008a5e:	2302      	movs	r3, #2
  }
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3720      	adds	r7, #32
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	00100002 	.word	0x00100002
 8008a6c:	ffff0000 	.word	0xffff0000

08008a70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b088      	sub	sp, #32
 8008a74:	af02      	add	r7, sp, #8
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	607a      	str	r2, [r7, #4]
 8008a7a:	603b      	str	r3, [r7, #0]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b08      	cmp	r3, #8
 8008a8a:	d006      	beq.n	8008a9a <I2C_MasterRequestWrite+0x2a>
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d003      	beq.n	8008a9a <I2C_MasterRequestWrite+0x2a>
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a98:	d108      	bne.n	8008aac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	e00b      	b.n	8008ac4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab0:	2b12      	cmp	r3, #18
 8008ab2:	d107      	bne.n	8008ac4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ac2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f000 f843 	bl	8008b5c <I2C_WaitOnFlagUntilTimeout>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e035      	b.n	8008b4c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ae8:	d108      	bne.n	8008afc <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008aea:	897b      	ldrh	r3, [r7, #10]
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	461a      	mov	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008af8:	611a      	str	r2, [r3, #16]
 8008afa:	e01b      	b.n	8008b34 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008afc:	897b      	ldrh	r3, [r7, #10]
 8008afe:	11db      	asrs	r3, r3, #7
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	f003 0306 	and.w	r3, r3, #6
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	f063 030f 	orn	r3, r3, #15
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	490e      	ldr	r1, [pc, #56]	; (8008b54 <I2C_MasterRequestWrite+0xe4>)
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 f875 	bl	8008c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e010      	b.n	8008b4c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008b2a:	897b      	ldrh	r3, [r7, #10]
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	4907      	ldr	r1, [pc, #28]	; (8008b58 <I2C_MasterRequestWrite+0xe8>)
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f000 f865 	bl	8008c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e000      	b.n	8008b4c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3718      	adds	r7, #24
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	00010008 	.word	0x00010008
 8008b58:	00010002 	.word	0x00010002

08008b5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	603b      	str	r3, [r7, #0]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b6c:	e025      	b.n	8008bba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b74:	d021      	beq.n	8008bba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b76:	f7fd fd39 	bl	80065ec <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d302      	bcc.n	8008b8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d116      	bne.n	8008bba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2220      	movs	r2, #32
 8008b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba6:	f043 0220 	orr.w	r2, r3, #32
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e023      	b.n	8008c02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	0c1b      	lsrs	r3, r3, #16
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d10d      	bne.n	8008be0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	43da      	mvns	r2, r3
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	4013      	ands	r3, r2
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	bf0c      	ite	eq
 8008bd6:	2301      	moveq	r3, #1
 8008bd8:	2300      	movne	r3, #0
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	461a      	mov	r2, r3
 8008bde:	e00c      	b.n	8008bfa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	43da      	mvns	r2, r3
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	4013      	ands	r3, r2
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	bf0c      	ite	eq
 8008bf2:	2301      	moveq	r3, #1
 8008bf4:	2300      	movne	r3, #0
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d0b6      	beq.n	8008b6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	607a      	str	r2, [r7, #4]
 8008c16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008c18:	e051      	b.n	8008cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c28:	d123      	bne.n	8008c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2220      	movs	r2, #32
 8008c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5e:	f043 0204 	orr.w	r2, r3, #4
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e046      	b.n	8008d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c78:	d021      	beq.n	8008cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c7a:	f7fd fcb7 	bl	80065ec <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d302      	bcc.n	8008c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d116      	bne.n	8008cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2220      	movs	r2, #32
 8008c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008caa:	f043 0220 	orr.w	r2, r3, #32
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e020      	b.n	8008d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	0c1b      	lsrs	r3, r3, #16
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d10c      	bne.n	8008ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	43da      	mvns	r2, r3
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	bf14      	ite	ne
 8008cda:	2301      	movne	r3, #1
 8008cdc:	2300      	moveq	r3, #0
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	e00b      	b.n	8008cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	43da      	mvns	r2, r3
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	4013      	ands	r3, r2
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	bf14      	ite	ne
 8008cf4:	2301      	movne	r3, #1
 8008cf6:	2300      	moveq	r3, #0
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d18d      	bne.n	8008c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d14:	e02d      	b.n	8008d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 f878 	bl	8008e0c <I2C_IsAcknowledgeFailed>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e02d      	b.n	8008d82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2c:	d021      	beq.n	8008d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d2e:	f7fd fc5d 	bl	80065ec <HAL_GetTick>
 8008d32:	4602      	mov	r2, r0
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d302      	bcc.n	8008d44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d116      	bne.n	8008d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5e:	f043 0220 	orr.w	r2, r3, #32
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e007      	b.n	8008d82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d7c:	2b80      	cmp	r3, #128	; 0x80
 8008d7e:	d1ca      	bne.n	8008d16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008d96:	e02d      	b.n	8008df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 f837 	bl	8008e0c <I2C_IsAcknowledgeFailed>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e02d      	b.n	8008e04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dae:	d021      	beq.n	8008df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008db0:	f7fd fc1c 	bl	80065ec <HAL_GetTick>
 8008db4:	4602      	mov	r2, r0
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d302      	bcc.n	8008dc6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d116      	bne.n	8008df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2220      	movs	r2, #32
 8008dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de0:	f043 0220 	orr.w	r2, r3, #32
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e007      	b.n	8008e04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	f003 0304 	and.w	r3, r3, #4
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	d1ca      	bne.n	8008d98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e22:	d11b      	bne.n	8008e5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2220      	movs	r2, #32
 8008e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e48:	f043 0204 	orr.w	r2, r3, #4
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e000      	b.n	8008e5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bc80      	pop	{r7}
 8008e66:	4770      	bx	lr

08008e68 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e02b      	b.n	8008ed2 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008e82:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f245 5255 	movw	r2, #21845	; 0x5555
 8008e8c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	6852      	ldr	r2, [r2, #4]
 8008e96:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	6892      	ldr	r2, [r2, #8]
 8008ea0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8008ea2:	f7fd fba3 	bl	80065ec <HAL_GetTick>
 8008ea6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 8008ea8:	e008      	b.n	8008ebc <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8008eaa:	f7fd fb9f 	bl	80065ec <HAL_GetTick>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b30      	cmp	r3, #48	; 0x30
 8008eb6:	d901      	bls.n	8008ebc <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e00a      	b.n	8008ed2 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != RESET)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1f1      	bne.n	8008eaa <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008ece:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008eea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	370c      	adds	r7, #12
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bc80      	pop	{r7}
 8008ef6:	4770      	bx	lr

08008ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e26c      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 8087 	beq.w	8009026 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f18:	4b92      	ldr	r3, [pc, #584]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f003 030c 	and.w	r3, r3, #12
 8008f20:	2b04      	cmp	r3, #4
 8008f22:	d00c      	beq.n	8008f3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008f24:	4b8f      	ldr	r3, [pc, #572]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	f003 030c 	and.w	r3, r3, #12
 8008f2c:	2b08      	cmp	r3, #8
 8008f2e:	d112      	bne.n	8008f56 <HAL_RCC_OscConfig+0x5e>
 8008f30:	4b8c      	ldr	r3, [pc, #560]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f3c:	d10b      	bne.n	8008f56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f3e:	4b89      	ldr	r3, [pc, #548]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d06c      	beq.n	8009024 <HAL_RCC_OscConfig+0x12c>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d168      	bne.n	8009024 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e246      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f5e:	d106      	bne.n	8008f6e <HAL_RCC_OscConfig+0x76>
 8008f60:	4b80      	ldr	r3, [pc, #512]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a7f      	ldr	r2, [pc, #508]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f6a:	6013      	str	r3, [r2, #0]
 8008f6c:	e02e      	b.n	8008fcc <HAL_RCC_OscConfig+0xd4>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10c      	bne.n	8008f90 <HAL_RCC_OscConfig+0x98>
 8008f76:	4b7b      	ldr	r3, [pc, #492]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a7a      	ldr	r2, [pc, #488]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	4b78      	ldr	r3, [pc, #480]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a77      	ldr	r2, [pc, #476]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f8c:	6013      	str	r3, [r2, #0]
 8008f8e:	e01d      	b.n	8008fcc <HAL_RCC_OscConfig+0xd4>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f98:	d10c      	bne.n	8008fb4 <HAL_RCC_OscConfig+0xbc>
 8008f9a:	4b72      	ldr	r3, [pc, #456]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a71      	ldr	r2, [pc, #452]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fa4:	6013      	str	r3, [r2, #0]
 8008fa6:	4b6f      	ldr	r3, [pc, #444]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a6e      	ldr	r2, [pc, #440]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fb0:	6013      	str	r3, [r2, #0]
 8008fb2:	e00b      	b.n	8008fcc <HAL_RCC_OscConfig+0xd4>
 8008fb4:	4b6b      	ldr	r3, [pc, #428]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a6a      	ldr	r2, [pc, #424]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	4b68      	ldr	r3, [pc, #416]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a67      	ldr	r2, [pc, #412]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d013      	beq.n	8008ffc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fd4:	f7fd fb0a 	bl	80065ec <HAL_GetTick>
 8008fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fda:	e008      	b.n	8008fee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fdc:	f7fd fb06 	bl	80065ec <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b64      	cmp	r3, #100	; 0x64
 8008fe8:	d901      	bls.n	8008fee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e1fa      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fee:	4b5d      	ldr	r3, [pc, #372]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0f0      	beq.n	8008fdc <HAL_RCC_OscConfig+0xe4>
 8008ffa:	e014      	b.n	8009026 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ffc:	f7fd faf6 	bl	80065ec <HAL_GetTick>
 8009000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009002:	e008      	b.n	8009016 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009004:	f7fd faf2 	bl	80065ec <HAL_GetTick>
 8009008:	4602      	mov	r2, r0
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	2b64      	cmp	r3, #100	; 0x64
 8009010:	d901      	bls.n	8009016 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	e1e6      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009016:	4b53      	ldr	r3, [pc, #332]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1f0      	bne.n	8009004 <HAL_RCC_OscConfig+0x10c>
 8009022:	e000      	b.n	8009026 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d063      	beq.n	80090fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009032:	4b4c      	ldr	r3, [pc, #304]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f003 030c 	and.w	r3, r3, #12
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00b      	beq.n	8009056 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800903e:	4b49      	ldr	r3, [pc, #292]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f003 030c 	and.w	r3, r3, #12
 8009046:	2b08      	cmp	r3, #8
 8009048:	d11c      	bne.n	8009084 <HAL_RCC_OscConfig+0x18c>
 800904a:	4b46      	ldr	r3, [pc, #280]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d116      	bne.n	8009084 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009056:	4b43      	ldr	r3, [pc, #268]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0302 	and.w	r3, r3, #2
 800905e:	2b00      	cmp	r3, #0
 8009060:	d005      	beq.n	800906e <HAL_RCC_OscConfig+0x176>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d001      	beq.n	800906e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e1ba      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800906e:	4b3d      	ldr	r3, [pc, #244]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	00db      	lsls	r3, r3, #3
 800907c:	4939      	ldr	r1, [pc, #228]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 800907e:	4313      	orrs	r3, r2
 8009080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009082:	e03a      	b.n	80090fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d020      	beq.n	80090ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800908c:	4b36      	ldr	r3, [pc, #216]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 800908e:	2201      	movs	r2, #1
 8009090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009092:	f7fd faab 	bl	80065ec <HAL_GetTick>
 8009096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009098:	e008      	b.n	80090ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800909a:	f7fd faa7 	bl	80065ec <HAL_GetTick>
 800909e:	4602      	mov	r2, r0
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d901      	bls.n	80090ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e19b      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090ac:	4b2d      	ldr	r3, [pc, #180]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0302 	and.w	r3, r3, #2
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0f0      	beq.n	800909a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090b8:	4b2a      	ldr	r3, [pc, #168]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	695b      	ldr	r3, [r3, #20]
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	4927      	ldr	r1, [pc, #156]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 80090c8:	4313      	orrs	r3, r2
 80090ca:	600b      	str	r3, [r1, #0]
 80090cc:	e015      	b.n	80090fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090ce:	4b26      	ldr	r3, [pc, #152]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090d4:	f7fd fa8a 	bl	80065ec <HAL_GetTick>
 80090d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090da:	e008      	b.n	80090ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090dc:	f7fd fa86 	bl	80065ec <HAL_GetTick>
 80090e0:	4602      	mov	r2, r0
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d901      	bls.n	80090ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e17a      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090ee:	4b1d      	ldr	r3, [pc, #116]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0302 	and.w	r3, r3, #2
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1f0      	bne.n	80090dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0308 	and.w	r3, r3, #8
 8009102:	2b00      	cmp	r3, #0
 8009104:	d03a      	beq.n	800917c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d019      	beq.n	8009142 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800910e:	4b17      	ldr	r3, [pc, #92]	; (800916c <HAL_RCC_OscConfig+0x274>)
 8009110:	2201      	movs	r2, #1
 8009112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009114:	f7fd fa6a 	bl	80065ec <HAL_GetTick>
 8009118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800911a:	e008      	b.n	800912e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800911c:	f7fd fa66 	bl	80065ec <HAL_GetTick>
 8009120:	4602      	mov	r2, r0
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	2b02      	cmp	r3, #2
 8009128:	d901      	bls.n	800912e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e15a      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800912e:	4b0d      	ldr	r3, [pc, #52]	; (8009164 <HAL_RCC_OscConfig+0x26c>)
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	f003 0302 	and.w	r3, r3, #2
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0f0      	beq.n	800911c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800913a:	2001      	movs	r0, #1
 800913c:	f000 fada 	bl	80096f4 <RCC_Delay>
 8009140:	e01c      	b.n	800917c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009142:	4b0a      	ldr	r3, [pc, #40]	; (800916c <HAL_RCC_OscConfig+0x274>)
 8009144:	2200      	movs	r2, #0
 8009146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009148:	f7fd fa50 	bl	80065ec <HAL_GetTick>
 800914c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800914e:	e00f      	b.n	8009170 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009150:	f7fd fa4c 	bl	80065ec <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	2b02      	cmp	r3, #2
 800915c:	d908      	bls.n	8009170 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e140      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
 8009162:	bf00      	nop
 8009164:	40021000 	.word	0x40021000
 8009168:	42420000 	.word	0x42420000
 800916c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009170:	4b9e      	ldr	r3, [pc, #632]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009174:	f003 0302 	and.w	r3, r3, #2
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1e9      	bne.n	8009150 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 80a6 	beq.w	80092d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800918a:	2300      	movs	r3, #0
 800918c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800918e:	4b97      	ldr	r3, [pc, #604]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10d      	bne.n	80091b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800919a:	4b94      	ldr	r3, [pc, #592]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	4a93      	ldr	r2, [pc, #588]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 80091a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091a4:	61d3      	str	r3, [r2, #28]
 80091a6:	4b91      	ldr	r3, [pc, #580]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ae:	60bb      	str	r3, [r7, #8]
 80091b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091b2:	2301      	movs	r3, #1
 80091b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091b6:	4b8e      	ldr	r3, [pc, #568]	; (80093f0 <HAL_RCC_OscConfig+0x4f8>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d118      	bne.n	80091f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80091c2:	4b8b      	ldr	r3, [pc, #556]	; (80093f0 <HAL_RCC_OscConfig+0x4f8>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a8a      	ldr	r2, [pc, #552]	; (80093f0 <HAL_RCC_OscConfig+0x4f8>)
 80091c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80091ce:	f7fd fa0d 	bl	80065ec <HAL_GetTick>
 80091d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091d4:	e008      	b.n	80091e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091d6:	f7fd fa09 	bl	80065ec <HAL_GetTick>
 80091da:	4602      	mov	r2, r0
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	2b64      	cmp	r3, #100	; 0x64
 80091e2:	d901      	bls.n	80091e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e0fd      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091e8:	4b81      	ldr	r3, [pc, #516]	; (80093f0 <HAL_RCC_OscConfig+0x4f8>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d0f0      	beq.n	80091d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d106      	bne.n	800920a <HAL_RCC_OscConfig+0x312>
 80091fc:	4b7b      	ldr	r3, [pc, #492]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 80091fe:	6a1b      	ldr	r3, [r3, #32]
 8009200:	4a7a      	ldr	r2, [pc, #488]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009202:	f043 0301 	orr.w	r3, r3, #1
 8009206:	6213      	str	r3, [r2, #32]
 8009208:	e02d      	b.n	8009266 <HAL_RCC_OscConfig+0x36e>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10c      	bne.n	800922c <HAL_RCC_OscConfig+0x334>
 8009212:	4b76      	ldr	r3, [pc, #472]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	4a75      	ldr	r2, [pc, #468]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009218:	f023 0301 	bic.w	r3, r3, #1
 800921c:	6213      	str	r3, [r2, #32]
 800921e:	4b73      	ldr	r3, [pc, #460]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	4a72      	ldr	r2, [pc, #456]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009224:	f023 0304 	bic.w	r3, r3, #4
 8009228:	6213      	str	r3, [r2, #32]
 800922a:	e01c      	b.n	8009266 <HAL_RCC_OscConfig+0x36e>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	2b05      	cmp	r3, #5
 8009232:	d10c      	bne.n	800924e <HAL_RCC_OscConfig+0x356>
 8009234:	4b6d      	ldr	r3, [pc, #436]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	4a6c      	ldr	r2, [pc, #432]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 800923a:	f043 0304 	orr.w	r3, r3, #4
 800923e:	6213      	str	r3, [r2, #32]
 8009240:	4b6a      	ldr	r3, [pc, #424]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009242:	6a1b      	ldr	r3, [r3, #32]
 8009244:	4a69      	ldr	r2, [pc, #420]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009246:	f043 0301 	orr.w	r3, r3, #1
 800924a:	6213      	str	r3, [r2, #32]
 800924c:	e00b      	b.n	8009266 <HAL_RCC_OscConfig+0x36e>
 800924e:	4b67      	ldr	r3, [pc, #412]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009250:	6a1b      	ldr	r3, [r3, #32]
 8009252:	4a66      	ldr	r2, [pc, #408]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009254:	f023 0301 	bic.w	r3, r3, #1
 8009258:	6213      	str	r3, [r2, #32]
 800925a:	4b64      	ldr	r3, [pc, #400]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	4a63      	ldr	r2, [pc, #396]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009260:	f023 0304 	bic.w	r3, r3, #4
 8009264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d015      	beq.n	800929a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800926e:	f7fd f9bd 	bl	80065ec <HAL_GetTick>
 8009272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009274:	e00a      	b.n	800928c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009276:	f7fd f9b9 	bl	80065ec <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	f241 3288 	movw	r2, #5000	; 0x1388
 8009284:	4293      	cmp	r3, r2
 8009286:	d901      	bls.n	800928c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e0ab      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800928c:	4b57      	ldr	r3, [pc, #348]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 800928e:	6a1b      	ldr	r3, [r3, #32]
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b00      	cmp	r3, #0
 8009296:	d0ee      	beq.n	8009276 <HAL_RCC_OscConfig+0x37e>
 8009298:	e014      	b.n	80092c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800929a:	f7fd f9a7 	bl	80065ec <HAL_GetTick>
 800929e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092a0:	e00a      	b.n	80092b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092a2:	f7fd f9a3 	bl	80065ec <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d901      	bls.n	80092b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e095      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092b8:	4b4c      	ldr	r3, [pc, #304]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 80092ba:	6a1b      	ldr	r3, [r3, #32]
 80092bc:	f003 0302 	and.w	r3, r3, #2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1ee      	bne.n	80092a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d105      	bne.n	80092d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092ca:	4b48      	ldr	r3, [pc, #288]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	4a47      	ldr	r2, [pc, #284]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 80092d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	69db      	ldr	r3, [r3, #28]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f000 8081 	beq.w	80093e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80092e0:	4b42      	ldr	r3, [pc, #264]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	f003 030c 	and.w	r3, r3, #12
 80092e8:	2b08      	cmp	r3, #8
 80092ea:	d061      	beq.n	80093b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d146      	bne.n	8009382 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092f4:	4b3f      	ldr	r3, [pc, #252]	; (80093f4 <HAL_RCC_OscConfig+0x4fc>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092fa:	f7fd f977 	bl	80065ec <HAL_GetTick>
 80092fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009300:	e008      	b.n	8009314 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009302:	f7fd f973 	bl	80065ec <HAL_GetTick>
 8009306:	4602      	mov	r2, r0
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	2b02      	cmp	r3, #2
 800930e:	d901      	bls.n	8009314 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	e067      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009314:	4b35      	ldr	r3, [pc, #212]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1f0      	bne.n	8009302 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a1b      	ldr	r3, [r3, #32]
 8009324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009328:	d108      	bne.n	800933c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800932a:	4b30      	ldr	r3, [pc, #192]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	492d      	ldr	r1, [pc, #180]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009338:	4313      	orrs	r3, r2
 800933a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800933c:	4b2b      	ldr	r3, [pc, #172]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a19      	ldr	r1, [r3, #32]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934c:	430b      	orrs	r3, r1
 800934e:	4927      	ldr	r1, [pc, #156]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009350:	4313      	orrs	r3, r2
 8009352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009354:	4b27      	ldr	r3, [pc, #156]	; (80093f4 <HAL_RCC_OscConfig+0x4fc>)
 8009356:	2201      	movs	r2, #1
 8009358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800935a:	f7fd f947 	bl	80065ec <HAL_GetTick>
 800935e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009360:	e008      	b.n	8009374 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009362:	f7fd f943 	bl	80065ec <HAL_GetTick>
 8009366:	4602      	mov	r2, r0
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	2b02      	cmp	r3, #2
 800936e:	d901      	bls.n	8009374 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	e037      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009374:	4b1d      	ldr	r3, [pc, #116]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0f0      	beq.n	8009362 <HAL_RCC_OscConfig+0x46a>
 8009380:	e02f      	b.n	80093e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009382:	4b1c      	ldr	r3, [pc, #112]	; (80093f4 <HAL_RCC_OscConfig+0x4fc>)
 8009384:	2200      	movs	r2, #0
 8009386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009388:	f7fd f930 	bl	80065ec <HAL_GetTick>
 800938c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800938e:	e008      	b.n	80093a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009390:	f7fd f92c 	bl	80065ec <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	2b02      	cmp	r3, #2
 800939c:	d901      	bls.n	80093a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e020      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80093a2:	4b12      	ldr	r3, [pc, #72]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1f0      	bne.n	8009390 <HAL_RCC_OscConfig+0x498>
 80093ae:	e018      	b.n	80093e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	69db      	ldr	r3, [r3, #28]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d101      	bne.n	80093bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	e013      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80093bc:	4b0b      	ldr	r3, [pc, #44]	; (80093ec <HAL_RCC_OscConfig+0x4f4>)
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a1b      	ldr	r3, [r3, #32]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d106      	bne.n	80093de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093da:	429a      	cmp	r2, r3
 80093dc:	d001      	beq.n	80093e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	40021000 	.word	0x40021000
 80093f0:	40007000 	.word	0x40007000
 80093f4:	42420060 	.word	0x42420060

080093f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d101      	bne.n	800940c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e0d0      	b.n	80095ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800940c:	4b6a      	ldr	r3, [pc, #424]	; (80095b8 <HAL_RCC_ClockConfig+0x1c0>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0307 	and.w	r3, r3, #7
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	429a      	cmp	r2, r3
 8009418:	d910      	bls.n	800943c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800941a:	4b67      	ldr	r3, [pc, #412]	; (80095b8 <HAL_RCC_ClockConfig+0x1c0>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f023 0207 	bic.w	r2, r3, #7
 8009422:	4965      	ldr	r1, [pc, #404]	; (80095b8 <HAL_RCC_ClockConfig+0x1c0>)
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	4313      	orrs	r3, r2
 8009428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800942a:	4b63      	ldr	r3, [pc, #396]	; (80095b8 <HAL_RCC_ClockConfig+0x1c0>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0307 	and.w	r3, r3, #7
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	429a      	cmp	r2, r3
 8009436:	d001      	beq.n	800943c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	e0b8      	b.n	80095ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0302 	and.w	r3, r3, #2
 8009444:	2b00      	cmp	r3, #0
 8009446:	d020      	beq.n	800948a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0304 	and.w	r3, r3, #4
 8009450:	2b00      	cmp	r3, #0
 8009452:	d005      	beq.n	8009460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009454:	4b59      	ldr	r3, [pc, #356]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	4a58      	ldr	r2, [pc, #352]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 800945a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800945e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 0308 	and.w	r3, r3, #8
 8009468:	2b00      	cmp	r3, #0
 800946a:	d005      	beq.n	8009478 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800946c:	4b53      	ldr	r3, [pc, #332]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	4a52      	ldr	r2, [pc, #328]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 8009472:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009476:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009478:	4b50      	ldr	r3, [pc, #320]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	494d      	ldr	r1, [pc, #308]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 8009486:	4313      	orrs	r3, r2
 8009488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 0301 	and.w	r3, r3, #1
 8009492:	2b00      	cmp	r3, #0
 8009494:	d040      	beq.n	8009518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d107      	bne.n	80094ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800949e:	4b47      	ldr	r3, [pc, #284]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d115      	bne.n	80094d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e07f      	b.n	80095ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d107      	bne.n	80094c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094b6:	4b41      	ldr	r3, [pc, #260]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d109      	bne.n	80094d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e073      	b.n	80095ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094c6:	4b3d      	ldr	r3, [pc, #244]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0302 	and.w	r3, r3, #2
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d101      	bne.n	80094d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e06b      	b.n	80095ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094d6:	4b39      	ldr	r3, [pc, #228]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	f023 0203 	bic.w	r2, r3, #3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	4936      	ldr	r1, [pc, #216]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 80094e4:	4313      	orrs	r3, r2
 80094e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80094e8:	f7fd f880 	bl	80065ec <HAL_GetTick>
 80094ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094ee:	e00a      	b.n	8009506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094f0:	f7fd f87c 	bl	80065ec <HAL_GetTick>
 80094f4:	4602      	mov	r2, r0
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80094fe:	4293      	cmp	r3, r2
 8009500:	d901      	bls.n	8009506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e053      	b.n	80095ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009506:	4b2d      	ldr	r3, [pc, #180]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	f003 020c 	and.w	r2, r3, #12
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	429a      	cmp	r2, r3
 8009516:	d1eb      	bne.n	80094f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009518:	4b27      	ldr	r3, [pc, #156]	; (80095b8 <HAL_RCC_ClockConfig+0x1c0>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0307 	and.w	r3, r3, #7
 8009520:	683a      	ldr	r2, [r7, #0]
 8009522:	429a      	cmp	r2, r3
 8009524:	d210      	bcs.n	8009548 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009526:	4b24      	ldr	r3, [pc, #144]	; (80095b8 <HAL_RCC_ClockConfig+0x1c0>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f023 0207 	bic.w	r2, r3, #7
 800952e:	4922      	ldr	r1, [pc, #136]	; (80095b8 <HAL_RCC_ClockConfig+0x1c0>)
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	4313      	orrs	r3, r2
 8009534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009536:	4b20      	ldr	r3, [pc, #128]	; (80095b8 <HAL_RCC_ClockConfig+0x1c0>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 0307 	and.w	r3, r3, #7
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	429a      	cmp	r2, r3
 8009542:	d001      	beq.n	8009548 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e032      	b.n	80095ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0304 	and.w	r3, r3, #4
 8009550:	2b00      	cmp	r3, #0
 8009552:	d008      	beq.n	8009566 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009554:	4b19      	ldr	r3, [pc, #100]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	4916      	ldr	r1, [pc, #88]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 8009562:	4313      	orrs	r3, r2
 8009564:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 0308 	and.w	r3, r3, #8
 800956e:	2b00      	cmp	r3, #0
 8009570:	d009      	beq.n	8009586 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009572:	4b12      	ldr	r3, [pc, #72]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	490e      	ldr	r1, [pc, #56]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 8009582:	4313      	orrs	r3, r2
 8009584:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009586:	f000 f821 	bl	80095cc <HAL_RCC_GetSysClockFreq>
 800958a:	4601      	mov	r1, r0
 800958c:	4b0b      	ldr	r3, [pc, #44]	; (80095bc <HAL_RCC_ClockConfig+0x1c4>)
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	091b      	lsrs	r3, r3, #4
 8009592:	f003 030f 	and.w	r3, r3, #15
 8009596:	4a0a      	ldr	r2, [pc, #40]	; (80095c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009598:	5cd3      	ldrb	r3, [r2, r3]
 800959a:	fa21 f303 	lsr.w	r3, r1, r3
 800959e:	4a09      	ldr	r2, [pc, #36]	; (80095c4 <HAL_RCC_ClockConfig+0x1cc>)
 80095a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80095a2:	4b09      	ldr	r3, [pc, #36]	; (80095c8 <HAL_RCC_ClockConfig+0x1d0>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fc ffde 	bl	8006568 <HAL_InitTick>

  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	40022000 	.word	0x40022000
 80095bc:	40021000 	.word	0x40021000
 80095c0:	0800d2ac 	.word	0x0800d2ac
 80095c4:	20000080 	.word	0x20000080
 80095c8:	20000084 	.word	0x20000084

080095cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095cc:	b490      	push	{r4, r7}
 80095ce:	b08a      	sub	sp, #40	; 0x28
 80095d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80095d2:	4b2a      	ldr	r3, [pc, #168]	; (800967c <HAL_RCC_GetSysClockFreq+0xb0>)
 80095d4:	1d3c      	adds	r4, r7, #4
 80095d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80095dc:	4b28      	ldr	r3, [pc, #160]	; (8009680 <HAL_RCC_GetSysClockFreq+0xb4>)
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	61fb      	str	r3, [r7, #28]
 80095e6:	2300      	movs	r3, #0
 80095e8:	61bb      	str	r3, [r7, #24]
 80095ea:	2300      	movs	r3, #0
 80095ec:	627b      	str	r3, [r7, #36]	; 0x24
 80095ee:	2300      	movs	r3, #0
 80095f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80095f2:	2300      	movs	r3, #0
 80095f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80095f6:	4b23      	ldr	r3, [pc, #140]	; (8009684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	f003 030c 	and.w	r3, r3, #12
 8009602:	2b04      	cmp	r3, #4
 8009604:	d002      	beq.n	800960c <HAL_RCC_GetSysClockFreq+0x40>
 8009606:	2b08      	cmp	r3, #8
 8009608:	d003      	beq.n	8009612 <HAL_RCC_GetSysClockFreq+0x46>
 800960a:	e02d      	b.n	8009668 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800960c:	4b1e      	ldr	r3, [pc, #120]	; (8009688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800960e:	623b      	str	r3, [r7, #32]
      break;
 8009610:	e02d      	b.n	800966e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	0c9b      	lsrs	r3, r3, #18
 8009616:	f003 030f 	and.w	r3, r3, #15
 800961a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800961e:	4413      	add	r3, r2
 8009620:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009624:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d013      	beq.n	8009658 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009630:	4b14      	ldr	r3, [pc, #80]	; (8009684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	0c5b      	lsrs	r3, r3, #17
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800963e:	4413      	add	r3, r2
 8009640:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009644:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	4a0f      	ldr	r2, [pc, #60]	; (8009688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800964a:	fb02 f203 	mul.w	r2, r2, r3
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	fbb2 f3f3 	udiv	r3, r2, r3
 8009654:	627b      	str	r3, [r7, #36]	; 0x24
 8009656:	e004      	b.n	8009662 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	4a0c      	ldr	r2, [pc, #48]	; (800968c <HAL_RCC_GetSysClockFreq+0xc0>)
 800965c:	fb02 f303 	mul.w	r3, r2, r3
 8009660:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	623b      	str	r3, [r7, #32]
      break;
 8009666:	e002      	b.n	800966e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009668:	4b07      	ldr	r3, [pc, #28]	; (8009688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800966a:	623b      	str	r3, [r7, #32]
      break;
 800966c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800966e:	6a3b      	ldr	r3, [r7, #32]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3728      	adds	r7, #40	; 0x28
 8009674:	46bd      	mov	sp, r7
 8009676:	bc90      	pop	{r4, r7}
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	0800c92c 	.word	0x0800c92c
 8009680:	0800c93c 	.word	0x0800c93c
 8009684:	40021000 	.word	0x40021000
 8009688:	007a1200 	.word	0x007a1200
 800968c:	003d0900 	.word	0x003d0900

08009690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009690:	b480      	push	{r7}
 8009692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009694:	4b02      	ldr	r3, [pc, #8]	; (80096a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8009696:	681b      	ldr	r3, [r3, #0]
}
 8009698:	4618      	mov	r0, r3
 800969a:	46bd      	mov	sp, r7
 800969c:	bc80      	pop	{r7}
 800969e:	4770      	bx	lr
 80096a0:	20000080 	.word	0x20000080

080096a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80096a8:	f7ff fff2 	bl	8009690 <HAL_RCC_GetHCLKFreq>
 80096ac:	4601      	mov	r1, r0
 80096ae:	4b05      	ldr	r3, [pc, #20]	; (80096c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	0a1b      	lsrs	r3, r3, #8
 80096b4:	f003 0307 	and.w	r3, r3, #7
 80096b8:	4a03      	ldr	r2, [pc, #12]	; (80096c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80096ba:	5cd3      	ldrb	r3, [r2, r3]
 80096bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	40021000 	.word	0x40021000
 80096c8:	0800d2bc 	.word	0x0800d2bc

080096cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80096d0:	f7ff ffde 	bl	8009690 <HAL_RCC_GetHCLKFreq>
 80096d4:	4601      	mov	r1, r0
 80096d6:	4b05      	ldr	r3, [pc, #20]	; (80096ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	0adb      	lsrs	r3, r3, #11
 80096dc:	f003 0307 	and.w	r3, r3, #7
 80096e0:	4a03      	ldr	r2, [pc, #12]	; (80096f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80096e2:	5cd3      	ldrb	r3, [r2, r3]
 80096e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	40021000 	.word	0x40021000
 80096f0:	0800d2bc 	.word	0x0800d2bc

080096f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80096fc:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <RCC_Delay+0x34>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a0a      	ldr	r2, [pc, #40]	; (800972c <RCC_Delay+0x38>)
 8009702:	fba2 2303 	umull	r2, r3, r2, r3
 8009706:	0a5b      	lsrs	r3, r3, #9
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	fb02 f303 	mul.w	r3, r2, r3
 800970e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009710:	bf00      	nop
  }
  while (Delay --);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	1e5a      	subs	r2, r3, #1
 8009716:	60fa      	str	r2, [r7, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1f9      	bne.n	8009710 <RCC_Delay+0x1c>
}
 800971c:	bf00      	nop
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	bc80      	pop	{r7}
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	20000080 	.word	0x20000080
 800972c:	10624dd3 	.word	0x10624dd3

08009730 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8009738:	2300      	movs	r3, #0
 800973a:	613b      	str	r3, [r7, #16]
 800973c:	2300      	movs	r3, #0
 800973e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 0301 	and.w	r3, r3, #1
 8009748:	2b00      	cmp	r3, #0
 800974a:	d07d      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800974c:	2300      	movs	r3, #0
 800974e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009750:	4b4f      	ldr	r3, [pc, #316]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009752:	69db      	ldr	r3, [r3, #28]
 8009754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10d      	bne.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800975c:	4b4c      	ldr	r3, [pc, #304]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800975e:	69db      	ldr	r3, [r3, #28]
 8009760:	4a4b      	ldr	r2, [pc, #300]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009766:	61d3      	str	r3, [r2, #28]
 8009768:	4b49      	ldr	r3, [pc, #292]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800976a:	69db      	ldr	r3, [r3, #28]
 800976c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009770:	60bb      	str	r3, [r7, #8]
 8009772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009774:	2301      	movs	r3, #1
 8009776:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009778:	4b46      	ldr	r3, [pc, #280]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009780:	2b00      	cmp	r3, #0
 8009782:	d118      	bne.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009784:	4b43      	ldr	r3, [pc, #268]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a42      	ldr	r2, [pc, #264]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800978a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800978e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009790:	f7fc ff2c 	bl	80065ec <HAL_GetTick>
 8009794:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009796:	e008      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009798:	f7fc ff28 	bl	80065ec <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	2b64      	cmp	r3, #100	; 0x64
 80097a4:	d901      	bls.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e06d      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097aa:	4b3a      	ldr	r3, [pc, #232]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d0f0      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80097b6:	4b36      	ldr	r3, [pc, #216]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d02e      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d027      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80097d4:	4b2e      	ldr	r3, [pc, #184]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80097de:	4b2e      	ldr	r3, [pc, #184]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80097e0:	2201      	movs	r2, #1
 80097e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80097e4:	4b2c      	ldr	r3, [pc, #176]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80097ea:	4a29      	ldr	r2, [pc, #164]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d014      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097fa:	f7fc fef7 	bl	80065ec <HAL_GetTick>
 80097fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009800:	e00a      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009802:	f7fc fef3 	bl	80065ec <HAL_GetTick>
 8009806:	4602      	mov	r2, r0
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009810:	4293      	cmp	r3, r2
 8009812:	d901      	bls.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e036      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009818:	4b1d      	ldr	r3, [pc, #116]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800981a:	6a1b      	ldr	r3, [r3, #32]
 800981c:	f003 0302 	and.w	r3, r3, #2
 8009820:	2b00      	cmp	r3, #0
 8009822:	d0ee      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009824:	4b1a      	ldr	r3, [pc, #104]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009826:	6a1b      	ldr	r3, [r3, #32]
 8009828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4917      	ldr	r1, [pc, #92]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009832:	4313      	orrs	r3, r2
 8009834:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d105      	bne.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800983c:	4b14      	ldr	r3, [pc, #80]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800983e:	69db      	ldr	r3, [r3, #28]
 8009840:	4a13      	ldr	r2, [pc, #76]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009846:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0302 	and.w	r3, r3, #2
 8009850:	2b00      	cmp	r3, #0
 8009852:	d008      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009854:	4b0e      	ldr	r3, [pc, #56]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	490b      	ldr	r1, [pc, #44]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009862:	4313      	orrs	r3, r2
 8009864:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0310 	and.w	r3, r3, #16
 800986e:	2b00      	cmp	r3, #0
 8009870:	d008      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009872:	4b07      	ldr	r3, [pc, #28]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	4904      	ldr	r1, [pc, #16]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009880:	4313      	orrs	r3, r2
 8009882:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	40021000 	.word	0x40021000
 8009894:	40007000 	.word	0x40007000
 8009898:	42420440 	.word	0x42420440

0800989c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d101      	bne.n	80098ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e053      	b.n	8009956 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d106      	bne.n	80098ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7fa faf7 	bl	8003ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2202      	movs	r2, #2
 80098d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685a      	ldr	r2, [r3, #4]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	431a      	orrs	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	431a      	orrs	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	431a      	orrs	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	695b      	ldr	r3, [r3, #20]
 8009900:	431a      	orrs	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800990a:	431a      	orrs	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	431a      	orrs	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	ea42 0103 	orr.w	r1, r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	430a      	orrs	r2, r1
 8009924:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	0c1a      	lsrs	r2, r3, #16
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f002 0204 	and.w	r2, r2, #4
 8009934:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	69da      	ldr	r2, [r3, #28]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009944:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b082      	sub	sp, #8
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e01d      	b.n	80099ac <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d106      	bne.n	800998a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7fc fc83 	bl	8006290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2202      	movs	r2, #2
 800998e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	3304      	adds	r3, #4
 800999a:	4619      	mov	r1, r3
 800999c:	4610      	mov	r0, r2
 800999e:	f000 fa19 	bl	8009dd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f042 0201 	orr.w	r2, r2, #1
 80099ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f003 0307 	and.w	r3, r3, #7
 80099d6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2b06      	cmp	r3, #6
 80099dc:	d007      	beq.n	80099ee <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f042 0201 	orr.w	r2, r2, #1
 80099ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3714      	adds	r7, #20
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bc80      	pop	{r7}
 80099f8:	4770      	bx	lr

080099fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b082      	sub	sp, #8
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	f003 0302 	and.w	r3, r3, #2
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d122      	bne.n	8009a56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	f003 0302 	and.w	r3, r3, #2
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d11b      	bne.n	8009a56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f06f 0202 	mvn.w	r2, #2
 8009a26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	f003 0303 	and.w	r3, r3, #3
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f9ad 	bl	8009d9c <HAL_TIM_IC_CaptureCallback>
 8009a42:	e005      	b.n	8009a50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f9a0 	bl	8009d8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f9af 	bl	8009dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	f003 0304 	and.w	r3, r3, #4
 8009a60:	2b04      	cmp	r3, #4
 8009a62:	d122      	bne.n	8009aaa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	f003 0304 	and.w	r3, r3, #4
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	d11b      	bne.n	8009aaa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f06f 0204 	mvn.w	r2, #4
 8009a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d003      	beq.n	8009a98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 f983 	bl	8009d9c <HAL_TIM_IC_CaptureCallback>
 8009a96:	e005      	b.n	8009aa4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f976 	bl	8009d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f985 	bl	8009dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	f003 0308 	and.w	r3, r3, #8
 8009ab4:	2b08      	cmp	r3, #8
 8009ab6:	d122      	bne.n	8009afe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	f003 0308 	and.w	r3, r3, #8
 8009ac2:	2b08      	cmp	r3, #8
 8009ac4:	d11b      	bne.n	8009afe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f06f 0208 	mvn.w	r2, #8
 8009ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2204      	movs	r2, #4
 8009ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	69db      	ldr	r3, [r3, #28]
 8009adc:	f003 0303 	and.w	r3, r3, #3
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d003      	beq.n	8009aec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f959 	bl	8009d9c <HAL_TIM_IC_CaptureCallback>
 8009aea:	e005      	b.n	8009af8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f94c 	bl	8009d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f95b 	bl	8009dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	f003 0310 	and.w	r3, r3, #16
 8009b08:	2b10      	cmp	r3, #16
 8009b0a:	d122      	bne.n	8009b52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	f003 0310 	and.w	r3, r3, #16
 8009b16:	2b10      	cmp	r3, #16
 8009b18:	d11b      	bne.n	8009b52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f06f 0210 	mvn.w	r2, #16
 8009b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2208      	movs	r2, #8
 8009b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d003      	beq.n	8009b40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 f92f 	bl	8009d9c <HAL_TIM_IC_CaptureCallback>
 8009b3e:	e005      	b.n	8009b4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f922 	bl	8009d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f931 	bl	8009dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d10e      	bne.n	8009b7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d107      	bne.n	8009b7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f06f 0201 	mvn.w	r2, #1
 8009b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f8fd 	bl	8009d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b88:	2b80      	cmp	r3, #128	; 0x80
 8009b8a:	d10e      	bne.n	8009baa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b96:	2b80      	cmp	r3, #128	; 0x80
 8009b98:	d107      	bne.n	8009baa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 fa5a 	bl	800a05e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb4:	2b40      	cmp	r3, #64	; 0x40
 8009bb6:	d10e      	bne.n	8009bd6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc2:	2b40      	cmp	r3, #64	; 0x40
 8009bc4:	d107      	bne.n	8009bd6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f8f5 	bl	8009dc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	f003 0320 	and.w	r3, r3, #32
 8009be0:	2b20      	cmp	r3, #32
 8009be2:	d10e      	bne.n	8009c02 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	f003 0320 	and.w	r3, r3, #32
 8009bee:	2b20      	cmp	r3, #32
 8009bf0:	d107      	bne.n	8009c02 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f06f 0220 	mvn.w	r2, #32
 8009bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fa25 	bl	800a04c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c02:	bf00      	nop
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d101      	bne.n	8009c22 <HAL_TIM_ConfigClockSource+0x18>
 8009c1e:	2302      	movs	r3, #2
 8009c20:	e0a6      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x166>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2202      	movs	r2, #2
 8009c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009c40:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c48:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b40      	cmp	r3, #64	; 0x40
 8009c58:	d067      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0x120>
 8009c5a:	2b40      	cmp	r3, #64	; 0x40
 8009c5c:	d80b      	bhi.n	8009c76 <HAL_TIM_ConfigClockSource+0x6c>
 8009c5e:	2b10      	cmp	r3, #16
 8009c60:	d073      	beq.n	8009d4a <HAL_TIM_ConfigClockSource+0x140>
 8009c62:	2b10      	cmp	r3, #16
 8009c64:	d802      	bhi.n	8009c6c <HAL_TIM_ConfigClockSource+0x62>
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d06f      	beq.n	8009d4a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009c6a:	e078      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c6c:	2b20      	cmp	r3, #32
 8009c6e:	d06c      	beq.n	8009d4a <HAL_TIM_ConfigClockSource+0x140>
 8009c70:	2b30      	cmp	r3, #48	; 0x30
 8009c72:	d06a      	beq.n	8009d4a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009c74:	e073      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c76:	2b70      	cmp	r3, #112	; 0x70
 8009c78:	d00d      	beq.n	8009c96 <HAL_TIM_ConfigClockSource+0x8c>
 8009c7a:	2b70      	cmp	r3, #112	; 0x70
 8009c7c:	d804      	bhi.n	8009c88 <HAL_TIM_ConfigClockSource+0x7e>
 8009c7e:	2b50      	cmp	r3, #80	; 0x50
 8009c80:	d033      	beq.n	8009cea <HAL_TIM_ConfigClockSource+0xe0>
 8009c82:	2b60      	cmp	r3, #96	; 0x60
 8009c84:	d041      	beq.n	8009d0a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009c86:	e06a      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c8c:	d066      	beq.n	8009d5c <HAL_TIM_ConfigClockSource+0x152>
 8009c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c92:	d017      	beq.n	8009cc4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009c94:	e063      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6818      	ldr	r0, [r3, #0]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	6899      	ldr	r1, [r3, #8]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	f000 f96e 	bl	8009f86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009cb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	609a      	str	r2, [r3, #8]
      break;
 8009cc2:	e04c      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6818      	ldr	r0, [r3, #0]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	6899      	ldr	r1, [r3, #8]
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	f000 f957 	bl	8009f86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	689a      	ldr	r2, [r3, #8]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ce6:	609a      	str	r2, [r3, #8]
      break;
 8009ce8:	e039      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6818      	ldr	r0, [r3, #0]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	6859      	ldr	r1, [r3, #4]
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f000 f8ce 	bl	8009e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2150      	movs	r1, #80	; 0x50
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 f925 	bl	8009f52 <TIM_ITRx_SetConfig>
      break;
 8009d08:	e029      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6818      	ldr	r0, [r3, #0]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	6859      	ldr	r1, [r3, #4]
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	461a      	mov	r2, r3
 8009d18:	f000 f8ec 	bl	8009ef4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2160      	movs	r1, #96	; 0x60
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 f915 	bl	8009f52 <TIM_ITRx_SetConfig>
      break;
 8009d28:	e019      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	6859      	ldr	r1, [r3, #4]
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	461a      	mov	r2, r3
 8009d38:	f000 f8ae 	bl	8009e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2140      	movs	r1, #64	; 0x40
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 f905 	bl	8009f52 <TIM_ITRx_SetConfig>
      break;
 8009d48:	e009      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4619      	mov	r1, r3
 8009d54:	4610      	mov	r0, r2
 8009d56:	f000 f8fc 	bl	8009f52 <TIM_ITRx_SetConfig>
      break;
 8009d5a:	e000      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009d5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bc80      	pop	{r7}
 8009d88:	4770      	bx	lr

08009d8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b083      	sub	sp, #12
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d92:	bf00      	nop
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bc80      	pop	{r7}
 8009d9a:	4770      	bx	lr

08009d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bc80      	pop	{r7}
 8009dac:	4770      	bx	lr

08009dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b083      	sub	sp, #12
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009db6:	bf00      	nop
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bc80      	pop	{r7}
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bc80      	pop	{r7}
 8009dd0:	4770      	bx	lr
	...

08009dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a29      	ldr	r2, [pc, #164]	; (8009e8c <TIM_Base_SetConfig+0xb8>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d00b      	beq.n	8009e04 <TIM_Base_SetConfig+0x30>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009df2:	d007      	beq.n	8009e04 <TIM_Base_SetConfig+0x30>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a26      	ldr	r2, [pc, #152]	; (8009e90 <TIM_Base_SetConfig+0xbc>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d003      	beq.n	8009e04 <TIM_Base_SetConfig+0x30>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a25      	ldr	r2, [pc, #148]	; (8009e94 <TIM_Base_SetConfig+0xc0>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d108      	bne.n	8009e16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a1c      	ldr	r2, [pc, #112]	; (8009e8c <TIM_Base_SetConfig+0xb8>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d00b      	beq.n	8009e36 <TIM_Base_SetConfig+0x62>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e24:	d007      	beq.n	8009e36 <TIM_Base_SetConfig+0x62>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a19      	ldr	r2, [pc, #100]	; (8009e90 <TIM_Base_SetConfig+0xbc>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d003      	beq.n	8009e36 <TIM_Base_SetConfig+0x62>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a18      	ldr	r2, [pc, #96]	; (8009e94 <TIM_Base_SetConfig+0xc0>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d108      	bne.n	8009e48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	695b      	ldr	r3, [r3, #20]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	689a      	ldr	r2, [r3, #8]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a07      	ldr	r2, [pc, #28]	; (8009e8c <TIM_Base_SetConfig+0xb8>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d103      	bne.n	8009e7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	691a      	ldr	r2, [r3, #16]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	615a      	str	r2, [r3, #20]
}
 8009e82:	bf00      	nop
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bc80      	pop	{r7}
 8009e8a:	4770      	bx	lr
 8009e8c:	40012c00 	.word	0x40012c00
 8009e90:	40000400 	.word	0x40000400
 8009e94:	40000800 	.word	0x40000800

08009e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6a1b      	ldr	r3, [r3, #32]
 8009ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6a1b      	ldr	r3, [r3, #32]
 8009eae:	f023 0201 	bic.w	r2, r3, #1
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	011b      	lsls	r3, r3, #4
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f023 030a 	bic.w	r3, r3, #10
 8009ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	621a      	str	r2, [r3, #32]
}
 8009eea:	bf00      	nop
 8009eec:	371c      	adds	r7, #28
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bc80      	pop	{r7}
 8009ef2:	4770      	bx	lr

08009ef4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b087      	sub	sp, #28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6a1b      	ldr	r3, [r3, #32]
 8009f04:	f023 0210 	bic.w	r2, r3, #16
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	031b      	lsls	r3, r3, #12
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	011b      	lsls	r3, r3, #4
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	621a      	str	r2, [r3, #32]
}
 8009f48:	bf00      	nop
 8009f4a:	371c      	adds	r7, #28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bc80      	pop	{r7}
 8009f50:	4770      	bx	lr

08009f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b085      	sub	sp, #20
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	f043 0307 	orr.w	r3, r3, #7
 8009f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	609a      	str	r2, [r3, #8]
}
 8009f7c:	bf00      	nop
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bc80      	pop	{r7}
 8009f84:	4770      	bx	lr

08009f86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f86:	b480      	push	{r7}
 8009f88:	b087      	sub	sp, #28
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	60f8      	str	r0, [r7, #12]
 8009f8e:	60b9      	str	r1, [r7, #8]
 8009f90:	607a      	str	r2, [r7, #4]
 8009f92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fa0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	021a      	lsls	r2, r3, #8
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	431a      	orrs	r2, r3
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	609a      	str	r2, [r3, #8]
}
 8009fba:	bf00      	nop
 8009fbc:	371c      	adds	r7, #28
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bc80      	pop	{r7}
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d101      	bne.n	8009fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	e032      	b.n	800a042 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a014:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3714      	adds	r7, #20
 800a046:	46bd      	mov	sp, r7
 800a048:	bc80      	pop	{r7}
 800a04a:	4770      	bx	lr

0800a04c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a054:	bf00      	nop
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	bc80      	pop	{r7}
 800a05c:	4770      	bx	lr

0800a05e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a05e:	b480      	push	{r7}
 800a060:	b083      	sub	sp, #12
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a066:	bf00      	nop
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bc80      	pop	{r7}
 800a06e:	4770      	bx	lr

0800a070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e03f      	b.n	800a102 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d106      	bne.n	800a09c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7fc f98e 	bl	80063b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2224      	movs	r2, #36	; 0x24
 800a0a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68da      	ldr	r2, [r3, #12]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f829 	bl	800a10c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	691a      	ldr	r2, [r3, #16]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	695a      	ldr	r2, [r3, #20]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	68da      	ldr	r2, [r3, #12]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2220      	movs	r2, #32
 800a0f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2220      	movs	r2, #32
 800a0fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
	...

0800a10c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	68da      	ldr	r2, [r3, #12]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	430a      	orrs	r2, r1
 800a128:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	689a      	ldr	r2, [r3, #8]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	431a      	orrs	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	695b      	ldr	r3, [r3, #20]
 800a138:	4313      	orrs	r3, r2
 800a13a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a146:	f023 030c 	bic.w	r3, r3, #12
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	6812      	ldr	r2, [r2, #0]
 800a14e:	68f9      	ldr	r1, [r7, #12]
 800a150:	430b      	orrs	r3, r1
 800a152:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	699a      	ldr	r2, [r3, #24]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	430a      	orrs	r2, r1
 800a168:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a52      	ldr	r2, [pc, #328]	; (800a2b8 <UART_SetConfig+0x1ac>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d14e      	bne.n	800a212 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a174:	f7ff faaa 	bl	80096cc <HAL_RCC_GetPCLK2Freq>
 800a178:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	4613      	mov	r3, r2
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4413      	add	r3, r2
 800a182:	009a      	lsls	r2, r3, #2
 800a184:	441a      	add	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a190:	4a4a      	ldr	r2, [pc, #296]	; (800a2bc <UART_SetConfig+0x1b0>)
 800a192:	fba2 2303 	umull	r2, r3, r2, r3
 800a196:	095b      	lsrs	r3, r3, #5
 800a198:	0119      	lsls	r1, r3, #4
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	4613      	mov	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	4413      	add	r3, r2
 800a1a2:	009a      	lsls	r2, r3, #2
 800a1a4:	441a      	add	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	fbb2 f2f3 	udiv	r2, r2, r3
 800a1b0:	4b42      	ldr	r3, [pc, #264]	; (800a2bc <UART_SetConfig+0x1b0>)
 800a1b2:	fba3 0302 	umull	r0, r3, r3, r2
 800a1b6:	095b      	lsrs	r3, r3, #5
 800a1b8:	2064      	movs	r0, #100	; 0x64
 800a1ba:	fb00 f303 	mul.w	r3, r0, r3
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	011b      	lsls	r3, r3, #4
 800a1c2:	3332      	adds	r3, #50	; 0x32
 800a1c4:	4a3d      	ldr	r2, [pc, #244]	; (800a2bc <UART_SetConfig+0x1b0>)
 800a1c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ca:	095b      	lsrs	r3, r3, #5
 800a1cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1d0:	4419      	add	r1, r3
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	4413      	add	r3, r2
 800a1da:	009a      	lsls	r2, r3, #2
 800a1dc:	441a      	add	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a1e8:	4b34      	ldr	r3, [pc, #208]	; (800a2bc <UART_SetConfig+0x1b0>)
 800a1ea:	fba3 0302 	umull	r0, r3, r3, r2
 800a1ee:	095b      	lsrs	r3, r3, #5
 800a1f0:	2064      	movs	r0, #100	; 0x64
 800a1f2:	fb00 f303 	mul.w	r3, r0, r3
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	011b      	lsls	r3, r3, #4
 800a1fa:	3332      	adds	r3, #50	; 0x32
 800a1fc:	4a2f      	ldr	r2, [pc, #188]	; (800a2bc <UART_SetConfig+0x1b0>)
 800a1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a202:	095b      	lsrs	r3, r3, #5
 800a204:	f003 020f 	and.w	r2, r3, #15
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	440a      	add	r2, r1
 800a20e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800a210:	e04d      	b.n	800a2ae <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800a212:	f7ff fa47 	bl	80096a4 <HAL_RCC_GetPCLK1Freq>
 800a216:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	4613      	mov	r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	4413      	add	r3, r2
 800a220:	009a      	lsls	r2, r3, #2
 800a222:	441a      	add	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a22e:	4a23      	ldr	r2, [pc, #140]	; (800a2bc <UART_SetConfig+0x1b0>)
 800a230:	fba2 2303 	umull	r2, r3, r2, r3
 800a234:	095b      	lsrs	r3, r3, #5
 800a236:	0119      	lsls	r1, r3, #4
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	4613      	mov	r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4413      	add	r3, r2
 800a240:	009a      	lsls	r2, r3, #2
 800a242:	441a      	add	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a24e:	4b1b      	ldr	r3, [pc, #108]	; (800a2bc <UART_SetConfig+0x1b0>)
 800a250:	fba3 0302 	umull	r0, r3, r3, r2
 800a254:	095b      	lsrs	r3, r3, #5
 800a256:	2064      	movs	r0, #100	; 0x64
 800a258:	fb00 f303 	mul.w	r3, r0, r3
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	011b      	lsls	r3, r3, #4
 800a260:	3332      	adds	r3, #50	; 0x32
 800a262:	4a16      	ldr	r2, [pc, #88]	; (800a2bc <UART_SetConfig+0x1b0>)
 800a264:	fba2 2303 	umull	r2, r3, r2, r3
 800a268:	095b      	lsrs	r3, r3, #5
 800a26a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a26e:	4419      	add	r1, r3
 800a270:	68ba      	ldr	r2, [r7, #8]
 800a272:	4613      	mov	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	4413      	add	r3, r2
 800a278:	009a      	lsls	r2, r3, #2
 800a27a:	441a      	add	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	fbb2 f2f3 	udiv	r2, r2, r3
 800a286:	4b0d      	ldr	r3, [pc, #52]	; (800a2bc <UART_SetConfig+0x1b0>)
 800a288:	fba3 0302 	umull	r0, r3, r3, r2
 800a28c:	095b      	lsrs	r3, r3, #5
 800a28e:	2064      	movs	r0, #100	; 0x64
 800a290:	fb00 f303 	mul.w	r3, r0, r3
 800a294:	1ad3      	subs	r3, r2, r3
 800a296:	011b      	lsls	r3, r3, #4
 800a298:	3332      	adds	r3, #50	; 0x32
 800a29a:	4a08      	ldr	r2, [pc, #32]	; (800a2bc <UART_SetConfig+0x1b0>)
 800a29c:	fba2 2303 	umull	r2, r3, r2, r3
 800a2a0:	095b      	lsrs	r3, r3, #5
 800a2a2:	f003 020f 	and.w	r2, r3, #15
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	440a      	add	r2, r1
 800a2ac:	609a      	str	r2, [r3, #8]
}
 800a2ae:	bf00      	nop
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	40013800 	.word	0x40013800
 800a2bc:	51eb851f 	.word	0x51eb851f

0800a2c0 <__errno>:
 800a2c0:	4b01      	ldr	r3, [pc, #4]	; (800a2c8 <__errno+0x8>)
 800a2c2:	6818      	ldr	r0, [r3, #0]
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	2000008c 	.word	0x2000008c

0800a2cc <__libc_init_array>:
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	2500      	movs	r5, #0
 800a2d0:	4e0c      	ldr	r6, [pc, #48]	; (800a304 <__libc_init_array+0x38>)
 800a2d2:	4c0d      	ldr	r4, [pc, #52]	; (800a308 <__libc_init_array+0x3c>)
 800a2d4:	1ba4      	subs	r4, r4, r6
 800a2d6:	10a4      	asrs	r4, r4, #2
 800a2d8:	42a5      	cmp	r5, r4
 800a2da:	d109      	bne.n	800a2f0 <__libc_init_array+0x24>
 800a2dc:	f002 fa92 	bl	800c804 <_init>
 800a2e0:	2500      	movs	r5, #0
 800a2e2:	4e0a      	ldr	r6, [pc, #40]	; (800a30c <__libc_init_array+0x40>)
 800a2e4:	4c0a      	ldr	r4, [pc, #40]	; (800a310 <__libc_init_array+0x44>)
 800a2e6:	1ba4      	subs	r4, r4, r6
 800a2e8:	10a4      	asrs	r4, r4, #2
 800a2ea:	42a5      	cmp	r5, r4
 800a2ec:	d105      	bne.n	800a2fa <__libc_init_array+0x2e>
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}
 800a2f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2f4:	4798      	blx	r3
 800a2f6:	3501      	adds	r5, #1
 800a2f8:	e7ee      	b.n	800a2d8 <__libc_init_array+0xc>
 800a2fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2fe:	4798      	blx	r3
 800a300:	3501      	adds	r5, #1
 800a302:	e7f2      	b.n	800a2ea <__libc_init_array+0x1e>
 800a304:	0800d524 	.word	0x0800d524
 800a308:	0800d524 	.word	0x0800d524
 800a30c:	0800d524 	.word	0x0800d524
 800a310:	0800d528 	.word	0x0800d528

0800a314 <memset>:
 800a314:	4603      	mov	r3, r0
 800a316:	4402      	add	r2, r0
 800a318:	4293      	cmp	r3, r2
 800a31a:	d100      	bne.n	800a31e <memset+0xa>
 800a31c:	4770      	bx	lr
 800a31e:	f803 1b01 	strb.w	r1, [r3], #1
 800a322:	e7f9      	b.n	800a318 <memset+0x4>

0800a324 <__cvt>:
 800a324:	2b00      	cmp	r3, #0
 800a326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a32a:	461e      	mov	r6, r3
 800a32c:	bfbb      	ittet	lt
 800a32e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a332:	461e      	movlt	r6, r3
 800a334:	2300      	movge	r3, #0
 800a336:	232d      	movlt	r3, #45	; 0x2d
 800a338:	b088      	sub	sp, #32
 800a33a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a33c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800a340:	f027 0720 	bic.w	r7, r7, #32
 800a344:	2f46      	cmp	r7, #70	; 0x46
 800a346:	4614      	mov	r4, r2
 800a348:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a34a:	700b      	strb	r3, [r1, #0]
 800a34c:	d004      	beq.n	800a358 <__cvt+0x34>
 800a34e:	2f45      	cmp	r7, #69	; 0x45
 800a350:	d100      	bne.n	800a354 <__cvt+0x30>
 800a352:	3501      	adds	r5, #1
 800a354:	2302      	movs	r3, #2
 800a356:	e000      	b.n	800a35a <__cvt+0x36>
 800a358:	2303      	movs	r3, #3
 800a35a:	aa07      	add	r2, sp, #28
 800a35c:	9204      	str	r2, [sp, #16]
 800a35e:	aa06      	add	r2, sp, #24
 800a360:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a364:	e9cd 3500 	strd	r3, r5, [sp]
 800a368:	4622      	mov	r2, r4
 800a36a:	4633      	mov	r3, r6
 800a36c:	f000 fcd8 	bl	800ad20 <_dtoa_r>
 800a370:	2f47      	cmp	r7, #71	; 0x47
 800a372:	4680      	mov	r8, r0
 800a374:	d102      	bne.n	800a37c <__cvt+0x58>
 800a376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a378:	07db      	lsls	r3, r3, #31
 800a37a:	d526      	bpl.n	800a3ca <__cvt+0xa6>
 800a37c:	2f46      	cmp	r7, #70	; 0x46
 800a37e:	eb08 0905 	add.w	r9, r8, r5
 800a382:	d111      	bne.n	800a3a8 <__cvt+0x84>
 800a384:	f898 3000 	ldrb.w	r3, [r8]
 800a388:	2b30      	cmp	r3, #48	; 0x30
 800a38a:	d10a      	bne.n	800a3a2 <__cvt+0x7e>
 800a38c:	2200      	movs	r2, #0
 800a38e:	2300      	movs	r3, #0
 800a390:	4620      	mov	r0, r4
 800a392:	4631      	mov	r1, r6
 800a394:	f7f6 fb08 	bl	80009a8 <__aeabi_dcmpeq>
 800a398:	b918      	cbnz	r0, 800a3a2 <__cvt+0x7e>
 800a39a:	f1c5 0501 	rsb	r5, r5, #1
 800a39e:	f8ca 5000 	str.w	r5, [sl]
 800a3a2:	f8da 3000 	ldr.w	r3, [sl]
 800a3a6:	4499      	add	r9, r3
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	4631      	mov	r1, r6
 800a3b0:	f7f6 fafa 	bl	80009a8 <__aeabi_dcmpeq>
 800a3b4:	b938      	cbnz	r0, 800a3c6 <__cvt+0xa2>
 800a3b6:	2230      	movs	r2, #48	; 0x30
 800a3b8:	9b07      	ldr	r3, [sp, #28]
 800a3ba:	454b      	cmp	r3, r9
 800a3bc:	d205      	bcs.n	800a3ca <__cvt+0xa6>
 800a3be:	1c59      	adds	r1, r3, #1
 800a3c0:	9107      	str	r1, [sp, #28]
 800a3c2:	701a      	strb	r2, [r3, #0]
 800a3c4:	e7f8      	b.n	800a3b8 <__cvt+0x94>
 800a3c6:	f8cd 901c 	str.w	r9, [sp, #28]
 800a3ca:	4640      	mov	r0, r8
 800a3cc:	9b07      	ldr	r3, [sp, #28]
 800a3ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a3d0:	eba3 0308 	sub.w	r3, r3, r8
 800a3d4:	6013      	str	r3, [r2, #0]
 800a3d6:	b008      	add	sp, #32
 800a3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a3dc <__exponent>:
 800a3dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3de:	2900      	cmp	r1, #0
 800a3e0:	bfb4      	ite	lt
 800a3e2:	232d      	movlt	r3, #45	; 0x2d
 800a3e4:	232b      	movge	r3, #43	; 0x2b
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	bfb8      	it	lt
 800a3ea:	4249      	neglt	r1, r1
 800a3ec:	2909      	cmp	r1, #9
 800a3ee:	f804 2b02 	strb.w	r2, [r4], #2
 800a3f2:	7043      	strb	r3, [r0, #1]
 800a3f4:	dd21      	ble.n	800a43a <__exponent+0x5e>
 800a3f6:	f10d 0307 	add.w	r3, sp, #7
 800a3fa:	461f      	mov	r7, r3
 800a3fc:	260a      	movs	r6, #10
 800a3fe:	fb91 f5f6 	sdiv	r5, r1, r6
 800a402:	fb06 1115 	mls	r1, r6, r5, r1
 800a406:	2d09      	cmp	r5, #9
 800a408:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800a40c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a410:	f103 32ff 	add.w	r2, r3, #4294967295
 800a414:	4629      	mov	r1, r5
 800a416:	dc09      	bgt.n	800a42c <__exponent+0x50>
 800a418:	3130      	adds	r1, #48	; 0x30
 800a41a:	3b02      	subs	r3, #2
 800a41c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a420:	42bb      	cmp	r3, r7
 800a422:	4622      	mov	r2, r4
 800a424:	d304      	bcc.n	800a430 <__exponent+0x54>
 800a426:	1a10      	subs	r0, r2, r0
 800a428:	b003      	add	sp, #12
 800a42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a42c:	4613      	mov	r3, r2
 800a42e:	e7e6      	b.n	800a3fe <__exponent+0x22>
 800a430:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a434:	f804 2b01 	strb.w	r2, [r4], #1
 800a438:	e7f2      	b.n	800a420 <__exponent+0x44>
 800a43a:	2330      	movs	r3, #48	; 0x30
 800a43c:	4419      	add	r1, r3
 800a43e:	7083      	strb	r3, [r0, #2]
 800a440:	1d02      	adds	r2, r0, #4
 800a442:	70c1      	strb	r1, [r0, #3]
 800a444:	e7ef      	b.n	800a426 <__exponent+0x4a>
	...

0800a448 <_printf_float>:
 800a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44c:	b091      	sub	sp, #68	; 0x44
 800a44e:	460c      	mov	r4, r1
 800a450:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a452:	4693      	mov	fp, r2
 800a454:	461e      	mov	r6, r3
 800a456:	4605      	mov	r5, r0
 800a458:	f001 fa16 	bl	800b888 <_localeconv_r>
 800a45c:	6803      	ldr	r3, [r0, #0]
 800a45e:	4618      	mov	r0, r3
 800a460:	9309      	str	r3, [sp, #36]	; 0x24
 800a462:	f7f5 fe75 	bl	8000150 <strlen>
 800a466:	2300      	movs	r3, #0
 800a468:	930e      	str	r3, [sp, #56]	; 0x38
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	900a      	str	r0, [sp, #40]	; 0x28
 800a46e:	3307      	adds	r3, #7
 800a470:	f023 0307 	bic.w	r3, r3, #7
 800a474:	f103 0208 	add.w	r2, r3, #8
 800a478:	f894 8018 	ldrb.w	r8, [r4, #24]
 800a47c:	f8d4 a000 	ldr.w	sl, [r4]
 800a480:	603a      	str	r2, [r7, #0]
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a48a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800a48e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a492:	930b      	str	r3, [sp, #44]	; 0x2c
 800a494:	f04f 32ff 	mov.w	r2, #4294967295
 800a498:	4ba6      	ldr	r3, [pc, #664]	; (800a734 <_printf_float+0x2ec>)
 800a49a:	4638      	mov	r0, r7
 800a49c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a49e:	f7f6 fab5 	bl	8000a0c <__aeabi_dcmpun>
 800a4a2:	bb68      	cbnz	r0, 800a500 <_printf_float+0xb8>
 800a4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a8:	4ba2      	ldr	r3, [pc, #648]	; (800a734 <_printf_float+0x2ec>)
 800a4aa:	4638      	mov	r0, r7
 800a4ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4ae:	f7f6 fa8f 	bl	80009d0 <__aeabi_dcmple>
 800a4b2:	bb28      	cbnz	r0, 800a500 <_printf_float+0xb8>
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	f7f6 fa7e 	bl	80009bc <__aeabi_dcmplt>
 800a4c0:	b110      	cbz	r0, 800a4c8 <_printf_float+0x80>
 800a4c2:	232d      	movs	r3, #45	; 0x2d
 800a4c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4c8:	4f9b      	ldr	r7, [pc, #620]	; (800a738 <_printf_float+0x2f0>)
 800a4ca:	4b9c      	ldr	r3, [pc, #624]	; (800a73c <_printf_float+0x2f4>)
 800a4cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a4d0:	bf98      	it	ls
 800a4d2:	461f      	movls	r7, r3
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	f04f 0900 	mov.w	r9, #0
 800a4da:	6123      	str	r3, [r4, #16]
 800a4dc:	f02a 0304 	bic.w	r3, sl, #4
 800a4e0:	6023      	str	r3, [r4, #0]
 800a4e2:	9600      	str	r6, [sp, #0]
 800a4e4:	465b      	mov	r3, fp
 800a4e6:	aa0f      	add	r2, sp, #60	; 0x3c
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	f000 f9e2 	bl	800a8b4 <_printf_common>
 800a4f0:	3001      	adds	r0, #1
 800a4f2:	f040 8090 	bne.w	800a616 <_printf_float+0x1ce>
 800a4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4fa:	b011      	add	sp, #68	; 0x44
 800a4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a500:	463a      	mov	r2, r7
 800a502:	464b      	mov	r3, r9
 800a504:	4638      	mov	r0, r7
 800a506:	4649      	mov	r1, r9
 800a508:	f7f6 fa80 	bl	8000a0c <__aeabi_dcmpun>
 800a50c:	b110      	cbz	r0, 800a514 <_printf_float+0xcc>
 800a50e:	4f8c      	ldr	r7, [pc, #560]	; (800a740 <_printf_float+0x2f8>)
 800a510:	4b8c      	ldr	r3, [pc, #560]	; (800a744 <_printf_float+0x2fc>)
 800a512:	e7db      	b.n	800a4cc <_printf_float+0x84>
 800a514:	6863      	ldr	r3, [r4, #4]
 800a516:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800a51a:	1c59      	adds	r1, r3, #1
 800a51c:	a80d      	add	r0, sp, #52	; 0x34
 800a51e:	a90e      	add	r1, sp, #56	; 0x38
 800a520:	d140      	bne.n	800a5a4 <_printf_float+0x15c>
 800a522:	2306      	movs	r3, #6
 800a524:	6063      	str	r3, [r4, #4]
 800a526:	f04f 0c00 	mov.w	ip, #0
 800a52a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800a52e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800a532:	6863      	ldr	r3, [r4, #4]
 800a534:	6022      	str	r2, [r4, #0]
 800a536:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	463a      	mov	r2, r7
 800a53e:	464b      	mov	r3, r9
 800a540:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800a544:	4628      	mov	r0, r5
 800a546:	f7ff feed 	bl	800a324 <__cvt>
 800a54a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800a54e:	2b47      	cmp	r3, #71	; 0x47
 800a550:	4607      	mov	r7, r0
 800a552:	d109      	bne.n	800a568 <_printf_float+0x120>
 800a554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a556:	1cd8      	adds	r0, r3, #3
 800a558:	db02      	blt.n	800a560 <_printf_float+0x118>
 800a55a:	6862      	ldr	r2, [r4, #4]
 800a55c:	4293      	cmp	r3, r2
 800a55e:	dd47      	ble.n	800a5f0 <_printf_float+0x1a8>
 800a560:	f1a8 0802 	sub.w	r8, r8, #2
 800a564:	fa5f f888 	uxtb.w	r8, r8
 800a568:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800a56c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a56e:	d824      	bhi.n	800a5ba <_printf_float+0x172>
 800a570:	3901      	subs	r1, #1
 800a572:	4642      	mov	r2, r8
 800a574:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a578:	910d      	str	r1, [sp, #52]	; 0x34
 800a57a:	f7ff ff2f 	bl	800a3dc <__exponent>
 800a57e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a580:	4681      	mov	r9, r0
 800a582:	1813      	adds	r3, r2, r0
 800a584:	2a01      	cmp	r2, #1
 800a586:	6123      	str	r3, [r4, #16]
 800a588:	dc02      	bgt.n	800a590 <_printf_float+0x148>
 800a58a:	6822      	ldr	r2, [r4, #0]
 800a58c:	07d1      	lsls	r1, r2, #31
 800a58e:	d501      	bpl.n	800a594 <_printf_float+0x14c>
 800a590:	3301      	adds	r3, #1
 800a592:	6123      	str	r3, [r4, #16]
 800a594:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d0a2      	beq.n	800a4e2 <_printf_float+0x9a>
 800a59c:	232d      	movs	r3, #45	; 0x2d
 800a59e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5a2:	e79e      	b.n	800a4e2 <_printf_float+0x9a>
 800a5a4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800a5a8:	f000 816e 	beq.w	800a888 <_printf_float+0x440>
 800a5ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a5b0:	d1b9      	bne.n	800a526 <_printf_float+0xde>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1b7      	bne.n	800a526 <_printf_float+0xde>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e7b4      	b.n	800a524 <_printf_float+0xdc>
 800a5ba:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800a5be:	d119      	bne.n	800a5f4 <_printf_float+0x1ac>
 800a5c0:	2900      	cmp	r1, #0
 800a5c2:	6863      	ldr	r3, [r4, #4]
 800a5c4:	dd0c      	ble.n	800a5e0 <_printf_float+0x198>
 800a5c6:	6121      	str	r1, [r4, #16]
 800a5c8:	b913      	cbnz	r3, 800a5d0 <_printf_float+0x188>
 800a5ca:	6822      	ldr	r2, [r4, #0]
 800a5cc:	07d2      	lsls	r2, r2, #31
 800a5ce:	d502      	bpl.n	800a5d6 <_printf_float+0x18e>
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	440b      	add	r3, r1
 800a5d4:	6123      	str	r3, [r4, #16]
 800a5d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5d8:	f04f 0900 	mov.w	r9, #0
 800a5dc:	65a3      	str	r3, [r4, #88]	; 0x58
 800a5de:	e7d9      	b.n	800a594 <_printf_float+0x14c>
 800a5e0:	b913      	cbnz	r3, 800a5e8 <_printf_float+0x1a0>
 800a5e2:	6822      	ldr	r2, [r4, #0]
 800a5e4:	07d0      	lsls	r0, r2, #31
 800a5e6:	d501      	bpl.n	800a5ec <_printf_float+0x1a4>
 800a5e8:	3302      	adds	r3, #2
 800a5ea:	e7f3      	b.n	800a5d4 <_printf_float+0x18c>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e7f1      	b.n	800a5d4 <_printf_float+0x18c>
 800a5f0:	f04f 0867 	mov.w	r8, #103	; 0x67
 800a5f4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	db05      	blt.n	800a608 <_printf_float+0x1c0>
 800a5fc:	6822      	ldr	r2, [r4, #0]
 800a5fe:	6123      	str	r3, [r4, #16]
 800a600:	07d1      	lsls	r1, r2, #31
 800a602:	d5e8      	bpl.n	800a5d6 <_printf_float+0x18e>
 800a604:	3301      	adds	r3, #1
 800a606:	e7e5      	b.n	800a5d4 <_printf_float+0x18c>
 800a608:	2b00      	cmp	r3, #0
 800a60a:	bfcc      	ite	gt
 800a60c:	2301      	movgt	r3, #1
 800a60e:	f1c3 0302 	rsble	r3, r3, #2
 800a612:	4413      	add	r3, r2
 800a614:	e7de      	b.n	800a5d4 <_printf_float+0x18c>
 800a616:	6823      	ldr	r3, [r4, #0]
 800a618:	055a      	lsls	r2, r3, #21
 800a61a:	d407      	bmi.n	800a62c <_printf_float+0x1e4>
 800a61c:	6923      	ldr	r3, [r4, #16]
 800a61e:	463a      	mov	r2, r7
 800a620:	4659      	mov	r1, fp
 800a622:	4628      	mov	r0, r5
 800a624:	47b0      	blx	r6
 800a626:	3001      	adds	r0, #1
 800a628:	d129      	bne.n	800a67e <_printf_float+0x236>
 800a62a:	e764      	b.n	800a4f6 <_printf_float+0xae>
 800a62c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800a630:	f240 80d7 	bls.w	800a7e2 <_printf_float+0x39a>
 800a634:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a638:	2200      	movs	r2, #0
 800a63a:	2300      	movs	r3, #0
 800a63c:	f7f6 f9b4 	bl	80009a8 <__aeabi_dcmpeq>
 800a640:	b388      	cbz	r0, 800a6a6 <_printf_float+0x25e>
 800a642:	2301      	movs	r3, #1
 800a644:	4a40      	ldr	r2, [pc, #256]	; (800a748 <_printf_float+0x300>)
 800a646:	4659      	mov	r1, fp
 800a648:	4628      	mov	r0, r5
 800a64a:	47b0      	blx	r6
 800a64c:	3001      	adds	r0, #1
 800a64e:	f43f af52 	beq.w	800a4f6 <_printf_float+0xae>
 800a652:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a656:	429a      	cmp	r2, r3
 800a658:	db02      	blt.n	800a660 <_printf_float+0x218>
 800a65a:	6823      	ldr	r3, [r4, #0]
 800a65c:	07d8      	lsls	r0, r3, #31
 800a65e:	d50e      	bpl.n	800a67e <_printf_float+0x236>
 800a660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a664:	4659      	mov	r1, fp
 800a666:	4628      	mov	r0, r5
 800a668:	47b0      	blx	r6
 800a66a:	3001      	adds	r0, #1
 800a66c:	f43f af43 	beq.w	800a4f6 <_printf_float+0xae>
 800a670:	2700      	movs	r7, #0
 800a672:	f104 081a 	add.w	r8, r4, #26
 800a676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a678:	3b01      	subs	r3, #1
 800a67a:	42bb      	cmp	r3, r7
 800a67c:	dc09      	bgt.n	800a692 <_printf_float+0x24a>
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	079f      	lsls	r7, r3, #30
 800a682:	f100 80fd 	bmi.w	800a880 <_printf_float+0x438>
 800a686:	68e0      	ldr	r0, [r4, #12]
 800a688:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a68a:	4298      	cmp	r0, r3
 800a68c:	bfb8      	it	lt
 800a68e:	4618      	movlt	r0, r3
 800a690:	e733      	b.n	800a4fa <_printf_float+0xb2>
 800a692:	2301      	movs	r3, #1
 800a694:	4642      	mov	r2, r8
 800a696:	4659      	mov	r1, fp
 800a698:	4628      	mov	r0, r5
 800a69a:	47b0      	blx	r6
 800a69c:	3001      	adds	r0, #1
 800a69e:	f43f af2a 	beq.w	800a4f6 <_printf_float+0xae>
 800a6a2:	3701      	adds	r7, #1
 800a6a4:	e7e7      	b.n	800a676 <_printf_float+0x22e>
 800a6a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	dc2b      	bgt.n	800a704 <_printf_float+0x2bc>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	4a26      	ldr	r2, [pc, #152]	; (800a748 <_printf_float+0x300>)
 800a6b0:	4659      	mov	r1, fp
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	47b0      	blx	r6
 800a6b6:	3001      	adds	r0, #1
 800a6b8:	f43f af1d 	beq.w	800a4f6 <_printf_float+0xae>
 800a6bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6be:	b923      	cbnz	r3, 800a6ca <_printf_float+0x282>
 800a6c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6c2:	b913      	cbnz	r3, 800a6ca <_printf_float+0x282>
 800a6c4:	6823      	ldr	r3, [r4, #0]
 800a6c6:	07d9      	lsls	r1, r3, #31
 800a6c8:	d5d9      	bpl.n	800a67e <_printf_float+0x236>
 800a6ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6ce:	4659      	mov	r1, fp
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	47b0      	blx	r6
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	f43f af0e 	beq.w	800a4f6 <_printf_float+0xae>
 800a6da:	f04f 0800 	mov.w	r8, #0
 800a6de:	f104 091a 	add.w	r9, r4, #26
 800a6e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6e4:	425b      	negs	r3, r3
 800a6e6:	4543      	cmp	r3, r8
 800a6e8:	dc01      	bgt.n	800a6ee <_printf_float+0x2a6>
 800a6ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6ec:	e797      	b.n	800a61e <_printf_float+0x1d6>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	464a      	mov	r2, r9
 800a6f2:	4659      	mov	r1, fp
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	47b0      	blx	r6
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	f43f aefc 	beq.w	800a4f6 <_printf_float+0xae>
 800a6fe:	f108 0801 	add.w	r8, r8, #1
 800a702:	e7ee      	b.n	800a6e2 <_printf_float+0x29a>
 800a704:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a706:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a708:	429a      	cmp	r2, r3
 800a70a:	bfa8      	it	ge
 800a70c:	461a      	movge	r2, r3
 800a70e:	2a00      	cmp	r2, #0
 800a710:	4690      	mov	r8, r2
 800a712:	dd07      	ble.n	800a724 <_printf_float+0x2dc>
 800a714:	4613      	mov	r3, r2
 800a716:	4659      	mov	r1, fp
 800a718:	463a      	mov	r2, r7
 800a71a:	4628      	mov	r0, r5
 800a71c:	47b0      	blx	r6
 800a71e:	3001      	adds	r0, #1
 800a720:	f43f aee9 	beq.w	800a4f6 <_printf_float+0xae>
 800a724:	f104 031a 	add.w	r3, r4, #26
 800a728:	f04f 0a00 	mov.w	sl, #0
 800a72c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800a730:	930b      	str	r3, [sp, #44]	; 0x2c
 800a732:	e015      	b.n	800a760 <_printf_float+0x318>
 800a734:	7fefffff 	.word	0x7fefffff
 800a738:	0800d2c8 	.word	0x0800d2c8
 800a73c:	0800d2c4 	.word	0x0800d2c4
 800a740:	0800d2d0 	.word	0x0800d2d0
 800a744:	0800d2cc 	.word	0x0800d2cc
 800a748:	0800d2d4 	.word	0x0800d2d4
 800a74c:	2301      	movs	r3, #1
 800a74e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a750:	4659      	mov	r1, fp
 800a752:	4628      	mov	r0, r5
 800a754:	47b0      	blx	r6
 800a756:	3001      	adds	r0, #1
 800a758:	f43f aecd 	beq.w	800a4f6 <_printf_float+0xae>
 800a75c:	f10a 0a01 	add.w	sl, sl, #1
 800a760:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800a764:	eba9 0308 	sub.w	r3, r9, r8
 800a768:	4553      	cmp	r3, sl
 800a76a:	dcef      	bgt.n	800a74c <_printf_float+0x304>
 800a76c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a770:	429a      	cmp	r2, r3
 800a772:	444f      	add	r7, r9
 800a774:	db14      	blt.n	800a7a0 <_printf_float+0x358>
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	07da      	lsls	r2, r3, #31
 800a77a:	d411      	bmi.n	800a7a0 <_printf_float+0x358>
 800a77c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a77e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a780:	eba3 0209 	sub.w	r2, r3, r9
 800a784:	eba3 0901 	sub.w	r9, r3, r1
 800a788:	4591      	cmp	r9, r2
 800a78a:	bfa8      	it	ge
 800a78c:	4691      	movge	r9, r2
 800a78e:	f1b9 0f00 	cmp.w	r9, #0
 800a792:	dc0d      	bgt.n	800a7b0 <_printf_float+0x368>
 800a794:	2700      	movs	r7, #0
 800a796:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a79a:	f104 081a 	add.w	r8, r4, #26
 800a79e:	e018      	b.n	800a7d2 <_printf_float+0x38a>
 800a7a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7a4:	4659      	mov	r1, fp
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	47b0      	blx	r6
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	d1e6      	bne.n	800a77c <_printf_float+0x334>
 800a7ae:	e6a2      	b.n	800a4f6 <_printf_float+0xae>
 800a7b0:	464b      	mov	r3, r9
 800a7b2:	463a      	mov	r2, r7
 800a7b4:	4659      	mov	r1, fp
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	47b0      	blx	r6
 800a7ba:	3001      	adds	r0, #1
 800a7bc:	d1ea      	bne.n	800a794 <_printf_float+0x34c>
 800a7be:	e69a      	b.n	800a4f6 <_printf_float+0xae>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	4642      	mov	r2, r8
 800a7c4:	4659      	mov	r1, fp
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	47b0      	blx	r6
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	f43f ae93 	beq.w	800a4f6 <_printf_float+0xae>
 800a7d0:	3701      	adds	r7, #1
 800a7d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a7d6:	1a9b      	subs	r3, r3, r2
 800a7d8:	eba3 0309 	sub.w	r3, r3, r9
 800a7dc:	42bb      	cmp	r3, r7
 800a7de:	dcef      	bgt.n	800a7c0 <_printf_float+0x378>
 800a7e0:	e74d      	b.n	800a67e <_printf_float+0x236>
 800a7e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7e4:	2a01      	cmp	r2, #1
 800a7e6:	dc01      	bgt.n	800a7ec <_printf_float+0x3a4>
 800a7e8:	07db      	lsls	r3, r3, #31
 800a7ea:	d538      	bpl.n	800a85e <_printf_float+0x416>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	463a      	mov	r2, r7
 800a7f0:	4659      	mov	r1, fp
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	47b0      	blx	r6
 800a7f6:	3001      	adds	r0, #1
 800a7f8:	f43f ae7d 	beq.w	800a4f6 <_printf_float+0xae>
 800a7fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a800:	4659      	mov	r1, fp
 800a802:	4628      	mov	r0, r5
 800a804:	47b0      	blx	r6
 800a806:	3001      	adds	r0, #1
 800a808:	f107 0701 	add.w	r7, r7, #1
 800a80c:	f43f ae73 	beq.w	800a4f6 <_printf_float+0xae>
 800a810:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a816:	2200      	movs	r2, #0
 800a818:	f103 38ff 	add.w	r8, r3, #4294967295
 800a81c:	2300      	movs	r3, #0
 800a81e:	f7f6 f8c3 	bl	80009a8 <__aeabi_dcmpeq>
 800a822:	b9c0      	cbnz	r0, 800a856 <_printf_float+0x40e>
 800a824:	4643      	mov	r3, r8
 800a826:	463a      	mov	r2, r7
 800a828:	4659      	mov	r1, fp
 800a82a:	4628      	mov	r0, r5
 800a82c:	47b0      	blx	r6
 800a82e:	3001      	adds	r0, #1
 800a830:	d10d      	bne.n	800a84e <_printf_float+0x406>
 800a832:	e660      	b.n	800a4f6 <_printf_float+0xae>
 800a834:	2301      	movs	r3, #1
 800a836:	4642      	mov	r2, r8
 800a838:	4659      	mov	r1, fp
 800a83a:	4628      	mov	r0, r5
 800a83c:	47b0      	blx	r6
 800a83e:	3001      	adds	r0, #1
 800a840:	f43f ae59 	beq.w	800a4f6 <_printf_float+0xae>
 800a844:	3701      	adds	r7, #1
 800a846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a848:	3b01      	subs	r3, #1
 800a84a:	42bb      	cmp	r3, r7
 800a84c:	dcf2      	bgt.n	800a834 <_printf_float+0x3ec>
 800a84e:	464b      	mov	r3, r9
 800a850:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a854:	e6e4      	b.n	800a620 <_printf_float+0x1d8>
 800a856:	2700      	movs	r7, #0
 800a858:	f104 081a 	add.w	r8, r4, #26
 800a85c:	e7f3      	b.n	800a846 <_printf_float+0x3fe>
 800a85e:	2301      	movs	r3, #1
 800a860:	e7e1      	b.n	800a826 <_printf_float+0x3de>
 800a862:	2301      	movs	r3, #1
 800a864:	4642      	mov	r2, r8
 800a866:	4659      	mov	r1, fp
 800a868:	4628      	mov	r0, r5
 800a86a:	47b0      	blx	r6
 800a86c:	3001      	adds	r0, #1
 800a86e:	f43f ae42 	beq.w	800a4f6 <_printf_float+0xae>
 800a872:	3701      	adds	r7, #1
 800a874:	68e3      	ldr	r3, [r4, #12]
 800a876:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a878:	1a9b      	subs	r3, r3, r2
 800a87a:	42bb      	cmp	r3, r7
 800a87c:	dcf1      	bgt.n	800a862 <_printf_float+0x41a>
 800a87e:	e702      	b.n	800a686 <_printf_float+0x23e>
 800a880:	2700      	movs	r7, #0
 800a882:	f104 0819 	add.w	r8, r4, #25
 800a886:	e7f5      	b.n	800a874 <_printf_float+0x42c>
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f43f ae94 	beq.w	800a5b6 <_printf_float+0x16e>
 800a88e:	f04f 0c00 	mov.w	ip, #0
 800a892:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800a896:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800a89a:	6022      	str	r2, [r4, #0]
 800a89c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800a8a0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	463a      	mov	r2, r7
 800a8a8:	464b      	mov	r3, r9
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	f7ff fd3a 	bl	800a324 <__cvt>
 800a8b0:	4607      	mov	r7, r0
 800a8b2:	e64f      	b.n	800a554 <_printf_float+0x10c>

0800a8b4 <_printf_common>:
 800a8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b8:	4691      	mov	r9, r2
 800a8ba:	461f      	mov	r7, r3
 800a8bc:	688a      	ldr	r2, [r1, #8]
 800a8be:	690b      	ldr	r3, [r1, #16]
 800a8c0:	4606      	mov	r6, r0
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	bfb8      	it	lt
 800a8c6:	4613      	movlt	r3, r2
 800a8c8:	f8c9 3000 	str.w	r3, [r9]
 800a8cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8d6:	b112      	cbz	r2, 800a8de <_printf_common+0x2a>
 800a8d8:	3301      	adds	r3, #1
 800a8da:	f8c9 3000 	str.w	r3, [r9]
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	0699      	lsls	r1, r3, #26
 800a8e2:	bf42      	ittt	mi
 800a8e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a8e8:	3302      	addmi	r3, #2
 800a8ea:	f8c9 3000 	strmi.w	r3, [r9]
 800a8ee:	6825      	ldr	r5, [r4, #0]
 800a8f0:	f015 0506 	ands.w	r5, r5, #6
 800a8f4:	d107      	bne.n	800a906 <_printf_common+0x52>
 800a8f6:	f104 0a19 	add.w	sl, r4, #25
 800a8fa:	68e3      	ldr	r3, [r4, #12]
 800a8fc:	f8d9 2000 	ldr.w	r2, [r9]
 800a900:	1a9b      	subs	r3, r3, r2
 800a902:	42ab      	cmp	r3, r5
 800a904:	dc29      	bgt.n	800a95a <_printf_common+0xa6>
 800a906:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a90a:	6822      	ldr	r2, [r4, #0]
 800a90c:	3300      	adds	r3, #0
 800a90e:	bf18      	it	ne
 800a910:	2301      	movne	r3, #1
 800a912:	0692      	lsls	r2, r2, #26
 800a914:	d42e      	bmi.n	800a974 <_printf_common+0xc0>
 800a916:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a91a:	4639      	mov	r1, r7
 800a91c:	4630      	mov	r0, r6
 800a91e:	47c0      	blx	r8
 800a920:	3001      	adds	r0, #1
 800a922:	d021      	beq.n	800a968 <_printf_common+0xb4>
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	68e5      	ldr	r5, [r4, #12]
 800a928:	f003 0306 	and.w	r3, r3, #6
 800a92c:	2b04      	cmp	r3, #4
 800a92e:	bf18      	it	ne
 800a930:	2500      	movne	r5, #0
 800a932:	f8d9 2000 	ldr.w	r2, [r9]
 800a936:	f04f 0900 	mov.w	r9, #0
 800a93a:	bf08      	it	eq
 800a93c:	1aad      	subeq	r5, r5, r2
 800a93e:	68a3      	ldr	r3, [r4, #8]
 800a940:	6922      	ldr	r2, [r4, #16]
 800a942:	bf08      	it	eq
 800a944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a948:	4293      	cmp	r3, r2
 800a94a:	bfc4      	itt	gt
 800a94c:	1a9b      	subgt	r3, r3, r2
 800a94e:	18ed      	addgt	r5, r5, r3
 800a950:	341a      	adds	r4, #26
 800a952:	454d      	cmp	r5, r9
 800a954:	d11a      	bne.n	800a98c <_printf_common+0xd8>
 800a956:	2000      	movs	r0, #0
 800a958:	e008      	b.n	800a96c <_printf_common+0xb8>
 800a95a:	2301      	movs	r3, #1
 800a95c:	4652      	mov	r2, sl
 800a95e:	4639      	mov	r1, r7
 800a960:	4630      	mov	r0, r6
 800a962:	47c0      	blx	r8
 800a964:	3001      	adds	r0, #1
 800a966:	d103      	bne.n	800a970 <_printf_common+0xbc>
 800a968:	f04f 30ff 	mov.w	r0, #4294967295
 800a96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a970:	3501      	adds	r5, #1
 800a972:	e7c2      	b.n	800a8fa <_printf_common+0x46>
 800a974:	2030      	movs	r0, #48	; 0x30
 800a976:	18e1      	adds	r1, r4, r3
 800a978:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a97c:	1c5a      	adds	r2, r3, #1
 800a97e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a982:	4422      	add	r2, r4
 800a984:	3302      	adds	r3, #2
 800a986:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a98a:	e7c4      	b.n	800a916 <_printf_common+0x62>
 800a98c:	2301      	movs	r3, #1
 800a98e:	4622      	mov	r2, r4
 800a990:	4639      	mov	r1, r7
 800a992:	4630      	mov	r0, r6
 800a994:	47c0      	blx	r8
 800a996:	3001      	adds	r0, #1
 800a998:	d0e6      	beq.n	800a968 <_printf_common+0xb4>
 800a99a:	f109 0901 	add.w	r9, r9, #1
 800a99e:	e7d8      	b.n	800a952 <_printf_common+0x9e>

0800a9a0 <_printf_i>:
 800a9a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a9a8:	460c      	mov	r4, r1
 800a9aa:	7e09      	ldrb	r1, [r1, #24]
 800a9ac:	b085      	sub	sp, #20
 800a9ae:	296e      	cmp	r1, #110	; 0x6e
 800a9b0:	4617      	mov	r7, r2
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	4698      	mov	r8, r3
 800a9b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9b8:	f000 80b3 	beq.w	800ab22 <_printf_i+0x182>
 800a9bc:	d822      	bhi.n	800aa04 <_printf_i+0x64>
 800a9be:	2963      	cmp	r1, #99	; 0x63
 800a9c0:	d036      	beq.n	800aa30 <_printf_i+0x90>
 800a9c2:	d80a      	bhi.n	800a9da <_printf_i+0x3a>
 800a9c4:	2900      	cmp	r1, #0
 800a9c6:	f000 80b9 	beq.w	800ab3c <_printf_i+0x19c>
 800a9ca:	2958      	cmp	r1, #88	; 0x58
 800a9cc:	f000 8083 	beq.w	800aad6 <_printf_i+0x136>
 800a9d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a9d8:	e032      	b.n	800aa40 <_printf_i+0xa0>
 800a9da:	2964      	cmp	r1, #100	; 0x64
 800a9dc:	d001      	beq.n	800a9e2 <_printf_i+0x42>
 800a9de:	2969      	cmp	r1, #105	; 0x69
 800a9e0:	d1f6      	bne.n	800a9d0 <_printf_i+0x30>
 800a9e2:	6820      	ldr	r0, [r4, #0]
 800a9e4:	6813      	ldr	r3, [r2, #0]
 800a9e6:	0605      	lsls	r5, r0, #24
 800a9e8:	f103 0104 	add.w	r1, r3, #4
 800a9ec:	d52a      	bpl.n	800aa44 <_printf_i+0xa4>
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6011      	str	r1, [r2, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	da03      	bge.n	800a9fe <_printf_i+0x5e>
 800a9f6:	222d      	movs	r2, #45	; 0x2d
 800a9f8:	425b      	negs	r3, r3
 800a9fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a9fe:	486f      	ldr	r0, [pc, #444]	; (800abbc <_printf_i+0x21c>)
 800aa00:	220a      	movs	r2, #10
 800aa02:	e039      	b.n	800aa78 <_printf_i+0xd8>
 800aa04:	2973      	cmp	r1, #115	; 0x73
 800aa06:	f000 809d 	beq.w	800ab44 <_printf_i+0x1a4>
 800aa0a:	d808      	bhi.n	800aa1e <_printf_i+0x7e>
 800aa0c:	296f      	cmp	r1, #111	; 0x6f
 800aa0e:	d020      	beq.n	800aa52 <_printf_i+0xb2>
 800aa10:	2970      	cmp	r1, #112	; 0x70
 800aa12:	d1dd      	bne.n	800a9d0 <_printf_i+0x30>
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	f043 0320 	orr.w	r3, r3, #32
 800aa1a:	6023      	str	r3, [r4, #0]
 800aa1c:	e003      	b.n	800aa26 <_printf_i+0x86>
 800aa1e:	2975      	cmp	r1, #117	; 0x75
 800aa20:	d017      	beq.n	800aa52 <_printf_i+0xb2>
 800aa22:	2978      	cmp	r1, #120	; 0x78
 800aa24:	d1d4      	bne.n	800a9d0 <_printf_i+0x30>
 800aa26:	2378      	movs	r3, #120	; 0x78
 800aa28:	4865      	ldr	r0, [pc, #404]	; (800abc0 <_printf_i+0x220>)
 800aa2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa2e:	e055      	b.n	800aadc <_printf_i+0x13c>
 800aa30:	6813      	ldr	r3, [r2, #0]
 800aa32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa36:	1d19      	adds	r1, r3, #4
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	6011      	str	r1, [r2, #0]
 800aa3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa40:	2301      	movs	r3, #1
 800aa42:	e08c      	b.n	800ab5e <_printf_i+0x1be>
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa4a:	6011      	str	r1, [r2, #0]
 800aa4c:	bf18      	it	ne
 800aa4e:	b21b      	sxthne	r3, r3
 800aa50:	e7cf      	b.n	800a9f2 <_printf_i+0x52>
 800aa52:	6813      	ldr	r3, [r2, #0]
 800aa54:	6825      	ldr	r5, [r4, #0]
 800aa56:	1d18      	adds	r0, r3, #4
 800aa58:	6010      	str	r0, [r2, #0]
 800aa5a:	0628      	lsls	r0, r5, #24
 800aa5c:	d501      	bpl.n	800aa62 <_printf_i+0xc2>
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	e002      	b.n	800aa68 <_printf_i+0xc8>
 800aa62:	0668      	lsls	r0, r5, #25
 800aa64:	d5fb      	bpl.n	800aa5e <_printf_i+0xbe>
 800aa66:	881b      	ldrh	r3, [r3, #0]
 800aa68:	296f      	cmp	r1, #111	; 0x6f
 800aa6a:	bf14      	ite	ne
 800aa6c:	220a      	movne	r2, #10
 800aa6e:	2208      	moveq	r2, #8
 800aa70:	4852      	ldr	r0, [pc, #328]	; (800abbc <_printf_i+0x21c>)
 800aa72:	2100      	movs	r1, #0
 800aa74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa78:	6865      	ldr	r5, [r4, #4]
 800aa7a:	2d00      	cmp	r5, #0
 800aa7c:	60a5      	str	r5, [r4, #8]
 800aa7e:	f2c0 8095 	blt.w	800abac <_printf_i+0x20c>
 800aa82:	6821      	ldr	r1, [r4, #0]
 800aa84:	f021 0104 	bic.w	r1, r1, #4
 800aa88:	6021      	str	r1, [r4, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d13d      	bne.n	800ab0a <_printf_i+0x16a>
 800aa8e:	2d00      	cmp	r5, #0
 800aa90:	f040 808e 	bne.w	800abb0 <_printf_i+0x210>
 800aa94:	4665      	mov	r5, ip
 800aa96:	2a08      	cmp	r2, #8
 800aa98:	d10b      	bne.n	800aab2 <_printf_i+0x112>
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	07db      	lsls	r3, r3, #31
 800aa9e:	d508      	bpl.n	800aab2 <_printf_i+0x112>
 800aaa0:	6923      	ldr	r3, [r4, #16]
 800aaa2:	6862      	ldr	r2, [r4, #4]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	bfde      	ittt	le
 800aaa8:	2330      	movle	r3, #48	; 0x30
 800aaaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aaae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aab2:	ebac 0305 	sub.w	r3, ip, r5
 800aab6:	6123      	str	r3, [r4, #16]
 800aab8:	f8cd 8000 	str.w	r8, [sp]
 800aabc:	463b      	mov	r3, r7
 800aabe:	aa03      	add	r2, sp, #12
 800aac0:	4621      	mov	r1, r4
 800aac2:	4630      	mov	r0, r6
 800aac4:	f7ff fef6 	bl	800a8b4 <_printf_common>
 800aac8:	3001      	adds	r0, #1
 800aaca:	d14d      	bne.n	800ab68 <_printf_i+0x1c8>
 800aacc:	f04f 30ff 	mov.w	r0, #4294967295
 800aad0:	b005      	add	sp, #20
 800aad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aad6:	4839      	ldr	r0, [pc, #228]	; (800abbc <_printf_i+0x21c>)
 800aad8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aadc:	6813      	ldr	r3, [r2, #0]
 800aade:	6821      	ldr	r1, [r4, #0]
 800aae0:	1d1d      	adds	r5, r3, #4
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6015      	str	r5, [r2, #0]
 800aae6:	060a      	lsls	r2, r1, #24
 800aae8:	d50b      	bpl.n	800ab02 <_printf_i+0x162>
 800aaea:	07ca      	lsls	r2, r1, #31
 800aaec:	bf44      	itt	mi
 800aaee:	f041 0120 	orrmi.w	r1, r1, #32
 800aaf2:	6021      	strmi	r1, [r4, #0]
 800aaf4:	b91b      	cbnz	r3, 800aafe <_printf_i+0x15e>
 800aaf6:	6822      	ldr	r2, [r4, #0]
 800aaf8:	f022 0220 	bic.w	r2, r2, #32
 800aafc:	6022      	str	r2, [r4, #0]
 800aafe:	2210      	movs	r2, #16
 800ab00:	e7b7      	b.n	800aa72 <_printf_i+0xd2>
 800ab02:	064d      	lsls	r5, r1, #25
 800ab04:	bf48      	it	mi
 800ab06:	b29b      	uxthmi	r3, r3
 800ab08:	e7ef      	b.n	800aaea <_printf_i+0x14a>
 800ab0a:	4665      	mov	r5, ip
 800ab0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab10:	fb02 3311 	mls	r3, r2, r1, r3
 800ab14:	5cc3      	ldrb	r3, [r0, r3]
 800ab16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	2900      	cmp	r1, #0
 800ab1e:	d1f5      	bne.n	800ab0c <_printf_i+0x16c>
 800ab20:	e7b9      	b.n	800aa96 <_printf_i+0xf6>
 800ab22:	6813      	ldr	r3, [r2, #0]
 800ab24:	6825      	ldr	r5, [r4, #0]
 800ab26:	1d18      	adds	r0, r3, #4
 800ab28:	6961      	ldr	r1, [r4, #20]
 800ab2a:	6010      	str	r0, [r2, #0]
 800ab2c:	0628      	lsls	r0, r5, #24
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	d501      	bpl.n	800ab36 <_printf_i+0x196>
 800ab32:	6019      	str	r1, [r3, #0]
 800ab34:	e002      	b.n	800ab3c <_printf_i+0x19c>
 800ab36:	066a      	lsls	r2, r5, #25
 800ab38:	d5fb      	bpl.n	800ab32 <_printf_i+0x192>
 800ab3a:	8019      	strh	r1, [r3, #0]
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	4665      	mov	r5, ip
 800ab40:	6123      	str	r3, [r4, #16]
 800ab42:	e7b9      	b.n	800aab8 <_printf_i+0x118>
 800ab44:	6813      	ldr	r3, [r2, #0]
 800ab46:	1d19      	adds	r1, r3, #4
 800ab48:	6011      	str	r1, [r2, #0]
 800ab4a:	681d      	ldr	r5, [r3, #0]
 800ab4c:	6862      	ldr	r2, [r4, #4]
 800ab4e:	2100      	movs	r1, #0
 800ab50:	4628      	mov	r0, r5
 800ab52:	f000 feaf 	bl	800b8b4 <memchr>
 800ab56:	b108      	cbz	r0, 800ab5c <_printf_i+0x1bc>
 800ab58:	1b40      	subs	r0, r0, r5
 800ab5a:	6060      	str	r0, [r4, #4]
 800ab5c:	6863      	ldr	r3, [r4, #4]
 800ab5e:	6123      	str	r3, [r4, #16]
 800ab60:	2300      	movs	r3, #0
 800ab62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab66:	e7a7      	b.n	800aab8 <_printf_i+0x118>
 800ab68:	6923      	ldr	r3, [r4, #16]
 800ab6a:	462a      	mov	r2, r5
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	4630      	mov	r0, r6
 800ab70:	47c0      	blx	r8
 800ab72:	3001      	adds	r0, #1
 800ab74:	d0aa      	beq.n	800aacc <_printf_i+0x12c>
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	079b      	lsls	r3, r3, #30
 800ab7a:	d413      	bmi.n	800aba4 <_printf_i+0x204>
 800ab7c:	68e0      	ldr	r0, [r4, #12]
 800ab7e:	9b03      	ldr	r3, [sp, #12]
 800ab80:	4298      	cmp	r0, r3
 800ab82:	bfb8      	it	lt
 800ab84:	4618      	movlt	r0, r3
 800ab86:	e7a3      	b.n	800aad0 <_printf_i+0x130>
 800ab88:	2301      	movs	r3, #1
 800ab8a:	464a      	mov	r2, r9
 800ab8c:	4639      	mov	r1, r7
 800ab8e:	4630      	mov	r0, r6
 800ab90:	47c0      	blx	r8
 800ab92:	3001      	adds	r0, #1
 800ab94:	d09a      	beq.n	800aacc <_printf_i+0x12c>
 800ab96:	3501      	adds	r5, #1
 800ab98:	68e3      	ldr	r3, [r4, #12]
 800ab9a:	9a03      	ldr	r2, [sp, #12]
 800ab9c:	1a9b      	subs	r3, r3, r2
 800ab9e:	42ab      	cmp	r3, r5
 800aba0:	dcf2      	bgt.n	800ab88 <_printf_i+0x1e8>
 800aba2:	e7eb      	b.n	800ab7c <_printf_i+0x1dc>
 800aba4:	2500      	movs	r5, #0
 800aba6:	f104 0919 	add.w	r9, r4, #25
 800abaa:	e7f5      	b.n	800ab98 <_printf_i+0x1f8>
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1ac      	bne.n	800ab0a <_printf_i+0x16a>
 800abb0:	7803      	ldrb	r3, [r0, #0]
 800abb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abba:	e76c      	b.n	800aa96 <_printf_i+0xf6>
 800abbc:	0800d2d6 	.word	0x0800d2d6
 800abc0:	0800d2e7 	.word	0x0800d2e7

0800abc4 <siprintf>:
 800abc4:	b40e      	push	{r1, r2, r3}
 800abc6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800abca:	b500      	push	{lr}
 800abcc:	b09c      	sub	sp, #112	; 0x70
 800abce:	ab1d      	add	r3, sp, #116	; 0x74
 800abd0:	9002      	str	r0, [sp, #8]
 800abd2:	9006      	str	r0, [sp, #24]
 800abd4:	9107      	str	r1, [sp, #28]
 800abd6:	9104      	str	r1, [sp, #16]
 800abd8:	4808      	ldr	r0, [pc, #32]	; (800abfc <siprintf+0x38>)
 800abda:	4909      	ldr	r1, [pc, #36]	; (800ac00 <siprintf+0x3c>)
 800abdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800abe0:	9105      	str	r1, [sp, #20]
 800abe2:	6800      	ldr	r0, [r0, #0]
 800abe4:	a902      	add	r1, sp, #8
 800abe6:	9301      	str	r3, [sp, #4]
 800abe8:	f001 fa68 	bl	800c0bc <_svfiprintf_r>
 800abec:	2200      	movs	r2, #0
 800abee:	9b02      	ldr	r3, [sp, #8]
 800abf0:	701a      	strb	r2, [r3, #0]
 800abf2:	b01c      	add	sp, #112	; 0x70
 800abf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800abf8:	b003      	add	sp, #12
 800abfa:	4770      	bx	lr
 800abfc:	2000008c 	.word	0x2000008c
 800ac00:	ffff0208 	.word	0xffff0208

0800ac04 <quorem>:
 800ac04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac08:	6903      	ldr	r3, [r0, #16]
 800ac0a:	690c      	ldr	r4, [r1, #16]
 800ac0c:	4680      	mov	r8, r0
 800ac0e:	42a3      	cmp	r3, r4
 800ac10:	f2c0 8084 	blt.w	800ad1c <quorem+0x118>
 800ac14:	3c01      	subs	r4, #1
 800ac16:	f101 0714 	add.w	r7, r1, #20
 800ac1a:	f100 0614 	add.w	r6, r0, #20
 800ac1e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ac22:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ac26:	3501      	adds	r5, #1
 800ac28:	fbb0 f5f5 	udiv	r5, r0, r5
 800ac2c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ac30:	eb06 030c 	add.w	r3, r6, ip
 800ac34:	eb07 090c 	add.w	r9, r7, ip
 800ac38:	9301      	str	r3, [sp, #4]
 800ac3a:	b39d      	cbz	r5, 800aca4 <quorem+0xa0>
 800ac3c:	f04f 0a00 	mov.w	sl, #0
 800ac40:	4638      	mov	r0, r7
 800ac42:	46b6      	mov	lr, r6
 800ac44:	46d3      	mov	fp, sl
 800ac46:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac4a:	b293      	uxth	r3, r2
 800ac4c:	fb05 a303 	mla	r3, r5, r3, sl
 800ac50:	0c12      	lsrs	r2, r2, #16
 800ac52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac56:	fb05 a202 	mla	r2, r5, r2, sl
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	ebab 0303 	sub.w	r3, fp, r3
 800ac60:	f8de b000 	ldr.w	fp, [lr]
 800ac64:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ac68:	fa1f fb8b 	uxth.w	fp, fp
 800ac6c:	445b      	add	r3, fp
 800ac6e:	fa1f fb82 	uxth.w	fp, r2
 800ac72:	f8de 2000 	ldr.w	r2, [lr]
 800ac76:	4581      	cmp	r9, r0
 800ac78:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ac7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac86:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ac8a:	f84e 3b04 	str.w	r3, [lr], #4
 800ac8e:	d2da      	bcs.n	800ac46 <quorem+0x42>
 800ac90:	f856 300c 	ldr.w	r3, [r6, ip]
 800ac94:	b933      	cbnz	r3, 800aca4 <quorem+0xa0>
 800ac96:	9b01      	ldr	r3, [sp, #4]
 800ac98:	3b04      	subs	r3, #4
 800ac9a:	429e      	cmp	r6, r3
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	d331      	bcc.n	800ad04 <quorem+0x100>
 800aca0:	f8c8 4010 	str.w	r4, [r8, #16]
 800aca4:	4640      	mov	r0, r8
 800aca6:	f001 f833 	bl	800bd10 <__mcmp>
 800acaa:	2800      	cmp	r0, #0
 800acac:	db26      	blt.n	800acfc <quorem+0xf8>
 800acae:	4630      	mov	r0, r6
 800acb0:	f04f 0c00 	mov.w	ip, #0
 800acb4:	3501      	adds	r5, #1
 800acb6:	f857 1b04 	ldr.w	r1, [r7], #4
 800acba:	f8d0 e000 	ldr.w	lr, [r0]
 800acbe:	b28b      	uxth	r3, r1
 800acc0:	ebac 0303 	sub.w	r3, ip, r3
 800acc4:	fa1f f28e 	uxth.w	r2, lr
 800acc8:	4413      	add	r3, r2
 800acca:	0c0a      	lsrs	r2, r1, #16
 800accc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800acd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acda:	45b9      	cmp	r9, r7
 800acdc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ace0:	f840 3b04 	str.w	r3, [r0], #4
 800ace4:	d2e7      	bcs.n	800acb6 <quorem+0xb2>
 800ace6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800acea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800acee:	b92a      	cbnz	r2, 800acfc <quorem+0xf8>
 800acf0:	3b04      	subs	r3, #4
 800acf2:	429e      	cmp	r6, r3
 800acf4:	461a      	mov	r2, r3
 800acf6:	d30b      	bcc.n	800ad10 <quorem+0x10c>
 800acf8:	f8c8 4010 	str.w	r4, [r8, #16]
 800acfc:	4628      	mov	r0, r5
 800acfe:	b003      	add	sp, #12
 800ad00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad04:	6812      	ldr	r2, [r2, #0]
 800ad06:	3b04      	subs	r3, #4
 800ad08:	2a00      	cmp	r2, #0
 800ad0a:	d1c9      	bne.n	800aca0 <quorem+0x9c>
 800ad0c:	3c01      	subs	r4, #1
 800ad0e:	e7c4      	b.n	800ac9a <quorem+0x96>
 800ad10:	6812      	ldr	r2, [r2, #0]
 800ad12:	3b04      	subs	r3, #4
 800ad14:	2a00      	cmp	r2, #0
 800ad16:	d1ef      	bne.n	800acf8 <quorem+0xf4>
 800ad18:	3c01      	subs	r4, #1
 800ad1a:	e7ea      	b.n	800acf2 <quorem+0xee>
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	e7ee      	b.n	800acfe <quorem+0xfa>

0800ad20 <_dtoa_r>:
 800ad20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad24:	4616      	mov	r6, r2
 800ad26:	461f      	mov	r7, r3
 800ad28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ad2a:	b095      	sub	sp, #84	; 0x54
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800ad32:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ad36:	b93d      	cbnz	r5, 800ad48 <_dtoa_r+0x28>
 800ad38:	2010      	movs	r0, #16
 800ad3a:	f000 fdb3 	bl	800b8a4 <malloc>
 800ad3e:	6260      	str	r0, [r4, #36]	; 0x24
 800ad40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad44:	6005      	str	r5, [r0, #0]
 800ad46:	60c5      	str	r5, [r0, #12]
 800ad48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad4a:	6819      	ldr	r1, [r3, #0]
 800ad4c:	b151      	cbz	r1, 800ad64 <_dtoa_r+0x44>
 800ad4e:	685a      	ldr	r2, [r3, #4]
 800ad50:	2301      	movs	r3, #1
 800ad52:	4093      	lsls	r3, r2
 800ad54:	604a      	str	r2, [r1, #4]
 800ad56:	608b      	str	r3, [r1, #8]
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f000 fdf8 	bl	800b94e <_Bfree>
 800ad5e:	2200      	movs	r2, #0
 800ad60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad62:	601a      	str	r2, [r3, #0]
 800ad64:	1e3b      	subs	r3, r7, #0
 800ad66:	bfaf      	iteee	ge
 800ad68:	2300      	movge	r3, #0
 800ad6a:	2201      	movlt	r2, #1
 800ad6c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad70:	9303      	strlt	r3, [sp, #12]
 800ad72:	bfac      	ite	ge
 800ad74:	f8c8 3000 	strge.w	r3, [r8]
 800ad78:	f8c8 2000 	strlt.w	r2, [r8]
 800ad7c:	4bae      	ldr	r3, [pc, #696]	; (800b038 <_dtoa_r+0x318>)
 800ad7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ad82:	ea33 0308 	bics.w	r3, r3, r8
 800ad86:	d11b      	bne.n	800adc0 <_dtoa_r+0xa0>
 800ad88:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ad8e:	6013      	str	r3, [r2, #0]
 800ad90:	9b02      	ldr	r3, [sp, #8]
 800ad92:	b923      	cbnz	r3, 800ad9e <_dtoa_r+0x7e>
 800ad94:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	f000 8545 	beq.w	800b828 <_dtoa_r+0xb08>
 800ad9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ada0:	b953      	cbnz	r3, 800adb8 <_dtoa_r+0x98>
 800ada2:	4ba6      	ldr	r3, [pc, #664]	; (800b03c <_dtoa_r+0x31c>)
 800ada4:	e021      	b.n	800adea <_dtoa_r+0xca>
 800ada6:	4ba6      	ldr	r3, [pc, #664]	; (800b040 <_dtoa_r+0x320>)
 800ada8:	9306      	str	r3, [sp, #24]
 800adaa:	3308      	adds	r3, #8
 800adac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800adae:	6013      	str	r3, [r2, #0]
 800adb0:	9806      	ldr	r0, [sp, #24]
 800adb2:	b015      	add	sp, #84	; 0x54
 800adb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb8:	4ba0      	ldr	r3, [pc, #640]	; (800b03c <_dtoa_r+0x31c>)
 800adba:	9306      	str	r3, [sp, #24]
 800adbc:	3303      	adds	r3, #3
 800adbe:	e7f5      	b.n	800adac <_dtoa_r+0x8c>
 800adc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800adc4:	2200      	movs	r2, #0
 800adc6:	2300      	movs	r3, #0
 800adc8:	4630      	mov	r0, r6
 800adca:	4639      	mov	r1, r7
 800adcc:	f7f5 fdec 	bl	80009a8 <__aeabi_dcmpeq>
 800add0:	4682      	mov	sl, r0
 800add2:	b160      	cbz	r0, 800adee <_dtoa_r+0xce>
 800add4:	2301      	movs	r3, #1
 800add6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800add8:	6013      	str	r3, [r2, #0]
 800adda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 8520 	beq.w	800b822 <_dtoa_r+0xb02>
 800ade2:	4b98      	ldr	r3, [pc, #608]	; (800b044 <_dtoa_r+0x324>)
 800ade4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ade6:	6013      	str	r3, [r2, #0]
 800ade8:	3b01      	subs	r3, #1
 800adea:	9306      	str	r3, [sp, #24]
 800adec:	e7e0      	b.n	800adb0 <_dtoa_r+0x90>
 800adee:	ab12      	add	r3, sp, #72	; 0x48
 800adf0:	9301      	str	r3, [sp, #4]
 800adf2:	ab13      	add	r3, sp, #76	; 0x4c
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	4632      	mov	r2, r6
 800adf8:	463b      	mov	r3, r7
 800adfa:	4620      	mov	r0, r4
 800adfc:	f001 f800 	bl	800be00 <__d2b>
 800ae00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ae04:	4683      	mov	fp, r0
 800ae06:	2d00      	cmp	r5, #0
 800ae08:	d07d      	beq.n	800af06 <_dtoa_r+0x1e6>
 800ae0a:	46b0      	mov	r8, r6
 800ae0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae10:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800ae14:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800ae18:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ae1c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800ae20:	2200      	movs	r2, #0
 800ae22:	4b89      	ldr	r3, [pc, #548]	; (800b048 <_dtoa_r+0x328>)
 800ae24:	4640      	mov	r0, r8
 800ae26:	4649      	mov	r1, r9
 800ae28:	f7f5 f99e 	bl	8000168 <__aeabi_dsub>
 800ae2c:	a37c      	add	r3, pc, #496	; (adr r3, 800b020 <_dtoa_r+0x300>)
 800ae2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae32:	f7f5 fb51 	bl	80004d8 <__aeabi_dmul>
 800ae36:	a37c      	add	r3, pc, #496	; (adr r3, 800b028 <_dtoa_r+0x308>)
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	f7f5 f996 	bl	800016c <__adddf3>
 800ae40:	4606      	mov	r6, r0
 800ae42:	4628      	mov	r0, r5
 800ae44:	460f      	mov	r7, r1
 800ae46:	f7f5 fadd 	bl	8000404 <__aeabi_i2d>
 800ae4a:	a379      	add	r3, pc, #484	; (adr r3, 800b030 <_dtoa_r+0x310>)
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	f7f5 fb42 	bl	80004d8 <__aeabi_dmul>
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	4630      	mov	r0, r6
 800ae5a:	4639      	mov	r1, r7
 800ae5c:	f7f5 f986 	bl	800016c <__adddf3>
 800ae60:	4606      	mov	r6, r0
 800ae62:	460f      	mov	r7, r1
 800ae64:	f7f5 fde8 	bl	8000a38 <__aeabi_d2iz>
 800ae68:	2200      	movs	r2, #0
 800ae6a:	4682      	mov	sl, r0
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4630      	mov	r0, r6
 800ae70:	4639      	mov	r1, r7
 800ae72:	f7f5 fda3 	bl	80009bc <__aeabi_dcmplt>
 800ae76:	b148      	cbz	r0, 800ae8c <_dtoa_r+0x16c>
 800ae78:	4650      	mov	r0, sl
 800ae7a:	f7f5 fac3 	bl	8000404 <__aeabi_i2d>
 800ae7e:	4632      	mov	r2, r6
 800ae80:	463b      	mov	r3, r7
 800ae82:	f7f5 fd91 	bl	80009a8 <__aeabi_dcmpeq>
 800ae86:	b908      	cbnz	r0, 800ae8c <_dtoa_r+0x16c>
 800ae88:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae8c:	f1ba 0f16 	cmp.w	sl, #22
 800ae90:	d85a      	bhi.n	800af48 <_dtoa_r+0x228>
 800ae92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae96:	496d      	ldr	r1, [pc, #436]	; (800b04c <_dtoa_r+0x32c>)
 800ae98:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ae9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aea0:	f7f5 fdaa 	bl	80009f8 <__aeabi_dcmpgt>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d051      	beq.n	800af4c <_dtoa_r+0x22c>
 800aea8:	2300      	movs	r3, #0
 800aeaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aeae:	930d      	str	r3, [sp, #52]	; 0x34
 800aeb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aeb2:	1b5d      	subs	r5, r3, r5
 800aeb4:	1e6b      	subs	r3, r5, #1
 800aeb6:	9307      	str	r3, [sp, #28]
 800aeb8:	bf43      	ittte	mi
 800aeba:	2300      	movmi	r3, #0
 800aebc:	f1c5 0901 	rsbmi	r9, r5, #1
 800aec0:	9307      	strmi	r3, [sp, #28]
 800aec2:	f04f 0900 	movpl.w	r9, #0
 800aec6:	f1ba 0f00 	cmp.w	sl, #0
 800aeca:	db41      	blt.n	800af50 <_dtoa_r+0x230>
 800aecc:	9b07      	ldr	r3, [sp, #28]
 800aece:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800aed2:	4453      	add	r3, sl
 800aed4:	9307      	str	r3, [sp, #28]
 800aed6:	2300      	movs	r3, #0
 800aed8:	9308      	str	r3, [sp, #32]
 800aeda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aedc:	2b09      	cmp	r3, #9
 800aede:	f200 808f 	bhi.w	800b000 <_dtoa_r+0x2e0>
 800aee2:	2b05      	cmp	r3, #5
 800aee4:	bfc4      	itt	gt
 800aee6:	3b04      	subgt	r3, #4
 800aee8:	931e      	strgt	r3, [sp, #120]	; 0x78
 800aeea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aeec:	bfc8      	it	gt
 800aeee:	2500      	movgt	r5, #0
 800aef0:	f1a3 0302 	sub.w	r3, r3, #2
 800aef4:	bfd8      	it	le
 800aef6:	2501      	movle	r5, #1
 800aef8:	2b03      	cmp	r3, #3
 800aefa:	f200 808d 	bhi.w	800b018 <_dtoa_r+0x2f8>
 800aefe:	e8df f003 	tbb	[pc, r3]
 800af02:	7d7b      	.short	0x7d7b
 800af04:	6f2f      	.short	0x6f2f
 800af06:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800af0a:	441d      	add	r5, r3
 800af0c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800af10:	2820      	cmp	r0, #32
 800af12:	dd13      	ble.n	800af3c <_dtoa_r+0x21c>
 800af14:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800af18:	9b02      	ldr	r3, [sp, #8]
 800af1a:	fa08 f800 	lsl.w	r8, r8, r0
 800af1e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800af22:	fa23 f000 	lsr.w	r0, r3, r0
 800af26:	ea48 0000 	orr.w	r0, r8, r0
 800af2a:	f7f5 fa5b 	bl	80003e4 <__aeabi_ui2d>
 800af2e:	2301      	movs	r3, #1
 800af30:	4680      	mov	r8, r0
 800af32:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800af36:	3d01      	subs	r5, #1
 800af38:	9310      	str	r3, [sp, #64]	; 0x40
 800af3a:	e771      	b.n	800ae20 <_dtoa_r+0x100>
 800af3c:	9b02      	ldr	r3, [sp, #8]
 800af3e:	f1c0 0020 	rsb	r0, r0, #32
 800af42:	fa03 f000 	lsl.w	r0, r3, r0
 800af46:	e7f0      	b.n	800af2a <_dtoa_r+0x20a>
 800af48:	2301      	movs	r3, #1
 800af4a:	e7b0      	b.n	800aeae <_dtoa_r+0x18e>
 800af4c:	900d      	str	r0, [sp, #52]	; 0x34
 800af4e:	e7af      	b.n	800aeb0 <_dtoa_r+0x190>
 800af50:	f1ca 0300 	rsb	r3, sl, #0
 800af54:	9308      	str	r3, [sp, #32]
 800af56:	2300      	movs	r3, #0
 800af58:	eba9 090a 	sub.w	r9, r9, sl
 800af5c:	930c      	str	r3, [sp, #48]	; 0x30
 800af5e:	e7bc      	b.n	800aeda <_dtoa_r+0x1ba>
 800af60:	2301      	movs	r3, #1
 800af62:	9309      	str	r3, [sp, #36]	; 0x24
 800af64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800af66:	2b00      	cmp	r3, #0
 800af68:	dd74      	ble.n	800b054 <_dtoa_r+0x334>
 800af6a:	4698      	mov	r8, r3
 800af6c:	9304      	str	r3, [sp, #16]
 800af6e:	2200      	movs	r2, #0
 800af70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af72:	6072      	str	r2, [r6, #4]
 800af74:	2204      	movs	r2, #4
 800af76:	f102 0014 	add.w	r0, r2, #20
 800af7a:	4298      	cmp	r0, r3
 800af7c:	6871      	ldr	r1, [r6, #4]
 800af7e:	d96e      	bls.n	800b05e <_dtoa_r+0x33e>
 800af80:	4620      	mov	r0, r4
 800af82:	f000 fcb0 	bl	800b8e6 <_Balloc>
 800af86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af88:	6030      	str	r0, [r6, #0]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f1b8 0f0e 	cmp.w	r8, #14
 800af90:	9306      	str	r3, [sp, #24]
 800af92:	f200 80ed 	bhi.w	800b170 <_dtoa_r+0x450>
 800af96:	2d00      	cmp	r5, #0
 800af98:	f000 80ea 	beq.w	800b170 <_dtoa_r+0x450>
 800af9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afa0:	f1ba 0f00 	cmp.w	sl, #0
 800afa4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800afa8:	dd77      	ble.n	800b09a <_dtoa_r+0x37a>
 800afaa:	4a28      	ldr	r2, [pc, #160]	; (800b04c <_dtoa_r+0x32c>)
 800afac:	f00a 030f 	and.w	r3, sl, #15
 800afb0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800afb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800afb8:	06f0      	lsls	r0, r6, #27
 800afba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800afc2:	d568      	bpl.n	800b096 <_dtoa_r+0x376>
 800afc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800afc8:	4b21      	ldr	r3, [pc, #132]	; (800b050 <_dtoa_r+0x330>)
 800afca:	2503      	movs	r5, #3
 800afcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afd0:	f7f5 fbac 	bl	800072c <__aeabi_ddiv>
 800afd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afd8:	f006 060f 	and.w	r6, r6, #15
 800afdc:	4f1c      	ldr	r7, [pc, #112]	; (800b050 <_dtoa_r+0x330>)
 800afde:	e04f      	b.n	800b080 <_dtoa_r+0x360>
 800afe0:	2301      	movs	r3, #1
 800afe2:	9309      	str	r3, [sp, #36]	; 0x24
 800afe4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800afe6:	4453      	add	r3, sl
 800afe8:	f103 0801 	add.w	r8, r3, #1
 800afec:	9304      	str	r3, [sp, #16]
 800afee:	4643      	mov	r3, r8
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	bfb8      	it	lt
 800aff4:	2301      	movlt	r3, #1
 800aff6:	e7ba      	b.n	800af6e <_dtoa_r+0x24e>
 800aff8:	2300      	movs	r3, #0
 800affa:	e7b2      	b.n	800af62 <_dtoa_r+0x242>
 800affc:	2300      	movs	r3, #0
 800affe:	e7f0      	b.n	800afe2 <_dtoa_r+0x2c2>
 800b000:	2501      	movs	r5, #1
 800b002:	2300      	movs	r3, #0
 800b004:	9509      	str	r5, [sp, #36]	; 0x24
 800b006:	931e      	str	r3, [sp, #120]	; 0x78
 800b008:	f04f 33ff 	mov.w	r3, #4294967295
 800b00c:	2200      	movs	r2, #0
 800b00e:	9304      	str	r3, [sp, #16]
 800b010:	4698      	mov	r8, r3
 800b012:	2312      	movs	r3, #18
 800b014:	921f      	str	r2, [sp, #124]	; 0x7c
 800b016:	e7aa      	b.n	800af6e <_dtoa_r+0x24e>
 800b018:	2301      	movs	r3, #1
 800b01a:	9309      	str	r3, [sp, #36]	; 0x24
 800b01c:	e7f4      	b.n	800b008 <_dtoa_r+0x2e8>
 800b01e:	bf00      	nop
 800b020:	636f4361 	.word	0x636f4361
 800b024:	3fd287a7 	.word	0x3fd287a7
 800b028:	8b60c8b3 	.word	0x8b60c8b3
 800b02c:	3fc68a28 	.word	0x3fc68a28
 800b030:	509f79fb 	.word	0x509f79fb
 800b034:	3fd34413 	.word	0x3fd34413
 800b038:	7ff00000 	.word	0x7ff00000
 800b03c:	0800d301 	.word	0x0800d301
 800b040:	0800d2f8 	.word	0x0800d2f8
 800b044:	0800d2d5 	.word	0x0800d2d5
 800b048:	3ff80000 	.word	0x3ff80000
 800b04c:	0800d330 	.word	0x0800d330
 800b050:	0800d308 	.word	0x0800d308
 800b054:	2301      	movs	r3, #1
 800b056:	9304      	str	r3, [sp, #16]
 800b058:	4698      	mov	r8, r3
 800b05a:	461a      	mov	r2, r3
 800b05c:	e7da      	b.n	800b014 <_dtoa_r+0x2f4>
 800b05e:	3101      	adds	r1, #1
 800b060:	6071      	str	r1, [r6, #4]
 800b062:	0052      	lsls	r2, r2, #1
 800b064:	e787      	b.n	800af76 <_dtoa_r+0x256>
 800b066:	07f1      	lsls	r1, r6, #31
 800b068:	d508      	bpl.n	800b07c <_dtoa_r+0x35c>
 800b06a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b06e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b072:	f7f5 fa31 	bl	80004d8 <__aeabi_dmul>
 800b076:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b07a:	3501      	adds	r5, #1
 800b07c:	1076      	asrs	r6, r6, #1
 800b07e:	3708      	adds	r7, #8
 800b080:	2e00      	cmp	r6, #0
 800b082:	d1f0      	bne.n	800b066 <_dtoa_r+0x346>
 800b084:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b08c:	f7f5 fb4e 	bl	800072c <__aeabi_ddiv>
 800b090:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b094:	e01b      	b.n	800b0ce <_dtoa_r+0x3ae>
 800b096:	2502      	movs	r5, #2
 800b098:	e7a0      	b.n	800afdc <_dtoa_r+0x2bc>
 800b09a:	f000 80a4 	beq.w	800b1e6 <_dtoa_r+0x4c6>
 800b09e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b0a2:	f1ca 0600 	rsb	r6, sl, #0
 800b0a6:	4ba0      	ldr	r3, [pc, #640]	; (800b328 <_dtoa_r+0x608>)
 800b0a8:	f006 020f 	and.w	r2, r6, #15
 800b0ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	f7f5 fa10 	bl	80004d8 <__aeabi_dmul>
 800b0b8:	2502      	movs	r5, #2
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0c0:	4f9a      	ldr	r7, [pc, #616]	; (800b32c <_dtoa_r+0x60c>)
 800b0c2:	1136      	asrs	r6, r6, #4
 800b0c4:	2e00      	cmp	r6, #0
 800b0c6:	f040 8083 	bne.w	800b1d0 <_dtoa_r+0x4b0>
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e0      	bne.n	800b090 <_dtoa_r+0x370>
 800b0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f000 808a 	beq.w	800b1ea <_dtoa_r+0x4ca>
 800b0d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b0de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	4b92      	ldr	r3, [pc, #584]	; (800b330 <_dtoa_r+0x610>)
 800b0e6:	f7f5 fc69 	bl	80009bc <__aeabi_dcmplt>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d07d      	beq.n	800b1ea <_dtoa_r+0x4ca>
 800b0ee:	f1b8 0f00 	cmp.w	r8, #0
 800b0f2:	d07a      	beq.n	800b1ea <_dtoa_r+0x4ca>
 800b0f4:	9b04      	ldr	r3, [sp, #16]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	dd36      	ble.n	800b168 <_dtoa_r+0x448>
 800b0fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b0fe:	2200      	movs	r2, #0
 800b100:	4b8c      	ldr	r3, [pc, #560]	; (800b334 <_dtoa_r+0x614>)
 800b102:	f7f5 f9e9 	bl	80004d8 <__aeabi_dmul>
 800b106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b10a:	9e04      	ldr	r6, [sp, #16]
 800b10c:	f10a 37ff 	add.w	r7, sl, #4294967295
 800b110:	3501      	adds	r5, #1
 800b112:	4628      	mov	r0, r5
 800b114:	f7f5 f976 	bl	8000404 <__aeabi_i2d>
 800b118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b11c:	f7f5 f9dc 	bl	80004d8 <__aeabi_dmul>
 800b120:	2200      	movs	r2, #0
 800b122:	4b85      	ldr	r3, [pc, #532]	; (800b338 <_dtoa_r+0x618>)
 800b124:	f7f5 f822 	bl	800016c <__adddf3>
 800b128:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800b12c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b130:	950b      	str	r5, [sp, #44]	; 0x2c
 800b132:	2e00      	cmp	r6, #0
 800b134:	d15c      	bne.n	800b1f0 <_dtoa_r+0x4d0>
 800b136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b13a:	2200      	movs	r2, #0
 800b13c:	4b7f      	ldr	r3, [pc, #508]	; (800b33c <_dtoa_r+0x61c>)
 800b13e:	f7f5 f813 	bl	8000168 <__aeabi_dsub>
 800b142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b144:	462b      	mov	r3, r5
 800b146:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b14a:	f7f5 fc55 	bl	80009f8 <__aeabi_dcmpgt>
 800b14e:	2800      	cmp	r0, #0
 800b150:	f040 8281 	bne.w	800b656 <_dtoa_r+0x936>
 800b154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b15a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b15e:	f7f5 fc2d 	bl	80009bc <__aeabi_dcmplt>
 800b162:	2800      	cmp	r0, #0
 800b164:	f040 8275 	bne.w	800b652 <_dtoa_r+0x932>
 800b168:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b16c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b170:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b172:	2b00      	cmp	r3, #0
 800b174:	f2c0 814b 	blt.w	800b40e <_dtoa_r+0x6ee>
 800b178:	f1ba 0f0e 	cmp.w	sl, #14
 800b17c:	f300 8147 	bgt.w	800b40e <_dtoa_r+0x6ee>
 800b180:	4b69      	ldr	r3, [pc, #420]	; (800b328 <_dtoa_r+0x608>)
 800b182:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b18e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b190:	2b00      	cmp	r3, #0
 800b192:	f280 80d7 	bge.w	800b344 <_dtoa_r+0x624>
 800b196:	f1b8 0f00 	cmp.w	r8, #0
 800b19a:	f300 80d3 	bgt.w	800b344 <_dtoa_r+0x624>
 800b19e:	f040 8257 	bne.w	800b650 <_dtoa_r+0x930>
 800b1a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	4b64      	ldr	r3, [pc, #400]	; (800b33c <_dtoa_r+0x61c>)
 800b1aa:	f7f5 f995 	bl	80004d8 <__aeabi_dmul>
 800b1ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1b2:	f7f5 fc17 	bl	80009e4 <__aeabi_dcmpge>
 800b1b6:	4646      	mov	r6, r8
 800b1b8:	4647      	mov	r7, r8
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	f040 822d 	bne.w	800b61a <_dtoa_r+0x8fa>
 800b1c0:	9b06      	ldr	r3, [sp, #24]
 800b1c2:	9a06      	ldr	r2, [sp, #24]
 800b1c4:	1c5d      	adds	r5, r3, #1
 800b1c6:	2331      	movs	r3, #49	; 0x31
 800b1c8:	f10a 0a01 	add.w	sl, sl, #1
 800b1cc:	7013      	strb	r3, [r2, #0]
 800b1ce:	e228      	b.n	800b622 <_dtoa_r+0x902>
 800b1d0:	07f2      	lsls	r2, r6, #31
 800b1d2:	d505      	bpl.n	800b1e0 <_dtoa_r+0x4c0>
 800b1d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1d8:	f7f5 f97e 	bl	80004d8 <__aeabi_dmul>
 800b1dc:	2301      	movs	r3, #1
 800b1de:	3501      	adds	r5, #1
 800b1e0:	1076      	asrs	r6, r6, #1
 800b1e2:	3708      	adds	r7, #8
 800b1e4:	e76e      	b.n	800b0c4 <_dtoa_r+0x3a4>
 800b1e6:	2502      	movs	r5, #2
 800b1e8:	e771      	b.n	800b0ce <_dtoa_r+0x3ae>
 800b1ea:	4657      	mov	r7, sl
 800b1ec:	4646      	mov	r6, r8
 800b1ee:	e790      	b.n	800b112 <_dtoa_r+0x3f2>
 800b1f0:	4b4d      	ldr	r3, [pc, #308]	; (800b328 <_dtoa_r+0x608>)
 800b1f2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b1f6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d048      	beq.n	800b292 <_dtoa_r+0x572>
 800b200:	4602      	mov	r2, r0
 800b202:	460b      	mov	r3, r1
 800b204:	2000      	movs	r0, #0
 800b206:	494e      	ldr	r1, [pc, #312]	; (800b340 <_dtoa_r+0x620>)
 800b208:	f7f5 fa90 	bl	800072c <__aeabi_ddiv>
 800b20c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b210:	f7f4 ffaa 	bl	8000168 <__aeabi_dsub>
 800b214:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b218:	9d06      	ldr	r5, [sp, #24]
 800b21a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b21e:	f7f5 fc0b 	bl	8000a38 <__aeabi_d2iz>
 800b222:	9011      	str	r0, [sp, #68]	; 0x44
 800b224:	f7f5 f8ee 	bl	8000404 <__aeabi_i2d>
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b230:	f7f4 ff9a 	bl	8000168 <__aeabi_dsub>
 800b234:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b23a:	3330      	adds	r3, #48	; 0x30
 800b23c:	f805 3b01 	strb.w	r3, [r5], #1
 800b240:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b244:	f7f5 fbba 	bl	80009bc <__aeabi_dcmplt>
 800b248:	2800      	cmp	r0, #0
 800b24a:	d163      	bne.n	800b314 <_dtoa_r+0x5f4>
 800b24c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b250:	2000      	movs	r0, #0
 800b252:	4937      	ldr	r1, [pc, #220]	; (800b330 <_dtoa_r+0x610>)
 800b254:	f7f4 ff88 	bl	8000168 <__aeabi_dsub>
 800b258:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b25c:	f7f5 fbae 	bl	80009bc <__aeabi_dcmplt>
 800b260:	2800      	cmp	r0, #0
 800b262:	f040 80b5 	bne.w	800b3d0 <_dtoa_r+0x6b0>
 800b266:	9b06      	ldr	r3, [sp, #24]
 800b268:	1aeb      	subs	r3, r5, r3
 800b26a:	429e      	cmp	r6, r3
 800b26c:	f77f af7c 	ble.w	800b168 <_dtoa_r+0x448>
 800b270:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b274:	2200      	movs	r2, #0
 800b276:	4b2f      	ldr	r3, [pc, #188]	; (800b334 <_dtoa_r+0x614>)
 800b278:	f7f5 f92e 	bl	80004d8 <__aeabi_dmul>
 800b27c:	2200      	movs	r2, #0
 800b27e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b286:	4b2b      	ldr	r3, [pc, #172]	; (800b334 <_dtoa_r+0x614>)
 800b288:	f7f5 f926 	bl	80004d8 <__aeabi_dmul>
 800b28c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b290:	e7c3      	b.n	800b21a <_dtoa_r+0x4fa>
 800b292:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b296:	f7f5 f91f 	bl	80004d8 <__aeabi_dmul>
 800b29a:	9b06      	ldr	r3, [sp, #24]
 800b29c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b2a0:	199d      	adds	r5, r3, r6
 800b2a2:	461e      	mov	r6, r3
 800b2a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2a8:	f7f5 fbc6 	bl	8000a38 <__aeabi_d2iz>
 800b2ac:	9011      	str	r0, [sp, #68]	; 0x44
 800b2ae:	f7f5 f8a9 	bl	8000404 <__aeabi_i2d>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ba:	f7f4 ff55 	bl	8000168 <__aeabi_dsub>
 800b2be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2c4:	3330      	adds	r3, #48	; 0x30
 800b2c6:	f806 3b01 	strb.w	r3, [r6], #1
 800b2ca:	42ae      	cmp	r6, r5
 800b2cc:	f04f 0200 	mov.w	r2, #0
 800b2d0:	d124      	bne.n	800b31c <_dtoa_r+0x5fc>
 800b2d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2d6:	4b1a      	ldr	r3, [pc, #104]	; (800b340 <_dtoa_r+0x620>)
 800b2d8:	f7f4 ff48 	bl	800016c <__adddf3>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	460b      	mov	r3, r1
 800b2e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2e4:	f7f5 fb88 	bl	80009f8 <__aeabi_dcmpgt>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d171      	bne.n	800b3d0 <_dtoa_r+0x6b0>
 800b2ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	4913      	ldr	r1, [pc, #76]	; (800b340 <_dtoa_r+0x620>)
 800b2f4:	f7f4 ff38 	bl	8000168 <__aeabi_dsub>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b300:	f7f5 fb5c 	bl	80009bc <__aeabi_dcmplt>
 800b304:	2800      	cmp	r0, #0
 800b306:	f43f af2f 	beq.w	800b168 <_dtoa_r+0x448>
 800b30a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b30e:	1e6a      	subs	r2, r5, #1
 800b310:	2b30      	cmp	r3, #48	; 0x30
 800b312:	d001      	beq.n	800b318 <_dtoa_r+0x5f8>
 800b314:	46ba      	mov	sl, r7
 800b316:	e04a      	b.n	800b3ae <_dtoa_r+0x68e>
 800b318:	4615      	mov	r5, r2
 800b31a:	e7f6      	b.n	800b30a <_dtoa_r+0x5ea>
 800b31c:	4b05      	ldr	r3, [pc, #20]	; (800b334 <_dtoa_r+0x614>)
 800b31e:	f7f5 f8db 	bl	80004d8 <__aeabi_dmul>
 800b322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b326:	e7bd      	b.n	800b2a4 <_dtoa_r+0x584>
 800b328:	0800d330 	.word	0x0800d330
 800b32c:	0800d308 	.word	0x0800d308
 800b330:	3ff00000 	.word	0x3ff00000
 800b334:	40240000 	.word	0x40240000
 800b338:	401c0000 	.word	0x401c0000
 800b33c:	40140000 	.word	0x40140000
 800b340:	3fe00000 	.word	0x3fe00000
 800b344:	9d06      	ldr	r5, [sp, #24]
 800b346:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b34a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b34e:	4630      	mov	r0, r6
 800b350:	4639      	mov	r1, r7
 800b352:	f7f5 f9eb 	bl	800072c <__aeabi_ddiv>
 800b356:	f7f5 fb6f 	bl	8000a38 <__aeabi_d2iz>
 800b35a:	4681      	mov	r9, r0
 800b35c:	f7f5 f852 	bl	8000404 <__aeabi_i2d>
 800b360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b364:	f7f5 f8b8 	bl	80004d8 <__aeabi_dmul>
 800b368:	4602      	mov	r2, r0
 800b36a:	460b      	mov	r3, r1
 800b36c:	4630      	mov	r0, r6
 800b36e:	4639      	mov	r1, r7
 800b370:	f7f4 fefa 	bl	8000168 <__aeabi_dsub>
 800b374:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800b378:	f805 6b01 	strb.w	r6, [r5], #1
 800b37c:	9e06      	ldr	r6, [sp, #24]
 800b37e:	4602      	mov	r2, r0
 800b380:	1bae      	subs	r6, r5, r6
 800b382:	45b0      	cmp	r8, r6
 800b384:	460b      	mov	r3, r1
 800b386:	d135      	bne.n	800b3f4 <_dtoa_r+0x6d4>
 800b388:	f7f4 fef0 	bl	800016c <__adddf3>
 800b38c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b390:	4606      	mov	r6, r0
 800b392:	460f      	mov	r7, r1
 800b394:	f7f5 fb30 	bl	80009f8 <__aeabi_dcmpgt>
 800b398:	b9c8      	cbnz	r0, 800b3ce <_dtoa_r+0x6ae>
 800b39a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b39e:	4630      	mov	r0, r6
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	f7f5 fb01 	bl	80009a8 <__aeabi_dcmpeq>
 800b3a6:	b110      	cbz	r0, 800b3ae <_dtoa_r+0x68e>
 800b3a8:	f019 0f01 	tst.w	r9, #1
 800b3ac:	d10f      	bne.n	800b3ce <_dtoa_r+0x6ae>
 800b3ae:	4659      	mov	r1, fp
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f000 facc 	bl	800b94e <_Bfree>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b3ba:	702b      	strb	r3, [r5, #0]
 800b3bc:	f10a 0301 	add.w	r3, sl, #1
 800b3c0:	6013      	str	r3, [r2, #0]
 800b3c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f43f acf3 	beq.w	800adb0 <_dtoa_r+0x90>
 800b3ca:	601d      	str	r5, [r3, #0]
 800b3cc:	e4f0      	b.n	800adb0 <_dtoa_r+0x90>
 800b3ce:	4657      	mov	r7, sl
 800b3d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b3d4:	1e6b      	subs	r3, r5, #1
 800b3d6:	2a39      	cmp	r2, #57	; 0x39
 800b3d8:	d106      	bne.n	800b3e8 <_dtoa_r+0x6c8>
 800b3da:	9a06      	ldr	r2, [sp, #24]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d107      	bne.n	800b3f0 <_dtoa_r+0x6d0>
 800b3e0:	2330      	movs	r3, #48	; 0x30
 800b3e2:	7013      	strb	r3, [r2, #0]
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	3701      	adds	r7, #1
 800b3e8:	781a      	ldrb	r2, [r3, #0]
 800b3ea:	3201      	adds	r2, #1
 800b3ec:	701a      	strb	r2, [r3, #0]
 800b3ee:	e791      	b.n	800b314 <_dtoa_r+0x5f4>
 800b3f0:	461d      	mov	r5, r3
 800b3f2:	e7ed      	b.n	800b3d0 <_dtoa_r+0x6b0>
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	4b99      	ldr	r3, [pc, #612]	; (800b65c <_dtoa_r+0x93c>)
 800b3f8:	f7f5 f86e 	bl	80004d8 <__aeabi_dmul>
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	2300      	movs	r3, #0
 800b400:	4606      	mov	r6, r0
 800b402:	460f      	mov	r7, r1
 800b404:	f7f5 fad0 	bl	80009a8 <__aeabi_dcmpeq>
 800b408:	2800      	cmp	r0, #0
 800b40a:	d09e      	beq.n	800b34a <_dtoa_r+0x62a>
 800b40c:	e7cf      	b.n	800b3ae <_dtoa_r+0x68e>
 800b40e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b410:	2a00      	cmp	r2, #0
 800b412:	f000 8088 	beq.w	800b526 <_dtoa_r+0x806>
 800b416:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b418:	2a01      	cmp	r2, #1
 800b41a:	dc6d      	bgt.n	800b4f8 <_dtoa_r+0x7d8>
 800b41c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b41e:	2a00      	cmp	r2, #0
 800b420:	d066      	beq.n	800b4f0 <_dtoa_r+0x7d0>
 800b422:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b426:	464d      	mov	r5, r9
 800b428:	9e08      	ldr	r6, [sp, #32]
 800b42a:	9a07      	ldr	r2, [sp, #28]
 800b42c:	2101      	movs	r1, #1
 800b42e:	441a      	add	r2, r3
 800b430:	4620      	mov	r0, r4
 800b432:	4499      	add	r9, r3
 800b434:	9207      	str	r2, [sp, #28]
 800b436:	f000 fb2a 	bl	800ba8e <__i2b>
 800b43a:	4607      	mov	r7, r0
 800b43c:	2d00      	cmp	r5, #0
 800b43e:	dd0b      	ble.n	800b458 <_dtoa_r+0x738>
 800b440:	9b07      	ldr	r3, [sp, #28]
 800b442:	2b00      	cmp	r3, #0
 800b444:	dd08      	ble.n	800b458 <_dtoa_r+0x738>
 800b446:	42ab      	cmp	r3, r5
 800b448:	bfa8      	it	ge
 800b44a:	462b      	movge	r3, r5
 800b44c:	9a07      	ldr	r2, [sp, #28]
 800b44e:	eba9 0903 	sub.w	r9, r9, r3
 800b452:	1aed      	subs	r5, r5, r3
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	9307      	str	r3, [sp, #28]
 800b458:	9b08      	ldr	r3, [sp, #32]
 800b45a:	b1eb      	cbz	r3, 800b498 <_dtoa_r+0x778>
 800b45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d065      	beq.n	800b52e <_dtoa_r+0x80e>
 800b462:	b18e      	cbz	r6, 800b488 <_dtoa_r+0x768>
 800b464:	4639      	mov	r1, r7
 800b466:	4632      	mov	r2, r6
 800b468:	4620      	mov	r0, r4
 800b46a:	f000 fbaf 	bl	800bbcc <__pow5mult>
 800b46e:	465a      	mov	r2, fp
 800b470:	4601      	mov	r1, r0
 800b472:	4607      	mov	r7, r0
 800b474:	4620      	mov	r0, r4
 800b476:	f000 fb13 	bl	800baa0 <__multiply>
 800b47a:	4659      	mov	r1, fp
 800b47c:	900a      	str	r0, [sp, #40]	; 0x28
 800b47e:	4620      	mov	r0, r4
 800b480:	f000 fa65 	bl	800b94e <_Bfree>
 800b484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b486:	469b      	mov	fp, r3
 800b488:	9b08      	ldr	r3, [sp, #32]
 800b48a:	1b9a      	subs	r2, r3, r6
 800b48c:	d004      	beq.n	800b498 <_dtoa_r+0x778>
 800b48e:	4659      	mov	r1, fp
 800b490:	4620      	mov	r0, r4
 800b492:	f000 fb9b 	bl	800bbcc <__pow5mult>
 800b496:	4683      	mov	fp, r0
 800b498:	2101      	movs	r1, #1
 800b49a:	4620      	mov	r0, r4
 800b49c:	f000 faf7 	bl	800ba8e <__i2b>
 800b4a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 81c6 	beq.w	800b836 <_dtoa_r+0xb16>
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	4601      	mov	r1, r0
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f000 fb8c 	bl	800bbcc <__pow5mult>
 800b4b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b4b6:	4606      	mov	r6, r0
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	dc3e      	bgt.n	800b53a <_dtoa_r+0x81a>
 800b4bc:	9b02      	ldr	r3, [sp, #8]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d137      	bne.n	800b532 <_dtoa_r+0x812>
 800b4c2:	9b03      	ldr	r3, [sp, #12]
 800b4c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d134      	bne.n	800b536 <_dtoa_r+0x816>
 800b4cc:	9b03      	ldr	r3, [sp, #12]
 800b4ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4d2:	0d1b      	lsrs	r3, r3, #20
 800b4d4:	051b      	lsls	r3, r3, #20
 800b4d6:	b12b      	cbz	r3, 800b4e4 <_dtoa_r+0x7c4>
 800b4d8:	9b07      	ldr	r3, [sp, #28]
 800b4da:	f109 0901 	add.w	r9, r9, #1
 800b4de:	3301      	adds	r3, #1
 800b4e0:	9307      	str	r3, [sp, #28]
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	9308      	str	r3, [sp, #32]
 800b4e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d128      	bne.n	800b53e <_dtoa_r+0x81e>
 800b4ec:	2001      	movs	r0, #1
 800b4ee:	e02e      	b.n	800b54e <_dtoa_r+0x82e>
 800b4f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b4f6:	e796      	b.n	800b426 <_dtoa_r+0x706>
 800b4f8:	9b08      	ldr	r3, [sp, #32]
 800b4fa:	f108 36ff 	add.w	r6, r8, #4294967295
 800b4fe:	42b3      	cmp	r3, r6
 800b500:	bfb7      	itett	lt
 800b502:	9b08      	ldrlt	r3, [sp, #32]
 800b504:	1b9e      	subge	r6, r3, r6
 800b506:	1af2      	sublt	r2, r6, r3
 800b508:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800b50a:	bfbf      	itttt	lt
 800b50c:	9608      	strlt	r6, [sp, #32]
 800b50e:	189b      	addlt	r3, r3, r2
 800b510:	930c      	strlt	r3, [sp, #48]	; 0x30
 800b512:	2600      	movlt	r6, #0
 800b514:	f1b8 0f00 	cmp.w	r8, #0
 800b518:	bfb9      	ittee	lt
 800b51a:	eba9 0508 	sublt.w	r5, r9, r8
 800b51e:	2300      	movlt	r3, #0
 800b520:	464d      	movge	r5, r9
 800b522:	4643      	movge	r3, r8
 800b524:	e781      	b.n	800b42a <_dtoa_r+0x70a>
 800b526:	9e08      	ldr	r6, [sp, #32]
 800b528:	464d      	mov	r5, r9
 800b52a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b52c:	e786      	b.n	800b43c <_dtoa_r+0x71c>
 800b52e:	9a08      	ldr	r2, [sp, #32]
 800b530:	e7ad      	b.n	800b48e <_dtoa_r+0x76e>
 800b532:	2300      	movs	r3, #0
 800b534:	e7d6      	b.n	800b4e4 <_dtoa_r+0x7c4>
 800b536:	9b02      	ldr	r3, [sp, #8]
 800b538:	e7d4      	b.n	800b4e4 <_dtoa_r+0x7c4>
 800b53a:	2300      	movs	r3, #0
 800b53c:	9308      	str	r3, [sp, #32]
 800b53e:	6933      	ldr	r3, [r6, #16]
 800b540:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b544:	6918      	ldr	r0, [r3, #16]
 800b546:	f000 fa54 	bl	800b9f2 <__hi0bits>
 800b54a:	f1c0 0020 	rsb	r0, r0, #32
 800b54e:	9b07      	ldr	r3, [sp, #28]
 800b550:	4418      	add	r0, r3
 800b552:	f010 001f 	ands.w	r0, r0, #31
 800b556:	d047      	beq.n	800b5e8 <_dtoa_r+0x8c8>
 800b558:	f1c0 0320 	rsb	r3, r0, #32
 800b55c:	2b04      	cmp	r3, #4
 800b55e:	dd3b      	ble.n	800b5d8 <_dtoa_r+0x8b8>
 800b560:	9b07      	ldr	r3, [sp, #28]
 800b562:	f1c0 001c 	rsb	r0, r0, #28
 800b566:	4481      	add	r9, r0
 800b568:	4405      	add	r5, r0
 800b56a:	4403      	add	r3, r0
 800b56c:	9307      	str	r3, [sp, #28]
 800b56e:	f1b9 0f00 	cmp.w	r9, #0
 800b572:	dd05      	ble.n	800b580 <_dtoa_r+0x860>
 800b574:	4659      	mov	r1, fp
 800b576:	464a      	mov	r2, r9
 800b578:	4620      	mov	r0, r4
 800b57a:	f000 fb75 	bl	800bc68 <__lshift>
 800b57e:	4683      	mov	fp, r0
 800b580:	9b07      	ldr	r3, [sp, #28]
 800b582:	2b00      	cmp	r3, #0
 800b584:	dd05      	ble.n	800b592 <_dtoa_r+0x872>
 800b586:	4631      	mov	r1, r6
 800b588:	461a      	mov	r2, r3
 800b58a:	4620      	mov	r0, r4
 800b58c:	f000 fb6c 	bl	800bc68 <__lshift>
 800b590:	4606      	mov	r6, r0
 800b592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b594:	b353      	cbz	r3, 800b5ec <_dtoa_r+0x8cc>
 800b596:	4631      	mov	r1, r6
 800b598:	4658      	mov	r0, fp
 800b59a:	f000 fbb9 	bl	800bd10 <__mcmp>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	da24      	bge.n	800b5ec <_dtoa_r+0x8cc>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	4659      	mov	r1, fp
 800b5a6:	220a      	movs	r2, #10
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 f9e7 	bl	800b97c <__multadd>
 800b5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b5b4:	4683      	mov	fp, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f000 8144 	beq.w	800b844 <_dtoa_r+0xb24>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	4639      	mov	r1, r7
 800b5c0:	220a      	movs	r2, #10
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f000 f9da 	bl	800b97c <__multadd>
 800b5c8:	9b04      	ldr	r3, [sp, #16]
 800b5ca:	4607      	mov	r7, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	dc4d      	bgt.n	800b66c <_dtoa_r+0x94c>
 800b5d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b5d2:	2b02      	cmp	r3, #2
 800b5d4:	dd4a      	ble.n	800b66c <_dtoa_r+0x94c>
 800b5d6:	e011      	b.n	800b5fc <_dtoa_r+0x8dc>
 800b5d8:	d0c9      	beq.n	800b56e <_dtoa_r+0x84e>
 800b5da:	9a07      	ldr	r2, [sp, #28]
 800b5dc:	331c      	adds	r3, #28
 800b5de:	441a      	add	r2, r3
 800b5e0:	4499      	add	r9, r3
 800b5e2:	441d      	add	r5, r3
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	e7c1      	b.n	800b56c <_dtoa_r+0x84c>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	e7f6      	b.n	800b5da <_dtoa_r+0x8ba>
 800b5ec:	f1b8 0f00 	cmp.w	r8, #0
 800b5f0:	dc36      	bgt.n	800b660 <_dtoa_r+0x940>
 800b5f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	dd33      	ble.n	800b660 <_dtoa_r+0x940>
 800b5f8:	f8cd 8010 	str.w	r8, [sp, #16]
 800b5fc:	9b04      	ldr	r3, [sp, #16]
 800b5fe:	b963      	cbnz	r3, 800b61a <_dtoa_r+0x8fa>
 800b600:	4631      	mov	r1, r6
 800b602:	2205      	movs	r2, #5
 800b604:	4620      	mov	r0, r4
 800b606:	f000 f9b9 	bl	800b97c <__multadd>
 800b60a:	4601      	mov	r1, r0
 800b60c:	4606      	mov	r6, r0
 800b60e:	4658      	mov	r0, fp
 800b610:	f000 fb7e 	bl	800bd10 <__mcmp>
 800b614:	2800      	cmp	r0, #0
 800b616:	f73f add3 	bgt.w	800b1c0 <_dtoa_r+0x4a0>
 800b61a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b61c:	9d06      	ldr	r5, [sp, #24]
 800b61e:	ea6f 0a03 	mvn.w	sl, r3
 800b622:	f04f 0900 	mov.w	r9, #0
 800b626:	4631      	mov	r1, r6
 800b628:	4620      	mov	r0, r4
 800b62a:	f000 f990 	bl	800b94e <_Bfree>
 800b62e:	2f00      	cmp	r7, #0
 800b630:	f43f aebd 	beq.w	800b3ae <_dtoa_r+0x68e>
 800b634:	f1b9 0f00 	cmp.w	r9, #0
 800b638:	d005      	beq.n	800b646 <_dtoa_r+0x926>
 800b63a:	45b9      	cmp	r9, r7
 800b63c:	d003      	beq.n	800b646 <_dtoa_r+0x926>
 800b63e:	4649      	mov	r1, r9
 800b640:	4620      	mov	r0, r4
 800b642:	f000 f984 	bl	800b94e <_Bfree>
 800b646:	4639      	mov	r1, r7
 800b648:	4620      	mov	r0, r4
 800b64a:	f000 f980 	bl	800b94e <_Bfree>
 800b64e:	e6ae      	b.n	800b3ae <_dtoa_r+0x68e>
 800b650:	2600      	movs	r6, #0
 800b652:	4637      	mov	r7, r6
 800b654:	e7e1      	b.n	800b61a <_dtoa_r+0x8fa>
 800b656:	46ba      	mov	sl, r7
 800b658:	4637      	mov	r7, r6
 800b65a:	e5b1      	b.n	800b1c0 <_dtoa_r+0x4a0>
 800b65c:	40240000 	.word	0x40240000
 800b660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b662:	f8cd 8010 	str.w	r8, [sp, #16]
 800b666:	2b00      	cmp	r3, #0
 800b668:	f000 80f3 	beq.w	800b852 <_dtoa_r+0xb32>
 800b66c:	2d00      	cmp	r5, #0
 800b66e:	dd05      	ble.n	800b67c <_dtoa_r+0x95c>
 800b670:	4639      	mov	r1, r7
 800b672:	462a      	mov	r2, r5
 800b674:	4620      	mov	r0, r4
 800b676:	f000 faf7 	bl	800bc68 <__lshift>
 800b67a:	4607      	mov	r7, r0
 800b67c:	9b08      	ldr	r3, [sp, #32]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d04c      	beq.n	800b71c <_dtoa_r+0x9fc>
 800b682:	6879      	ldr	r1, [r7, #4]
 800b684:	4620      	mov	r0, r4
 800b686:	f000 f92e 	bl	800b8e6 <_Balloc>
 800b68a:	4605      	mov	r5, r0
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	f107 010c 	add.w	r1, r7, #12
 800b692:	3202      	adds	r2, #2
 800b694:	0092      	lsls	r2, r2, #2
 800b696:	300c      	adds	r0, #12
 800b698:	f000 f91a 	bl	800b8d0 <memcpy>
 800b69c:	2201      	movs	r2, #1
 800b69e:	4629      	mov	r1, r5
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f000 fae1 	bl	800bc68 <__lshift>
 800b6a6:	46b9      	mov	r9, r7
 800b6a8:	4607      	mov	r7, r0
 800b6aa:	9b06      	ldr	r3, [sp, #24]
 800b6ac:	9307      	str	r3, [sp, #28]
 800b6ae:	9b02      	ldr	r3, [sp, #8]
 800b6b0:	f003 0301 	and.w	r3, r3, #1
 800b6b4:	9308      	str	r3, [sp, #32]
 800b6b6:	4631      	mov	r1, r6
 800b6b8:	4658      	mov	r0, fp
 800b6ba:	f7ff faa3 	bl	800ac04 <quorem>
 800b6be:	4649      	mov	r1, r9
 800b6c0:	4605      	mov	r5, r0
 800b6c2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b6c6:	4658      	mov	r0, fp
 800b6c8:	f000 fb22 	bl	800bd10 <__mcmp>
 800b6cc:	463a      	mov	r2, r7
 800b6ce:	9002      	str	r0, [sp, #8]
 800b6d0:	4631      	mov	r1, r6
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f000 fb36 	bl	800bd44 <__mdiff>
 800b6d8:	68c3      	ldr	r3, [r0, #12]
 800b6da:	4602      	mov	r2, r0
 800b6dc:	bb03      	cbnz	r3, 800b720 <_dtoa_r+0xa00>
 800b6de:	4601      	mov	r1, r0
 800b6e0:	9009      	str	r0, [sp, #36]	; 0x24
 800b6e2:	4658      	mov	r0, fp
 800b6e4:	f000 fb14 	bl	800bd10 <__mcmp>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b6f2:	f000 f92c 	bl	800b94e <_Bfree>
 800b6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f8:	b9a3      	cbnz	r3, 800b724 <_dtoa_r+0xa04>
 800b6fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b6fc:	b992      	cbnz	r2, 800b724 <_dtoa_r+0xa04>
 800b6fe:	9a08      	ldr	r2, [sp, #32]
 800b700:	b982      	cbnz	r2, 800b724 <_dtoa_r+0xa04>
 800b702:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b706:	d029      	beq.n	800b75c <_dtoa_r+0xa3c>
 800b708:	9b02      	ldr	r3, [sp, #8]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	dd01      	ble.n	800b712 <_dtoa_r+0x9f2>
 800b70e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b712:	9b07      	ldr	r3, [sp, #28]
 800b714:	1c5d      	adds	r5, r3, #1
 800b716:	f883 8000 	strb.w	r8, [r3]
 800b71a:	e784      	b.n	800b626 <_dtoa_r+0x906>
 800b71c:	4638      	mov	r0, r7
 800b71e:	e7c2      	b.n	800b6a6 <_dtoa_r+0x986>
 800b720:	2301      	movs	r3, #1
 800b722:	e7e3      	b.n	800b6ec <_dtoa_r+0x9cc>
 800b724:	9a02      	ldr	r2, [sp, #8]
 800b726:	2a00      	cmp	r2, #0
 800b728:	db04      	blt.n	800b734 <_dtoa_r+0xa14>
 800b72a:	d123      	bne.n	800b774 <_dtoa_r+0xa54>
 800b72c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b72e:	bb0a      	cbnz	r2, 800b774 <_dtoa_r+0xa54>
 800b730:	9a08      	ldr	r2, [sp, #32]
 800b732:	b9fa      	cbnz	r2, 800b774 <_dtoa_r+0xa54>
 800b734:	2b00      	cmp	r3, #0
 800b736:	ddec      	ble.n	800b712 <_dtoa_r+0x9f2>
 800b738:	4659      	mov	r1, fp
 800b73a:	2201      	movs	r2, #1
 800b73c:	4620      	mov	r0, r4
 800b73e:	f000 fa93 	bl	800bc68 <__lshift>
 800b742:	4631      	mov	r1, r6
 800b744:	4683      	mov	fp, r0
 800b746:	f000 fae3 	bl	800bd10 <__mcmp>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	dc03      	bgt.n	800b756 <_dtoa_r+0xa36>
 800b74e:	d1e0      	bne.n	800b712 <_dtoa_r+0x9f2>
 800b750:	f018 0f01 	tst.w	r8, #1
 800b754:	d0dd      	beq.n	800b712 <_dtoa_r+0x9f2>
 800b756:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b75a:	d1d8      	bne.n	800b70e <_dtoa_r+0x9ee>
 800b75c:	9b07      	ldr	r3, [sp, #28]
 800b75e:	9a07      	ldr	r2, [sp, #28]
 800b760:	1c5d      	adds	r5, r3, #1
 800b762:	2339      	movs	r3, #57	; 0x39
 800b764:	7013      	strb	r3, [r2, #0]
 800b766:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b76a:	1e6a      	subs	r2, r5, #1
 800b76c:	2b39      	cmp	r3, #57	; 0x39
 800b76e:	d04d      	beq.n	800b80c <_dtoa_r+0xaec>
 800b770:	3301      	adds	r3, #1
 800b772:	e052      	b.n	800b81a <_dtoa_r+0xafa>
 800b774:	9a07      	ldr	r2, [sp, #28]
 800b776:	2b00      	cmp	r3, #0
 800b778:	f102 0501 	add.w	r5, r2, #1
 800b77c:	dd06      	ble.n	800b78c <_dtoa_r+0xa6c>
 800b77e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b782:	d0eb      	beq.n	800b75c <_dtoa_r+0xa3c>
 800b784:	f108 0801 	add.w	r8, r8, #1
 800b788:	9b07      	ldr	r3, [sp, #28]
 800b78a:	e7c4      	b.n	800b716 <_dtoa_r+0x9f6>
 800b78c:	9b06      	ldr	r3, [sp, #24]
 800b78e:	9a04      	ldr	r2, [sp, #16]
 800b790:	1aeb      	subs	r3, r5, r3
 800b792:	4293      	cmp	r3, r2
 800b794:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b798:	d021      	beq.n	800b7de <_dtoa_r+0xabe>
 800b79a:	4659      	mov	r1, fp
 800b79c:	2300      	movs	r3, #0
 800b79e:	220a      	movs	r2, #10
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f000 f8eb 	bl	800b97c <__multadd>
 800b7a6:	45b9      	cmp	r9, r7
 800b7a8:	4683      	mov	fp, r0
 800b7aa:	f04f 0300 	mov.w	r3, #0
 800b7ae:	f04f 020a 	mov.w	r2, #10
 800b7b2:	4649      	mov	r1, r9
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	d105      	bne.n	800b7c4 <_dtoa_r+0xaa4>
 800b7b8:	f000 f8e0 	bl	800b97c <__multadd>
 800b7bc:	4681      	mov	r9, r0
 800b7be:	4607      	mov	r7, r0
 800b7c0:	9507      	str	r5, [sp, #28]
 800b7c2:	e778      	b.n	800b6b6 <_dtoa_r+0x996>
 800b7c4:	f000 f8da 	bl	800b97c <__multadd>
 800b7c8:	4639      	mov	r1, r7
 800b7ca:	4681      	mov	r9, r0
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	220a      	movs	r2, #10
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f000 f8d3 	bl	800b97c <__multadd>
 800b7d6:	4607      	mov	r7, r0
 800b7d8:	e7f2      	b.n	800b7c0 <_dtoa_r+0xaa0>
 800b7da:	f04f 0900 	mov.w	r9, #0
 800b7de:	4659      	mov	r1, fp
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f000 fa40 	bl	800bc68 <__lshift>
 800b7e8:	4631      	mov	r1, r6
 800b7ea:	4683      	mov	fp, r0
 800b7ec:	f000 fa90 	bl	800bd10 <__mcmp>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	dcb8      	bgt.n	800b766 <_dtoa_r+0xa46>
 800b7f4:	d102      	bne.n	800b7fc <_dtoa_r+0xadc>
 800b7f6:	f018 0f01 	tst.w	r8, #1
 800b7fa:	d1b4      	bne.n	800b766 <_dtoa_r+0xa46>
 800b7fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b800:	1e6a      	subs	r2, r5, #1
 800b802:	2b30      	cmp	r3, #48	; 0x30
 800b804:	f47f af0f 	bne.w	800b626 <_dtoa_r+0x906>
 800b808:	4615      	mov	r5, r2
 800b80a:	e7f7      	b.n	800b7fc <_dtoa_r+0xadc>
 800b80c:	9b06      	ldr	r3, [sp, #24]
 800b80e:	4293      	cmp	r3, r2
 800b810:	d105      	bne.n	800b81e <_dtoa_r+0xafe>
 800b812:	2331      	movs	r3, #49	; 0x31
 800b814:	9a06      	ldr	r2, [sp, #24]
 800b816:	f10a 0a01 	add.w	sl, sl, #1
 800b81a:	7013      	strb	r3, [r2, #0]
 800b81c:	e703      	b.n	800b626 <_dtoa_r+0x906>
 800b81e:	4615      	mov	r5, r2
 800b820:	e7a1      	b.n	800b766 <_dtoa_r+0xa46>
 800b822:	4b17      	ldr	r3, [pc, #92]	; (800b880 <_dtoa_r+0xb60>)
 800b824:	f7ff bae1 	b.w	800adea <_dtoa_r+0xca>
 800b828:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f47f aabb 	bne.w	800ada6 <_dtoa_r+0x86>
 800b830:	4b14      	ldr	r3, [pc, #80]	; (800b884 <_dtoa_r+0xb64>)
 800b832:	f7ff bada 	b.w	800adea <_dtoa_r+0xca>
 800b836:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b838:	2b01      	cmp	r3, #1
 800b83a:	f77f ae3f 	ble.w	800b4bc <_dtoa_r+0x79c>
 800b83e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b840:	9308      	str	r3, [sp, #32]
 800b842:	e653      	b.n	800b4ec <_dtoa_r+0x7cc>
 800b844:	9b04      	ldr	r3, [sp, #16]
 800b846:	2b00      	cmp	r3, #0
 800b848:	dc03      	bgt.n	800b852 <_dtoa_r+0xb32>
 800b84a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	f73f aed5 	bgt.w	800b5fc <_dtoa_r+0x8dc>
 800b852:	9d06      	ldr	r5, [sp, #24]
 800b854:	4631      	mov	r1, r6
 800b856:	4658      	mov	r0, fp
 800b858:	f7ff f9d4 	bl	800ac04 <quorem>
 800b85c:	9b06      	ldr	r3, [sp, #24]
 800b85e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b862:	f805 8b01 	strb.w	r8, [r5], #1
 800b866:	9a04      	ldr	r2, [sp, #16]
 800b868:	1aeb      	subs	r3, r5, r3
 800b86a:	429a      	cmp	r2, r3
 800b86c:	ddb5      	ble.n	800b7da <_dtoa_r+0xaba>
 800b86e:	4659      	mov	r1, fp
 800b870:	2300      	movs	r3, #0
 800b872:	220a      	movs	r2, #10
 800b874:	4620      	mov	r0, r4
 800b876:	f000 f881 	bl	800b97c <__multadd>
 800b87a:	4683      	mov	fp, r0
 800b87c:	e7ea      	b.n	800b854 <_dtoa_r+0xb34>
 800b87e:	bf00      	nop
 800b880:	0800d2d4 	.word	0x0800d2d4
 800b884:	0800d2f8 	.word	0x0800d2f8

0800b888 <_localeconv_r>:
 800b888:	4b04      	ldr	r3, [pc, #16]	; (800b89c <_localeconv_r+0x14>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	6a18      	ldr	r0, [r3, #32]
 800b88e:	4b04      	ldr	r3, [pc, #16]	; (800b8a0 <_localeconv_r+0x18>)
 800b890:	2800      	cmp	r0, #0
 800b892:	bf08      	it	eq
 800b894:	4618      	moveq	r0, r3
 800b896:	30f0      	adds	r0, #240	; 0xf0
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	2000008c 	.word	0x2000008c
 800b8a0:	200000f0 	.word	0x200000f0

0800b8a4 <malloc>:
 800b8a4:	4b02      	ldr	r3, [pc, #8]	; (800b8b0 <malloc+0xc>)
 800b8a6:	4601      	mov	r1, r0
 800b8a8:	6818      	ldr	r0, [r3, #0]
 800b8aa:	f000 bb53 	b.w	800bf54 <_malloc_r>
 800b8ae:	bf00      	nop
 800b8b0:	2000008c 	.word	0x2000008c

0800b8b4 <memchr>:
 800b8b4:	b510      	push	{r4, lr}
 800b8b6:	b2c9      	uxtb	r1, r1
 800b8b8:	4402      	add	r2, r0
 800b8ba:	4290      	cmp	r0, r2
 800b8bc:	4603      	mov	r3, r0
 800b8be:	d101      	bne.n	800b8c4 <memchr+0x10>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	e003      	b.n	800b8cc <memchr+0x18>
 800b8c4:	781c      	ldrb	r4, [r3, #0]
 800b8c6:	3001      	adds	r0, #1
 800b8c8:	428c      	cmp	r4, r1
 800b8ca:	d1f6      	bne.n	800b8ba <memchr+0x6>
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	bd10      	pop	{r4, pc}

0800b8d0 <memcpy>:
 800b8d0:	b510      	push	{r4, lr}
 800b8d2:	1e43      	subs	r3, r0, #1
 800b8d4:	440a      	add	r2, r1
 800b8d6:	4291      	cmp	r1, r2
 800b8d8:	d100      	bne.n	800b8dc <memcpy+0xc>
 800b8da:	bd10      	pop	{r4, pc}
 800b8dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8e4:	e7f7      	b.n	800b8d6 <memcpy+0x6>

0800b8e6 <_Balloc>:
 800b8e6:	b570      	push	{r4, r5, r6, lr}
 800b8e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	460e      	mov	r6, r1
 800b8ee:	b93d      	cbnz	r5, 800b900 <_Balloc+0x1a>
 800b8f0:	2010      	movs	r0, #16
 800b8f2:	f7ff ffd7 	bl	800b8a4 <malloc>
 800b8f6:	6260      	str	r0, [r4, #36]	; 0x24
 800b8f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b8fc:	6005      	str	r5, [r0, #0]
 800b8fe:	60c5      	str	r5, [r0, #12]
 800b900:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b902:	68eb      	ldr	r3, [r5, #12]
 800b904:	b183      	cbz	r3, 800b928 <_Balloc+0x42>
 800b906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b90e:	b9b8      	cbnz	r0, 800b940 <_Balloc+0x5a>
 800b910:	2101      	movs	r1, #1
 800b912:	fa01 f506 	lsl.w	r5, r1, r6
 800b916:	1d6a      	adds	r2, r5, #5
 800b918:	0092      	lsls	r2, r2, #2
 800b91a:	4620      	mov	r0, r4
 800b91c:	f000 fabf 	bl	800be9e <_calloc_r>
 800b920:	b160      	cbz	r0, 800b93c <_Balloc+0x56>
 800b922:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b926:	e00e      	b.n	800b946 <_Balloc+0x60>
 800b928:	2221      	movs	r2, #33	; 0x21
 800b92a:	2104      	movs	r1, #4
 800b92c:	4620      	mov	r0, r4
 800b92e:	f000 fab6 	bl	800be9e <_calloc_r>
 800b932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b934:	60e8      	str	r0, [r5, #12]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1e4      	bne.n	800b906 <_Balloc+0x20>
 800b93c:	2000      	movs	r0, #0
 800b93e:	bd70      	pop	{r4, r5, r6, pc}
 800b940:	6802      	ldr	r2, [r0, #0]
 800b942:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b946:	2300      	movs	r3, #0
 800b948:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b94c:	e7f7      	b.n	800b93e <_Balloc+0x58>

0800b94e <_Bfree>:
 800b94e:	b570      	push	{r4, r5, r6, lr}
 800b950:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b952:	4606      	mov	r6, r0
 800b954:	460d      	mov	r5, r1
 800b956:	b93c      	cbnz	r4, 800b968 <_Bfree+0x1a>
 800b958:	2010      	movs	r0, #16
 800b95a:	f7ff ffa3 	bl	800b8a4 <malloc>
 800b95e:	6270      	str	r0, [r6, #36]	; 0x24
 800b960:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b964:	6004      	str	r4, [r0, #0]
 800b966:	60c4      	str	r4, [r0, #12]
 800b968:	b13d      	cbz	r5, 800b97a <_Bfree+0x2c>
 800b96a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b96c:	686a      	ldr	r2, [r5, #4]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b974:	6029      	str	r1, [r5, #0]
 800b976:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b97a:	bd70      	pop	{r4, r5, r6, pc}

0800b97c <__multadd>:
 800b97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b980:	461f      	mov	r7, r3
 800b982:	4606      	mov	r6, r0
 800b984:	460c      	mov	r4, r1
 800b986:	2300      	movs	r3, #0
 800b988:	690d      	ldr	r5, [r1, #16]
 800b98a:	f101 0c14 	add.w	ip, r1, #20
 800b98e:	f8dc 0000 	ldr.w	r0, [ip]
 800b992:	3301      	adds	r3, #1
 800b994:	b281      	uxth	r1, r0
 800b996:	fb02 7101 	mla	r1, r2, r1, r7
 800b99a:	0c00      	lsrs	r0, r0, #16
 800b99c:	0c0f      	lsrs	r7, r1, #16
 800b99e:	fb02 7000 	mla	r0, r2, r0, r7
 800b9a2:	b289      	uxth	r1, r1
 800b9a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b9a8:	429d      	cmp	r5, r3
 800b9aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b9ae:	f84c 1b04 	str.w	r1, [ip], #4
 800b9b2:	dcec      	bgt.n	800b98e <__multadd+0x12>
 800b9b4:	b1d7      	cbz	r7, 800b9ec <__multadd+0x70>
 800b9b6:	68a3      	ldr	r3, [r4, #8]
 800b9b8:	42ab      	cmp	r3, r5
 800b9ba:	dc12      	bgt.n	800b9e2 <__multadd+0x66>
 800b9bc:	6861      	ldr	r1, [r4, #4]
 800b9be:	4630      	mov	r0, r6
 800b9c0:	3101      	adds	r1, #1
 800b9c2:	f7ff ff90 	bl	800b8e6 <_Balloc>
 800b9c6:	4680      	mov	r8, r0
 800b9c8:	6922      	ldr	r2, [r4, #16]
 800b9ca:	f104 010c 	add.w	r1, r4, #12
 800b9ce:	3202      	adds	r2, #2
 800b9d0:	0092      	lsls	r2, r2, #2
 800b9d2:	300c      	adds	r0, #12
 800b9d4:	f7ff ff7c 	bl	800b8d0 <memcpy>
 800b9d8:	4621      	mov	r1, r4
 800b9da:	4630      	mov	r0, r6
 800b9dc:	f7ff ffb7 	bl	800b94e <_Bfree>
 800b9e0:	4644      	mov	r4, r8
 800b9e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9e6:	3501      	adds	r5, #1
 800b9e8:	615f      	str	r7, [r3, #20]
 800b9ea:	6125      	str	r5, [r4, #16]
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b9f2 <__hi0bits>:
 800b9f2:	0c02      	lsrs	r2, r0, #16
 800b9f4:	0412      	lsls	r2, r2, #16
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	b9b2      	cbnz	r2, 800ba28 <__hi0bits+0x36>
 800b9fa:	0403      	lsls	r3, r0, #16
 800b9fc:	2010      	movs	r0, #16
 800b9fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ba02:	bf04      	itt	eq
 800ba04:	021b      	lsleq	r3, r3, #8
 800ba06:	3008      	addeq	r0, #8
 800ba08:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ba0c:	bf04      	itt	eq
 800ba0e:	011b      	lsleq	r3, r3, #4
 800ba10:	3004      	addeq	r0, #4
 800ba12:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ba16:	bf04      	itt	eq
 800ba18:	009b      	lsleq	r3, r3, #2
 800ba1a:	3002      	addeq	r0, #2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	db06      	blt.n	800ba2e <__hi0bits+0x3c>
 800ba20:	005b      	lsls	r3, r3, #1
 800ba22:	d503      	bpl.n	800ba2c <__hi0bits+0x3a>
 800ba24:	3001      	adds	r0, #1
 800ba26:	4770      	bx	lr
 800ba28:	2000      	movs	r0, #0
 800ba2a:	e7e8      	b.n	800b9fe <__hi0bits+0xc>
 800ba2c:	2020      	movs	r0, #32
 800ba2e:	4770      	bx	lr

0800ba30 <__lo0bits>:
 800ba30:	6803      	ldr	r3, [r0, #0]
 800ba32:	4601      	mov	r1, r0
 800ba34:	f013 0207 	ands.w	r2, r3, #7
 800ba38:	d00b      	beq.n	800ba52 <__lo0bits+0x22>
 800ba3a:	07da      	lsls	r2, r3, #31
 800ba3c:	d423      	bmi.n	800ba86 <__lo0bits+0x56>
 800ba3e:	0798      	lsls	r0, r3, #30
 800ba40:	bf49      	itett	mi
 800ba42:	085b      	lsrmi	r3, r3, #1
 800ba44:	089b      	lsrpl	r3, r3, #2
 800ba46:	2001      	movmi	r0, #1
 800ba48:	600b      	strmi	r3, [r1, #0]
 800ba4a:	bf5c      	itt	pl
 800ba4c:	600b      	strpl	r3, [r1, #0]
 800ba4e:	2002      	movpl	r0, #2
 800ba50:	4770      	bx	lr
 800ba52:	b298      	uxth	r0, r3
 800ba54:	b9a8      	cbnz	r0, 800ba82 <__lo0bits+0x52>
 800ba56:	2010      	movs	r0, #16
 800ba58:	0c1b      	lsrs	r3, r3, #16
 800ba5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ba5e:	bf04      	itt	eq
 800ba60:	0a1b      	lsreq	r3, r3, #8
 800ba62:	3008      	addeq	r0, #8
 800ba64:	071a      	lsls	r2, r3, #28
 800ba66:	bf04      	itt	eq
 800ba68:	091b      	lsreq	r3, r3, #4
 800ba6a:	3004      	addeq	r0, #4
 800ba6c:	079a      	lsls	r2, r3, #30
 800ba6e:	bf04      	itt	eq
 800ba70:	089b      	lsreq	r3, r3, #2
 800ba72:	3002      	addeq	r0, #2
 800ba74:	07da      	lsls	r2, r3, #31
 800ba76:	d402      	bmi.n	800ba7e <__lo0bits+0x4e>
 800ba78:	085b      	lsrs	r3, r3, #1
 800ba7a:	d006      	beq.n	800ba8a <__lo0bits+0x5a>
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	600b      	str	r3, [r1, #0]
 800ba80:	4770      	bx	lr
 800ba82:	4610      	mov	r0, r2
 800ba84:	e7e9      	b.n	800ba5a <__lo0bits+0x2a>
 800ba86:	2000      	movs	r0, #0
 800ba88:	4770      	bx	lr
 800ba8a:	2020      	movs	r0, #32
 800ba8c:	4770      	bx	lr

0800ba8e <__i2b>:
 800ba8e:	b510      	push	{r4, lr}
 800ba90:	460c      	mov	r4, r1
 800ba92:	2101      	movs	r1, #1
 800ba94:	f7ff ff27 	bl	800b8e6 <_Balloc>
 800ba98:	2201      	movs	r2, #1
 800ba9a:	6144      	str	r4, [r0, #20]
 800ba9c:	6102      	str	r2, [r0, #16]
 800ba9e:	bd10      	pop	{r4, pc}

0800baa0 <__multiply>:
 800baa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	4614      	mov	r4, r2
 800baa6:	690a      	ldr	r2, [r1, #16]
 800baa8:	6923      	ldr	r3, [r4, #16]
 800baaa:	4688      	mov	r8, r1
 800baac:	429a      	cmp	r2, r3
 800baae:	bfbe      	ittt	lt
 800bab0:	460b      	movlt	r3, r1
 800bab2:	46a0      	movlt	r8, r4
 800bab4:	461c      	movlt	r4, r3
 800bab6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800baba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800babe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bac2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bac6:	eb07 0609 	add.w	r6, r7, r9
 800baca:	42b3      	cmp	r3, r6
 800bacc:	bfb8      	it	lt
 800bace:	3101      	addlt	r1, #1
 800bad0:	f7ff ff09 	bl	800b8e6 <_Balloc>
 800bad4:	f100 0514 	add.w	r5, r0, #20
 800bad8:	462b      	mov	r3, r5
 800bada:	2200      	movs	r2, #0
 800badc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bae0:	4573      	cmp	r3, lr
 800bae2:	d316      	bcc.n	800bb12 <__multiply+0x72>
 800bae4:	f104 0214 	add.w	r2, r4, #20
 800bae8:	f108 0114 	add.w	r1, r8, #20
 800baec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800baf0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	9b00      	ldr	r3, [sp, #0]
 800baf8:	9201      	str	r2, [sp, #4]
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d80c      	bhi.n	800bb18 <__multiply+0x78>
 800bafe:	2e00      	cmp	r6, #0
 800bb00:	dd03      	ble.n	800bb0a <__multiply+0x6a>
 800bb02:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d05d      	beq.n	800bbc6 <__multiply+0x126>
 800bb0a:	6106      	str	r6, [r0, #16]
 800bb0c:	b003      	add	sp, #12
 800bb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb12:	f843 2b04 	str.w	r2, [r3], #4
 800bb16:	e7e3      	b.n	800bae0 <__multiply+0x40>
 800bb18:	f8b2 b000 	ldrh.w	fp, [r2]
 800bb1c:	f1bb 0f00 	cmp.w	fp, #0
 800bb20:	d023      	beq.n	800bb6a <__multiply+0xca>
 800bb22:	4689      	mov	r9, r1
 800bb24:	46ac      	mov	ip, r5
 800bb26:	f04f 0800 	mov.w	r8, #0
 800bb2a:	f859 4b04 	ldr.w	r4, [r9], #4
 800bb2e:	f8dc a000 	ldr.w	sl, [ip]
 800bb32:	b2a3      	uxth	r3, r4
 800bb34:	fa1f fa8a 	uxth.w	sl, sl
 800bb38:	fb0b a303 	mla	r3, fp, r3, sl
 800bb3c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bb40:	f8dc 4000 	ldr.w	r4, [ip]
 800bb44:	4443      	add	r3, r8
 800bb46:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bb4a:	fb0b 840a 	mla	r4, fp, sl, r8
 800bb4e:	46e2      	mov	sl, ip
 800bb50:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bb5a:	454f      	cmp	r7, r9
 800bb5c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bb60:	f84a 3b04 	str.w	r3, [sl], #4
 800bb64:	d82b      	bhi.n	800bbbe <__multiply+0x11e>
 800bb66:	f8cc 8004 	str.w	r8, [ip, #4]
 800bb6a:	9b01      	ldr	r3, [sp, #4]
 800bb6c:	3204      	adds	r2, #4
 800bb6e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bb72:	f1ba 0f00 	cmp.w	sl, #0
 800bb76:	d020      	beq.n	800bbba <__multiply+0x11a>
 800bb78:	4689      	mov	r9, r1
 800bb7a:	46a8      	mov	r8, r5
 800bb7c:	f04f 0b00 	mov.w	fp, #0
 800bb80:	682b      	ldr	r3, [r5, #0]
 800bb82:	f8b9 c000 	ldrh.w	ip, [r9]
 800bb86:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	fb0a 440c 	mla	r4, sl, ip, r4
 800bb90:	46c4      	mov	ip, r8
 800bb92:	445c      	add	r4, fp
 800bb94:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bb98:	f84c 3b04 	str.w	r3, [ip], #4
 800bb9c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bba0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800bba4:	0c1b      	lsrs	r3, r3, #16
 800bba6:	fb0a b303 	mla	r3, sl, r3, fp
 800bbaa:	454f      	cmp	r7, r9
 800bbac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bbb0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800bbb4:	d805      	bhi.n	800bbc2 <__multiply+0x122>
 800bbb6:	f8c8 3004 	str.w	r3, [r8, #4]
 800bbba:	3504      	adds	r5, #4
 800bbbc:	e79b      	b.n	800baf6 <__multiply+0x56>
 800bbbe:	46d4      	mov	ip, sl
 800bbc0:	e7b3      	b.n	800bb2a <__multiply+0x8a>
 800bbc2:	46e0      	mov	r8, ip
 800bbc4:	e7dd      	b.n	800bb82 <__multiply+0xe2>
 800bbc6:	3e01      	subs	r6, #1
 800bbc8:	e799      	b.n	800bafe <__multiply+0x5e>
	...

0800bbcc <__pow5mult>:
 800bbcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd0:	4615      	mov	r5, r2
 800bbd2:	f012 0203 	ands.w	r2, r2, #3
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	460f      	mov	r7, r1
 800bbda:	d007      	beq.n	800bbec <__pow5mult+0x20>
 800bbdc:	4c21      	ldr	r4, [pc, #132]	; (800bc64 <__pow5mult+0x98>)
 800bbde:	3a01      	subs	r2, #1
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbe6:	f7ff fec9 	bl	800b97c <__multadd>
 800bbea:	4607      	mov	r7, r0
 800bbec:	10ad      	asrs	r5, r5, #2
 800bbee:	d035      	beq.n	800bc5c <__pow5mult+0x90>
 800bbf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bbf2:	b93c      	cbnz	r4, 800bc04 <__pow5mult+0x38>
 800bbf4:	2010      	movs	r0, #16
 800bbf6:	f7ff fe55 	bl	800b8a4 <malloc>
 800bbfa:	6270      	str	r0, [r6, #36]	; 0x24
 800bbfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc00:	6004      	str	r4, [r0, #0]
 800bc02:	60c4      	str	r4, [r0, #12]
 800bc04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc0c:	b94c      	cbnz	r4, 800bc22 <__pow5mult+0x56>
 800bc0e:	f240 2171 	movw	r1, #625	; 0x271
 800bc12:	4630      	mov	r0, r6
 800bc14:	f7ff ff3b 	bl	800ba8e <__i2b>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc20:	6003      	str	r3, [r0, #0]
 800bc22:	f04f 0800 	mov.w	r8, #0
 800bc26:	07eb      	lsls	r3, r5, #31
 800bc28:	d50a      	bpl.n	800bc40 <__pow5mult+0x74>
 800bc2a:	4639      	mov	r1, r7
 800bc2c:	4622      	mov	r2, r4
 800bc2e:	4630      	mov	r0, r6
 800bc30:	f7ff ff36 	bl	800baa0 <__multiply>
 800bc34:	4681      	mov	r9, r0
 800bc36:	4639      	mov	r1, r7
 800bc38:	4630      	mov	r0, r6
 800bc3a:	f7ff fe88 	bl	800b94e <_Bfree>
 800bc3e:	464f      	mov	r7, r9
 800bc40:	106d      	asrs	r5, r5, #1
 800bc42:	d00b      	beq.n	800bc5c <__pow5mult+0x90>
 800bc44:	6820      	ldr	r0, [r4, #0]
 800bc46:	b938      	cbnz	r0, 800bc58 <__pow5mult+0x8c>
 800bc48:	4622      	mov	r2, r4
 800bc4a:	4621      	mov	r1, r4
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	f7ff ff27 	bl	800baa0 <__multiply>
 800bc52:	6020      	str	r0, [r4, #0]
 800bc54:	f8c0 8000 	str.w	r8, [r0]
 800bc58:	4604      	mov	r4, r0
 800bc5a:	e7e4      	b.n	800bc26 <__pow5mult+0x5a>
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc62:	bf00      	nop
 800bc64:	0800d3f8 	.word	0x0800d3f8

0800bc68 <__lshift>:
 800bc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	4607      	mov	r7, r0
 800bc70:	4616      	mov	r6, r2
 800bc72:	6923      	ldr	r3, [r4, #16]
 800bc74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc78:	eb0a 0903 	add.w	r9, sl, r3
 800bc7c:	6849      	ldr	r1, [r1, #4]
 800bc7e:	68a3      	ldr	r3, [r4, #8]
 800bc80:	f109 0501 	add.w	r5, r9, #1
 800bc84:	42ab      	cmp	r3, r5
 800bc86:	db32      	blt.n	800bcee <__lshift+0x86>
 800bc88:	4638      	mov	r0, r7
 800bc8a:	f7ff fe2c 	bl	800b8e6 <_Balloc>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	4680      	mov	r8, r0
 800bc92:	461a      	mov	r2, r3
 800bc94:	f100 0114 	add.w	r1, r0, #20
 800bc98:	4553      	cmp	r3, sl
 800bc9a:	db2b      	blt.n	800bcf4 <__lshift+0x8c>
 800bc9c:	6920      	ldr	r0, [r4, #16]
 800bc9e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bca2:	f104 0314 	add.w	r3, r4, #20
 800bca6:	f016 021f 	ands.w	r2, r6, #31
 800bcaa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bcb2:	d025      	beq.n	800bd00 <__lshift+0x98>
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	f1c2 0e20 	rsb	lr, r2, #32
 800bcba:	468a      	mov	sl, r1
 800bcbc:	681e      	ldr	r6, [r3, #0]
 800bcbe:	4096      	lsls	r6, r2
 800bcc0:	4330      	orrs	r0, r6
 800bcc2:	f84a 0b04 	str.w	r0, [sl], #4
 800bcc6:	f853 0b04 	ldr.w	r0, [r3], #4
 800bcca:	459c      	cmp	ip, r3
 800bccc:	fa20 f00e 	lsr.w	r0, r0, lr
 800bcd0:	d814      	bhi.n	800bcfc <__lshift+0x94>
 800bcd2:	6048      	str	r0, [r1, #4]
 800bcd4:	b108      	cbz	r0, 800bcda <__lshift+0x72>
 800bcd6:	f109 0502 	add.w	r5, r9, #2
 800bcda:	3d01      	subs	r5, #1
 800bcdc:	4638      	mov	r0, r7
 800bcde:	f8c8 5010 	str.w	r5, [r8, #16]
 800bce2:	4621      	mov	r1, r4
 800bce4:	f7ff fe33 	bl	800b94e <_Bfree>
 800bce8:	4640      	mov	r0, r8
 800bcea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcee:	3101      	adds	r1, #1
 800bcf0:	005b      	lsls	r3, r3, #1
 800bcf2:	e7c7      	b.n	800bc84 <__lshift+0x1c>
 800bcf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	e7cd      	b.n	800bc98 <__lshift+0x30>
 800bcfc:	4651      	mov	r1, sl
 800bcfe:	e7dc      	b.n	800bcba <__lshift+0x52>
 800bd00:	3904      	subs	r1, #4
 800bd02:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd06:	459c      	cmp	ip, r3
 800bd08:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd0c:	d8f9      	bhi.n	800bd02 <__lshift+0x9a>
 800bd0e:	e7e4      	b.n	800bcda <__lshift+0x72>

0800bd10 <__mcmp>:
 800bd10:	6903      	ldr	r3, [r0, #16]
 800bd12:	690a      	ldr	r2, [r1, #16]
 800bd14:	b530      	push	{r4, r5, lr}
 800bd16:	1a9b      	subs	r3, r3, r2
 800bd18:	d10c      	bne.n	800bd34 <__mcmp+0x24>
 800bd1a:	0092      	lsls	r2, r2, #2
 800bd1c:	3014      	adds	r0, #20
 800bd1e:	3114      	adds	r1, #20
 800bd20:	1884      	adds	r4, r0, r2
 800bd22:	4411      	add	r1, r2
 800bd24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd2c:	4295      	cmp	r5, r2
 800bd2e:	d003      	beq.n	800bd38 <__mcmp+0x28>
 800bd30:	d305      	bcc.n	800bd3e <__mcmp+0x2e>
 800bd32:	2301      	movs	r3, #1
 800bd34:	4618      	mov	r0, r3
 800bd36:	bd30      	pop	{r4, r5, pc}
 800bd38:	42a0      	cmp	r0, r4
 800bd3a:	d3f3      	bcc.n	800bd24 <__mcmp+0x14>
 800bd3c:	e7fa      	b.n	800bd34 <__mcmp+0x24>
 800bd3e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd42:	e7f7      	b.n	800bd34 <__mcmp+0x24>

0800bd44 <__mdiff>:
 800bd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd48:	460d      	mov	r5, r1
 800bd4a:	4607      	mov	r7, r0
 800bd4c:	4611      	mov	r1, r2
 800bd4e:	4628      	mov	r0, r5
 800bd50:	4614      	mov	r4, r2
 800bd52:	f7ff ffdd 	bl	800bd10 <__mcmp>
 800bd56:	1e06      	subs	r6, r0, #0
 800bd58:	d108      	bne.n	800bd6c <__mdiff+0x28>
 800bd5a:	4631      	mov	r1, r6
 800bd5c:	4638      	mov	r0, r7
 800bd5e:	f7ff fdc2 	bl	800b8e6 <_Balloc>
 800bd62:	2301      	movs	r3, #1
 800bd64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bd68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd6c:	bfa4      	itt	ge
 800bd6e:	4623      	movge	r3, r4
 800bd70:	462c      	movge	r4, r5
 800bd72:	4638      	mov	r0, r7
 800bd74:	6861      	ldr	r1, [r4, #4]
 800bd76:	bfa6      	itte	ge
 800bd78:	461d      	movge	r5, r3
 800bd7a:	2600      	movge	r6, #0
 800bd7c:	2601      	movlt	r6, #1
 800bd7e:	f7ff fdb2 	bl	800b8e6 <_Balloc>
 800bd82:	f04f 0e00 	mov.w	lr, #0
 800bd86:	60c6      	str	r6, [r0, #12]
 800bd88:	692b      	ldr	r3, [r5, #16]
 800bd8a:	6926      	ldr	r6, [r4, #16]
 800bd8c:	f104 0214 	add.w	r2, r4, #20
 800bd90:	f105 0914 	add.w	r9, r5, #20
 800bd94:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800bd98:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800bd9c:	f100 0114 	add.w	r1, r0, #20
 800bda0:	f852 ab04 	ldr.w	sl, [r2], #4
 800bda4:	f859 5b04 	ldr.w	r5, [r9], #4
 800bda8:	fa1f f38a 	uxth.w	r3, sl
 800bdac:	4473      	add	r3, lr
 800bdae:	b2ac      	uxth	r4, r5
 800bdb0:	1b1b      	subs	r3, r3, r4
 800bdb2:	0c2c      	lsrs	r4, r5, #16
 800bdb4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800bdb8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800bdc2:	45c8      	cmp	r8, r9
 800bdc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800bdc8:	4694      	mov	ip, r2
 800bdca:	f841 4b04 	str.w	r4, [r1], #4
 800bdce:	d8e7      	bhi.n	800bda0 <__mdiff+0x5c>
 800bdd0:	45bc      	cmp	ip, r7
 800bdd2:	d304      	bcc.n	800bdde <__mdiff+0x9a>
 800bdd4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bdd8:	b183      	cbz	r3, 800bdfc <__mdiff+0xb8>
 800bdda:	6106      	str	r6, [r0, #16]
 800bddc:	e7c4      	b.n	800bd68 <__mdiff+0x24>
 800bdde:	f85c 4b04 	ldr.w	r4, [ip], #4
 800bde2:	b2a2      	uxth	r2, r4
 800bde4:	4472      	add	r2, lr
 800bde6:	1413      	asrs	r3, r2, #16
 800bde8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bdec:	b292      	uxth	r2, r2
 800bdee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bdf2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800bdf6:	f841 2b04 	str.w	r2, [r1], #4
 800bdfa:	e7e9      	b.n	800bdd0 <__mdiff+0x8c>
 800bdfc:	3e01      	subs	r6, #1
 800bdfe:	e7e9      	b.n	800bdd4 <__mdiff+0x90>

0800be00 <__d2b>:
 800be00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800be04:	461c      	mov	r4, r3
 800be06:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800be0a:	2101      	movs	r1, #1
 800be0c:	4690      	mov	r8, r2
 800be0e:	f7ff fd6a 	bl	800b8e6 <_Balloc>
 800be12:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800be16:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800be1a:	4607      	mov	r7, r0
 800be1c:	bb34      	cbnz	r4, 800be6c <__d2b+0x6c>
 800be1e:	9201      	str	r2, [sp, #4]
 800be20:	f1b8 0200 	subs.w	r2, r8, #0
 800be24:	d027      	beq.n	800be76 <__d2b+0x76>
 800be26:	a802      	add	r0, sp, #8
 800be28:	f840 2d08 	str.w	r2, [r0, #-8]!
 800be2c:	f7ff fe00 	bl	800ba30 <__lo0bits>
 800be30:	9900      	ldr	r1, [sp, #0]
 800be32:	b1f0      	cbz	r0, 800be72 <__d2b+0x72>
 800be34:	9a01      	ldr	r2, [sp, #4]
 800be36:	f1c0 0320 	rsb	r3, r0, #32
 800be3a:	fa02 f303 	lsl.w	r3, r2, r3
 800be3e:	430b      	orrs	r3, r1
 800be40:	40c2      	lsrs	r2, r0
 800be42:	617b      	str	r3, [r7, #20]
 800be44:	9201      	str	r2, [sp, #4]
 800be46:	9b01      	ldr	r3, [sp, #4]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	bf14      	ite	ne
 800be4c:	2102      	movne	r1, #2
 800be4e:	2101      	moveq	r1, #1
 800be50:	61bb      	str	r3, [r7, #24]
 800be52:	6139      	str	r1, [r7, #16]
 800be54:	b1c4      	cbz	r4, 800be88 <__d2b+0x88>
 800be56:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800be5a:	4404      	add	r4, r0
 800be5c:	6034      	str	r4, [r6, #0]
 800be5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be62:	6028      	str	r0, [r5, #0]
 800be64:	4638      	mov	r0, r7
 800be66:	b002      	add	sp, #8
 800be68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be6c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800be70:	e7d5      	b.n	800be1e <__d2b+0x1e>
 800be72:	6179      	str	r1, [r7, #20]
 800be74:	e7e7      	b.n	800be46 <__d2b+0x46>
 800be76:	a801      	add	r0, sp, #4
 800be78:	f7ff fdda 	bl	800ba30 <__lo0bits>
 800be7c:	2101      	movs	r1, #1
 800be7e:	9b01      	ldr	r3, [sp, #4]
 800be80:	6139      	str	r1, [r7, #16]
 800be82:	617b      	str	r3, [r7, #20]
 800be84:	3020      	adds	r0, #32
 800be86:	e7e5      	b.n	800be54 <__d2b+0x54>
 800be88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be8c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800be90:	6030      	str	r0, [r6, #0]
 800be92:	6918      	ldr	r0, [r3, #16]
 800be94:	f7ff fdad 	bl	800b9f2 <__hi0bits>
 800be98:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800be9c:	e7e1      	b.n	800be62 <__d2b+0x62>

0800be9e <_calloc_r>:
 800be9e:	b538      	push	{r3, r4, r5, lr}
 800bea0:	fb02 f401 	mul.w	r4, r2, r1
 800bea4:	4621      	mov	r1, r4
 800bea6:	f000 f855 	bl	800bf54 <_malloc_r>
 800beaa:	4605      	mov	r5, r0
 800beac:	b118      	cbz	r0, 800beb6 <_calloc_r+0x18>
 800beae:	4622      	mov	r2, r4
 800beb0:	2100      	movs	r1, #0
 800beb2:	f7fe fa2f 	bl	800a314 <memset>
 800beb6:	4628      	mov	r0, r5
 800beb8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bebc <_free_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	4605      	mov	r5, r0
 800bec0:	2900      	cmp	r1, #0
 800bec2:	d043      	beq.n	800bf4c <_free_r+0x90>
 800bec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bec8:	1f0c      	subs	r4, r1, #4
 800beca:	2b00      	cmp	r3, #0
 800becc:	bfb8      	it	lt
 800bece:	18e4      	addlt	r4, r4, r3
 800bed0:	f000 fa27 	bl	800c322 <__malloc_lock>
 800bed4:	4a1e      	ldr	r2, [pc, #120]	; (800bf50 <_free_r+0x94>)
 800bed6:	6813      	ldr	r3, [r2, #0]
 800bed8:	4610      	mov	r0, r2
 800beda:	b933      	cbnz	r3, 800beea <_free_r+0x2e>
 800bedc:	6063      	str	r3, [r4, #4]
 800bede:	6014      	str	r4, [r2, #0]
 800bee0:	4628      	mov	r0, r5
 800bee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bee6:	f000 ba1d 	b.w	800c324 <__malloc_unlock>
 800beea:	42a3      	cmp	r3, r4
 800beec:	d90b      	bls.n	800bf06 <_free_r+0x4a>
 800beee:	6821      	ldr	r1, [r4, #0]
 800bef0:	1862      	adds	r2, r4, r1
 800bef2:	4293      	cmp	r3, r2
 800bef4:	bf01      	itttt	eq
 800bef6:	681a      	ldreq	r2, [r3, #0]
 800bef8:	685b      	ldreq	r3, [r3, #4]
 800befa:	1852      	addeq	r2, r2, r1
 800befc:	6022      	streq	r2, [r4, #0]
 800befe:	6063      	str	r3, [r4, #4]
 800bf00:	6004      	str	r4, [r0, #0]
 800bf02:	e7ed      	b.n	800bee0 <_free_r+0x24>
 800bf04:	4613      	mov	r3, r2
 800bf06:	685a      	ldr	r2, [r3, #4]
 800bf08:	b10a      	cbz	r2, 800bf0e <_free_r+0x52>
 800bf0a:	42a2      	cmp	r2, r4
 800bf0c:	d9fa      	bls.n	800bf04 <_free_r+0x48>
 800bf0e:	6819      	ldr	r1, [r3, #0]
 800bf10:	1858      	adds	r0, r3, r1
 800bf12:	42a0      	cmp	r0, r4
 800bf14:	d10b      	bne.n	800bf2e <_free_r+0x72>
 800bf16:	6820      	ldr	r0, [r4, #0]
 800bf18:	4401      	add	r1, r0
 800bf1a:	1858      	adds	r0, r3, r1
 800bf1c:	4282      	cmp	r2, r0
 800bf1e:	6019      	str	r1, [r3, #0]
 800bf20:	d1de      	bne.n	800bee0 <_free_r+0x24>
 800bf22:	6810      	ldr	r0, [r2, #0]
 800bf24:	6852      	ldr	r2, [r2, #4]
 800bf26:	4401      	add	r1, r0
 800bf28:	6019      	str	r1, [r3, #0]
 800bf2a:	605a      	str	r2, [r3, #4]
 800bf2c:	e7d8      	b.n	800bee0 <_free_r+0x24>
 800bf2e:	d902      	bls.n	800bf36 <_free_r+0x7a>
 800bf30:	230c      	movs	r3, #12
 800bf32:	602b      	str	r3, [r5, #0]
 800bf34:	e7d4      	b.n	800bee0 <_free_r+0x24>
 800bf36:	6820      	ldr	r0, [r4, #0]
 800bf38:	1821      	adds	r1, r4, r0
 800bf3a:	428a      	cmp	r2, r1
 800bf3c:	bf01      	itttt	eq
 800bf3e:	6811      	ldreq	r1, [r2, #0]
 800bf40:	6852      	ldreq	r2, [r2, #4]
 800bf42:	1809      	addeq	r1, r1, r0
 800bf44:	6021      	streq	r1, [r4, #0]
 800bf46:	6062      	str	r2, [r4, #4]
 800bf48:	605c      	str	r4, [r3, #4]
 800bf4a:	e7c9      	b.n	800bee0 <_free_r+0x24>
 800bf4c:	bd38      	pop	{r3, r4, r5, pc}
 800bf4e:	bf00      	nop
 800bf50:	20000690 	.word	0x20000690

0800bf54 <_malloc_r>:
 800bf54:	b570      	push	{r4, r5, r6, lr}
 800bf56:	1ccd      	adds	r5, r1, #3
 800bf58:	f025 0503 	bic.w	r5, r5, #3
 800bf5c:	3508      	adds	r5, #8
 800bf5e:	2d0c      	cmp	r5, #12
 800bf60:	bf38      	it	cc
 800bf62:	250c      	movcc	r5, #12
 800bf64:	2d00      	cmp	r5, #0
 800bf66:	4606      	mov	r6, r0
 800bf68:	db01      	blt.n	800bf6e <_malloc_r+0x1a>
 800bf6a:	42a9      	cmp	r1, r5
 800bf6c:	d903      	bls.n	800bf76 <_malloc_r+0x22>
 800bf6e:	230c      	movs	r3, #12
 800bf70:	6033      	str	r3, [r6, #0]
 800bf72:	2000      	movs	r0, #0
 800bf74:	bd70      	pop	{r4, r5, r6, pc}
 800bf76:	f000 f9d4 	bl	800c322 <__malloc_lock>
 800bf7a:	4a21      	ldr	r2, [pc, #132]	; (800c000 <_malloc_r+0xac>)
 800bf7c:	6814      	ldr	r4, [r2, #0]
 800bf7e:	4621      	mov	r1, r4
 800bf80:	b991      	cbnz	r1, 800bfa8 <_malloc_r+0x54>
 800bf82:	4c20      	ldr	r4, [pc, #128]	; (800c004 <_malloc_r+0xb0>)
 800bf84:	6823      	ldr	r3, [r4, #0]
 800bf86:	b91b      	cbnz	r3, 800bf90 <_malloc_r+0x3c>
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f000 f98f 	bl	800c2ac <_sbrk_r>
 800bf8e:	6020      	str	r0, [r4, #0]
 800bf90:	4629      	mov	r1, r5
 800bf92:	4630      	mov	r0, r6
 800bf94:	f000 f98a 	bl	800c2ac <_sbrk_r>
 800bf98:	1c43      	adds	r3, r0, #1
 800bf9a:	d124      	bne.n	800bfe6 <_malloc_r+0x92>
 800bf9c:	230c      	movs	r3, #12
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	6033      	str	r3, [r6, #0]
 800bfa2:	f000 f9bf 	bl	800c324 <__malloc_unlock>
 800bfa6:	e7e4      	b.n	800bf72 <_malloc_r+0x1e>
 800bfa8:	680b      	ldr	r3, [r1, #0]
 800bfaa:	1b5b      	subs	r3, r3, r5
 800bfac:	d418      	bmi.n	800bfe0 <_malloc_r+0x8c>
 800bfae:	2b0b      	cmp	r3, #11
 800bfb0:	d90f      	bls.n	800bfd2 <_malloc_r+0x7e>
 800bfb2:	600b      	str	r3, [r1, #0]
 800bfb4:	18cc      	adds	r4, r1, r3
 800bfb6:	50cd      	str	r5, [r1, r3]
 800bfb8:	4630      	mov	r0, r6
 800bfba:	f000 f9b3 	bl	800c324 <__malloc_unlock>
 800bfbe:	f104 000b 	add.w	r0, r4, #11
 800bfc2:	1d23      	adds	r3, r4, #4
 800bfc4:	f020 0007 	bic.w	r0, r0, #7
 800bfc8:	1ac3      	subs	r3, r0, r3
 800bfca:	d0d3      	beq.n	800bf74 <_malloc_r+0x20>
 800bfcc:	425a      	negs	r2, r3
 800bfce:	50e2      	str	r2, [r4, r3]
 800bfd0:	e7d0      	b.n	800bf74 <_malloc_r+0x20>
 800bfd2:	684b      	ldr	r3, [r1, #4]
 800bfd4:	428c      	cmp	r4, r1
 800bfd6:	bf16      	itet	ne
 800bfd8:	6063      	strne	r3, [r4, #4]
 800bfda:	6013      	streq	r3, [r2, #0]
 800bfdc:	460c      	movne	r4, r1
 800bfde:	e7eb      	b.n	800bfb8 <_malloc_r+0x64>
 800bfe0:	460c      	mov	r4, r1
 800bfe2:	6849      	ldr	r1, [r1, #4]
 800bfe4:	e7cc      	b.n	800bf80 <_malloc_r+0x2c>
 800bfe6:	1cc4      	adds	r4, r0, #3
 800bfe8:	f024 0403 	bic.w	r4, r4, #3
 800bfec:	42a0      	cmp	r0, r4
 800bfee:	d005      	beq.n	800bffc <_malloc_r+0xa8>
 800bff0:	1a21      	subs	r1, r4, r0
 800bff2:	4630      	mov	r0, r6
 800bff4:	f000 f95a 	bl	800c2ac <_sbrk_r>
 800bff8:	3001      	adds	r0, #1
 800bffa:	d0cf      	beq.n	800bf9c <_malloc_r+0x48>
 800bffc:	6025      	str	r5, [r4, #0]
 800bffe:	e7db      	b.n	800bfb8 <_malloc_r+0x64>
 800c000:	20000690 	.word	0x20000690
 800c004:	20000694 	.word	0x20000694

0800c008 <__ssputs_r>:
 800c008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c00c:	688e      	ldr	r6, [r1, #8]
 800c00e:	4682      	mov	sl, r0
 800c010:	429e      	cmp	r6, r3
 800c012:	460c      	mov	r4, r1
 800c014:	4690      	mov	r8, r2
 800c016:	4699      	mov	r9, r3
 800c018:	d837      	bhi.n	800c08a <__ssputs_r+0x82>
 800c01a:	898a      	ldrh	r2, [r1, #12]
 800c01c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c020:	d031      	beq.n	800c086 <__ssputs_r+0x7e>
 800c022:	2302      	movs	r3, #2
 800c024:	6825      	ldr	r5, [r4, #0]
 800c026:	6909      	ldr	r1, [r1, #16]
 800c028:	1a6f      	subs	r7, r5, r1
 800c02a:	6965      	ldr	r5, [r4, #20]
 800c02c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c030:	fb95 f5f3 	sdiv	r5, r5, r3
 800c034:	f109 0301 	add.w	r3, r9, #1
 800c038:	443b      	add	r3, r7
 800c03a:	429d      	cmp	r5, r3
 800c03c:	bf38      	it	cc
 800c03e:	461d      	movcc	r5, r3
 800c040:	0553      	lsls	r3, r2, #21
 800c042:	d530      	bpl.n	800c0a6 <__ssputs_r+0x9e>
 800c044:	4629      	mov	r1, r5
 800c046:	f7ff ff85 	bl	800bf54 <_malloc_r>
 800c04a:	4606      	mov	r6, r0
 800c04c:	b950      	cbnz	r0, 800c064 <__ssputs_r+0x5c>
 800c04e:	230c      	movs	r3, #12
 800c050:	f04f 30ff 	mov.w	r0, #4294967295
 800c054:	f8ca 3000 	str.w	r3, [sl]
 800c058:	89a3      	ldrh	r3, [r4, #12]
 800c05a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c05e:	81a3      	strh	r3, [r4, #12]
 800c060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c064:	463a      	mov	r2, r7
 800c066:	6921      	ldr	r1, [r4, #16]
 800c068:	f7ff fc32 	bl	800b8d0 <memcpy>
 800c06c:	89a3      	ldrh	r3, [r4, #12]
 800c06e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c076:	81a3      	strh	r3, [r4, #12]
 800c078:	6126      	str	r6, [r4, #16]
 800c07a:	443e      	add	r6, r7
 800c07c:	6026      	str	r6, [r4, #0]
 800c07e:	464e      	mov	r6, r9
 800c080:	6165      	str	r5, [r4, #20]
 800c082:	1bed      	subs	r5, r5, r7
 800c084:	60a5      	str	r5, [r4, #8]
 800c086:	454e      	cmp	r6, r9
 800c088:	d900      	bls.n	800c08c <__ssputs_r+0x84>
 800c08a:	464e      	mov	r6, r9
 800c08c:	4632      	mov	r2, r6
 800c08e:	4641      	mov	r1, r8
 800c090:	6820      	ldr	r0, [r4, #0]
 800c092:	f000 f92d 	bl	800c2f0 <memmove>
 800c096:	68a3      	ldr	r3, [r4, #8]
 800c098:	2000      	movs	r0, #0
 800c09a:	1b9b      	subs	r3, r3, r6
 800c09c:	60a3      	str	r3, [r4, #8]
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	441e      	add	r6, r3
 800c0a2:	6026      	str	r6, [r4, #0]
 800c0a4:	e7dc      	b.n	800c060 <__ssputs_r+0x58>
 800c0a6:	462a      	mov	r2, r5
 800c0a8:	f000 f93d 	bl	800c326 <_realloc_r>
 800c0ac:	4606      	mov	r6, r0
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d1e2      	bne.n	800c078 <__ssputs_r+0x70>
 800c0b2:	6921      	ldr	r1, [r4, #16]
 800c0b4:	4650      	mov	r0, sl
 800c0b6:	f7ff ff01 	bl	800bebc <_free_r>
 800c0ba:	e7c8      	b.n	800c04e <__ssputs_r+0x46>

0800c0bc <_svfiprintf_r>:
 800c0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c0:	461d      	mov	r5, r3
 800c0c2:	898b      	ldrh	r3, [r1, #12]
 800c0c4:	b09d      	sub	sp, #116	; 0x74
 800c0c6:	061f      	lsls	r7, r3, #24
 800c0c8:	4680      	mov	r8, r0
 800c0ca:	460c      	mov	r4, r1
 800c0cc:	4616      	mov	r6, r2
 800c0ce:	d50f      	bpl.n	800c0f0 <_svfiprintf_r+0x34>
 800c0d0:	690b      	ldr	r3, [r1, #16]
 800c0d2:	b96b      	cbnz	r3, 800c0f0 <_svfiprintf_r+0x34>
 800c0d4:	2140      	movs	r1, #64	; 0x40
 800c0d6:	f7ff ff3d 	bl	800bf54 <_malloc_r>
 800c0da:	6020      	str	r0, [r4, #0]
 800c0dc:	6120      	str	r0, [r4, #16]
 800c0de:	b928      	cbnz	r0, 800c0ec <_svfiprintf_r+0x30>
 800c0e0:	230c      	movs	r3, #12
 800c0e2:	f8c8 3000 	str.w	r3, [r8]
 800c0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ea:	e0c8      	b.n	800c27e <_svfiprintf_r+0x1c2>
 800c0ec:	2340      	movs	r3, #64	; 0x40
 800c0ee:	6163      	str	r3, [r4, #20]
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	9309      	str	r3, [sp, #36]	; 0x24
 800c0f4:	2320      	movs	r3, #32
 800c0f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0fa:	2330      	movs	r3, #48	; 0x30
 800c0fc:	f04f 0b01 	mov.w	fp, #1
 800c100:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c104:	9503      	str	r5, [sp, #12]
 800c106:	4637      	mov	r7, r6
 800c108:	463d      	mov	r5, r7
 800c10a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c10e:	b10b      	cbz	r3, 800c114 <_svfiprintf_r+0x58>
 800c110:	2b25      	cmp	r3, #37	; 0x25
 800c112:	d13e      	bne.n	800c192 <_svfiprintf_r+0xd6>
 800c114:	ebb7 0a06 	subs.w	sl, r7, r6
 800c118:	d00b      	beq.n	800c132 <_svfiprintf_r+0x76>
 800c11a:	4653      	mov	r3, sl
 800c11c:	4632      	mov	r2, r6
 800c11e:	4621      	mov	r1, r4
 800c120:	4640      	mov	r0, r8
 800c122:	f7ff ff71 	bl	800c008 <__ssputs_r>
 800c126:	3001      	adds	r0, #1
 800c128:	f000 80a4 	beq.w	800c274 <_svfiprintf_r+0x1b8>
 800c12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c12e:	4453      	add	r3, sl
 800c130:	9309      	str	r3, [sp, #36]	; 0x24
 800c132:	783b      	ldrb	r3, [r7, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	f000 809d 	beq.w	800c274 <_svfiprintf_r+0x1b8>
 800c13a:	2300      	movs	r3, #0
 800c13c:	f04f 32ff 	mov.w	r2, #4294967295
 800c140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c144:	9304      	str	r3, [sp, #16]
 800c146:	9307      	str	r3, [sp, #28]
 800c148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c14c:	931a      	str	r3, [sp, #104]	; 0x68
 800c14e:	462f      	mov	r7, r5
 800c150:	2205      	movs	r2, #5
 800c152:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c156:	4850      	ldr	r0, [pc, #320]	; (800c298 <_svfiprintf_r+0x1dc>)
 800c158:	f7ff fbac 	bl	800b8b4 <memchr>
 800c15c:	9b04      	ldr	r3, [sp, #16]
 800c15e:	b9d0      	cbnz	r0, 800c196 <_svfiprintf_r+0xda>
 800c160:	06d9      	lsls	r1, r3, #27
 800c162:	bf44      	itt	mi
 800c164:	2220      	movmi	r2, #32
 800c166:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c16a:	071a      	lsls	r2, r3, #28
 800c16c:	bf44      	itt	mi
 800c16e:	222b      	movmi	r2, #43	; 0x2b
 800c170:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c174:	782a      	ldrb	r2, [r5, #0]
 800c176:	2a2a      	cmp	r2, #42	; 0x2a
 800c178:	d015      	beq.n	800c1a6 <_svfiprintf_r+0xea>
 800c17a:	462f      	mov	r7, r5
 800c17c:	2000      	movs	r0, #0
 800c17e:	250a      	movs	r5, #10
 800c180:	9a07      	ldr	r2, [sp, #28]
 800c182:	4639      	mov	r1, r7
 800c184:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c188:	3b30      	subs	r3, #48	; 0x30
 800c18a:	2b09      	cmp	r3, #9
 800c18c:	d94d      	bls.n	800c22a <_svfiprintf_r+0x16e>
 800c18e:	b1b8      	cbz	r0, 800c1c0 <_svfiprintf_r+0x104>
 800c190:	e00f      	b.n	800c1b2 <_svfiprintf_r+0xf6>
 800c192:	462f      	mov	r7, r5
 800c194:	e7b8      	b.n	800c108 <_svfiprintf_r+0x4c>
 800c196:	4a40      	ldr	r2, [pc, #256]	; (800c298 <_svfiprintf_r+0x1dc>)
 800c198:	463d      	mov	r5, r7
 800c19a:	1a80      	subs	r0, r0, r2
 800c19c:	fa0b f000 	lsl.w	r0, fp, r0
 800c1a0:	4318      	orrs	r0, r3
 800c1a2:	9004      	str	r0, [sp, #16]
 800c1a4:	e7d3      	b.n	800c14e <_svfiprintf_r+0x92>
 800c1a6:	9a03      	ldr	r2, [sp, #12]
 800c1a8:	1d11      	adds	r1, r2, #4
 800c1aa:	6812      	ldr	r2, [r2, #0]
 800c1ac:	9103      	str	r1, [sp, #12]
 800c1ae:	2a00      	cmp	r2, #0
 800c1b0:	db01      	blt.n	800c1b6 <_svfiprintf_r+0xfa>
 800c1b2:	9207      	str	r2, [sp, #28]
 800c1b4:	e004      	b.n	800c1c0 <_svfiprintf_r+0x104>
 800c1b6:	4252      	negs	r2, r2
 800c1b8:	f043 0302 	orr.w	r3, r3, #2
 800c1bc:	9207      	str	r2, [sp, #28]
 800c1be:	9304      	str	r3, [sp, #16]
 800c1c0:	783b      	ldrb	r3, [r7, #0]
 800c1c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c1c4:	d10c      	bne.n	800c1e0 <_svfiprintf_r+0x124>
 800c1c6:	787b      	ldrb	r3, [r7, #1]
 800c1c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c1ca:	d133      	bne.n	800c234 <_svfiprintf_r+0x178>
 800c1cc:	9b03      	ldr	r3, [sp, #12]
 800c1ce:	3702      	adds	r7, #2
 800c1d0:	1d1a      	adds	r2, r3, #4
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	9203      	str	r2, [sp, #12]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	bfb8      	it	lt
 800c1da:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1de:	9305      	str	r3, [sp, #20]
 800c1e0:	4d2e      	ldr	r5, [pc, #184]	; (800c29c <_svfiprintf_r+0x1e0>)
 800c1e2:	2203      	movs	r2, #3
 800c1e4:	7839      	ldrb	r1, [r7, #0]
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	f7ff fb64 	bl	800b8b4 <memchr>
 800c1ec:	b138      	cbz	r0, 800c1fe <_svfiprintf_r+0x142>
 800c1ee:	2340      	movs	r3, #64	; 0x40
 800c1f0:	1b40      	subs	r0, r0, r5
 800c1f2:	fa03 f000 	lsl.w	r0, r3, r0
 800c1f6:	9b04      	ldr	r3, [sp, #16]
 800c1f8:	3701      	adds	r7, #1
 800c1fa:	4303      	orrs	r3, r0
 800c1fc:	9304      	str	r3, [sp, #16]
 800c1fe:	7839      	ldrb	r1, [r7, #0]
 800c200:	2206      	movs	r2, #6
 800c202:	4827      	ldr	r0, [pc, #156]	; (800c2a0 <_svfiprintf_r+0x1e4>)
 800c204:	1c7e      	adds	r6, r7, #1
 800c206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c20a:	f7ff fb53 	bl	800b8b4 <memchr>
 800c20e:	2800      	cmp	r0, #0
 800c210:	d038      	beq.n	800c284 <_svfiprintf_r+0x1c8>
 800c212:	4b24      	ldr	r3, [pc, #144]	; (800c2a4 <_svfiprintf_r+0x1e8>)
 800c214:	bb13      	cbnz	r3, 800c25c <_svfiprintf_r+0x1a0>
 800c216:	9b03      	ldr	r3, [sp, #12]
 800c218:	3307      	adds	r3, #7
 800c21a:	f023 0307 	bic.w	r3, r3, #7
 800c21e:	3308      	adds	r3, #8
 800c220:	9303      	str	r3, [sp, #12]
 800c222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c224:	444b      	add	r3, r9
 800c226:	9309      	str	r3, [sp, #36]	; 0x24
 800c228:	e76d      	b.n	800c106 <_svfiprintf_r+0x4a>
 800c22a:	fb05 3202 	mla	r2, r5, r2, r3
 800c22e:	2001      	movs	r0, #1
 800c230:	460f      	mov	r7, r1
 800c232:	e7a6      	b.n	800c182 <_svfiprintf_r+0xc6>
 800c234:	2300      	movs	r3, #0
 800c236:	250a      	movs	r5, #10
 800c238:	4619      	mov	r1, r3
 800c23a:	3701      	adds	r7, #1
 800c23c:	9305      	str	r3, [sp, #20]
 800c23e:	4638      	mov	r0, r7
 800c240:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c244:	3a30      	subs	r2, #48	; 0x30
 800c246:	2a09      	cmp	r2, #9
 800c248:	d903      	bls.n	800c252 <_svfiprintf_r+0x196>
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d0c8      	beq.n	800c1e0 <_svfiprintf_r+0x124>
 800c24e:	9105      	str	r1, [sp, #20]
 800c250:	e7c6      	b.n	800c1e0 <_svfiprintf_r+0x124>
 800c252:	fb05 2101 	mla	r1, r5, r1, r2
 800c256:	2301      	movs	r3, #1
 800c258:	4607      	mov	r7, r0
 800c25a:	e7f0      	b.n	800c23e <_svfiprintf_r+0x182>
 800c25c:	ab03      	add	r3, sp, #12
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	4622      	mov	r2, r4
 800c262:	4b11      	ldr	r3, [pc, #68]	; (800c2a8 <_svfiprintf_r+0x1ec>)
 800c264:	a904      	add	r1, sp, #16
 800c266:	4640      	mov	r0, r8
 800c268:	f7fe f8ee 	bl	800a448 <_printf_float>
 800c26c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c270:	4681      	mov	r9, r0
 800c272:	d1d6      	bne.n	800c222 <_svfiprintf_r+0x166>
 800c274:	89a3      	ldrh	r3, [r4, #12]
 800c276:	065b      	lsls	r3, r3, #25
 800c278:	f53f af35 	bmi.w	800c0e6 <_svfiprintf_r+0x2a>
 800c27c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c27e:	b01d      	add	sp, #116	; 0x74
 800c280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c284:	ab03      	add	r3, sp, #12
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	4622      	mov	r2, r4
 800c28a:	4b07      	ldr	r3, [pc, #28]	; (800c2a8 <_svfiprintf_r+0x1ec>)
 800c28c:	a904      	add	r1, sp, #16
 800c28e:	4640      	mov	r0, r8
 800c290:	f7fe fb86 	bl	800a9a0 <_printf_i>
 800c294:	e7ea      	b.n	800c26c <_svfiprintf_r+0x1b0>
 800c296:	bf00      	nop
 800c298:	0800d404 	.word	0x0800d404
 800c29c:	0800d40a 	.word	0x0800d40a
 800c2a0:	0800d40e 	.word	0x0800d40e
 800c2a4:	0800a449 	.word	0x0800a449
 800c2a8:	0800c009 	.word	0x0800c009

0800c2ac <_sbrk_r>:
 800c2ac:	b538      	push	{r3, r4, r5, lr}
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	4c05      	ldr	r4, [pc, #20]	; (800c2c8 <_sbrk_r+0x1c>)
 800c2b2:	4605      	mov	r5, r0
 800c2b4:	4608      	mov	r0, r1
 800c2b6:	6023      	str	r3, [r4, #0]
 800c2b8:	f7f9 fef0 	bl	800609c <_sbrk>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_sbrk_r+0x1a>
 800c2c0:	6823      	ldr	r3, [r4, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_sbrk_r+0x1a>
 800c2c4:	602b      	str	r3, [r5, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	200015b0 	.word	0x200015b0

0800c2cc <__ascii_mbtowc>:
 800c2cc:	b082      	sub	sp, #8
 800c2ce:	b901      	cbnz	r1, 800c2d2 <__ascii_mbtowc+0x6>
 800c2d0:	a901      	add	r1, sp, #4
 800c2d2:	b142      	cbz	r2, 800c2e6 <__ascii_mbtowc+0x1a>
 800c2d4:	b14b      	cbz	r3, 800c2ea <__ascii_mbtowc+0x1e>
 800c2d6:	7813      	ldrb	r3, [r2, #0]
 800c2d8:	600b      	str	r3, [r1, #0]
 800c2da:	7812      	ldrb	r2, [r2, #0]
 800c2dc:	1c10      	adds	r0, r2, #0
 800c2de:	bf18      	it	ne
 800c2e0:	2001      	movne	r0, #1
 800c2e2:	b002      	add	sp, #8
 800c2e4:	4770      	bx	lr
 800c2e6:	4610      	mov	r0, r2
 800c2e8:	e7fb      	b.n	800c2e2 <__ascii_mbtowc+0x16>
 800c2ea:	f06f 0001 	mvn.w	r0, #1
 800c2ee:	e7f8      	b.n	800c2e2 <__ascii_mbtowc+0x16>

0800c2f0 <memmove>:
 800c2f0:	4288      	cmp	r0, r1
 800c2f2:	b510      	push	{r4, lr}
 800c2f4:	eb01 0302 	add.w	r3, r1, r2
 800c2f8:	d807      	bhi.n	800c30a <memmove+0x1a>
 800c2fa:	1e42      	subs	r2, r0, #1
 800c2fc:	4299      	cmp	r1, r3
 800c2fe:	d00a      	beq.n	800c316 <memmove+0x26>
 800c300:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c304:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c308:	e7f8      	b.n	800c2fc <memmove+0xc>
 800c30a:	4283      	cmp	r3, r0
 800c30c:	d9f5      	bls.n	800c2fa <memmove+0xa>
 800c30e:	1881      	adds	r1, r0, r2
 800c310:	1ad2      	subs	r2, r2, r3
 800c312:	42d3      	cmn	r3, r2
 800c314:	d100      	bne.n	800c318 <memmove+0x28>
 800c316:	bd10      	pop	{r4, pc}
 800c318:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c31c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c320:	e7f7      	b.n	800c312 <memmove+0x22>

0800c322 <__malloc_lock>:
 800c322:	4770      	bx	lr

0800c324 <__malloc_unlock>:
 800c324:	4770      	bx	lr

0800c326 <_realloc_r>:
 800c326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c328:	4607      	mov	r7, r0
 800c32a:	4614      	mov	r4, r2
 800c32c:	460e      	mov	r6, r1
 800c32e:	b921      	cbnz	r1, 800c33a <_realloc_r+0x14>
 800c330:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c334:	4611      	mov	r1, r2
 800c336:	f7ff be0d 	b.w	800bf54 <_malloc_r>
 800c33a:	b922      	cbnz	r2, 800c346 <_realloc_r+0x20>
 800c33c:	f7ff fdbe 	bl	800bebc <_free_r>
 800c340:	4625      	mov	r5, r4
 800c342:	4628      	mov	r0, r5
 800c344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c346:	f000 f821 	bl	800c38c <_malloc_usable_size_r>
 800c34a:	42a0      	cmp	r0, r4
 800c34c:	d20f      	bcs.n	800c36e <_realloc_r+0x48>
 800c34e:	4621      	mov	r1, r4
 800c350:	4638      	mov	r0, r7
 800c352:	f7ff fdff 	bl	800bf54 <_malloc_r>
 800c356:	4605      	mov	r5, r0
 800c358:	2800      	cmp	r0, #0
 800c35a:	d0f2      	beq.n	800c342 <_realloc_r+0x1c>
 800c35c:	4631      	mov	r1, r6
 800c35e:	4622      	mov	r2, r4
 800c360:	f7ff fab6 	bl	800b8d0 <memcpy>
 800c364:	4631      	mov	r1, r6
 800c366:	4638      	mov	r0, r7
 800c368:	f7ff fda8 	bl	800bebc <_free_r>
 800c36c:	e7e9      	b.n	800c342 <_realloc_r+0x1c>
 800c36e:	4635      	mov	r5, r6
 800c370:	e7e7      	b.n	800c342 <_realloc_r+0x1c>

0800c372 <__ascii_wctomb>:
 800c372:	b149      	cbz	r1, 800c388 <__ascii_wctomb+0x16>
 800c374:	2aff      	cmp	r2, #255	; 0xff
 800c376:	bf8b      	itete	hi
 800c378:	238a      	movhi	r3, #138	; 0x8a
 800c37a:	700a      	strbls	r2, [r1, #0]
 800c37c:	6003      	strhi	r3, [r0, #0]
 800c37e:	2001      	movls	r0, #1
 800c380:	bf88      	it	hi
 800c382:	f04f 30ff 	movhi.w	r0, #4294967295
 800c386:	4770      	bx	lr
 800c388:	4608      	mov	r0, r1
 800c38a:	4770      	bx	lr

0800c38c <_malloc_usable_size_r>:
 800c38c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c390:	1f18      	subs	r0, r3, #4
 800c392:	2b00      	cmp	r3, #0
 800c394:	bfbc      	itt	lt
 800c396:	580b      	ldrlt	r3, [r1, r0]
 800c398:	18c0      	addlt	r0, r0, r3
 800c39a:	4770      	bx	lr

0800c39c <log>:
 800c39c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c3a0:	b08a      	sub	sp, #40	; 0x28
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	460d      	mov	r5, r1
 800c3a6:	f000 f873 	bl	800c490 <__ieee754_log>
 800c3aa:	4b34      	ldr	r3, [pc, #208]	; (800c47c <log+0xe0>)
 800c3ac:	4680      	mov	r8, r0
 800c3ae:	f993 6000 	ldrsb.w	r6, [r3]
 800c3b2:	4689      	mov	r9, r1
 800c3b4:	1c73      	adds	r3, r6, #1
 800c3b6:	d05b      	beq.n	800c470 <log+0xd4>
 800c3b8:	4622      	mov	r2, r4
 800c3ba:	462b      	mov	r3, r5
 800c3bc:	4620      	mov	r0, r4
 800c3be:	4629      	mov	r1, r5
 800c3c0:	f7f4 fb24 	bl	8000a0c <__aeabi_dcmpun>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d153      	bne.n	800c470 <log+0xd4>
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	f7f4 fb12 	bl	80009f8 <__aeabi_dcmpgt>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d14b      	bne.n	800c470 <log+0xd4>
 800c3d8:	4b29      	ldr	r3, [pc, #164]	; (800c480 <log+0xe4>)
 800c3da:	9008      	str	r0, [sp, #32]
 800c3dc:	9301      	str	r3, [sp, #4]
 800c3de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c3e2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c3e6:	b9a6      	cbnz	r6, 800c412 <log+0x76>
 800c3e8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c3ec:	4b25      	ldr	r3, [pc, #148]	; (800c484 <log+0xe8>)
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c3f4:	4629      	mov	r1, r5
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	f7f4 fad5 	bl	80009a8 <__aeabi_dcmpeq>
 800c3fe:	bb40      	cbnz	r0, 800c452 <log+0xb6>
 800c400:	2301      	movs	r3, #1
 800c402:	2e02      	cmp	r6, #2
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	d119      	bne.n	800c43c <log+0xa0>
 800c408:	f7fd ff5a 	bl	800a2c0 <__errno>
 800c40c:	2321      	movs	r3, #33	; 0x21
 800c40e:	6003      	str	r3, [r0, #0]
 800c410:	e019      	b.n	800c446 <log+0xaa>
 800c412:	2200      	movs	r2, #0
 800c414:	4b1c      	ldr	r3, [pc, #112]	; (800c488 <log+0xec>)
 800c416:	4620      	mov	r0, r4
 800c418:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c41c:	4629      	mov	r1, r5
 800c41e:	2200      	movs	r2, #0
 800c420:	2300      	movs	r3, #0
 800c422:	f7f4 fac1 	bl	80009a8 <__aeabi_dcmpeq>
 800c426:	2800      	cmp	r0, #0
 800c428:	d0ea      	beq.n	800c400 <log+0x64>
 800c42a:	2302      	movs	r3, #2
 800c42c:	429e      	cmp	r6, r3
 800c42e:	9300      	str	r3, [sp, #0]
 800c430:	d111      	bne.n	800c456 <log+0xba>
 800c432:	f7fd ff45 	bl	800a2c0 <__errno>
 800c436:	2322      	movs	r3, #34	; 0x22
 800c438:	6003      	str	r3, [r0, #0]
 800c43a:	e011      	b.n	800c460 <log+0xc4>
 800c43c:	4668      	mov	r0, sp
 800c43e:	f000 f9d9 	bl	800c7f4 <matherr>
 800c442:	2800      	cmp	r0, #0
 800c444:	d0e0      	beq.n	800c408 <log+0x6c>
 800c446:	4811      	ldr	r0, [pc, #68]	; (800c48c <log+0xf0>)
 800c448:	f000 f9d6 	bl	800c7f8 <nan>
 800c44c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c450:	e006      	b.n	800c460 <log+0xc4>
 800c452:	2302      	movs	r3, #2
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	4668      	mov	r0, sp
 800c458:	f000 f9cc 	bl	800c7f4 <matherr>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	d0e8      	beq.n	800c432 <log+0x96>
 800c460:	9b08      	ldr	r3, [sp, #32]
 800c462:	b11b      	cbz	r3, 800c46c <log+0xd0>
 800c464:	f7fd ff2c 	bl	800a2c0 <__errno>
 800c468:	9b08      	ldr	r3, [sp, #32]
 800c46a:	6003      	str	r3, [r0, #0]
 800c46c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800c470:	4640      	mov	r0, r8
 800c472:	4649      	mov	r1, r9
 800c474:	b00a      	add	sp, #40	; 0x28
 800c476:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c47a:	bf00      	nop
 800c47c:	2000025c 	.word	0x2000025c
 800c480:	0800d520 	.word	0x0800d520
 800c484:	c7efffff 	.word	0xc7efffff
 800c488:	fff00000 	.word	0xfff00000
 800c48c:	0800d409 	.word	0x0800d409

0800c490 <__ieee754_log>:
 800c490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c494:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c498:	b087      	sub	sp, #28
 800c49a:	4602      	mov	r2, r0
 800c49c:	460b      	mov	r3, r1
 800c49e:	460d      	mov	r5, r1
 800c4a0:	da24      	bge.n	800c4ec <__ieee754_log+0x5c>
 800c4a2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c4a6:	4304      	orrs	r4, r0
 800c4a8:	d108      	bne.n	800c4bc <__ieee754_log+0x2c>
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	49cb      	ldr	r1, [pc, #812]	; (800c7e0 <__ieee754_log+0x350>)
 800c4b2:	f7f4 f93b 	bl	800072c <__aeabi_ddiv>
 800c4b6:	b007      	add	sp, #28
 800c4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4bc:	2900      	cmp	r1, #0
 800c4be:	da04      	bge.n	800c4ca <__ieee754_log+0x3a>
 800c4c0:	f7f3 fe52 	bl	8000168 <__aeabi_dsub>
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	e7f3      	b.n	800c4b2 <__ieee754_log+0x22>
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	4bc5      	ldr	r3, [pc, #788]	; (800c7e4 <__ieee754_log+0x354>)
 800c4ce:	f7f4 f803 	bl	80004d8 <__aeabi_dmul>
 800c4d2:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	460b      	mov	r3, r1
 800c4da:	460d      	mov	r5, r1
 800c4dc:	49c2      	ldr	r1, [pc, #776]	; (800c7e8 <__ieee754_log+0x358>)
 800c4de:	428d      	cmp	r5, r1
 800c4e0:	dd06      	ble.n	800c4f0 <__ieee754_log+0x60>
 800c4e2:	4610      	mov	r0, r2
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	f7f3 fe41 	bl	800016c <__adddf3>
 800c4ea:	e7e4      	b.n	800c4b6 <__ieee754_log+0x26>
 800c4ec:	2600      	movs	r6, #0
 800c4ee:	e7f5      	b.n	800c4dc <__ieee754_log+0x4c>
 800c4f0:	152c      	asrs	r4, r5, #20
 800c4f2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c4f6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800c4fa:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c4fe:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800c502:	4426      	add	r6, r4
 800c504:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800c508:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800c50c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800c510:	ea41 0305 	orr.w	r3, r1, r5
 800c514:	4610      	mov	r0, r2
 800c516:	4619      	mov	r1, r3
 800c518:	2200      	movs	r2, #0
 800c51a:	4bb4      	ldr	r3, [pc, #720]	; (800c7ec <__ieee754_log+0x35c>)
 800c51c:	f7f3 fe24 	bl	8000168 <__aeabi_dsub>
 800c520:	1cab      	adds	r3, r5, #2
 800c522:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c526:	2b02      	cmp	r3, #2
 800c528:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800c52c:	4682      	mov	sl, r0
 800c52e:	468b      	mov	fp, r1
 800c530:	f04f 0200 	mov.w	r2, #0
 800c534:	dc53      	bgt.n	800c5de <__ieee754_log+0x14e>
 800c536:	2300      	movs	r3, #0
 800c538:	f7f4 fa36 	bl	80009a8 <__aeabi_dcmpeq>
 800c53c:	b1d0      	cbz	r0, 800c574 <__ieee754_log+0xe4>
 800c53e:	2c00      	cmp	r4, #0
 800c540:	f000 8120 	beq.w	800c784 <__ieee754_log+0x2f4>
 800c544:	4620      	mov	r0, r4
 800c546:	f7f3 ff5d 	bl	8000404 <__aeabi_i2d>
 800c54a:	a391      	add	r3, pc, #580	; (adr r3, 800c790 <__ieee754_log+0x300>)
 800c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c550:	4606      	mov	r6, r0
 800c552:	460f      	mov	r7, r1
 800c554:	f7f3 ffc0 	bl	80004d8 <__aeabi_dmul>
 800c558:	a38f      	add	r3, pc, #572	; (adr r3, 800c798 <__ieee754_log+0x308>)
 800c55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55e:	4604      	mov	r4, r0
 800c560:	460d      	mov	r5, r1
 800c562:	4630      	mov	r0, r6
 800c564:	4639      	mov	r1, r7
 800c566:	f7f3 ffb7 	bl	80004d8 <__aeabi_dmul>
 800c56a:	4602      	mov	r2, r0
 800c56c:	460b      	mov	r3, r1
 800c56e:	4620      	mov	r0, r4
 800c570:	4629      	mov	r1, r5
 800c572:	e7b8      	b.n	800c4e6 <__ieee754_log+0x56>
 800c574:	a38a      	add	r3, pc, #552	; (adr r3, 800c7a0 <__ieee754_log+0x310>)
 800c576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57a:	4650      	mov	r0, sl
 800c57c:	4659      	mov	r1, fp
 800c57e:	f7f3 ffab 	bl	80004d8 <__aeabi_dmul>
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	2000      	movs	r0, #0
 800c588:	4999      	ldr	r1, [pc, #612]	; (800c7f0 <__ieee754_log+0x360>)
 800c58a:	f7f3 fded 	bl	8000168 <__aeabi_dsub>
 800c58e:	4652      	mov	r2, sl
 800c590:	4606      	mov	r6, r0
 800c592:	460f      	mov	r7, r1
 800c594:	465b      	mov	r3, fp
 800c596:	4650      	mov	r0, sl
 800c598:	4659      	mov	r1, fp
 800c59a:	f7f3 ff9d 	bl	80004d8 <__aeabi_dmul>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	4639      	mov	r1, r7
 800c5a6:	f7f3 ff97 	bl	80004d8 <__aeabi_dmul>
 800c5aa:	4606      	mov	r6, r0
 800c5ac:	460f      	mov	r7, r1
 800c5ae:	b914      	cbnz	r4, 800c5b6 <__ieee754_log+0x126>
 800c5b0:	4632      	mov	r2, r6
 800c5b2:	463b      	mov	r3, r7
 800c5b4:	e0a0      	b.n	800c6f8 <__ieee754_log+0x268>
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f7f3 ff24 	bl	8000404 <__aeabi_i2d>
 800c5bc:	a374      	add	r3, pc, #464	; (adr r3, 800c790 <__ieee754_log+0x300>)
 800c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c2:	4680      	mov	r8, r0
 800c5c4:	4689      	mov	r9, r1
 800c5c6:	f7f3 ff87 	bl	80004d8 <__aeabi_dmul>
 800c5ca:	a373      	add	r3, pc, #460	; (adr r3, 800c798 <__ieee754_log+0x308>)
 800c5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	460d      	mov	r5, r1
 800c5d4:	4640      	mov	r0, r8
 800c5d6:	4649      	mov	r1, r9
 800c5d8:	f7f3 ff7e 	bl	80004d8 <__aeabi_dmul>
 800c5dc:	e0a5      	b.n	800c72a <__ieee754_log+0x29a>
 800c5de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c5e2:	f7f3 fdc3 	bl	800016c <__adddf3>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4650      	mov	r0, sl
 800c5ec:	4659      	mov	r1, fp
 800c5ee:	f7f4 f89d 	bl	800072c <__aeabi_ddiv>
 800c5f2:	e9cd 0100 	strd	r0, r1, [sp]
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f7f3 ff04 	bl	8000404 <__aeabi_i2d>
 800c5fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c604:	4610      	mov	r0, r2
 800c606:	4619      	mov	r1, r3
 800c608:	f7f3 ff66 	bl	80004d8 <__aeabi_dmul>
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c614:	f7f3 ff60 	bl	80004d8 <__aeabi_dmul>
 800c618:	a363      	add	r3, pc, #396	; (adr r3, 800c7a8 <__ieee754_log+0x318>)
 800c61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61e:	4680      	mov	r8, r0
 800c620:	4689      	mov	r9, r1
 800c622:	f7f3 ff59 	bl	80004d8 <__aeabi_dmul>
 800c626:	a362      	add	r3, pc, #392	; (adr r3, 800c7b0 <__ieee754_log+0x320>)
 800c628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62c:	f7f3 fd9e 	bl	800016c <__adddf3>
 800c630:	4642      	mov	r2, r8
 800c632:	464b      	mov	r3, r9
 800c634:	f7f3 ff50 	bl	80004d8 <__aeabi_dmul>
 800c638:	a35f      	add	r3, pc, #380	; (adr r3, 800c7b8 <__ieee754_log+0x328>)
 800c63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63e:	f7f3 fd95 	bl	800016c <__adddf3>
 800c642:	4642      	mov	r2, r8
 800c644:	464b      	mov	r3, r9
 800c646:	f7f3 ff47 	bl	80004d8 <__aeabi_dmul>
 800c64a:	a35d      	add	r3, pc, #372	; (adr r3, 800c7c0 <__ieee754_log+0x330>)
 800c64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c650:	f7f3 fd8c 	bl	800016c <__adddf3>
 800c654:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c658:	f7f3 ff3e 	bl	80004d8 <__aeabi_dmul>
 800c65c:	a35a      	add	r3, pc, #360	; (adr r3, 800c7c8 <__ieee754_log+0x338>)
 800c65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c662:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c666:	4640      	mov	r0, r8
 800c668:	4649      	mov	r1, r9
 800c66a:	f7f3 ff35 	bl	80004d8 <__aeabi_dmul>
 800c66e:	a358      	add	r3, pc, #352	; (adr r3, 800c7d0 <__ieee754_log+0x340>)
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	f7f3 fd7a 	bl	800016c <__adddf3>
 800c678:	4642      	mov	r2, r8
 800c67a:	464b      	mov	r3, r9
 800c67c:	f7f3 ff2c 	bl	80004d8 <__aeabi_dmul>
 800c680:	a355      	add	r3, pc, #340	; (adr r3, 800c7d8 <__ieee754_log+0x348>)
 800c682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c686:	f7f3 fd71 	bl	800016c <__adddf3>
 800c68a:	4642      	mov	r2, r8
 800c68c:	464b      	mov	r3, r9
 800c68e:	f7f3 ff23 	bl	80004d8 <__aeabi_dmul>
 800c692:	4602      	mov	r2, r0
 800c694:	460b      	mov	r3, r1
 800c696:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c69a:	f7f3 fd67 	bl	800016c <__adddf3>
 800c69e:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800c6a2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c6a6:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800c6aa:	3551      	adds	r5, #81	; 0x51
 800c6ac:	4335      	orrs	r5, r6
 800c6ae:	2d00      	cmp	r5, #0
 800c6b0:	4680      	mov	r8, r0
 800c6b2:	4689      	mov	r9, r1
 800c6b4:	dd48      	ble.n	800c748 <__ieee754_log+0x2b8>
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	4b4d      	ldr	r3, [pc, #308]	; (800c7f0 <__ieee754_log+0x360>)
 800c6ba:	4650      	mov	r0, sl
 800c6bc:	4659      	mov	r1, fp
 800c6be:	f7f3 ff0b 	bl	80004d8 <__aeabi_dmul>
 800c6c2:	4652      	mov	r2, sl
 800c6c4:	465b      	mov	r3, fp
 800c6c6:	f7f3 ff07 	bl	80004d8 <__aeabi_dmul>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	460f      	mov	r7, r1
 800c6d2:	4640      	mov	r0, r8
 800c6d4:	4649      	mov	r1, r9
 800c6d6:	f7f3 fd49 	bl	800016c <__adddf3>
 800c6da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6de:	f7f3 fefb 	bl	80004d8 <__aeabi_dmul>
 800c6e2:	4680      	mov	r8, r0
 800c6e4:	4689      	mov	r9, r1
 800c6e6:	b964      	cbnz	r4, 800c702 <__ieee754_log+0x272>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	4639      	mov	r1, r7
 800c6f0:	f7f3 fd3a 	bl	8000168 <__aeabi_dsub>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	4650      	mov	r0, sl
 800c6fa:	4659      	mov	r1, fp
 800c6fc:	f7f3 fd34 	bl	8000168 <__aeabi_dsub>
 800c700:	e6d9      	b.n	800c4b6 <__ieee754_log+0x26>
 800c702:	a323      	add	r3, pc, #140	; (adr r3, 800c790 <__ieee754_log+0x300>)
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c70c:	f7f3 fee4 	bl	80004d8 <__aeabi_dmul>
 800c710:	a321      	add	r3, pc, #132	; (adr r3, 800c798 <__ieee754_log+0x308>)
 800c712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c716:	4604      	mov	r4, r0
 800c718:	460d      	mov	r5, r1
 800c71a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c71e:	f7f3 fedb 	bl	80004d8 <__aeabi_dmul>
 800c722:	4642      	mov	r2, r8
 800c724:	464b      	mov	r3, r9
 800c726:	f7f3 fd21 	bl	800016c <__adddf3>
 800c72a:	4602      	mov	r2, r0
 800c72c:	460b      	mov	r3, r1
 800c72e:	4630      	mov	r0, r6
 800c730:	4639      	mov	r1, r7
 800c732:	f7f3 fd19 	bl	8000168 <__aeabi_dsub>
 800c736:	4652      	mov	r2, sl
 800c738:	465b      	mov	r3, fp
 800c73a:	f7f3 fd15 	bl	8000168 <__aeabi_dsub>
 800c73e:	4602      	mov	r2, r0
 800c740:	460b      	mov	r3, r1
 800c742:	4620      	mov	r0, r4
 800c744:	4629      	mov	r1, r5
 800c746:	e7d9      	b.n	800c6fc <__ieee754_log+0x26c>
 800c748:	4602      	mov	r2, r0
 800c74a:	460b      	mov	r3, r1
 800c74c:	4650      	mov	r0, sl
 800c74e:	4659      	mov	r1, fp
 800c750:	f7f3 fd0a 	bl	8000168 <__aeabi_dsub>
 800c754:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c758:	f7f3 febe 	bl	80004d8 <__aeabi_dmul>
 800c75c:	4606      	mov	r6, r0
 800c75e:	460f      	mov	r7, r1
 800c760:	2c00      	cmp	r4, #0
 800c762:	f43f af25 	beq.w	800c5b0 <__ieee754_log+0x120>
 800c766:	a30a      	add	r3, pc, #40	; (adr r3, 800c790 <__ieee754_log+0x300>)
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c770:	f7f3 feb2 	bl	80004d8 <__aeabi_dmul>
 800c774:	a308      	add	r3, pc, #32	; (adr r3, 800c798 <__ieee754_log+0x308>)
 800c776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77a:	4604      	mov	r4, r0
 800c77c:	460d      	mov	r5, r1
 800c77e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c782:	e729      	b.n	800c5d8 <__ieee754_log+0x148>
 800c784:	2000      	movs	r0, #0
 800c786:	2100      	movs	r1, #0
 800c788:	e695      	b.n	800c4b6 <__ieee754_log+0x26>
 800c78a:	bf00      	nop
 800c78c:	f3af 8000 	nop.w
 800c790:	fee00000 	.word	0xfee00000
 800c794:	3fe62e42 	.word	0x3fe62e42
 800c798:	35793c76 	.word	0x35793c76
 800c79c:	3dea39ef 	.word	0x3dea39ef
 800c7a0:	55555555 	.word	0x55555555
 800c7a4:	3fd55555 	.word	0x3fd55555
 800c7a8:	df3e5244 	.word	0xdf3e5244
 800c7ac:	3fc2f112 	.word	0x3fc2f112
 800c7b0:	96cb03de 	.word	0x96cb03de
 800c7b4:	3fc74664 	.word	0x3fc74664
 800c7b8:	94229359 	.word	0x94229359
 800c7bc:	3fd24924 	.word	0x3fd24924
 800c7c0:	55555593 	.word	0x55555593
 800c7c4:	3fe55555 	.word	0x3fe55555
 800c7c8:	d078c69f 	.word	0xd078c69f
 800c7cc:	3fc39a09 	.word	0x3fc39a09
 800c7d0:	1d8e78af 	.word	0x1d8e78af
 800c7d4:	3fcc71c5 	.word	0x3fcc71c5
 800c7d8:	9997fa04 	.word	0x9997fa04
 800c7dc:	3fd99999 	.word	0x3fd99999
 800c7e0:	c3500000 	.word	0xc3500000
 800c7e4:	43500000 	.word	0x43500000
 800c7e8:	7fefffff 	.word	0x7fefffff
 800c7ec:	3ff00000 	.word	0x3ff00000
 800c7f0:	3fe00000 	.word	0x3fe00000

0800c7f4 <matherr>:
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	4770      	bx	lr

0800c7f8 <nan>:
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	4901      	ldr	r1, [pc, #4]	; (800c800 <nan+0x8>)
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	7ff80000 	.word	0x7ff80000

0800c804 <_init>:
 800c804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c806:	bf00      	nop
 800c808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c80a:	bc08      	pop	{r3}
 800c80c:	469e      	mov	lr, r3
 800c80e:	4770      	bx	lr

0800c810 <_fini>:
 800c810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c812:	bf00      	nop
 800c814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c816:	bc08      	pop	{r3}
 800c818:	469e      	mov	lr, r3
 800c81a:	4770      	bx	lr
