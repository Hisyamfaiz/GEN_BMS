
stm32f103rbt_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbf4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d2c  0800cd08  0800cd08  0001cd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da34  0800da34  00020264  2**0
                  CONTENTS
  4 .ARM          00000000  0800da34  0800da34  00020264  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800da34  0800da34  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da34  0800da34  0001da34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da38  0800da38  0001da38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800da3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a4  20000264  0800dca0  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001608  0800dca0  00021608  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9a6  00000000  00000000  0002028d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004092  00000000  00000000  0003cc33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016b8  00000000  00000000  00040cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b0  00000000  00000000  00042380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018bb8  00000000  00000000  00043830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018382  00000000  00000000  0005c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081718  00000000  00000000  0007476a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5e82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006988  00000000  00000000  000f5f00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000264 	.word	0x20000264
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ccec 	.word	0x0800ccec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000268 	.word	0x20000268
 800014c:	0800ccec 	.word	0x0800ccec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <Batt_Discharge_Mode>:
				SOC_manipulasi,
				grad,
				constanta;

void Batt_Discharge_Mode(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON||
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <Batt_Discharge_Mode+0x80>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d01b      	beq.n	80011a0 <Batt_Discharge_Mode+0x44>
			flag_trip_overtemperature==ON||
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <Batt_Discharge_Mode+0x84>)
 800116a:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON||
 800116c:	2b01      	cmp	r3, #1
 800116e:	d017      	beq.n	80011a0 <Batt_Discharge_Mode+0x44>
			flag_trip_undertemperature==ON||
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <Batt_Discharge_Mode+0x88>)
 8001172:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON||
 8001174:	2b01      	cmp	r3, #1
 8001176:	d013      	beq.n	80011a0 <Batt_Discharge_Mode+0x44>
			flag_trip_overcurrentdischarge==ON||
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <Batt_Discharge_Mode+0x8c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON||
 800117c:	2b01      	cmp	r3, #1
 800117e:	d00f      	beq.n	80011a0 <Batt_Discharge_Mode+0x44>
			flag_trip_SOCOverDischarge==ON||
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <Batt_Discharge_Mode+0x90>)
 8001182:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 8001184:	2b01      	cmp	r3, #1
 8001186:	d00b      	beq.n	80011a0 <Batt_Discharge_Mode+0x44>
			flag_trip_shortcircuit==ON||
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <Batt_Discharge_Mode+0x94>)
 800118a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON||
 800118c:	2b01      	cmp	r3, #1
 800118e:	d007      	beq.n	80011a0 <Batt_Discharge_Mode+0x44>
			flag_trip_unbalance==ON||
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <Batt_Discharge_Mode+0x98>)
 8001192:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON||
 8001194:	2b01      	cmp	r3, #1
 8001196:	d003      	beq.n	80011a0 <Batt_Discharge_Mode+0x44>
			flag_trip_systemfailure==ON)
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <Batt_Discharge_Mode+0x9c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON||
 800119c:	2b01      	cmp	r3, #1
 800119e:	d102      	bne.n	80011a6 <Batt_Discharge_Mode+0x4a>
	{
		Batt_Open_Mode();
 80011a0:	f000 f8fc 	bl	800139c <Batt_Open_Mode>
 80011a4:	e017      	b.n	80011d6 <Batt_Discharge_Mode+0x7a>
	}
	else
	{
		HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ac:	4813      	ldr	r0, [pc, #76]	; (80011fc <Batt_Discharge_Mode+0xa0>)
 80011ae:	f007 faee 	bl	800878e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b8:	4811      	ldr	r0, [pc, #68]	; (8001200 <Batt_Discharge_Mode+0xa4>)
 80011ba:	f007 fae8 	bl	800878e <HAL_GPIO_WritePin>
		BATT_State=STATE_DISCHARGE;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <Batt_Discharge_Mode+0xa8>)
 80011c0:	2202      	movs	r2, #2
 80011c2:	701a      	strb	r2, [r3, #0]

		charge_state=0;
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <Batt_Discharge_Mode+0xac>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <Batt_Discharge_Mode+0xb0>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <Batt_Discharge_Mode+0xb4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
	}


}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200010b1 	.word	0x200010b1
 80011e0:	20001088 	.word	0x20001088
 80011e4:	200010b0 	.word	0x200010b0
 80011e8:	200010c0 	.word	0x200010c0
 80011ec:	200010e4 	.word	0x200010e4
 80011f0:	20000c82 	.word	0x20000c82
 80011f4:	20000c80 	.word	0x20000c80
 80011f8:	20001070 	.word	0x20001070
 80011fc:	40010800 	.word	0x40010800
 8001200:	40011000 	.word	0x40011000
 8001204:	200009a8 	.word	0x200009a8
 8001208:	20000000 	.word	0x20000000
 800120c:	20000001 	.word	0x20000001
 8001210:	20000284 	.word	0x20000284

08001214 <Batt_Charge_Mode>:

void Batt_Charge_Mode(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	if(flag_trip_overvoltage==ON			||
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <Batt_Charge_Mode+0x78>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d017      	beq.n	8001250 <Batt_Charge_Mode+0x3c>
			flag_trip_overtemperature==ON	||
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <Batt_Charge_Mode+0x7c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_overvoltage==ON			||
 8001224:	2b01      	cmp	r3, #1
 8001226:	d013      	beq.n	8001250 <Batt_Charge_Mode+0x3c>
			flag_trip_undertemperature==ON	||
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <Batt_Charge_Mode+0x80>)
 800122a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 800122c:	2b01      	cmp	r3, #1
 800122e:	d00f      	beq.n	8001250 <Batt_Charge_Mode+0x3c>
			flag_trip_overcurrentcharge==ON	||
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <Batt_Charge_Mode+0x84>)
 8001232:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 8001234:	2b01      	cmp	r3, #1
 8001236:	d00b      	beq.n	8001250 <Batt_Charge_Mode+0x3c>
			flag_trip_SOCOverCharge==ON		||
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <Batt_Charge_Mode+0x88>)
 800123a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 800123c:	2b01      	cmp	r3, #1
 800123e:	d007      	beq.n	8001250 <Batt_Charge_Mode+0x3c>
			flag_trip_shortcircuit==ON		||
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <Batt_Charge_Mode+0x8c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 8001244:	2b01      	cmp	r3, #1
 8001246:	d003      	beq.n	8001250 <Batt_Charge_Mode+0x3c>
			flag_trip_systemfailure==ON		)
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <Batt_Charge_Mode+0x90>)
 800124a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 800124c:	2b01      	cmp	r3, #1
 800124e:	d102      	bne.n	8001256 <Batt_Charge_Mode+0x42>
	{
		Batt_Open_Mode();
 8001250:	f000 f8a4 	bl	800139c <Batt_Open_Mode>
 8001254:	e017      	b.n	8001286 <Batt_Charge_Mode+0x72>
	}
	else
	{
		HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_SET);
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800125c:	4812      	ldr	r0, [pc, #72]	; (80012a8 <Batt_Charge_Mode+0x94>)
 800125e:	f007 fa96 	bl	800878e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001268:	4810      	ldr	r0, [pc, #64]	; (80012ac <Batt_Charge_Mode+0x98>)
 800126a:	f007 fa90 	bl	800878e <HAL_GPIO_WritePin>
		BATT_State=STATE_CHARGE;
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <Batt_Charge_Mode+0x9c>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <Batt_Charge_Mode+0xa0>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
		discharge_state=0;
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <Batt_Charge_Mode+0xa4>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <Batt_Charge_Mode+0xa8>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
	}

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200014f5 	.word	0x200014f5
 8001290:	20001088 	.word	0x20001088
 8001294:	200010b0 	.word	0x200010b0
 8001298:	200010dc 	.word	0x200010dc
 800129c:	20000c81 	.word	0x20000c81
 80012a0:	20000c82 	.word	0x20000c82
 80012a4:	20001070 	.word	0x20001070
 80012a8:	40010800 	.word	0x40010800
 80012ac:	40011000 	.word	0x40011000
 80012b0:	200009a8 	.word	0x200009a8
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000001 	.word	0x20000001
 80012bc:	20000284 	.word	0x20000284

080012c0 <Batt_Full_CD_Mode>:

void Batt_Full_CD_Mode(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON			||
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <Batt_Full_CD_Mode+0x98>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d027      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_overvoltage==ON		||
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <Batt_Full_CD_Mode+0x9c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON			||
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d023      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_overtemperature==ON	||
 80012d4:	4b22      	ldr	r3, [pc, #136]	; (8001360 <Batt_Full_CD_Mode+0xa0>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overvoltage==ON		||
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d01f      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_undertemperature==ON	||
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <Batt_Full_CD_Mode+0xa4>)
 80012de:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d01b      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentdischarge==ON||
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <Batt_Full_CD_Mode+0xa8>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d017      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentcharge==ON	||
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <Batt_Full_CD_Mode+0xac>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d013      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverDischarge==ON	||
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <Batt_Full_CD_Mode+0xb0>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d00f      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverCharge==ON		||
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <Batt_Full_CD_Mode+0xb4>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON	||
 8001300:	2b01      	cmp	r3, #1
 8001302:	d00b      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_shortcircuit==ON		||
 8001304:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <Batt_Full_CD_Mode+0xb8>)
 8001306:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 8001308:	2b01      	cmp	r3, #1
 800130a:	d007      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_unbalance==ON			||
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <Batt_Full_CD_Mode+0xbc>)
 800130e:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 8001310:	2b01      	cmp	r3, #1
 8001312:	d003      	beq.n	800131c <Batt_Full_CD_Mode+0x5c>
			flag_trip_systemfailure==ON		)
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <Batt_Full_CD_Mode+0xc0>)
 8001316:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON			||
 8001318:	2b01      	cmp	r3, #1
 800131a:	d102      	bne.n	8001322 <Batt_Full_CD_Mode+0x62>
	{
		Batt_Open_Mode();
 800131c:	f000 f83e 	bl	800139c <Batt_Open_Mode>
 8001320:	e017      	b.n	8001352 <Batt_Full_CD_Mode+0x92>
	}
	else
	{
		HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_SET);
 8001322:	2201      	movs	r2, #1
 8001324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001328:	4816      	ldr	r0, [pc, #88]	; (8001384 <Batt_Full_CD_Mode+0xc4>)
 800132a:	f007 fa30 	bl	800878e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001334:	4814      	ldr	r0, [pc, #80]	; (8001388 <Batt_Full_CD_Mode+0xc8>)
 8001336:	f007 fa2a 	bl	800878e <HAL_GPIO_WritePin>
		BATT_State=STATE_FULL_CHARGE_DISCHARGE;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <Batt_Full_CD_Mode+0xcc>)
 800133c:	2203      	movs	r2, #3
 800133e:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <Batt_Full_CD_Mode+0xd0>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <Batt_Full_CD_Mode+0xd4>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <Batt_Full_CD_Mode+0xd8>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
	}
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200010b1 	.word	0x200010b1
 800135c:	200014f5 	.word	0x200014f5
 8001360:	20001088 	.word	0x20001088
 8001364:	200010b0 	.word	0x200010b0
 8001368:	200010c0 	.word	0x200010c0
 800136c:	200010dc 	.word	0x200010dc
 8001370:	200010e4 	.word	0x200010e4
 8001374:	20000c81 	.word	0x20000c81
 8001378:	20000c82 	.word	0x20000c82
 800137c:	20000c80 	.word	0x20000c80
 8001380:	20001070 	.word	0x20001070
 8001384:	40010800 	.word	0x40010800
 8001388:	40011000 	.word	0x40011000
 800138c:	200009a8 	.word	0x200009a8
 8001390:	20000000 	.word	0x20000000
 8001394:	20000001 	.word	0x20000001
 8001398:	20000284 	.word	0x20000284

0800139c <Batt_Open_Mode>:

void Batt_Open_Mode(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a6:	480f      	ldr	r0, [pc, #60]	; (80013e4 <Batt_Open_Mode+0x48>)
 80013a8:	f007 f9f1 	bl	800878e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAT_CUT_N_GPIO_Port, BAT_CUT_N_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <Batt_Open_Mode+0x4c>)
 80013b4:	f007 f9eb 	bl	800878e <HAL_GPIO_WritePin>
	BATT_State=STATE_STANDBY;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <Batt_Open_Mode+0x50>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
	charge_state=0;
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <Batt_Open_Mode+0x54>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
	discharge_state=0;
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <Batt_Open_Mode+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
	sleep_state=1;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <Batt_Open_Mode+0x5c>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2104      	movs	r1, #4
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <Batt_Open_Mode+0x4c>)
 80013d6:	f007 f9da 	bl	800878e <HAL_GPIO_WritePin>

	check_SOC_Based_OCV();
 80013da:	f000 f811 	bl	8001400 <check_SOC_Based_OCV>
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40010800 	.word	0x40010800
 80013e8:	40011000 	.word	0x40011000
 80013ec:	200009a8 	.word	0x200009a8
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000001 	.word	0x20000001
 80013f8:	20000284 	.word	0x20000284
 80013fc:	00000000 	.word	0x00000000

08001400 <check_SOC_Based_OCV>:

void check_SOC_Based_OCV(void)
{
 8001400:	b598      	push	{r3, r4, r7, lr}
 8001402:	af00      	add	r7, sp, #0
	//Pack_SOC=0.226863411166458*VBATT*VBATT-18.618705166771*VBATT+378.560621625972;   //Persamaan Baterai INR 21700
	Pack_SOC=(147.471026094008*(VBATT/15.0) - 494.687746093127);  // Persamaan Baterai EVE ICR18650/26V
 8001404:	4b44      	ldr	r3, [pc, #272]	; (8001518 <check_SOC_Based_OCV+0x118>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f80d 	bl	8000428 <__aeabi_f2d>
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	4b42      	ldr	r3, [pc, #264]	; (800151c <check_SOC_Based_OCV+0x11c>)
 8001414:	f7ff f98a 	bl	800072c <__aeabi_ddiv>
 8001418:	4603      	mov	r3, r0
 800141a:	460c      	mov	r4, r1
 800141c:	4618      	mov	r0, r3
 800141e:	4621      	mov	r1, r4
 8001420:	a339      	add	r3, pc, #228	; (adr r3, 8001508 <check_SOC_Based_OCV+0x108>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff f857 	bl	80004d8 <__aeabi_dmul>
 800142a:	4603      	mov	r3, r0
 800142c:	460c      	mov	r4, r1
 800142e:	4618      	mov	r0, r3
 8001430:	4621      	mov	r1, r4
 8001432:	a337      	add	r3, pc, #220	; (adr r3, 8001510 <check_SOC_Based_OCV+0x110>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7fe fe96 	bl	8000168 <__aeabi_dsub>
 800143c:	4603      	mov	r3, r0
 800143e:	460c      	mov	r4, r1
 8001440:	4618      	mov	r0, r3
 8001442:	4621      	mov	r1, r4
 8001444:	f7ff fb20 	bl	8000a88 <__aeabi_d2f>
 8001448:	4602      	mov	r2, r0
 800144a:	4b35      	ldr	r3, [pc, #212]	; (8001520 <check_SOC_Based_OCV+0x120>)
 800144c:	601a      	str	r2, [r3, #0]

	grad=(100-0)/(batas_atas-batas_bawah);
 800144e:	4b35      	ldr	r3, [pc, #212]	; (8001524 <check_SOC_Based_OCV+0x124>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b35      	ldr	r3, [pc, #212]	; (8001528 <check_SOC_Based_OCV+0x128>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4619      	mov	r1, r3
 8001458:	4610      	mov	r0, r2
 800145a:	f7ff fb69 	bl	8000b30 <__aeabi_fsub>
 800145e:	4603      	mov	r3, r0
 8001460:	4619      	mov	r1, r3
 8001462:	4832      	ldr	r0, [pc, #200]	; (800152c <check_SOC_Based_OCV+0x12c>)
 8001464:	f7ff fd22 	bl	8000eac <__aeabi_fdiv>
 8001468:	4603      	mov	r3, r0
 800146a:	461a      	mov	r2, r3
 800146c:	4b30      	ldr	r3, [pc, #192]	; (8001530 <check_SOC_Based_OCV+0x130>)
 800146e:	601a      	str	r2, [r3, #0]
	constanta=grad*batas_bawah*(-1);
 8001470:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <check_SOC_Based_OCV+0x130>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <check_SOC_Based_OCV+0x128>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	4610      	mov	r0, r2
 800147c:	f7ff fc62 	bl	8000d44 <__aeabi_fmul>
 8001480:	4603      	mov	r3, r0
 8001482:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001486:	4a2b      	ldr	r2, [pc, #172]	; (8001534 <check_SOC_Based_OCV+0x134>)
 8001488:	6013      	str	r3, [r2, #0]
	SOC_manipulasi=grad*Pack_SOC+constanta;
 800148a:	4b29      	ldr	r3, [pc, #164]	; (8001530 <check_SOC_Based_OCV+0x130>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b24      	ldr	r3, [pc, #144]	; (8001520 <check_SOC_Based_OCV+0x120>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4619      	mov	r1, r3
 8001494:	4610      	mov	r0, r2
 8001496:	f7ff fc55 	bl	8000d44 <__aeabi_fmul>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	4b25      	ldr	r3, [pc, #148]	; (8001534 <check_SOC_Based_OCV+0x134>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4610      	mov	r0, r2
 80014a6:	f7ff fb45 	bl	8000b34 <__addsf3>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <check_SOC_Based_OCV+0x138>)
 80014b0:	601a      	str	r2, [r3, #0]

	if(Pack_SOC>130) Pack_SOC=100;
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <check_SOC_Based_OCV+0x120>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4921      	ldr	r1, [pc, #132]	; (800153c <check_SOC_Based_OCV+0x13c>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fdff 	bl	80010bc <__aeabi_fcmpgt>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <check_SOC_Based_OCV+0xcc>
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <check_SOC_Based_OCV+0x120>)
 80014c6:	4a19      	ldr	r2, [pc, #100]	; (800152c <check_SOC_Based_OCV+0x12c>)
 80014c8:	601a      	str	r2, [r3, #0]
	else if(Pack_SOC>100) Pack_SOC=100;
	else if(Pack_SOC<0) Pack_SOC=0;
}
 80014ca:	e01b      	b.n	8001504 <check_SOC_Based_OCV+0x104>
	else if(Pack_SOC>100) Pack_SOC=100;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <check_SOC_Based_OCV+0x120>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4916      	ldr	r1, [pc, #88]	; (800152c <check_SOC_Based_OCV+0x12c>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fdf2 	bl	80010bc <__aeabi_fcmpgt>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <check_SOC_Based_OCV+0xe6>
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <check_SOC_Based_OCV+0x120>)
 80014e0:	4a12      	ldr	r2, [pc, #72]	; (800152c <check_SOC_Based_OCV+0x12c>)
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	e00e      	b.n	8001504 <check_SOC_Based_OCV+0x104>
	else if(Pack_SOC<0) Pack_SOC=0;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <check_SOC_Based_OCV+0x120>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f04f 0100 	mov.w	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fdc6 	bl	8001080 <__aeabi_fcmplt>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d100      	bne.n	80014fc <check_SOC_Based_OCV+0xfc>
}
 80014fa:	e003      	b.n	8001504 <check_SOC_Based_OCV+0x104>
	else if(Pack_SOC<0) Pack_SOC=0;
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <check_SOC_Based_OCV+0x120>)
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	bd98      	pop	{r3, r4, r7, pc}
 8001508:	a550aa77 	.word	0xa550aa77
 800150c:	40626f12 	.word	0x40626f12
 8001510:	020c1eea 	.word	0x020c1eea
 8001514:	407eeb01 	.word	0x407eeb01
 8001518:	2000108c 	.word	0x2000108c
 800151c:	402e0000 	.word	0x402e0000
 8001520:	20000bdc 	.word	0x20000bdc
 8001524:	2000007c 	.word	0x2000007c
 8001528:	20000080 	.word	0x20000080
 800152c:	42c80000 	.word	0x42c80000
 8001530:	200010c8 	.word	0x200010c8
 8001534:	20001094 	.word	0x20001094
 8001538:	20000bac 	.word	0x20000bac
 800153c:	43020000 	.word	0x43020000

08001540 <BMS_CAN_Tx>:
					Delay_Charger = 0,
					Ready_toCharge = 0,
					flag_Check_SOCawal = 0;

void BMS_CAN_Tx()
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
		int i;
		Batt_voltage.m_uint16_t=VBATT*100;
 8001546:	4b7a      	ldr	r3, [pc, #488]	; (8001730 <BMS_CAN_Tx+0x1f0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	497a      	ldr	r1, [pc, #488]	; (8001734 <BMS_CAN_Tx+0x1f4>)
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fbf9 	bl	8000d44 <__aeabi_fmul>
 8001552:	4603      	mov	r3, r0
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fde1 	bl	800111c <__aeabi_f2uiz>
 800155a:	4603      	mov	r3, r0
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b76      	ldr	r3, [pc, #472]	; (8001738 <BMS_CAN_Tx+0x1f8>)
 8001560:	801a      	strh	r2, [r3, #0]
		Batt_current.m_uint16_t=(IBATT+50)*100;
 8001562:	4b76      	ldr	r3, [pc, #472]	; (800173c <BMS_CAN_Tx+0x1fc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4976      	ldr	r1, [pc, #472]	; (8001740 <BMS_CAN_Tx+0x200>)
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fae3 	bl	8000b34 <__addsf3>
 800156e:	4603      	mov	r3, r0
 8001570:	4970      	ldr	r1, [pc, #448]	; (8001734 <BMS_CAN_Tx+0x1f4>)
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fbe6 	bl	8000d44 <__aeabi_fmul>
 8001578:	4603      	mov	r3, r0
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fdce 	bl	800111c <__aeabi_f2uiz>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b6f      	ldr	r3, [pc, #444]	; (8001744 <BMS_CAN_Tx+0x204>)
 8001586:	801a      	strh	r2, [r3, #0]
		Batt_SOC.m_uint16_t=SOC_manipulasi*100;
 8001588:	4b6f      	ldr	r3, [pc, #444]	; (8001748 <BMS_CAN_Tx+0x208>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4969      	ldr	r1, [pc, #420]	; (8001734 <BMS_CAN_Tx+0x1f4>)
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fbd8 	bl	8000d44 <__aeabi_fmul>
 8001594:	4603      	mov	r3, r0
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fdc0 	bl	800111c <__aeabi_f2uiz>
 800159c:	4603      	mov	r3, r0
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b6a      	ldr	r3, [pc, #424]	; (800174c <BMS_CAN_Tx+0x20c>)
 80015a2:	801a      	strh	r2, [r3, #0]
//		Batt_SOC.m_uint16_t=(int)SOC_manipulasi;	default Data SOC

		Tmax=Suhu_T1;
 80015a4:	4b6a      	ldr	r3, [pc, #424]	; (8001750 <BMS_CAN_Tx+0x210>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a6a      	ldr	r2, [pc, #424]	; (8001754 <BMS_CAN_Tx+0x214>)
 80015aa:	6013      	str	r3, [r2, #0]
		if(Tmax < Suhu_T2) Tmax = Suhu_T2;
 80015ac:	4b69      	ldr	r3, [pc, #420]	; (8001754 <BMS_CAN_Tx+0x214>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b69      	ldr	r3, [pc, #420]	; (8001758 <BMS_CAN_Tx+0x218>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	4610      	mov	r0, r2
 80015b8:	f7ff fd62 	bl	8001080 <__aeabi_fcmplt>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <BMS_CAN_Tx+0x8a>
 80015c2:	4b65      	ldr	r3, [pc, #404]	; (8001758 <BMS_CAN_Tx+0x218>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a63      	ldr	r2, [pc, #396]	; (8001754 <BMS_CAN_Tx+0x214>)
 80015c8:	6013      	str	r3, [r2, #0]
		if(Tmax < Suhu_T3) Tmax = Suhu_T3;
 80015ca:	4b62      	ldr	r3, [pc, #392]	; (8001754 <BMS_CAN_Tx+0x214>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b63      	ldr	r3, [pc, #396]	; (800175c <BMS_CAN_Tx+0x21c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4619      	mov	r1, r3
 80015d4:	4610      	mov	r0, r2
 80015d6:	f7ff fd53 	bl	8001080 <__aeabi_fcmplt>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <BMS_CAN_Tx+0xa8>
 80015e0:	4b5e      	ldr	r3, [pc, #376]	; (800175c <BMS_CAN_Tx+0x21c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a5b      	ldr	r2, [pc, #364]	; (8001754 <BMS_CAN_Tx+0x214>)
 80015e6:	6013      	str	r3, [r2, #0]
		if(Tmax < Suhu_T4) Tmax = Suhu_T4;
 80015e8:	4b5a      	ldr	r3, [pc, #360]	; (8001754 <BMS_CAN_Tx+0x214>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b5c      	ldr	r3, [pc, #368]	; (8001760 <BMS_CAN_Tx+0x220>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	4610      	mov	r0, r2
 80015f4:	f7ff fd44 	bl	8001080 <__aeabi_fcmplt>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <BMS_CAN_Tx+0xc6>
 80015fe:	4b58      	ldr	r3, [pc, #352]	; (8001760 <BMS_CAN_Tx+0x220>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a54      	ldr	r2, [pc, #336]	; (8001754 <BMS_CAN_Tx+0x214>)
 8001604:	6013      	str	r3, [r2, #0]

		Batt_temp.m_uint16_t=(Tmax+40)*10;
 8001606:	4b53      	ldr	r3, [pc, #332]	; (8001754 <BMS_CAN_Tx+0x214>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4956      	ldr	r1, [pc, #344]	; (8001764 <BMS_CAN_Tx+0x224>)
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fa91 	bl	8000b34 <__addsf3>
 8001612:	4603      	mov	r3, r0
 8001614:	4954      	ldr	r1, [pc, #336]	; (8001768 <BMS_CAN_Tx+0x228>)
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fb94 	bl	8000d44 <__aeabi_fmul>
 800161c:	4603      	mov	r3, r0
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fd7c 	bl	800111c <__aeabi_f2uiz>
 8001624:	4603      	mov	r3, r0
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b50      	ldr	r3, [pc, #320]	; (800176c <BMS_CAN_Tx+0x22c>)
 800162a:	801a      	strh	r2, [r3, #0]
		Batt_capacity.m_uint16_t=Pack_Cap*100;
 800162c:	4b50      	ldr	r3, [pc, #320]	; (8001770 <BMS_CAN_Tx+0x230>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4940      	ldr	r1, [pc, #256]	; (8001734 <BMS_CAN_Tx+0x1f4>)
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb86 	bl	8000d44 <__aeabi_fmul>
 8001638:	4603      	mov	r3, r0
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fd6e 	bl	800111c <__aeabi_f2uiz>
 8001640:	4603      	mov	r3, r0
 8001642:	b29a      	uxth	r2, r3
 8001644:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <BMS_CAN_Tx+0x234>)
 8001646:	801a      	strh	r2, [r3, #0]
		Batt_SOH.m_uint16_t=(int)SOH_batt;
 8001648:	4b4b      	ldr	r3, [pc, #300]	; (8001778 <BMS_CAN_Tx+0x238>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fd3f 	bl	80010d0 <__aeabi_f2iz>
 8001652:	4603      	mov	r3, r0
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b49      	ldr	r3, [pc, #292]	; (800177c <BMS_CAN_Tx+0x23c>)
 8001658:	801a      	strh	r2, [r3, #0]
		Batt_cycle.m_uint16_t=LifeTime;
 800165a:	4b49      	ldr	r3, [pc, #292]	; (8001780 <BMS_CAN_Tx+0x240>)
 800165c:	881a      	ldrh	r2, [r3, #0]
 800165e:	4b49      	ldr	r3, [pc, #292]	; (8001784 <BMS_CAN_Tx+0x244>)
 8001660:	801a      	strh	r2, [r3, #0]

		for(int mn=0;mn<15;mn++)
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	e00a      	b.n	800167e <BMS_CAN_Tx+0x13e>
		{
			vcell_15databyte[mn].m_uint16_t=vcell_15data_digi[mn];
 8001668:	4a47      	ldr	r2, [pc, #284]	; (8001788 <BMS_CAN_Tx+0x248>)
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001670:	4a46      	ldr	r2, [pc, #280]	; (800178c <BMS_CAN_Tx+0x24c>)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		for(int mn=0;mn<15;mn++)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	3301      	adds	r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2b0e      	cmp	r3, #14
 8001682:	ddf1      	ble.n	8001668 <BMS_CAN_Tx+0x128>
		}

	if(Handshaking==1){
 8001684:	4b42      	ldr	r3, [pc, #264]	; (8001790 <BMS_CAN_Tx+0x250>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	f040 81db 	bne.w	8001a44 <BMS_CAN_Tx+0x504>
		// CAN ID transmit #1
		Tx_Header.ExtId = (0x0B0<<20|UNIQUE_Code);  //7b1
 800168e:	4b41      	ldr	r3, [pc, #260]	; (8001794 <BMS_CAN_Tx+0x254>)
 8001690:	4a41      	ldr	r2, [pc, #260]	; (8001798 <BMS_CAN_Tx+0x258>)
 8001692:	605a      	str	r2, [r3, #4]
		//CAN Data #1
		Tx_data[0] = Batt_voltage.m_bytes[0];
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <BMS_CAN_Tx+0x1f8>)
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	4b40      	ldr	r3, [pc, #256]	; (800179c <BMS_CAN_Tx+0x25c>)
 800169a:	701a      	strb	r2, [r3, #0]
		Tx_data[1] = Batt_voltage.m_bytes[1];
 800169c:	4b26      	ldr	r3, [pc, #152]	; (8001738 <BMS_CAN_Tx+0x1f8>)
 800169e:	785a      	ldrb	r2, [r3, #1]
 80016a0:	4b3e      	ldr	r3, [pc, #248]	; (800179c <BMS_CAN_Tx+0x25c>)
 80016a2:	705a      	strb	r2, [r3, #1]
		Tx_data[2] = Batt_current.m_bytes[0];
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <BMS_CAN_Tx+0x204>)
 80016a6:	781a      	ldrb	r2, [r3, #0]
 80016a8:	4b3c      	ldr	r3, [pc, #240]	; (800179c <BMS_CAN_Tx+0x25c>)
 80016aa:	709a      	strb	r2, [r3, #2]
		Tx_data[3] = Batt_current.m_bytes[1];
 80016ac:	4b25      	ldr	r3, [pc, #148]	; (8001744 <BMS_CAN_Tx+0x204>)
 80016ae:	785a      	ldrb	r2, [r3, #1]
 80016b0:	4b3a      	ldr	r3, [pc, #232]	; (800179c <BMS_CAN_Tx+0x25c>)
 80016b2:	70da      	strb	r2, [r3, #3]
		Tx_data[4] = Batt_SOC.m_bytes[0];
 80016b4:	4b25      	ldr	r3, [pc, #148]	; (800174c <BMS_CAN_Tx+0x20c>)
 80016b6:	781a      	ldrb	r2, [r3, #0]
 80016b8:	4b38      	ldr	r3, [pc, #224]	; (800179c <BMS_CAN_Tx+0x25c>)
 80016ba:	711a      	strb	r2, [r3, #4]
		Tx_data[5] = Batt_SOC.m_bytes[1];
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <BMS_CAN_Tx+0x20c>)
 80016be:	785a      	ldrb	r2, [r3, #1]
 80016c0:	4b36      	ldr	r3, [pc, #216]	; (800179c <BMS_CAN_Tx+0x25c>)
 80016c2:	715a      	strb	r2, [r3, #5]
		Tx_data[6] = Batt_temp.m_bytes[0];
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <BMS_CAN_Tx+0x22c>)
 80016c6:	781a      	ldrb	r2, [r3, #0]
 80016c8:	4b34      	ldr	r3, [pc, #208]	; (800179c <BMS_CAN_Tx+0x25c>)
 80016ca:	719a      	strb	r2, [r3, #6]
		Tx_data[7] = Batt_temp.m_bytes[1];
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <BMS_CAN_Tx+0x22c>)
 80016ce:	785a      	ldrb	r2, [r3, #1]
 80016d0:	4b32      	ldr	r3, [pc, #200]	; (800179c <BMS_CAN_Tx+0x25c>)
 80016d2:	71da      	strb	r2, [r3, #7]

		//CAN Tx message #1
		Tx_Header.DLC = 8;
 80016d4:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <BMS_CAN_Tx+0x254>)
 80016d6:	2208      	movs	r2, #8
 80016d8:	611a      	str	r2, [r3, #16]
		uint32_t delay_TICK1 = HAL_GetTick();
 80016da:	f005 f92f 	bl	800693c <HAL_GetTick>
 80016de:	6078      	str	r0, [r7, #4]
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80016e0:	e008      	b.n	80016f4 <BMS_CAN_Tx+0x1b4>
			if(HAL_GetTick() - delay_TICK1 > 3000)
 80016e2:	f005 f92b 	bl	800693c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d806      	bhi.n	8001702 <BMS_CAN_Tx+0x1c2>
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80016f4:	482a      	ldr	r0, [pc, #168]	; (80017a0 <BMS_CAN_Tx+0x260>)
 80016f6:	f006 f82f 	bl	8007758 <HAL_CAN_GetTxMailboxesFreeLevel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <BMS_CAN_Tx+0x1a2>
 8001700:	e000      	b.n	8001704 <BMS_CAN_Tx+0x1c4>
				break;
 8001702:	bf00      	nop
		}

		if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8001704:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <BMS_CAN_Tx+0x264>)
 8001706:	4a25      	ldr	r2, [pc, #148]	; (800179c <BMS_CAN_Tx+0x25c>)
 8001708:	4922      	ldr	r1, [pc, #136]	; (8001794 <BMS_CAN_Tx+0x254>)
 800170a:	4825      	ldr	r0, [pc, #148]	; (80017a0 <BMS_CAN_Tx+0x260>)
 800170c:	f005 ff06 	bl	800751c <HAL_CAN_AddTxMessage>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <BMS_CAN_Tx+0x1e6>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8001716:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <BMS_CAN_Tx+0x264>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4619      	mov	r1, r3
 800171c:	4820      	ldr	r0, [pc, #128]	; (80017a0 <BMS_CAN_Tx+0x260>)
 800171e:	f005 ffd7 	bl	80076d0 <HAL_CAN_AbortTxRequest>
			Error_Handler();
 8001722:	f001 fba5 	bl	8002e70 <Error_Handler>
		}
		i=1000;
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	60fb      	str	r3, [r7, #12]
		while(i>1) i--;
 800172c:	e03f      	b.n	80017ae <BMS_CAN_Tx+0x26e>
 800172e:	bf00      	nop
 8001730:	2000108c 	.word	0x2000108c
 8001734:	42c80000 	.word	0x42c80000
 8001738:	200007ac 	.word	0x200007ac
 800173c:	200010a8 	.word	0x200010a8
 8001740:	42480000 	.word	0x42480000
 8001744:	200006ec 	.word	0x200006ec
 8001748:	20000bac 	.word	0x20000bac
 800174c:	200006f4 	.word	0x200006f4
 8001750:	200010bc 	.word	0x200010bc
 8001754:	2000074c 	.word	0x2000074c
 8001758:	200014f8 	.word	0x200014f8
 800175c:	20001090 	.word	0x20001090
 8001760:	200010f0 	.word	0x200010f0
 8001764:	42200000 	.word	0x42200000
 8001768:	41200000 	.word	0x41200000
 800176c:	20000738 	.word	0x20000738
 8001770:	20000010 	.word	0x20000010
 8001774:	200007a4 	.word	0x200007a4
 8001778:	20000004 	.word	0x20000004
 800177c:	200006b8 	.word	0x200006b8
 8001780:	200009aa 	.word	0x200009aa
 8001784:	200006e4 	.word	0x200006e4
 8001788:	20000930 	.word	0x20000930
 800178c:	200006f8 	.word	0x200006f8
 8001790:	20000285 	.word	0x20000285
 8001794:	2000078c 	.word	0x2000078c
 8001798:	0b0bbbb1 	.word	0x0b0bbbb1
 800179c:	200006c8 	.word	0x200006c8
 80017a0:	20000824 	.word	0x20000824
 80017a4:	20000770 	.word	0x20000770
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	dcf9      	bgt.n	80017a8 <BMS_CAN_Tx+0x268>


		// CAN ID transmit #2
		Tx_Header.ExtId = (0x0B1<<20|UNIQUE_Code); //7b2
 80017b4:	4b8e      	ldr	r3, [pc, #568]	; (80019f0 <BMS_CAN_Tx+0x4b0>)
 80017b6:	4a8f      	ldr	r2, [pc, #572]	; (80019f4 <BMS_CAN_Tx+0x4b4>)
 80017b8:	605a      	str	r2, [r3, #4]
		//CAN Data #2
		Tx_data[0] = Batt_capacity.m_bytes[0];
 80017ba:	4b8f      	ldr	r3, [pc, #572]	; (80019f8 <BMS_CAN_Tx+0x4b8>)
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	4b8f      	ldr	r3, [pc, #572]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80017c0:	701a      	strb	r2, [r3, #0]
		Tx_data[1] = Batt_capacity.m_bytes[1];
 80017c2:	4b8d      	ldr	r3, [pc, #564]	; (80019f8 <BMS_CAN_Tx+0x4b8>)
 80017c4:	785a      	ldrb	r2, [r3, #1]
 80017c6:	4b8d      	ldr	r3, [pc, #564]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80017c8:	705a      	strb	r2, [r3, #1]
		Tx_data[2] = Batt_SOH.m_bytes[0];
 80017ca:	4b8d      	ldr	r3, [pc, #564]	; (8001a00 <BMS_CAN_Tx+0x4c0>)
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	4b8b      	ldr	r3, [pc, #556]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80017d0:	709a      	strb	r2, [r3, #2]
		Tx_data[3] = Batt_SOH.m_bytes[1];
 80017d2:	4b8b      	ldr	r3, [pc, #556]	; (8001a00 <BMS_CAN_Tx+0x4c0>)
 80017d4:	785a      	ldrb	r2, [r3, #1]
 80017d6:	4b89      	ldr	r3, [pc, #548]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80017d8:	70da      	strb	r2, [r3, #3]
		Tx_data[4] = Batt_cycle.m_bytes[0];
 80017da:	4b8a      	ldr	r3, [pc, #552]	; (8001a04 <BMS_CAN_Tx+0x4c4>)
 80017dc:	781a      	ldrb	r2, [r3, #0]
 80017de:	4b87      	ldr	r3, [pc, #540]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80017e0:	711a      	strb	r2, [r3, #4]
		Tx_data[5] = Batt_cycle.m_bytes[1];
 80017e2:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <BMS_CAN_Tx+0x4c4>)
 80017e4:	785a      	ldrb	r2, [r3, #1]
 80017e6:	4b85      	ldr	r3, [pc, #532]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80017e8:	715a      	strb	r2, [r3, #5]
		Tx_data[6] = flag_trip_shortcircuit&0x01;
 80017ea:	4b87      	ldr	r3, [pc, #540]	; (8001a08 <BMS_CAN_Tx+0x4c8>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b81      	ldr	r3, [pc, #516]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80017f6:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overcurrentdischarge&0x01)<<1;
 80017f8:	4b80      	ldr	r3, [pc, #512]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80017fa:	799b      	ldrb	r3, [r3, #6]
 80017fc:	b25a      	sxtb	r2, r3
 80017fe:	4b83      	ldr	r3, [pc, #524]	; (8001a0c <BMS_CAN_Tx+0x4cc>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	b25b      	sxtb	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b25b      	sxtb	r3, r3
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4b7a      	ldr	r3, [pc, #488]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 8001814:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overcurrentcharge&0x01)<<2;
 8001816:	4b79      	ldr	r3, [pc, #484]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 8001818:	799b      	ldrb	r3, [r3, #6]
 800181a:	b25a      	sxtb	r2, r3
 800181c:	4b7c      	ldr	r3, [pc, #496]	; (8001a10 <BMS_CAN_Tx+0x4d0>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	b25b      	sxtb	r3, r3
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	b25b      	sxtb	r3, r3
 800182a:	4313      	orrs	r3, r2
 800182c:	b25b      	sxtb	r3, r3
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 8001832:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overtemperature&0x01)<<3;
 8001834:	4b71      	ldr	r3, [pc, #452]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 8001836:	799b      	ldrb	r3, [r3, #6]
 8001838:	b25a      	sxtb	r2, r3
 800183a:	4b76      	ldr	r3, [pc, #472]	; (8001a14 <BMS_CAN_Tx+0x4d4>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	b25b      	sxtb	r3, r3
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	b25b      	sxtb	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	b25b      	sxtb	r3, r3
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b6b      	ldr	r3, [pc, #428]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 8001850:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_undertemperature&0x01)<<4;
 8001852:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 8001854:	799b      	ldrb	r3, [r3, #6]
 8001856:	b25a      	sxtb	r2, r3
 8001858:	4b6f      	ldr	r3, [pc, #444]	; (8001a18 <BMS_CAN_Tx+0x4d8>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	b25b      	sxtb	r3, r3
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	b25b      	sxtb	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	b25b      	sxtb	r3, r3
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b63      	ldr	r3, [pc, #396]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 800186e:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_overtemperature&0x01)<<5;
 8001870:	4b62      	ldr	r3, [pc, #392]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 8001872:	799b      	ldrb	r3, [r3, #6]
 8001874:	b25a      	sxtb	r2, r3
 8001876:	4b67      	ldr	r3, [pc, #412]	; (8001a14 <BMS_CAN_Tx+0x4d4>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	015b      	lsls	r3, r3, #5
 800187c:	b25b      	sxtb	r3, r3
 800187e:	f003 0320 	and.w	r3, r3, #32
 8001882:	b25b      	sxtb	r3, r3
 8001884:	4313      	orrs	r3, r2
 8001886:	b25b      	sxtb	r3, r3
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 800188c:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_undertemperature&0x01)<<6;
 800188e:	4b5b      	ldr	r3, [pc, #364]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 8001890:	799b      	ldrb	r3, [r3, #6]
 8001892:	b25a      	sxtb	r2, r3
 8001894:	4b60      	ldr	r3, [pc, #384]	; (8001a18 <BMS_CAN_Tx+0x4d8>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	019b      	lsls	r3, r3, #6
 800189a:	b25b      	sxtb	r3, r3
 800189c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	4313      	orrs	r3, r2
 80018a4:	b25b      	sxtb	r3, r3
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b54      	ldr	r3, [pc, #336]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80018aa:	719a      	strb	r2, [r3, #6]
		Tx_data[6] |= (flag_trip_unbalance&0x01)<<7;
 80018ac:	4b53      	ldr	r3, [pc, #332]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80018ae:	799b      	ldrb	r3, [r3, #6]
 80018b0:	b25a      	sxtb	r2, r3
 80018b2:	4b5a      	ldr	r3, [pc, #360]	; (8001a1c <BMS_CAN_Tx+0x4dc>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	01db      	lsls	r3, r3, #7
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	4313      	orrs	r3, r2
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b4e      	ldr	r3, [pc, #312]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80018c2:	719a      	strb	r2, [r3, #6]

		Tx_data[7] =  (flag_trip_undervoltage&0x01);
 80018c4:	4b56      	ldr	r3, [pc, #344]	; (8001a20 <BMS_CAN_Tx+0x4e0>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80018d0:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (flag_trip_overvoltage&0x01)<<1;
 80018d2:	4b4a      	ldr	r3, [pc, #296]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80018d4:	79db      	ldrb	r3, [r3, #7]
 80018d6:	b25a      	sxtb	r2, r3
 80018d8:	4b52      	ldr	r3, [pc, #328]	; (8001a24 <BMS_CAN_Tx+0x4e4>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	b25b      	sxtb	r3, r3
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b43      	ldr	r3, [pc, #268]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80018ee:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (flag_trip_SOCOverDischarge&0x01)<<2;
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80018f2:	79db      	ldrb	r3, [r3, #7]
 80018f4:	b25a      	sxtb	r2, r3
 80018f6:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <BMS_CAN_Tx+0x4e8>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	b25b      	sxtb	r3, r3
 8001904:	4313      	orrs	r3, r2
 8001906:	b25b      	sxtb	r3, r3
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 800190c:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (flag_trip_systemfailure&0x01)<<3;
 800190e:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 8001910:	79db      	ldrb	r3, [r3, #7]
 8001912:	b25a      	sxtb	r2, r3
 8001914:	4b45      	ldr	r3, [pc, #276]	; (8001a2c <BMS_CAN_Tx+0x4ec>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	b25b      	sxtb	r3, r3
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	b25b      	sxtb	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	b25b      	sxtb	r3, r3
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b34      	ldr	r3, [pc, #208]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 800192a:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (charge_state&0x01)<<4;
 800192c:	4b33      	ldr	r3, [pc, #204]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 800192e:	79db      	ldrb	r3, [r3, #7]
 8001930:	b25a      	sxtb	r2, r3
 8001932:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <BMS_CAN_Tx+0x4f0>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	b25b      	sxtb	r3, r3
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	b25b      	sxtb	r3, r3
 8001940:	4313      	orrs	r3, r2
 8001942:	b25b      	sxtb	r3, r3
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 8001948:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (discharge_state&0x01)<<5;
 800194a:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 800194c:	79db      	ldrb	r3, [r3, #7]
 800194e:	b25a      	sxtb	r2, r3
 8001950:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <BMS_CAN_Tx+0x4f4>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	015b      	lsls	r3, r3, #5
 8001956:	b25b      	sxtb	r3, r3
 8001958:	f003 0320 	and.w	r3, r3, #32
 800195c:	b25b      	sxtb	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b25b      	sxtb	r3, r3
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 8001966:	71da      	strb	r2, [r3, #7]
		Tx_data[7] |= (sleep_state&0x01)<<6;
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 800196a:	79db      	ldrb	r3, [r3, #7]
 800196c:	b25a      	sxtb	r2, r3
 800196e:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <BMS_CAN_Tx+0x4f8>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	019b      	lsls	r3, r3, #6
 8001974:	b25b      	sxtb	r3, r3
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	b25b      	sxtb	r3, r3
 800197c:	4313      	orrs	r3, r2
 800197e:	b25b      	sxtb	r3, r3
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 8001984:	71da      	strb	r2, [r3, #7]

		//CAN Tx message #2
		Tx_Header.DLC = 8;
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <BMS_CAN_Tx+0x4b0>)
 8001988:	2208      	movs	r2, #8
 800198a:	611a      	str	r2, [r3, #16]
		uint32_t delay_TICK2 = HAL_GetTick();
 800198c:	f004 ffd6 	bl	800693c <HAL_GetTick>
 8001990:	6038      	str	r0, [r7, #0]
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8001992:	e008      	b.n	80019a6 <BMS_CAN_Tx+0x466>
			if(HAL_GetTick() - delay_TICK2 > 3000)
 8001994:	f004 ffd2 	bl	800693c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d806      	bhi.n	80019b4 <BMS_CAN_Tx+0x474>
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80019a6:	4825      	ldr	r0, [pc, #148]	; (8001a3c <BMS_CAN_Tx+0x4fc>)
 80019a8:	f005 fed6 	bl	8007758 <HAL_CAN_GetTxMailboxesFreeLevel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <BMS_CAN_Tx+0x454>
 80019b2:	e000      	b.n	80019b6 <BMS_CAN_Tx+0x476>
				break;
 80019b4:	bf00      	nop
		}

		if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <BMS_CAN_Tx+0x500>)
 80019b8:	4a10      	ldr	r2, [pc, #64]	; (80019fc <BMS_CAN_Tx+0x4bc>)
 80019ba:	490d      	ldr	r1, [pc, #52]	; (80019f0 <BMS_CAN_Tx+0x4b0>)
 80019bc:	481f      	ldr	r0, [pc, #124]	; (8001a3c <BMS_CAN_Tx+0x4fc>)
 80019be:	f005 fdad 	bl	800751c <HAL_CAN_AddTxMessage>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <BMS_CAN_Tx+0x498>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <BMS_CAN_Tx+0x500>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	481b      	ldr	r0, [pc, #108]	; (8001a3c <BMS_CAN_Tx+0x4fc>)
 80019d0:	f005 fe7e 	bl	80076d0 <HAL_CAN_AbortTxRequest>
			Error_Handler();
 80019d4:	f001 fa4c 	bl	8002e70 <Error_Handler>
		}
		i=1000;
 80019d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019dc:	60fb      	str	r3, [r7, #12]
		while(i>1) i--;
 80019de:	e002      	b.n	80019e6 <BMS_CAN_Tx+0x4a6>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	dcf9      	bgt.n	80019e0 <BMS_CAN_Tx+0x4a0>
			i=1000;
			while(i>1) i--;
			Delay_Charger=0;
		}
	}
}
 80019ec:	e079      	b.n	8001ae2 <BMS_CAN_Tx+0x5a2>
 80019ee:	bf00      	nop
 80019f0:	2000078c 	.word	0x2000078c
 80019f4:	0b1bbbb1 	.word	0x0b1bbbb1
 80019f8:	200007a4 	.word	0x200007a4
 80019fc:	200006c8 	.word	0x200006c8
 8001a00:	200006b8 	.word	0x200006b8
 8001a04:	200006e4 	.word	0x200006e4
 8001a08:	20000c82 	.word	0x20000c82
 8001a0c:	200010c0 	.word	0x200010c0
 8001a10:	200010dc 	.word	0x200010dc
 8001a14:	20001088 	.word	0x20001088
 8001a18:	200010b0 	.word	0x200010b0
 8001a1c:	20000c80 	.word	0x20000c80
 8001a20:	200010b1 	.word	0x200010b1
 8001a24:	200014f5 	.word	0x200014f5
 8001a28:	200010e4 	.word	0x200010e4
 8001a2c:	20001070 	.word	0x20001070
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000001 	.word	0x20000001
 8001a38:	20000284 	.word	0x20000284
 8001a3c:	20000824 	.word	0x20000824
 8001a40:	20000770 	.word	0x20000770
		Delay_Charger+=1;
 8001a44:	4b29      	ldr	r3, [pc, #164]	; (8001aec <BMS_CAN_Tx+0x5ac>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <BMS_CAN_Tx+0x5ac>)
 8001a4e:	701a      	strb	r2, [r3, #0]
		if(Handshaking == 0 && identified == 0 && Delay_Charger >= 50){
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <BMS_CAN_Tx+0x5b0>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d144      	bne.n	8001ae2 <BMS_CAN_Tx+0x5a2>
 8001a58:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <BMS_CAN_Tx+0x5b4>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d140      	bne.n	8001ae2 <BMS_CAN_Tx+0x5a2>
 8001a60:	4b22      	ldr	r3, [pc, #136]	; (8001aec <BMS_CAN_Tx+0x5ac>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b31      	cmp	r3, #49	; 0x31
 8001a66:	d93c      	bls.n	8001ae2 <BMS_CAN_Tx+0x5a2>
			Tx_Header.ExtId = (0x0E0<<20|UNIQUE_Code); //b7
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <BMS_CAN_Tx+0x5b8>)
 8001a6a:	4a24      	ldr	r2, [pc, #144]	; (8001afc <BMS_CAN_Tx+0x5bc>)
 8001a6c:	605a      	str	r2, [r3, #4]
			Tx_data[0] = 0;
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <BMS_CAN_Tx+0x5c0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
			Tx_data[1] = 0;
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <BMS_CAN_Tx+0x5c0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	705a      	strb	r2, [r3, #1]
			Tx_data[2] = 0;
 8001a7a:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <BMS_CAN_Tx+0x5c0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	709a      	strb	r2, [r3, #2]
			Tx_data[3] = 0;
 8001a80:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <BMS_CAN_Tx+0x5c0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	70da      	strb	r2, [r3, #3]
			Tx_data[4] = 0;
 8001a86:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <BMS_CAN_Tx+0x5c0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	711a      	strb	r2, [r3, #4]
			Tx_data[5] = 0;
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <BMS_CAN_Tx+0x5c0>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	715a      	strb	r2, [r3, #5]
			Tx_data[6] = 0x55;
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <BMS_CAN_Tx+0x5c0>)
 8001a94:	2255      	movs	r2, #85	; 0x55
 8001a96:	719a      	strb	r2, [r3, #6]
			Tx_data[7] = 0;
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <BMS_CAN_Tx+0x5c0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	71da      	strb	r2, [r3, #7]
			Tx_Header.DLC = 8;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <BMS_CAN_Tx+0x5b8>)
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	611a      	str	r2, [r3, #16]
			while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8001aa4:	bf00      	nop
 8001aa6:	4817      	ldr	r0, [pc, #92]	; (8001b04 <BMS_CAN_Tx+0x5c4>)
 8001aa8:	f005 fe56 	bl	8007758 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f9      	beq.n	8001aa6 <BMS_CAN_Tx+0x566>
			if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <BMS_CAN_Tx+0x5c8>)
 8001ab4:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <BMS_CAN_Tx+0x5c0>)
 8001ab6:	4910      	ldr	r1, [pc, #64]	; (8001af8 <BMS_CAN_Tx+0x5b8>)
 8001ab8:	4812      	ldr	r0, [pc, #72]	; (8001b04 <BMS_CAN_Tx+0x5c4>)
 8001aba:	f005 fd2f 	bl	800751c <HAL_CAN_AddTxMessage>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <BMS_CAN_Tx+0x588>
 8001ac4:	f001 f9d4 	bl	8002e70 <Error_Handler>
			i=1000;
 8001ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001acc:	60fb      	str	r3, [r7, #12]
			while(i>1) i--;
 8001ace:	e002      	b.n	8001ad6 <BMS_CAN_Tx+0x596>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	dcf9      	bgt.n	8001ad0 <BMS_CAN_Tx+0x590>
			Delay_Charger=0;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <BMS_CAN_Tx+0x5ac>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000287 	.word	0x20000287
 8001af0:	20000285 	.word	0x20000285
 8001af4:	20000286 	.word	0x20000286
 8001af8:	2000078c 	.word	0x2000078c
 8001afc:	0e0bbbb1 	.word	0x0e0bbbb1
 8001b00:	200006c8 	.word	0x200006c8
 8001b04:	20000824 	.word	0x20000824
 8001b08:	20000770 	.word	0x20000770

08001b0c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rx_Header, Rx_data)== HAL_OK){
 8001b14:	4b8f      	ldr	r3, [pc, #572]	; (8001d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001b16:	4a90      	ldr	r2, [pc, #576]	; (8001d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f005 fe50 	bl	80077c0 <HAL_CAN_GetRxMessage>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 8107 	bne.w	8001d36 <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001b28:	2110      	movs	r1, #16
 8001b2a:	488c      	ldr	r0, [pc, #560]	; (8001d5c <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8001b2c:	f006 fe47 	bl	80087be <HAL_GPIO_TogglePin>
		int i;

		if(Rx_Header.StdId==0x0E2){	//Handshaking
 8001b30:	4b89      	ldr	r3, [pc, #548]	; (8001d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2be2      	cmp	r3, #226	; 0xe2
 8001b36:	f040 8086 	bne.w	8001c46 <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
			if(Rx_data[6]==0x55 && identified==0){
 8001b3a:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001b3c:	799b      	ldrb	r3, [r3, #6]
 8001b3e:	2b55      	cmp	r3, #85	; 0x55
 8001b40:	d155      	bne.n	8001bee <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
 8001b42:	4b87      	ldr	r3, [pc, #540]	; (8001d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d151      	bne.n	8001bee <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
				identified = 1;
 8001b4a:	4b85      	ldr	r3, [pc, #532]	; (8001d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
				Tx_Header.DLC = 8;
 8001b50:	4b84      	ldr	r3, [pc, #528]	; (8001d64 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8001b52:	2208      	movs	r2, #8
 8001b54:	611a      	str	r2, [r3, #16]
				Tx_data[6] = 0xAA;
 8001b56:	4b84      	ldr	r3, [pc, #528]	; (8001d68 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001b58:	22aa      	movs	r2, #170	; 0xaa
 8001b5a:	719a      	strb	r2, [r3, #6]

				while(!HAL_CAN_GetTxMailboxesFreeLevel(hcan));
 8001b5c:	bf00      	nop
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f005 fdfa 	bl	8007758 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f9      	beq.n	8001b5e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
				if(HAL_CAN_AddTxMessage(hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8001b6a:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001b6c:	4a7e      	ldr	r2, [pc, #504]	; (8001d68 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001b6e:	497d      	ldr	r1, [pc, #500]	; (8001d64 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f005 fcd3 	bl	800751c <HAL_CAN_AddTxMessage>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 8001b7c:	f001 f978 	bl	8002e70 <Error_Handler>
				i=1000;
 8001b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b84:	60fb      	str	r3, [r7, #12]
				while(i>1) i--;
 8001b86:	e002      	b.n	8001b8e <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	dcf9      	bgt.n	8001b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>

				if(Pack_SOC < 90 && flag_Check_SOCawal != 1) {
 8001b94:	4b76      	ldr	r3, [pc, #472]	; (8001d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4976      	ldr	r1, [pc, #472]	; (8001d74 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fa70 	bl	8001080 <__aeabi_fcmplt>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
 8001ba6:	4b74      	ldr	r3, [pc, #464]	; (8001d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d009      	beq.n	8001bc2 <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
					Ready_toCharge = 1;
 8001bae:	4b73      	ldr	r3, [pc, #460]	; (8001d7c <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
					flag_Check_SOCawal = 1;
 8001bb4:	4b70      	ldr	r3, [pc, #448]	; (8001d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
					oke=9;
 8001bba:	4b71      	ldr	r3, [pc, #452]	; (8001d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8001bbc:	2209      	movs	r2, #9
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e015      	b.n	8001bee <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
				}
				else if(Pack_SOC >= 90 && flag_Check_SOCawal != 1) {
 8001bc2:	4b6b      	ldr	r3, [pc, #428]	; (8001d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	496b      	ldr	r1, [pc, #428]	; (8001d74 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fa6d 	bl	80010a8 <__aeabi_fcmpge>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00c      	beq.n	8001bee <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d008      	beq.n	8001bee <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
					Ready_toCharge = 0;
 8001bdc:	4b67      	ldr	r3, [pc, #412]	; (8001d7c <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
					flag_Check_SOCawal = 1;
 8001be2:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
					oke=8;
 8001be8:	4b65      	ldr	r3, [pc, #404]	; (8001d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8001bea:	2208      	movs	r2, #8
 8001bec:	601a      	str	r2, [r3, #0]
				}

			}

			if(Rx_data[6]==0xAA && identified==1){
 8001bee:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001bf0:	799b      	ldrb	r3, [r3, #6]
 8001bf2:	2baa      	cmp	r3, #170	; 0xaa
 8001bf4:	d127      	bne.n	8001c46 <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 8001bf6:	4b5a      	ldr	r3, [pc, #360]	; (8001d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d123      	bne.n	8001c46 <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>

				if(Ready_toCharge == 0 && flag_Check_SOCawal != 0){
 8001bfe:	4b5f      	ldr	r3, [pc, #380]	; (8001d7c <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d115      	bne.n	8001c32 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
 8001c06:	4b5c      	ldr	r3, [pc, #368]	; (8001d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d011      	beq.n	8001c32 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
					if(Pack_SOC < 70){
 8001c0e:	4b58      	ldr	r3, [pc, #352]	; (8001d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	495c      	ldr	r1, [pc, #368]	; (8001d84 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fa33 	bl	8001080 <__aeabi_fcmplt>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
						Ready_toCharge = 1;
 8001c20:	4b56      	ldr	r3, [pc, #344]	; (8001d7c <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
						oke=10;
 8001c26:	4b56      	ldr	r3, [pc, #344]	; (8001d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8001c28:	220a      	movs	r2, #10
 8001c2a:	601a      	str	r2, [r3, #0]
					}
					oke=12;
 8001c2c:	4b54      	ldr	r3, [pc, #336]	; (8001d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	601a      	str	r2, [r3, #0]
				}
				Handshaking = 1;
 8001c32:	4b55      	ldr	r3, [pc, #340]	; (8001d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
				if(Ready_toCharge == 1) BMS_mode = 2;
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d102      	bne.n	8001c46 <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 8001c40:	4b52      	ldr	r3, [pc, #328]	; (8001d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8001c42:	2202      	movs	r2, #2
 8001c44:	701a      	strb	r2, [r3, #0]
			}
		}

		if(Rx_Header.StdId==0x1B2 && Handshaking == 0){	//activate BMS
 8001c46:	4b44      	ldr	r3, [pc, #272]	; (8001d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
 8001c4e:	d131      	bne.n	8001cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>
 8001c50:	4b4d      	ldr	r3, [pc, #308]	; (8001d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d12d      	bne.n	8001cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>

			if((Rx_data[0]&0x01) == 1)  //without handshake
 8001c58:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d014      	beq.n	8001c8e <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
			{
				oke=3;
 8001c64:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8001c66:	2203      	movs	r2, #3
 8001c68:	601a      	str	r2, [r3, #0]
				flag_start_shutdown=1;
 8001c6a:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
				BMS_mode=(Rx_data[0]>>1)&0x03;
 8001c70:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	085b      	lsrs	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8001c80:	701a      	strb	r2, [r3, #0]
				Handshaking=1; identified=1;
 8001c82:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	4b35      	ldr	r3, [pc, #212]	; (8001d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]
			}

			if((Rx_data[7]&0x01) == 1 && Rx_data[1]==0) //with hs
 8001c8e:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001c90:	79db      	ldrb	r3, [r3, #7]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00c      	beq.n	8001cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>
 8001c9a:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d108      	bne.n	8001cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>
			{
				flag_start_shutdown=1;
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
				BMS_mode=0;
 8001ca8:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
				oke=1;
 8001cae:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
			}
		}

		if(Rx_Header.ExtId == ((0x1B2<<20)|UNIQUE_Code) && Handshaking == 1 ){
 8001cb4:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4a36      	ldr	r2, [pc, #216]	; (8001d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d13b      	bne.n	8001d36 <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
 8001cbe:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d137      	bne.n	8001d36 <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
			if(Rx_data[0]==0 && Rx_data[7]==0) {
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d118      	bne.n	8001d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
 8001cce:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001cd0:	79db      	ldrb	r3, [r3, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d114      	bne.n	8001d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
				oke=2;
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8001cd8:	2202      	movs	r2, #2
 8001cda:	601a      	str	r2, [r3, #0]
				Rx_Header.ExtId = 0;
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
				Handshaking=0;
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
				identified=0;
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
				flag_start_shutdown=0;
 8001cee:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
				BMS_mode=0;
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
				BATT_State=STATE_STANDBY;
 8001cfa:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
			}

			Rx_Header.StdId=0;
 8001d00:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
			Clear_Trip_overcurrentdischarge=(Rx_data[0]>>3)&&0x01;
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	08db      	lsrs	r3, r3, #3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	bf14      	ite	ne
 8001d12:	2301      	movne	r3, #1
 8001d14:	2300      	moveq	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001d1c:	701a      	strb	r2, [r3, #0]
			Clear_Trip_undervoltage=(Rx_data[0]>>4)&&0x01;
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	bf14      	ite	ne
 8001d2a:	2301      	movne	r3, #1
 8001d2c:	2300      	moveq	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001d34:	701a      	strb	r2, [r3, #0]
		}
	}
	Rx_Header.ExtId = 0;
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	605a      	str	r2, [r3, #4]
	Rx_Header.StdId = 0;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
	memset(Rx_data, 0, 8*sizeof(Rx_data[0]));
 8001d42:	2208      	movs	r2, #8
 8001d44:	2100      	movs	r1, #0
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001d48:	f008 fd26 	bl	800a798 <memset>
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200006d0 	.word	0x200006d0
 8001d58:	20000754 	.word	0x20000754
 8001d5c:	40011000 	.word	0x40011000
 8001d60:	20000286 	.word	0x20000286
 8001d64:	2000078c 	.word	0x2000078c
 8001d68:	200006c8 	.word	0x200006c8
 8001d6c:	20000770 	.word	0x20000770
 8001d70:	20000bdc 	.word	0x20000bdc
 8001d74:	42b40000 	.word	0x42b40000
 8001d78:	20000289 	.word	0x20000289
 8001d7c:	20000288 	.word	0x20000288
 8001d80:	20000280 	.word	0x20000280
 8001d84:	428c0000 	.word	0x428c0000
 8001d88:	20000285 	.word	0x20000285
 8001d8c:	20000bd8 	.word	0x20000bd8
 8001d90:	2000098c 	.word	0x2000098c
 8001d94:	1b2bbbb1 	.word	0x1b2bbbb1
 8001d98:	200009a8 	.word	0x200009a8
 8001d9c:	20001098 	.word	0x20001098
 8001da0:	200010fc 	.word	0x200010fc

08001da4 <BMS_CAN_Config>:


void BMS_CAN_Config()
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af00      	add	r7, sp, #0
	/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001db2:	2301      	movs	r3, #1
 8001db4:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001db6:	2300      	movs	r3, #0
 8001db8:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001dce:	230e      	movs	r3, #14
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) Error_Handler();
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4810      	ldr	r0, [pc, #64]	; (8001e18 <BMS_CAN_Config+0x74>)
 8001dd8:	f005 fa93 	bl	8007302 <HAL_CAN_ConfigFilter>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <BMS_CAN_Config+0x42>
 8001de2:	f001 f845 	bl	8002e70 <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan) != HAL_OK) Error_Handler();
 8001de6:	480c      	ldr	r0, [pc, #48]	; (8001e18 <BMS_CAN_Config+0x74>)
 8001de8:	f005 fb54 	bl	8007494 <HAL_CAN_Start>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <BMS_CAN_Config+0x52>
 8001df2:	f001 f83d 	bl	8002e70 <Error_Handler>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001df6:	2102      	movs	r1, #2
 8001df8:	4807      	ldr	r0, [pc, #28]	; (8001e18 <BMS_CAN_Config+0x74>)
 8001dfa:	f005 fdf2 	bl	80079e2 <HAL_CAN_ActivateNotification>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <BMS_CAN_Config+0x78>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <BMS_CAN_Config+0x78>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_EXT;
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <BMS_CAN_Config+0x78>)
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	609a      	str	r2, [r3, #8]
}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	; 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000824 	.word	0x20000824
 8001e1c:	2000078c 	.word	0x2000078c

08001e20 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001e30:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <MX_ADC1_Init+0x108>)
 8001e32:	4a3e      	ldr	r2, [pc, #248]	; (8001f2c <MX_ADC1_Init+0x10c>)
 8001e34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e36:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <MX_ADC1_Init+0x108>)
 8001e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e3e:	4b3a      	ldr	r3, [pc, #232]	; (8001f28 <MX_ADC1_Init+0x108>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e44:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <MX_ADC1_Init+0x108>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e4a:	4b37      	ldr	r3, [pc, #220]	; (8001f28 <MX_ADC1_Init+0x108>)
 8001e4c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001e50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e52:	4b35      	ldr	r3, [pc, #212]	; (8001f28 <MX_ADC1_Init+0x108>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8001e58:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <MX_ADC1_Init+0x108>)
 8001e5a:	2206      	movs	r2, #6
 8001e5c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e5e:	4832      	ldr	r0, [pc, #200]	; (8001f28 <MX_ADC1_Init+0x108>)
 8001e60:	f004 fd98 	bl	8006994 <HAL_ADC_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001e6a:	f001 f801 	bl	8002e70 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001e76:	2307      	movs	r3, #7
 8001e78:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	482a      	ldr	r0, [pc, #168]	; (8001f28 <MX_ADC1_Init+0x108>)
 8001e80:	f004 ff5a 	bl	8006d38 <HAL_ADC_ConfigChannel>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e8a:	f000 fff1 	bl	8002e70 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001e8e:	2305      	movs	r3, #5
 8001e90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e92:	2302      	movs	r3, #2
 8001e94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4823      	ldr	r0, [pc, #140]	; (8001f28 <MX_ADC1_Init+0x108>)
 8001e9c:	f004 ff4c 	bl	8006d38 <HAL_ADC_ConfigChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001ea6:	f000 ffe3 	bl	8002e70 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	481c      	ldr	r0, [pc, #112]	; (8001f28 <MX_ADC1_Init+0x108>)
 8001eb8:	f004 ff3e 	bl	8006d38 <HAL_ADC_ConfigChannel>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001ec2:	f000 ffd5 	bl	8002e70 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001eca:	2304      	movs	r3, #4
 8001ecc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4815      	ldr	r0, [pc, #84]	; (8001f28 <MX_ADC1_Init+0x108>)
 8001ed4:	f004 ff30 	bl	8006d38 <HAL_ADC_ConfigChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001ede:	f000 ffc7 	bl	8002e70 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001eea:	2306      	movs	r3, #6
 8001eec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	480d      	ldr	r0, [pc, #52]	; (8001f28 <MX_ADC1_Init+0x108>)
 8001ef4:	f004 ff20 	bl	8006d38 <HAL_ADC_ConfigChannel>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001efe:	f000 ffb7 	bl	8002e70 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001f02:	2304      	movs	r3, #4
 8001f04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001f06:	2306      	movs	r3, #6
 8001f08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4806      	ldr	r0, [pc, #24]	; (8001f28 <MX_ADC1_Init+0x108>)
 8001f10:	f004 ff12 	bl	8006d38 <HAL_ADC_ConfigChannel>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001f1a:	f000 ffa9 	bl	8002e70 <Error_Handler>
  }

}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200007b0 	.word	0x200007b0
 8001f2c:	40012400 	.word	0x40012400

08001f30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a28      	ldr	r2, [pc, #160]	; (8001fec <HAL_ADC_MspInit+0xbc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d149      	bne.n	8001fe4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_ADC_MspInit+0xc0>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <HAL_ADC_MspInit+0xc0>)
 8001f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f5a:	6193      	str	r3, [r2, #24]
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_ADC_MspInit+0xc0>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_ADC_MspInit+0xc0>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	4a20      	ldr	r2, [pc, #128]	; (8001ff0 <HAL_ADC_MspInit+0xc0>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	6193      	str	r3, [r2, #24]
 8001f74:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <HAL_ADC_MspInit+0xc0>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001f80:	233f      	movs	r3, #63	; 0x3f
 8001f82:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f84:	2303      	movs	r3, #3
 8001f86:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f107 0310 	add.w	r3, r7, #16
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <HAL_ADC_MspInit+0xc4>)
 8001f90:	f006 fa8c 	bl	80084ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_ADC_MspInit+0xc8>)
 8001f96:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <HAL_ADC_MspInit+0xcc>)
 8001f98:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <HAL_ADC_MspInit+0xc8>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_ADC_MspInit+0xc8>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_ADC_MspInit+0xc8>)
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_ADC_MspInit+0xc8>)
 8001fae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fb2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fb4:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_ADC_MspInit+0xc8>)
 8001fb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_ADC_MspInit+0xc8>)
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_ADC_MspInit+0xc8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fc8:	480b      	ldr	r0, [pc, #44]	; (8001ff8 <HAL_ADC_MspInit+0xc8>)
 8001fca:	f006 f85b 	bl	8008084 <HAL_DMA_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001fd4:	f000 ff4c 	bl	8002e70 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <HAL_ADC_MspInit+0xc8>)
 8001fdc:	621a      	str	r2, [r3, #32]
 8001fde:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <HAL_ADC_MspInit+0xc8>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3720      	adds	r7, #32
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40012400 	.word	0x40012400
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40010800 	.word	0x40010800
 8001ff8:	200007e0 	.word	0x200007e0
 8001ffc:	40020008 	.word	0x40020008

08002000 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 8002004:	4b17      	ldr	r3, [pc, #92]	; (8002064 <MX_CAN_Init+0x64>)
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <MX_CAN_Init+0x68>)
 8002008:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <MX_CAN_Init+0x64>)
 800200c:	2208      	movs	r2, #8
 800200e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002010:	4b14      	ldr	r3, [pc, #80]	; (8002064 <MX_CAN_Init+0x64>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <MX_CAN_Init+0x64>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_CAN_Init+0x64>)
 800201e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002022:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <MX_CAN_Init+0x64>)
 8002026:	2200      	movs	r2, #0
 8002028:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_CAN_Init+0x64>)
 800202c:	2200      	movs	r2, #0
 800202e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <MX_CAN_Init+0x64>)
 8002032:	2200      	movs	r2, #0
 8002034:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <MX_CAN_Init+0x64>)
 8002038:	2200      	movs	r2, #0
 800203a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_CAN_Init+0x64>)
 800203e:	2200      	movs	r2, #0
 8002040:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <MX_CAN_Init+0x64>)
 8002044:	2200      	movs	r2, #0
 8002046:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_CAN_Init+0x64>)
 800204a:	2200      	movs	r2, #0
 800204c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_CAN_Init+0x64>)
 8002050:	f005 f85c 	bl	800710c <HAL_CAN_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800205a:	f000 ff09 	bl	8002e70 <Error_Handler>
  }

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000824 	.word	0x20000824
 8002068:	40006400 	.word	0x40006400

0800206c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	; 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a29      	ldr	r2, [pc, #164]	; (800212c <HAL_CAN_MspInit+0xc0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d14b      	bne.n	8002124 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800208c:	4b28      	ldr	r3, [pc, #160]	; (8002130 <HAL_CAN_MspInit+0xc4>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	4a27      	ldr	r2, [pc, #156]	; (8002130 <HAL_CAN_MspInit+0xc4>)
 8002092:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002096:	61d3      	str	r3, [r2, #28]
 8002098:	4b25      	ldr	r3, [pc, #148]	; (8002130 <HAL_CAN_MspInit+0xc4>)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a4:	4b22      	ldr	r3, [pc, #136]	; (8002130 <HAL_CAN_MspInit+0xc4>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a21      	ldr	r2, [pc, #132]	; (8002130 <HAL_CAN_MspInit+0xc4>)
 80020aa:	f043 0308 	orr.w	r3, r3, #8
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <HAL_CAN_MspInit+0xc4>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4818      	ldr	r0, [pc, #96]	; (8002134 <HAL_CAN_MspInit+0xc8>)
 80020d2:	f006 f9eb 	bl	80084ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	4812      	ldr	r0, [pc, #72]	; (8002134 <HAL_CAN_MspInit+0xc8>)
 80020ec:	f006 f9de 	bl	80084ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_CAN_MspInit+0xcc>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_CAN_MspInit+0xcc>)
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002114:	2200      	movs	r2, #0
 8002116:	2100      	movs	r1, #0
 8002118:	2014      	movs	r0, #20
 800211a:	f005 ff7c 	bl	8008016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800211e:	2014      	movs	r0, #20
 8002120:	f005 ff95 	bl	800804e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002124:	bf00      	nop
 8002126:	3728      	adds	r7, #40	; 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40006400 	.word	0x40006400
 8002130:	40021000 	.word	0x40021000
 8002134:	40010c00 	.word	0x40010c00
 8002138:	40010000 	.word	0x40010000

0800213c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <MX_DMA_Init+0x38>)
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <MX_DMA_Init+0x38>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6153      	str	r3, [r2, #20]
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <MX_DMA_Init+0x38>)
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	200b      	movs	r0, #11
 8002160:	f005 ff59 	bl	8008016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002164:	200b      	movs	r0, #11
 8002166:	f005 ff72 	bl	800804e <HAL_NVIC_EnableIRQ>

}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000

08002178 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217e:	f107 0310 	add.w	r3, r7, #16
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800218c:	4b3f      	ldr	r3, [pc, #252]	; (800228c <MX_GPIO_Init+0x114>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	4a3e      	ldr	r2, [pc, #248]	; (800228c <MX_GPIO_Init+0x114>)
 8002192:	f043 0310 	orr.w	r3, r3, #16
 8002196:	6193      	str	r3, [r2, #24]
 8002198:	4b3c      	ldr	r3, [pc, #240]	; (800228c <MX_GPIO_Init+0x114>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a4:	4b39      	ldr	r3, [pc, #228]	; (800228c <MX_GPIO_Init+0x114>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4a38      	ldr	r2, [pc, #224]	; (800228c <MX_GPIO_Init+0x114>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6193      	str	r3, [r2, #24]
 80021b0:	4b36      	ldr	r3, [pc, #216]	; (800228c <MX_GPIO_Init+0x114>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021bc:	4b33      	ldr	r3, [pc, #204]	; (800228c <MX_GPIO_Init+0x114>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	4a32      	ldr	r2, [pc, #200]	; (800228c <MX_GPIO_Init+0x114>)
 80021c2:	f043 0308 	orr.w	r3, r3, #8
 80021c6:	6193      	str	r3, [r2, #24]
 80021c8:	4b30      	ldr	r3, [pc, #192]	; (800228c <MX_GPIO_Init+0x114>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZ_Pin|LED_Pin|GPIO_PIN_5|BAT_CUT_N_Pin, GPIO_PIN_RESET);
 80021d4:	2200      	movs	r2, #0
 80021d6:	f44f 710d 	mov.w	r1, #564	; 0x234
 80021da:	482d      	ldr	r0, [pc, #180]	; (8002290 <MX_GPIO_Init+0x118>)
 80021dc:	f006 fad7 	bl	800878e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_SPI1_Pin|GPIO_PIN_1|MEM_WP_Pin, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	f241 0103 	movw	r1, #4099	; 0x1003
 80021e6:	482b      	ldr	r0, [pc, #172]	; (8002294 <MX_GPIO_Init+0x11c>)
 80021e8:	f006 fad1 	bl	800878e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAT_CUT_P_GPIO_Port, BAT_CUT_P_Pin, GPIO_PIN_RESET);
 80021ec:	2200      	movs	r2, #0
 80021ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021f2:	4829      	ldr	r0, [pc, #164]	; (8002298 <MX_GPIO_Init+0x120>)
 80021f4:	f006 facb 	bl	800878e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIP1_Pin|DIP2_Pin;
 80021f8:	2303      	movs	r3, #3
 80021fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002200:	2302      	movs	r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	4619      	mov	r1, r3
 800220a:	4821      	ldr	r0, [pc, #132]	; (8002290 <MX_GPIO_Init+0x118>)
 800220c:	f006 f94e 	bl	80084ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PC5 PCPin */
  GPIO_InitStruct.Pin = BUZZ_Pin|LED_Pin|GPIO_PIN_5|BAT_CUT_N_Pin;
 8002210:	f44f 730d 	mov.w	r3, #564	; 0x234
 8002214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002216:	2301      	movs	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2302      	movs	r3, #2
 8002220:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002222:	f107 0310 	add.w	r3, r7, #16
 8002226:	4619      	mov	r1, r3
 8002228:	4819      	ldr	r0, [pc, #100]	; (8002290 <MX_GPIO_Init+0x118>)
 800222a:	f006 f93f 	bl	80084ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB1 PBPin */
  GPIO_InitStruct.Pin = CS_SPI1_Pin|GPIO_PIN_1|MEM_WP_Pin;
 800222e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002234:	2301      	movs	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2302      	movs	r3, #2
 800223e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	4619      	mov	r1, r3
 8002246:	4813      	ldr	r0, [pc, #76]	; (8002294 <MX_GPIO_Init+0x11c>)
 8002248:	f006 f930 	bl	80084ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800224c:	2304      	movs	r3, #4
 800224e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	4619      	mov	r1, r3
 800225e:	480d      	ldr	r0, [pc, #52]	; (8002294 <MX_GPIO_Init+0x11c>)
 8002260:	f006 f924 	bl	80084ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BAT_CUT_P_Pin;
 8002264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226a:	2301      	movs	r3, #1
 800226c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2302      	movs	r3, #2
 8002274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAT_CUT_P_GPIO_Port, &GPIO_InitStruct);
 8002276:	f107 0310 	add.w	r3, r7, #16
 800227a:	4619      	mov	r1, r3
 800227c:	4806      	ldr	r0, [pc, #24]	; (8002298 <MX_GPIO_Init+0x120>)
 800227e:	f006 f915 	bl	80084ac <HAL_GPIO_Init>

}
 8002282:	bf00      	nop
 8002284:	3720      	adds	r7, #32
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	40011000 	.word	0x40011000
 8002294:	40010c00 	.word	0x40010c00
 8002298:	40010800 	.word	0x40010800

0800229c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <MX_I2C1_Init+0x50>)
 80022a2:	4a13      	ldr	r2, [pc, #76]	; (80022f0 <MX_I2C1_Init+0x54>)
 80022a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <MX_I2C1_Init+0x50>)
 80022a8:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <MX_I2C1_Init+0x58>)
 80022aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <MX_I2C1_Init+0x50>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <MX_I2C1_Init+0x50>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <MX_I2C1_Init+0x50>)
 80022ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <MX_I2C1_Init+0x50>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <MX_I2C1_Init+0x50>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022cc:	4b07      	ldr	r3, [pc, #28]	; (80022ec <MX_I2C1_Init+0x50>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <MX_I2C1_Init+0x50>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022d8:	4804      	ldr	r0, [pc, #16]	; (80022ec <MX_I2C1_Init+0x50>)
 80022da:	f006 fa89 	bl	80087f0 <HAL_I2C_Init>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022e4:	f000 fdc4 	bl	8002e70 <Error_Handler>
  }

}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	2000084c 	.word	0x2000084c
 80022f0:	40005400 	.word	0x40005400
 80022f4:	00061a80 	.word	0x00061a80

080022f8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <MX_I2C2_Init+0x50>)
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <MX_I2C2_Init+0x54>)
 8002300:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_I2C2_Init+0x50>)
 8002304:	4a12      	ldr	r2, [pc, #72]	; (8002350 <MX_I2C2_Init+0x58>)
 8002306:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <MX_I2C2_Init+0x50>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_I2C2_Init+0x50>)
 8002310:	2200      	movs	r2, #0
 8002312:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_I2C2_Init+0x50>)
 8002316:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800231a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <MX_I2C2_Init+0x50>)
 800231e:	2200      	movs	r2, #0
 8002320:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_I2C2_Init+0x50>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <MX_I2C2_Init+0x50>)
 800232a:	2200      	movs	r2, #0
 800232c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_I2C2_Init+0x50>)
 8002330:	2200      	movs	r2, #0
 8002332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002334:	4804      	ldr	r0, [pc, #16]	; (8002348 <MX_I2C2_Init+0x50>)
 8002336:	f006 fa5b 	bl	80087f0 <HAL_I2C_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002340:	f000 fd96 	bl	8002e70 <Error_Handler>
  }

}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200008a0 	.word	0x200008a0
 800234c:	40005800 	.word	0x40005800
 8002350:	000186a0 	.word	0x000186a0

08002354 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0318 	add.w	r3, r7, #24
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a2b      	ldr	r2, [pc, #172]	; (800241c <HAL_I2C_MspInit+0xc8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d124      	bne.n	80023be <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002374:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <HAL_I2C_MspInit+0xcc>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a29      	ldr	r2, [pc, #164]	; (8002420 <HAL_I2C_MspInit+0xcc>)
 800237a:	f043 0308 	orr.w	r3, r3, #8
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b27      	ldr	r3, [pc, #156]	; (8002420 <HAL_I2C_MspInit+0xcc>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800238c:	23c0      	movs	r3, #192	; 0xc0
 800238e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002390:	2312      	movs	r3, #18
 8002392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002398:	f107 0318 	add.w	r3, r7, #24
 800239c:	4619      	mov	r1, r3
 800239e:	4821      	ldr	r0, [pc, #132]	; (8002424 <HAL_I2C_MspInit+0xd0>)
 80023a0:	f006 f884 	bl	80084ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023a4:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <HAL_I2C_MspInit+0xcc>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	4a1d      	ldr	r2, [pc, #116]	; (8002420 <HAL_I2C_MspInit+0xcc>)
 80023aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ae:	61d3      	str	r3, [r2, #28]
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_I2C_MspInit+0xcc>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80023bc:	e029      	b.n	8002412 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_I2C_MspInit+0xd4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d124      	bne.n	8002412 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_I2C_MspInit+0xcc>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4a14      	ldr	r2, [pc, #80]	; (8002420 <HAL_I2C_MspInit+0xcc>)
 80023ce:	f043 0308 	orr.w	r3, r3, #8
 80023d2:	6193      	str	r3, [r2, #24]
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_I2C_MspInit+0xcc>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023e6:	2312      	movs	r3, #18
 80023e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ee:	f107 0318 	add.w	r3, r7, #24
 80023f2:	4619      	mov	r1, r3
 80023f4:	480b      	ldr	r0, [pc, #44]	; (8002424 <HAL_I2C_MspInit+0xd0>)
 80023f6:	f006 f859 	bl	80084ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_I2C_MspInit+0xcc>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a08      	ldr	r2, [pc, #32]	; (8002420 <HAL_I2C_MspInit+0xcc>)
 8002400:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002404:	61d3      	str	r3, [r2, #28]
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_I2C_MspInit+0xcc>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	; 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40005400 	.word	0x40005400
 8002420:	40021000 	.word	0x40021000
 8002424:	40010c00 	.word	0x40010c00
 8002428:	40005800 	.word	0x40005800

0800242c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <MX_IWDG_Init+0x2c>)
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <MX_IWDG_Init+0x30>)
 8002434:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <MX_IWDG_Init+0x2c>)
 8002438:	2205      	movs	r2, #5
 800243a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <MX_IWDG_Init+0x2c>)
 800243e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002442:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002444:	4804      	ldr	r0, [pc, #16]	; (8002458 <MX_IWDG_Init+0x2c>)
 8002446:	f006 ff17 	bl	8009278 <HAL_IWDG_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002450:	f000 fd0e 	bl	8002e70 <Error_Handler>
  }

}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200008f4 	.word	0x200008f4
 800245c:	40003000 	.word	0x40003000

08002460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8002464:	f004 fa12 	bl	800688c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002468:	f000 f8f4 	bl	8002654 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //BMS_CAN_Config();
   HAL_FLASH_Unlock();
 800246c:	f005 fff8 	bl	8008460 <HAL_FLASH_Unlock>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002470:	f7ff fe82 	bl	8002178 <MX_GPIO_Init>
  MX_DMA_Init();
 8002474:	f7ff fe62 	bl	800213c <MX_DMA_Init>
  MX_ADC1_Init();
 8002478:	f7ff fcd2 	bl	8001e20 <MX_ADC1_Init>
  MX_CAN_Init();
 800247c:	f7ff fdc0 	bl	8002000 <MX_CAN_Init>
  MX_I2C1_Init();
 8002480:	f7ff ff0c 	bl	800229c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002484:	f7ff ff38 	bl	80022f8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002488:	f001 fdfa 	bl	8004080 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800248c:	f004 f8e8 	bl	8006660 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002490:	f004 f910 	bl	80066b4 <MX_USART3_UART_Init>
  MX_IWDG_Init();
 8002494:	f7ff ffca 	bl	800242c <MX_IWDG_Init>
  MX_TIM2_Init();
 8002498:	f004 f808 	bl	80064ac <MX_TIM2_Init>
  MX_TIM3_Init();
 800249c:	f004 f852 	bl	8006544 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //USART3 untuk RS485, tidak digunakan untuk BOARD v1.

  ltc6812_GPIO_Config();
 80024a0:	f000 fcec 	bl	8002e7c <ltc6812_GPIO_Config>
  ltc6812_SPIInit();
 80024a4:	f000 fd46 	bl	8002f34 <ltc6812_SPIInit>

  HAL_Delay(10);
 80024a8:	200a      	movs	r0, #10
 80024aa:	f004 fa51 	bl	8006950 <HAL_Delay>
  read_v_15cell(vcell_15data_digi, vcell_15data);
 80024ae:	495c      	ldr	r1, [pc, #368]	; (8002620 <main+0x1c0>)
 80024b0:	485c      	ldr	r0, [pc, #368]	; (8002624 <main+0x1c4>)
 80024b2:	f000 ff65 	bl	8003380 <read_v_15cell>
  for(ij=0,v_cell_tot=0;ij<15;ij++)
 80024b6:	4b5c      	ldr	r3, [pc, #368]	; (8002628 <main+0x1c8>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	4b5b      	ldr	r3, [pc, #364]	; (800262c <main+0x1cc>)
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e013      	b.n	80024ee <main+0x8e>
  {
 	v_cell_tot+=vcell_15data[ij];
 80024c6:	4b58      	ldr	r3, [pc, #352]	; (8002628 <main+0x1c8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a55      	ldr	r2, [pc, #340]	; (8002620 <main+0x1c0>)
 80024cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024d0:	4b56      	ldr	r3, [pc, #344]	; (800262c <main+0x1cc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f7fe fb2c 	bl	8000b34 <__addsf3>
 80024dc:	4603      	mov	r3, r0
 80024de:	461a      	mov	r2, r3
 80024e0:	4b52      	ldr	r3, [pc, #328]	; (800262c <main+0x1cc>)
 80024e2:	601a      	str	r2, [r3, #0]
  for(ij=0,v_cell_tot=0;ij<15;ij++)
 80024e4:	4b50      	ldr	r3, [pc, #320]	; (8002628 <main+0x1c8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	4a4f      	ldr	r2, [pc, #316]	; (8002628 <main+0x1c8>)
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b4e      	ldr	r3, [pc, #312]	; (8002628 <main+0x1c8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b0e      	cmp	r3, #14
 80024f4:	dde7      	ble.n	80024c6 <main+0x66>
  }
  HAL_Delay(10);
 80024f6:	200a      	movs	r0, #10
 80024f8:	f004 fa2a 	bl	8006950 <HAL_Delay>

  BMS_CAN_Config();
 80024fc:	f7ff fc52 	bl	8001da4 <BMS_CAN_Config>

  BMS_ON_InitBeep();
 8002500:	f000 f902 	bl	8002708 <BMS_ON_InitBeep>

  BATT_Start_Up=1;
 8002504:	4b4a      	ldr	r3, [pc, #296]	; (8002630 <main+0x1d0>)
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]

  HAL_Delay(1000);
 800250a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800250e:	f004 fa1f 	bl	8006950 <HAL_Delay>

  flag_start_shutdown=0;
 8002512:	4b48      	ldr	r3, [pc, #288]	; (8002634 <main+0x1d4>)
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(DIP1 && !DIP2)			BMS_ScreenMode_ForceBalance();		//Mode Force Balancing
 8002518:	2101      	movs	r1, #1
 800251a:	4847      	ldr	r0, [pc, #284]	; (8002638 <main+0x1d8>)
 800251c:	f006 f920 	bl	8008760 <HAL_GPIO_ReadPin>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <main+0xda>
 8002526:	2102      	movs	r1, #2
 8002528:	4843      	ldr	r0, [pc, #268]	; (8002638 <main+0x1d8>)
 800252a:	f006 f919 	bl	8008760 <HAL_GPIO_ReadPin>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <main+0xda>
 8002534:	f000 fc14 	bl	8002d60 <BMS_ScreenMode_ForceBalance>
 8002538:	e023      	b.n	8002582 <main+0x122>
	  else if(!DIP1 && DIP2) 	BMS_ScreenMode_Locked_Ship();		//Mode Shipping
 800253a:	2101      	movs	r1, #1
 800253c:	483e      	ldr	r0, [pc, #248]	; (8002638 <main+0x1d8>)
 800253e:	f006 f90f 	bl	8008760 <HAL_GPIO_ReadPin>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <main+0xfc>
 8002548:	2102      	movs	r1, #2
 800254a:	483b      	ldr	r0, [pc, #236]	; (8002638 <main+0x1d8>)
 800254c:	f006 f908 	bl	8008760 <HAL_GPIO_ReadPin>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <main+0xfc>
 8002556:	f000 fbbd 	bl	8002cd4 <BMS_ScreenMode_Locked_Ship>
 800255a:	e012      	b.n	8002582 <main+0x122>
	  else if(DIP1 && DIP2)		BMS_ScreenMode_RUN();				//MODE RUN
 800255c:	2101      	movs	r1, #1
 800255e:	4836      	ldr	r0, [pc, #216]	; (8002638 <main+0x1d8>)
 8002560:	f006 f8fe 	bl	8008760 <HAL_GPIO_ReadPin>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <main+0x11e>
 800256a:	2102      	movs	r1, #2
 800256c:	4832      	ldr	r0, [pc, #200]	; (8002638 <main+0x1d8>)
 800256e:	f006 f8f7 	bl	8008760 <HAL_GPIO_ReadPin>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <main+0x11e>
 8002578:	f000 f9a0 	bl	80028bc <BMS_ScreenMode_RUN>
 800257c:	e001      	b.n	8002582 <main+0x122>
	  else						BMS_ScreenMode_Standby();			//Mode Standby
 800257e:	f000 f96d 	bl	800285c <BMS_ScreenMode_Standby>

	  HAL_IWDG_Refresh(&hiwdg);
 8002582:	482e      	ldr	r0, [pc, #184]	; (800263c <main+0x1dc>)
 8002584:	f006 feb1 	bl	80092ea <HAL_IWDG_Refresh>
	  read_v_15cell(vcell_15data_digi, vcell_15data);
 8002588:	4925      	ldr	r1, [pc, #148]	; (8002620 <main+0x1c0>)
 800258a:	4826      	ldr	r0, [pc, #152]	; (8002624 <main+0x1c4>)
 800258c:	f000 fef8 	bl	8003380 <read_v_15cell>

	  if(flag_start_shutdown==1)
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <main+0x1d4>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d136      	bne.n	8002606 <main+0x1a6>
	  {
		  	  //Read voltage of each cell (15cell)
		  	  if(BATT_State==STATE_CHARGE)
 8002598:	4b29      	ldr	r3, [pc, #164]	; (8002640 <main+0x1e0>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d003      	beq.n	80025a8 <main+0x148>
		  	  {
		  		 // LTC681x_MUTE_UNMUTE_emul(1);
//		  		  read_v_15cell(vcell_15data_digi, vcell_15data);
		  		  //LTC681x_MUTE_UNMUTE_emul(0);
		  	  }
		  	  else read_v_15cell(vcell_15data_digi, vcell_15data);
 80025a0:	491f      	ldr	r1, [pc, #124]	; (8002620 <main+0x1c0>)
 80025a2:	4820      	ldr	r0, [pc, #128]	; (8002624 <main+0x1c4>)
 80025a4:	f000 feec 	bl	8003380 <read_v_15cell>

		  	  //Get Balancing Data
		  	  get_balance_status(vcell_15data);
 80025a8:	481d      	ldr	r0, [pc, #116]	; (8002620 <main+0x1c0>)
 80025aa:	f001 fcb5 	bl	8003f18 <get_balance_status>

		  	  // Balancing Process
		  	  if((IBATT<-0.1 && (v_cell_tot>VBATT_BALANCE_START)) || Flag_Force_Balance==1)     //arus charging 0.1 tidak perlu di balancing
 80025ae:	4b25      	ldr	r3, [pc, #148]	; (8002644 <main+0x1e4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ff38 	bl	8000428 <__aeabi_f2d>
 80025b8:	a317      	add	r3, pc, #92	; (adr r3, 8002618 <main+0x1b8>)
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	f7fe f9fd 	bl	80009bc <__aeabi_dcmplt>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <main+0x17a>
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <main+0x1cc>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	491e      	ldr	r1, [pc, #120]	; (8002648 <main+0x1e8>)
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fd74 	bl	80010bc <__aeabi_fcmpgt>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d103      	bne.n	80025e2 <main+0x182>
 80025da:	4b1c      	ldr	r3, [pc, #112]	; (800264c <main+0x1ec>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <main+0x18e>
		  	  {
		  		  LTC681x_balance_cell(balance_status);
 80025e2:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <main+0x1f0>)
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f001 fc2a 	bl	8003e40 <LTC681x_balance_cell>
 80025ec:	e005      	b.n	80025fa <main+0x19a>
		  	  }
		  	  else
		  	  {
		  			balance_status=0;
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <main+0x1f0>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	801a      	strh	r2, [r3, #0]
		  			LTC681x_balance_cell(0x0000);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f001 fc23 	bl	8003e40 <LTC681x_balance_cell>
		  	  }

		  	  //Calculate total Battery Voltage
		  	  Calc_vcell_tot();
 80025fa:	f000 fc07 	bl	8002e0c <Calc_vcell_tot>

			  //Mark that System operating
			  HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 80025fe:	2110      	movs	r1, #16
 8002600:	480d      	ldr	r0, [pc, #52]	; (8002638 <main+0x1d8>)
 8002602:	f006 f8dc 	bl	80087be <HAL_GPIO_TogglePin>
	  }

	  HAL_IWDG_Refresh(&hiwdg);
 8002606:	480d      	ldr	r0, [pc, #52]	; (800263c <main+0x1dc>)
 8002608:	f006 fe6f 	bl	80092ea <HAL_IWDG_Refresh>
	  HAL_Delay(1);
 800260c:	2001      	movs	r0, #1
 800260e:	f004 f99f 	bl	8006950 <HAL_Delay>
	  if(DIP1 && !DIP2)			BMS_ScreenMode_ForceBalance();		//Mode Force Balancing
 8002612:	e781      	b.n	8002518 <main+0xb8>
 8002614:	f3af 8000 	nop.w
 8002618:	9999999a 	.word	0x9999999a
 800261c:	bfb99999 	.word	0xbfb99999
 8002620:	20000950 	.word	0x20000950
 8002624:	20000930 	.word	0x20000930
 8002628:	20000900 	.word	0x20000900
 800262c:	20000bb4 	.word	0x20000bb4
 8002630:	2000028a 	.word	0x2000028a
 8002634:	2000098c 	.word	0x2000098c
 8002638:	40011000 	.word	0x40011000
 800263c:	200008f4 	.word	0x200008f4
 8002640:	200009a8 	.word	0x200009a8
 8002644:	200010a8 	.word	0x200010a8
 8002648:	425c0000 	.word	0x425c0000
 800264c:	20000bb8 	.word	0x20000bb8
 8002650:	20000be6 	.word	0x20000be6

08002654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b094      	sub	sp, #80	; 0x50
 8002658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800265a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800265e:	2228      	movs	r2, #40	; 0x28
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f008 f898 	bl	800a798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002684:	230a      	movs	r3, #10
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002688:	2301      	movs	r3, #1
 800268a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800268c:	2310      	movs	r3, #16
 800268e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002690:	2301      	movs	r3, #1
 8002692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002694:	2302      	movs	r3, #2
 8002696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002698:	2300      	movs	r3, #0
 800269a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800269c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80026a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a6:	4618      	mov	r0, r3
 80026a8:	f006 fe2e 	bl	8009308 <HAL_RCC_OscConfig>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80026b2:	f000 fbdd 	bl	8002e70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026b6:	230f      	movs	r3, #15
 80026b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ba:	2302      	movs	r3, #2
 80026bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026c8:	2300      	movs	r3, #0
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	2102      	movs	r1, #2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f007 f898 	bl	8009808 <HAL_RCC_ClockConfig>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80026de:	f000 fbc7 	bl	8002e70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026e2:	2302      	movs	r3, #2
 80026e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80026e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	4618      	mov	r0, r3
 80026f0:	f007 fa26 	bl	8009b40 <HAL_RCCEx_PeriphCLKConfig>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80026fa:	f000 fbb9 	bl	8002e70 <Error_Handler>
  }
}
 80026fe:	bf00      	nop
 8002700:	3750      	adds	r7, #80	; 0x50
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <BMS_ON_InitBeep>:

/* USER CODE BEGIN 4 */
void BMS_ON_InitBeep(void)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
	itoa(UNIQUE_Code, lower_UNIQUE_Code, 16);
 800270e:	2210      	movs	r2, #16
 8002710:	4945      	ldr	r1, [pc, #276]	; (8002828 <BMS_ON_InitBeep+0x120>)
 8002712:	4846      	ldr	r0, [pc, #280]	; (800282c <BMS_ON_InitBeep+0x124>)
 8002714:	f008 f81e 	bl	800a754 <itoa>
	int ii=0;
 8002718:	2300      	movs	r3, #0
 800271a:	607b      	str	r3, [r7, #4]
	while(ii<6){
 800271c:	e01c      	b.n	8002758 <BMS_ON_InitBeep+0x50>
		UPPER_UNIQUE_Code[ii] = toupper(lower_UNIQUE_Code[ii]);
 800271e:	4a42      	ldr	r2, [pc, #264]	; (8002828 <BMS_ON_InitBeep+0x120>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4413      	add	r3, r2
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	70fb      	strb	r3, [r7, #3]
 8002728:	f008 f816 	bl	800a758 <__locale_ctype_ptr>
 800272c:	4602      	mov	r2, r0
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	3301      	adds	r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d102      	bne.n	8002744 <BMS_ON_InitBeep+0x3c>
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	3b20      	subs	r3, #32
 8002742:	e000      	b.n	8002746 <BMS_ON_InitBeep+0x3e>
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	b2d9      	uxtb	r1, r3
 8002748:	4a39      	ldr	r2, [pc, #228]	; (8002830 <BMS_ON_InitBeep+0x128>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	460a      	mov	r2, r1
 8002750:	701a      	strb	r2, [r3, #0]
		ii++;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3301      	adds	r3, #1
 8002756:	607b      	str	r3, [r7, #4]
	while(ii<6){
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b05      	cmp	r3, #5
 800275c:	dddf      	ble.n	800271e <BMS_ON_InitBeep+0x16>
	}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc_val, 6);
 800275e:	2206      	movs	r2, #6
 8002760:	4934      	ldr	r1, [pc, #208]	; (8002834 <BMS_ON_InitBeep+0x12c>)
 8002762:	4835      	ldr	r0, [pc, #212]	; (8002838 <BMS_ON_InitBeep+0x130>)
 8002764:	f004 f9ee 	bl	8006b44 <HAL_ADC_Start_DMA>

	SSD1306_Init();
 8002768:	f001 fd1a 	bl	80041a0 <SSD1306_Init>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800276c:	2000      	movs	r0, #0
 800276e:	f001 fe03 	bl	8004378 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002772:	f001 fdd3 	bl	800431c <SSD1306_UpdateScreen>

	HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 8002776:	2201      	movs	r2, #1
 8002778:	2104      	movs	r1, #4
 800277a:	4830      	ldr	r0, [pc, #192]	; (800283c <BMS_ON_InitBeep+0x134>)
 800277c:	f006 f807 	bl	800878e <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002784:	f004 f8e4 	bl	8006950 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 8002788:	2104      	movs	r1, #4
 800278a:	482c      	ldr	r0, [pc, #176]	; (800283c <BMS_ON_InitBeep+0x134>)
 800278c:	f006 f817 	bl	80087be <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8002790:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002794:	f004 f8dc 	bl	8006950 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 8002798:	2104      	movs	r1, #4
 800279a:	4828      	ldr	r0, [pc, #160]	; (800283c <BMS_ON_InitBeep+0x134>)
 800279c:	f006 f80f 	bl	80087be <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80027a0:	2064      	movs	r0, #100	; 0x64
 80027a2:	f004 f8d5 	bl	8006950 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80027a6:	2104      	movs	r1, #4
 80027a8:	4824      	ldr	r0, [pc, #144]	; (800283c <BMS_ON_InitBeep+0x134>)
 80027aa:	f006 f808 	bl	80087be <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80027ae:	2064      	movs	r0, #100	; 0x64
 80027b0:	f004 f8ce 	bl	8006950 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80027b4:	2104      	movs	r1, #4
 80027b6:	4821      	ldr	r0, [pc, #132]	; (800283c <BMS_ON_InitBeep+0x134>)
 80027b8:	f006 f801 	bl	80087be <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80027bc:	2064      	movs	r0, #100	; 0x64
 80027be:	f004 f8c7 	bl	8006950 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 80027c2:	2104      	movs	r1, #4
 80027c4:	481d      	ldr	r0, [pc, #116]	; (800283c <BMS_ON_InitBeep+0x134>)
 80027c6:	f005 fffa 	bl	80087be <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80027ca:	2064      	movs	r0, #100	; 0x64
 80027cc:	f004 f8c0 	bl	8006950 <HAL_Delay>

	sprintf(pesan,"BMS - Gen.V2");
 80027d0:	4a1b      	ldr	r2, [pc, #108]	; (8002840 <BMS_ON_InitBeep+0x138>)
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <BMS_ON_InitBeep+0x13c>)
 80027d4:	4614      	mov	r4, r2
 80027d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027d8:	6020      	str	r0, [r4, #0]
 80027da:	6061      	str	r1, [r4, #4]
 80027dc:	60a2      	str	r2, [r4, #8]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	7323      	strb	r3, [r4, #12]
	SSD1306_GotoXY(5,0);
 80027e2:	2100      	movs	r1, #0
 80027e4:	2005      	movs	r0, #5
 80027e6:	f001 fe3d 	bl	8004464 <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 80027ea:	2201      	movs	r2, #1
 80027ec:	4916      	ldr	r1, [pc, #88]	; (8002848 <BMS_ON_InitBeep+0x140>)
 80027ee:	4814      	ldr	r0, [pc, #80]	; (8002840 <BMS_ON_InitBeep+0x138>)
 80027f0:	f001 fece 	bl	8004590 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80027f4:	f001 fd92 	bl	800431c <SSD1306_UpdateScreen>

	HAL_TIM_Base_Start_IT(&htim2);
 80027f8:	4814      	ldr	r0, [pc, #80]	; (800284c <BMS_ON_InitBeep+0x144>)
 80027fa:	f007 fae3 	bl	8009dc4 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 80027fe:	4814      	ldr	r0, [pc, #80]	; (8002850 <BMS_ON_InitBeep+0x148>)
 8002800:	f007 fae0 	bl	8009dc4 <HAL_TIM_Base_Start_IT>

	HAL_Delay(1000);
 8002804:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002808:	f004 f8a2 	bl	8006950 <HAL_Delay>

	BATT_State=STATE_STANDBY;
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <BMS_ON_InitBeep+0x14c>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
	Batt_Open_Mode();
 8002812:	f7fe fdc3 	bl	800139c <Batt_Open_Mode>
	AH_Total=0;
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <BMS_ON_InitBeep+0x150>)
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	601a      	str	r2, [r3, #0]


}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}
 8002826:	bf00      	nop
 8002828:	20000994 	.word	0x20000994
 800282c:	000bbbb1 	.word	0x000bbbb1
 8002830:	20000918 	.word	0x20000918
 8002834:	20000904 	.word	0x20000904
 8002838:	200007b0 	.word	0x200007b0
 800283c:	40011000 	.word	0x40011000
 8002840:	20000bbc 	.word	0x20000bbc
 8002844:	0800cd08 	.word	0x0800cd08
 8002848:	20000008 	.word	0x20000008
 800284c:	20001540 	.word	0x20001540
 8002850:	20001500 	.word	0x20001500
 8002854:	200009a8 	.word	0x200009a8
 8002858:	20000698 	.word	0x20000698

0800285c <BMS_ScreenMode_Standby>:

void BMS_ScreenMode_Standby(void)
{
 800285c:	b598      	push	{r3, r4, r7, lr}
 800285e:	af00      	add	r7, sp, #0
	 Flag_Battery_Locked_for_Ship=0;
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <BMS_ScreenMode_Standby+0x4c>)
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
	 Flag_Force_Balance=0;
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <BMS_ScreenMode_Standby+0x50>)
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]


	 SSD1306_Fill(SSD1306_COLOR_BLACK);
 800286c:	2000      	movs	r0, #0
 800286e:	f001 fd83 	bl	8004378 <SSD1306_Fill>
	 sprintf(pesan,"BMS - Gen.V2");
 8002872:	4a0f      	ldr	r2, [pc, #60]	; (80028b0 <BMS_ScreenMode_Standby+0x54>)
 8002874:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <BMS_ScreenMode_Standby+0x58>)
 8002876:	4614      	mov	r4, r2
 8002878:	cb07      	ldmia	r3!, {r0, r1, r2}
 800287a:	6020      	str	r0, [r4, #0]
 800287c:	6061      	str	r1, [r4, #4]
 800287e:	60a2      	str	r2, [r4, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	7323      	strb	r3, [r4, #12]
	 SSD1306_GotoXY(20,28);
 8002884:	211c      	movs	r1, #28
 8002886:	2014      	movs	r0, #20
 8002888:	f001 fdec 	bl	8004464 <SSD1306_GotoXY>
	 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 800288c:	2201      	movs	r2, #1
 800288e:	490a      	ldr	r1, [pc, #40]	; (80028b8 <BMS_ScreenMode_Standby+0x5c>)
 8002890:	4807      	ldr	r0, [pc, #28]	; (80028b0 <BMS_ScreenMode_Standby+0x54>)
 8002892:	f001 fe7d 	bl	8004590 <SSD1306_Puts>
	 SSD1306_UpdateScreen();
 8002896:	f001 fd41 	bl	800431c <SSD1306_UpdateScreen>
	 Batt_Open_Mode();
 800289a:	f7fe fd7f 	bl	800139c <Batt_Open_Mode>

	 HAL_Delay(1);
 800289e:	2001      	movs	r0, #1
 80028a0:	f004 f856 	bl	8006950 <HAL_Delay>
}
 80028a4:	bf00      	nop
 80028a6:	bd98      	pop	{r3, r4, r7, pc}
 80028a8:	2000092c 	.word	0x2000092c
 80028ac:	20000bb8 	.word	0x20000bb8
 80028b0:	20000bbc 	.word	0x20000bbc
 80028b4:	0800cd08 	.word	0x0800cd08
 80028b8:	20000008 	.word	0x20000008

080028bc <BMS_ScreenMode_RUN>:

void BMS_ScreenMode_RUN(void)
{
 80028bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c0:	b087      	sub	sp, #28
 80028c2:	af06      	add	r7, sp, #24
	Flag_Battery_Locked_for_Ship=0;
 80028c4:	4b55      	ldr	r3, [pc, #340]	; (8002a1c <BMS_ScreenMode_RUN+0x160>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
	Flag_Force_Balance=0;
 80028ca:	4b55      	ldr	r3, [pc, #340]	; (8002a20 <BMS_ScreenMode_RUN+0x164>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]

	if(flag_start_shutdown==0)
 80028d0:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <BMS_ScreenMode_RUN+0x168>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d158      	bne.n	800298a <BMS_ScreenMode_RUN+0xce>
	{
		 SSD1306_Fill(SSD1306_COLOR_BLACK);
 80028d8:	2000      	movs	r0, #0
 80028da:	f001 fd4d 	bl	8004378 <SSD1306_Fill>
			 sprintf(pesan,"BMS - Gen.V2 - RUN");
 80028de:	4a52      	ldr	r2, [pc, #328]	; (8002a28 <BMS_ScreenMode_RUN+0x16c>)
 80028e0:	4b52      	ldr	r3, [pc, #328]	; (8002a2c <BMS_ScreenMode_RUN+0x170>)
 80028e2:	4615      	mov	r5, r2
 80028e4:	461c      	mov	r4, r3
 80028e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e8:	6028      	str	r0, [r5, #0]
 80028ea:	6069      	str	r1, [r5, #4]
 80028ec:	60aa      	str	r2, [r5, #8]
 80028ee:	60eb      	str	r3, [r5, #12]
 80028f0:	8823      	ldrh	r3, [r4, #0]
 80028f2:	78a2      	ldrb	r2, [r4, #2]
 80028f4:	822b      	strh	r3, [r5, #16]
 80028f6:	4613      	mov	r3, r2
 80028f8:	74ab      	strb	r3, [r5, #18]
			 SSD1306_GotoXY(0,18);
 80028fa:	2112      	movs	r1, #18
 80028fc:	2000      	movs	r0, #0
 80028fe:	f001 fdb1 	bl	8004464 <SSD1306_GotoXY>
			 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002902:	2201      	movs	r2, #1
 8002904:	494a      	ldr	r1, [pc, #296]	; (8002a30 <BMS_ScreenMode_RUN+0x174>)
 8002906:	4848      	ldr	r0, [pc, #288]	; (8002a28 <BMS_ScreenMode_RUN+0x16c>)
 8002908:	f001 fe42 	bl	8004590 <SSD1306_Puts>

			 sprintf(pesan,"SLEEP_STATE");
 800290c:	4a46      	ldr	r2, [pc, #280]	; (8002a28 <BMS_ScreenMode_RUN+0x16c>)
 800290e:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <BMS_ScreenMode_RUN+0x178>)
 8002910:	4614      	mov	r4, r2
 8002912:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002914:	6020      	str	r0, [r4, #0]
 8002916:	6061      	str	r1, [r4, #4]
 8002918:	60a2      	str	r2, [r4, #8]
			 SSD1306_GotoXY(0,38);
 800291a:	2126      	movs	r1, #38	; 0x26
 800291c:	2000      	movs	r0, #0
 800291e:	f001 fda1 	bl	8004464 <SSD1306_GotoXY>
			 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002922:	2201      	movs	r2, #1
 8002924:	4942      	ldr	r1, [pc, #264]	; (8002a30 <BMS_ScreenMode_RUN+0x174>)
 8002926:	4840      	ldr	r0, [pc, #256]	; (8002a28 <BMS_ScreenMode_RUN+0x16c>)
 8002928:	f001 fe32 	bl	8004590 <SSD1306_Puts>
			 SSD1306_UpdateScreen();
 800292c:	f001 fcf6 	bl	800431c <SSD1306_UpdateScreen>
			 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002930:	2200      	movs	r2, #0
 8002932:	2110      	movs	r1, #16
 8002934:	4840      	ldr	r0, [pc, #256]	; (8002a38 <BMS_ScreenMode_RUN+0x17c>)
 8002936:	f005 ff2a 	bl	800878e <HAL_GPIO_WritePin>
			 Batt_Open_Mode();
 800293a:	f7fe fd2f 	bl	800139c <Batt_Open_Mode>
			 flag_trip_overtemperature=OFF;
 800293e:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <BMS_ScreenMode_RUN+0x180>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
			 flag_trip_undertemperature=OFF;
 8002944:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <BMS_ScreenMode_RUN+0x184>)
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
			 flag_trip_SOCOverDischarge=OFF;
 800294a:	4b3e      	ldr	r3, [pc, #248]	; (8002a44 <BMS_ScreenMode_RUN+0x188>)
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
			 flag_trip_SOCOverCharge=OFF;			//di tiada kan..!
 8002950:	4b3d      	ldr	r3, [pc, #244]	; (8002a48 <BMS_ScreenMode_RUN+0x18c>)
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
			 flag_trip_undervoltage=OFF;
 8002956:	4b3d      	ldr	r3, [pc, #244]	; (8002a4c <BMS_ScreenMode_RUN+0x190>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
			 flag_trip_overvoltage=OFF;
 800295c:	4b3c      	ldr	r3, [pc, #240]	; (8002a50 <BMS_ScreenMode_RUN+0x194>)
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
			 flag_trip_overcurrentdischarge=OFF;
 8002962:	4b3c      	ldr	r3, [pc, #240]	; (8002a54 <BMS_ScreenMode_RUN+0x198>)
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
			 flag_trip_overcurrentcharge=OFF;
 8002968:	4b3b      	ldr	r3, [pc, #236]	; (8002a58 <BMS_ScreenMode_RUN+0x19c>)
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
			 flag_trip_shortcircuit=OFF;
 800296e:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <BMS_ScreenMode_RUN+0x1a0>)
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
			 flag_trip_systemfailure=OFF;
 8002974:	4b3a      	ldr	r3, [pc, #232]	; (8002a60 <BMS_ScreenMode_RUN+0x1a4>)
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
			 flag_trip_unbalance=OFF;
 800297a:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <BMS_ScreenMode_RUN+0x1a8>)
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
			 OFFSET_SENSOR_ARUS=IBATT_for_offset_cal;
 8002980:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <BMS_ScreenMode_RUN+0x1ac>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a39      	ldr	r2, [pc, #228]	; (8002a6c <BMS_ScreenMode_RUN+0x1b0>)
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	e16a      	b.n	8002c60 <BMS_ScreenMode_RUN+0x3a4>
	}
	else
	{
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 800298a:	2000      	movs	r0, #0
 800298c:	f001 fcf4 	bl	8004378 <SSD1306_Fill>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002990:	2110      	movs	r1, #16
 8002992:	4829      	ldr	r0, [pc, #164]	; (8002a38 <BMS_ScreenMode_RUN+0x17c>)
 8002994:	f005 ff13 	bl	80087be <HAL_GPIO_TogglePin>

		if(BATT_State==STATE_CHARGE)
 8002998:	4b35      	ldr	r3, [pc, #212]	; (8002a70 <BMS_ScreenMode_RUN+0x1b4>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d10e      	bne.n	80029be <BMS_ScreenMode_RUN+0x102>
		{
			sprintf(pesan,"RUN (C) - %s", UPPER_UNIQUE_Code);
 80029a0:	4a34      	ldr	r2, [pc, #208]	; (8002a74 <BMS_ScreenMode_RUN+0x1b8>)
 80029a2:	4935      	ldr	r1, [pc, #212]	; (8002a78 <BMS_ScreenMode_RUN+0x1bc>)
 80029a4:	4820      	ldr	r0, [pc, #128]	; (8002a28 <BMS_ScreenMode_RUN+0x16c>)
 80029a6:	f008 fb4f 	bl	800b048 <siprintf>
			SSD1306_GotoXY(0,0);
 80029aa:	2100      	movs	r1, #0
 80029ac:	2000      	movs	r0, #0
 80029ae:	f001 fd59 	bl	8004464 <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 80029b2:	2201      	movs	r2, #1
 80029b4:	491e      	ldr	r1, [pc, #120]	; (8002a30 <BMS_ScreenMode_RUN+0x174>)
 80029b6:	481c      	ldr	r0, [pc, #112]	; (8002a28 <BMS_ScreenMode_RUN+0x16c>)
 80029b8:	f001 fdea 	bl	8004590 <SSD1306_Puts>
 80029bc:	e07a      	b.n	8002ab4 <BMS_ScreenMode_RUN+0x1f8>
		}
		else if(BATT_State==STATE_DISCHARGE)
 80029be:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <BMS_ScreenMode_RUN+0x1b4>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d10e      	bne.n	80029e4 <BMS_ScreenMode_RUN+0x128>
		{
			sprintf(pesan,"RUN (D) - %s", UPPER_UNIQUE_Code);
 80029c6:	4a2b      	ldr	r2, [pc, #172]	; (8002a74 <BMS_ScreenMode_RUN+0x1b8>)
 80029c8:	492c      	ldr	r1, [pc, #176]	; (8002a7c <BMS_ScreenMode_RUN+0x1c0>)
 80029ca:	4817      	ldr	r0, [pc, #92]	; (8002a28 <BMS_ScreenMode_RUN+0x16c>)
 80029cc:	f008 fb3c 	bl	800b048 <siprintf>
			SSD1306_GotoXY(0,0);
 80029d0:	2100      	movs	r1, #0
 80029d2:	2000      	movs	r0, #0
 80029d4:	f001 fd46 	bl	8004464 <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 80029d8:	2201      	movs	r2, #1
 80029da:	4915      	ldr	r1, [pc, #84]	; (8002a30 <BMS_ScreenMode_RUN+0x174>)
 80029dc:	4812      	ldr	r0, [pc, #72]	; (8002a28 <BMS_ScreenMode_RUN+0x16c>)
 80029de:	f001 fdd7 	bl	8004590 <SSD1306_Puts>
 80029e2:	e067      	b.n	8002ab4 <BMS_ScreenMode_RUN+0x1f8>
		}
		else if(BATT_State==STATE_FULL_CHARGE_DISCHARGE)
 80029e4:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <BMS_ScreenMode_RUN+0x1b4>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d14b      	bne.n	8002a84 <BMS_ScreenMode_RUN+0x1c8>
		{
			sprintf(pesan,"BMS-RUN (Full C/D)");
 80029ec:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <BMS_ScreenMode_RUN+0x16c>)
 80029ee:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <BMS_ScreenMode_RUN+0x1c4>)
 80029f0:	4615      	mov	r5, r2
 80029f2:	461c      	mov	r4, r3
 80029f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f6:	6028      	str	r0, [r5, #0]
 80029f8:	6069      	str	r1, [r5, #4]
 80029fa:	60aa      	str	r2, [r5, #8]
 80029fc:	60eb      	str	r3, [r5, #12]
 80029fe:	8823      	ldrh	r3, [r4, #0]
 8002a00:	78a2      	ldrb	r2, [r4, #2]
 8002a02:	822b      	strh	r3, [r5, #16]
 8002a04:	4613      	mov	r3, r2
 8002a06:	74ab      	strb	r3, [r5, #18]
			SSD1306_GotoXY(0,0);
 8002a08:	2100      	movs	r1, #0
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f001 fd2a 	bl	8004464 <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002a10:	2201      	movs	r2, #1
 8002a12:	4907      	ldr	r1, [pc, #28]	; (8002a30 <BMS_ScreenMode_RUN+0x174>)
 8002a14:	4804      	ldr	r0, [pc, #16]	; (8002a28 <BMS_ScreenMode_RUN+0x16c>)
 8002a16:	f001 fdbb 	bl	8004590 <SSD1306_Puts>
 8002a1a:	e04b      	b.n	8002ab4 <BMS_ScreenMode_RUN+0x1f8>
 8002a1c:	2000092c 	.word	0x2000092c
 8002a20:	20000bb8 	.word	0x20000bb8
 8002a24:	2000098c 	.word	0x2000098c
 8002a28:	20000bbc 	.word	0x20000bbc
 8002a2c:	0800cd18 	.word	0x0800cd18
 8002a30:	20000008 	.word	0x20000008
 8002a34:	0800cd2c 	.word	0x0800cd2c
 8002a38:	40011000 	.word	0x40011000
 8002a3c:	20001088 	.word	0x20001088
 8002a40:	200010b0 	.word	0x200010b0
 8002a44:	200010e4 	.word	0x200010e4
 8002a48:	20000c81 	.word	0x20000c81
 8002a4c:	200010b1 	.word	0x200010b1
 8002a50:	200014f5 	.word	0x200014f5
 8002a54:	200010c0 	.word	0x200010c0
 8002a58:	200010dc 	.word	0x200010dc
 8002a5c:	20000c82 	.word	0x20000c82
 8002a60:	20001070 	.word	0x20001070
 8002a64:	20000c80 	.word	0x20000c80
 8002a68:	20001108 	.word	0x20001108
 8002a6c:	20001104 	.word	0x20001104
 8002a70:	200009a8 	.word	0x200009a8
 8002a74:	20000918 	.word	0x20000918
 8002a78:	0800cd38 	.word	0x0800cd38
 8002a7c:	0800cd48 	.word	0x0800cd48
 8002a80:	0800cd58 	.word	0x0800cd58
		}
		else if(BATT_State==STATE_STANDBY)
 8002a84:	4b7a      	ldr	r3, [pc, #488]	; (8002c70 <BMS_ScreenMode_RUN+0x3b4>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d113      	bne.n	8002ab4 <BMS_ScreenMode_RUN+0x1f8>
		{
			sprintf(pesan,"BMS-RUN (Open)");
 8002a8c:	4a79      	ldr	r2, [pc, #484]	; (8002c74 <BMS_ScreenMode_RUN+0x3b8>)
 8002a8e:	4b7a      	ldr	r3, [pc, #488]	; (8002c78 <BMS_ScreenMode_RUN+0x3bc>)
 8002a90:	4614      	mov	r4, r2
 8002a92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002a94:	6020      	str	r0, [r4, #0]
 8002a96:	6061      	str	r1, [r4, #4]
 8002a98:	60a2      	str	r2, [r4, #8]
 8002a9a:	881a      	ldrh	r2, [r3, #0]
 8002a9c:	789b      	ldrb	r3, [r3, #2]
 8002a9e:	81a2      	strh	r2, [r4, #12]
 8002aa0:	73a3      	strb	r3, [r4, #14]
			SSD1306_GotoXY(0,0);
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f001 fcdd 	bl	8004464 <SSD1306_GotoXY>
			SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002aaa:	2201      	movs	r2, #1
 8002aac:	4973      	ldr	r1, [pc, #460]	; (8002c7c <BMS_ScreenMode_RUN+0x3c0>)
 8002aae:	4871      	ldr	r0, [pc, #452]	; (8002c74 <BMS_ScreenMode_RUN+0x3b8>)
 8002ab0:	f001 fd6e 	bl	8004590 <SSD1306_Puts>
		}

		sprintf(pesan,"V=%6.2f I=%6.2f",VBATT,IBATT);
 8002ab4:	4b72      	ldr	r3, [pc, #456]	; (8002c80 <BMS_ScreenMode_RUN+0x3c4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fd fcb5 	bl	8000428 <__aeabi_f2d>
 8002abe:	4605      	mov	r5, r0
 8002ac0:	460e      	mov	r6, r1
 8002ac2:	4b70      	ldr	r3, [pc, #448]	; (8002c84 <BMS_ScreenMode_RUN+0x3c8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fd fcae 	bl	8000428 <__aeabi_f2d>
 8002acc:	4603      	mov	r3, r0
 8002ace:	460c      	mov	r4, r1
 8002ad0:	e9cd 3400 	strd	r3, r4, [sp]
 8002ad4:	462a      	mov	r2, r5
 8002ad6:	4633      	mov	r3, r6
 8002ad8:	496b      	ldr	r1, [pc, #428]	; (8002c88 <BMS_ScreenMode_RUN+0x3cc>)
 8002ada:	4866      	ldr	r0, [pc, #408]	; (8002c74 <BMS_ScreenMode_RUN+0x3b8>)
 8002adc:	f008 fab4 	bl	800b048 <siprintf>
		SSD1306_GotoXY(0,10);
 8002ae0:	210a      	movs	r1, #10
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f001 fcbe 	bl	8004464 <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4964      	ldr	r1, [pc, #400]	; (8002c7c <BMS_ScreenMode_RUN+0x3c0>)
 8002aec:	4861      	ldr	r0, [pc, #388]	; (8002c74 <BMS_ScreenMode_RUN+0x3b8>)
 8002aee:	f001 fd4f 	bl	8004590 <SSD1306_Puts>
		sprintf(pesan,"T=%3.0f|%3.0f|%3.0f|%3.0f",Suhu_T1,Suhu_T2,Suhu_T3,Suhu_T4);
 8002af2:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <BMS_ScreenMode_RUN+0x3d0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fc96 	bl	8000428 <__aeabi_f2d>
 8002afc:	4682      	mov	sl, r0
 8002afe:	468b      	mov	fp, r1
 8002b00:	4b63      	ldr	r3, [pc, #396]	; (8002c90 <BMS_ScreenMode_RUN+0x3d4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fc8f 	bl	8000428 <__aeabi_f2d>
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	460d      	mov	r5, r1
 8002b0e:	4b61      	ldr	r3, [pc, #388]	; (8002c94 <BMS_ScreenMode_RUN+0x3d8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd fc88 	bl	8000428 <__aeabi_f2d>
 8002b18:	4680      	mov	r8, r0
 8002b1a:	4689      	mov	r9, r1
 8002b1c:	4b5e      	ldr	r3, [pc, #376]	; (8002c98 <BMS_ScreenMode_RUN+0x3dc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fc81 	bl	8000428 <__aeabi_f2d>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002b2e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002b32:	e9cd 4500 	strd	r4, r5, [sp]
 8002b36:	4652      	mov	r2, sl
 8002b38:	465b      	mov	r3, fp
 8002b3a:	4958      	ldr	r1, [pc, #352]	; (8002c9c <BMS_ScreenMode_RUN+0x3e0>)
 8002b3c:	484d      	ldr	r0, [pc, #308]	; (8002c74 <BMS_ScreenMode_RUN+0x3b8>)
 8002b3e:	f008 fa83 	bl	800b048 <siprintf>
		SSD1306_GotoXY(0,20);
 8002b42:	2114      	movs	r1, #20
 8002b44:	2000      	movs	r0, #0
 8002b46:	f001 fc8d 	bl	8004464 <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	494b      	ldr	r1, [pc, #300]	; (8002c7c <BMS_ScreenMode_RUN+0x3c0>)
 8002b4e:	4849      	ldr	r0, [pc, #292]	; (8002c74 <BMS_ScreenMode_RUN+0x3b8>)
 8002b50:	f001 fd1e 	bl	8004590 <SSD1306_Puts>
		sprintf(pesan,"C=%5.1f%%--%5.1f%%",Pack_SOC,SOC_manipulasi);
 8002b54:	4b52      	ldr	r3, [pc, #328]	; (8002ca0 <BMS_ScreenMode_RUN+0x3e4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fd fc65 	bl	8000428 <__aeabi_f2d>
 8002b5e:	4605      	mov	r5, r0
 8002b60:	460e      	mov	r6, r1
 8002b62:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <BMS_ScreenMode_RUN+0x3e8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fc5e 	bl	8000428 <__aeabi_f2d>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	460c      	mov	r4, r1
 8002b70:	e9cd 3400 	strd	r3, r4, [sp]
 8002b74:	462a      	mov	r2, r5
 8002b76:	4633      	mov	r3, r6
 8002b78:	494b      	ldr	r1, [pc, #300]	; (8002ca8 <BMS_ScreenMode_RUN+0x3ec>)
 8002b7a:	483e      	ldr	r0, [pc, #248]	; (8002c74 <BMS_ScreenMode_RUN+0x3b8>)
 8002b7c:	f008 fa64 	bl	800b048 <siprintf>
		SSD1306_GotoXY(0,30);
 8002b80:	211e      	movs	r1, #30
 8002b82:	2000      	movs	r0, #0
 8002b84:	f001 fc6e 	bl	8004464 <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002b88:	2201      	movs	r2, #1
 8002b8a:	493c      	ldr	r1, [pc, #240]	; (8002c7c <BMS_ScreenMode_RUN+0x3c0>)
 8002b8c:	4839      	ldr	r0, [pc, #228]	; (8002c74 <BMS_ScreenMode_RUN+0x3b8>)
 8002b8e:	f001 fcff 	bl	8004590 <SSD1306_Puts>
		sprintf(pesan,"B=%5d, %4.1f-%4.2f",balance_status,persen_imbalance, OFFSET_SENSOR_ARUS);
 8002b92:	4b46      	ldr	r3, [pc, #280]	; (8002cac <BMS_ScreenMode_RUN+0x3f0>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	461e      	mov	r6, r3
 8002b98:	4b45      	ldr	r3, [pc, #276]	; (8002cb0 <BMS_ScreenMode_RUN+0x3f4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fc43 	bl	8000428 <__aeabi_f2d>
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	460d      	mov	r5, r1
 8002ba6:	4b43      	ldr	r3, [pc, #268]	; (8002cb4 <BMS_ScreenMode_RUN+0x3f8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fc3c 	bl	8000428 <__aeabi_f2d>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bb8:	e9cd 4500 	strd	r4, r5, [sp]
 8002bbc:	4632      	mov	r2, r6
 8002bbe:	493e      	ldr	r1, [pc, #248]	; (8002cb8 <BMS_ScreenMode_RUN+0x3fc>)
 8002bc0:	482c      	ldr	r0, [pc, #176]	; (8002c74 <BMS_ScreenMode_RUN+0x3b8>)
 8002bc2:	f008 fa41 	bl	800b048 <siprintf>
		SSD1306_GotoXY(0,40);
 8002bc6:	2128      	movs	r1, #40	; 0x28
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f001 fc4b 	bl	8004464 <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002bce:	2201      	movs	r2, #1
 8002bd0:	492a      	ldr	r1, [pc, #168]	; (8002c7c <BMS_ScreenMode_RUN+0x3c0>)
 8002bd2:	4828      	ldr	r0, [pc, #160]	; (8002c74 <BMS_ScreenMode_RUN+0x3b8>)
 8002bd4:	f001 fcdc 	bl	8004590 <SSD1306_Puts>


		sprintf(pesan,"%d-%d-- %4.2f | %4.0f",fault_code,last_fault_code,Isc, AH_Total);
 8002bd8:	4b38      	ldr	r3, [pc, #224]	; (8002cbc <BMS_ScreenMode_RUN+0x400>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	461e      	mov	r6, r3
 8002bde:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <BMS_ScreenMode_RUN+0x404>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	4698      	mov	r8, r3
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <BMS_ScreenMode_RUN+0x408>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fc1d 	bl	8000428 <__aeabi_f2d>
 8002bee:	4604      	mov	r4, r0
 8002bf0:	460d      	mov	r5, r1
 8002bf2:	4b35      	ldr	r3, [pc, #212]	; (8002cc8 <BMS_ScreenMode_RUN+0x40c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fd fc16 	bl	8000428 <__aeabi_f2d>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c04:	e9cd 4500 	strd	r4, r5, [sp]
 8002c08:	4643      	mov	r3, r8
 8002c0a:	4632      	mov	r2, r6
 8002c0c:	492f      	ldr	r1, [pc, #188]	; (8002ccc <BMS_ScreenMode_RUN+0x410>)
 8002c0e:	4819      	ldr	r0, [pc, #100]	; (8002c74 <BMS_ScreenMode_RUN+0x3b8>)
 8002c10:	f008 fa1a 	bl	800b048 <siprintf>
		SSD1306_GotoXY(0,50);
 8002c14:	2132      	movs	r1, #50	; 0x32
 8002c16:	2000      	movs	r0, #0
 8002c18:	f001 fc24 	bl	8004464 <SSD1306_GotoXY>
		SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	4917      	ldr	r1, [pc, #92]	; (8002c7c <BMS_ScreenMode_RUN+0x3c0>)
 8002c20:	4814      	ldr	r0, [pc, #80]	; (8002c74 <BMS_ScreenMode_RUN+0x3b8>)
 8002c22:	f001 fcb5 	bl	8004590 <SSD1306_Puts>


		SSD1306_UpdateScreen();
 8002c26:	f001 fb79 	bl	800431c <SSD1306_UpdateScreen>

		if(BMS_mode==0) Batt_Open_Mode();
 8002c2a:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <BMS_ScreenMode_RUN+0x414>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d102      	bne.n	8002c38 <BMS_ScreenMode_RUN+0x37c>
 8002c32:	f7fe fbb3 	bl	800139c <Batt_Open_Mode>
 8002c36:	e013      	b.n	8002c60 <BMS_ScreenMode_RUN+0x3a4>
		else if(BMS_mode==1) Batt_Discharge_Mode();
 8002c38:	4b25      	ldr	r3, [pc, #148]	; (8002cd0 <BMS_ScreenMode_RUN+0x414>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d102      	bne.n	8002c46 <BMS_ScreenMode_RUN+0x38a>
 8002c40:	f7fe fa8c 	bl	800115c <Batt_Discharge_Mode>
 8002c44:	e00c      	b.n	8002c60 <BMS_ScreenMode_RUN+0x3a4>
		else if(BMS_mode==2) Batt_Charge_Mode();
 8002c46:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <BMS_ScreenMode_RUN+0x414>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d102      	bne.n	8002c54 <BMS_ScreenMode_RUN+0x398>
 8002c4e:	f7fe fae1 	bl	8001214 <Batt_Charge_Mode>
 8002c52:	e005      	b.n	8002c60 <BMS_ScreenMode_RUN+0x3a4>
		else if(BMS_mode==3) Batt_Full_CD_Mode();
 8002c54:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <BMS_ScreenMode_RUN+0x414>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d101      	bne.n	8002c60 <BMS_ScreenMode_RUN+0x3a4>
 8002c5c:	f7fe fb30 	bl	80012c0 <Batt_Full_CD_Mode>

	}

	HAL_Delay(1);
 8002c60:	2001      	movs	r0, #1
 8002c62:	f003 fe75 	bl	8006950 <HAL_Delay>
}
 8002c66:	bf00      	nop
 8002c68:	3704      	adds	r7, #4
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c70:	200009a8 	.word	0x200009a8
 8002c74:	20000bbc 	.word	0x20000bbc
 8002c78:	0800cd6c 	.word	0x0800cd6c
 8002c7c:	20000008 	.word	0x20000008
 8002c80:	2000108c 	.word	0x2000108c
 8002c84:	200010a8 	.word	0x200010a8
 8002c88:	0800cd7c 	.word	0x0800cd7c
 8002c8c:	200010bc 	.word	0x200010bc
 8002c90:	200014f8 	.word	0x200014f8
 8002c94:	20001090 	.word	0x20001090
 8002c98:	200010f0 	.word	0x200010f0
 8002c9c:	0800cd8c 	.word	0x0800cd8c
 8002ca0:	20000bdc 	.word	0x20000bdc
 8002ca4:	20000bac 	.word	0x20000bac
 8002ca8:	0800cda8 	.word	0x0800cda8
 8002cac:	20000be6 	.word	0x20000be6
 8002cb0:	20000bb0 	.word	0x20000bb0
 8002cb4:	20001104 	.word	0x20001104
 8002cb8:	0800cdbc 	.word	0x0800cdbc
 8002cbc:	200010b8 	.word	0x200010b8
 8002cc0:	200014f4 	.word	0x200014f4
 8002cc4:	2000109c 	.word	0x2000109c
 8002cc8:	20000698 	.word	0x20000698
 8002ccc:	0800cdd0 	.word	0x0800cdd0
 8002cd0:	20000bd8 	.word	0x20000bd8

08002cd4 <BMS_ScreenMode_Locked_Ship>:

void BMS_ScreenMode_Locked_Ship(void)
{
 8002cd4:	b5b0      	push	{r4, r5, r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
	 Flag_Battery_Locked_for_Ship=1;
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <BMS_ScreenMode_Locked_Ship+0x74>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
	 Flag_Force_Balance=0;
 8002cde:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <BMS_ScreenMode_Locked_Ship+0x78>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]

	 SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f001 fb47 	bl	8004378 <SSD1306_Fill>
	 sprintf(pesan,"BMS - Gen.V2");
 8002cea:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <BMS_ScreenMode_Locked_Ship+0x80>)
 8002cee:	4614      	mov	r4, r2
 8002cf0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002cf2:	6020      	str	r0, [r4, #0]
 8002cf4:	6061      	str	r1, [r4, #4]
 8002cf6:	60a2      	str	r2, [r4, #8]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	7323      	strb	r3, [r4, #12]
	 SSD1306_GotoXY(20,18);
 8002cfc:	2112      	movs	r1, #18
 8002cfe:	2014      	movs	r0, #20
 8002d00:	f001 fbb0 	bl	8004464 <SSD1306_GotoXY>
	 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002d04:	2201      	movs	r2, #1
 8002d06:	4914      	ldr	r1, [pc, #80]	; (8002d58 <BMS_ScreenMode_Locked_Ship+0x84>)
 8002d08:	4811      	ldr	r0, [pc, #68]	; (8002d50 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002d0a:	f001 fc41 	bl	8004590 <SSD1306_Puts>

	 sprintf(pesan,"Pack Ready Shipped");
 8002d0e:	4a10      	ldr	r2, [pc, #64]	; (8002d50 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <BMS_ScreenMode_Locked_Ship+0x88>)
 8002d12:	4615      	mov	r5, r2
 8002d14:	461c      	mov	r4, r3
 8002d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d18:	6028      	str	r0, [r5, #0]
 8002d1a:	6069      	str	r1, [r5, #4]
 8002d1c:	60aa      	str	r2, [r5, #8]
 8002d1e:	60eb      	str	r3, [r5, #12]
 8002d20:	8823      	ldrh	r3, [r4, #0]
 8002d22:	78a2      	ldrb	r2, [r4, #2]
 8002d24:	822b      	strh	r3, [r5, #16]
 8002d26:	4613      	mov	r3, r2
 8002d28:	74ab      	strb	r3, [r5, #18]
	 SSD1306_GotoXY(0,38);
 8002d2a:	2126      	movs	r1, #38	; 0x26
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f001 fb99 	bl	8004464 <SSD1306_GotoXY>
	 SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002d32:	2201      	movs	r2, #1
 8002d34:	4908      	ldr	r1, [pc, #32]	; (8002d58 <BMS_ScreenMode_Locked_Ship+0x84>)
 8002d36:	4806      	ldr	r0, [pc, #24]	; (8002d50 <BMS_ScreenMode_Locked_Ship+0x7c>)
 8002d38:	f001 fc2a 	bl	8004590 <SSD1306_Puts>
	 SSD1306_UpdateScreen();
 8002d3c:	f001 faee 	bl	800431c <SSD1306_UpdateScreen>
	 Batt_Open_Mode();
 8002d40:	f7fe fb2c 	bl	800139c <Batt_Open_Mode>
}
 8002d44:	bf00      	nop
 8002d46:	bdb0      	pop	{r4, r5, r7, pc}
 8002d48:	2000092c 	.word	0x2000092c
 8002d4c:	20000bb8 	.word	0x20000bb8
 8002d50:	20000bbc 	.word	0x20000bbc
 8002d54:	0800cd08 	.word	0x0800cd08
 8002d58:	20000008 	.word	0x20000008
 8002d5c:	0800cde8 	.word	0x0800cde8

08002d60 <BMS_ScreenMode_ForceBalance>:

void BMS_ScreenMode_ForceBalance(void)
{
 8002d60:	b598      	push	{r3, r4, r7, lr}
 8002d62:	af00      	add	r7, sp, #0
	Flag_Battery_Locked_for_Ship=0;
 8002d64:	4b21      	ldr	r3, [pc, #132]	; (8002dec <BMS_ScreenMode_ForceBalance+0x8c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
	Flag_Force_Balance=1;
 8002d6a:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <BMS_ScreenMode_ForceBalance+0x90>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]

	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f001 fb01 	bl	8004378 <SSD1306_Fill>
	sprintf(pesan,"BMS - Gen.V2");
 8002d76:	4a1f      	ldr	r2, [pc, #124]	; (8002df4 <BMS_ScreenMode_ForceBalance+0x94>)
 8002d78:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <BMS_ScreenMode_ForceBalance+0x98>)
 8002d7a:	4614      	mov	r4, r2
 8002d7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002d7e:	6020      	str	r0, [r4, #0]
 8002d80:	6061      	str	r1, [r4, #4]
 8002d82:	60a2      	str	r2, [r4, #8]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	7323      	strb	r3, [r4, #12]
	SSD1306_GotoXY(20,0);
 8002d88:	2100      	movs	r1, #0
 8002d8a:	2014      	movs	r0, #20
 8002d8c:	f001 fb6a 	bl	8004464 <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002d90:	2201      	movs	r2, #1
 8002d92:	491a      	ldr	r1, [pc, #104]	; (8002dfc <BMS_ScreenMode_ForceBalance+0x9c>)
 8002d94:	4817      	ldr	r0, [pc, #92]	; (8002df4 <BMS_ScreenMode_ForceBalance+0x94>)
 8002d96:	f001 fbfb 	bl	8004590 <SSD1306_Puts>

	sprintf(pesan,"Force Balance");
 8002d9a:	4a16      	ldr	r2, [pc, #88]	; (8002df4 <BMS_ScreenMode_ForceBalance+0x94>)
 8002d9c:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <BMS_ScreenMode_ForceBalance+0xa0>)
 8002d9e:	4614      	mov	r4, r2
 8002da0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002da2:	6020      	str	r0, [r4, #0]
 8002da4:	6061      	str	r1, [r4, #4]
 8002da6:	60a2      	str	r2, [r4, #8]
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	81a3      	strh	r3, [r4, #12]
	SSD1306_GotoXY(0,10);
 8002dac:	210a      	movs	r1, #10
 8002dae:	2000      	movs	r0, #0
 8002db0:	f001 fb58 	bl	8004464 <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002db4:	2201      	movs	r2, #1
 8002db6:	4911      	ldr	r1, [pc, #68]	; (8002dfc <BMS_ScreenMode_ForceBalance+0x9c>)
 8002db8:	480e      	ldr	r0, [pc, #56]	; (8002df4 <BMS_ScreenMode_ForceBalance+0x94>)
 8002dba:	f001 fbe9 	bl	8004590 <SSD1306_Puts>

	sprintf(pesan,"B=%5d",balance_status);
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <BMS_ScreenMode_ForceBalance+0xa4>)
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4910      	ldr	r1, [pc, #64]	; (8002e08 <BMS_ScreenMode_ForceBalance+0xa8>)
 8002dc6:	480b      	ldr	r0, [pc, #44]	; (8002df4 <BMS_ScreenMode_ForceBalance+0x94>)
 8002dc8:	f008 f93e 	bl	800b048 <siprintf>
	SSD1306_GotoXY(0,40);
 8002dcc:	2128      	movs	r1, #40	; 0x28
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f001 fb48 	bl	8004464 <SSD1306_GotoXY>
	SSD1306_Puts(pesan, &Font_7x10, SSD1306_COLOR_WHITE);
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	4909      	ldr	r1, [pc, #36]	; (8002dfc <BMS_ScreenMode_ForceBalance+0x9c>)
 8002dd8:	4806      	ldr	r0, [pc, #24]	; (8002df4 <BMS_ScreenMode_ForceBalance+0x94>)
 8002dda:	f001 fbd9 	bl	8004590 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8002dde:	f001 fa9d 	bl	800431c <SSD1306_UpdateScreen>
	Batt_Open_Mode();
 8002de2:	f7fe fadb 	bl	800139c <Batt_Open_Mode>
}
 8002de6:	bf00      	nop
 8002de8:	bd98      	pop	{r3, r4, r7, pc}
 8002dea:	bf00      	nop
 8002dec:	2000092c 	.word	0x2000092c
 8002df0:	20000bb8 	.word	0x20000bb8
 8002df4:	20000bbc 	.word	0x20000bbc
 8002df8:	0800cd08 	.word	0x0800cd08
 8002dfc:	20000008 	.word	0x20000008
 8002e00:	0800cdfc 	.word	0x0800cdfc
 8002e04:	20000be6 	.word	0x20000be6
 8002e08:	0800ce0c 	.word	0x0800ce0c

08002e0c <Calc_vcell_tot>:

void Calc_vcell_tot(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
	float v_cell_temporary;
	for(ij=0;ij<15;ij++)
 8002e12:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <Calc_vcell_tot+0x54>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	e00f      	b.n	8002e3a <Calc_vcell_tot+0x2e>
	{
		v_cell_temporary+=vcell_15data[ij];
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <Calc_vcell_tot+0x54>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <Calc_vcell_tot+0x58>)
 8002e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fd fe84 	bl	8000b34 <__addsf3>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	607b      	str	r3, [r7, #4]
	for(ij=0;ij<15;ij++)
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <Calc_vcell_tot+0x54>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3301      	adds	r3, #1
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <Calc_vcell_tot+0x54>)
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <Calc_vcell_tot+0x54>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b0e      	cmp	r3, #14
 8002e40:	ddeb      	ble.n	8002e1a <Calc_vcell_tot+0xe>
	}

	if(v_cell_temporary>10)
 8002e42:	4909      	ldr	r1, [pc, #36]	; (8002e68 <Calc_vcell_tot+0x5c>)
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fe f939 	bl	80010bc <__aeabi_fcmpgt>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d100      	bne.n	8002e52 <Calc_vcell_tot+0x46>
	{
		v_cell_tot=v_cell_temporary;
	}

}
 8002e50:	e002      	b.n	8002e58 <Calc_vcell_tot+0x4c>
		v_cell_tot=v_cell_temporary;
 8002e52:	4a06      	ldr	r2, [pc, #24]	; (8002e6c <Calc_vcell_tot+0x60>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6013      	str	r3, [r2, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000900 	.word	0x20000900
 8002e64:	20000950 	.word	0x20000950
 8002e68:	41200000 	.word	0x41200000
 8002e6c:	20000bb4 	.word	0x20000bb4

08002e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <ltc6812_GPIO_Config>:
void ltc6812_SPIInit(void);
void ltc6812_Delay(volatile uint32_t nCount);


void ltc6812_GPIO_Config(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIO clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002e82:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <ltc6812_GPIO_Config+0xb0>)
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	4a29      	ldr	r2, [pc, #164]	; (8002f2c <ltc6812_GPIO_Config+0xb0>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	6193      	str	r3, [r2, #24]
 8002e8e:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <ltc6812_GPIO_Config+0xb0>)
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9a:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <ltc6812_GPIO_Config+0xb0>)
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	4a23      	ldr	r2, [pc, #140]	; (8002f2c <ltc6812_GPIO_Config+0xb0>)
 8002ea0:	f043 0308 	orr.w	r3, r3, #8
 8002ea4:	6193      	str	r3, [r2, #24]
 8002ea6:	4b21      	ldr	r3, [pc, #132]	; (8002f2c <ltc6812_GPIO_Config+0xb0>)
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <ltc6812_GPIO_Config+0xb0>)
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <ltc6812_GPIO_Config+0xb0>)
 8002eb8:	f043 0310 	orr.w	r3, r3, #16
 8002ebc:	6193      	str	r3, [r2, #24]
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <ltc6812_GPIO_Config+0xb0>)
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin       = ltc6812_CS_PIN;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6812_CS_PORT, &GPIO_InitStructure);
 8002eda:	f107 0310 	add.w	r3, r7, #16
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4813      	ldr	r0, [pc, #76]	; (8002f30 <ltc6812_GPIO_Config+0xb4>)
 8002ee2:	f005 fae3 	bl	80084ac <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6812_SCK_PIN;
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6812_SCK_PORT, &GPIO_InitStructure);
 8002eea:	f107 0310 	add.w	r3, r7, #16
 8002eee:	4619      	mov	r1, r3
 8002ef0:	480f      	ldr	r0, [pc, #60]	; (8002f30 <ltc6812_GPIO_Config+0xb4>)
 8002ef2:	f005 fadb 	bl	80084ac <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6812_MOSI_PIN;
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6812_MOSI_PORT, &GPIO_InitStructure);
 8002efa:	f107 0310 	add.w	r3, r7, #16
 8002efe:	4619      	mov	r1, r3
 8002f00:	480b      	ldr	r0, [pc, #44]	; (8002f30 <ltc6812_GPIO_Config+0xb4>)
 8002f02:	f005 fad3 	bl	80084ac <HAL_GPIO_Init>

	

	GPIO_InitStructure.Pin       = ltc6812_MISO_PIN;
 8002f06:	2310      	movs	r3, #16
 8002f08:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_INPUT;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6812_MISO_PORT, &GPIO_InitStructure);
 8002f16:	f107 0310 	add.w	r3, r7, #16
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4804      	ldr	r0, [pc, #16]	; (8002f30 <ltc6812_GPIO_Config+0xb4>)
 8002f1e:	f005 fac5 	bl	80084ac <HAL_GPIO_Init>
}
 8002f22:	bf00      	nop
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40010c00 	.word	0x40010c00

08002f34 <ltc6812_SPIInit>:

void ltc6812_SPIInit(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
	ltc6812_CS_SET(ltc6812_CS_PIN);
 8002f38:	2201      	movs	r2, #1
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	482a      	ldr	r0, [pc, #168]	; (8002fe8 <ltc6812_SPIInit+0xb4>)
 8002f3e:	f005 fc26 	bl	800878e <HAL_GPIO_WritePin>
	ltc6812_RESET_HIGH;
 8002f42:	2201      	movs	r2, #1
 8002f44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f48:	4828      	ldr	r0, [pc, #160]	; (8002fec <ltc6812_SPIInit+0xb8>)
 8002f4a:	f005 fc20 	bl	800878e <HAL_GPIO_WritePin>
	ltc6812_Delay(10);
 8002f4e:	200a      	movs	r0, #10
 8002f50:	f000 f84e 	bl	8002ff0 <ltc6812_Delay>
	ltc6812_RESET_LOW;
 8002f54:	2200      	movs	r2, #0
 8002f56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f5a:	4824      	ldr	r0, [pc, #144]	; (8002fec <ltc6812_SPIInit+0xb8>)
 8002f5c:	f005 fc17 	bl	800878e <HAL_GPIO_WritePin>
	ltc6812_Delay(2000);
 8002f60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f64:	f000 f844 	bl	8002ff0 <ltc6812_Delay>
	ltc6812_RESET_HIGH;
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f6e:	481f      	ldr	r0, [pc, #124]	; (8002fec <ltc6812_SPIInit+0xb8>)
 8002f70:	f005 fc0d 	bl	800878e <HAL_GPIO_WritePin>
	ltc6812_Delay(10);
 8002f74:	200a      	movs	r0, #10
 8002f76:	f000 f83b 	bl	8002ff0 <ltc6812_Delay>

	//toggle CS 3 times to enter SPI Mode
	ltc6812_CS_RESET(ltc6812_CS_PIN);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	481a      	ldr	r0, [pc, #104]	; (8002fe8 <ltc6812_SPIInit+0xb4>)
 8002f80:	f005 fc05 	bl	800878e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 8002f84:	2064      	movs	r0, #100	; 0x64
 8002f86:	f000 f833 	bl	8002ff0 <ltc6812_Delay>
	ltc6812_CS_SET(ltc6812_CS_PIN);
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4816      	ldr	r0, [pc, #88]	; (8002fe8 <ltc6812_SPIInit+0xb4>)
 8002f90:	f005 fbfd 	bl	800878e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 8002f94:	2064      	movs	r0, #100	; 0x64
 8002f96:	f000 f82b 	bl	8002ff0 <ltc6812_Delay>
	ltc6812_CS_RESET(ltc6812_CS_PIN);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	4812      	ldr	r0, [pc, #72]	; (8002fe8 <ltc6812_SPIInit+0xb4>)
 8002fa0:	f005 fbf5 	bl	800878e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 8002fa4:	2064      	movs	r0, #100	; 0x64
 8002fa6:	f000 f823 	bl	8002ff0 <ltc6812_Delay>
	ltc6812_CS_SET(ltc6812_CS_PIN);
 8002faa:	2201      	movs	r2, #1
 8002fac:	2101      	movs	r1, #1
 8002fae:	480e      	ldr	r0, [pc, #56]	; (8002fe8 <ltc6812_SPIInit+0xb4>)
 8002fb0:	f005 fbed 	bl	800878e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 8002fb4:	2064      	movs	r0, #100	; 0x64
 8002fb6:	f000 f81b 	bl	8002ff0 <ltc6812_Delay>
	ltc6812_CS_RESET(ltc6812_CS_PIN);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	480a      	ldr	r0, [pc, #40]	; (8002fe8 <ltc6812_SPIInit+0xb4>)
 8002fc0:	f005 fbe5 	bl	800878e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 8002fc4:	2064      	movs	r0, #100	; 0x64
 8002fc6:	f000 f813 	bl	8002ff0 <ltc6812_Delay>
	ltc6812_CS_SET(ltc6812_CS_PIN);
 8002fca:	2201      	movs	r2, #1
 8002fcc:	2101      	movs	r1, #1
 8002fce:	4806      	ldr	r0, [pc, #24]	; (8002fe8 <ltc6812_SPIInit+0xb4>)
 8002fd0:	f005 fbdd 	bl	800878e <HAL_GPIO_WritePin>
	ltc6812_Delay(100);
 8002fd4:	2064      	movs	r0, #100	; 0x64
 8002fd6:	f000 f80b 	bl	8002ff0 <ltc6812_Delay>

	ltc6812_Delay(20000);
 8002fda:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002fde:	f000 f807 	bl	8002ff0 <ltc6812_Delay>
}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40010c00 	.word	0x40010c00
 8002fec:	40011000 	.word	0x40011000

08002ff0 <ltc6812_Delay>:

void ltc6812_Delay(volatile uint32_t nCount)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	while(nCount > 0) { nCount--; }
 8002ff8:	e002      	b.n	8003000 <ltc6812_Delay+0x10>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	607b      	str	r3, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f9      	bne.n	8002ffa <ltc6812_Delay+0xa>
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <ltc6812_Write8>:

void ltc6812_Write8(uint8_t out)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	//ltc6812_CS_SET(CS_Pin);
	//ltc6812_MOSI_RESET;
	ltc6812_SCK_RESET;
 800301a:	2200      	movs	r2, #0
 800301c:	2108      	movs	r1, #8
 800301e:	481a      	ldr	r0, [pc, #104]	; (8003088 <ltc6812_Write8+0x78>)
 8003020:	f005 fbb5 	bl	800878e <HAL_GPIO_WritePin>
	//ltc6812_CS_RESET(CS_Pin);
	//ltc6812_Delay(10);
	for (i = 0; i < 8; i++) {
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]
 8003028:	e027      	b.n	800307a <ltc6812_Write8+0x6a>
		if ((out >> (7-i)) & 0x01) {
 800302a:	79fa      	ldrb	r2, [r7, #7]
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	f1c3 0307 	rsb	r3, r3, #7
 8003032:	fa42 f303 	asr.w	r3, r2, r3
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <ltc6812_Write8+0x3a>
			ltc6812_MOSI_SET;
 800303e:	2201      	movs	r2, #1
 8003040:	2120      	movs	r1, #32
 8003042:	4811      	ldr	r0, [pc, #68]	; (8003088 <ltc6812_Write8+0x78>)
 8003044:	f005 fba3 	bl	800878e <HAL_GPIO_WritePin>
 8003048:	e004      	b.n	8003054 <ltc6812_Write8+0x44>
		} else {
			ltc6812_MOSI_RESET;
 800304a:	2200      	movs	r2, #0
 800304c:	2120      	movs	r1, #32
 800304e:	480e      	ldr	r0, [pc, #56]	; (8003088 <ltc6812_Write8+0x78>)
 8003050:	f005 fb9d 	bl	800878e <HAL_GPIO_WritePin>
		}
		ltc6812_Delay(10);
 8003054:	200a      	movs	r0, #10
 8003056:	f7ff ffcb 	bl	8002ff0 <ltc6812_Delay>
		ltc6812_SCK_SET;
 800305a:	2201      	movs	r2, #1
 800305c:	2108      	movs	r1, #8
 800305e:	480a      	ldr	r0, [pc, #40]	; (8003088 <ltc6812_Write8+0x78>)
 8003060:	f005 fb95 	bl	800878e <HAL_GPIO_WritePin>
		ltc6812_Delay(10);
 8003064:	200a      	movs	r0, #10
 8003066:	f7ff ffc3 	bl	8002ff0 <ltc6812_Delay>
		ltc6812_SCK_RESET;
 800306a:	2200      	movs	r2, #0
 800306c:	2108      	movs	r1, #8
 800306e:	4806      	ldr	r0, [pc, #24]	; (8003088 <ltc6812_Write8+0x78>)
 8003070:	f005 fb8d 	bl	800878e <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	3301      	adds	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	2b07      	cmp	r3, #7
 800307e:	d9d4      	bls.n	800302a <ltc6812_Write8+0x1a>
	}
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40010c00 	.word	0x40010c00

0800308c <ltc6812_Read8>:
		ltc6812_SCK_SET;
	}
}

uint8_t ltc6812_Read8()
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t temp = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	71bb      	strb	r3, [r7, #6]
	//ltc6812_Delay(10);
	//ltc6812_CS_RESET(CS_Pin);
	ltc6812_MOSI_RESET;
 8003096:	2200      	movs	r2, #0
 8003098:	2120      	movs	r1, #32
 800309a:	481e      	ldr	r0, [pc, #120]	; (8003114 <ltc6812_Read8+0x88>)
 800309c:	f005 fb77 	bl	800878e <HAL_GPIO_WritePin>
	ltc6812_SCK_RESET;
 80030a0:	2200      	movs	r2, #0
 80030a2:	2108      	movs	r1, #8
 80030a4:	481b      	ldr	r0, [pc, #108]	; (8003114 <ltc6812_Read8+0x88>)
 80030a6:	f005 fb72 	bl	800878e <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 80030aa:	2300      	movs	r3, #0
 80030ac:	71fb      	strb	r3, [r7, #7]
 80030ae:	e028      	b.n	8003102 <ltc6812_Read8+0x76>
		ltc6812_Delay(10);
 80030b0:	200a      	movs	r0, #10
 80030b2:	f7ff ff9d 	bl	8002ff0 <ltc6812_Delay>
		ltc6812_SCK_SET;
 80030b6:	2201      	movs	r2, #1
 80030b8:	2108      	movs	r1, #8
 80030ba:	4816      	ldr	r0, [pc, #88]	; (8003114 <ltc6812_Read8+0x88>)
 80030bc:	f005 fb67 	bl	800878e <HAL_GPIO_WritePin>
		ltc6812_Delay(10);
 80030c0:	200a      	movs	r0, #10
 80030c2:	f7ff ff95 	bl	8002ff0 <ltc6812_Delay>
		if (ltc6812_MISO == GPIO_PIN_SET) {
 80030c6:	2110      	movs	r1, #16
 80030c8:	4812      	ldr	r0, [pc, #72]	; (8003114 <ltc6812_Read8+0x88>)
 80030ca:	f005 fb49 	bl	8008760 <HAL_GPIO_ReadPin>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d10b      	bne.n	80030ec <ltc6812_Read8+0x60>
			temp |= (1 << (7-i));
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	f1c3 0307 	rsb	r3, r3, #7
 80030da:	2201      	movs	r2, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	b25a      	sxtb	r2, r3
 80030e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	b25b      	sxtb	r3, r3
 80030ea:	71bb      	strb	r3, [r7, #6]
		}
		ltc6812_Delay(10);
 80030ec:	200a      	movs	r0, #10
 80030ee:	f7ff ff7f 	bl	8002ff0 <ltc6812_Delay>
		ltc6812_SCK_RESET;
 80030f2:	2200      	movs	r2, #0
 80030f4:	2108      	movs	r1, #8
 80030f6:	4807      	ldr	r0, [pc, #28]	; (8003114 <ltc6812_Read8+0x88>)
 80030f8:	f005 fb49 	bl	800878e <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	3301      	adds	r3, #1
 8003100:	71fb      	strb	r3, [r7, #7]
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	2b07      	cmp	r3, #7
 8003106:	d9d3      	bls.n	80030b0 <ltc6812_Read8+0x24>
	}
	//ltc6812_CS_SET(CS_Pin);

	return temp;
 8003108:	79bb      	ldrb	r3, [r7, #6]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40010c00 	.word	0x40010c00

08003118 <LTC681x_adcv_emul>:

void LTC681x_adcv_emul( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH //Cell Channels to be measured
                 )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
 8003122:	460b      	mov	r3, r1
 8003124:	71bb      	strb	r3, [r7, #6]
 8003126:	4613      	mov	r3, r2
 8003128:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;
	
	md_bits = (MD & 0x02) >> 1;
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	105b      	asrs	r3, r3, #1
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	3302      	adds	r3, #2
 800313a:	b2db      	uxtb	r3, r3
 800313c:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	01db      	lsls	r3, r3, #7
 8003142:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8003144:	79bb      	ldrb	r3, [r7, #6]
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	b2da      	uxtb	r2, r3
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	4413      	add	r3, r2
 800314e:	b2da      	uxtb	r2, r3
 8003150:	797b      	ldrb	r3, [r7, #5]
 8003152:	4413      	add	r3, r2
 8003154:	b2db      	uxtb	r3, r3
 8003156:	3360      	adds	r3, #96	; 0x60
 8003158:	b2db      	uxtb	r3, r3
 800315a:	737b      	strb	r3, [r7, #13]
	
	cmd_68_emul(cmd);
 800315c:	f107 030c 	add.w	r3, r7, #12
 8003160:	4618      	mov	r0, r3
 8003162:	f000 f805 	bl	8003170 <cmd_68_emul>
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <cmd_68_emul>:

void cmd_68_emul(uint8_t tx_cmd[2])
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4];
    uint16_t cmd_pec;
//    uint8_t md_bits;

    cmd[0] = tx_cmd[0];
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	723b      	strb	r3, [r7, #8]
    cmd[1] =  tx_cmd[1];
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	785b      	ldrb	r3, [r3, #1]
 8003182:	727b      	strb	r3, [r7, #9]
    cmd_pec = pec15_calc_emul(2, cmd);
 8003184:	f107 0308 	add.w	r3, r7, #8
 8003188:	4619      	mov	r1, r3
 800318a:	2002      	movs	r0, #2
 800318c:	f000 f82a 	bl	80031e4 <pec15_calc_emul>
 8003190:	4603      	mov	r3, r0
 8003192:	81fb      	strh	r3, [r7, #14]
    cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003194:	89fb      	ldrh	r3, [r7, #14]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	b29b      	uxth	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t)(cmd_pec);
 800319e:	89fb      	ldrh	r3, [r7, #14]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	72fb      	strb	r3, [r7, #11]
    ltc6812_CS_RESET(ltc6812_CS_PIN);
 80031a4:	2200      	movs	r2, #0
 80031a6:	2101      	movs	r1, #1
 80031a8:	480d      	ldr	r0, [pc, #52]	; (80031e0 <cmd_68_emul+0x70>)
 80031aa:	f005 faf0 	bl	800878e <HAL_GPIO_WritePin>
    ltc6812_Write8(cmd[0]);
 80031ae:	7a3b      	ldrb	r3, [r7, #8]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff2d 	bl	8003010 <ltc6812_Write8>
		ltc6812_Write8(cmd[1]);
 80031b6:	7a7b      	ldrb	r3, [r7, #9]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff29 	bl	8003010 <ltc6812_Write8>
		ltc6812_Write8(cmd[2]);
 80031be:	7abb      	ldrb	r3, [r7, #10]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff25 	bl	8003010 <ltc6812_Write8>
		ltc6812_Write8(cmd[3]);
 80031c6:	7afb      	ldrb	r3, [r7, #11]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff21 	bl	8003010 <ltc6812_Write8>
    ltc6812_CS_SET(ltc6812_CS_PIN);
 80031ce:	2201      	movs	r2, #1
 80031d0:	2101      	movs	r1, #1
 80031d2:	4803      	ldr	r0, [pc, #12]	; (80031e0 <cmd_68_emul+0x70>)
 80031d4:	f005 fadb 	bl	800878e <HAL_GPIO_WritePin>

}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40010c00 	.word	0x40010c00

080031e4 <pec15_calc_emul>:


uint16_t pec15_calc_emul(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	6039      	str	r1, [r7, #0]
 80031ee:	71fb      	strb	r3, [r7, #7]
    uint16_t remainder,addr;

    remainder = 16;//initialize the PEC
 80031f0:	2310      	movs	r3, #16
 80031f2:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i<len; i++) { // loops for each byte in data array
 80031f4:	2300      	movs	r3, #0
 80031f6:	737b      	strb	r3, [r7, #13]
 80031f8:	e019      	b.n	800322e <pec15_calc_emul+0x4a>
        addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 80031fa:	89fb      	ldrh	r3, [r7, #14]
 80031fc:	09db      	lsrs	r3, r3, #7
 80031fe:	b29a      	uxth	r2, r3
 8003200:	7b7b      	ldrb	r3, [r7, #13]
 8003202:	6839      	ldr	r1, [r7, #0]
 8003204:	440b      	add	r3, r1
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	4053      	eors	r3, r2
 800320c:	b29b      	uxth	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	817b      	strh	r3, [r7, #10]
//#ifdef MBED
        remainder = (remainder<<8)^crc15Table[addr];
 8003212:	89fb      	ldrh	r3, [r7, #14]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	b21a      	sxth	r2, r3
 8003218:	897b      	ldrh	r3, [r7, #10]
 800321a:	490b      	ldr	r1, [pc, #44]	; (8003248 <pec15_calc_emul+0x64>)
 800321c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003220:	b21b      	sxth	r3, r3
 8003222:	4053      	eors	r3, r2
 8003224:	b21b      	sxth	r3, r3
 8003226:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i<len; i++) { // loops for each byte in data array
 8003228:	7b7b      	ldrb	r3, [r7, #13]
 800322a:	3301      	adds	r3, #1
 800322c:	737b      	strb	r3, [r7, #13]
 800322e:	7b7a      	ldrb	r2, [r7, #13]
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	429a      	cmp	r2, r3
 8003234:	d3e1      	bcc.n	80031fa <pec15_calc_emul+0x16>
//#else
//        remainder = (remainder<<8)^pgm_read_word_near(crc15Table+addr);
//#endif
    }
    return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8003236:	89fb      	ldrh	r3, [r7, #14]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	b29b      	uxth	r3, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	0800d594 	.word	0x0800d594

0800324c <LTC681x_rdcv_reg_emul>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg_emul(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t data_out[8] //An array of the unparsed cell codes
                     )
{
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	603a      	str	r2, [r7, #0]
 8003256:	71fb      	strb	r3, [r7, #7]
 8003258:	460b      	mov	r3, r1
 800325a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d104      	bne.n	800326c <LTC681x_rdcv_reg_emul+0x20>
	{
		cmd[1] = 0x04;  //alamat asli 0x04
 8003262:	2304      	movs	r3, #4
 8003264:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003266:	2300      	movs	r3, #0
 8003268:	723b      	strb	r3, [r7, #8]
 800326a:	e026      	b.n	80032ba <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 2) //2: RDCVB
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d104      	bne.n	800327c <LTC681x_rdcv_reg_emul+0x30>
	{
		cmd[1] = 0x06;
 8003272:	2306      	movs	r3, #6
 8003274:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003276:	2300      	movs	r3, #0
 8003278:	723b      	strb	r3, [r7, #8]
 800327a:	e01e      	b.n	80032ba <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 3) //3: RDCVC
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d104      	bne.n	800328c <LTC681x_rdcv_reg_emul+0x40>
	{
		cmd[1] = 0x08;
 8003282:	2308      	movs	r3, #8
 8003284:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003286:	2300      	movs	r3, #0
 8003288:	723b      	strb	r3, [r7, #8]
 800328a:	e016      	b.n	80032ba <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 4) //4: RDCVD
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	2b04      	cmp	r3, #4
 8003290:	d104      	bne.n	800329c <LTC681x_rdcv_reg_emul+0x50>
	{
		cmd[1] = 0x0A;
 8003292:	230a      	movs	r3, #10
 8003294:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003296:	2300      	movs	r3, #0
 8003298:	723b      	strb	r3, [r7, #8]
 800329a:	e00e      	b.n	80032ba <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 5) //4: RDCVE
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	2b05      	cmp	r3, #5
 80032a0:	d104      	bne.n	80032ac <LTC681x_rdcv_reg_emul+0x60>
	{
		cmd[1] = 0x09;
 80032a2:	2309      	movs	r3, #9
 80032a4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80032a6:	2300      	movs	r3, #0
 80032a8:	723b      	strb	r3, [r7, #8]
 80032aa:	e006      	b.n	80032ba <LTC681x_rdcv_reg_emul+0x6e>
	}
	else if (reg == 6) //4: RDCVF
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d103      	bne.n	80032ba <LTC681x_rdcv_reg_emul+0x6e>
	{
		cmd[1] = 0x0B;
 80032b2:	230b      	movs	r3, #11
 80032b4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80032b6:	2300      	movs	r3, #0
 80032b8:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc_emul(2, cmd);
 80032ba:	f107 0308 	add.w	r3, r7, #8
 80032be:	4619      	mov	r1, r3
 80032c0:	2002      	movs	r0, #2
 80032c2:	f7ff ff8f 	bl	80031e4 <pec15_calc_emul>
 80032c6:	4603      	mov	r3, r0
 80032c8:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80032ca:	89fb      	ldrh	r3, [r7, #14]
 80032cc:	0a1b      	lsrs	r3, r3, #8
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 80032d4:	89fb      	ldrh	r3, [r7, #14]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	72fb      	strb	r3, [r7, #11]

	ltc6812_CS_RESET(ltc6812_CS_PIN);
 80032da:	2200      	movs	r2, #0
 80032dc:	2101      	movs	r1, #1
 80032de:	4826      	ldr	r0, [pc, #152]	; (8003378 <LTC681x_rdcv_reg_emul+0x12c>)
 80032e0:	f005 fa55 	bl	800878e <HAL_GPIO_WritePin>
  ltc6812_Write8(cmd[0]);
 80032e4:	7a3b      	ldrb	r3, [r7, #8]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fe92 	bl	8003010 <ltc6812_Write8>
	ltc6812_Write8(cmd[1]);
 80032ec:	7a7b      	ldrb	r3, [r7, #9]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fe8e 	bl	8003010 <ltc6812_Write8>
	ltc6812_Write8(cmd[2]);
 80032f4:	7abb      	ldrb	r3, [r7, #10]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fe8a 	bl	8003010 <ltc6812_Write8>
	ltc6812_Write8(cmd[3]);
 80032fc:	7afb      	ldrb	r3, [r7, #11]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fe86 	bl	8003010 <ltc6812_Write8>
	
	data_out[0]= ltc6812_Read8();
 8003304:	f7ff fec2 	bl	800308c <ltc6812_Read8>
 8003308:	4603      	mov	r3, r0
 800330a:	461a      	mov	r2, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	701a      	strb	r2, [r3, #0]
	data_out[1]= ltc6812_Read8();
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	1c5c      	adds	r4, r3, #1
 8003314:	f7ff feba 	bl	800308c <ltc6812_Read8>
 8003318:	4603      	mov	r3, r0
 800331a:	7023      	strb	r3, [r4, #0]
	data_out[2]= ltc6812_Read8();
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	1c9c      	adds	r4, r3, #2
 8003320:	f7ff feb4 	bl	800308c <ltc6812_Read8>
 8003324:	4603      	mov	r3, r0
 8003326:	7023      	strb	r3, [r4, #0]
	data_out[3]= ltc6812_Read8();
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	1cdc      	adds	r4, r3, #3
 800332c:	f7ff feae 	bl	800308c <ltc6812_Read8>
 8003330:	4603      	mov	r3, r0
 8003332:	7023      	strb	r3, [r4, #0]
	data_out[4]= ltc6812_Read8();
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	1d1c      	adds	r4, r3, #4
 8003338:	f7ff fea8 	bl	800308c <ltc6812_Read8>
 800333c:	4603      	mov	r3, r0
 800333e:	7023      	strb	r3, [r4, #0]
	data_out[5]= ltc6812_Read8();
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	1d5c      	adds	r4, r3, #5
 8003344:	f7ff fea2 	bl	800308c <ltc6812_Read8>
 8003348:	4603      	mov	r3, r0
 800334a:	7023      	strb	r3, [r4, #0]
	data_out[6]= ltc6812_Read8();
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	1d9c      	adds	r4, r3, #6
 8003350:	f7ff fe9c 	bl	800308c <ltc6812_Read8>
 8003354:	4603      	mov	r3, r0
 8003356:	7023      	strb	r3, [r4, #0]
	data_out[7]= ltc6812_Read8();
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	1ddc      	adds	r4, r3, #7
 800335c:	f7ff fe96 	bl	800308c <ltc6812_Read8>
 8003360:	4603      	mov	r3, r0
 8003362:	7023      	strb	r3, [r4, #0]
	
  ltc6812_CS_SET(ltc6812_CS_PIN);
 8003364:	2201      	movs	r2, #1
 8003366:	2101      	movs	r1, #1
 8003368:	4803      	ldr	r0, [pc, #12]	; (8003378 <LTC681x_rdcv_reg_emul+0x12c>)
 800336a:	f005 fa10 	bl	800878e <HAL_GPIO_WritePin>
	
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	bd90      	pop	{r4, r7, pc}
 8003376:	bf00      	nop
 8003378:	40010c00 	.word	0x40010c00
 800337c:	00000000 	.word	0x00000000

08003380 <read_v_15cell>:
	cell_data[ccc]=v_cell_digi*0.0001;
	
}

void read_v_15cell(uint16_t v_cell_digi[15],float vcell_data[15])
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
		uint8_t cmd_v[8];
		uint8_t cc=0;
 800338a:	2300      	movs	r3, #0
 800338c:	75fb      	strb	r3, [r7, #23]
		
		HAL_GPIO_WritePin(CS_SPI1_GPIO_Port,CS_SPI1_Pin,GPIO_PIN_RESET);
 800338e:	2200      	movs	r2, #0
 8003390:	2101      	movs	r1, #1
 8003392:	48c7      	ldr	r0, [pc, #796]	; (80036b0 <read_v_15cell+0x330>)
 8003394:	f005 f9fb 	bl	800878e <HAL_GPIO_WritePin>
		cmd2[0]=0x07;
 8003398:	4bc6      	ldr	r3, [pc, #792]	; (80036b4 <read_v_15cell+0x334>)
 800339a:	2207      	movs	r2, #7
 800339c:	701a      	strb	r2, [r3, #0]
		cmd2[1]=0x23;
 800339e:	4bc5      	ldr	r3, [pc, #788]	; (80036b4 <read_v_15cell+0x334>)
 80033a0:	2223      	movs	r2, #35	; 0x23
 80033a2:	705a      	strb	r2, [r3, #1]
		cmd_68_emul(cmd2);	
 80033a4:	48c3      	ldr	r0, [pc, #780]	; (80036b4 <read_v_15cell+0x334>)
 80033a6:	f7ff fee3 	bl	8003170 <cmd_68_emul>
		HAL_Delay(1);
 80033aa:	2001      	movs	r0, #1
 80033ac:	f003 fad0 	bl	8006950 <HAL_Delay>
		LTC681x_adcv_emul(0,1,0);
 80033b0:	2200      	movs	r2, #0
 80033b2:	2101      	movs	r1, #1
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7ff feaf 	bl	8003118 <LTC681x_adcv_emul>
		HAL_Delay(700);
 80033ba:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80033be:	f003 fac7 	bl	8006950 <HAL_Delay>
	
		LTC681x_rdcv_reg_emul(1,1,cmd_v);
 80033c2:	f107 030c 	add.w	r3, r7, #12
 80033c6:	461a      	mov	r2, r3
 80033c8:	2101      	movs	r1, #1
 80033ca:	2001      	movs	r0, #1
 80033cc:	f7ff ff3e 	bl	800324c <LTC681x_rdcv_reg_emul>
		
		v_cell_digi[cc]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc];
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	3301      	adds	r3, #1
 80033d6:	f107 0218 	add.w	r2, r7, #24
 80033da:	4413      	add	r3, r2
 80033dc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	7dfa      	ldrb	r2, [r7, #23]
 80033e4:	0052      	lsls	r2, r2, #1
 80033e6:	f107 0118 	add.w	r1, r7, #24
 80033ea:	440a      	add	r2, r1
 80033ec:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd fc52 	bl	8000c9c <__aeabi_i2f>
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
 80033fa:	4aaf      	ldr	r2, [pc, #700]	; (80036b8 <read_v_15cell+0x338>)
 80033fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003400:	4619      	mov	r1, r3
 8003402:	f7fd fb95 	bl	8000b30 <__aeabi_fsub>
 8003406:	4603      	mov	r3, r0
 8003408:	4619      	mov	r1, r3
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	18d4      	adds	r4, r2, r3
 8003412:	4608      	mov	r0, r1
 8003414:	f7fd fe82 	bl	800111c <__aeabi_f2uiz>
 8003418:	4603      	mov	r3, r0
 800341a:	b29b      	uxth	r3, r3
 800341c:	8023      	strh	r3, [r4, #0]
		vcell_data[cc]=v_cell_digi[cc]*0.0001;
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7fc ffeb 	bl	8000404 <__aeabi_i2d>
 800342e:	a39e      	add	r3, pc, #632	; (adr r3, 80036a8 <read_v_15cell+0x328>)
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f7fd f850 	bl	80004d8 <__aeabi_dmul>
 8003438:	4603      	mov	r3, r0
 800343a:	460c      	mov	r4, r1
 800343c:	4618      	mov	r0, r3
 800343e:	4621      	mov	r1, r4
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	18d4      	adds	r4, r2, r3
 8003448:	f7fd fb1e 	bl	8000a88 <__aeabi_d2f>
 800344c:	4603      	mov	r3, r0
 800344e:	6023      	str	r3, [r4, #0]
		cc++;
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	3301      	adds	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc];
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	3301      	adds	r3, #1
 800345c:	f107 0218 	add.w	r2, r7, #24
 8003460:	4413      	add	r3, r2
 8003462:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	7dfa      	ldrb	r2, [r7, #23]
 800346a:	0052      	lsls	r2, r2, #1
 800346c:	f107 0118 	add.w	r1, r7, #24
 8003470:	440a      	add	r2, r1
 8003472:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003476:	4313      	orrs	r3, r2
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd fc0f 	bl	8000c9c <__aeabi_i2f>
 800347e:	7dfb      	ldrb	r3, [r7, #23]
 8003480:	4a8d      	ldr	r2, [pc, #564]	; (80036b8 <read_v_15cell+0x338>)
 8003482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003486:	4619      	mov	r1, r3
 8003488:	f7fd fb52 	bl	8000b30 <__aeabi_fsub>
 800348c:	4603      	mov	r3, r0
 800348e:	4619      	mov	r1, r3
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	18d4      	adds	r4, r2, r3
 8003498:	4608      	mov	r0, r1
 800349a:	f7fd fe3f 	bl	800111c <__aeabi_f2uiz>
 800349e:	4603      	mov	r3, r0
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	8023      	strh	r3, [r4, #0]
		vcell_data[cc]=v_cell_digi[cc]*0.0001;
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4413      	add	r3, r2
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fc ffa8 	bl	8000404 <__aeabi_i2d>
 80034b4:	a37c      	add	r3, pc, #496	; (adr r3, 80036a8 <read_v_15cell+0x328>)
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f7fd f80d 	bl	80004d8 <__aeabi_dmul>
 80034be:	4603      	mov	r3, r0
 80034c0:	460c      	mov	r4, r1
 80034c2:	4618      	mov	r0, r3
 80034c4:	4621      	mov	r1, r4
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	18d4      	adds	r4, r2, r3
 80034ce:	f7fd fadb 	bl	8000a88 <__aeabi_d2f>
 80034d2:	4603      	mov	r3, r0
 80034d4:	6023      	str	r3, [r4, #0]
		cc++;
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	3301      	adds	r3, #1
 80034da:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc];
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	3301      	adds	r3, #1
 80034e2:	f107 0218 	add.w	r2, r7, #24
 80034e6:	4413      	add	r3, r2
 80034e8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	7dfa      	ldrb	r2, [r7, #23]
 80034f0:	0052      	lsls	r2, r2, #1
 80034f2:	f107 0118 	add.w	r1, r7, #24
 80034f6:	440a      	add	r2, r1
 80034f8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fd fbcc 	bl	8000c9c <__aeabi_i2f>
 8003504:	7dfb      	ldrb	r3, [r7, #23]
 8003506:	4a6c      	ldr	r2, [pc, #432]	; (80036b8 <read_v_15cell+0x338>)
 8003508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350c:	4619      	mov	r1, r3
 800350e:	f7fd fb0f 	bl	8000b30 <__aeabi_fsub>
 8003512:	4603      	mov	r3, r0
 8003514:	4619      	mov	r1, r3
 8003516:	7dfb      	ldrb	r3, [r7, #23]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	18d4      	adds	r4, r2, r3
 800351e:	4608      	mov	r0, r1
 8003520:	f7fd fdfc 	bl	800111c <__aeabi_f2uiz>
 8003524:	4603      	mov	r3, r0
 8003526:	b29b      	uxth	r3, r3
 8003528:	8023      	strh	r3, [r4, #0]
		vcell_data[cc]=v_cell_digi[cc]*0.0001;
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fc ff65 	bl	8000404 <__aeabi_i2d>
 800353a:	a35b      	add	r3, pc, #364	; (adr r3, 80036a8 <read_v_15cell+0x328>)
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f7fc ffca 	bl	80004d8 <__aeabi_dmul>
 8003544:	4603      	mov	r3, r0
 8003546:	460c      	mov	r4, r1
 8003548:	4618      	mov	r0, r3
 800354a:	4621      	mov	r1, r4
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	18d4      	adds	r4, r2, r3
 8003554:	f7fd fa98 	bl	8000a88 <__aeabi_d2f>
 8003558:	4603      	mov	r3, r0
 800355a:	6023      	str	r3, [r4, #0]
		cc++;
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	3301      	adds	r3, #1
 8003560:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(2,1,cmd_v);
 8003562:	f107 030c 	add.w	r3, r7, #12
 8003566:	461a      	mov	r2, r3
 8003568:	2101      	movs	r1, #1
 800356a:	2002      	movs	r0, #2
 800356c:	f7ff fe6e 	bl	800324c <LTC681x_rdcv_reg_emul>
		cc=0;
 8003570:	2300      	movs	r3, #0
 8003572:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+3]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+3];
 8003574:	7dfb      	ldrb	r3, [r7, #23]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	3301      	adds	r3, #1
 800357a:	f107 0218 	add.w	r2, r7, #24
 800357e:	4413      	add	r3, r2
 8003580:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	7dfa      	ldrb	r2, [r7, #23]
 8003588:	0052      	lsls	r2, r2, #1
 800358a:	f107 0118 	add.w	r1, r7, #24
 800358e:	440a      	add	r2, r1
 8003590:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003594:	4313      	orrs	r3, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fb80 	bl	8000c9c <__aeabi_i2f>
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	3303      	adds	r3, #3
 80035a0:	4a45      	ldr	r2, [pc, #276]	; (80036b8 <read_v_15cell+0x338>)
 80035a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a6:	4619      	mov	r1, r3
 80035a8:	f7fd fac2 	bl	8000b30 <__aeabi_fsub>
 80035ac:	4603      	mov	r3, r0
 80035ae:	4619      	mov	r1, r3
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	3303      	adds	r3, #3
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	18d4      	adds	r4, r2, r3
 80035ba:	4608      	mov	r0, r1
 80035bc:	f7fd fdae 	bl	800111c <__aeabi_f2uiz>
 80035c0:	4603      	mov	r3, r0
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+3]=v_cell_digi[cc+3]*0.0001;
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
 80035c8:	3303      	adds	r3, #3
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4413      	add	r3, r2
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fc ff16 	bl	8000404 <__aeabi_i2d>
 80035d8:	a333      	add	r3, pc, #204	; (adr r3, 80036a8 <read_v_15cell+0x328>)
 80035da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035de:	f7fc ff7b 	bl	80004d8 <__aeabi_dmul>
 80035e2:	4603      	mov	r3, r0
 80035e4:	460c      	mov	r4, r1
 80035e6:	4618      	mov	r0, r3
 80035e8:	4621      	mov	r1, r4
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	3303      	adds	r3, #3
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	18d4      	adds	r4, r2, r3
 80035f4:	f7fd fa48 	bl	8000a88 <__aeabi_d2f>
 80035f8:	4603      	mov	r3, r0
 80035fa:	6023      	str	r3, [r4, #0]
		cc++;
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	3301      	adds	r3, #1
 8003600:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+3]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+3];
 8003602:	7dfb      	ldrb	r3, [r7, #23]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	3301      	adds	r3, #1
 8003608:	f107 0218 	add.w	r2, r7, #24
 800360c:	4413      	add	r3, r2
 800360e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	7dfa      	ldrb	r2, [r7, #23]
 8003616:	0052      	lsls	r2, r2, #1
 8003618:	f107 0118 	add.w	r1, r7, #24
 800361c:	440a      	add	r2, r1
 800361e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003622:	4313      	orrs	r3, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f7fd fb39 	bl	8000c9c <__aeabi_i2f>
 800362a:	7dfb      	ldrb	r3, [r7, #23]
 800362c:	3303      	adds	r3, #3
 800362e:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <read_v_15cell+0x338>)
 8003630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003634:	4619      	mov	r1, r3
 8003636:	f7fd fa7b 	bl	8000b30 <__aeabi_fsub>
 800363a:	4603      	mov	r3, r0
 800363c:	4619      	mov	r1, r3
 800363e:	7dfb      	ldrb	r3, [r7, #23]
 8003640:	3303      	adds	r3, #3
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	18d4      	adds	r4, r2, r3
 8003648:	4608      	mov	r0, r1
 800364a:	f7fd fd67 	bl	800111c <__aeabi_f2uiz>
 800364e:	4603      	mov	r3, r0
 8003650:	b29b      	uxth	r3, r3
 8003652:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+3]=v_cell_digi[cc+3]*0.0001;
 8003654:	7dfb      	ldrb	r3, [r7, #23]
 8003656:	3303      	adds	r3, #3
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	4413      	add	r3, r2
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fc fecf 	bl	8000404 <__aeabi_i2d>
 8003666:	a310      	add	r3, pc, #64	; (adr r3, 80036a8 <read_v_15cell+0x328>)
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f7fc ff34 	bl	80004d8 <__aeabi_dmul>
 8003670:	4603      	mov	r3, r0
 8003672:	460c      	mov	r4, r1
 8003674:	4618      	mov	r0, r3
 8003676:	4621      	mov	r1, r4
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	3303      	adds	r3, #3
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	18d4      	adds	r4, r2, r3
 8003682:	f7fd fa01 	bl	8000a88 <__aeabi_d2f>
 8003686:	4603      	mov	r3, r0
 8003688:	6023      	str	r3, [r4, #0]
		cc++;
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	3301      	adds	r3, #1
 800368e:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+3]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+3];
 8003690:	7dfb      	ldrb	r3, [r7, #23]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	3301      	adds	r3, #1
 8003696:	f107 0218 	add.w	r2, r7, #24
 800369a:	4413      	add	r3, r2
 800369c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	e00b      	b.n	80036bc <read_v_15cell+0x33c>
 80036a4:	f3af 8000 	nop.w
 80036a8:	eb1c432d 	.word	0xeb1c432d
 80036ac:	3f1a36e2 	.word	0x3f1a36e2
 80036b0:	40010c00 	.word	0x40010c00
 80036b4:	20000be4 	.word	0x20000be4
 80036b8:	20000014 	.word	0x20000014
 80036bc:	7dfa      	ldrb	r2, [r7, #23]
 80036be:	0052      	lsls	r2, r2, #1
 80036c0:	f107 0118 	add.w	r1, r7, #24
 80036c4:	440a      	add	r2, r1
 80036c6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fd fae5 	bl	8000c9c <__aeabi_i2f>
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	3303      	adds	r3, #3
 80036d6:	4ac6      	ldr	r2, [pc, #792]	; (80039f0 <read_v_15cell+0x670>)
 80036d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036dc:	4619      	mov	r1, r3
 80036de:	f7fd fa27 	bl	8000b30 <__aeabi_fsub>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4619      	mov	r1, r3
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	3303      	adds	r3, #3
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	18d4      	adds	r4, r2, r3
 80036f0:	4608      	mov	r0, r1
 80036f2:	f7fd fd13 	bl	800111c <__aeabi_f2uiz>
 80036f6:	4603      	mov	r3, r0
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+3]=v_cell_digi[cc+3]*0.0001;
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	3303      	adds	r3, #3
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc fe7b 	bl	8000404 <__aeabi_i2d>
 800370e:	a3b6      	add	r3, pc, #728	; (adr r3, 80039e8 <read_v_15cell+0x668>)
 8003710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003714:	f7fc fee0 	bl	80004d8 <__aeabi_dmul>
 8003718:	4603      	mov	r3, r0
 800371a:	460c      	mov	r4, r1
 800371c:	4618      	mov	r0, r3
 800371e:	4621      	mov	r1, r4
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	3303      	adds	r3, #3
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	18d4      	adds	r4, r2, r3
 800372a:	f7fd f9ad 	bl	8000a88 <__aeabi_d2f>
 800372e:	4603      	mov	r3, r0
 8003730:	6023      	str	r3, [r4, #0]
		cc++;
 8003732:	7dfb      	ldrb	r3, [r7, #23]
 8003734:	3301      	adds	r3, #1
 8003736:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(3,1,cmd_v);
 8003738:	f107 030c 	add.w	r3, r7, #12
 800373c:	461a      	mov	r2, r3
 800373e:	2101      	movs	r1, #1
 8003740:	2003      	movs	r0, #3
 8003742:	f7ff fd83 	bl	800324c <LTC681x_rdcv_reg_emul>
		cc=0;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+6]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+6];
 800374a:	7dfb      	ldrb	r3, [r7, #23]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	3301      	adds	r3, #1
 8003750:	f107 0218 	add.w	r2, r7, #24
 8003754:	4413      	add	r3, r2
 8003756:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	7dfa      	ldrb	r2, [r7, #23]
 800375e:	0052      	lsls	r2, r2, #1
 8003760:	f107 0118 	add.w	r1, r7, #24
 8003764:	440a      	add	r2, r1
 8003766:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800376a:	4313      	orrs	r3, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f7fd fa95 	bl	8000c9c <__aeabi_i2f>
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	3306      	adds	r3, #6
 8003776:	4a9e      	ldr	r2, [pc, #632]	; (80039f0 <read_v_15cell+0x670>)
 8003778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377c:	4619      	mov	r1, r3
 800377e:	f7fd f9d7 	bl	8000b30 <__aeabi_fsub>
 8003782:	4603      	mov	r3, r0
 8003784:	4619      	mov	r1, r3
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	3306      	adds	r3, #6
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	18d4      	adds	r4, r2, r3
 8003790:	4608      	mov	r0, r1
 8003792:	f7fd fcc3 	bl	800111c <__aeabi_f2uiz>
 8003796:	4603      	mov	r3, r0
 8003798:	b29b      	uxth	r3, r3
 800379a:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+6]=v_cell_digi[cc+6]*0.0001;
 800379c:	7dfb      	ldrb	r3, [r7, #23]
 800379e:	3306      	adds	r3, #6
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fc fe2b 	bl	8000404 <__aeabi_i2d>
 80037ae:	a38e      	add	r3, pc, #568	; (adr r3, 80039e8 <read_v_15cell+0x668>)
 80037b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b4:	f7fc fe90 	bl	80004d8 <__aeabi_dmul>
 80037b8:	4603      	mov	r3, r0
 80037ba:	460c      	mov	r4, r1
 80037bc:	4618      	mov	r0, r3
 80037be:	4621      	mov	r1, r4
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	3306      	adds	r3, #6
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	18d4      	adds	r4, r2, r3
 80037ca:	f7fd f95d 	bl	8000a88 <__aeabi_d2f>
 80037ce:	4603      	mov	r3, r0
 80037d0:	6023      	str	r3, [r4, #0]
		cc++;
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	3301      	adds	r3, #1
 80037d6:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+6]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+6];
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	3301      	adds	r3, #1
 80037de:	f107 0218 	add.w	r2, r7, #24
 80037e2:	4413      	add	r3, r2
 80037e4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	7dfa      	ldrb	r2, [r7, #23]
 80037ec:	0052      	lsls	r2, r2, #1
 80037ee:	f107 0118 	add.w	r1, r7, #24
 80037f2:	440a      	add	r2, r1
 80037f4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fd fa4e 	bl	8000c9c <__aeabi_i2f>
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	3306      	adds	r3, #6
 8003804:	4a7a      	ldr	r2, [pc, #488]	; (80039f0 <read_v_15cell+0x670>)
 8003806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380a:	4619      	mov	r1, r3
 800380c:	f7fd f990 	bl	8000b30 <__aeabi_fsub>
 8003810:	4603      	mov	r3, r0
 8003812:	4619      	mov	r1, r3
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	3306      	adds	r3, #6
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	18d4      	adds	r4, r2, r3
 800381e:	4608      	mov	r0, r1
 8003820:	f7fd fc7c 	bl	800111c <__aeabi_f2uiz>
 8003824:	4603      	mov	r3, r0
 8003826:	b29b      	uxth	r3, r3
 8003828:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+6]=v_cell_digi[cc+6]*0.0001;
 800382a:	7dfb      	ldrb	r3, [r7, #23]
 800382c:	3306      	adds	r3, #6
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4413      	add	r3, r2
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fc fde4 	bl	8000404 <__aeabi_i2d>
 800383c:	a36a      	add	r3, pc, #424	; (adr r3, 80039e8 <read_v_15cell+0x668>)
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	f7fc fe49 	bl	80004d8 <__aeabi_dmul>
 8003846:	4603      	mov	r3, r0
 8003848:	460c      	mov	r4, r1
 800384a:	4618      	mov	r0, r3
 800384c:	4621      	mov	r1, r4
 800384e:	7dfb      	ldrb	r3, [r7, #23]
 8003850:	3306      	adds	r3, #6
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	18d4      	adds	r4, r2, r3
 8003858:	f7fd f916 	bl	8000a88 <__aeabi_d2f>
 800385c:	4603      	mov	r3, r0
 800385e:	6023      	str	r3, [r4, #0]
		cc++;
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	3301      	adds	r3, #1
 8003864:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+6]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+6];
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	3301      	adds	r3, #1
 800386c:	f107 0218 	add.w	r2, r7, #24
 8003870:	4413      	add	r3, r2
 8003872:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	7dfa      	ldrb	r2, [r7, #23]
 800387a:	0052      	lsls	r2, r2, #1
 800387c:	f107 0118 	add.w	r1, r7, #24
 8003880:	440a      	add	r2, r1
 8003882:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003886:	4313      	orrs	r3, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f7fd fa07 	bl	8000c9c <__aeabi_i2f>
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	3306      	adds	r3, #6
 8003892:	4a57      	ldr	r2, [pc, #348]	; (80039f0 <read_v_15cell+0x670>)
 8003894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003898:	4619      	mov	r1, r3
 800389a:	f7fd f949 	bl	8000b30 <__aeabi_fsub>
 800389e:	4603      	mov	r3, r0
 80038a0:	4619      	mov	r1, r3
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	3306      	adds	r3, #6
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	18d4      	adds	r4, r2, r3
 80038ac:	4608      	mov	r0, r1
 80038ae:	f7fd fc35 	bl	800111c <__aeabi_f2uiz>
 80038b2:	4603      	mov	r3, r0
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+6]=v_cell_digi[cc+6]*0.0001;
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	3306      	adds	r3, #6
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	4413      	add	r3, r2
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fc fd9d 	bl	8000404 <__aeabi_i2d>
 80038ca:	a347      	add	r3, pc, #284	; (adr r3, 80039e8 <read_v_15cell+0x668>)
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f7fc fe02 	bl	80004d8 <__aeabi_dmul>
 80038d4:	4603      	mov	r3, r0
 80038d6:	460c      	mov	r4, r1
 80038d8:	4618      	mov	r0, r3
 80038da:	4621      	mov	r1, r4
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
 80038de:	3306      	adds	r3, #6
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	18d4      	adds	r4, r2, r3
 80038e6:	f7fd f8cf 	bl	8000a88 <__aeabi_d2f>
 80038ea:	4603      	mov	r3, r0
 80038ec:	6023      	str	r3, [r4, #0]
		cc++;
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
 80038f0:	3301      	adds	r3, #1
 80038f2:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(4,1,cmd_v);
 80038f4:	f107 030c 	add.w	r3, r7, #12
 80038f8:	461a      	mov	r2, r3
 80038fa:	2101      	movs	r1, #1
 80038fc:	2004      	movs	r0, #4
 80038fe:	f7ff fca5 	bl	800324c <LTC681x_rdcv_reg_emul>
		cc=0;
 8003902:	2300      	movs	r3, #0
 8003904:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+9]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+9];
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	3301      	adds	r3, #1
 800390c:	f107 0218 	add.w	r2, r7, #24
 8003910:	4413      	add	r3, r2
 8003912:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	7dfa      	ldrb	r2, [r7, #23]
 800391a:	0052      	lsls	r2, r2, #1
 800391c:	f107 0118 	add.w	r1, r7, #24
 8003920:	440a      	add	r2, r1
 8003922:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003926:	4313      	orrs	r3, r2
 8003928:	4618      	mov	r0, r3
 800392a:	f7fd f9b7 	bl	8000c9c <__aeabi_i2f>
 800392e:	7dfb      	ldrb	r3, [r7, #23]
 8003930:	3309      	adds	r3, #9
 8003932:	4a2f      	ldr	r2, [pc, #188]	; (80039f0 <read_v_15cell+0x670>)
 8003934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003938:	4619      	mov	r1, r3
 800393a:	f7fd f8f9 	bl	8000b30 <__aeabi_fsub>
 800393e:	4603      	mov	r3, r0
 8003940:	4619      	mov	r1, r3
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	3309      	adds	r3, #9
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	18d4      	adds	r4, r2, r3
 800394c:	4608      	mov	r0, r1
 800394e:	f7fd fbe5 	bl	800111c <__aeabi_f2uiz>
 8003952:	4603      	mov	r3, r0
 8003954:	b29b      	uxth	r3, r3
 8003956:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+9]=v_cell_digi[cc+9]*0.0001;
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	3309      	adds	r3, #9
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7fc fd4d 	bl	8000404 <__aeabi_i2d>
 800396a:	a31f      	add	r3, pc, #124	; (adr r3, 80039e8 <read_v_15cell+0x668>)
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f7fc fdb2 	bl	80004d8 <__aeabi_dmul>
 8003974:	4603      	mov	r3, r0
 8003976:	460c      	mov	r4, r1
 8003978:	4618      	mov	r0, r3
 800397a:	4621      	mov	r1, r4
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	3309      	adds	r3, #9
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	18d4      	adds	r4, r2, r3
 8003986:	f7fd f87f 	bl	8000a88 <__aeabi_d2f>
 800398a:	4603      	mov	r3, r0
 800398c:	6023      	str	r3, [r4, #0]
		cc++;
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	3301      	adds	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+9]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+9];
 8003994:	7dfb      	ldrb	r3, [r7, #23]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	3301      	adds	r3, #1
 800399a:	f107 0218 	add.w	r2, r7, #24
 800399e:	4413      	add	r3, r2
 80039a0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	7dfa      	ldrb	r2, [r7, #23]
 80039a8:	0052      	lsls	r2, r2, #1
 80039aa:	f107 0118 	add.w	r1, r7, #24
 80039ae:	440a      	add	r2, r1
 80039b0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd f970 	bl	8000c9c <__aeabi_i2f>
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	3309      	adds	r3, #9
 80039c0:	4a0b      	ldr	r2, [pc, #44]	; (80039f0 <read_v_15cell+0x670>)
 80039c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c6:	4619      	mov	r1, r3
 80039c8:	f7fd f8b2 	bl	8000b30 <__aeabi_fsub>
 80039cc:	4603      	mov	r3, r0
 80039ce:	4619      	mov	r1, r3
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	3309      	adds	r3, #9
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	18d4      	adds	r4, r2, r3
 80039da:	4608      	mov	r0, r1
 80039dc:	f7fd fb9e 	bl	800111c <__aeabi_f2uiz>
 80039e0:	4603      	mov	r3, r0
 80039e2:	e007      	b.n	80039f4 <read_v_15cell+0x674>
 80039e4:	f3af 8000 	nop.w
 80039e8:	eb1c432d 	.word	0xeb1c432d
 80039ec:	3f1a36e2 	.word	0x3f1a36e2
 80039f0:	20000014 	.word	0x20000014
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+9]=v_cell_digi[cc+9]*0.0001;
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	3309      	adds	r3, #9
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fc fcfd 	bl	8000404 <__aeabi_i2d>
 8003a0a:	a3a1      	add	r3, pc, #644	; (adr r3, 8003c90 <read_v_15cell+0x910>)
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f7fc fd62 	bl	80004d8 <__aeabi_dmul>
 8003a14:	4603      	mov	r3, r0
 8003a16:	460c      	mov	r4, r1
 8003a18:	4618      	mov	r0, r3
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	3309      	adds	r3, #9
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	18d4      	adds	r4, r2, r3
 8003a26:	f7fd f82f 	bl	8000a88 <__aeabi_d2f>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	6023      	str	r3, [r4, #0]
		cc++;
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	3301      	adds	r3, #1
 8003a32:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+9]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+9];
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	3301      	adds	r3, #1
 8003a3a:	f107 0218 	add.w	r2, r7, #24
 8003a3e:	4413      	add	r3, r2
 8003a40:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	7dfa      	ldrb	r2, [r7, #23]
 8003a48:	0052      	lsls	r2, r2, #1
 8003a4a:	f107 0118 	add.w	r1, r7, #24
 8003a4e:	440a      	add	r2, r1
 8003a50:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd f920 	bl	8000c9c <__aeabi_i2f>
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	3309      	adds	r3, #9
 8003a60:	4a8d      	ldr	r2, [pc, #564]	; (8003c98 <read_v_15cell+0x918>)
 8003a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a66:	4619      	mov	r1, r3
 8003a68:	f7fd f862 	bl	8000b30 <__aeabi_fsub>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4619      	mov	r1, r3
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	3309      	adds	r3, #9
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	18d4      	adds	r4, r2, r3
 8003a7a:	4608      	mov	r0, r1
 8003a7c:	f7fd fb4e 	bl	800111c <__aeabi_f2uiz>
 8003a80:	4603      	mov	r3, r0
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+9]=v_cell_digi[cc+9]*0.0001;
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	3309      	adds	r3, #9
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	4413      	add	r3, r2
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fc fcb6 	bl	8000404 <__aeabi_i2d>
 8003a98:	a37d      	add	r3, pc, #500	; (adr r3, 8003c90 <read_v_15cell+0x910>)
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	f7fc fd1b 	bl	80004d8 <__aeabi_dmul>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
 8003aac:	3309      	adds	r3, #9
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	18d4      	adds	r4, r2, r3
 8003ab4:	f7fc ffe8 	bl	8000a88 <__aeabi_d2f>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	6023      	str	r3, [r4, #0]
		cc++;
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	75fb      	strb	r3, [r7, #23]
		
		LTC681x_rdcv_reg_emul(5,1,cmd_v);
 8003ac2:	f107 030c 	add.w	r3, r7, #12
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2101      	movs	r1, #1
 8003aca:	2005      	movs	r0, #5
 8003acc:	f7ff fbbe 	bl	800324c <LTC681x_rdcv_reg_emul>
		cc=0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	75fb      	strb	r3, [r7, #23]
		
		v_cell_digi[cc+12]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+12];
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	3301      	adds	r3, #1
 8003ada:	f107 0218 	add.w	r2, r7, #24
 8003ade:	4413      	add	r3, r2
 8003ae0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	7dfa      	ldrb	r2, [r7, #23]
 8003ae8:	0052      	lsls	r2, r2, #1
 8003aea:	f107 0118 	add.w	r1, r7, #24
 8003aee:	440a      	add	r2, r1
 8003af0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fd f8d0 	bl	8000c9c <__aeabi_i2f>
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	330c      	adds	r3, #12
 8003b00:	4a65      	ldr	r2, [pc, #404]	; (8003c98 <read_v_15cell+0x918>)
 8003b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b06:	4619      	mov	r1, r3
 8003b08:	f7fd f812 	bl	8000b30 <__aeabi_fsub>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	4619      	mov	r1, r3
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
 8003b12:	330c      	adds	r3, #12
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	18d4      	adds	r4, r2, r3
 8003b1a:	4608      	mov	r0, r1
 8003b1c:	f7fd fafe 	bl	800111c <__aeabi_f2uiz>
 8003b20:	4603      	mov	r3, r0
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+12]=v_cell_digi[cc+12]*0.0001;
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	330c      	adds	r3, #12
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	4413      	add	r3, r2
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fc fc66 	bl	8000404 <__aeabi_i2d>
 8003b38:	a355      	add	r3, pc, #340	; (adr r3, 8003c90 <read_v_15cell+0x910>)
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f7fc fccb 	bl	80004d8 <__aeabi_dmul>
 8003b42:	4603      	mov	r3, r0
 8003b44:	460c      	mov	r4, r1
 8003b46:	4618      	mov	r0, r3
 8003b48:	4621      	mov	r1, r4
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	18d4      	adds	r4, r2, r3
 8003b54:	f7fc ff98 	bl	8000a88 <__aeabi_d2f>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	6023      	str	r3, [r4, #0]
		cc++;
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+12]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+12];
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	3301      	adds	r3, #1
 8003b68:	f107 0218 	add.w	r2, r7, #24
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	7dfa      	ldrb	r2, [r7, #23]
 8003b76:	0052      	lsls	r2, r2, #1
 8003b78:	f107 0118 	add.w	r1, r7, #24
 8003b7c:	440a      	add	r2, r1
 8003b7e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fd f889 	bl	8000c9c <__aeabi_i2f>
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	330c      	adds	r3, #12
 8003b8e:	4a42      	ldr	r2, [pc, #264]	; (8003c98 <read_v_15cell+0x918>)
 8003b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b94:	4619      	mov	r1, r3
 8003b96:	f7fc ffcb 	bl	8000b30 <__aeabi_fsub>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	18d4      	adds	r4, r2, r3
 8003ba8:	4608      	mov	r0, r1
 8003baa:	f7fd fab7 	bl	800111c <__aeabi_f2uiz>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+12]=v_cell_digi[cc+12]*0.0001;
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fc fc1f 	bl	8000404 <__aeabi_i2d>
 8003bc6:	a332      	add	r3, pc, #200	; (adr r3, 8003c90 <read_v_15cell+0x910>)
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f7fc fc84 	bl	80004d8 <__aeabi_dmul>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
 8003bda:	330c      	adds	r3, #12
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	18d4      	adds	r4, r2, r3
 8003be2:	f7fc ff51 	bl	8000a88 <__aeabi_d2f>
 8003be6:	4603      	mov	r3, r0
 8003be8:	6023      	str	r3, [r4, #0]
		cc++;
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	3301      	adds	r3, #1
 8003bee:	75fb      	strb	r3, [r7, #23]
	
		v_cell_digi[cc+12]=(cmd_v[2*cc+1]<<8|cmd_v[2*cc])-minus_offset[cc+12];
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f107 0218 	add.w	r2, r7, #24
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	7dfa      	ldrb	r2, [r7, #23]
 8003c04:	0052      	lsls	r2, r2, #1
 8003c06:	f107 0118 	add.w	r1, r7, #24
 8003c0a:	440a      	add	r2, r1
 8003c0c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fd f842 	bl	8000c9c <__aeabi_i2f>
 8003c18:	7dfb      	ldrb	r3, [r7, #23]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	4a1e      	ldr	r2, [pc, #120]	; (8003c98 <read_v_15cell+0x918>)
 8003c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c22:	4619      	mov	r1, r3
 8003c24:	f7fc ff84 	bl	8000b30 <__aeabi_fsub>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	18d4      	adds	r4, r2, r3
 8003c36:	4608      	mov	r0, r1
 8003c38:	f7fd fa70 	bl	800111c <__aeabi_f2uiz>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	8023      	strh	r3, [r4, #0]
		vcell_data[cc+12]=v_cell_digi[cc+12]*0.0001;
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
 8003c44:	330c      	adds	r3, #12
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fc fbd8 	bl	8000404 <__aeabi_i2d>
 8003c54:	a30e      	add	r3, pc, #56	; (adr r3, 8003c90 <read_v_15cell+0x910>)
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	f7fc fc3d 	bl	80004d8 <__aeabi_dmul>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	460c      	mov	r4, r1
 8003c62:	4618      	mov	r0, r3
 8003c64:	4621      	mov	r1, r4
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
 8003c68:	330c      	adds	r3, #12
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	18d4      	adds	r4, r2, r3
 8003c70:	f7fc ff0a 	bl	8000a88 <__aeabi_d2f>
 8003c74:	4603      	mov	r3, r0
 8003c76:	6023      	str	r3, [r4, #0]
		cc++;
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
		
		HAL_GPIO_WritePin(CS_SPI1_GPIO_Port,CS_SPI1_Pin,GPIO_PIN_SET);
 8003c7e:	2201      	movs	r2, #1
 8003c80:	2101      	movs	r1, #1
 8003c82:	4806      	ldr	r0, [pc, #24]	; (8003c9c <read_v_15cell+0x91c>)
 8003c84:	f004 fd83 	bl	800878e <HAL_GPIO_WritePin>
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd90      	pop	{r4, r7, pc}
 8003c90:	eb1c432d 	.word	0xeb1c432d
 8003c94:	3f1a36e2 	.word	0x3f1a36e2
 8003c98:	20000014 	.word	0x20000014
 8003c9c:	40010c00 	.word	0x40010c00

08003ca0 <LTC681x_wrcfga_reg_emul>:
	
}

void LTC681x_wrcfga_reg_emul( uint8_t CFGA4, uint8_t CFGA5
                     )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	460a      	mov	r2, r1
 8003caa:	71fb      	strb	r3, [r7, #7]
 8003cac:	4613      	mov	r3, r2
 8003cae:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t data_in[8];

	cmd[1] = 0x01;  //WRCFGA
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	757b      	strb	r3, [r7, #21]
	cmd[0] = 0x00;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	753b      	strb	r3, [r7, #20]
	
	cmd_pec = pec15_calc_emul(2, cmd);
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	2002      	movs	r0, #2
 8003cc0:	f7ff fa90 	bl	80031e4 <pec15_calc_emul>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	837b      	strh	r3, [r7, #26]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003cc8:	8b7b      	ldrh	r3, [r7, #26]
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t)(cmd_pec);
 8003cd2:	8b7b      	ldrh	r3, [r7, #26]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	75fb      	strb	r3, [r7, #23]

	ltc6812_CS_RESET(ltc6812_CS_PIN);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4824      	ldr	r0, [pc, #144]	; (8003d70 <LTC681x_wrcfga_reg_emul+0xd0>)
 8003cde:	f004 fd56 	bl	800878e <HAL_GPIO_WritePin>
  ltc6812_Write8(cmd[0]);
 8003ce2:	7d3b      	ldrb	r3, [r7, #20]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff f993 	bl	8003010 <ltc6812_Write8>
	ltc6812_Write8(cmd[1]);
 8003cea:	7d7b      	ldrb	r3, [r7, #21]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff f98f 	bl	8003010 <ltc6812_Write8>
	ltc6812_Write8(cmd[2]);
 8003cf2:	7dbb      	ldrb	r3, [r7, #22]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff f98b 	bl	8003010 <ltc6812_Write8>
	ltc6812_Write8(cmd[3]);
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff f987 	bl	8003010 <ltc6812_Write8>
	
	data_in[0]= 0x00;
 8003d02:	2300      	movs	r3, #0
 8003d04:	733b      	strb	r3, [r7, #12]
	data_in[1]= 0x00;
 8003d06:	2300      	movs	r3, #0
 8003d08:	737b      	strb	r3, [r7, #13]
	data_in[2]= 0x00;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73bb      	strb	r3, [r7, #14]
	data_in[3]= 0x00;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	73fb      	strb	r3, [r7, #15]
	data_in[4]= CFGA4;
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	743b      	strb	r3, [r7, #16]
	data_in[5]= CFGA5;
 8003d16:	79bb      	ldrb	r3, [r7, #6]
 8003d18:	747b      	strb	r3, [r7, #17]
	cmd_pec=pec15_calc_emul(6,data_in);
 8003d1a:	f107 030c 	add.w	r3, r7, #12
 8003d1e:	4619      	mov	r1, r3
 8003d20:	2006      	movs	r0, #6
 8003d22:	f7ff fa5f 	bl	80031e4 <pec15_calc_emul>
 8003d26:	4603      	mov	r3, r0
 8003d28:	837b      	strh	r3, [r7, #26]
	data_in[6]= (uint8_t)(cmd_pec >> 8);
 8003d2a:	8b7b      	ldrh	r3, [r7, #26]
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	74bb      	strb	r3, [r7, #18]
	data_in[7]= (uint8_t)(cmd_pec);
 8003d34:	8b7b      	ldrh	r3, [r7, #26]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	74fb      	strb	r3, [r7, #19]
	
	for(int kl=0;kl<8;kl++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	e00a      	b.n	8003d56 <LTC681x_wrcfga_reg_emul+0xb6>
	{
		ltc6812_Write8(data_in[kl]);
 8003d40:	f107 020c 	add.w	r2, r7, #12
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	4413      	add	r3, r2
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff f960 	bl	8003010 <ltc6812_Write8>
	for(int kl=0;kl<8;kl++)
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	3301      	adds	r3, #1
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	2b07      	cmp	r3, #7
 8003d5a:	ddf1      	ble.n	8003d40 <LTC681x_wrcfga_reg_emul+0xa0>
	}
	
  ltc6812_CS_SET(ltc6812_CS_PIN);
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4803      	ldr	r0, [pc, #12]	; (8003d70 <LTC681x_wrcfga_reg_emul+0xd0>)
 8003d62:	f004 fd14 	bl	800878e <HAL_GPIO_WritePin>
	
}
 8003d66:	bf00      	nop
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40010c00 	.word	0x40010c00

08003d74 <LTC681x_wrcfgb_reg_emul>:

void LTC681x_wrcfgb_reg_emul( uint8_t CFGB0
                     )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t data_in[8];

	cmd[1] = 0x24;  //WRCFGB
 8003d7e:	2324      	movs	r3, #36	; 0x24
 8003d80:	757b      	strb	r3, [r7, #21]
	cmd[0] = 0x00;
 8003d82:	2300      	movs	r3, #0
 8003d84:	753b      	strb	r3, [r7, #20]

	cmd_pec = pec15_calc_emul(2, cmd);
 8003d86:	f107 0314 	add.w	r3, r7, #20
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	2002      	movs	r0, #2
 8003d8e:	f7ff fa29 	bl	80031e4 <pec15_calc_emul>
 8003d92:	4603      	mov	r3, r0
 8003d94:	837b      	strh	r3, [r7, #26]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003d96:	8b7b      	ldrh	r3, [r7, #26]
 8003d98:	0a1b      	lsrs	r3, r3, #8
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t)(cmd_pec);
 8003da0:	8b7b      	ldrh	r3, [r7, #26]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	75fb      	strb	r3, [r7, #23]

	ltc6812_CS_RESET(ltc6812_CS_PIN);
 8003da6:	2200      	movs	r2, #0
 8003da8:	2101      	movs	r1, #1
 8003daa:	4824      	ldr	r0, [pc, #144]	; (8003e3c <LTC681x_wrcfgb_reg_emul+0xc8>)
 8003dac:	f004 fcef 	bl	800878e <HAL_GPIO_WritePin>
  ltc6812_Write8(cmd[0]);
 8003db0:	7d3b      	ldrb	r3, [r7, #20]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff f92c 	bl	8003010 <ltc6812_Write8>
	ltc6812_Write8(cmd[1]);
 8003db8:	7d7b      	ldrb	r3, [r7, #21]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff f928 	bl	8003010 <ltc6812_Write8>
	ltc6812_Write8(cmd[2]);
 8003dc0:	7dbb      	ldrb	r3, [r7, #22]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff f924 	bl	8003010 <ltc6812_Write8>
	ltc6812_Write8(cmd[3]);
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff f920 	bl	8003010 <ltc6812_Write8>

	data_in[0]= CFGB0;
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	733b      	strb	r3, [r7, #12]
	data_in[1]= 0x00;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	737b      	strb	r3, [r7, #13]
	data_in[2]= 0x00;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	73bb      	strb	r3, [r7, #14]
	data_in[3]= 0x00;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	73fb      	strb	r3, [r7, #15]
	data_in[4]= 0x00;
 8003de0:	2300      	movs	r3, #0
 8003de2:	743b      	strb	r3, [r7, #16]
	data_in[5]= 0x00;
 8003de4:	2300      	movs	r3, #0
 8003de6:	747b      	strb	r3, [r7, #17]
	cmd_pec=pec15_calc_emul(6,data_in);
 8003de8:	f107 030c 	add.w	r3, r7, #12
 8003dec:	4619      	mov	r1, r3
 8003dee:	2006      	movs	r0, #6
 8003df0:	f7ff f9f8 	bl	80031e4 <pec15_calc_emul>
 8003df4:	4603      	mov	r3, r0
 8003df6:	837b      	strh	r3, [r7, #26]
	data_in[6]= (uint8_t)(cmd_pec >> 8);
 8003df8:	8b7b      	ldrh	r3, [r7, #26]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	74bb      	strb	r3, [r7, #18]
	data_in[7]= (uint8_t)(cmd_pec);
 8003e02:	8b7b      	ldrh	r3, [r7, #26]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	74fb      	strb	r3, [r7, #19]

	for(int kl=0;kl<8;kl++)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	e00a      	b.n	8003e24 <LTC681x_wrcfgb_reg_emul+0xb0>
	{
		ltc6812_Write8(data_in[kl]);
 8003e0e:	f107 020c 	add.w	r2, r7, #12
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	4413      	add	r3, r2
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff f8f9 	bl	8003010 <ltc6812_Write8>
	for(int kl=0;kl<8;kl++)
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	3301      	adds	r3, #1
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2b07      	cmp	r3, #7
 8003e28:	ddf1      	ble.n	8003e0e <LTC681x_wrcfgb_reg_emul+0x9a>
	}

  ltc6812_CS_SET(ltc6812_CS_PIN);
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	4803      	ldr	r0, [pc, #12]	; (8003e3c <LTC681x_wrcfgb_reg_emul+0xc8>)
 8003e30:	f004 fcad 	bl	800878e <HAL_GPIO_WritePin>

}
 8003e34:	bf00      	nop
 8003e36:	3720      	adds	r7, #32
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40010c00 	.word	0x40010c00

08003e40 <LTC681x_balance_cell>:
  ltc6812_CS_SET(ltc6812_CS_PIN);
	
}

void LTC681x_balance_cell(uint16_t Cell_to_balance)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	80fb      	strh	r3, [r7, #6]
	uint8_t cell_balance_status;
	uint16_t temp_var;
	CFGAR4=0x00;
 8003e4a:	4b2f      	ldr	r3, [pc, #188]	; (8003f08 <LTC681x_balance_cell+0xc8>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
	CFGAR5=0x00;
 8003e50:	4b2e      	ldr	r3, [pc, #184]	; (8003f0c <LTC681x_balance_cell+0xcc>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	701a      	strb	r2, [r3, #0]
	CFGBR0=0x00;
 8003e56:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <LTC681x_balance_cell+0xd0>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]

	for(int lm=0;lm<15;lm++)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	e03d      	b.n	8003ede <LTC681x_balance_cell+0x9e>
	{
		cell_balance_status=Cell_to_balance>>lm & 0x0001;
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	fa42 f303 	asr.w	r3, r2, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	72fb      	strb	r3, [r7, #11]
		if(lm<8)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b07      	cmp	r3, #7
 8003e76:	dc0d      	bgt.n	8003e94 <LTC681x_balance_cell+0x54>
		{
			temp_var=cell_balance_status<<lm;
 8003e78:	7afa      	ldrb	r2, [r7, #11]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	813b      	strh	r3, [r7, #8]
			CFGAR4+=temp_var;
 8003e82:	893b      	ldrh	r3, [r7, #8]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <LTC681x_balance_cell+0xc8>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <LTC681x_balance_cell+0xc8>)
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	e01f      	b.n	8003ed4 <LTC681x_balance_cell+0x94>
		}
		else if(lm<12)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b0b      	cmp	r3, #11
 8003e98:	dc0e      	bgt.n	8003eb8 <LTC681x_balance_cell+0x78>
		{
			temp_var=cell_balance_status<<(lm-8);
 8003e9a:	7afa      	ldrb	r2, [r7, #11]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3b08      	subs	r3, #8
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	813b      	strh	r3, [r7, #8]
			CFGAR5+=temp_var;
 8003ea6:	893b      	ldrh	r3, [r7, #8]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <LTC681x_balance_cell+0xcc>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	4413      	add	r3, r2
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4b16      	ldr	r3, [pc, #88]	; (8003f0c <LTC681x_balance_cell+0xcc>)
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e00d      	b.n	8003ed4 <LTC681x_balance_cell+0x94>
		}
		else
		{
			temp_var=cell_balance_status<<(lm-8);
 8003eb8:	7afa      	ldrb	r2, [r7, #11]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3b08      	subs	r3, #8
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	813b      	strh	r3, [r7, #8]
			CFGBR0+=temp_var;
 8003ec4:	893b      	ldrh	r3, [r7, #8]
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <LTC681x_balance_cell+0xd0>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	4413      	add	r3, r2
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <LTC681x_balance_cell+0xd0>)
 8003ed2:	701a      	strb	r2, [r3, #0]
		}
		temp_var=0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	813b      	strh	r3, [r7, #8]
	for(int lm=0;lm<15;lm++)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	3301      	adds	r3, #1
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b0e      	cmp	r3, #14
 8003ee2:	ddbe      	ble.n	8003e62 <LTC681x_balance_cell+0x22>
	}

	LTC681x_wrcfga_reg_emul(CFGAR4, CFGAR5);
 8003ee4:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <LTC681x_balance_cell+0xc8>)
 8003ee6:	781a      	ldrb	r2, [r3, #0]
 8003ee8:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <LTC681x_balance_cell+0xcc>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f7ff fed6 	bl	8003ca0 <LTC681x_wrcfga_reg_emul>
	LTC681x_wrcfgb_reg_emul(CFGBR0);
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <LTC681x_balance_cell+0xd0>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff ff3b 	bl	8003d74 <LTC681x_wrcfgb_reg_emul>

}
 8003efe:	bf00      	nop
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	2000028b 	.word	0x2000028b
 8003f0c:	2000028c 	.word	0x2000028c
 8003f10:	2000028d 	.word	0x2000028d
 8003f14:	00000000 	.word	0x00000000

08003f18 <get_balance_status>:

void get_balance_status(float Cell_Voltage_15data[15])
{
 8003f18:	b590      	push	{r4, r7, lr}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	Cell_Voltage_Lowest=4.2;
 8003f20:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <get_balance_status+0x148>)
 8003f22:	4a50      	ldr	r2, [pc, #320]	; (8004064 <get_balance_status+0x14c>)
 8003f24:	601a      	str	r2, [r3, #0]
	balance_status=0x0000;
 8003f26:	4b50      	ldr	r3, [pc, #320]	; (8004068 <get_balance_status+0x150>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	801a      	strh	r2, [r3, #0]
	uint16_t temp_dat;
	float buffer_imbalance;


		for(int ik=0;ik<15;ik++)
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	e017      	b.n	8003f62 <get_balance_status+0x4a>
		{
			if(Cell_Voltage_15data[ik]<Cell_Voltage_Lowest) Cell_Voltage_Lowest=Cell_Voltage_15data[ik];
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	4413      	add	r3, r2
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	4b48      	ldr	r3, [pc, #288]	; (8004060 <get_balance_status+0x148>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f7fd f89c 	bl	8001080 <__aeabi_fcmplt>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d006      	beq.n	8003f5c <get_balance_status+0x44>
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	4413      	add	r3, r2
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a41      	ldr	r2, [pc, #260]	; (8004060 <get_balance_status+0x148>)
 8003f5a:	6013      	str	r3, [r2, #0]
		for(int ik=0;ik<15;ik++)
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b0e      	cmp	r3, #14
 8003f66:	dde4      	ble.n	8003f32 <get_balance_status+0x1a>
		}

		for(int ik=0;ik<15;ik++)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e04a      	b.n	8004004 <get_balance_status+0xec>
		{
		   delta_vbatt[ik] = Cell_Voltage_15data[ik] - Cell_Voltage_Lowest;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4413      	add	r3, r2
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	4b39      	ldr	r3, [pc, #228]	; (8004060 <get_balance_status+0x148>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	f7fc fdd6 	bl	8000b30 <__aeabi_fsub>
 8003f84:	4603      	mov	r3, r0
 8003f86:	4619      	mov	r1, r3
 8003f88:	4a38      	ldr	r2, [pc, #224]	; (800406c <get_balance_status+0x154>)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		   buffer_imbalance+=delta_vbatt[ik];
 8003f90:	4a36      	ldr	r2, [pc, #216]	; (800406c <get_balance_status+0x154>)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6978      	ldr	r0, [r7, #20]
 8003f9c:	f7fc fdca 	bl	8000b34 <__addsf3>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	617b      	str	r3, [r7, #20]

		   if(delta_vbatt[ik]> 0.025 && Cell_Voltage_15data[ik]>VCELL_BALANCE_PERMITTED)
 8003fa4:	4a31      	ldr	r2, [pc, #196]	; (800406c <get_balance_status+0x154>)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fc fa3b 	bl	8000428 <__aeabi_f2d>
 8003fb2:	a327      	add	r3, pc, #156	; (adr r3, 8004050 <get_balance_status+0x138>)
 8003fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb8:	f7fc fd1e 	bl	80009f8 <__aeabi_dcmpgt>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01d      	beq.n	8003ffe <get_balance_status+0xe6>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4413      	add	r3, r2
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fc fa2b 	bl	8000428 <__aeabi_f2d>
 8003fd2:	a321      	add	r3, pc, #132	; (adr r3, 8004058 <get_balance_status+0x140>)
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	f7fc fd0e 	bl	80009f8 <__aeabi_dcmpgt>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <get_balance_status+0xe6>
		   {
			   temp_dat = 0x01;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	817b      	strh	r3, [r7, #10]
			   temp_dat = temp_dat << ik;
 8003fe6:	897a      	ldrh	r2, [r7, #10]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	817b      	strh	r3, [r7, #10]
			   balance_status= balance_status+temp_dat;
 8003ff0:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <get_balance_status+0x150>)
 8003ff2:	881a      	ldrh	r2, [r3, #0]
 8003ff4:	897b      	ldrh	r3, [r7, #10]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <get_balance_status+0x150>)
 8003ffc:	801a      	strh	r2, [r3, #0]
		for(int ik=0;ik<15;ik++)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3301      	adds	r3, #1
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b0e      	cmp	r3, #14
 8004008:	ddb1      	ble.n	8003f6e <get_balance_status+0x56>
		   }

		}
		persen_imbalance=buffer_imbalance*100/14.0/1.2;
 800400a:	4919      	ldr	r1, [pc, #100]	; (8004070 <get_balance_status+0x158>)
 800400c:	6978      	ldr	r0, [r7, #20]
 800400e:	f7fc fe99 	bl	8000d44 <__aeabi_fmul>
 8004012:	4603      	mov	r3, r0
 8004014:	4618      	mov	r0, r3
 8004016:	f7fc fa07 	bl	8000428 <__aeabi_f2d>
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	4b15      	ldr	r3, [pc, #84]	; (8004074 <get_balance_status+0x15c>)
 8004020:	f7fc fb84 	bl	800072c <__aeabi_ddiv>
 8004024:	4603      	mov	r3, r0
 8004026:	460c      	mov	r4, r1
 8004028:	4618      	mov	r0, r3
 800402a:	4621      	mov	r1, r4
 800402c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004030:	4b11      	ldr	r3, [pc, #68]	; (8004078 <get_balance_status+0x160>)
 8004032:	f7fc fb7b 	bl	800072c <__aeabi_ddiv>
 8004036:	4603      	mov	r3, r0
 8004038:	460c      	mov	r4, r1
 800403a:	4618      	mov	r0, r3
 800403c:	4621      	mov	r1, r4
 800403e:	f7fc fd23 	bl	8000a88 <__aeabi_d2f>
 8004042:	4602      	mov	r2, r0
 8004044:	4b0d      	ldr	r3, [pc, #52]	; (800407c <get_balance_status+0x164>)
 8004046:	601a      	str	r2, [r3, #0]


}
 8004048:	bf00      	nop
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	bd90      	pop	{r4, r7, pc}
 8004050:	9999999a 	.word	0x9999999a
 8004054:	3f999999 	.word	0x3f999999
 8004058:	33333333 	.word	0x33333333
 800405c:	400b3333 	.word	0x400b3333
 8004060:	20000c24 	.word	0x20000c24
 8004064:	40866666 	.word	0x40866666
 8004068:	20000be6 	.word	0x20000be6
 800406c:	20000be8 	.word	0x20000be8
 8004070:	42c80000 	.word	0x42c80000
 8004074:	402c0000 	.word	0x402c0000
 8004078:	3ff33333 	.word	0x3ff33333
 800407c:	20000bb0 	.word	0x20000bb0

08004080 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8004084:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <MX_SPI1_Init+0x64>)
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <MX_SPI1_Init+0x68>)
 8004088:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800408a:	4b16      	ldr	r3, [pc, #88]	; (80040e4 <MX_SPI1_Init+0x64>)
 800408c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004090:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004092:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <MX_SPI1_Init+0x64>)
 8004094:	2200      	movs	r2, #0
 8004096:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004098:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <MX_SPI1_Init+0x64>)
 800409a:	2200      	movs	r2, #0
 800409c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800409e:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <MX_SPI1_Init+0x64>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040a4:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <MX_SPI1_Init+0x64>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80040aa:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <MX_SPI1_Init+0x64>)
 80040ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80040b2:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <MX_SPI1_Init+0x64>)
 80040b4:	2228      	movs	r2, #40	; 0x28
 80040b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040b8:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <MX_SPI1_Init+0x64>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80040be:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <MX_SPI1_Init+0x64>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040c4:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <MX_SPI1_Init+0x64>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <MX_SPI1_Init+0x64>)
 80040cc:	220a      	movs	r2, #10
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80040d0:	4804      	ldr	r0, [pc, #16]	; (80040e4 <MX_SPI1_Init+0x64>)
 80040d2:	f005 fdeb 	bl	8009cac <HAL_SPI_Init>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80040dc:	f7fe fec8 	bl	8002e70 <Error_Handler>
  }

}
 80040e0:	bf00      	nop
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20000c28 	.word	0x20000c28
 80040e8:	40013000 	.word	0x40013000

080040ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f4:	f107 0314 	add.w	r3, r7, #20
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a22      	ldr	r2, [pc, #136]	; (8004190 <HAL_SPI_MspInit+0xa4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d13d      	bne.n	8004188 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800410c:	4b21      	ldr	r3, [pc, #132]	; (8004194 <HAL_SPI_MspInit+0xa8>)
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	4a20      	ldr	r2, [pc, #128]	; (8004194 <HAL_SPI_MspInit+0xa8>)
 8004112:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004116:	6193      	str	r3, [r2, #24]
 8004118:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <HAL_SPI_MspInit+0xa8>)
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004124:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_SPI_MspInit+0xa8>)
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	4a1a      	ldr	r2, [pc, #104]	; (8004194 <HAL_SPI_MspInit+0xa8>)
 800412a:	f043 0308 	orr.w	r3, r3, #8
 800412e:	6193      	str	r3, [r2, #24]
 8004130:	4b18      	ldr	r3, [pc, #96]	; (8004194 <HAL_SPI_MspInit+0xa8>)
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800413c:	2328      	movs	r3, #40	; 0x28
 800413e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004140:	2302      	movs	r3, #2
 8004142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004144:	2303      	movs	r3, #3
 8004146:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004148:	f107 0314 	add.w	r3, r7, #20
 800414c:	4619      	mov	r1, r3
 800414e:	4812      	ldr	r0, [pc, #72]	; (8004198 <HAL_SPI_MspInit+0xac>)
 8004150:	f004 f9ac 	bl	80084ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004154:	2310      	movs	r3, #16
 8004156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004158:	2300      	movs	r3, #0
 800415a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415c:	2300      	movs	r3, #0
 800415e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004160:	f107 0314 	add.w	r3, r7, #20
 8004164:	4619      	mov	r1, r3
 8004166:	480c      	ldr	r0, [pc, #48]	; (8004198 <HAL_SPI_MspInit+0xac>)
 8004168:	f004 f9a0 	bl	80084ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800416c:	4b0b      	ldr	r3, [pc, #44]	; (800419c <HAL_SPI_MspInit+0xb0>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
 8004182:	4a06      	ldr	r2, [pc, #24]	; (800419c <HAL_SPI_MspInit+0xb0>)
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004188:	bf00      	nop
 800418a:	3728      	adds	r7, #40	; 0x28
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40013000 	.word	0x40013000
 8004194:	40021000 	.word	0x40021000
 8004198:	40010c00 	.word	0x40010c00
 800419c:	40010000 	.word	0x40010000

080041a0 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80041a6:	f000 fa19 	bl	80045dc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80041aa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80041ae:	2201      	movs	r2, #1
 80041b0:	2178      	movs	r1, #120	; 0x78
 80041b2:	4858      	ldr	r0, [pc, #352]	; (8004314 <SSD1306_Init+0x174>)
 80041b4:	f004 fd42 	bl	8008c3c <HAL_I2C_IsDeviceReady>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	e0a4      	b.n	800430c <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80041c2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80041c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80041c8:	e002      	b.n	80041d0 <SSD1306_Init+0x30>
		p--;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	607b      	str	r3, [r7, #4]
	while(p>0)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f9      	bne.n	80041ca <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80041d6:	22ae      	movs	r2, #174	; 0xae
 80041d8:	2100      	movs	r1, #0
 80041da:	2078      	movs	r0, #120	; 0x78
 80041dc:	f000 fa6c 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80041e0:	2220      	movs	r2, #32
 80041e2:	2100      	movs	r1, #0
 80041e4:	2078      	movs	r0, #120	; 0x78
 80041e6:	f000 fa67 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80041ea:	2210      	movs	r2, #16
 80041ec:	2100      	movs	r1, #0
 80041ee:	2078      	movs	r0, #120	; 0x78
 80041f0:	f000 fa62 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80041f4:	22b0      	movs	r2, #176	; 0xb0
 80041f6:	2100      	movs	r1, #0
 80041f8:	2078      	movs	r0, #120	; 0x78
 80041fa:	f000 fa5d 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80041fe:	22c8      	movs	r2, #200	; 0xc8
 8004200:	2100      	movs	r1, #0
 8004202:	2078      	movs	r0, #120	; 0x78
 8004204:	f000 fa58 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8004208:	2200      	movs	r2, #0
 800420a:	2100      	movs	r1, #0
 800420c:	2078      	movs	r0, #120	; 0x78
 800420e:	f000 fa53 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8004212:	2210      	movs	r2, #16
 8004214:	2100      	movs	r1, #0
 8004216:	2078      	movs	r0, #120	; 0x78
 8004218:	f000 fa4e 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800421c:	2240      	movs	r2, #64	; 0x40
 800421e:	2100      	movs	r1, #0
 8004220:	2078      	movs	r0, #120	; 0x78
 8004222:	f000 fa49 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8004226:	2281      	movs	r2, #129	; 0x81
 8004228:	2100      	movs	r1, #0
 800422a:	2078      	movs	r0, #120	; 0x78
 800422c:	f000 fa44 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004230:	22ff      	movs	r2, #255	; 0xff
 8004232:	2100      	movs	r1, #0
 8004234:	2078      	movs	r0, #120	; 0x78
 8004236:	f000 fa3f 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800423a:	22a1      	movs	r2, #161	; 0xa1
 800423c:	2100      	movs	r1, #0
 800423e:	2078      	movs	r0, #120	; 0x78
 8004240:	f000 fa3a 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004244:	22a6      	movs	r2, #166	; 0xa6
 8004246:	2100      	movs	r1, #0
 8004248:	2078      	movs	r0, #120	; 0x78
 800424a:	f000 fa35 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800424e:	22a8      	movs	r2, #168	; 0xa8
 8004250:	2100      	movs	r1, #0
 8004252:	2078      	movs	r0, #120	; 0x78
 8004254:	f000 fa30 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8004258:	223f      	movs	r2, #63	; 0x3f
 800425a:	2100      	movs	r1, #0
 800425c:	2078      	movs	r0, #120	; 0x78
 800425e:	f000 fa2b 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004262:	22a4      	movs	r2, #164	; 0xa4
 8004264:	2100      	movs	r1, #0
 8004266:	2078      	movs	r0, #120	; 0x78
 8004268:	f000 fa26 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800426c:	22d3      	movs	r2, #211	; 0xd3
 800426e:	2100      	movs	r1, #0
 8004270:	2078      	movs	r0, #120	; 0x78
 8004272:	f000 fa21 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8004276:	2200      	movs	r2, #0
 8004278:	2100      	movs	r1, #0
 800427a:	2078      	movs	r0, #120	; 0x78
 800427c:	f000 fa1c 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004280:	22d5      	movs	r2, #213	; 0xd5
 8004282:	2100      	movs	r1, #0
 8004284:	2078      	movs	r0, #120	; 0x78
 8004286:	f000 fa17 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800428a:	22f0      	movs	r2, #240	; 0xf0
 800428c:	2100      	movs	r1, #0
 800428e:	2078      	movs	r0, #120	; 0x78
 8004290:	f000 fa12 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004294:	22d9      	movs	r2, #217	; 0xd9
 8004296:	2100      	movs	r1, #0
 8004298:	2078      	movs	r0, #120	; 0x78
 800429a:	f000 fa0d 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800429e:	2222      	movs	r2, #34	; 0x22
 80042a0:	2100      	movs	r1, #0
 80042a2:	2078      	movs	r0, #120	; 0x78
 80042a4:	f000 fa08 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80042a8:	22da      	movs	r2, #218	; 0xda
 80042aa:	2100      	movs	r1, #0
 80042ac:	2078      	movs	r0, #120	; 0x78
 80042ae:	f000 fa03 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80042b2:	2212      	movs	r2, #18
 80042b4:	2100      	movs	r1, #0
 80042b6:	2078      	movs	r0, #120	; 0x78
 80042b8:	f000 f9fe 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80042bc:	22db      	movs	r2, #219	; 0xdb
 80042be:	2100      	movs	r1, #0
 80042c0:	2078      	movs	r0, #120	; 0x78
 80042c2:	f000 f9f9 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80042c6:	2220      	movs	r2, #32
 80042c8:	2100      	movs	r1, #0
 80042ca:	2078      	movs	r0, #120	; 0x78
 80042cc:	f000 f9f4 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80042d0:	228d      	movs	r2, #141	; 0x8d
 80042d2:	2100      	movs	r1, #0
 80042d4:	2078      	movs	r0, #120	; 0x78
 80042d6:	f000 f9ef 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80042da:	2214      	movs	r2, #20
 80042dc:	2100      	movs	r1, #0
 80042de:	2078      	movs	r0, #120	; 0x78
 80042e0:	f000 f9ea 	bl	80046b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80042e4:	22af      	movs	r2, #175	; 0xaf
 80042e6:	2100      	movs	r1, #0
 80042e8:	2078      	movs	r0, #120	; 0x78
 80042ea:	f000 f9e5 	bl	80046b8 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80042ee:	2000      	movs	r0, #0
 80042f0:	f000 f842 	bl	8004378 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80042f4:	f000 f812 	bl	800431c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80042f8:	4b07      	ldr	r3, [pc, #28]	; (8004318 <SSD1306_Init+0x178>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <SSD1306_Init+0x178>)
 8004300:	2200      	movs	r2, #0
 8004302:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <SSD1306_Init+0x178>)
 8004306:	2201      	movs	r2, #1
 8004308:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800430a:	2301      	movs	r3, #1
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	2000084c 	.word	0x2000084c
 8004318:	20000690 	.word	0x20000690

0800431c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8004322:	2300      	movs	r3, #0
 8004324:	71fb      	strb	r3, [r7, #7]
 8004326:	e01d      	b.n	8004364 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	3b50      	subs	r3, #80	; 0x50
 800432c:	b2db      	uxtb	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	2100      	movs	r1, #0
 8004332:	2078      	movs	r0, #120	; 0x78
 8004334:	f000 f9c0 	bl	80046b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004338:	2200      	movs	r2, #0
 800433a:	2100      	movs	r1, #0
 800433c:	2078      	movs	r0, #120	; 0x78
 800433e:	f000 f9bb 	bl	80046b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004342:	2210      	movs	r2, #16
 8004344:	2100      	movs	r1, #0
 8004346:	2078      	movs	r0, #120	; 0x78
 8004348:	f000 f9b6 	bl	80046b8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	01db      	lsls	r3, r3, #7
 8004350:	4a08      	ldr	r2, [pc, #32]	; (8004374 <SSD1306_UpdateScreen+0x58>)
 8004352:	441a      	add	r2, r3
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	2140      	movs	r1, #64	; 0x40
 8004358:	2078      	movs	r0, #120	; 0x78
 800435a:	f000 f953 	bl	8004604 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	3301      	adds	r3, #1
 8004362:	71fb      	strb	r3, [r7, #7]
 8004364:	79fb      	ldrb	r3, [r7, #7]
 8004366:	2b07      	cmp	r3, #7
 8004368:	d9de      	bls.n	8004328 <SSD1306_UpdateScreen+0xc>
	}
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20000290 	.word	0x20000290

08004378 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0x100, sizeof(SSD1306_Buffer));
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <SSD1306_Fill+0x14>
 8004388:	2300      	movs	r3, #0
 800438a:	e001      	b.n	8004390 <SSD1306_Fill+0x18>
 800438c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004390:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004394:	4619      	mov	r1, r3
 8004396:	4803      	ldr	r0, [pc, #12]	; (80043a4 <SSD1306_Fill+0x2c>)
 8004398:	f006 f9fe 	bl	800a798 <memset>
}
 800439c:	bf00      	nop
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20000290 	.word	0x20000290

080043a8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	80fb      	strh	r3, [r7, #6]
 80043b2:	460b      	mov	r3, r1
 80043b4:	80bb      	strh	r3, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	70fb      	strb	r3, [r7, #3]
	if (
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	2b7f      	cmp	r3, #127	; 0x7f
 80043be:	d848      	bhi.n	8004452 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80043c0:	88bb      	ldrh	r3, [r7, #4]
 80043c2:	2b3f      	cmp	r3, #63	; 0x3f
 80043c4:	d845      	bhi.n	8004452 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80043c6:	4b25      	ldr	r3, [pc, #148]	; (800445c <SSD1306_DrawPixel+0xb4>)
 80043c8:	791b      	ldrb	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d006      	beq.n	80043dc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bf0c      	ite	eq
 80043d4:	2301      	moveq	r3, #1
 80043d6:	2300      	movne	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d11a      	bne.n	8004418 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80043e2:	88fa      	ldrh	r2, [r7, #6]
 80043e4:	88bb      	ldrh	r3, [r7, #4]
 80043e6:	08db      	lsrs	r3, r3, #3
 80043e8:	b298      	uxth	r0, r3
 80043ea:	4603      	mov	r3, r0
 80043ec:	01db      	lsls	r3, r3, #7
 80043ee:	4413      	add	r3, r2
 80043f0:	4a1b      	ldr	r2, [pc, #108]	; (8004460 <SSD1306_DrawPixel+0xb8>)
 80043f2:	5cd3      	ldrb	r3, [r2, r3]
 80043f4:	b25a      	sxtb	r2, r3
 80043f6:	88bb      	ldrh	r3, [r7, #4]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	2101      	movs	r1, #1
 80043fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004402:	b25b      	sxtb	r3, r3
 8004404:	4313      	orrs	r3, r2
 8004406:	b259      	sxtb	r1, r3
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	4603      	mov	r3, r0
 800440c:	01db      	lsls	r3, r3, #7
 800440e:	4413      	add	r3, r2
 8004410:	b2c9      	uxtb	r1, r1
 8004412:	4a13      	ldr	r2, [pc, #76]	; (8004460 <SSD1306_DrawPixel+0xb8>)
 8004414:	54d1      	strb	r1, [r2, r3]
 8004416:	e01d      	b.n	8004454 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004418:	88fa      	ldrh	r2, [r7, #6]
 800441a:	88bb      	ldrh	r3, [r7, #4]
 800441c:	08db      	lsrs	r3, r3, #3
 800441e:	b298      	uxth	r0, r3
 8004420:	4603      	mov	r3, r0
 8004422:	01db      	lsls	r3, r3, #7
 8004424:	4413      	add	r3, r2
 8004426:	4a0e      	ldr	r2, [pc, #56]	; (8004460 <SSD1306_DrawPixel+0xb8>)
 8004428:	5cd3      	ldrb	r3, [r2, r3]
 800442a:	b25a      	sxtb	r2, r3
 800442c:	88bb      	ldrh	r3, [r7, #4]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	2101      	movs	r1, #1
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	b25b      	sxtb	r3, r3
 800443a:	43db      	mvns	r3, r3
 800443c:	b25b      	sxtb	r3, r3
 800443e:	4013      	ands	r3, r2
 8004440:	b259      	sxtb	r1, r3
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	4603      	mov	r3, r0
 8004446:	01db      	lsls	r3, r3, #7
 8004448:	4413      	add	r3, r2
 800444a:	b2c9      	uxtb	r1, r1
 800444c:	4a04      	ldr	r2, [pc, #16]	; (8004460 <SSD1306_DrawPixel+0xb8>)
 800444e:	54d1      	strb	r1, [r2, r3]
 8004450:	e000      	b.n	8004454 <SSD1306_DrawPixel+0xac>
		return;
 8004452:	bf00      	nop
	}
}
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	20000690 	.word	0x20000690
 8004460:	20000290 	.word	0x20000290

08004464 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	460a      	mov	r2, r1
 800446e:	80fb      	strh	r3, [r7, #6]
 8004470:	4613      	mov	r3, r2
 8004472:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004474:	4a05      	ldr	r2, [pc, #20]	; (800448c <SSD1306_GotoXY+0x28>)
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800447a:	4a04      	ldr	r2, [pc, #16]	; (800448c <SSD1306_GotoXY+0x28>)
 800447c:	88bb      	ldrh	r3, [r7, #4]
 800447e:	8053      	strh	r3, [r2, #2]
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000690 	.word	0x20000690

08004490 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	6039      	str	r1, [r7, #0]
 800449a:	71fb      	strb	r3, [r7, #7]
 800449c:	4613      	mov	r3, r2
 800449e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80044a0:	4b3a      	ldr	r3, [pc, #232]	; (800458c <SSD1306_Putc+0xfc>)
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	4413      	add	r3, r2
	if (
 80044ac:	2b7f      	cmp	r3, #127	; 0x7f
 80044ae:	dc07      	bgt.n	80044c0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80044b0:	4b36      	ldr	r3, [pc, #216]	; (800458c <SSD1306_Putc+0xfc>)
 80044b2:	885b      	ldrh	r3, [r3, #2]
 80044b4:	461a      	mov	r2, r3
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	785b      	ldrb	r3, [r3, #1]
 80044ba:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80044bc:	2b3f      	cmp	r3, #63	; 0x3f
 80044be:	dd01      	ble.n	80044c4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	e05e      	b.n	8004582 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e04b      	b.n	8004562 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	3b20      	subs	r3, #32
 80044d2:	6839      	ldr	r1, [r7, #0]
 80044d4:	7849      	ldrb	r1, [r1, #1]
 80044d6:	fb01 f303 	mul.w	r3, r1, r3
 80044da:	4619      	mov	r1, r3
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	440b      	add	r3, r1
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	4413      	add	r3, r2
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	e030      	b.n	8004550 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d010      	beq.n	8004520 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80044fe:	4b23      	ldr	r3, [pc, #140]	; (800458c <SSD1306_Putc+0xfc>)
 8004500:	881a      	ldrh	r2, [r3, #0]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	b29b      	uxth	r3, r3
 8004506:	4413      	add	r3, r2
 8004508:	b298      	uxth	r0, r3
 800450a:	4b20      	ldr	r3, [pc, #128]	; (800458c <SSD1306_Putc+0xfc>)
 800450c:	885a      	ldrh	r2, [r3, #2]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	b29b      	uxth	r3, r3
 8004512:	4413      	add	r3, r2
 8004514:	b29b      	uxth	r3, r3
 8004516:	79ba      	ldrb	r2, [r7, #6]
 8004518:	4619      	mov	r1, r3
 800451a:	f7ff ff45 	bl	80043a8 <SSD1306_DrawPixel>
 800451e:	e014      	b.n	800454a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8004520:	4b1a      	ldr	r3, [pc, #104]	; (800458c <SSD1306_Putc+0xfc>)
 8004522:	881a      	ldrh	r2, [r3, #0]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	b29b      	uxth	r3, r3
 8004528:	4413      	add	r3, r2
 800452a:	b298      	uxth	r0, r3
 800452c:	4b17      	ldr	r3, [pc, #92]	; (800458c <SSD1306_Putc+0xfc>)
 800452e:	885a      	ldrh	r2, [r3, #2]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	b29b      	uxth	r3, r3
 8004534:	4413      	add	r3, r2
 8004536:	b299      	uxth	r1, r3
 8004538:	79bb      	ldrb	r3, [r7, #6]
 800453a:	2b00      	cmp	r3, #0
 800453c:	bf0c      	ite	eq
 800453e:	2301      	moveq	r3, #1
 8004540:	2300      	movne	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	f7ff ff2f 	bl	80043a8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	3301      	adds	r3, #1
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4293      	cmp	r3, r2
 800455a:	d3c8      	bcc.n	80044ee <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	3301      	adds	r3, #1
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	785b      	ldrb	r3, [r3, #1]
 8004566:	461a      	mov	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	4293      	cmp	r3, r2
 800456c:	d3ad      	bcc.n	80044ca <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800456e:	4b07      	ldr	r3, [pc, #28]	; (800458c <SSD1306_Putc+0xfc>)
 8004570:	881a      	ldrh	r2, [r3, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	4413      	add	r3, r2
 800457a:	b29a      	uxth	r2, r3
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <SSD1306_Putc+0xfc>)
 800457e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8004580:	79fb      	ldrb	r3, [r7, #7]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000690 	.word	0x20000690

08004590 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	4613      	mov	r3, r2
 800459c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800459e:	e012      	b.n	80045c6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	79fa      	ldrb	r2, [r7, #7]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff ff71 	bl	8004490 <SSD1306_Putc>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d002      	beq.n	80045c0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	e008      	b.n	80045d2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e8      	bne.n	80045a0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	781b      	ldrb	r3, [r3, #0]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80045e2:	4b07      	ldr	r3, [pc, #28]	; (8004600 <ssd1306_I2C_Init+0x24>)
 80045e4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80045e6:	e002      	b.n	80045ee <ssd1306_I2C_Init+0x12>
		p--;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	607b      	str	r3, [r7, #4]
	while(p>0)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f9      	bne.n	80045e8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	0003d090 	.word	0x0003d090

08004604 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004604:	b5b0      	push	{r4, r5, r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af02      	add	r7, sp, #8
 800460a:	603a      	str	r2, [r7, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	4603      	mov	r3, r0
 8004610:	71fb      	strb	r3, [r7, #7]
 8004612:	460b      	mov	r3, r1
 8004614:	71bb      	strb	r3, [r7, #6]
 8004616:	4613      	mov	r3, r2
 8004618:	80bb      	strh	r3, [r7, #4]
 800461a:	466b      	mov	r3, sp
 800461c:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 800461e:	88bb      	ldrh	r3, [r7, #4]
 8004620:	1c58      	adds	r0, r3, #1
 8004622:	1e43      	subs	r3, r0, #1
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	4603      	mov	r3, r0
 8004628:	4619      	mov	r1, r3
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	f04f 0400 	mov.w	r4, #0
 8004636:	00d4      	lsls	r4, r2, #3
 8004638:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800463c:	00cb      	lsls	r3, r1, #3
 800463e:	4603      	mov	r3, r0
 8004640:	4619      	mov	r1, r3
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	f04f 0400 	mov.w	r4, #0
 800464e:	00d4      	lsls	r4, r2, #3
 8004650:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004654:	00cb      	lsls	r3, r1, #3
 8004656:	4603      	mov	r3, r0
 8004658:	3307      	adds	r3, #7
 800465a:	08db      	lsrs	r3, r3, #3
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	ebad 0d03 	sub.w	sp, sp, r3
 8004662:	ab02      	add	r3, sp, #8
 8004664:	3300      	adds	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	79ba      	ldrb	r2, [r7, #6]
 800466c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 800466e:	2301      	movs	r3, #1
 8004670:	75fb      	strb	r3, [r7, #23]
 8004672:	e00a      	b.n	800468a <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8004674:	7dfb      	ldrb	r3, [r7, #23]
 8004676:	3b01      	subs	r3, #1
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	441a      	add	r2, r3
 800467c:	7dfb      	ldrb	r3, [r7, #23]
 800467e:	7811      	ldrb	r1, [r2, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8004684:	7dfb      	ldrb	r3, [r7, #23]
 8004686:	3301      	adds	r3, #1
 8004688:	75fb      	strb	r3, [r7, #23]
 800468a:	7dfb      	ldrb	r3, [r7, #23]
 800468c:	b29b      	uxth	r3, r3
 800468e:	88ba      	ldrh	r2, [r7, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	d2ef      	bcs.n	8004674 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	b299      	uxth	r1, r3
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	88b8      	ldrh	r0, [r7, #4]
 800469c:	230a      	movs	r3, #10
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	4603      	mov	r3, r0
 80046a2:	4804      	ldr	r0, [pc, #16]	; (80046b4 <ssd1306_I2C_WriteMulti+0xb0>)
 80046a4:	f004 f9cc 	bl	8008a40 <HAL_I2C_Master_Transmit>
 80046a8:	46ad      	mov	sp, r5
}
 80046aa:	bf00      	nop
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bdb0      	pop	{r4, r5, r7, pc}
 80046b2:	bf00      	nop
 80046b4:	2000084c 	.word	0x2000084c

080046b8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af02      	add	r7, sp, #8
 80046be:	4603      	mov	r3, r0
 80046c0:	71fb      	strb	r3, [r7, #7]
 80046c2:	460b      	mov	r3, r1
 80046c4:	71bb      	strb	r3, [r7, #6]
 80046c6:	4613      	mov	r3, r2
 80046c8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80046ca:	79bb      	ldrb	r3, [r7, #6]
 80046cc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80046ce:	797b      	ldrb	r3, [r7, #5]
 80046d0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	b299      	uxth	r1, r3
 80046d6:	f107 020c 	add.w	r2, r7, #12
 80046da:	230a      	movs	r3, #10
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	2302      	movs	r3, #2
 80046e0:	4803      	ldr	r0, [pc, #12]	; (80046f0 <ssd1306_I2C_Write+0x38>)
 80046e2:	f004 f9ad 	bl	8008a40 <HAL_I2C_Master_Transmit>
}
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	2000084c 	.word	0x2000084c

080046f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80046fa:	4b15      	ldr	r3, [pc, #84]	; (8004750 <HAL_MspInit+0x5c>)
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	4a14      	ldr	r2, [pc, #80]	; (8004750 <HAL_MspInit+0x5c>)
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	6193      	str	r3, [r2, #24]
 8004706:	4b12      	ldr	r3, [pc, #72]	; (8004750 <HAL_MspInit+0x5c>)
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004712:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <HAL_MspInit+0x5c>)
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	4a0e      	ldr	r2, [pc, #56]	; (8004750 <HAL_MspInit+0x5c>)
 8004718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471c:	61d3      	str	r3, [r2, #28]
 800471e:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <HAL_MspInit+0x5c>)
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800472a:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <HAL_MspInit+0x60>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	4a04      	ldr	r2, [pc, #16]	; (8004754 <HAL_MspInit+0x60>)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004746:	bf00      	nop
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr
 8004750:	40021000 	.word	0x40021000
 8004754:	40010000 	.word	0x40010000

08004758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800475c:	bf00      	nop
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004768:	e7fe      	b.n	8004768 <HardFault_Handler+0x4>

0800476a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800476a:	b480      	push	{r7}
 800476c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800476e:	e7fe      	b.n	800476e <MemManage_Handler+0x4>

08004770 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004774:	e7fe      	b.n	8004774 <BusFault_Handler+0x4>

08004776 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004776:	b480      	push	{r7}
 8004778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800477a:	e7fe      	b.n	800477a <UsageFault_Handler+0x4>

0800477c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004780:	bf00      	nop
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047a4:	f002 f8b8 	bl	8006918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 80047a8:	bf00      	nop
 80047aa:	bd80      	pop	{r7, pc}

080047ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80047b0:	4802      	ldr	r0, [pc, #8]	; (80047bc <DMA1_Channel1_IRQHandler+0x10>)
 80047b2:	f003 fd21 	bl	80081f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80047b6:	bf00      	nop
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	200007e0 	.word	0x200007e0

080047c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80047c4:	4802      	ldr	r0, [pc, #8]	; (80047d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80047c6:	f003 f931 	bl	8007a2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000824 	.word	0x20000824
 80047d4:	00000000 	.word	0x00000000

080047d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80047d8:	b5b0      	push	{r4, r5, r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80047dc:	48b8      	ldr	r0, [pc, #736]	; (8004ac0 <TIM2_IRQHandler+0x2e8>)
 80047de:	f005 fb14 	bl	8009e0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  test_tim2++;
 80047e2:	4bb8      	ldr	r3, [pc, #736]	; (8004ac4 <TIM2_IRQHandler+0x2ec>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3301      	adds	r3, #1
 80047e8:	4ab6      	ldr	r2, [pc, #728]	; (8004ac4 <TIM2_IRQHandler+0x2ec>)
 80047ea:	6013      	str	r3, [r2, #0]
  hitung_suhu++;
 80047ec:	4bb6      	ldr	r3, [pc, #728]	; (8004ac8 <TIM2_IRQHandler+0x2f0>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	4ab5      	ldr	r2, [pc, #724]	; (8004ac8 <TIM2_IRQHandler+0x2f0>)
 80047f4:	6013      	str	r3, [r2, #0]

  sumI=sumI-i_arrdata[i];
 80047f6:	4bb5      	ldr	r3, [pc, #724]	; (8004acc <TIM2_IRQHandler+0x2f4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4ab5      	ldr	r2, [pc, #724]	; (8004ad0 <TIM2_IRQHandler+0x2f8>)
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	49b5      	ldr	r1, [pc, #724]	; (8004ad4 <TIM2_IRQHandler+0x2fc>)
 8004800:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	4ab1      	ldr	r2, [pc, #708]	; (8004acc <TIM2_IRQHandler+0x2f4>)
 8004808:	6013      	str	r3, [r2, #0]
  sumRef=sumRef-ref_arrdata[i];
 800480a:	4bb3      	ldr	r3, [pc, #716]	; (8004ad8 <TIM2_IRQHandler+0x300>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4ab0      	ldr	r2, [pc, #704]	; (8004ad0 <TIM2_IRQHandler+0x2f8>)
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	49b2      	ldr	r1, [pc, #712]	; (8004adc <TIM2_IRQHandler+0x304>)
 8004814:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	4aaf      	ldr	r2, [pc, #700]	; (8004ad8 <TIM2_IRQHandler+0x300>)
 800481c:	6013      	str	r3, [r2, #0]

  i_arrdata[i]=adc_val[0];
 800481e:	4bac      	ldr	r3, [pc, #688]	; (8004ad0 <TIM2_IRQHandler+0x2f8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4aaf      	ldr	r2, [pc, #700]	; (8004ae0 <TIM2_IRQHandler+0x308>)
 8004824:	8811      	ldrh	r1, [r2, #0]
 8004826:	4aab      	ldr	r2, [pc, #684]	; (8004ad4 <TIM2_IRQHandler+0x2fc>)
 8004828:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  ref_arrdata[i]=adc_val[1];
 800482c:	4ba8      	ldr	r3, [pc, #672]	; (8004ad0 <TIM2_IRQHandler+0x2f8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4aab      	ldr	r2, [pc, #684]	; (8004ae0 <TIM2_IRQHandler+0x308>)
 8004832:	8851      	ldrh	r1, [r2, #2]
 8004834:	4aa9      	ldr	r2, [pc, #676]	; (8004adc <TIM2_IRQHandler+0x304>)
 8004836:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

  sumI=sumI+i_arrdata[i];
 800483a:	4ba5      	ldr	r3, [pc, #660]	; (8004ad0 <TIM2_IRQHandler+0x2f8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4aa5      	ldr	r2, [pc, #660]	; (8004ad4 <TIM2_IRQHandler+0x2fc>)
 8004840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004844:	461a      	mov	r2, r3
 8004846:	4ba1      	ldr	r3, [pc, #644]	; (8004acc <TIM2_IRQHandler+0x2f4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4413      	add	r3, r2
 800484c:	4a9f      	ldr	r2, [pc, #636]	; (8004acc <TIM2_IRQHandler+0x2f4>)
 800484e:	6013      	str	r3, [r2, #0]
  sumRef=sumRef+ref_arrdata[i];
 8004850:	4b9f      	ldr	r3, [pc, #636]	; (8004ad0 <TIM2_IRQHandler+0x2f8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4aa1      	ldr	r2, [pc, #644]	; (8004adc <TIM2_IRQHandler+0x304>)
 8004856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800485a:	461a      	mov	r2, r3
 800485c:	4b9e      	ldr	r3, [pc, #632]	; (8004ad8 <TIM2_IRQHandler+0x300>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4413      	add	r3, r2
 8004862:	4a9d      	ldr	r2, [pc, #628]	; (8004ad8 <TIM2_IRQHandler+0x300>)
 8004864:	6013      	str	r3, [r2, #0]

  i_datadigi=sumI/maxdata;
 8004866:	4b99      	ldr	r3, [pc, #612]	; (8004acc <TIM2_IRQHandler+0x2f4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a9e      	ldr	r2, [pc, #632]	; (8004ae4 <TIM2_IRQHandler+0x30c>)
 800486c:	fb82 1203 	smull	r1, r2, r2, r3
 8004870:	1152      	asrs	r2, r2, #5
 8004872:	17db      	asrs	r3, r3, #31
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	4618      	mov	r0, r3
 8004878:	f7fc fa10 	bl	8000c9c <__aeabi_i2f>
 800487c:	4602      	mov	r2, r0
 800487e:	4b9a      	ldr	r3, [pc, #616]	; (8004ae8 <TIM2_IRQHandler+0x310>)
 8004880:	601a      	str	r2, [r3, #0]
  ref_datadigi=sumRef/maxdata;
 8004882:	4b95      	ldr	r3, [pc, #596]	; (8004ad8 <TIM2_IRQHandler+0x300>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a97      	ldr	r2, [pc, #604]	; (8004ae4 <TIM2_IRQHandler+0x30c>)
 8004888:	fb82 1203 	smull	r1, r2, r2, r3
 800488c:	1152      	asrs	r2, r2, #5
 800488e:	17db      	asrs	r3, r3, #31
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	4618      	mov	r0, r3
 8004894:	f7fc fa02 	bl	8000c9c <__aeabi_i2f>
 8004898:	4602      	mov	r2, r0
 800489a:	4b94      	ldr	r3, [pc, #592]	; (8004aec <TIM2_IRQHandler+0x314>)
 800489c:	601a      	str	r2, [r3, #0]


  // *************PROSES Konversi dari DATA ADC ke Data Real *******************************/////

  VBATT=v_cell_tot;
 800489e:	4b94      	ldr	r3, [pc, #592]	; (8004af0 <TIM2_IRQHandler+0x318>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a94      	ldr	r2, [pc, #592]	; (8004af4 <TIM2_IRQHandler+0x31c>)
 80048a4:	6013      	str	r3, [r2, #0]
  if(VBATT<0) VBATT=-1;
 80048a6:	4b93      	ldr	r3, [pc, #588]	; (8004af4 <TIM2_IRQHandler+0x31c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f04f 0100 	mov.w	r1, #0
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fc fbe6 	bl	8001080 <__aeabi_fcmplt>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <TIM2_IRQHandler+0xe8>
 80048ba:	4b8e      	ldr	r3, [pc, #568]	; (8004af4 <TIM2_IRQHandler+0x31c>)
 80048bc:	4a8e      	ldr	r2, [pc, #568]	; (8004af8 <TIM2_IRQHandler+0x320>)
 80048be:	601a      	str	r2, [r3, #0]
	  IBATT = -0.06309346733668010*i_datadigi + 121.153903517579 - OFFSET_SENSOR_ARUS; //modul A fix
	  IBATT_for_offset_cal = -0.06309346733668010*i_datadigi + 121.153903517579;
//	  IBATT=0.95556329728489100*IBATT + 0.06243330788446070;// Modul A Recalibrate
  }
  else if (UNIQUE_Code == 0xBBBB1){
	  IBATT=-0.0399033588118257*i_datadigi + 77.0576930186035 - OFFSET_SENSOR_ARUS; // Modul B fix
 80048c0:	4b89      	ldr	r3, [pc, #548]	; (8004ae8 <TIM2_IRQHandler+0x310>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fb fdaf 	bl	8000428 <__aeabi_f2d>
 80048ca:	a375      	add	r3, pc, #468	; (adr r3, 8004aa0 <TIM2_IRQHandler+0x2c8>)
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f7fb fe02 	bl	80004d8 <__aeabi_dmul>
 80048d4:	4603      	mov	r3, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	4618      	mov	r0, r3
 80048da:	4621      	mov	r1, r4
 80048dc:	a372      	add	r3, pc, #456	; (adr r3, 8004aa8 <TIM2_IRQHandler+0x2d0>)
 80048de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e2:	f7fb fc43 	bl	800016c <__adddf3>
 80048e6:	4603      	mov	r3, r0
 80048e8:	460c      	mov	r4, r1
 80048ea:	4625      	mov	r5, r4
 80048ec:	461c      	mov	r4, r3
 80048ee:	4b83      	ldr	r3, [pc, #524]	; (8004afc <TIM2_IRQHandler+0x324>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fb fd98 	bl	8000428 <__aeabi_f2d>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4620      	mov	r0, r4
 80048fe:	4629      	mov	r1, r5
 8004900:	f7fb fc32 	bl	8000168 <__aeabi_dsub>
 8004904:	4603      	mov	r3, r0
 8004906:	460c      	mov	r4, r1
 8004908:	4618      	mov	r0, r3
 800490a:	4621      	mov	r1, r4
 800490c:	f7fc f8bc 	bl	8000a88 <__aeabi_d2f>
 8004910:	4602      	mov	r2, r0
 8004912:	4b7b      	ldr	r3, [pc, #492]	; (8004b00 <TIM2_IRQHandler+0x328>)
 8004914:	601a      	str	r2, [r3, #0]
	  IBATT_for_offset_cal= -0.0399033588118257*i_datadigi + 77.0576930186035;
 8004916:	4b74      	ldr	r3, [pc, #464]	; (8004ae8 <TIM2_IRQHandler+0x310>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fb fd84 	bl	8000428 <__aeabi_f2d>
 8004920:	a35f      	add	r3, pc, #380	; (adr r3, 8004aa0 <TIM2_IRQHandler+0x2c8>)
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	f7fb fdd7 	bl	80004d8 <__aeabi_dmul>
 800492a:	4603      	mov	r3, r0
 800492c:	460c      	mov	r4, r1
 800492e:	4618      	mov	r0, r3
 8004930:	4621      	mov	r1, r4
 8004932:	a35d      	add	r3, pc, #372	; (adr r3, 8004aa8 <TIM2_IRQHandler+0x2d0>)
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f7fb fc18 	bl	800016c <__adddf3>
 800493c:	4603      	mov	r3, r0
 800493e:	460c      	mov	r4, r1
 8004940:	4618      	mov	r0, r3
 8004942:	4621      	mov	r1, r4
 8004944:	f7fc f8a0 	bl	8000a88 <__aeabi_d2f>
 8004948:	4602      	mov	r2, r0
 800494a:	4b6e      	ldr	r3, [pc, #440]	; (8004b04 <TIM2_IRQHandler+0x32c>)
 800494c:	601a      	str	r2, [r3, #0]





  if(hitung_suhu>=max_hitung_suhu)
 800494e:	4b5e      	ldr	r3, [pc, #376]	; (8004ac8 <TIM2_IRQHandler+0x2f0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b09      	cmp	r3, #9
 8004954:	f340 814a 	ble.w	8004bec <TIM2_IRQHandler+0x414>
  {
	  hitung_suhu=0;
 8004958:	4b5b      	ldr	r3, [pc, #364]	; (8004ac8 <TIM2_IRQHandler+0x2f0>)
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
	  Res_T1=adc_val[2]*10000/(3900-adc_val[2]); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 800495e:	4b60      	ldr	r3, [pc, #384]	; (8004ae0 <TIM2_IRQHandler+0x308>)
 8004960:	889b      	ldrh	r3, [r3, #4]
 8004962:	461a      	mov	r2, r3
 8004964:	f242 7310 	movw	r3, #10000	; 0x2710
 8004968:	fb03 f202 	mul.w	r2, r3, r2
 800496c:	4b5c      	ldr	r3, [pc, #368]	; (8004ae0 <TIM2_IRQHandler+0x308>)
 800496e:	889b      	ldrh	r3, [r3, #4]
 8004970:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004974:	330c      	adds	r3, #12
 8004976:	fb92 f3f3 	sdiv	r3, r2, r3
 800497a:	4618      	mov	r0, r3
 800497c:	f7fc f98e 	bl	8000c9c <__aeabi_i2f>
 8004980:	4602      	mov	r2, r0
 8004982:	4b61      	ldr	r3, [pc, #388]	; (8004b08 <TIM2_IRQHandler+0x330>)
 8004984:	601a      	str	r2, [r3, #0]
	  Suhu_T1= -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8004986:	4b60      	ldr	r3, [pc, #384]	; (8004b08 <TIM2_IRQHandler+0x330>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fb fd4c 	bl	8000428 <__aeabi_f2d>
 8004990:	4603      	mov	r3, r0
 8004992:	460c      	mov	r4, r1
 8004994:	4618      	mov	r0, r3
 8004996:	4621      	mov	r1, r4
 8004998:	f007 ff72 	bl	800c880 <log>
 800499c:	a344      	add	r3, pc, #272	; (adr r3, 8004ab0 <TIM2_IRQHandler+0x2d8>)
 800499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a2:	f7fb fd99 	bl	80004d8 <__aeabi_dmul>
 80049a6:	4603      	mov	r3, r0
 80049a8:	460c      	mov	r4, r1
 80049aa:	4618      	mov	r0, r3
 80049ac:	4621      	mov	r1, r4
 80049ae:	a342      	add	r3, pc, #264	; (adr r3, 8004ab8 <TIM2_IRQHandler+0x2e0>)
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f7fb fbda 	bl	800016c <__adddf3>
 80049b8:	4603      	mov	r3, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	4618      	mov	r0, r3
 80049be:	4621      	mov	r1, r4
 80049c0:	f7fc f862 	bl	8000a88 <__aeabi_d2f>
 80049c4:	4602      	mov	r2, r0
 80049c6:	4b51      	ldr	r3, [pc, #324]	; (8004b0c <TIM2_IRQHandler+0x334>)
 80049c8:	601a      	str	r2, [r3, #0]
	  Res_T2=adc_val[3]*10000/(3900-adc_val[3]);
 80049ca:	4b45      	ldr	r3, [pc, #276]	; (8004ae0 <TIM2_IRQHandler+0x308>)
 80049cc:	88db      	ldrh	r3, [r3, #6]
 80049ce:	461a      	mov	r2, r3
 80049d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80049d4:	fb03 f202 	mul.w	r2, r3, r2
 80049d8:	4b41      	ldr	r3, [pc, #260]	; (8004ae0 <TIM2_IRQHandler+0x308>)
 80049da:	88db      	ldrh	r3, [r3, #6]
 80049dc:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 80049e0:	330c      	adds	r3, #12
 80049e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fc f958 	bl	8000c9c <__aeabi_i2f>
 80049ec:	4602      	mov	r2, r0
 80049ee:	4b48      	ldr	r3, [pc, #288]	; (8004b10 <TIM2_IRQHandler+0x338>)
 80049f0:	601a      	str	r2, [r3, #0]
	  Suhu_T2= -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 80049f2:	4b47      	ldr	r3, [pc, #284]	; (8004b10 <TIM2_IRQHandler+0x338>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fb fd16 	bl	8000428 <__aeabi_f2d>
 80049fc:	4603      	mov	r3, r0
 80049fe:	460c      	mov	r4, r1
 8004a00:	4618      	mov	r0, r3
 8004a02:	4621      	mov	r1, r4
 8004a04:	f007 ff3c 	bl	800c880 <log>
 8004a08:	a329      	add	r3, pc, #164	; (adr r3, 8004ab0 <TIM2_IRQHandler+0x2d8>)
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	f7fb fd63 	bl	80004d8 <__aeabi_dmul>
 8004a12:	4603      	mov	r3, r0
 8004a14:	460c      	mov	r4, r1
 8004a16:	4618      	mov	r0, r3
 8004a18:	4621      	mov	r1, r4
 8004a1a:	a327      	add	r3, pc, #156	; (adr r3, 8004ab8 <TIM2_IRQHandler+0x2e0>)
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	f7fb fba4 	bl	800016c <__adddf3>
 8004a24:	4603      	mov	r3, r0
 8004a26:	460c      	mov	r4, r1
 8004a28:	4618      	mov	r0, r3
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	f7fc f82c 	bl	8000a88 <__aeabi_d2f>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b38      	ldr	r3, [pc, #224]	; (8004b14 <TIM2_IRQHandler+0x33c>)
 8004a34:	601a      	str	r2, [r3, #0]
	  Res_T3=adc_val[4]*10000/(3900-adc_val[4]);
 8004a36:	4b2a      	ldr	r3, [pc, #168]	; (8004ae0 <TIM2_IRQHandler+0x308>)
 8004a38:	891b      	ldrh	r3, [r3, #8]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f242 7310 	movw	r3, #10000	; 0x2710
 8004a40:	fb03 f202 	mul.w	r2, r3, r2
 8004a44:	4b26      	ldr	r3, [pc, #152]	; (8004ae0 <TIM2_IRQHandler+0x308>)
 8004a46:	891b      	ldrh	r3, [r3, #8]
 8004a48:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fc f922 	bl	8000c9c <__aeabi_i2f>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	4b2f      	ldr	r3, [pc, #188]	; (8004b18 <TIM2_IRQHandler+0x340>)
 8004a5c:	601a      	str	r2, [r3, #0]
	  Suhu_T3= -24.05*log(Res_T3) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8004a5e:	4b2e      	ldr	r3, [pc, #184]	; (8004b18 <TIM2_IRQHandler+0x340>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fb fce0 	bl	8000428 <__aeabi_f2d>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	4621      	mov	r1, r4
 8004a70:	f007 ff06 	bl	800c880 <log>
 8004a74:	a30e      	add	r3, pc, #56	; (adr r3, 8004ab0 <TIM2_IRQHandler+0x2d8>)
 8004a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7a:	f7fb fd2d 	bl	80004d8 <__aeabi_dmul>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	460c      	mov	r4, r1
 8004a82:	4618      	mov	r0, r3
 8004a84:	4621      	mov	r1, r4
 8004a86:	a30c      	add	r3, pc, #48	; (adr r3, 8004ab8 <TIM2_IRQHandler+0x2e0>)
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	f7fb fb6e 	bl	800016c <__adddf3>
 8004a90:	4603      	mov	r3, r0
 8004a92:	460c      	mov	r4, r1
 8004a94:	4618      	mov	r0, r3
 8004a96:	4621      	mov	r1, r4
 8004a98:	f7fb fff6 	bl	8000a88 <__aeabi_d2f>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	e03d      	b.n	8004b1c <TIM2_IRQHandler+0x344>
 8004aa0:	8a31d72d 	.word	0x8a31d72d
 8004aa4:	bfa46e36 	.word	0xbfa46e36
 8004aa8:	3e0f0703 	.word	0x3e0f0703
 8004aac:	405343b1 	.word	0x405343b1
 8004ab0:	cccccccd 	.word	0xcccccccd
 8004ab4:	c0380ccc 	.word	0xc0380ccc
 8004ab8:	b851eb85 	.word	0xb851eb85
 8004abc:	406ecd1e 	.word	0x406ecd1e
 8004ac0:	20001540 	.word	0x20001540
 8004ac4:	20000bd4 	.word	0x20000bd4
 8004ac8:	200010f8 	.word	0x200010f8
 8004acc:	200010ec 	.word	0x200010ec
 8004ad0:	200010b4 	.word	0x200010b4
 8004ad4:	20000c84 	.word	0x20000c84
 8004ad8:	2000107c 	.word	0x2000107c
 8004adc:	2000110c 	.word	0x2000110c
 8004ae0:	20000904 	.word	0x20000904
 8004ae4:	10624dd3 	.word	0x10624dd3
 8004ae8:	20001084 	.word	0x20001084
 8004aec:	200010a4 	.word	0x200010a4
 8004af0:	20000bb4 	.word	0x20000bb4
 8004af4:	2000108c 	.word	0x2000108c
 8004af8:	bf800000 	.word	0xbf800000
 8004afc:	20001104 	.word	0x20001104
 8004b00:	200010a8 	.word	0x200010a8
 8004b04:	20001108 	.word	0x20001108
 8004b08:	200010a0 	.word	0x200010a0
 8004b0c:	200010bc 	.word	0x200010bc
 8004b10:	200010e8 	.word	0x200010e8
 8004b14:	200014f8 	.word	0x200014f8
 8004b18:	20001100 	.word	0x20001100
 8004b1c:	4ba6      	ldr	r3, [pc, #664]	; (8004db8 <TIM2_IRQHandler+0x5e0>)
 8004b1e:	601a      	str	r2, [r3, #0]
	  Res_T4=adc_val[5]*10000/(3900-adc_val[5]);
 8004b20:	4ba6      	ldr	r3, [pc, #664]	; (8004dbc <TIM2_IRQHandler+0x5e4>)
 8004b22:	895b      	ldrh	r3, [r3, #10]
 8004b24:	461a      	mov	r2, r3
 8004b26:	f242 7310 	movw	r3, #10000	; 0x2710
 8004b2a:	fb03 f202 	mul.w	r2, r3, r2
 8004b2e:	4ba3      	ldr	r3, [pc, #652]	; (8004dbc <TIM2_IRQHandler+0x5e4>)
 8004b30:	895b      	ldrh	r3, [r3, #10]
 8004b32:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004b36:	330c      	adds	r3, #12
 8004b38:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fc f8ad 	bl	8000c9c <__aeabi_i2f>
 8004b42:	4602      	mov	r2, r0
 8004b44:	4b9e      	ldr	r3, [pc, #632]	; (8004dc0 <TIM2_IRQHandler+0x5e8>)
 8004b46:	601a      	str	r2, [r3, #0]
	  Suhu_T4= -24.05*log(Res_T4) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8004b48:	4b9d      	ldr	r3, [pc, #628]	; (8004dc0 <TIM2_IRQHandler+0x5e8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fb fc6b 	bl	8000428 <__aeabi_f2d>
 8004b52:	4603      	mov	r3, r0
 8004b54:	460c      	mov	r4, r1
 8004b56:	4618      	mov	r0, r3
 8004b58:	4621      	mov	r1, r4
 8004b5a:	f007 fe91 	bl	800c880 <log>
 8004b5e:	a392      	add	r3, pc, #584	; (adr r3, 8004da8 <TIM2_IRQHandler+0x5d0>)
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	f7fb fcb8 	bl	80004d8 <__aeabi_dmul>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	4621      	mov	r1, r4
 8004b70:	a38f      	add	r3, pc, #572	; (adr r3, 8004db0 <TIM2_IRQHandler+0x5d8>)
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	f7fb faf9 	bl	800016c <__adddf3>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	460c      	mov	r4, r1
 8004b7e:	4618      	mov	r0, r3
 8004b80:	4621      	mov	r1, r4
 8004b82:	f7fb ff81 	bl	8000a88 <__aeabi_d2f>
 8004b86:	4602      	mov	r2, r0
 8004b88:	4b8e      	ldr	r3, [pc, #568]	; (8004dc4 <TIM2_IRQHandler+0x5ec>)
 8004b8a:	601a      	str	r2, [r3, #0]

	  if(Suhu_T1>=130) Suhu_T1 = 130;
 8004b8c:	4b8e      	ldr	r3, [pc, #568]	; (8004dc8 <TIM2_IRQHandler+0x5f0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	498e      	ldr	r1, [pc, #568]	; (8004dcc <TIM2_IRQHandler+0x5f4>)
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fc fa88 	bl	80010a8 <__aeabi_fcmpge>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <TIM2_IRQHandler+0x3cc>
 8004b9e:	4b8a      	ldr	r3, [pc, #552]	; (8004dc8 <TIM2_IRQHandler+0x5f0>)
 8004ba0:	4a8a      	ldr	r2, [pc, #552]	; (8004dcc <TIM2_IRQHandler+0x5f4>)
 8004ba2:	601a      	str	r2, [r3, #0]
	  if(Suhu_T2>=130) Suhu_T2 = 130;
 8004ba4:	4b8a      	ldr	r3, [pc, #552]	; (8004dd0 <TIM2_IRQHandler+0x5f8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4988      	ldr	r1, [pc, #544]	; (8004dcc <TIM2_IRQHandler+0x5f4>)
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fc fa7c 	bl	80010a8 <__aeabi_fcmpge>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <TIM2_IRQHandler+0x3e4>
 8004bb6:	4b86      	ldr	r3, [pc, #536]	; (8004dd0 <TIM2_IRQHandler+0x5f8>)
 8004bb8:	4a84      	ldr	r2, [pc, #528]	; (8004dcc <TIM2_IRQHandler+0x5f4>)
 8004bba:	601a      	str	r2, [r3, #0]
	  if(Suhu_T3>=130) Suhu_T3 = 130;
 8004bbc:	4b7e      	ldr	r3, [pc, #504]	; (8004db8 <TIM2_IRQHandler+0x5e0>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4982      	ldr	r1, [pc, #520]	; (8004dcc <TIM2_IRQHandler+0x5f4>)
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fc fa70 	bl	80010a8 <__aeabi_fcmpge>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <TIM2_IRQHandler+0x3fc>
 8004bce:	4b7a      	ldr	r3, [pc, #488]	; (8004db8 <TIM2_IRQHandler+0x5e0>)
 8004bd0:	4a7e      	ldr	r2, [pc, #504]	; (8004dcc <TIM2_IRQHandler+0x5f4>)
 8004bd2:	601a      	str	r2, [r3, #0]
	  if(Suhu_T4>=130) Suhu_T4 = 130;
 8004bd4:	4b7b      	ldr	r3, [pc, #492]	; (8004dc4 <TIM2_IRQHandler+0x5ec>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	497c      	ldr	r1, [pc, #496]	; (8004dcc <TIM2_IRQHandler+0x5f4>)
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fc fa64 	bl	80010a8 <__aeabi_fcmpge>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <TIM2_IRQHandler+0x414>
 8004be6:	4b77      	ldr	r3, [pc, #476]	; (8004dc4 <TIM2_IRQHandler+0x5ec>)
 8004be8:	4a78      	ldr	r2, [pc, #480]	; (8004dcc <TIM2_IRQHandler+0x5f4>)
 8004bea:	601a      	str	r2, [r3, #0]
  }

  if(BATT_Start_Up==1)
 8004bec:	4b79      	ldr	r3, [pc, #484]	; (8004dd4 <TIM2_IRQHandler+0x5fc>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	f040 80a7 	bne.w	8004d44 <TIM2_IRQHandler+0x56c>
  {
	  if(BATT_State==STATE_DISCHARGE)
 8004bf6:	4b78      	ldr	r3, [pc, #480]	; (8004dd8 <TIM2_IRQHandler+0x600>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d101      	bne.n	8004c02 <TIM2_IRQHandler+0x42a>
	  {
		 Batt_Protection_when_discharge();
 8004bfe:	f000 f9eb 	bl	8004fd8 <Batt_Protection_when_discharge>
	  }

	  if(BATT_State==STATE_CHARGE)
 8004c02:	4b75      	ldr	r3, [pc, #468]	; (8004dd8 <TIM2_IRQHandler+0x600>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <TIM2_IRQHandler+0x436>
	  {
		  Batt_Protection_when_charge();
 8004c0a:	f001 f81d 	bl	8005c48 <Batt_Protection_when_charge>
	  }


	  //********************* Clearing protection status *****************************////
	  // ---> Clearing UnderVoltage
	  if(((Clear_Trip_undervoltage==1)||(VBATT>54))&&flag_trip_undervoltage==ON)
 8004c0e:	4b73      	ldr	r3, [pc, #460]	; (8004ddc <TIM2_IRQHandler+0x604>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d008      	beq.n	8004c28 <TIM2_IRQHandler+0x450>
 8004c16:	4b72      	ldr	r3, [pc, #456]	; (8004de0 <TIM2_IRQHandler+0x608>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4972      	ldr	r1, [pc, #456]	; (8004de4 <TIM2_IRQHandler+0x60c>)
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fc fa4d 	bl	80010bc <__aeabi_fcmpgt>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d009      	beq.n	8004c3c <TIM2_IRQHandler+0x464>
 8004c28:	4b6f      	ldr	r3, [pc, #444]	; (8004de8 <TIM2_IRQHandler+0x610>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d105      	bne.n	8004c3c <TIM2_IRQHandler+0x464>
	  {
		  flag_trip_undervoltage=OFF;
 8004c30:	4b6d      	ldr	r3, [pc, #436]	; (8004de8 <TIM2_IRQHandler+0x610>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
		  Clear_Trip_undervoltage=0;
 8004c36:	4b69      	ldr	r3, [pc, #420]	; (8004ddc <TIM2_IRQHandler+0x604>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverCurrent Discharge
	  if(flag_trip_overcurrentdischarge==ON && Clear_Trip_overcurrentdischarge==1)
 8004c3c:	4b6b      	ldr	r3, [pc, #428]	; (8004dec <TIM2_IRQHandler+0x614>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d109      	bne.n	8004c58 <TIM2_IRQHandler+0x480>
 8004c44:	4b6a      	ldr	r3, [pc, #424]	; (8004df0 <TIM2_IRQHandler+0x618>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d105      	bne.n	8004c58 <TIM2_IRQHandler+0x480>
	  {
		  flag_trip_overcurrentdischarge=OFF;
 8004c4c:	4b67      	ldr	r3, [pc, #412]	; (8004dec <TIM2_IRQHandler+0x614>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	701a      	strb	r2, [r3, #0]
		  Clear_Trip_overcurrentdischarge=0;
 8004c52:	4b67      	ldr	r3, [pc, #412]	; (8004df0 <TIM2_IRQHandler+0x618>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverTemperature
	  if(flag_trip_overtemperature==ON && (Suhu_T1<40)&&(Suhu_T2<50)&&(Suhu_T3<40)&&(Suhu_T4<50))
 8004c58:	4b66      	ldr	r3, [pc, #408]	; (8004df4 <TIM2_IRQHandler+0x61c>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d126      	bne.n	8004cae <TIM2_IRQHandler+0x4d6>
 8004c60:	4b59      	ldr	r3, [pc, #356]	; (8004dc8 <TIM2_IRQHandler+0x5f0>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4964      	ldr	r1, [pc, #400]	; (8004df8 <TIM2_IRQHandler+0x620>)
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fc fa0a 	bl	8001080 <__aeabi_fcmplt>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d01d      	beq.n	8004cae <TIM2_IRQHandler+0x4d6>
 8004c72:	4b57      	ldr	r3, [pc, #348]	; (8004dd0 <TIM2_IRQHandler+0x5f8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4961      	ldr	r1, [pc, #388]	; (8004dfc <TIM2_IRQHandler+0x624>)
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fc fa01 	bl	8001080 <__aeabi_fcmplt>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d014      	beq.n	8004cae <TIM2_IRQHandler+0x4d6>
 8004c84:	4b4c      	ldr	r3, [pc, #304]	; (8004db8 <TIM2_IRQHandler+0x5e0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	495b      	ldr	r1, [pc, #364]	; (8004df8 <TIM2_IRQHandler+0x620>)
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fc f9f8 	bl	8001080 <__aeabi_fcmplt>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00b      	beq.n	8004cae <TIM2_IRQHandler+0x4d6>
 8004c96:	4b4b      	ldr	r3, [pc, #300]	; (8004dc4 <TIM2_IRQHandler+0x5ec>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4958      	ldr	r1, [pc, #352]	; (8004dfc <TIM2_IRQHandler+0x624>)
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fc f9ef 	bl	8001080 <__aeabi_fcmplt>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <TIM2_IRQHandler+0x4d6>
	  {
		  flag_trip_overtemperature=OFF;
 8004ca8:	4b52      	ldr	r3, [pc, #328]	; (8004df4 <TIM2_IRQHandler+0x61c>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing UnderTemperature
	  if(flag_trip_undertemperature==ON && (Suhu_T1>20)&&(Suhu_T2>20)&&(Suhu_T3>20)&&(Suhu_T4>20))
 8004cae:	4b54      	ldr	r3, [pc, #336]	; (8004e00 <TIM2_IRQHandler+0x628>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d126      	bne.n	8004d04 <TIM2_IRQHandler+0x52c>
 8004cb6:	4b44      	ldr	r3, [pc, #272]	; (8004dc8 <TIM2_IRQHandler+0x5f0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4952      	ldr	r1, [pc, #328]	; (8004e04 <TIM2_IRQHandler+0x62c>)
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fc f9fd 	bl	80010bc <__aeabi_fcmpgt>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01d      	beq.n	8004d04 <TIM2_IRQHandler+0x52c>
 8004cc8:	4b41      	ldr	r3, [pc, #260]	; (8004dd0 <TIM2_IRQHandler+0x5f8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	494d      	ldr	r1, [pc, #308]	; (8004e04 <TIM2_IRQHandler+0x62c>)
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fc f9f4 	bl	80010bc <__aeabi_fcmpgt>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d014      	beq.n	8004d04 <TIM2_IRQHandler+0x52c>
 8004cda:	4b37      	ldr	r3, [pc, #220]	; (8004db8 <TIM2_IRQHandler+0x5e0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4949      	ldr	r1, [pc, #292]	; (8004e04 <TIM2_IRQHandler+0x62c>)
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fc f9eb 	bl	80010bc <__aeabi_fcmpgt>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00b      	beq.n	8004d04 <TIM2_IRQHandler+0x52c>
 8004cec:	4b35      	ldr	r3, [pc, #212]	; (8004dc4 <TIM2_IRQHandler+0x5ec>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4944      	ldr	r1, [pc, #272]	; (8004e04 <TIM2_IRQHandler+0x62c>)
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fc f9e2 	bl	80010bc <__aeabi_fcmpgt>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <TIM2_IRQHandler+0x52c>
	  {
		  flag_trip_undertemperature=OFF;
 8004cfe:	4b40      	ldr	r3, [pc, #256]	; (8004e00 <TIM2_IRQHandler+0x628>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverDischarge
	   if(flag_trip_SOCOverDischarge==ON && Pack_SOC>20)
 8004d04:	4b40      	ldr	r3, [pc, #256]	; (8004e08 <TIM2_IRQHandler+0x630>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d10b      	bne.n	8004d24 <TIM2_IRQHandler+0x54c>
 8004d0c:	4b3f      	ldr	r3, [pc, #252]	; (8004e0c <TIM2_IRQHandler+0x634>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	493c      	ldr	r1, [pc, #240]	; (8004e04 <TIM2_IRQHandler+0x62c>)
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fc f9d2 	bl	80010bc <__aeabi_fcmpgt>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <TIM2_IRQHandler+0x54c>
	   {
		  flag_trip_SOCOverDischarge=OFF;
 8004d1e:	4b3a      	ldr	r3, [pc, #232]	; (8004e08 <TIM2_IRQHandler+0x630>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	701a      	strb	r2, [r3, #0]
	   }
	   // ---> Clearing OverCharge
	   if(flag_trip_SOCOverCharge==ON && Pack_SOC<70)
 8004d24:	4b3a      	ldr	r3, [pc, #232]	; (8004e10 <TIM2_IRQHandler+0x638>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d10b      	bne.n	8004d44 <TIM2_IRQHandler+0x56c>
 8004d2c:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <TIM2_IRQHandler+0x634>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4938      	ldr	r1, [pc, #224]	; (8004e14 <TIM2_IRQHandler+0x63c>)
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fc f9a4 	bl	8001080 <__aeabi_fcmplt>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <TIM2_IRQHandler+0x56c>
	   {
		  flag_trip_SOCOverCharge=OFF;
 8004d3e:	4b34      	ldr	r3, [pc, #208]	; (8004e10 <TIM2_IRQHandler+0x638>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	701a      	strb	r2, [r3, #0]
	   }
  }
	  i++;
 8004d44:	4b34      	ldr	r3, [pc, #208]	; (8004e18 <TIM2_IRQHandler+0x640>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	4a33      	ldr	r2, [pc, #204]	; (8004e18 <TIM2_IRQHandler+0x640>)
 8004d4c:	6013      	str	r3, [r2, #0]
	  i=i%maxdata;
 8004d4e:	4b32      	ldr	r3, [pc, #200]	; (8004e18 <TIM2_IRQHandler+0x640>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b32      	ldr	r3, [pc, #200]	; (8004e1c <TIM2_IRQHandler+0x644>)
 8004d54:	fb83 1302 	smull	r1, r3, r3, r2
 8004d58:	1159      	asrs	r1, r3, #5
 8004d5a:	17d3      	asrs	r3, r2, #31
 8004d5c:	1acb      	subs	r3, r1, r3
 8004d5e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	4a2b      	ldr	r2, [pc, #172]	; (8004e18 <TIM2_IRQHandler+0x640>)
 8004d6a:	6013      	str	r3, [r2, #0]

  //////////// Bagian Hitung SOC /////// SOC akan dihitung berdasarkan state baterai (Jika charge maupun discharge)
  if(BATT_State==STATE_CHARGE||BATT_State==STATE_DISCHARGE||BATT_State==STATE_FULL_CHARGE_DISCHARGE||BATT_State==STATE_STANDBY)
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	; (8004dd8 <TIM2_IRQHandler+0x600>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d00c      	beq.n	8004d8e <TIM2_IRQHandler+0x5b6>
 8004d74:	4b18      	ldr	r3, [pc, #96]	; (8004dd8 <TIM2_IRQHandler+0x600>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d008      	beq.n	8004d8e <TIM2_IRQHandler+0x5b6>
 8004d7c:	4b16      	ldr	r3, [pc, #88]	; (8004dd8 <TIM2_IRQHandler+0x600>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d004      	beq.n	8004d8e <TIM2_IRQHandler+0x5b6>
 8004d84:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <TIM2_IRQHandler+0x600>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f040 80ea 	bne.w	8004f62 <TIM2_IRQHandler+0x78a>
  {
	  time_soc++;
 8004d8e:	4b24      	ldr	r3, [pc, #144]	; (8004e20 <TIM2_IRQHandler+0x648>)
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	3301      	adds	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	4b22      	ldr	r3, [pc, #136]	; (8004e20 <TIM2_IRQHandler+0x648>)
 8004d98:	801a      	strh	r2, [r3, #0]
	  sum_current+=IBATT;
 8004d9a:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <TIM2_IRQHandler+0x64c>)
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	4b22      	ldr	r3, [pc, #136]	; (8004e28 <TIM2_IRQHandler+0x650>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4619      	mov	r1, r3
 8004da4:	e042      	b.n	8004e2c <TIM2_IRQHandler+0x654>
 8004da6:	bf00      	nop
 8004da8:	cccccccd 	.word	0xcccccccd
 8004dac:	c0380ccc 	.word	0xc0380ccc
 8004db0:	b851eb85 	.word	0xb851eb85
 8004db4:	406ecd1e 	.word	0x406ecd1e
 8004db8:	20001090 	.word	0x20001090
 8004dbc:	20000904 	.word	0x20000904
 8004dc0:	200010ac 	.word	0x200010ac
 8004dc4:	200010f0 	.word	0x200010f0
 8004dc8:	200010bc 	.word	0x200010bc
 8004dcc:	43020000 	.word	0x43020000
 8004dd0:	200014f8 	.word	0x200014f8
 8004dd4:	2000028a 	.word	0x2000028a
 8004dd8:	200009a8 	.word	0x200009a8
 8004ddc:	200010fc 	.word	0x200010fc
 8004de0:	2000108c 	.word	0x2000108c
 8004de4:	42580000 	.word	0x42580000
 8004de8:	200010b1 	.word	0x200010b1
 8004dec:	200010c0 	.word	0x200010c0
 8004df0:	20001098 	.word	0x20001098
 8004df4:	20001088 	.word	0x20001088
 8004df8:	42200000 	.word	0x42200000
 8004dfc:	42480000 	.word	0x42480000
 8004e00:	200010b0 	.word	0x200010b0
 8004e04:	41a00000 	.word	0x41a00000
 8004e08:	200010e4 	.word	0x200010e4
 8004e0c:	20000bdc 	.word	0x20000bdc
 8004e10:	20000c81 	.word	0x20000c81
 8004e14:	428c0000 	.word	0x428c0000
 8004e18:	200010b4 	.word	0x200010b4
 8004e1c:	10624dd3 	.word	0x10624dd3
 8004e20:	2000108a 	.word	0x2000108a
 8004e24:	200014fc 	.word	0x200014fc
 8004e28:	200010a8 	.word	0x200010a8
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f7fb fe81 	bl	8000b34 <__addsf3>
 8004e32:	4603      	mov	r3, r0
 8004e34:	461a      	mov	r2, r3
 8004e36:	4b4e      	ldr	r3, [pc, #312]	; (8004f70 <TIM2_IRQHandler+0x798>)
 8004e38:	601a      	str	r2, [r3, #0]
	  if(time_soc>999)
 8004e3a:	4b4e      	ldr	r3, [pc, #312]	; (8004f74 <TIM2_IRQHandler+0x79c>)
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e42:	f0c0 808e 	bcc.w	8004f62 <TIM2_IRQHandler+0x78a>
	  {
		  AH_Consumption = (-1*sum_current/1000*(1.0/3600.0))/Pack_Cap*100; //Konsumsi System 4e-5
 8004e46:	4b4a      	ldr	r3, [pc, #296]	; (8004f70 <TIM2_IRQHandler+0x798>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004e4e:	494a      	ldr	r1, [pc, #296]	; (8004f78 <TIM2_IRQHandler+0x7a0>)
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fc f82b 	bl	8000eac <__aeabi_fdiv>
 8004e56:	4603      	mov	r3, r0
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fb fae5 	bl	8000428 <__aeabi_f2d>
 8004e5e:	a342      	add	r3, pc, #264	; (adr r3, 8004f68 <TIM2_IRQHandler+0x790>)
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	f7fb fb38 	bl	80004d8 <__aeabi_dmul>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	4625      	mov	r5, r4
 8004e6e:	461c      	mov	r4, r3
 8004e70:	4b42      	ldr	r3, [pc, #264]	; (8004f7c <TIM2_IRQHandler+0x7a4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fb fad7 	bl	8000428 <__aeabi_f2d>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4620      	mov	r0, r4
 8004e80:	4629      	mov	r1, r5
 8004e82:	f7fb fc53 	bl	800072c <__aeabi_ddiv>
 8004e86:	4603      	mov	r3, r0
 8004e88:	460c      	mov	r4, r1
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	4b3b      	ldr	r3, [pc, #236]	; (8004f80 <TIM2_IRQHandler+0x7a8>)
 8004e94:	f7fb fb20 	bl	80004d8 <__aeabi_dmul>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	f7fb fdf2 	bl	8000a88 <__aeabi_d2f>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <TIM2_IRQHandler+0x7ac>)
 8004ea8:	601a      	str	r2, [r3, #0]
		  AH_Total = AH_Total + (sum_current/3600);
 8004eaa:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <TIM2_IRQHandler+0x798>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4936      	ldr	r1, [pc, #216]	; (8004f88 <TIM2_IRQHandler+0x7b0>)
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fb fffb 	bl	8000eac <__aeabi_fdiv>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4b34      	ldr	r3, [pc, #208]	; (8004f8c <TIM2_IRQHandler+0x7b4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	f7fb fe37 	bl	8000b34 <__addsf3>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4b30      	ldr	r3, [pc, #192]	; (8004f8c <TIM2_IRQHandler+0x7b4>)
 8004ecc:	601a      	str	r2, [r3, #0]
		  Pack_SOC=Pack_SOC+AH_Consumption;
 8004ece:	4b30      	ldr	r3, [pc, #192]	; (8004f90 <TIM2_IRQHandler+0x7b8>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4b2c      	ldr	r3, [pc, #176]	; (8004f84 <TIM2_IRQHandler+0x7ac>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4610      	mov	r0, r2
 8004eda:	f7fb fe2b 	bl	8000b34 <__addsf3>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <TIM2_IRQHandler+0x7b8>)
 8004ee4:	601a      	str	r2, [r3, #0]
		  time_soc=0;
 8004ee6:	4b23      	ldr	r3, [pc, #140]	; (8004f74 <TIM2_IRQHandler+0x79c>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	801a      	strh	r2, [r3, #0]
		  sum_current=0;
 8004eec:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <TIM2_IRQHandler+0x798>)
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
		  cek_CC++;
 8004ef4:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <TIM2_IRQHandler+0x7bc>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	4a26      	ldr	r2, [pc, #152]	; (8004f94 <TIM2_IRQHandler+0x7bc>)
 8004efc:	6013      	str	r3, [r2, #0]

		  grad=(100-0)/(batas_atas-batas_bawah);
 8004efe:	4b26      	ldr	r3, [pc, #152]	; (8004f98 <TIM2_IRQHandler+0x7c0>)
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	4b26      	ldr	r3, [pc, #152]	; (8004f9c <TIM2_IRQHandler+0x7c4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f7fb fe11 	bl	8000b30 <__aeabi_fsub>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4619      	mov	r1, r3
 8004f12:	4823      	ldr	r0, [pc, #140]	; (8004fa0 <TIM2_IRQHandler+0x7c8>)
 8004f14:	f7fb ffca 	bl	8000eac <__aeabi_fdiv>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <TIM2_IRQHandler+0x7cc>)
 8004f1e:	601a      	str	r2, [r3, #0]
		  constanta=grad*batas_bawah*(-1);
 8004f20:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <TIM2_IRQHandler+0x7cc>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	4b1d      	ldr	r3, [pc, #116]	; (8004f9c <TIM2_IRQHandler+0x7c4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f7fb ff0a 	bl	8000d44 <__aeabi_fmul>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004f36:	4a1c      	ldr	r2, [pc, #112]	; (8004fa8 <TIM2_IRQHandler+0x7d0>)
 8004f38:	6013      	str	r3, [r2, #0]
		  SOC_manipulasi=grad*Pack_SOC+constanta;
 8004f3a:	4b1a      	ldr	r3, [pc, #104]	; (8004fa4 <TIM2_IRQHandler+0x7cc>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	4b14      	ldr	r3, [pc, #80]	; (8004f90 <TIM2_IRQHandler+0x7b8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4619      	mov	r1, r3
 8004f44:	4610      	mov	r0, r2
 8004f46:	f7fb fefd 	bl	8000d44 <__aeabi_fmul>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	4b16      	ldr	r3, [pc, #88]	; (8004fa8 <TIM2_IRQHandler+0x7d0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4619      	mov	r1, r3
 8004f54:	4610      	mov	r0, r2
 8004f56:	f7fb fded 	bl	8000b34 <__addsf3>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4b13      	ldr	r3, [pc, #76]	; (8004fac <TIM2_IRQHandler+0x7d4>)
 8004f60:	601a      	str	r2, [r3, #0]
	  }
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8004f62:	bf00      	nop
 8004f64:	bdb0      	pop	{r4, r5, r7, pc}
 8004f66:	bf00      	nop
 8004f68:	789abcdf 	.word	0x789abcdf
 8004f6c:	3f323456 	.word	0x3f323456
 8004f70:	200014fc 	.word	0x200014fc
 8004f74:	2000108a 	.word	0x2000108a
 8004f78:	447a0000 	.word	0x447a0000
 8004f7c:	20000010 	.word	0x20000010
 8004f80:	40590000 	.word	0x40590000
 8004f84:	2000106c 	.word	0x2000106c
 8004f88:	45610000 	.word	0x45610000
 8004f8c:	20000698 	.word	0x20000698
 8004f90:	20000bdc 	.word	0x20000bdc
 8004f94:	2000069c 	.word	0x2000069c
 8004f98:	2000007c 	.word	0x2000007c
 8004f9c:	20000080 	.word	0x20000080
 8004fa0:	42c80000 	.word	0x42c80000
 8004fa4:	200010c8 	.word	0x200010c8
 8004fa8:	20001094 	.word	0x20001094
 8004fac:	20000bac 	.word	0x20000bac

08004fb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004fb4:	4805      	ldr	r0, [pc, #20]	; (8004fcc <TIM3_IRQHandler+0x1c>)
 8004fb6:	f004 ff28 	bl	8009e0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(flag_start_shutdown==1)
 8004fba:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <TIM3_IRQHandler+0x20>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <TIM3_IRQHandler+0x16>
  {
	  BMS_CAN_Tx();
 8004fc2:	f7fc fabd 	bl	8001540 <BMS_CAN_Tx>
  }
//  BMS_CAN_Rx();
  /* USER CODE END TIM3_IRQn 1 */
}
 8004fc6:	bf00      	nop
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20001500 	.word	0x20001500
 8004fd0:	2000098c 	.word	0x2000098c
 8004fd4:	00000000 	.word	0x00000000

08004fd8 <Batt_Protection_when_discharge>:

/* USER CODE BEGIN 1 */
void Batt_Protection_when_discharge(void)
{
 8004fd8:	b5b0      	push	{r4, r5, r7, lr}
 8004fda:	af00      	add	r7, sp, #0
	///////////////////// Short Circuit //////////////////////////////////////
			  	  if(IBATT>(VBATT/0.9))
 8004fdc:	4b82      	ldr	r3, [pc, #520]	; (80051e8 <Batt_Protection_when_discharge+0x210>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fb fa21 	bl	8000428 <__aeabi_f2d>
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	460d      	mov	r5, r1
 8004fea:	4b80      	ldr	r3, [pc, #512]	; (80051ec <Batt_Protection_when_discharge+0x214>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fb fa1a 	bl	8000428 <__aeabi_f2d>
 8004ff4:	a378      	add	r3, pc, #480	; (adr r3, 80051d8 <Batt_Protection_when_discharge+0x200>)
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	f7fb fb97 	bl	800072c <__aeabi_ddiv>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	4620      	mov	r0, r4
 8005004:	4629      	mov	r1, r5
 8005006:	f7fb fcf7 	bl	80009f8 <__aeabi_dcmpgt>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d016      	beq.n	800503e <Batt_Protection_when_discharge+0x66>
	 		  	  {
			  		  Isc=IBATT;
 8005010:	4b75      	ldr	r3, [pc, #468]	; (80051e8 <Batt_Protection_when_discharge+0x210>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a76      	ldr	r2, [pc, #472]	; (80051f0 <Batt_Protection_when_discharge+0x218>)
 8005016:	6013      	str	r3, [r2, #0]
			  		  Vsc=VBATT;
 8005018:	4b74      	ldr	r3, [pc, #464]	; (80051ec <Batt_Protection_when_discharge+0x214>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a75      	ldr	r2, [pc, #468]	; (80051f4 <Batt_Protection_when_discharge+0x21c>)
 800501e:	6013      	str	r3, [r2, #0]
	 		  		  fault_code=12;
 8005020:	4b75      	ldr	r3, [pc, #468]	; (80051f8 <Batt_Protection_when_discharge+0x220>)
 8005022:	220c      	movs	r2, #12
 8005024:	701a      	strb	r2, [r3, #0]
	 		  		  Batt_Open_Mode();
 8005026:	f7fc f9b9 	bl	800139c <Batt_Open_Mode>
	 		  		  flag_trip_shortcircuit=ON;
 800502a:	4b74      	ldr	r3, [pc, #464]	; (80051fc <Batt_Protection_when_discharge+0x224>)
 800502c:	2201      	movs	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]
	 		  		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005030:	2200      	movs	r2, #0
 8005032:	2104      	movs	r1, #4
 8005034:	4872      	ldr	r0, [pc, #456]	; (8005200 <Batt_Protection_when_discharge+0x228>)
 8005036:	f003 fbaa 	bl	800878e <HAL_GPIO_WritePin>
			  		  T_trip_cycle=T_trip_cycle-0.001;
			  		  T_I_Over_trip_cycle-=0.001;
			  		  if(T_trip_cycle<0) T_trip_cycle=0;
			  		if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
			  	  }
}
 800503a:	f000 bdf2 	b.w	8005c22 <Batt_Protection_when_discharge+0xc4a>
			  	  else if(VBATT<V_Under_Set && flag_trip_undervoltage==OFF )   //Indikasi terjadi Undervoltage
 800503e:	4b6b      	ldr	r3, [pc, #428]	; (80051ec <Batt_Protection_when_discharge+0x214>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	4b70      	ldr	r3, [pc, #448]	; (8005204 <Batt_Protection_when_discharge+0x22c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4619      	mov	r1, r3
 8005048:	4610      	mov	r0, r2
 800504a:	f7fc f819 	bl	8001080 <__aeabi_fcmplt>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80eb 	beq.w	800522c <Batt_Protection_when_discharge+0x254>
 8005056:	4b6c      	ldr	r3, [pc, #432]	; (8005208 <Batt_Protection_when_discharge+0x230>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 80e6 	bne.w	800522c <Batt_Protection_when_discharge+0x254>
			  		fault_code=1;
 8005060:	4b65      	ldr	r3, [pc, #404]	; (80051f8 <Batt_Protection_when_discharge+0x220>)
 8005062:	2201      	movs	r2, #1
 8005064:	701a      	strb	r2, [r3, #0]
			  		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 8005066:	4b69      	ldr	r3, [pc, #420]	; (800520c <Batt_Protection_when_discharge+0x234>)
 8005068:	681c      	ldr	r4, [r3, #0]
 800506a:	4b60      	ldr	r3, [pc, #384]	; (80051ec <Batt_Protection_when_discharge+0x214>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4b65      	ldr	r3, [pc, #404]	; (8005204 <Batt_Protection_when_discharge+0x22c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4619      	mov	r1, r3
 8005074:	4610      	mov	r0, r2
 8005076:	f7fb ff19 	bl	8000eac <__aeabi_fdiv>
 800507a:	4603      	mov	r3, r0
 800507c:	4619      	mov	r1, r3
 800507e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005082:	f7fb fd55 	bl	8000b30 <__aeabi_fsub>
 8005086:	4603      	mov	r3, r0
 8005088:	4619      	mov	r1, r3
 800508a:	4620      	mov	r0, r4
 800508c:	f7fb ff0e 	bl	8000eac <__aeabi_fdiv>
 8005090:	4603      	mov	r3, r0
 8005092:	461a      	mov	r2, r3
 8005094:	4b5e      	ldr	r3, [pc, #376]	; (8005210 <Batt_Protection_when_discharge+0x238>)
 8005096:	601a      	str	r2, [r3, #0]
			  		T_trip_cycle+=0.001;
 8005098:	4b5e      	ldr	r3, [pc, #376]	; (8005214 <Batt_Protection_when_discharge+0x23c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f7fb f9c3 	bl	8000428 <__aeabi_f2d>
 80050a2:	a34f      	add	r3, pc, #316	; (adr r3, 80051e0 <Batt_Protection_when_discharge+0x208>)
 80050a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a8:	f7fb f860 	bl	800016c <__adddf3>
 80050ac:	4603      	mov	r3, r0
 80050ae:	460c      	mov	r4, r1
 80050b0:	4618      	mov	r0, r3
 80050b2:	4621      	mov	r1, r4
 80050b4:	f7fb fce8 	bl	8000a88 <__aeabi_d2f>
 80050b8:	4602      	mov	r2, r0
 80050ba:	4b56      	ldr	r3, [pc, #344]	; (8005214 <Batt_Protection_when_discharge+0x23c>)
 80050bc:	601a      	str	r2, [r3, #0]
			  		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF)
 80050be:	4b55      	ldr	r3, [pc, #340]	; (8005214 <Batt_Protection_when_discharge+0x23c>)
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	4b53      	ldr	r3, [pc, #332]	; (8005210 <Batt_Protection_when_discharge+0x238>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4619      	mov	r1, r3
 80050c8:	4610      	mov	r0, r2
 80050ca:	f7fb fff7 	bl	80010bc <__aeabi_fcmpgt>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d011      	beq.n	80050f8 <Batt_Protection_when_discharge+0x120>
 80050d4:	4b4c      	ldr	r3, [pc, #304]	; (8005208 <Batt_Protection_when_discharge+0x230>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10d      	bne.n	80050f8 <Batt_Protection_when_discharge+0x120>
			  			Batt_Open_Mode();
 80050dc:	f7fc f95e 	bl	800139c <Batt_Open_Mode>
			  			T_trip_cycle=T_Under_trip;
 80050e0:	4b4b      	ldr	r3, [pc, #300]	; (8005210 <Batt_Protection_when_discharge+0x238>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a4b      	ldr	r2, [pc, #300]	; (8005214 <Batt_Protection_when_discharge+0x23c>)
 80050e6:	6013      	str	r3, [r2, #0]
			  			flag_trip_undervoltage=ON;
 80050e8:	4b47      	ldr	r3, [pc, #284]	; (8005208 <Batt_Protection_when_discharge+0x230>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	701a      	strb	r2, [r3, #0]
			  			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80050ee:	2200      	movs	r2, #0
 80050f0:	2104      	movs	r1, #4
 80050f2:	4843      	ldr	r0, [pc, #268]	; (8005200 <Batt_Protection_when_discharge+0x228>)
 80050f4:	f003 fb4b 	bl	800878e <HAL_GPIO_WritePin>
			  		if(flag_trip_undervoltage==OFF)
 80050f8:	4b43      	ldr	r3, [pc, #268]	; (8005208 <Batt_Protection_when_discharge+0x230>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f040 858d 	bne.w	8005c1c <Batt_Protection_when_discharge+0xc44>
			  			if(T_Under_trip-T_trip_cycle>15)
 8005102:	4b43      	ldr	r3, [pc, #268]	; (8005210 <Batt_Protection_when_discharge+0x238>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4b43      	ldr	r3, [pc, #268]	; (8005214 <Batt_Protection_when_discharge+0x23c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4619      	mov	r1, r3
 800510c:	4610      	mov	r0, r2
 800510e:	f7fb fd0f 	bl	8000b30 <__aeabi_fsub>
 8005112:	4603      	mov	r3, r0
 8005114:	4940      	ldr	r1, [pc, #256]	; (8005218 <Batt_Protection_when_discharge+0x240>)
 8005116:	4618      	mov	r0, r3
 8005118:	f7fb ffd0 	bl	80010bc <__aeabi_fcmpgt>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d018      	beq.n	8005154 <Batt_Protection_when_discharge+0x17c>
			  				if((test_tim2%1000)==0)
 8005122:	4b3e      	ldr	r3, [pc, #248]	; (800521c <Batt_Protection_when_discharge+0x244>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	4b3e      	ldr	r3, [pc, #248]	; (8005220 <Batt_Protection_when_discharge+0x248>)
 8005128:	fb83 1302 	smull	r1, r3, r3, r2
 800512c:	1199      	asrs	r1, r3, #6
 800512e:	17d3      	asrs	r3, r2, #31
 8005130:	1acb      	subs	r3, r1, r3
 8005132:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005136:	fb01 f303 	mul.w	r3, r1, r3
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	f040 856d 	bne.w	8005c1c <Batt_Protection_when_discharge+0xc44>
			  					BUZZ_Toggle;
 8005142:	2104      	movs	r1, #4
 8005144:	482e      	ldr	r0, [pc, #184]	; (8005200 <Batt_Protection_when_discharge+0x228>)
 8005146:	f003 fb3a 	bl	80087be <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 800514a:	4b34      	ldr	r3, [pc, #208]	; (800521c <Batt_Protection_when_discharge+0x244>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_undervoltage==OFF)
 8005150:	f000 bd64 	b.w	8005c1c <Batt_Protection_when_discharge+0xc44>
			  			else if(T_Under_trip-T_trip_cycle>10)
 8005154:	4b2e      	ldr	r3, [pc, #184]	; (8005210 <Batt_Protection_when_discharge+0x238>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4b2e      	ldr	r3, [pc, #184]	; (8005214 <Batt_Protection_when_discharge+0x23c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f7fb fce6 	bl	8000b30 <__aeabi_fsub>
 8005164:	4603      	mov	r3, r0
 8005166:	492f      	ldr	r1, [pc, #188]	; (8005224 <Batt_Protection_when_discharge+0x24c>)
 8005168:	4618      	mov	r0, r3
 800516a:	f7fb ffa7 	bl	80010bc <__aeabi_fcmpgt>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d017      	beq.n	80051a4 <Batt_Protection_when_discharge+0x1cc>
			  				if((test_tim2%100)==0)
 8005174:	4b29      	ldr	r3, [pc, #164]	; (800521c <Batt_Protection_when_discharge+0x244>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b2b      	ldr	r3, [pc, #172]	; (8005228 <Batt_Protection_when_discharge+0x250>)
 800517a:	fb83 1302 	smull	r1, r3, r3, r2
 800517e:	1159      	asrs	r1, r3, #5
 8005180:	17d3      	asrs	r3, r2, #31
 8005182:	1acb      	subs	r3, r1, r3
 8005184:	2164      	movs	r1, #100	; 0x64
 8005186:	fb01 f303 	mul.w	r3, r1, r3
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	f040 8545 	bne.w	8005c1c <Batt_Protection_when_discharge+0xc44>
			  					BUZZ_Toggle;
 8005192:	2104      	movs	r1, #4
 8005194:	481a      	ldr	r0, [pc, #104]	; (8005200 <Batt_Protection_when_discharge+0x228>)
 8005196:	f003 fb12 	bl	80087be <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 800519a:	4b20      	ldr	r3, [pc, #128]	; (800521c <Batt_Protection_when_discharge+0x244>)
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_undervoltage==OFF)
 80051a0:	f000 bd3c 	b.w	8005c1c <Batt_Protection_when_discharge+0xc44>
			  			else if(T_Under_trip-T_trip_cycle>1)
 80051a4:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <Batt_Protection_when_discharge+0x238>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <Batt_Protection_when_discharge+0x23c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4619      	mov	r1, r3
 80051ae:	4610      	mov	r0, r2
 80051b0:	f7fb fcbe 	bl	8000b30 <__aeabi_fsub>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fb ff7e 	bl	80010bc <__aeabi_fcmpgt>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <Batt_Protection_when_discharge+0x1f2>
			  		if(flag_trip_undervoltage==OFF)
 80051c6:	f000 bd29 	b.w	8005c1c <Batt_Protection_when_discharge+0xc44>
			  				HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 80051ca:	2201      	movs	r2, #1
 80051cc:	2104      	movs	r1, #4
 80051ce:	480c      	ldr	r0, [pc, #48]	; (8005200 <Batt_Protection_when_discharge+0x228>)
 80051d0:	f003 fadd 	bl	800878e <HAL_GPIO_WritePin>
			  		if(flag_trip_undervoltage==OFF)
 80051d4:	f000 bd22 	b.w	8005c1c <Batt_Protection_when_discharge+0xc44>
 80051d8:	cccccccd 	.word	0xcccccccd
 80051dc:	3feccccc 	.word	0x3feccccc
 80051e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80051e4:	3f50624d 	.word	0x3f50624d
 80051e8:	200010a8 	.word	0x200010a8
 80051ec:	2000108c 	.word	0x2000108c
 80051f0:	2000109c 	.word	0x2000109c
 80051f4:	200010cc 	.word	0x200010cc
 80051f8:	200010b8 	.word	0x200010b8
 80051fc:	20000c82 	.word	0x20000c82
 8005200:	40011000 	.word	0x40011000
 8005204:	20000070 	.word	0x20000070
 8005208:	200010b1 	.word	0x200010b1
 800520c:	20000050 	.word	0x20000050
 8005210:	20001078 	.word	0x20001078
 8005214:	200010c4 	.word	0x200010c4
 8005218:	41700000 	.word	0x41700000
 800521c:	20000bd4 	.word	0x20000bd4
 8005220:	10624dd3 	.word	0x10624dd3
 8005224:	41200000 	.word	0x41200000
 8005228:	51eb851f 	.word	0x51eb851f
			  	  else if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF)   //Indikasi terjadi Over Current
 800522c:	4b76      	ldr	r3, [pc, #472]	; (8005408 <Batt_Protection_when_discharge+0x430>)
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	4b76      	ldr	r3, [pc, #472]	; (800540c <Batt_Protection_when_discharge+0x434>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f7fb fc7a 	bl	8000b30 <__aeabi_fsub>
 800523c:	4603      	mov	r3, r0
 800523e:	f04f 0100 	mov.w	r1, #0
 8005242:	4618      	mov	r0, r3
 8005244:	f7fb ff3a 	bl	80010bc <__aeabi_fcmpgt>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 80f8 	beq.w	8005440 <Batt_Protection_when_discharge+0x468>
 8005250:	4b6f      	ldr	r3, [pc, #444]	; (8005410 <Batt_Protection_when_discharge+0x438>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	f040 80f3 	bne.w	8005440 <Batt_Protection_when_discharge+0x468>
			  		fault_code=2;
 800525a:	4b6e      	ldr	r3, [pc, #440]	; (8005414 <Batt_Protection_when_discharge+0x43c>)
 800525c:	2202      	movs	r2, #2
 800525e:	701a      	strb	r2, [r3, #0]
			  		T_I_Over_trip=TMS_I_Over/((IBATT/10.9)-1);
 8005260:	4b6d      	ldr	r3, [pc, #436]	; (8005418 <Batt_Protection_when_discharge+0x440>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f7fb f8df 	bl	8000428 <__aeabi_f2d>
 800526a:	4604      	mov	r4, r0
 800526c:	460d      	mov	r5, r1
 800526e:	4b66      	ldr	r3, [pc, #408]	; (8005408 <Batt_Protection_when_discharge+0x430>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fb f8d8 	bl	8000428 <__aeabi_f2d>
 8005278:	a35f      	add	r3, pc, #380	; (adr r3, 80053f8 <Batt_Protection_when_discharge+0x420>)
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f7fb fa55 	bl	800072c <__aeabi_ddiv>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4610      	mov	r0, r2
 8005288:	4619      	mov	r1, r3
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	4b63      	ldr	r3, [pc, #396]	; (800541c <Batt_Protection_when_discharge+0x444>)
 8005290:	f7fa ff6a 	bl	8000168 <__aeabi_dsub>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4620      	mov	r0, r4
 800529a:	4629      	mov	r1, r5
 800529c:	f7fb fa46 	bl	800072c <__aeabi_ddiv>
 80052a0:	4603      	mov	r3, r0
 80052a2:	460c      	mov	r4, r1
 80052a4:	4618      	mov	r0, r3
 80052a6:	4621      	mov	r1, r4
 80052a8:	f7fb fbee 	bl	8000a88 <__aeabi_d2f>
 80052ac:	4602      	mov	r2, r0
 80052ae:	4b5c      	ldr	r3, [pc, #368]	; (8005420 <Batt_Protection_when_discharge+0x448>)
 80052b0:	601a      	str	r2, [r3, #0]
			  		T_I_Over_trip_cycle+=0.001;
 80052b2:	4b5c      	ldr	r3, [pc, #368]	; (8005424 <Batt_Protection_when_discharge+0x44c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fb f8b6 	bl	8000428 <__aeabi_f2d>
 80052bc:	a350      	add	r3, pc, #320	; (adr r3, 8005400 <Batt_Protection_when_discharge+0x428>)
 80052be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c2:	f7fa ff53 	bl	800016c <__adddf3>
 80052c6:	4603      	mov	r3, r0
 80052c8:	460c      	mov	r4, r1
 80052ca:	4618      	mov	r0, r3
 80052cc:	4621      	mov	r1, r4
 80052ce:	f7fb fbdb 	bl	8000a88 <__aeabi_d2f>
 80052d2:	4602      	mov	r2, r0
 80052d4:	4b53      	ldr	r3, [pc, #332]	; (8005424 <Batt_Protection_when_discharge+0x44c>)
 80052d6:	601a      	str	r2, [r3, #0]
			  		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF)
 80052d8:	4b52      	ldr	r3, [pc, #328]	; (8005424 <Batt_Protection_when_discharge+0x44c>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4b50      	ldr	r3, [pc, #320]	; (8005420 <Batt_Protection_when_discharge+0x448>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f7fb feea 	bl	80010bc <__aeabi_fcmpgt>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d011      	beq.n	8005312 <Batt_Protection_when_discharge+0x33a>
 80052ee:	4b48      	ldr	r3, [pc, #288]	; (8005410 <Batt_Protection_when_discharge+0x438>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10d      	bne.n	8005312 <Batt_Protection_when_discharge+0x33a>
			  			Batt_Open_Mode();
 80052f6:	f7fc f851 	bl	800139c <Batt_Open_Mode>
			  			T_I_Over_trip_cycle=T_I_Over_trip;
 80052fa:	4b49      	ldr	r3, [pc, #292]	; (8005420 <Batt_Protection_when_discharge+0x448>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a49      	ldr	r2, [pc, #292]	; (8005424 <Batt_Protection_when_discharge+0x44c>)
 8005300:	6013      	str	r3, [r2, #0]
			  			flag_trip_overcurrentdischarge=ON;
 8005302:	4b43      	ldr	r3, [pc, #268]	; (8005410 <Batt_Protection_when_discharge+0x438>)
 8005304:	2201      	movs	r2, #1
 8005306:	701a      	strb	r2, [r3, #0]
			  			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005308:	2200      	movs	r2, #0
 800530a:	2104      	movs	r1, #4
 800530c:	4846      	ldr	r0, [pc, #280]	; (8005428 <Batt_Protection_when_discharge+0x450>)
 800530e:	f003 fa3e 	bl	800878e <HAL_GPIO_WritePin>
			  		if(flag_trip_overcurrentdischarge==OFF)
 8005312:	4b3f      	ldr	r3, [pc, #252]	; (8005410 <Batt_Protection_when_discharge+0x438>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	f040 8482 	bne.w	8005c20 <Batt_Protection_when_discharge+0xc48>
		  				if(T_I_Over_trip-T_I_Over_trip_cycle>15)
 800531c:	4b40      	ldr	r3, [pc, #256]	; (8005420 <Batt_Protection_when_discharge+0x448>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4b40      	ldr	r3, [pc, #256]	; (8005424 <Batt_Protection_when_discharge+0x44c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4619      	mov	r1, r3
 8005326:	4610      	mov	r0, r2
 8005328:	f7fb fc02 	bl	8000b30 <__aeabi_fsub>
 800532c:	4603      	mov	r3, r0
 800532e:	493f      	ldr	r1, [pc, #252]	; (800542c <Batt_Protection_when_discharge+0x454>)
 8005330:	4618      	mov	r0, r3
 8005332:	f7fb fec3 	bl	80010bc <__aeabi_fcmpgt>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d018      	beq.n	800536e <Batt_Protection_when_discharge+0x396>
		  					if((test_tim2%1000)==0)
 800533c:	4b3c      	ldr	r3, [pc, #240]	; (8005430 <Batt_Protection_when_discharge+0x458>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4b3c      	ldr	r3, [pc, #240]	; (8005434 <Batt_Protection_when_discharge+0x45c>)
 8005342:	fb83 1302 	smull	r1, r3, r3, r2
 8005346:	1199      	asrs	r1, r3, #6
 8005348:	17d3      	asrs	r3, r2, #31
 800534a:	1acb      	subs	r3, r1, r3
 800534c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005350:	fb01 f303 	mul.w	r3, r1, r3
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	f040 8462 	bne.w	8005c20 <Batt_Protection_when_discharge+0xc48>
			  					BUZZ_Toggle;
 800535c:	2104      	movs	r1, #4
 800535e:	4832      	ldr	r0, [pc, #200]	; (8005428 <Batt_Protection_when_discharge+0x450>)
 8005360:	f003 fa2d 	bl	80087be <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 8005364:	4b32      	ldr	r3, [pc, #200]	; (8005430 <Batt_Protection_when_discharge+0x458>)
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_overcurrentdischarge==OFF)
 800536a:	f000 bc59 	b.w	8005c20 <Batt_Protection_when_discharge+0xc48>
			  			else if(T_I_Over_trip-T_I_Over_trip_cycle>10)
 800536e:	4b2c      	ldr	r3, [pc, #176]	; (8005420 <Batt_Protection_when_discharge+0x448>)
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b2c      	ldr	r3, [pc, #176]	; (8005424 <Batt_Protection_when_discharge+0x44c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f7fb fbd9 	bl	8000b30 <__aeabi_fsub>
 800537e:	4603      	mov	r3, r0
 8005380:	492d      	ldr	r1, [pc, #180]	; (8005438 <Batt_Protection_when_discharge+0x460>)
 8005382:	4618      	mov	r0, r3
 8005384:	f7fb fe9a 	bl	80010bc <__aeabi_fcmpgt>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d017      	beq.n	80053be <Batt_Protection_when_discharge+0x3e6>
			  				if((test_tim2%100)==0)
 800538e:	4b28      	ldr	r3, [pc, #160]	; (8005430 <Batt_Protection_when_discharge+0x458>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4b2a      	ldr	r3, [pc, #168]	; (800543c <Batt_Protection_when_discharge+0x464>)
 8005394:	fb83 1302 	smull	r1, r3, r3, r2
 8005398:	1159      	asrs	r1, r3, #5
 800539a:	17d3      	asrs	r3, r2, #31
 800539c:	1acb      	subs	r3, r1, r3
 800539e:	2164      	movs	r1, #100	; 0x64
 80053a0:	fb01 f303 	mul.w	r3, r1, r3
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f040 843a 	bne.w	8005c20 <Batt_Protection_when_discharge+0xc48>
			  					BUZZ_Toggle;
 80053ac:	2104      	movs	r1, #4
 80053ae:	481e      	ldr	r0, [pc, #120]	; (8005428 <Batt_Protection_when_discharge+0x450>)
 80053b0:	f003 fa05 	bl	80087be <HAL_GPIO_TogglePin>
			  					test_tim2=0;
 80053b4:	4b1e      	ldr	r3, [pc, #120]	; (8005430 <Batt_Protection_when_discharge+0x458>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]
			  		if(flag_trip_overcurrentdischarge==OFF)
 80053ba:	f000 bc31 	b.w	8005c20 <Batt_Protection_when_discharge+0xc48>
			  			else if(T_I_Over_trip-T_I_Over_trip_cycle>1)
 80053be:	4b18      	ldr	r3, [pc, #96]	; (8005420 <Batt_Protection_when_discharge+0x448>)
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b18      	ldr	r3, [pc, #96]	; (8005424 <Batt_Protection_when_discharge+0x44c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4619      	mov	r1, r3
 80053c8:	4610      	mov	r0, r2
 80053ca:	f7fb fbb1 	bl	8000b30 <__aeabi_fsub>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fb fe71 	bl	80010bc <__aeabi_fcmpgt>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <Batt_Protection_when_discharge+0x40c>
			  		if(flag_trip_overcurrentdischarge==OFF)
 80053e0:	f000 bc1e 	b.w	8005c20 <Batt_Protection_when_discharge+0xc48>
			  				HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 80053e4:	2201      	movs	r2, #1
 80053e6:	2104      	movs	r1, #4
 80053e8:	480f      	ldr	r0, [pc, #60]	; (8005428 <Batt_Protection_when_discharge+0x450>)
 80053ea:	f003 f9d0 	bl	800878e <HAL_GPIO_WritePin>
			  		if(flag_trip_overcurrentdischarge==OFF)
 80053ee:	f000 bc17 	b.w	8005c20 <Batt_Protection_when_discharge+0xc48>
 80053f2:	bf00      	nop
 80053f4:	f3af 8000 	nop.w
 80053f8:	cccccccd 	.word	0xcccccccd
 80053fc:	4025cccc 	.word	0x4025cccc
 8005400:	d2f1a9fc 	.word	0xd2f1a9fc
 8005404:	3f50624d 	.word	0x3f50624d
 8005408:	200010a8 	.word	0x200010a8
 800540c:	20000058 	.word	0x20000058
 8005410:	200010c0 	.word	0x200010c0
 8005414:	200010b8 	.word	0x200010b8
 8005418:	20000054 	.word	0x20000054
 800541c:	3ff00000 	.word	0x3ff00000
 8005420:	20001074 	.word	0x20001074
 8005424:	200010f4 	.word	0x200010f4
 8005428:	40011000 	.word	0x40011000
 800542c:	41700000 	.word	0x41700000
 8005430:	20000bd4 	.word	0x20000bd4
 8005434:	10624dd3 	.word	0x10624dd3
 8005438:	41200000 	.word	0x41200000
 800543c:	51eb851f 	.word	0x51eb851f
			  	  else if(((50-Suhu_T1<10)||(85-Suhu_T2<10)||(50-Suhu_T3<10)||(85-Suhu_T4<10)) && flag_trip_overtemperature==OFF)
 8005440:	4b8c      	ldr	r3, [pc, #560]	; (8005674 <Batt_Protection_when_discharge+0x69c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4619      	mov	r1, r3
 8005446:	488c      	ldr	r0, [pc, #560]	; (8005678 <Batt_Protection_when_discharge+0x6a0>)
 8005448:	f7fb fb72 	bl	8000b30 <__aeabi_fsub>
 800544c:	4603      	mov	r3, r0
 800544e:	498b      	ldr	r1, [pc, #556]	; (800567c <Batt_Protection_when_discharge+0x6a4>)
 8005450:	4618      	mov	r0, r3
 8005452:	f7fb fe15 	bl	8001080 <__aeabi_fcmplt>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d12a      	bne.n	80054b2 <Batt_Protection_when_discharge+0x4da>
 800545c:	4b88      	ldr	r3, [pc, #544]	; (8005680 <Batt_Protection_when_discharge+0x6a8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4619      	mov	r1, r3
 8005462:	4888      	ldr	r0, [pc, #544]	; (8005684 <Batt_Protection_when_discharge+0x6ac>)
 8005464:	f7fb fb64 	bl	8000b30 <__aeabi_fsub>
 8005468:	4603      	mov	r3, r0
 800546a:	4984      	ldr	r1, [pc, #528]	; (800567c <Batt_Protection_when_discharge+0x6a4>)
 800546c:	4618      	mov	r0, r3
 800546e:	f7fb fe07 	bl	8001080 <__aeabi_fcmplt>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d11c      	bne.n	80054b2 <Batt_Protection_when_discharge+0x4da>
 8005478:	4b83      	ldr	r3, [pc, #524]	; (8005688 <Batt_Protection_when_discharge+0x6b0>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4619      	mov	r1, r3
 800547e:	487e      	ldr	r0, [pc, #504]	; (8005678 <Batt_Protection_when_discharge+0x6a0>)
 8005480:	f7fb fb56 	bl	8000b30 <__aeabi_fsub>
 8005484:	4603      	mov	r3, r0
 8005486:	497d      	ldr	r1, [pc, #500]	; (800567c <Batt_Protection_when_discharge+0x6a4>)
 8005488:	4618      	mov	r0, r3
 800548a:	f7fb fdf9 	bl	8001080 <__aeabi_fcmplt>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10e      	bne.n	80054b2 <Batt_Protection_when_discharge+0x4da>
 8005494:	4b7d      	ldr	r3, [pc, #500]	; (800568c <Batt_Protection_when_discharge+0x6b4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4619      	mov	r1, r3
 800549a:	487a      	ldr	r0, [pc, #488]	; (8005684 <Batt_Protection_when_discharge+0x6ac>)
 800549c:	f7fb fb48 	bl	8000b30 <__aeabi_fsub>
 80054a0:	4603      	mov	r3, r0
 80054a2:	4976      	ldr	r1, [pc, #472]	; (800567c <Batt_Protection_when_discharge+0x6a4>)
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fb fdeb 	bl	8001080 <__aeabi_fcmplt>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 80fd 	beq.w	80056ac <Batt_Protection_when_discharge+0x6d4>
 80054b2:	4b77      	ldr	r3, [pc, #476]	; (8005690 <Batt_Protection_when_discharge+0x6b8>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f040 80f8 	bne.w	80056ac <Batt_Protection_when_discharge+0x6d4>
			  		  fault_code=3;
 80054bc:	4b75      	ldr	r3, [pc, #468]	; (8005694 <Batt_Protection_when_discharge+0x6bc>)
 80054be:	2203      	movs	r2, #3
 80054c0:	701a      	strb	r2, [r3, #0]
			  		  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 80054c2:	4b75      	ldr	r3, [pc, #468]	; (8005698 <Batt_Protection_when_discharge+0x6c0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	496d      	ldr	r1, [pc, #436]	; (800567c <Batt_Protection_when_discharge+0x6a4>)
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fb fb31 	bl	8000b30 <__aeabi_fsub>
 80054ce:	4603      	mov	r3, r0
 80054d0:	461a      	mov	r2, r3
 80054d2:	4b68      	ldr	r3, [pc, #416]	; (8005674 <Batt_Protection_when_discharge+0x69c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f7fb fdd1 	bl	8001080 <__aeabi_fcmplt>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d028      	beq.n	8005536 <Batt_Protection_when_discharge+0x55e>
 80054e4:	4b6c      	ldr	r3, [pc, #432]	; (8005698 <Batt_Protection_when_discharge+0x6c0>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	496c      	ldr	r1, [pc, #432]	; (800569c <Batt_Protection_when_discharge+0x6c4>)
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fb fb20 	bl	8000b30 <__aeabi_fsub>
 80054f0:	4603      	mov	r3, r0
 80054f2:	461a      	mov	r2, r3
 80054f4:	4b5f      	ldr	r3, [pc, #380]	; (8005674 <Batt_Protection_when_discharge+0x69c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4619      	mov	r1, r3
 80054fa:	4610      	mov	r0, r2
 80054fc:	f7fb fdd4 	bl	80010a8 <__aeabi_fcmpge>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d017      	beq.n	8005536 <Batt_Protection_when_discharge+0x55e>
			  			  if((test_tim2%1000)==0)
 8005506:	4b66      	ldr	r3, [pc, #408]	; (80056a0 <Batt_Protection_when_discharge+0x6c8>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b66      	ldr	r3, [pc, #408]	; (80056a4 <Batt_Protection_when_discharge+0x6cc>)
 800550c:	fb83 1302 	smull	r1, r3, r3, r2
 8005510:	1199      	asrs	r1, r3, #6
 8005512:	17d3      	asrs	r3, r2, #31
 8005514:	1acb      	subs	r3, r1, r3
 8005516:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800551a:	fb01 f303 	mul.w	r3, r1, r3
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	f040 80a6 	bne.w	8005672 <Batt_Protection_when_discharge+0x69a>
			  				  BUZZ_Toggle;
 8005526:	2104      	movs	r1, #4
 8005528:	485f      	ldr	r0, [pc, #380]	; (80056a8 <Batt_Protection_when_discharge+0x6d0>)
 800552a:	f003 f948 	bl	80087be <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 800552e:	4b5c      	ldr	r3, [pc, #368]	; (80056a0 <Batt_Protection_when_discharge+0x6c8>)
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%1000)==0)
 8005534:	e09d      	b.n	8005672 <Batt_Protection_when_discharge+0x69a>
			  		  else if(Suhu_T1>Temp_Over_Set-5 && Suhu_T1<=Temp_Over_Set-2)
 8005536:	4b58      	ldr	r3, [pc, #352]	; (8005698 <Batt_Protection_when_discharge+0x6c0>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4958      	ldr	r1, [pc, #352]	; (800569c <Batt_Protection_when_discharge+0x6c4>)
 800553c:	4618      	mov	r0, r3
 800553e:	f7fb faf7 	bl	8000b30 <__aeabi_fsub>
 8005542:	4603      	mov	r3, r0
 8005544:	461a      	mov	r2, r3
 8005546:	4b4b      	ldr	r3, [pc, #300]	; (8005674 <Batt_Protection_when_discharge+0x69c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4619      	mov	r1, r3
 800554c:	4610      	mov	r0, r2
 800554e:	f7fb fd97 	bl	8001080 <__aeabi_fcmplt>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d028      	beq.n	80055aa <Batt_Protection_when_discharge+0x5d2>
 8005558:	4b4f      	ldr	r3, [pc, #316]	; (8005698 <Batt_Protection_when_discharge+0x6c0>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005560:	4618      	mov	r0, r3
 8005562:	f7fb fae5 	bl	8000b30 <__aeabi_fsub>
 8005566:	4603      	mov	r3, r0
 8005568:	461a      	mov	r2, r3
 800556a:	4b42      	ldr	r3, [pc, #264]	; (8005674 <Batt_Protection_when_discharge+0x69c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4619      	mov	r1, r3
 8005570:	4610      	mov	r0, r2
 8005572:	f7fb fd99 	bl	80010a8 <__aeabi_fcmpge>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d016      	beq.n	80055aa <Batt_Protection_when_discharge+0x5d2>
			  			  if((test_tim2%500)==0)
 800557c:	4b48      	ldr	r3, [pc, #288]	; (80056a0 <Batt_Protection_when_discharge+0x6c8>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	4b48      	ldr	r3, [pc, #288]	; (80056a4 <Batt_Protection_when_discharge+0x6cc>)
 8005582:	fb83 1302 	smull	r1, r3, r3, r2
 8005586:	1159      	asrs	r1, r3, #5
 8005588:	17d3      	asrs	r3, r2, #31
 800558a:	1acb      	subs	r3, r1, r3
 800558c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d16b      	bne.n	8005672 <Batt_Protection_when_discharge+0x69a>
			  				  BUZZ_Toggle;
 800559a:	2104      	movs	r1, #4
 800559c:	4842      	ldr	r0, [pc, #264]	; (80056a8 <Batt_Protection_when_discharge+0x6d0>)
 800559e:	f003 f90e 	bl	80087be <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 80055a2:	4b3f      	ldr	r3, [pc, #252]	; (80056a0 <Batt_Protection_when_discharge+0x6c8>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 80055a8:	e063      	b.n	8005672 <Batt_Protection_when_discharge+0x69a>
			  		  else if(Suhu_T1>Temp_Over_Set-2 && Suhu_T1<=Temp_Over_Set)
 80055aa:	4b3b      	ldr	r3, [pc, #236]	; (8005698 <Batt_Protection_when_discharge+0x6c0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fb fabc 	bl	8000b30 <__aeabi_fsub>
 80055b8:	4603      	mov	r3, r0
 80055ba:	461a      	mov	r2, r3
 80055bc:	4b2d      	ldr	r3, [pc, #180]	; (8005674 <Batt_Protection_when_discharge+0x69c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f7fb fd5c 	bl	8001080 <__aeabi_fcmplt>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d021      	beq.n	8005612 <Batt_Protection_when_discharge+0x63a>
 80055ce:	4b29      	ldr	r3, [pc, #164]	; (8005674 <Batt_Protection_when_discharge+0x69c>)
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b31      	ldr	r3, [pc, #196]	; (8005698 <Batt_Protection_when_discharge+0x6c0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4619      	mov	r1, r3
 80055d8:	4610      	mov	r0, r2
 80055da:	f7fb fd5b 	bl	8001094 <__aeabi_fcmple>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d016      	beq.n	8005612 <Batt_Protection_when_discharge+0x63a>
			  			  if((test_tim2%500)==0)
 80055e4:	4b2e      	ldr	r3, [pc, #184]	; (80056a0 <Batt_Protection_when_discharge+0x6c8>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	4b2e      	ldr	r3, [pc, #184]	; (80056a4 <Batt_Protection_when_discharge+0x6cc>)
 80055ea:	fb83 1302 	smull	r1, r3, r3, r2
 80055ee:	1159      	asrs	r1, r3, #5
 80055f0:	17d3      	asrs	r3, r2, #31
 80055f2:	1acb      	subs	r3, r1, r3
 80055f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80055f8:	fb01 f303 	mul.w	r3, r1, r3
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d137      	bne.n	8005672 <Batt_Protection_when_discharge+0x69a>
			  				  BUZZ_Toggle;
 8005602:	2104      	movs	r1, #4
 8005604:	4828      	ldr	r0, [pc, #160]	; (80056a8 <Batt_Protection_when_discharge+0x6d0>)
 8005606:	f003 f8da 	bl	80087be <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 800560a:	4b25      	ldr	r3, [pc, #148]	; (80056a0 <Batt_Protection_when_discharge+0x6c8>)
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005610:	e02f      	b.n	8005672 <Batt_Protection_when_discharge+0x69a>
			  		  else if(Suhu_T1>50||Suhu_T2>85||Suhu_T3>50||Suhu_T4>85)
 8005612:	4b18      	ldr	r3, [pc, #96]	; (8005674 <Batt_Protection_when_discharge+0x69c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4918      	ldr	r1, [pc, #96]	; (8005678 <Batt_Protection_when_discharge+0x6a0>)
 8005618:	4618      	mov	r0, r3
 800561a:	f7fb fd4f 	bl	80010bc <__aeabi_fcmpgt>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d11b      	bne.n	800565c <Batt_Protection_when_discharge+0x684>
 8005624:	4b16      	ldr	r3, [pc, #88]	; (8005680 <Batt_Protection_when_discharge+0x6a8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4916      	ldr	r1, [pc, #88]	; (8005684 <Batt_Protection_when_discharge+0x6ac>)
 800562a:	4618      	mov	r0, r3
 800562c:	f7fb fd46 	bl	80010bc <__aeabi_fcmpgt>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d112      	bne.n	800565c <Batt_Protection_when_discharge+0x684>
 8005636:	4b14      	ldr	r3, [pc, #80]	; (8005688 <Batt_Protection_when_discharge+0x6b0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	490f      	ldr	r1, [pc, #60]	; (8005678 <Batt_Protection_when_discharge+0x6a0>)
 800563c:	4618      	mov	r0, r3
 800563e:	f7fb fd3d 	bl	80010bc <__aeabi_fcmpgt>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d109      	bne.n	800565c <Batt_Protection_when_discharge+0x684>
 8005648:	4b10      	ldr	r3, [pc, #64]	; (800568c <Batt_Protection_when_discharge+0x6b4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	490d      	ldr	r1, [pc, #52]	; (8005684 <Batt_Protection_when_discharge+0x6ac>)
 800564e:	4618      	mov	r0, r3
 8005650:	f7fb fd34 	bl	80010bc <__aeabi_fcmpgt>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d100      	bne.n	800565c <Batt_Protection_when_discharge+0x684>
			  		  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 800565a:	e2e2      	b.n	8005c22 <Batt_Protection_when_discharge+0xc4a>
			  			  Batt_Open_Mode();
 800565c:	f7fb fe9e 	bl	800139c <Batt_Open_Mode>
			  			  flag_trip_overtemperature=ON;
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <Batt_Protection_when_discharge+0x6b8>)
 8005662:	2201      	movs	r2, #1
 8005664:	701a      	strb	r2, [r3, #0]
			  			  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005666:	2200      	movs	r2, #0
 8005668:	2104      	movs	r1, #4
 800566a:	480f      	ldr	r0, [pc, #60]	; (80056a8 <Batt_Protection_when_discharge+0x6d0>)
 800566c:	f003 f88f 	bl	800878e <HAL_GPIO_WritePin>
			  		  if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5)
 8005670:	e2d7      	b.n	8005c22 <Batt_Protection_when_discharge+0xc4a>
 8005672:	e2d6      	b.n	8005c22 <Batt_Protection_when_discharge+0xc4a>
 8005674:	200010bc 	.word	0x200010bc
 8005678:	42480000 	.word	0x42480000
 800567c:	41200000 	.word	0x41200000
 8005680:	200014f8 	.word	0x200014f8
 8005684:	42aa0000 	.word	0x42aa0000
 8005688:	20001090 	.word	0x20001090
 800568c:	200010f0 	.word	0x200010f0
 8005690:	20001088 	.word	0x20001088
 8005694:	200010b8 	.word	0x200010b8
 8005698:	20000060 	.word	0x20000060
 800569c:	40a00000 	.word	0x40a00000
 80056a0:	20000bd4 	.word	0x20000bd4
 80056a4:	10624dd3 	.word	0x10624dd3
 80056a8:	40011000 	.word	0x40011000
			  	  else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF)
 80056ac:	4b94      	ldr	r3, [pc, #592]	; (8005900 <Batt_Protection_when_discharge+0x928>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4b94      	ldr	r3, [pc, #592]	; (8005904 <Batt_Protection_when_discharge+0x92c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f7fb fa3a 	bl	8000b30 <__aeabi_fsub>
 80056bc:	4603      	mov	r3, r0
 80056be:	4992      	ldr	r1, [pc, #584]	; (8005908 <Batt_Protection_when_discharge+0x930>)
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fb fce7 	bl	8001094 <__aeabi_fcmple>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d130      	bne.n	800572e <Batt_Protection_when_discharge+0x756>
 80056cc:	4b8f      	ldr	r3, [pc, #572]	; (800590c <Batt_Protection_when_discharge+0x934>)
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	4b8c      	ldr	r3, [pc, #560]	; (8005904 <Batt_Protection_when_discharge+0x92c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4619      	mov	r1, r3
 80056d6:	4610      	mov	r0, r2
 80056d8:	f7fb fa2a 	bl	8000b30 <__aeabi_fsub>
 80056dc:	4603      	mov	r3, r0
 80056de:	498a      	ldr	r1, [pc, #552]	; (8005908 <Batt_Protection_when_discharge+0x930>)
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fb fcd7 	bl	8001094 <__aeabi_fcmple>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d120      	bne.n	800572e <Batt_Protection_when_discharge+0x756>
 80056ec:	4b88      	ldr	r3, [pc, #544]	; (8005910 <Batt_Protection_when_discharge+0x938>)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	4b84      	ldr	r3, [pc, #528]	; (8005904 <Batt_Protection_when_discharge+0x92c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4619      	mov	r1, r3
 80056f6:	4610      	mov	r0, r2
 80056f8:	f7fb fa1a 	bl	8000b30 <__aeabi_fsub>
 80056fc:	4603      	mov	r3, r0
 80056fe:	4982      	ldr	r1, [pc, #520]	; (8005908 <Batt_Protection_when_discharge+0x930>)
 8005700:	4618      	mov	r0, r3
 8005702:	f7fb fcc7 	bl	8001094 <__aeabi_fcmple>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d110      	bne.n	800572e <Batt_Protection_when_discharge+0x756>
 800570c:	4b81      	ldr	r3, [pc, #516]	; (8005914 <Batt_Protection_when_discharge+0x93c>)
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	4b7c      	ldr	r3, [pc, #496]	; (8005904 <Batt_Protection_when_discharge+0x92c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4619      	mov	r1, r3
 8005716:	4610      	mov	r0, r2
 8005718:	f7fb fa0a 	bl	8000b30 <__aeabi_fsub>
 800571c:	4603      	mov	r3, r0
 800571e:	497a      	ldr	r1, [pc, #488]	; (8005908 <Batt_Protection_when_discharge+0x930>)
 8005720:	4618      	mov	r0, r3
 8005722:	f7fb fcb7 	bl	8001094 <__aeabi_fcmple>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8101 	beq.w	8005930 <Batt_Protection_when_discharge+0x958>
 800572e:	4b7a      	ldr	r3, [pc, #488]	; (8005918 <Batt_Protection_when_discharge+0x940>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f040 80fc 	bne.w	8005930 <Batt_Protection_when_discharge+0x958>
			  		  fault_code=4;
 8005738:	4b78      	ldr	r3, [pc, #480]	; (800591c <Batt_Protection_when_discharge+0x944>)
 800573a:	2204      	movs	r2, #4
 800573c:	701a      	strb	r2, [r3, #0]
			  		  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 800573e:	4b71      	ldr	r3, [pc, #452]	; (8005904 <Batt_Protection_when_discharge+0x92c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4971      	ldr	r1, [pc, #452]	; (8005908 <Batt_Protection_when_discharge+0x930>)
 8005744:	4618      	mov	r0, r3
 8005746:	f7fb f9f5 	bl	8000b34 <__addsf3>
 800574a:	4603      	mov	r3, r0
 800574c:	461a      	mov	r2, r3
 800574e:	4b6c      	ldr	r3, [pc, #432]	; (8005900 <Batt_Protection_when_discharge+0x928>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4619      	mov	r1, r3
 8005754:	4610      	mov	r0, r2
 8005756:	f7fb fca7 	bl	80010a8 <__aeabi_fcmpge>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d028      	beq.n	80057b2 <Batt_Protection_when_discharge+0x7da>
 8005760:	4b68      	ldr	r3, [pc, #416]	; (8005904 <Batt_Protection_when_discharge+0x92c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	496e      	ldr	r1, [pc, #440]	; (8005920 <Batt_Protection_when_discharge+0x948>)
 8005766:	4618      	mov	r0, r3
 8005768:	f7fb f9e4 	bl	8000b34 <__addsf3>
 800576c:	4603      	mov	r3, r0
 800576e:	461a      	mov	r2, r3
 8005770:	4b63      	ldr	r3, [pc, #396]	; (8005900 <Batt_Protection_when_discharge+0x928>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4619      	mov	r1, r3
 8005776:	4610      	mov	r0, r2
 8005778:	f7fb fc82 	bl	8001080 <__aeabi_fcmplt>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d017      	beq.n	80057b2 <Batt_Protection_when_discharge+0x7da>
			  			  if((test_tim2%1000)==0)
 8005782:	4b68      	ldr	r3, [pc, #416]	; (8005924 <Batt_Protection_when_discharge+0x94c>)
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4b68      	ldr	r3, [pc, #416]	; (8005928 <Batt_Protection_when_discharge+0x950>)
 8005788:	fb83 1302 	smull	r1, r3, r3, r2
 800578c:	1199      	asrs	r1, r3, #6
 800578e:	17d3      	asrs	r3, r2, #31
 8005790:	1acb      	subs	r3, r1, r3
 8005792:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005796:	fb01 f303 	mul.w	r3, r1, r3
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	f040 80ae 	bne.w	80058fe <Batt_Protection_when_discharge+0x926>
			  				  BUZZ_Toggle;
 80057a2:	2104      	movs	r1, #4
 80057a4:	4861      	ldr	r0, [pc, #388]	; (800592c <Batt_Protection_when_discharge+0x954>)
 80057a6:	f003 f80a 	bl	80087be <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 80057aa:	4b5e      	ldr	r3, [pc, #376]	; (8005924 <Batt_Protection_when_discharge+0x94c>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%1000)==0)
 80057b0:	e0a5      	b.n	80058fe <Batt_Protection_when_discharge+0x926>
			  		  else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2)
 80057b2:	4b54      	ldr	r3, [pc, #336]	; (8005904 <Batt_Protection_when_discharge+0x92c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	495a      	ldr	r1, [pc, #360]	; (8005920 <Batt_Protection_when_discharge+0x948>)
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fb f9bb 	bl	8000b34 <__addsf3>
 80057be:	4603      	mov	r3, r0
 80057c0:	461a      	mov	r2, r3
 80057c2:	4b4f      	ldr	r3, [pc, #316]	; (8005900 <Batt_Protection_when_discharge+0x928>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4619      	mov	r1, r3
 80057c8:	4610      	mov	r0, r2
 80057ca:	f7fb fc6d 	bl	80010a8 <__aeabi_fcmpge>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d028      	beq.n	8005826 <Batt_Protection_when_discharge+0x84e>
 80057d4:	4b4b      	ldr	r3, [pc, #300]	; (8005904 <Batt_Protection_when_discharge+0x92c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fb f9a9 	bl	8000b34 <__addsf3>
 80057e2:	4603      	mov	r3, r0
 80057e4:	461a      	mov	r2, r3
 80057e6:	4b46      	ldr	r3, [pc, #280]	; (8005900 <Batt_Protection_when_discharge+0x928>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f7fb fc47 	bl	8001080 <__aeabi_fcmplt>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d016      	beq.n	8005826 <Batt_Protection_when_discharge+0x84e>
			  			  if((test_tim2%500)==0)
 80057f8:	4b4a      	ldr	r3, [pc, #296]	; (8005924 <Batt_Protection_when_discharge+0x94c>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	4b4a      	ldr	r3, [pc, #296]	; (8005928 <Batt_Protection_when_discharge+0x950>)
 80057fe:	fb83 1302 	smull	r1, r3, r3, r2
 8005802:	1159      	asrs	r1, r3, #5
 8005804:	17d3      	asrs	r3, r2, #31
 8005806:	1acb      	subs	r3, r1, r3
 8005808:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800580c:	fb01 f303 	mul.w	r3, r1, r3
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d173      	bne.n	80058fe <Batt_Protection_when_discharge+0x926>
			  				  BUZZ_Toggle;
 8005816:	2104      	movs	r1, #4
 8005818:	4844      	ldr	r0, [pc, #272]	; (800592c <Batt_Protection_when_discharge+0x954>)
 800581a:	f002 ffd0 	bl	80087be <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 800581e:	4b41      	ldr	r3, [pc, #260]	; (8005924 <Batt_Protection_when_discharge+0x94c>)
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005824:	e06b      	b.n	80058fe <Batt_Protection_when_discharge+0x926>
			  		  else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set)
 8005826:	4b37      	ldr	r3, [pc, #220]	; (8005904 <Batt_Protection_when_discharge+0x92c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800582e:	4618      	mov	r0, r3
 8005830:	f7fb f980 	bl	8000b34 <__addsf3>
 8005834:	4603      	mov	r3, r0
 8005836:	461a      	mov	r2, r3
 8005838:	4b31      	ldr	r3, [pc, #196]	; (8005900 <Batt_Protection_when_discharge+0x928>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	f7fb fc3c 	bl	80010bc <__aeabi_fcmpgt>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d021      	beq.n	800588e <Batt_Protection_when_discharge+0x8b6>
 800584a:	4b2d      	ldr	r3, [pc, #180]	; (8005900 <Batt_Protection_when_discharge+0x928>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4b2d      	ldr	r3, [pc, #180]	; (8005904 <Batt_Protection_when_discharge+0x92c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4619      	mov	r1, r3
 8005854:	4610      	mov	r0, r2
 8005856:	f7fb fc27 	bl	80010a8 <__aeabi_fcmpge>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d016      	beq.n	800588e <Batt_Protection_when_discharge+0x8b6>
			  			  if((test_tim2%500)==0)
 8005860:	4b30      	ldr	r3, [pc, #192]	; (8005924 <Batt_Protection_when_discharge+0x94c>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	4b30      	ldr	r3, [pc, #192]	; (8005928 <Batt_Protection_when_discharge+0x950>)
 8005866:	fb83 1302 	smull	r1, r3, r3, r2
 800586a:	1159      	asrs	r1, r3, #5
 800586c:	17d3      	asrs	r3, r2, #31
 800586e:	1acb      	subs	r3, r1, r3
 8005870:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005874:	fb01 f303 	mul.w	r3, r1, r3
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d13f      	bne.n	80058fe <Batt_Protection_when_discharge+0x926>
			  				  BUZZ_Toggle;
 800587e:	2104      	movs	r1, #4
 8005880:	482a      	ldr	r0, [pc, #168]	; (800592c <Batt_Protection_when_discharge+0x954>)
 8005882:	f002 ff9c 	bl	80087be <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005886:	4b27      	ldr	r3, [pc, #156]	; (8005924 <Batt_Protection_when_discharge+0x94c>)
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 800588c:	e037      	b.n	80058fe <Batt_Protection_when_discharge+0x926>
			  		  else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set)
 800588e:	4b1c      	ldr	r3, [pc, #112]	; (8005900 <Batt_Protection_when_discharge+0x928>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	4b1c      	ldr	r3, [pc, #112]	; (8005904 <Batt_Protection_when_discharge+0x92c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4619      	mov	r1, r3
 8005898:	4610      	mov	r0, r2
 800589a:	f7fb fbf1 	bl	8001080 <__aeabi_fcmplt>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d121      	bne.n	80058e8 <Batt_Protection_when_discharge+0x910>
 80058a4:	4b19      	ldr	r3, [pc, #100]	; (800590c <Batt_Protection_when_discharge+0x934>)
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	4b16      	ldr	r3, [pc, #88]	; (8005904 <Batt_Protection_when_discharge+0x92c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4619      	mov	r1, r3
 80058ae:	4610      	mov	r0, r2
 80058b0:	f7fb fbe6 	bl	8001080 <__aeabi_fcmplt>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d116      	bne.n	80058e8 <Batt_Protection_when_discharge+0x910>
 80058ba:	4b15      	ldr	r3, [pc, #84]	; (8005910 <Batt_Protection_when_discharge+0x938>)
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4b11      	ldr	r3, [pc, #68]	; (8005904 <Batt_Protection_when_discharge+0x92c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4619      	mov	r1, r3
 80058c4:	4610      	mov	r0, r2
 80058c6:	f7fb fbdb 	bl	8001080 <__aeabi_fcmplt>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10b      	bne.n	80058e8 <Batt_Protection_when_discharge+0x910>
 80058d0:	4b10      	ldr	r3, [pc, #64]	; (8005914 <Batt_Protection_when_discharge+0x93c>)
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <Batt_Protection_when_discharge+0x92c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4619      	mov	r1, r3
 80058da:	4610      	mov	r0, r2
 80058dc:	f7fb fbd0 	bl	8001080 <__aeabi_fcmplt>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d100      	bne.n	80058e8 <Batt_Protection_when_discharge+0x910>
			  		  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 80058e6:	e19c      	b.n	8005c22 <Batt_Protection_when_discharge+0xc4a>
			  			  Batt_Open_Mode();
 80058e8:	f7fb fd58 	bl	800139c <Batt_Open_Mode>
			  			  flag_trip_undertemperature=ON;
 80058ec:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <Batt_Protection_when_discharge+0x940>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	701a      	strb	r2, [r3, #0]
			  			  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80058f2:	2200      	movs	r2, #0
 80058f4:	2104      	movs	r1, #4
 80058f6:	480d      	ldr	r0, [pc, #52]	; (800592c <Batt_Protection_when_discharge+0x954>)
 80058f8:	f002 ff49 	bl	800878e <HAL_GPIO_WritePin>
			  		  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 80058fc:	e191      	b.n	8005c22 <Batt_Protection_when_discharge+0xc4a>
 80058fe:	e190      	b.n	8005c22 <Batt_Protection_when_discharge+0xc4a>
 8005900:	200010bc 	.word	0x200010bc
 8005904:	20000064 	.word	0x20000064
 8005908:	41200000 	.word	0x41200000
 800590c:	200014f8 	.word	0x200014f8
 8005910:	20001090 	.word	0x20001090
 8005914:	200010f0 	.word	0x200010f0
 8005918:	200010b0 	.word	0x200010b0
 800591c:	200010b8 	.word	0x200010b8
 8005920:	40a00000 	.word	0x40a00000
 8005924:	20000bd4 	.word	0x20000bd4
 8005928:	10624dd3 	.word	0x10624dd3
 800592c:	40011000 	.word	0x40011000
			  	  else if(Pack_SOC-SOC_Under_Set<=10 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE)
 8005930:	4b81      	ldr	r3, [pc, #516]	; (8005b38 <Batt_Protection_when_discharge+0xb60>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	4b81      	ldr	r3, [pc, #516]	; (8005b3c <Batt_Protection_when_discharge+0xb64>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f7fb f8f8 	bl	8000b30 <__aeabi_fsub>
 8005940:	4603      	mov	r3, r0
 8005942:	497f      	ldr	r1, [pc, #508]	; (8005b40 <Batt_Protection_when_discharge+0xb68>)
 8005944:	4618      	mov	r0, r3
 8005946:	f7fb fba5 	bl	8001094 <__aeabi_fcmple>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80cd 	beq.w	8005aec <Batt_Protection_when_discharge+0xb14>
 8005952:	4b7c      	ldr	r3, [pc, #496]	; (8005b44 <Batt_Protection_when_discharge+0xb6c>)
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f040 80c8 	bne.w	8005aec <Batt_Protection_when_discharge+0xb14>
 800595c:	4b7a      	ldr	r3, [pc, #488]	; (8005b48 <Batt_Protection_when_discharge+0xb70>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b02      	cmp	r3, #2
 8005962:	f040 80c3 	bne.w	8005aec <Batt_Protection_when_discharge+0xb14>
			  		  fault_code=5;
 8005966:	4b79      	ldr	r3, [pc, #484]	; (8005b4c <Batt_Protection_when_discharge+0xb74>)
 8005968:	2205      	movs	r2, #5
 800596a:	701a      	strb	r2, [r3, #0]
			  		  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 800596c:	4b73      	ldr	r3, [pc, #460]	; (8005b3c <Batt_Protection_when_discharge+0xb64>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4973      	ldr	r1, [pc, #460]	; (8005b40 <Batt_Protection_when_discharge+0xb68>)
 8005972:	4618      	mov	r0, r3
 8005974:	f7fb f8de 	bl	8000b34 <__addsf3>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
 800597c:	4b6e      	ldr	r3, [pc, #440]	; (8005b38 <Batt_Protection_when_discharge+0xb60>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4619      	mov	r1, r3
 8005982:	4610      	mov	r0, r2
 8005984:	f7fb fb90 	bl	80010a8 <__aeabi_fcmpge>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d028      	beq.n	80059e0 <Batt_Protection_when_discharge+0xa08>
 800598e:	4b6b      	ldr	r3, [pc, #428]	; (8005b3c <Batt_Protection_when_discharge+0xb64>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	496f      	ldr	r1, [pc, #444]	; (8005b50 <Batt_Protection_when_discharge+0xb78>)
 8005994:	4618      	mov	r0, r3
 8005996:	f7fb f8cd 	bl	8000b34 <__addsf3>
 800599a:	4603      	mov	r3, r0
 800599c:	461a      	mov	r2, r3
 800599e:	4b66      	ldr	r3, [pc, #408]	; (8005b38 <Batt_Protection_when_discharge+0xb60>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4619      	mov	r1, r3
 80059a4:	4610      	mov	r0, r2
 80059a6:	f7fb fb6b 	bl	8001080 <__aeabi_fcmplt>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d017      	beq.n	80059e0 <Batt_Protection_when_discharge+0xa08>
			  			  if((test_tim2%1000)==0)
 80059b0:	4b68      	ldr	r3, [pc, #416]	; (8005b54 <Batt_Protection_when_discharge+0xb7c>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4b68      	ldr	r3, [pc, #416]	; (8005b58 <Batt_Protection_when_discharge+0xb80>)
 80059b6:	fb83 1302 	smull	r1, r3, r3, r2
 80059ba:	1199      	asrs	r1, r3, #6
 80059bc:	17d3      	asrs	r3, r2, #31
 80059be:	1acb      	subs	r3, r1, r3
 80059c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80059c4:	fb01 f303 	mul.w	r3, r1, r3
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f040 808d 	bne.w	8005aea <Batt_Protection_when_discharge+0xb12>
			  				  BUZZ_Toggle;
 80059d0:	2104      	movs	r1, #4
 80059d2:	4862      	ldr	r0, [pc, #392]	; (8005b5c <Batt_Protection_when_discharge+0xb84>)
 80059d4:	f002 fef3 	bl	80087be <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 80059d8:	4b5e      	ldr	r3, [pc, #376]	; (8005b54 <Batt_Protection_when_discharge+0xb7c>)
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%1000)==0)
 80059de:	e084      	b.n	8005aea <Batt_Protection_when_discharge+0xb12>
			  		  else if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+2)
 80059e0:	4b56      	ldr	r3, [pc, #344]	; (8005b3c <Batt_Protection_when_discharge+0xb64>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	495a      	ldr	r1, [pc, #360]	; (8005b50 <Batt_Protection_when_discharge+0xb78>)
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fb f8a4 	bl	8000b34 <__addsf3>
 80059ec:	4603      	mov	r3, r0
 80059ee:	461a      	mov	r2, r3
 80059f0:	4b51      	ldr	r3, [pc, #324]	; (8005b38 <Batt_Protection_when_discharge+0xb60>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4619      	mov	r1, r3
 80059f6:	4610      	mov	r0, r2
 80059f8:	f7fb fb56 	bl	80010a8 <__aeabi_fcmpge>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d028      	beq.n	8005a54 <Batt_Protection_when_discharge+0xa7c>
 8005a02:	4b4e      	ldr	r3, [pc, #312]	; (8005b3c <Batt_Protection_when_discharge+0xb64>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fb f892 	bl	8000b34 <__addsf3>
 8005a10:	4603      	mov	r3, r0
 8005a12:	461a      	mov	r2, r3
 8005a14:	4b48      	ldr	r3, [pc, #288]	; (8005b38 <Batt_Protection_when_discharge+0xb60>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f7fb fb30 	bl	8001080 <__aeabi_fcmplt>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d016      	beq.n	8005a54 <Batt_Protection_when_discharge+0xa7c>
			  			  if((test_tim2%500)==0)
 8005a26:	4b4b      	ldr	r3, [pc, #300]	; (8005b54 <Batt_Protection_when_discharge+0xb7c>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4b4b      	ldr	r3, [pc, #300]	; (8005b58 <Batt_Protection_when_discharge+0xb80>)
 8005a2c:	fb83 1302 	smull	r1, r3, r3, r2
 8005a30:	1159      	asrs	r1, r3, #5
 8005a32:	17d3      	asrs	r3, r2, #31
 8005a34:	1acb      	subs	r3, r1, r3
 8005a36:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005a3a:	fb01 f303 	mul.w	r3, r1, r3
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d152      	bne.n	8005aea <Batt_Protection_when_discharge+0xb12>
			  				  BUZZ_Toggle;
 8005a44:	2104      	movs	r1, #4
 8005a46:	4845      	ldr	r0, [pc, #276]	; (8005b5c <Batt_Protection_when_discharge+0xb84>)
 8005a48:	f002 feb9 	bl	80087be <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005a4c:	4b41      	ldr	r3, [pc, #260]	; (8005b54 <Batt_Protection_when_discharge+0xb7c>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005a52:	e04a      	b.n	8005aea <Batt_Protection_when_discharge+0xb12>
			  		  else if(Pack_SOC<SOC_Under_Set+2 && Pack_SOC>=SOC_Under_Set)
 8005a54:	4b39      	ldr	r3, [pc, #228]	; (8005b3c <Batt_Protection_when_discharge+0xb64>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fb f869 	bl	8000b34 <__addsf3>
 8005a62:	4603      	mov	r3, r0
 8005a64:	461a      	mov	r2, r3
 8005a66:	4b34      	ldr	r3, [pc, #208]	; (8005b38 <Batt_Protection_when_discharge+0xb60>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f7fb fb25 	bl	80010bc <__aeabi_fcmpgt>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d021      	beq.n	8005abc <Batt_Protection_when_discharge+0xae4>
 8005a78:	4b2f      	ldr	r3, [pc, #188]	; (8005b38 <Batt_Protection_when_discharge+0xb60>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	4b2f      	ldr	r3, [pc, #188]	; (8005b3c <Batt_Protection_when_discharge+0xb64>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4619      	mov	r1, r3
 8005a82:	4610      	mov	r0, r2
 8005a84:	f7fb fb10 	bl	80010a8 <__aeabi_fcmpge>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d016      	beq.n	8005abc <Batt_Protection_when_discharge+0xae4>
			  			  if((test_tim2%500)==0)
 8005a8e:	4b31      	ldr	r3, [pc, #196]	; (8005b54 <Batt_Protection_when_discharge+0xb7c>)
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	4b31      	ldr	r3, [pc, #196]	; (8005b58 <Batt_Protection_when_discharge+0xb80>)
 8005a94:	fb83 1302 	smull	r1, r3, r3, r2
 8005a98:	1159      	asrs	r1, r3, #5
 8005a9a:	17d3      	asrs	r3, r2, #31
 8005a9c:	1acb      	subs	r3, r1, r3
 8005a9e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005aa2:	fb01 f303 	mul.w	r3, r1, r3
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d11e      	bne.n	8005aea <Batt_Protection_when_discharge+0xb12>
			  				  BUZZ_Toggle;
 8005aac:	2104      	movs	r1, #4
 8005aae:	482b      	ldr	r0, [pc, #172]	; (8005b5c <Batt_Protection_when_discharge+0xb84>)
 8005ab0:	f002 fe85 	bl	80087be <HAL_GPIO_TogglePin>
			  				  test_tim2=0;
 8005ab4:	4b27      	ldr	r3, [pc, #156]	; (8005b54 <Batt_Protection_when_discharge+0xb7c>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
			  			  if((test_tim2%500)==0)
 8005aba:	e016      	b.n	8005aea <Batt_Protection_when_discharge+0xb12>
			  		  else if(Pack_SOC<SOC_Under_Set)
 8005abc:	4b1e      	ldr	r3, [pc, #120]	; (8005b38 <Batt_Protection_when_discharge+0xb60>)
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	4b1e      	ldr	r3, [pc, #120]	; (8005b3c <Batt_Protection_when_discharge+0xb64>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	f7fb fada 	bl	8001080 <__aeabi_fcmplt>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d100      	bne.n	8005ad4 <Batt_Protection_when_discharge+0xafc>
			  		  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 8005ad2:	e0a6      	b.n	8005c22 <Batt_Protection_when_discharge+0xc4a>
			  			  Batt_Open_Mode();
 8005ad4:	f7fb fc62 	bl	800139c <Batt_Open_Mode>
			  			  flag_trip_SOCOverDischarge=ON;
 8005ad8:	4b1a      	ldr	r3, [pc, #104]	; (8005b44 <Batt_Protection_when_discharge+0xb6c>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	701a      	strb	r2, [r3, #0]
			  			  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2104      	movs	r1, #4
 8005ae2:	481e      	ldr	r0, [pc, #120]	; (8005b5c <Batt_Protection_when_discharge+0xb84>)
 8005ae4:	f002 fe53 	bl	800878e <HAL_GPIO_WritePin>
			  		  if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5)
 8005ae8:	e09b      	b.n	8005c22 <Batt_Protection_when_discharge+0xc4a>
 8005aea:	e09a      	b.n	8005c22 <Batt_Protection_when_discharge+0xc4a>
			  	  else if(Persen_Imbalance_Set-persen_imbalance<10)
 8005aec:	4b1c      	ldr	r3, [pc, #112]	; (8005b60 <Batt_Protection_when_discharge+0xb88>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b1c      	ldr	r3, [pc, #112]	; (8005b64 <Batt_Protection_when_discharge+0xb8c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f7fb f81a 	bl	8000b30 <__aeabi_fsub>
 8005afc:	4603      	mov	r3, r0
 8005afe:	4910      	ldr	r1, [pc, #64]	; (8005b40 <Batt_Protection_when_discharge+0xb68>)
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fb fabd 	bl	8001080 <__aeabi_fcmplt>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d02f      	beq.n	8005b6c <Batt_Protection_when_discharge+0xb94>
			  		  fault_code=6;
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <Batt_Protection_when_discharge+0xb74>)
 8005b0e:	2206      	movs	r2, #6
 8005b10:	701a      	strb	r2, [r3, #0]
			  		  if(persen_imbalance>Persen_Imbalance_Set)
 8005b12:	4b14      	ldr	r3, [pc, #80]	; (8005b64 <Batt_Protection_when_discharge+0xb8c>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b12      	ldr	r3, [pc, #72]	; (8005b60 <Batt_Protection_when_discharge+0xb88>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	f7fb facd 	bl	80010bc <__aeabi_fcmpgt>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d100      	bne.n	8005b2a <Batt_Protection_when_discharge+0xb52>
}
 8005b28:	e07b      	b.n	8005c22 <Batt_Protection_when_discharge+0xc4a>
			  			flag_trip_unbalance=ON;
 8005b2a:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <Batt_Protection_when_discharge+0xb90>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	701a      	strb	r2, [r3, #0]
			  			Batt_Open_Mode();
 8005b30:	f7fb fc34 	bl	800139c <Batt_Open_Mode>
}
 8005b34:	e075      	b.n	8005c22 <Batt_Protection_when_discharge+0xc4a>
 8005b36:	bf00      	nop
 8005b38:	20000bdc 	.word	0x20000bdc
 8005b3c:	20000068 	.word	0x20000068
 8005b40:	41200000 	.word	0x41200000
 8005b44:	200010e4 	.word	0x200010e4
 8005b48:	200009a8 	.word	0x200009a8
 8005b4c:	200010b8 	.word	0x200010b8
 8005b50:	40a00000 	.word	0x40a00000
 8005b54:	20000bd4 	.word	0x20000bd4
 8005b58:	10624dd3 	.word	0x10624dd3
 8005b5c:	40011000 	.word	0x40011000
 8005b60:	20000078 	.word	0x20000078
 8005b64:	20000bb0 	.word	0x20000bb0
 8005b68:	20000c80 	.word	0x20000c80
			  		  if(fault_code!=0) last_fault_code=fault_code;
 8005b6c:	4b30      	ldr	r3, [pc, #192]	; (8005c30 <Batt_Protection_when_discharge+0xc58>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <Batt_Protection_when_discharge+0xba4>
 8005b74:	4b2e      	ldr	r3, [pc, #184]	; (8005c30 <Batt_Protection_when_discharge+0xc58>)
 8005b76:	781a      	ldrb	r2, [r3, #0]
 8005b78:	4b2e      	ldr	r3, [pc, #184]	; (8005c34 <Batt_Protection_when_discharge+0xc5c>)
 8005b7a:	701a      	strb	r2, [r3, #0]
			  		  fault_code=0;
 8005b7c:	4b2c      	ldr	r3, [pc, #176]	; (8005c30 <Batt_Protection_when_discharge+0xc58>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
			  		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005b82:	2200      	movs	r2, #0
 8005b84:	2104      	movs	r1, #4
 8005b86:	482c      	ldr	r0, [pc, #176]	; (8005c38 <Batt_Protection_when_discharge+0xc60>)
 8005b88:	f002 fe01 	bl	800878e <HAL_GPIO_WritePin>
			  		  T_Under_trip=0;
 8005b8c:	4b2b      	ldr	r3, [pc, #172]	; (8005c3c <Batt_Protection_when_discharge+0xc64>)
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]
			  		  T_trip_cycle=T_trip_cycle-0.001;
 8005b94:	4b2a      	ldr	r3, [pc, #168]	; (8005c40 <Batt_Protection_when_discharge+0xc68>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fa fc45 	bl	8000428 <__aeabi_f2d>
 8005b9e:	a322      	add	r3, pc, #136	; (adr r3, 8005c28 <Batt_Protection_when_discharge+0xc50>)
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	f7fa fae0 	bl	8000168 <__aeabi_dsub>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	460c      	mov	r4, r1
 8005bac:	4618      	mov	r0, r3
 8005bae:	4621      	mov	r1, r4
 8005bb0:	f7fa ff6a 	bl	8000a88 <__aeabi_d2f>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	4b22      	ldr	r3, [pc, #136]	; (8005c40 <Batt_Protection_when_discharge+0xc68>)
 8005bb8:	601a      	str	r2, [r3, #0]
			  		  T_I_Over_trip_cycle-=0.001;
 8005bba:	4b22      	ldr	r3, [pc, #136]	; (8005c44 <Batt_Protection_when_discharge+0xc6c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fa fc32 	bl	8000428 <__aeabi_f2d>
 8005bc4:	a318      	add	r3, pc, #96	; (adr r3, 8005c28 <Batt_Protection_when_discharge+0xc50>)
 8005bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bca:	f7fa facd 	bl	8000168 <__aeabi_dsub>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	460c      	mov	r4, r1
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	f7fa ff57 	bl	8000a88 <__aeabi_d2f>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	4b19      	ldr	r3, [pc, #100]	; (8005c44 <Batt_Protection_when_discharge+0xc6c>)
 8005bde:	601a      	str	r2, [r3, #0]
			  		  if(T_trip_cycle<0) T_trip_cycle=0;
 8005be0:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <Batt_Protection_when_discharge+0xc68>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f04f 0100 	mov.w	r1, #0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fb fa49 	bl	8001080 <__aeabi_fcmplt>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <Batt_Protection_when_discharge+0xc24>
 8005bf4:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <Batt_Protection_when_discharge+0xc68>)
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
			  		if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 8005bfc:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <Batt_Protection_when_discharge+0xc6c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f04f 0100 	mov.w	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fb fa3b 	bl	8001080 <__aeabi_fcmplt>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d100      	bne.n	8005c12 <Batt_Protection_when_discharge+0xc3a>
}
 8005c10:	e007      	b.n	8005c22 <Batt_Protection_when_discharge+0xc4a>
			  		if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 8005c12:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <Batt_Protection_when_discharge+0xc6c>)
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
}
 8005c1a:	e002      	b.n	8005c22 <Batt_Protection_when_discharge+0xc4a>
			  		if(flag_trip_undervoltage==OFF)
 8005c1c:	bf00      	nop
 8005c1e:	e000      	b.n	8005c22 <Batt_Protection_when_discharge+0xc4a>
			  		if(flag_trip_overcurrentdischarge==OFF)
 8005c20:	bf00      	nop
}
 8005c22:	bf00      	nop
 8005c24:	bdb0      	pop	{r4, r5, r7, pc}
 8005c26:	bf00      	nop
 8005c28:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c2c:	3f50624d 	.word	0x3f50624d
 8005c30:	200010b8 	.word	0x200010b8
 8005c34:	200014f4 	.word	0x200014f4
 8005c38:	40011000 	.word	0x40011000
 8005c3c:	20001078 	.word	0x20001078
 8005c40:	200010c4 	.word	0x200010c4
 8005c44:	200010f4 	.word	0x200010f4

08005c48 <Batt_Protection_when_charge>:



void Batt_Protection_when_charge(void)
{
 8005c48:	b5b0      	push	{r4, r5, r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
					///////////////////// Short Circuit //////////////////////////////////////
					if(fabs(IBATT)>VBATT)
 8005c4c:	4ba1      	ldr	r3, [pc, #644]	; (8005ed4 <Batt_Protection_when_charge+0x28c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c54:	4ba0      	ldr	r3, [pc, #640]	; (8005ed8 <Batt_Protection_when_charge+0x290>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f7fb fa2e 	bl	80010bc <__aeabi_fcmpgt>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d015      	beq.n	8005c92 <Batt_Protection_when_charge+0x4a>
				  	{
						Isc=IBATT;
 8005c66:	4b9b      	ldr	r3, [pc, #620]	; (8005ed4 <Batt_Protection_when_charge+0x28c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a9c      	ldr	r2, [pc, #624]	; (8005edc <Batt_Protection_when_charge+0x294>)
 8005c6c:	6013      	str	r3, [r2, #0]
			  		  	Vsc=VBATT;
 8005c6e:	4b9a      	ldr	r3, [pc, #616]	; (8005ed8 <Batt_Protection_when_charge+0x290>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a9b      	ldr	r2, [pc, #620]	; (8005ee0 <Batt_Protection_when_charge+0x298>)
 8005c74:	6013      	str	r3, [r2, #0]
				  		fault_code=12;
 8005c76:	4b9b      	ldr	r3, [pc, #620]	; (8005ee4 <Batt_Protection_when_charge+0x29c>)
 8005c78:	220c      	movs	r2, #12
 8005c7a:	701a      	strb	r2, [r3, #0]
				  		Batt_Open_Mode();
 8005c7c:	f7fb fb8e 	bl	800139c <Batt_Open_Mode>
				  		flag_trip_shortcircuit=ON;
 8005c80:	4b99      	ldr	r3, [pc, #612]	; (8005ee8 <Batt_Protection_when_charge+0x2a0>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	701a      	strb	r2, [r3, #0]
				  		HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005c86:	2200      	movs	r2, #0
 8005c88:	2104      	movs	r1, #4
 8005c8a:	4898      	ldr	r0, [pc, #608]	; (8005eec <Batt_Protection_when_charge+0x2a4>)
 8005c8c:	f002 fd7f 	bl	800878e <HAL_GPIO_WritePin>
				    	  T_trip_cycle=T_trip_cycle-0.001;
				    	  T_I_Over_trip_cycle-=0.001;
				    	  if(T_trip_cycle<0) T_trip_cycle=0;
				    	  if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
				     }
}
 8005c90:	e3a8      	b.n	80063e4 <Batt_Protection_when_charge+0x79c>
					else if(SOC_Over_Set-Pack_SOC<=10 && flag_trip_SOCOverCharge==OFF)
 8005c92:	4b97      	ldr	r3, [pc, #604]	; (8005ef0 <Batt_Protection_when_charge+0x2a8>)
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	4b97      	ldr	r3, [pc, #604]	; (8005ef4 <Batt_Protection_when_charge+0x2ac>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	f7fa ff47 	bl	8000b30 <__aeabi_fsub>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4994      	ldr	r1, [pc, #592]	; (8005ef8 <Batt_Protection_when_charge+0x2b0>)
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fb f9f4 	bl	8001094 <__aeabi_fcmple>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01d      	beq.n	8005cee <Batt_Protection_when_charge+0xa6>
 8005cb2:	4b92      	ldr	r3, [pc, #584]	; (8005efc <Batt_Protection_when_charge+0x2b4>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d119      	bne.n	8005cee <Batt_Protection_when_charge+0xa6>
			  		  fault_code=7;
 8005cba:	4b8a      	ldr	r3, [pc, #552]	; (8005ee4 <Batt_Protection_when_charge+0x29c>)
 8005cbc:	2207      	movs	r2, #7
 8005cbe:	701a      	strb	r2, [r3, #0]
			  		  if(Pack_SOC>SOC_Over_Set)
 8005cc0:	4b8c      	ldr	r3, [pc, #560]	; (8005ef4 <Batt_Protection_when_charge+0x2ac>)
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	4b8a      	ldr	r3, [pc, #552]	; (8005ef0 <Batt_Protection_when_charge+0x2a8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	f7fb f9f6 	bl	80010bc <__aeabi_fcmpgt>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8386 	beq.w	80063e4 <Batt_Protection_when_charge+0x79c>
			  				  Batt_Open_Mode();
 8005cd8:	f7fb fb60 	bl	800139c <Batt_Open_Mode>
			  				  flag_trip_SOCOverCharge=ON;
 8005cdc:	4b87      	ldr	r3, [pc, #540]	; (8005efc <Batt_Protection_when_charge+0x2b4>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	701a      	strb	r2, [r3, #0]
			  				  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2104      	movs	r1, #4
 8005ce6:	4881      	ldr	r0, [pc, #516]	; (8005eec <Batt_Protection_when_charge+0x2a4>)
 8005ce8:	f002 fd51 	bl	800878e <HAL_GPIO_WritePin>
			  		  if(Pack_SOC>SOC_Over_Set)
 8005cec:	e37a      	b.n	80063e4 <Batt_Protection_when_charge+0x79c>
			  		else if(((45-Suhu_T1<5)||(80-Suhu_T2<10)||(45-Suhu_T3<5)||(80-Suhu_T4<10)) && (flag_trip_overtemperature==OFF)) // Warning Over Temperature Charge 40 65 40 65
 8005cee:	4b84      	ldr	r3, [pc, #528]	; (8005f00 <Batt_Protection_when_charge+0x2b8>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4883      	ldr	r0, [pc, #524]	; (8005f04 <Batt_Protection_when_charge+0x2bc>)
 8005cf6:	f7fa ff1b 	bl	8000b30 <__aeabi_fsub>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	4982      	ldr	r1, [pc, #520]	; (8005f08 <Batt_Protection_when_charge+0x2c0>)
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fb f9be 	bl	8001080 <__aeabi_fcmplt>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d129      	bne.n	8005d5e <Batt_Protection_when_charge+0x116>
 8005d0a:	4b80      	ldr	r3, [pc, #512]	; (8005f0c <Batt_Protection_when_charge+0x2c4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	487f      	ldr	r0, [pc, #508]	; (8005f10 <Batt_Protection_when_charge+0x2c8>)
 8005d12:	f7fa ff0d 	bl	8000b30 <__aeabi_fsub>
 8005d16:	4603      	mov	r3, r0
 8005d18:	4977      	ldr	r1, [pc, #476]	; (8005ef8 <Batt_Protection_when_charge+0x2b0>)
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fb f9b0 	bl	8001080 <__aeabi_fcmplt>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d11b      	bne.n	8005d5e <Batt_Protection_when_charge+0x116>
 8005d26:	4b7b      	ldr	r3, [pc, #492]	; (8005f14 <Batt_Protection_when_charge+0x2cc>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4875      	ldr	r0, [pc, #468]	; (8005f04 <Batt_Protection_when_charge+0x2bc>)
 8005d2e:	f7fa feff 	bl	8000b30 <__aeabi_fsub>
 8005d32:	4603      	mov	r3, r0
 8005d34:	4974      	ldr	r1, [pc, #464]	; (8005f08 <Batt_Protection_when_charge+0x2c0>)
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fb f9a2 	bl	8001080 <__aeabi_fcmplt>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10d      	bne.n	8005d5e <Batt_Protection_when_charge+0x116>
 8005d42:	4b75      	ldr	r3, [pc, #468]	; (8005f18 <Batt_Protection_when_charge+0x2d0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4619      	mov	r1, r3
 8005d48:	4871      	ldr	r0, [pc, #452]	; (8005f10 <Batt_Protection_when_charge+0x2c8>)
 8005d4a:	f7fa fef1 	bl	8000b30 <__aeabi_fsub>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	4969      	ldr	r1, [pc, #420]	; (8005ef8 <Batt_Protection_when_charge+0x2b0>)
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fb f994 	bl	8001080 <__aeabi_fcmplt>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d036      	beq.n	8005dcc <Batt_Protection_when_charge+0x184>
 8005d5e:	4b6f      	ldr	r3, [pc, #444]	; (8005f1c <Batt_Protection_when_charge+0x2d4>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d132      	bne.n	8005dcc <Batt_Protection_when_charge+0x184>
			  			  fault_code=8;
 8005d66:	4b5f      	ldr	r3, [pc, #380]	; (8005ee4 <Batt_Protection_when_charge+0x29c>)
 8005d68:	2208      	movs	r2, #8
 8005d6a:	701a      	strb	r2, [r3, #0]
			  			  if((Suhu_T1>45)||(Suhu_T2>80)||(Suhu_T3>45)||(Suhu_T4>80))
 8005d6c:	4b64      	ldr	r3, [pc, #400]	; (8005f00 <Batt_Protection_when_charge+0x2b8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4964      	ldr	r1, [pc, #400]	; (8005f04 <Batt_Protection_when_charge+0x2bc>)
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fb f9a2 	bl	80010bc <__aeabi_fcmpgt>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d11b      	bne.n	8005db6 <Batt_Protection_when_charge+0x16e>
 8005d7e:	4b63      	ldr	r3, [pc, #396]	; (8005f0c <Batt_Protection_when_charge+0x2c4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4963      	ldr	r1, [pc, #396]	; (8005f10 <Batt_Protection_when_charge+0x2c8>)
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fb f999 	bl	80010bc <__aeabi_fcmpgt>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d112      	bne.n	8005db6 <Batt_Protection_when_charge+0x16e>
 8005d90:	4b60      	ldr	r3, [pc, #384]	; (8005f14 <Batt_Protection_when_charge+0x2cc>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	495b      	ldr	r1, [pc, #364]	; (8005f04 <Batt_Protection_when_charge+0x2bc>)
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fb f990 	bl	80010bc <__aeabi_fcmpgt>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <Batt_Protection_when_charge+0x16e>
 8005da2:	4b5d      	ldr	r3, [pc, #372]	; (8005f18 <Batt_Protection_when_charge+0x2d0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	495a      	ldr	r1, [pc, #360]	; (8005f10 <Batt_Protection_when_charge+0x2c8>)
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fb f987 	bl	80010bc <__aeabi_fcmpgt>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d100      	bne.n	8005db6 <Batt_Protection_when_charge+0x16e>
 8005db4:	e316      	b.n	80063e4 <Batt_Protection_when_charge+0x79c>
			  				  	  Batt_Open_Mode();
 8005db6:	f7fb faf1 	bl	800139c <Batt_Open_Mode>
			  				  	  flag_trip_overtemperature=ON;
 8005dba:	4b58      	ldr	r3, [pc, #352]	; (8005f1c <Batt_Protection_when_charge+0x2d4>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	701a      	strb	r2, [r3, #0]
			  				  	  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2104      	movs	r1, #4
 8005dc4:	4849      	ldr	r0, [pc, #292]	; (8005eec <Batt_Protection_when_charge+0x2a4>)
 8005dc6:	f002 fce2 	bl	800878e <HAL_GPIO_WritePin>
			  			  if((Suhu_T1>45)||(Suhu_T2>80)||(Suhu_T3>45)||(Suhu_T4>80))
 8005dca:	e30b      	b.n	80063e4 <Batt_Protection_when_charge+0x79c>
			  		else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF)
 8005dcc:	4b4c      	ldr	r3, [pc, #304]	; (8005f00 <Batt_Protection_when_charge+0x2b8>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	4b53      	ldr	r3, [pc, #332]	; (8005f20 <Batt_Protection_when_charge+0x2d8>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f7fa feaa 	bl	8000b30 <__aeabi_fsub>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	4946      	ldr	r1, [pc, #280]	; (8005ef8 <Batt_Protection_when_charge+0x2b0>)
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fb f957 	bl	8001094 <__aeabi_fcmple>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d130      	bne.n	8005e4e <Batt_Protection_when_charge+0x206>
 8005dec:	4b47      	ldr	r3, [pc, #284]	; (8005f0c <Batt_Protection_when_charge+0x2c4>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4b4b      	ldr	r3, [pc, #300]	; (8005f20 <Batt_Protection_when_charge+0x2d8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f7fa fe9a 	bl	8000b30 <__aeabi_fsub>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	493e      	ldr	r1, [pc, #248]	; (8005ef8 <Batt_Protection_when_charge+0x2b0>)
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fb f947 	bl	8001094 <__aeabi_fcmple>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d120      	bne.n	8005e4e <Batt_Protection_when_charge+0x206>
 8005e0c:	4b41      	ldr	r3, [pc, #260]	; (8005f14 <Batt_Protection_when_charge+0x2cc>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	4b43      	ldr	r3, [pc, #268]	; (8005f20 <Batt_Protection_when_charge+0x2d8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	f7fa fe8a 	bl	8000b30 <__aeabi_fsub>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	4936      	ldr	r1, [pc, #216]	; (8005ef8 <Batt_Protection_when_charge+0x2b0>)
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fb f937 	bl	8001094 <__aeabi_fcmple>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d110      	bne.n	8005e4e <Batt_Protection_when_charge+0x206>
 8005e2c:	4b3a      	ldr	r3, [pc, #232]	; (8005f18 <Batt_Protection_when_charge+0x2d0>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	4b3b      	ldr	r3, [pc, #236]	; (8005f20 <Batt_Protection_when_charge+0x2d8>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4619      	mov	r1, r3
 8005e36:	4610      	mov	r0, r2
 8005e38:	f7fa fe7a 	bl	8000b30 <__aeabi_fsub>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	492e      	ldr	r1, [pc, #184]	; (8005ef8 <Batt_Protection_when_charge+0x2b0>)
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fb f927 	bl	8001094 <__aeabi_fcmple>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 812d 	beq.w	80060a8 <Batt_Protection_when_charge+0x460>
 8005e4e:	4b35      	ldr	r3, [pc, #212]	; (8005f24 <Batt_Protection_when_charge+0x2dc>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f040 8128 	bne.w	80060a8 <Batt_Protection_when_charge+0x460>
			  			  fault_code=9;
 8005e58:	4b22      	ldr	r3, [pc, #136]	; (8005ee4 <Batt_Protection_when_charge+0x29c>)
 8005e5a:	2209      	movs	r2, #9
 8005e5c:	701a      	strb	r2, [r3, #0]
			  			  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8005e5e:	4b30      	ldr	r3, [pc, #192]	; (8005f20 <Batt_Protection_when_charge+0x2d8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4925      	ldr	r1, [pc, #148]	; (8005ef8 <Batt_Protection_when_charge+0x2b0>)
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fa fe65 	bl	8000b34 <__addsf3>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <Batt_Protection_when_charge+0x2b8>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f7fb f917 	bl	80010a8 <__aeabi_fcmpge>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d057      	beq.n	8005f30 <Batt_Protection_when_charge+0x2e8>
 8005e80:	4b27      	ldr	r3, [pc, #156]	; (8005f20 <Batt_Protection_when_charge+0x2d8>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4920      	ldr	r1, [pc, #128]	; (8005f08 <Batt_Protection_when_charge+0x2c0>)
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fa fe54 	bl	8000b34 <__addsf3>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	461a      	mov	r2, r3
 8005e90:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <Batt_Protection_when_charge+0x2b8>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4619      	mov	r1, r3
 8005e96:	4610      	mov	r0, r2
 8005e98:	f7fb f8f2 	bl	8001080 <__aeabi_fcmplt>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d046      	beq.n	8005f30 <Batt_Protection_when_charge+0x2e8>
			  				  if((test_tim2%1000)==0)
 8005ea2:	4b21      	ldr	r3, [pc, #132]	; (8005f28 <Batt_Protection_when_charge+0x2e0>)
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	4b21      	ldr	r3, [pc, #132]	; (8005f2c <Batt_Protection_when_charge+0x2e4>)
 8005ea8:	fb83 1302 	smull	r1, r3, r3, r2
 8005eac:	1199      	asrs	r1, r3, #6
 8005eae:	17d3      	asrs	r3, r2, #31
 8005eb0:	1acb      	subs	r3, r1, r3
 8005eb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005eb6:	fb01 f303 	mul.w	r3, r1, r3
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f040 80dd 	bne.w	800607c <Batt_Protection_when_charge+0x434>
			  					  BUZZ_Toggle;
 8005ec2:	2104      	movs	r1, #4
 8005ec4:	4809      	ldr	r0, [pc, #36]	; (8005eec <Batt_Protection_when_charge+0x2a4>)
 8005ec6:	f002 fc7a 	bl	80087be <HAL_GPIO_TogglePin>
			  					  test_tim2=0;
 8005eca:	4b17      	ldr	r3, [pc, #92]	; (8005f28 <Batt_Protection_when_charge+0x2e0>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
			  				  if((test_tim2%1000)==0)
 8005ed0:	e0d4      	b.n	800607c <Batt_Protection_when_charge+0x434>
 8005ed2:	bf00      	nop
 8005ed4:	200010a8 	.word	0x200010a8
 8005ed8:	2000108c 	.word	0x2000108c
 8005edc:	2000109c 	.word	0x2000109c
 8005ee0:	200010cc 	.word	0x200010cc
 8005ee4:	200010b8 	.word	0x200010b8
 8005ee8:	20000c82 	.word	0x20000c82
 8005eec:	40011000 	.word	0x40011000
 8005ef0:	2000006c 	.word	0x2000006c
 8005ef4:	20000bdc 	.word	0x20000bdc
 8005ef8:	41200000 	.word	0x41200000
 8005efc:	20000c81 	.word	0x20000c81
 8005f00:	200010bc 	.word	0x200010bc
 8005f04:	42340000 	.word	0x42340000
 8005f08:	40a00000 	.word	0x40a00000
 8005f0c:	200014f8 	.word	0x200014f8
 8005f10:	42a00000 	.word	0x42a00000
 8005f14:	20001090 	.word	0x20001090
 8005f18:	200010f0 	.word	0x200010f0
 8005f1c:	20001088 	.word	0x20001088
 8005f20:	20000064 	.word	0x20000064
 8005f24:	200010b0 	.word	0x200010b0
 8005f28:	20000bd4 	.word	0x20000bd4
 8005f2c:	10624dd3 	.word	0x10624dd3
			  			  else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2)
 8005f30:	4b53      	ldr	r3, [pc, #332]	; (8006080 <Batt_Protection_when_charge+0x438>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4953      	ldr	r1, [pc, #332]	; (8006084 <Batt_Protection_when_charge+0x43c>)
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fa fdfc 	bl	8000b34 <__addsf3>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	461a      	mov	r2, r3
 8005f40:	4b51      	ldr	r3, [pc, #324]	; (8006088 <Batt_Protection_when_charge+0x440>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4619      	mov	r1, r3
 8005f46:	4610      	mov	r0, r2
 8005f48:	f7fb f8ae 	bl	80010a8 <__aeabi_fcmpge>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d028      	beq.n	8005fa4 <Batt_Protection_when_charge+0x35c>
 8005f52:	4b4b      	ldr	r3, [pc, #300]	; (8006080 <Batt_Protection_when_charge+0x438>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fa fdea 	bl	8000b34 <__addsf3>
 8005f60:	4603      	mov	r3, r0
 8005f62:	461a      	mov	r2, r3
 8005f64:	4b48      	ldr	r3, [pc, #288]	; (8006088 <Batt_Protection_when_charge+0x440>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f7fb f888 	bl	8001080 <__aeabi_fcmplt>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d016      	beq.n	8005fa4 <Batt_Protection_when_charge+0x35c>
			  				  if((test_tim2%500)==0)
 8005f76:	4b45      	ldr	r3, [pc, #276]	; (800608c <Batt_Protection_when_charge+0x444>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	4b45      	ldr	r3, [pc, #276]	; (8006090 <Batt_Protection_when_charge+0x448>)
 8005f7c:	fb83 1302 	smull	r1, r3, r3, r2
 8005f80:	1159      	asrs	r1, r3, #5
 8005f82:	17d3      	asrs	r3, r2, #31
 8005f84:	1acb      	subs	r3, r1, r3
 8005f86:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005f8a:	fb01 f303 	mul.w	r3, r1, r3
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d173      	bne.n	800607c <Batt_Protection_when_charge+0x434>
			  					  BUZZ_Toggle;
 8005f94:	2104      	movs	r1, #4
 8005f96:	483f      	ldr	r0, [pc, #252]	; (8006094 <Batt_Protection_when_charge+0x44c>)
 8005f98:	f002 fc11 	bl	80087be <HAL_GPIO_TogglePin>
			  					  test_tim2=0;
 8005f9c:	4b3b      	ldr	r3, [pc, #236]	; (800608c <Batt_Protection_when_charge+0x444>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
			  				  if((test_tim2%500)==0)
 8005fa2:	e06b      	b.n	800607c <Batt_Protection_when_charge+0x434>
			  			  else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set)
 8005fa4:	4b36      	ldr	r3, [pc, #216]	; (8006080 <Batt_Protection_when_charge+0x438>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fa fdc1 	bl	8000b34 <__addsf3>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4b34      	ldr	r3, [pc, #208]	; (8006088 <Batt_Protection_when_charge+0x440>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f7fb f87d 	bl	80010bc <__aeabi_fcmpgt>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d021      	beq.n	800600c <Batt_Protection_when_charge+0x3c4>
 8005fc8:	4b2f      	ldr	r3, [pc, #188]	; (8006088 <Batt_Protection_when_charge+0x440>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	4b2c      	ldr	r3, [pc, #176]	; (8006080 <Batt_Protection_when_charge+0x438>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f7fb f868 	bl	80010a8 <__aeabi_fcmpge>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d016      	beq.n	800600c <Batt_Protection_when_charge+0x3c4>
			  				  if((test_tim2%500)==0)
 8005fde:	4b2b      	ldr	r3, [pc, #172]	; (800608c <Batt_Protection_when_charge+0x444>)
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b2b      	ldr	r3, [pc, #172]	; (8006090 <Batt_Protection_when_charge+0x448>)
 8005fe4:	fb83 1302 	smull	r1, r3, r3, r2
 8005fe8:	1159      	asrs	r1, r3, #5
 8005fea:	17d3      	asrs	r3, r2, #31
 8005fec:	1acb      	subs	r3, r1, r3
 8005fee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005ff2:	fb01 f303 	mul.w	r3, r1, r3
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d13f      	bne.n	800607c <Batt_Protection_when_charge+0x434>
			  					  BUZZ_Toggle;
 8005ffc:	2104      	movs	r1, #4
 8005ffe:	4825      	ldr	r0, [pc, #148]	; (8006094 <Batt_Protection_when_charge+0x44c>)
 8006000:	f002 fbdd 	bl	80087be <HAL_GPIO_TogglePin>
			  					  test_tim2=0;
 8006004:	4b21      	ldr	r3, [pc, #132]	; (800608c <Batt_Protection_when_charge+0x444>)
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]
			  				  if((test_tim2%500)==0)
 800600a:	e037      	b.n	800607c <Batt_Protection_when_charge+0x434>
			  			  else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set)
 800600c:	4b1e      	ldr	r3, [pc, #120]	; (8006088 <Batt_Protection_when_charge+0x440>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	4b1b      	ldr	r3, [pc, #108]	; (8006080 <Batt_Protection_when_charge+0x438>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4619      	mov	r1, r3
 8006016:	4610      	mov	r0, r2
 8006018:	f7fb f832 	bl	8001080 <__aeabi_fcmplt>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d121      	bne.n	8006066 <Batt_Protection_when_charge+0x41e>
 8006022:	4b1d      	ldr	r3, [pc, #116]	; (8006098 <Batt_Protection_when_charge+0x450>)
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4b16      	ldr	r3, [pc, #88]	; (8006080 <Batt_Protection_when_charge+0x438>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4619      	mov	r1, r3
 800602c:	4610      	mov	r0, r2
 800602e:	f7fb f827 	bl	8001080 <__aeabi_fcmplt>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d116      	bne.n	8006066 <Batt_Protection_when_charge+0x41e>
 8006038:	4b18      	ldr	r3, [pc, #96]	; (800609c <Batt_Protection_when_charge+0x454>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	4b10      	ldr	r3, [pc, #64]	; (8006080 <Batt_Protection_when_charge+0x438>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4619      	mov	r1, r3
 8006042:	4610      	mov	r0, r2
 8006044:	f7fb f81c 	bl	8001080 <__aeabi_fcmplt>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10b      	bne.n	8006066 <Batt_Protection_when_charge+0x41e>
 800604e:	4b14      	ldr	r3, [pc, #80]	; (80060a0 <Batt_Protection_when_charge+0x458>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <Batt_Protection_when_charge+0x438>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4619      	mov	r1, r3
 8006058:	4610      	mov	r0, r2
 800605a:	f7fb f811 	bl	8001080 <__aeabi_fcmplt>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d100      	bne.n	8006066 <Batt_Protection_when_charge+0x41e>
			  			  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 8006064:	e1be      	b.n	80063e4 <Batt_Protection_when_charge+0x79c>
			  				  Batt_Open_Mode();
 8006066:	f7fb f999 	bl	800139c <Batt_Open_Mode>
			  				  flag_trip_undertemperature=ON;
 800606a:	4b0e      	ldr	r3, [pc, #56]	; (80060a4 <Batt_Protection_when_charge+0x45c>)
 800606c:	2201      	movs	r2, #1
 800606e:	701a      	strb	r2, [r3, #0]
			  				  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8006070:	2200      	movs	r2, #0
 8006072:	2104      	movs	r1, #4
 8006074:	4807      	ldr	r0, [pc, #28]	; (8006094 <Batt_Protection_when_charge+0x44c>)
 8006076:	f002 fb8a 	bl	800878e <HAL_GPIO_WritePin>
			  			  if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5)
 800607a:	e1b3      	b.n	80063e4 <Batt_Protection_when_charge+0x79c>
 800607c:	e1b2      	b.n	80063e4 <Batt_Protection_when_charge+0x79c>
 800607e:	bf00      	nop
 8006080:	20000064 	.word	0x20000064
 8006084:	40a00000 	.word	0x40a00000
 8006088:	200010bc 	.word	0x200010bc
 800608c:	20000bd4 	.word	0x20000bd4
 8006090:	10624dd3 	.word	0x10624dd3
 8006094:	40011000 	.word	0x40011000
 8006098:	200014f8 	.word	0x200014f8
 800609c:	20001090 	.word	0x20001090
 80060a0:	200010f0 	.word	0x200010f0
 80060a4:	200010b0 	.word	0x200010b0
			  		else if((fabs(IBATT)-I_Over_Set_Charge)>0 && flag_trip_overcurrentcharge==OFF)   //Indikasi terjadi Over Current
 80060a8:	4bb7      	ldr	r3, [pc, #732]	; (8006388 <Batt_Protection_when_charge+0x740>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fa f9b9 	bl	8000428 <__aeabi_f2d>
 80060b6:	4604      	mov	r4, r0
 80060b8:	460d      	mov	r5, r1
 80060ba:	4bb4      	ldr	r3, [pc, #720]	; (800638c <Batt_Protection_when_charge+0x744>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fa f9b2 	bl	8000428 <__aeabi_f2d>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4620      	mov	r0, r4
 80060ca:	4629      	mov	r1, r5
 80060cc:	f7fa f84c 	bl	8000168 <__aeabi_dsub>
 80060d0:	4603      	mov	r3, r0
 80060d2:	460c      	mov	r4, r1
 80060d4:	4618      	mov	r0, r3
 80060d6:	4621      	mov	r1, r4
 80060d8:	f04f 0200 	mov.w	r2, #0
 80060dc:	f04f 0300 	mov.w	r3, #0
 80060e0:	f7fa fc8a 	bl	80009f8 <__aeabi_dcmpgt>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 80dd 	beq.w	80062a6 <Batt_Protection_when_charge+0x65e>
 80060ec:	4ba8      	ldr	r3, [pc, #672]	; (8006390 <Batt_Protection_when_charge+0x748>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f040 80d8 	bne.w	80062a6 <Batt_Protection_when_charge+0x65e>
				    	fault_code=10;
 80060f6:	4ba7      	ldr	r3, [pc, #668]	; (8006394 <Batt_Protection_when_charge+0x74c>)
 80060f8:	220a      	movs	r2, #10
 80060fa:	701a      	strb	r2, [r3, #0]
				    	T_I_Over_trip=14.5/(((IBATT/6.9)*(IBATT/6.9))-1);
 80060fc:	4ba2      	ldr	r3, [pc, #648]	; (8006388 <Batt_Protection_when_charge+0x740>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f7fa f991 	bl	8000428 <__aeabi_f2d>
 8006106:	a39c      	add	r3, pc, #624	; (adr r3, 8006378 <Batt_Protection_when_charge+0x730>)
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f7fa fb0e 	bl	800072c <__aeabi_ddiv>
 8006110:	4603      	mov	r3, r0
 8006112:	460c      	mov	r4, r1
 8006114:	4625      	mov	r5, r4
 8006116:	461c      	mov	r4, r3
 8006118:	4b9b      	ldr	r3, [pc, #620]	; (8006388 <Batt_Protection_when_charge+0x740>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f7fa f983 	bl	8000428 <__aeabi_f2d>
 8006122:	a395      	add	r3, pc, #596	; (adr r3, 8006378 <Batt_Protection_when_charge+0x730>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	f7fa fb00 	bl	800072c <__aeabi_ddiv>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4620      	mov	r0, r4
 8006132:	4629      	mov	r1, r5
 8006134:	f7fa f9d0 	bl	80004d8 <__aeabi_dmul>
 8006138:	4603      	mov	r3, r0
 800613a:	460c      	mov	r4, r1
 800613c:	4618      	mov	r0, r3
 800613e:	4621      	mov	r1, r4
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	4b94      	ldr	r3, [pc, #592]	; (8006398 <Batt_Protection_when_charge+0x750>)
 8006146:	f7fa f80f 	bl	8000168 <__aeabi_dsub>
 800614a:	4603      	mov	r3, r0
 800614c:	460c      	mov	r4, r1
 800614e:	461a      	mov	r2, r3
 8006150:	4623      	mov	r3, r4
 8006152:	f04f 0000 	mov.w	r0, #0
 8006156:	4991      	ldr	r1, [pc, #580]	; (800639c <Batt_Protection_when_charge+0x754>)
 8006158:	f7fa fae8 	bl	800072c <__aeabi_ddiv>
 800615c:	4603      	mov	r3, r0
 800615e:	460c      	mov	r4, r1
 8006160:	4618      	mov	r0, r3
 8006162:	4621      	mov	r1, r4
 8006164:	f7fa fc90 	bl	8000a88 <__aeabi_d2f>
 8006168:	4602      	mov	r2, r0
 800616a:	4b8d      	ldr	r3, [pc, #564]	; (80063a0 <Batt_Protection_when_charge+0x758>)
 800616c:	601a      	str	r2, [r3, #0]
				    	T_I_Over_trip_cycle+=0.001;
 800616e:	4b8d      	ldr	r3, [pc, #564]	; (80063a4 <Batt_Protection_when_charge+0x75c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4618      	mov	r0, r3
 8006174:	f7fa f958 	bl	8000428 <__aeabi_f2d>
 8006178:	a381      	add	r3, pc, #516	; (adr r3, 8006380 <Batt_Protection_when_charge+0x738>)
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	f7f9 fff5 	bl	800016c <__adddf3>
 8006182:	4603      	mov	r3, r0
 8006184:	460c      	mov	r4, r1
 8006186:	4618      	mov	r0, r3
 8006188:	4621      	mov	r1, r4
 800618a:	f7fa fc7d 	bl	8000a88 <__aeabi_d2f>
 800618e:	4602      	mov	r2, r0
 8006190:	4b84      	ldr	r3, [pc, #528]	; (80063a4 <Batt_Protection_when_charge+0x75c>)
 8006192:	601a      	str	r2, [r3, #0]
	    		  		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentcharge==OFF)
 8006194:	4b83      	ldr	r3, [pc, #524]	; (80063a4 <Batt_Protection_when_charge+0x75c>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	4b81      	ldr	r3, [pc, #516]	; (80063a0 <Batt_Protection_when_charge+0x758>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f7fa ff8c 	bl	80010bc <__aeabi_fcmpgt>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d011      	beq.n	80061ce <Batt_Protection_when_charge+0x586>
 80061aa:	4b79      	ldr	r3, [pc, #484]	; (8006390 <Batt_Protection_when_charge+0x748>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10d      	bne.n	80061ce <Batt_Protection_when_charge+0x586>
	    		  			Batt_Open_Mode();
 80061b2:	f7fb f8f3 	bl	800139c <Batt_Open_Mode>
	    		  			T_I_Over_trip_cycle=T_I_Over_trip;
 80061b6:	4b7a      	ldr	r3, [pc, #488]	; (80063a0 <Batt_Protection_when_charge+0x758>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a7a      	ldr	r2, [pc, #488]	; (80063a4 <Batt_Protection_when_charge+0x75c>)
 80061bc:	6013      	str	r3, [r2, #0]
	    		  			flag_trip_overcurrentcharge=ON;
 80061be:	4b74      	ldr	r3, [pc, #464]	; (8006390 <Batt_Protection_when_charge+0x748>)
 80061c0:	2201      	movs	r2, #1
 80061c2:	701a      	strb	r2, [r3, #0]
	    		  			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80061c4:	2200      	movs	r2, #0
 80061c6:	2104      	movs	r1, #4
 80061c8:	4877      	ldr	r0, [pc, #476]	; (80063a8 <Batt_Protection_when_charge+0x760>)
 80061ca:	f002 fae0 	bl	800878e <HAL_GPIO_WritePin>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 80061ce:	4b70      	ldr	r3, [pc, #448]	; (8006390 <Batt_Protection_when_charge+0x748>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f040 8105 	bne.w	80063e2 <Batt_Protection_when_charge+0x79a>
				    		if(T_I_Over_trip-T_I_Over_trip_cycle>15)
 80061d8:	4b71      	ldr	r3, [pc, #452]	; (80063a0 <Batt_Protection_when_charge+0x758>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	4b71      	ldr	r3, [pc, #452]	; (80063a4 <Batt_Protection_when_charge+0x75c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f7fa fca4 	bl	8000b30 <__aeabi_fsub>
 80061e8:	4603      	mov	r3, r0
 80061ea:	4970      	ldr	r1, [pc, #448]	; (80063ac <Batt_Protection_when_charge+0x764>)
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fa ff65 	bl	80010bc <__aeabi_fcmpgt>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d017      	beq.n	8006228 <Batt_Protection_when_charge+0x5e0>
				    			if((test_tim2%1000)==0)
 80061f8:	4b6d      	ldr	r3, [pc, #436]	; (80063b0 <Batt_Protection_when_charge+0x768>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	4b6d      	ldr	r3, [pc, #436]	; (80063b4 <Batt_Protection_when_charge+0x76c>)
 80061fe:	fb83 1302 	smull	r1, r3, r3, r2
 8006202:	1199      	asrs	r1, r3, #6
 8006204:	17d3      	asrs	r3, r2, #31
 8006206:	1acb      	subs	r3, r1, r3
 8006208:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800620c:	fb01 f303 	mul.w	r3, r1, r3
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	f040 80e5 	bne.w	80063e2 <Batt_Protection_when_charge+0x79a>
				    				BUZZ_Toggle;
 8006218:	2104      	movs	r1, #4
 800621a:	4863      	ldr	r0, [pc, #396]	; (80063a8 <Batt_Protection_when_charge+0x760>)
 800621c:	f002 facf 	bl	80087be <HAL_GPIO_TogglePin>
				    				test_tim2=0;
 8006220:	4b63      	ldr	r3, [pc, #396]	; (80063b0 <Batt_Protection_when_charge+0x768>)
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
	    		  		if(flag_trip_overcurrentcharge==OFF)
 8006226:	e0dc      	b.n	80063e2 <Batt_Protection_when_charge+0x79a>
				    		else if(T_I_Over_trip-T_I_Over_trip_cycle>10)
 8006228:	4b5d      	ldr	r3, [pc, #372]	; (80063a0 <Batt_Protection_when_charge+0x758>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	4b5d      	ldr	r3, [pc, #372]	; (80063a4 <Batt_Protection_when_charge+0x75c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4619      	mov	r1, r3
 8006232:	4610      	mov	r0, r2
 8006234:	f7fa fc7c 	bl	8000b30 <__aeabi_fsub>
 8006238:	4603      	mov	r3, r0
 800623a:	495f      	ldr	r1, [pc, #380]	; (80063b8 <Batt_Protection_when_charge+0x770>)
 800623c:	4618      	mov	r0, r3
 800623e:	f7fa ff3d 	bl	80010bc <__aeabi_fcmpgt>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d016      	beq.n	8006276 <Batt_Protection_when_charge+0x62e>
				    			if((test_tim2%100)==0)
 8006248:	4b59      	ldr	r3, [pc, #356]	; (80063b0 <Batt_Protection_when_charge+0x768>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	4b5b      	ldr	r3, [pc, #364]	; (80063bc <Batt_Protection_when_charge+0x774>)
 800624e:	fb83 1302 	smull	r1, r3, r3, r2
 8006252:	1159      	asrs	r1, r3, #5
 8006254:	17d3      	asrs	r3, r2, #31
 8006256:	1acb      	subs	r3, r1, r3
 8006258:	2164      	movs	r1, #100	; 0x64
 800625a:	fb01 f303 	mul.w	r3, r1, r3
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	f040 80be 	bne.w	80063e2 <Batt_Protection_when_charge+0x79a>
				    				BUZZ_Toggle;
 8006266:	2104      	movs	r1, #4
 8006268:	484f      	ldr	r0, [pc, #316]	; (80063a8 <Batt_Protection_when_charge+0x760>)
 800626a:	f002 faa8 	bl	80087be <HAL_GPIO_TogglePin>
				    				test_tim2=0;
 800626e:	4b50      	ldr	r3, [pc, #320]	; (80063b0 <Batt_Protection_when_charge+0x768>)
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
	    		  		if(flag_trip_overcurrentcharge==OFF)
 8006274:	e0b5      	b.n	80063e2 <Batt_Protection_when_charge+0x79a>
				    		else if(T_I_Over_trip-T_I_Over_trip_cycle>1)
 8006276:	4b4a      	ldr	r3, [pc, #296]	; (80063a0 <Batt_Protection_when_charge+0x758>)
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	4b4a      	ldr	r3, [pc, #296]	; (80063a4 <Batt_Protection_when_charge+0x75c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4619      	mov	r1, r3
 8006280:	4610      	mov	r0, r2
 8006282:	f7fa fc55 	bl	8000b30 <__aeabi_fsub>
 8006286:	4603      	mov	r3, r0
 8006288:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800628c:	4618      	mov	r0, r3
 800628e:	f7fa ff15 	bl	80010bc <__aeabi_fcmpgt>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d100      	bne.n	800629a <Batt_Protection_when_charge+0x652>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 8006298:	e0a3      	b.n	80063e2 <Batt_Protection_when_charge+0x79a>
				    			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 800629a:	2201      	movs	r2, #1
 800629c:	2104      	movs	r1, #4
 800629e:	4842      	ldr	r0, [pc, #264]	; (80063a8 <Batt_Protection_when_charge+0x760>)
 80062a0:	f002 fa75 	bl	800878e <HAL_GPIO_WritePin>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 80062a4:	e09d      	b.n	80063e2 <Batt_Protection_when_charge+0x79a>
			  		else if(VBATT>V_Over_Set)
 80062a6:	4b46      	ldr	r3, [pc, #280]	; (80063c0 <Batt_Protection_when_charge+0x778>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b46      	ldr	r3, [pc, #280]	; (80063c4 <Batt_Protection_when_charge+0x77c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4619      	mov	r1, r3
 80062b0:	4610      	mov	r0, r2
 80062b2:	f7fa ff03 	bl	80010bc <__aeabi_fcmpgt>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d008      	beq.n	80062ce <Batt_Protection_when_charge+0x686>
			  			fault_code=11;
 80062bc:	4b35      	ldr	r3, [pc, #212]	; (8006394 <Batt_Protection_when_charge+0x74c>)
 80062be:	220b      	movs	r2, #11
 80062c0:	701a      	strb	r2, [r3, #0]
			  			flag_trip_overvoltage=ON;
 80062c2:	4b41      	ldr	r3, [pc, #260]	; (80063c8 <Batt_Protection_when_charge+0x780>)
 80062c4:	2201      	movs	r2, #1
 80062c6:	701a      	strb	r2, [r3, #0]
			  			Batt_Open_Mode();
 80062c8:	f7fb f868 	bl	800139c <Batt_Open_Mode>
}
 80062cc:	e08a      	b.n	80063e4 <Batt_Protection_when_charge+0x79c>
				    	  if(fault_code!=0) last_fault_code=fault_code;
 80062ce:	4b31      	ldr	r3, [pc, #196]	; (8006394 <Batt_Protection_when_charge+0x74c>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <Batt_Protection_when_charge+0x696>
 80062d6:	4b2f      	ldr	r3, [pc, #188]	; (8006394 <Batt_Protection_when_charge+0x74c>)
 80062d8:	781a      	ldrb	r2, [r3, #0]
 80062da:	4b3c      	ldr	r3, [pc, #240]	; (80063cc <Batt_Protection_when_charge+0x784>)
 80062dc:	701a      	strb	r2, [r3, #0]
				    	  fault_code=0;
 80062de:	4b2d      	ldr	r3, [pc, #180]	; (8006394 <Batt_Protection_when_charge+0x74c>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	701a      	strb	r2, [r3, #0]
				    	  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80062e4:	2200      	movs	r2, #0
 80062e6:	2104      	movs	r1, #4
 80062e8:	482f      	ldr	r0, [pc, #188]	; (80063a8 <Batt_Protection_when_charge+0x760>)
 80062ea:	f002 fa50 	bl	800878e <HAL_GPIO_WritePin>
				    	  T_Under_trip=0;
 80062ee:	4b38      	ldr	r3, [pc, #224]	; (80063d0 <Batt_Protection_when_charge+0x788>)
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
				    	  T_trip_cycle=T_trip_cycle-0.001;
 80062f6:	4b37      	ldr	r3, [pc, #220]	; (80063d4 <Batt_Protection_when_charge+0x78c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fa f894 	bl	8000428 <__aeabi_f2d>
 8006300:	a31f      	add	r3, pc, #124	; (adr r3, 8006380 <Batt_Protection_when_charge+0x738>)
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f7f9 ff2f 	bl	8000168 <__aeabi_dsub>
 800630a:	4603      	mov	r3, r0
 800630c:	460c      	mov	r4, r1
 800630e:	4618      	mov	r0, r3
 8006310:	4621      	mov	r1, r4
 8006312:	f7fa fbb9 	bl	8000a88 <__aeabi_d2f>
 8006316:	4602      	mov	r2, r0
 8006318:	4b2e      	ldr	r3, [pc, #184]	; (80063d4 <Batt_Protection_when_charge+0x78c>)
 800631a:	601a      	str	r2, [r3, #0]
				    	  T_I_Over_trip_cycle-=0.001;
 800631c:	4b21      	ldr	r3, [pc, #132]	; (80063a4 <Batt_Protection_when_charge+0x75c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4618      	mov	r0, r3
 8006322:	f7fa f881 	bl	8000428 <__aeabi_f2d>
 8006326:	a316      	add	r3, pc, #88	; (adr r3, 8006380 <Batt_Protection_when_charge+0x738>)
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	f7f9 ff1c 	bl	8000168 <__aeabi_dsub>
 8006330:	4603      	mov	r3, r0
 8006332:	460c      	mov	r4, r1
 8006334:	4618      	mov	r0, r3
 8006336:	4621      	mov	r1, r4
 8006338:	f7fa fba6 	bl	8000a88 <__aeabi_d2f>
 800633c:	4602      	mov	r2, r0
 800633e:	4b19      	ldr	r3, [pc, #100]	; (80063a4 <Batt_Protection_when_charge+0x75c>)
 8006340:	601a      	str	r2, [r3, #0]
				    	  if(T_trip_cycle<0) T_trip_cycle=0;
 8006342:	4b24      	ldr	r3, [pc, #144]	; (80063d4 <Batt_Protection_when_charge+0x78c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f04f 0100 	mov.w	r1, #0
 800634a:	4618      	mov	r0, r3
 800634c:	f7fa fe98 	bl	8001080 <__aeabi_fcmplt>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <Batt_Protection_when_charge+0x716>
 8006356:	4b1f      	ldr	r3, [pc, #124]	; (80063d4 <Batt_Protection_when_charge+0x78c>)
 8006358:	f04f 0200 	mov.w	r2, #0
 800635c:	601a      	str	r2, [r3, #0]
				    	  if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 800635e:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <Batt_Protection_when_charge+0x75c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f04f 0100 	mov.w	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f7fa fe8a 	bl	8001080 <__aeabi_fcmplt>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d132      	bne.n	80063d8 <Batt_Protection_when_charge+0x790>
}
 8006372:	e037      	b.n	80063e4 <Batt_Protection_when_charge+0x79c>
 8006374:	f3af 8000 	nop.w
 8006378:	9999999a 	.word	0x9999999a
 800637c:	401b9999 	.word	0x401b9999
 8006380:	d2f1a9fc 	.word	0xd2f1a9fc
 8006384:	3f50624d 	.word	0x3f50624d
 8006388:	200010a8 	.word	0x200010a8
 800638c:	2000005c 	.word	0x2000005c
 8006390:	200010dc 	.word	0x200010dc
 8006394:	200010b8 	.word	0x200010b8
 8006398:	3ff00000 	.word	0x3ff00000
 800639c:	402d0000 	.word	0x402d0000
 80063a0:	20001074 	.word	0x20001074
 80063a4:	200010f4 	.word	0x200010f4
 80063a8:	40011000 	.word	0x40011000
 80063ac:	41700000 	.word	0x41700000
 80063b0:	20000bd4 	.word	0x20000bd4
 80063b4:	10624dd3 	.word	0x10624dd3
 80063b8:	41200000 	.word	0x41200000
 80063bc:	51eb851f 	.word	0x51eb851f
 80063c0:	2000108c 	.word	0x2000108c
 80063c4:	20000074 	.word	0x20000074
 80063c8:	200014f5 	.word	0x200014f5
 80063cc:	200014f4 	.word	0x200014f4
 80063d0:	20001078 	.word	0x20001078
 80063d4:	200010c4 	.word	0x200010c4
				    	  if(T_I_Over_trip_cycle<0) T_I_Over_trip_cycle=0;
 80063d8:	4b03      	ldr	r3, [pc, #12]	; (80063e8 <Batt_Protection_when_charge+0x7a0>)
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
}
 80063e0:	e000      	b.n	80063e4 <Batt_Protection_when_charge+0x79c>
	    		  		if(flag_trip_overcurrentcharge==OFF)
 80063e2:	bf00      	nop
}
 80063e4:	bf00      	nop
 80063e6:	bdb0      	pop	{r4, r5, r7, pc}
 80063e8:	200010f4 	.word	0x200010f4

080063ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80063f4:	4b11      	ldr	r3, [pc, #68]	; (800643c <_sbrk+0x50>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d102      	bne.n	8006402 <_sbrk+0x16>
		heap_end = &end;
 80063fc:	4b0f      	ldr	r3, [pc, #60]	; (800643c <_sbrk+0x50>)
 80063fe:	4a10      	ldr	r2, [pc, #64]	; (8006440 <_sbrk+0x54>)
 8006400:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006402:	4b0e      	ldr	r3, [pc, #56]	; (800643c <_sbrk+0x50>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006408:	4b0c      	ldr	r3, [pc, #48]	; (800643c <_sbrk+0x50>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4413      	add	r3, r2
 8006410:	466a      	mov	r2, sp
 8006412:	4293      	cmp	r3, r2
 8006414:	d907      	bls.n	8006426 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006416:	f004 f95b 	bl	800a6d0 <__errno>
 800641a:	4602      	mov	r2, r0
 800641c:	230c      	movs	r3, #12
 800641e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006420:	f04f 33ff 	mov.w	r3, #4294967295
 8006424:	e006      	b.n	8006434 <_sbrk+0x48>
	}

	heap_end += incr;
 8006426:	4b05      	ldr	r3, [pc, #20]	; (800643c <_sbrk+0x50>)
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4413      	add	r3, r2
 800642e:	4a03      	ldr	r2, [pc, #12]	; (800643c <_sbrk+0x50>)
 8006430:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006432:	68fb      	ldr	r3, [r7, #12]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	200006a0 	.word	0x200006a0
 8006440:	20001608 	.word	0x20001608

08006444 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006448:	4b15      	ldr	r3, [pc, #84]	; (80064a0 <SystemInit+0x5c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a14      	ldr	r2, [pc, #80]	; (80064a0 <SystemInit+0x5c>)
 800644e:	f043 0301 	orr.w	r3, r3, #1
 8006452:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006454:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <SystemInit+0x5c>)
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	4911      	ldr	r1, [pc, #68]	; (80064a0 <SystemInit+0x5c>)
 800645a:	4b12      	ldr	r3, [pc, #72]	; (80064a4 <SystemInit+0x60>)
 800645c:	4013      	ands	r3, r2
 800645e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006460:	4b0f      	ldr	r3, [pc, #60]	; (80064a0 <SystemInit+0x5c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a0e      	ldr	r2, [pc, #56]	; (80064a0 <SystemInit+0x5c>)
 8006466:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800646a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800646e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <SystemInit+0x5c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a0a      	ldr	r2, [pc, #40]	; (80064a0 <SystemInit+0x5c>)
 8006476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800647a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800647c:	4b08      	ldr	r3, [pc, #32]	; (80064a0 <SystemInit+0x5c>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	4a07      	ldr	r2, [pc, #28]	; (80064a0 <SystemInit+0x5c>)
 8006482:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006486:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006488:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <SystemInit+0x5c>)
 800648a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800648e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006490:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <SystemInit+0x64>)
 8006492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006496:	609a      	str	r2, [r3, #8]
#endif 
}
 8006498:	bf00      	nop
 800649a:	46bd      	mov	sp, r7
 800649c:	bc80      	pop	{r7}
 800649e:	4770      	bx	lr
 80064a0:	40021000 	.word	0x40021000
 80064a4:	f8ff0000 	.word	0xf8ff0000
 80064a8:	e000ed00 	.word	0xe000ed00

080064ac <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80064b2:	f107 0308 	add.w	r3, r7, #8
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	605a      	str	r2, [r3, #4]
 80064bc:	609a      	str	r2, [r3, #8]
 80064be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064c0:	463b      	mov	r3, r7
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80064c8:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <MX_TIM2_Init+0x94>)
 80064ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80064ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80064d0:	4b1b      	ldr	r3, [pc, #108]	; (8006540 <MX_TIM2_Init+0x94>)
 80064d2:	223f      	movs	r2, #63	; 0x3f
 80064d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064d6:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <MX_TIM2_Init+0x94>)
 80064d8:	2200      	movs	r2, #0
 80064da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80064dc:	4b18      	ldr	r3, [pc, #96]	; (8006540 <MX_TIM2_Init+0x94>)
 80064de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80064e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064e4:	4b16      	ldr	r3, [pc, #88]	; (8006540 <MX_TIM2_Init+0x94>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064ea:	4b15      	ldr	r3, [pc, #84]	; (8006540 <MX_TIM2_Init+0x94>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80064f0:	4813      	ldr	r0, [pc, #76]	; (8006540 <MX_TIM2_Init+0x94>)
 80064f2:	f003 fc3c 	bl	8009d6e <HAL_TIM_Base_Init>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80064fc:	f7fc fcb8 	bl	8002e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006506:	f107 0308 	add.w	r3, r7, #8
 800650a:	4619      	mov	r1, r3
 800650c:	480c      	ldr	r0, [pc, #48]	; (8006540 <MX_TIM2_Init+0x94>)
 800650e:	f003 fd84 	bl	800a01a <HAL_TIM_ConfigClockSource>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8006518:	f7fc fcaa 	bl	8002e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800651c:	2300      	movs	r3, #0
 800651e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006520:	2300      	movs	r3, #0
 8006522:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006524:	463b      	mov	r3, r7
 8006526:	4619      	mov	r1, r3
 8006528:	4805      	ldr	r0, [pc, #20]	; (8006540 <MX_TIM2_Init+0x94>)
 800652a:	f003 ff53 	bl	800a3d4 <HAL_TIMEx_MasterConfigSynchronization>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8006534:	f7fc fc9c 	bl	8002e70 <Error_Handler>
  }

}
 8006538:	bf00      	nop
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20001540 	.word	0x20001540

08006544 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800654a:	f107 0308 	add.w	r3, r7, #8
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	605a      	str	r2, [r3, #4]
 8006554:	609a      	str	r2, [r3, #8]
 8006556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006558:	463b      	mov	r3, r7
 800655a:	2200      	movs	r2, #0
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8006560:	4b1d      	ldr	r3, [pc, #116]	; (80065d8 <MX_TIM3_Init+0x94>)
 8006562:	4a1e      	ldr	r2, [pc, #120]	; (80065dc <MX_TIM3_Init+0x98>)
 8006564:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8006566:	4b1c      	ldr	r3, [pc, #112]	; (80065d8 <MX_TIM3_Init+0x94>)
 8006568:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800656c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800656e:	4b1a      	ldr	r3, [pc, #104]	; (80065d8 <MX_TIM3_Init+0x94>)
 8006570:	2200      	movs	r2, #0
 8006572:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8006574:	4b18      	ldr	r3, [pc, #96]	; (80065d8 <MX_TIM3_Init+0x94>)
 8006576:	2263      	movs	r2, #99	; 0x63
 8006578:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800657a:	4b17      	ldr	r3, [pc, #92]	; (80065d8 <MX_TIM3_Init+0x94>)
 800657c:	2200      	movs	r2, #0
 800657e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006580:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <MX_TIM3_Init+0x94>)
 8006582:	2200      	movs	r2, #0
 8006584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006586:	4814      	ldr	r0, [pc, #80]	; (80065d8 <MX_TIM3_Init+0x94>)
 8006588:	f003 fbf1 	bl	8009d6e <HAL_TIM_Base_Init>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8006592:	f7fc fc6d 	bl	8002e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800659a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800659c:	f107 0308 	add.w	r3, r7, #8
 80065a0:	4619      	mov	r1, r3
 80065a2:	480d      	ldr	r0, [pc, #52]	; (80065d8 <MX_TIM3_Init+0x94>)
 80065a4:	f003 fd39 	bl	800a01a <HAL_TIM_ConfigClockSource>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80065ae:	f7fc fc5f 	bl	8002e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065b2:	2300      	movs	r3, #0
 80065b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80065ba:	463b      	mov	r3, r7
 80065bc:	4619      	mov	r1, r3
 80065be:	4806      	ldr	r0, [pc, #24]	; (80065d8 <MX_TIM3_Init+0x94>)
 80065c0:	f003 ff08 	bl	800a3d4 <HAL_TIMEx_MasterConfigSynchronization>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80065ca:	f7fc fc51 	bl	8002e70 <Error_Handler>
  }

}
 80065ce:	bf00      	nop
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20001500 	.word	0x20001500
 80065dc:	40000400 	.word	0x40000400

080065e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f0:	d114      	bne.n	800661c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80065f2:	4b19      	ldr	r3, [pc, #100]	; (8006658 <HAL_TIM_Base_MspInit+0x78>)
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	4a18      	ldr	r2, [pc, #96]	; (8006658 <HAL_TIM_Base_MspInit+0x78>)
 80065f8:	f043 0301 	orr.w	r3, r3, #1
 80065fc:	61d3      	str	r3, [r2, #28]
 80065fe:	4b16      	ldr	r3, [pc, #88]	; (8006658 <HAL_TIM_Base_MspInit+0x78>)
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800660a:	2200      	movs	r2, #0
 800660c:	2102      	movs	r1, #2
 800660e:	201c      	movs	r0, #28
 8006610:	f001 fd01 	bl	8008016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006614:	201c      	movs	r0, #28
 8006616:	f001 fd1a 	bl	800804e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800661a:	e018      	b.n	800664e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a0e      	ldr	r2, [pc, #56]	; (800665c <HAL_TIM_Base_MspInit+0x7c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d113      	bne.n	800664e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006626:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <HAL_TIM_Base_MspInit+0x78>)
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	4a0b      	ldr	r2, [pc, #44]	; (8006658 <HAL_TIM_Base_MspInit+0x78>)
 800662c:	f043 0302 	orr.w	r3, r3, #2
 8006630:	61d3      	str	r3, [r2, #28]
 8006632:	4b09      	ldr	r3, [pc, #36]	; (8006658 <HAL_TIM_Base_MspInit+0x78>)
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	60bb      	str	r3, [r7, #8]
 800663c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800663e:	2200      	movs	r2, #0
 8006640:	2101      	movs	r1, #1
 8006642:	201d      	movs	r0, #29
 8006644:	f001 fce7 	bl	8008016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006648:	201d      	movs	r0, #29
 800664a:	f001 fd00 	bl	800804e <HAL_NVIC_EnableIRQ>
}
 800664e:	bf00      	nop
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	40021000 	.word	0x40021000
 800665c:	40000400 	.word	0x40000400

08006660 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006664:	4b11      	ldr	r3, [pc, #68]	; (80066ac <MX_USART1_UART_Init+0x4c>)
 8006666:	4a12      	ldr	r2, [pc, #72]	; (80066b0 <MX_USART1_UART_Init+0x50>)
 8006668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800666a:	4b10      	ldr	r3, [pc, #64]	; (80066ac <MX_USART1_UART_Init+0x4c>)
 800666c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006672:	4b0e      	ldr	r3, [pc, #56]	; (80066ac <MX_USART1_UART_Init+0x4c>)
 8006674:	2200      	movs	r2, #0
 8006676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006678:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <MX_USART1_UART_Init+0x4c>)
 800667a:	2200      	movs	r2, #0
 800667c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800667e:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <MX_USART1_UART_Init+0x4c>)
 8006680:	2200      	movs	r2, #0
 8006682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006684:	4b09      	ldr	r3, [pc, #36]	; (80066ac <MX_USART1_UART_Init+0x4c>)
 8006686:	220c      	movs	r2, #12
 8006688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800668a:	4b08      	ldr	r3, [pc, #32]	; (80066ac <MX_USART1_UART_Init+0x4c>)
 800668c:	2200      	movs	r2, #0
 800668e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006690:	4b06      	ldr	r3, [pc, #24]	; (80066ac <MX_USART1_UART_Init+0x4c>)
 8006692:	2200      	movs	r2, #0
 8006694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006696:	4805      	ldr	r0, [pc, #20]	; (80066ac <MX_USART1_UART_Init+0x4c>)
 8006698:	f003 fef2 	bl	800a480 <HAL_UART_Init>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80066a2:	f7fc fbe5 	bl	8002e70 <Error_Handler>
  }

}
 80066a6:	bf00      	nop
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	200015c0 	.word	0x200015c0
 80066b0:	40013800 	.word	0x40013800

080066b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80066b8:	4b11      	ldr	r3, [pc, #68]	; (8006700 <MX_USART3_UART_Init+0x4c>)
 80066ba:	4a12      	ldr	r2, [pc, #72]	; (8006704 <MX_USART3_UART_Init+0x50>)
 80066bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80066be:	4b10      	ldr	r3, [pc, #64]	; (8006700 <MX_USART3_UART_Init+0x4c>)
 80066c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80066c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80066c6:	4b0e      	ldr	r3, [pc, #56]	; (8006700 <MX_USART3_UART_Init+0x4c>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80066cc:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <MX_USART3_UART_Init+0x4c>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80066d2:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <MX_USART3_UART_Init+0x4c>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80066d8:	4b09      	ldr	r3, [pc, #36]	; (8006700 <MX_USART3_UART_Init+0x4c>)
 80066da:	220c      	movs	r2, #12
 80066dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066de:	4b08      	ldr	r3, [pc, #32]	; (8006700 <MX_USART3_UART_Init+0x4c>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80066e4:	4b06      	ldr	r3, [pc, #24]	; (8006700 <MX_USART3_UART_Init+0x4c>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80066ea:	4805      	ldr	r0, [pc, #20]	; (8006700 <MX_USART3_UART_Init+0x4c>)
 80066ec:	f003 fec8 	bl	800a480 <HAL_UART_Init>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80066f6:	f7fc fbbb 	bl	8002e70 <Error_Handler>
  }

}
 80066fa:	bf00      	nop
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20001580 	.word	0x20001580
 8006704:	40004800 	.word	0x40004800

08006708 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08c      	sub	sp, #48	; 0x30
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006710:	f107 031c 	add.w	r3, r7, #28
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	605a      	str	r2, [r3, #4]
 800671a:	609a      	str	r2, [r3, #8]
 800671c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a41      	ldr	r2, [pc, #260]	; (8006828 <HAL_UART_MspInit+0x120>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d132      	bne.n	800678e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006728:	4b40      	ldr	r3, [pc, #256]	; (800682c <HAL_UART_MspInit+0x124>)
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	4a3f      	ldr	r2, [pc, #252]	; (800682c <HAL_UART_MspInit+0x124>)
 800672e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006732:	6193      	str	r3, [r2, #24]
 8006734:	4b3d      	ldr	r3, [pc, #244]	; (800682c <HAL_UART_MspInit+0x124>)
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006740:	4b3a      	ldr	r3, [pc, #232]	; (800682c <HAL_UART_MspInit+0x124>)
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	4a39      	ldr	r2, [pc, #228]	; (800682c <HAL_UART_MspInit+0x124>)
 8006746:	f043 0304 	orr.w	r3, r3, #4
 800674a:	6193      	str	r3, [r2, #24]
 800674c:	4b37      	ldr	r3, [pc, #220]	; (800682c <HAL_UART_MspInit+0x124>)
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800675c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800675e:	2302      	movs	r3, #2
 8006760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006762:	2303      	movs	r3, #3
 8006764:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006766:	f107 031c 	add.w	r3, r7, #28
 800676a:	4619      	mov	r1, r3
 800676c:	4830      	ldr	r0, [pc, #192]	; (8006830 <HAL_UART_MspInit+0x128>)
 800676e:	f001 fe9d 	bl	80084ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006778:	2300      	movs	r3, #0
 800677a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800677c:	2300      	movs	r3, #0
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006780:	f107 031c 	add.w	r3, r7, #28
 8006784:	4619      	mov	r1, r3
 8006786:	482a      	ldr	r0, [pc, #168]	; (8006830 <HAL_UART_MspInit+0x128>)
 8006788:	f001 fe90 	bl	80084ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800678c:	e048      	b.n	8006820 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a28      	ldr	r2, [pc, #160]	; (8006834 <HAL_UART_MspInit+0x12c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d143      	bne.n	8006820 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006798:	4b24      	ldr	r3, [pc, #144]	; (800682c <HAL_UART_MspInit+0x124>)
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	4a23      	ldr	r2, [pc, #140]	; (800682c <HAL_UART_MspInit+0x124>)
 800679e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067a2:	61d3      	str	r3, [r2, #28]
 80067a4:	4b21      	ldr	r3, [pc, #132]	; (800682c <HAL_UART_MspInit+0x124>)
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067b0:	4b1e      	ldr	r3, [pc, #120]	; (800682c <HAL_UART_MspInit+0x124>)
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	4a1d      	ldr	r2, [pc, #116]	; (800682c <HAL_UART_MspInit+0x124>)
 80067b6:	f043 0310 	orr.w	r3, r3, #16
 80067ba:	6193      	str	r3, [r2, #24]
 80067bc:	4b1b      	ldr	r3, [pc, #108]	; (800682c <HAL_UART_MspInit+0x124>)
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	f003 0310 	and.w	r3, r3, #16
 80067c4:	60fb      	str	r3, [r7, #12]
 80067c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80067c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067ce:	2302      	movs	r3, #2
 80067d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80067d2:	2303      	movs	r3, #3
 80067d4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067d6:	f107 031c 	add.w	r3, r7, #28
 80067da:	4619      	mov	r1, r3
 80067dc:	4816      	ldr	r0, [pc, #88]	; (8006838 <HAL_UART_MspInit+0x130>)
 80067de:	f001 fe65 	bl	80084ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80067e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80067e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067e8:	2300      	movs	r3, #0
 80067ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ec:	2300      	movs	r3, #0
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067f0:	f107 031c 	add.w	r3, r7, #28
 80067f4:	4619      	mov	r1, r3
 80067f6:	4810      	ldr	r0, [pc, #64]	; (8006838 <HAL_UART_MspInit+0x130>)
 80067f8:	f001 fe58 	bl	80084ac <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80067fc:	4b0f      	ldr	r3, [pc, #60]	; (800683c <HAL_UART_MspInit+0x134>)
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006804:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006814:	f043 0310 	orr.w	r3, r3, #16
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800681a:	4a08      	ldr	r2, [pc, #32]	; (800683c <HAL_UART_MspInit+0x134>)
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	6053      	str	r3, [r2, #4]
}
 8006820:	bf00      	nop
 8006822:	3730      	adds	r7, #48	; 0x30
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40013800 	.word	0x40013800
 800682c:	40021000 	.word	0x40021000
 8006830:	40010800 	.word	0x40010800
 8006834:	40004800 	.word	0x40004800
 8006838:	40011000 	.word	0x40011000
 800683c:	40010000 	.word	0x40010000

08006840 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006840:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006842:	e003      	b.n	800684c <LoopCopyDataInit>

08006844 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006844:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006846:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006848:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800684a:	3104      	adds	r1, #4

0800684c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800684c:	480a      	ldr	r0, [pc, #40]	; (8006878 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800684e:	4b0b      	ldr	r3, [pc, #44]	; (800687c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006850:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006852:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006854:	d3f6      	bcc.n	8006844 <CopyDataInit>
  ldr r2, =_sbss
 8006856:	4a0a      	ldr	r2, [pc, #40]	; (8006880 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006858:	e002      	b.n	8006860 <LoopFillZerobss>

0800685a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800685a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800685c:	f842 3b04 	str.w	r3, [r2], #4

08006860 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006860:	4b08      	ldr	r3, [pc, #32]	; (8006884 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006862:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006864:	d3f9      	bcc.n	800685a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006866:	f7ff fded 	bl	8006444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800686a:	f003 ff37 	bl	800a6dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800686e:	f7fb fdf7 	bl	8002460 <main>
  bx lr
 8006872:	4770      	bx	lr
  ldr r3, =_sidata
 8006874:	0800da3c 	.word	0x0800da3c
  ldr r0, =_sdata
 8006878:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800687c:	20000264 	.word	0x20000264
  ldr r2, =_sbss
 8006880:	20000264 	.word	0x20000264
  ldr r3, = _ebss
 8006884:	20001608 	.word	0x20001608

08006888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006888:	e7fe      	b.n	8006888 <ADC1_2_IRQHandler>
	...

0800688c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006890:	4b08      	ldr	r3, [pc, #32]	; (80068b4 <HAL_Init+0x28>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a07      	ldr	r2, [pc, #28]	; (80068b4 <HAL_Init+0x28>)
 8006896:	f043 0310 	orr.w	r3, r3, #16
 800689a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800689c:	2003      	movs	r0, #3
 800689e:	f001 fbaf 	bl	8008000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80068a2:	2000      	movs	r0, #0
 80068a4:	f000 f808 	bl	80068b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80068a8:	f7fd ff24 	bl	80046f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	40022000 	.word	0x40022000

080068b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80068c0:	4b12      	ldr	r3, [pc, #72]	; (800690c <HAL_InitTick+0x54>)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	4b12      	ldr	r3, [pc, #72]	; (8006910 <HAL_InitTick+0x58>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	4619      	mov	r1, r3
 80068ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80068d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 fbc7 	bl	800806a <HAL_SYSTICK_Config>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e00e      	b.n	8006904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b0f      	cmp	r3, #15
 80068ea:	d80a      	bhi.n	8006902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068ec:	2200      	movs	r2, #0
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295
 80068f4:	f001 fb8f 	bl	8008016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80068f8:	4a06      	ldr	r2, [pc, #24]	; (8006914 <HAL_InitTick+0x5c>)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	e000      	b.n	8006904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20000084 	.word	0x20000084
 8006910:	2000008c 	.word	0x2000008c
 8006914:	20000088 	.word	0x20000088

08006918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800691c:	4b05      	ldr	r3, [pc, #20]	; (8006934 <HAL_IncTick+0x1c>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	461a      	mov	r2, r3
 8006922:	4b05      	ldr	r3, [pc, #20]	; (8006938 <HAL_IncTick+0x20>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4413      	add	r3, r2
 8006928:	4a03      	ldr	r2, [pc, #12]	; (8006938 <HAL_IncTick+0x20>)
 800692a:	6013      	str	r3, [r2, #0]
}
 800692c:	bf00      	nop
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr
 8006934:	2000008c 	.word	0x2000008c
 8006938:	20001600 	.word	0x20001600

0800693c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
  return uwTick;
 8006940:	4b02      	ldr	r3, [pc, #8]	; (800694c <HAL_GetTick+0x10>)
 8006942:	681b      	ldr	r3, [r3, #0]
}
 8006944:	4618      	mov	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	bc80      	pop	{r7}
 800694a:	4770      	bx	lr
 800694c:	20001600 	.word	0x20001600

08006950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006958:	f7ff fff0 	bl	800693c <HAL_GetTick>
 800695c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d005      	beq.n	8006976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800696a:	4b09      	ldr	r3, [pc, #36]	; (8006990 <HAL_Delay+0x40>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006976:	bf00      	nop
 8006978:	f7ff ffe0 	bl	800693c <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	429a      	cmp	r2, r3
 8006986:	d8f7      	bhi.n	8006978 <HAL_Delay+0x28>
  {
  }
}
 8006988:	bf00      	nop
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	2000008c 	.word	0x2000008c

08006994 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e0be      	b.n	8006b34 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d109      	bne.n	80069d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7fb faac 	bl	8001f30 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 faf7 	bl	8006fcc <ADC_ConversionStop_Disable>
 80069de:	4603      	mov	r3, r0
 80069e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e6:	f003 0310 	and.w	r3, r3, #16
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f040 8099 	bne.w	8006b22 <HAL_ADC_Init+0x18e>
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f040 8095 	bne.w	8006b22 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a00:	f023 0302 	bic.w	r3, r3, #2
 8006a04:	f043 0202 	orr.w	r2, r3, #2
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006a14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	7b1b      	ldrb	r3, [r3, #12]
 8006a1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006a1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a2c:	d003      	beq.n	8006a36 <HAL_ADC_Init+0xa2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d102      	bne.n	8006a3c <HAL_ADC_Init+0xa8>
 8006a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a3a:	e000      	b.n	8006a3e <HAL_ADC_Init+0xaa>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	7d1b      	ldrb	r3, [r3, #20]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d119      	bne.n	8006a80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	7b1b      	ldrb	r3, [r3, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d109      	bne.n	8006a68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	035a      	lsls	r2, r3, #13
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a64:	613b      	str	r3, [r7, #16]
 8006a66:	e00b      	b.n	8006a80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6c:	f043 0220 	orr.w	r2, r3, #32
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a78:	f043 0201 	orr.w	r2, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	4b28      	ldr	r3, [pc, #160]	; (8006b3c <HAL_ADC_Init+0x1a8>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	6812      	ldr	r2, [r2, #0]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab0:	d003      	beq.n	8006aba <HAL_ADC_Init+0x126>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d104      	bne.n	8006ac4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	051b      	lsls	r3, r3, #20
 8006ac2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	4b18      	ldr	r3, [pc, #96]	; (8006b40 <HAL_ADC_Init+0x1ac>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d10b      	bne.n	8006b00 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	f043 0201 	orr.w	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006afe:	e018      	b.n	8006b32 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	f023 0312 	bic.w	r3, r3, #18
 8006b08:	f043 0210 	orr.w	r2, r3, #16
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	f043 0201 	orr.w	r2, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006b20:	e007      	b.n	8006b32 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b26:	f043 0210 	orr.w	r2, r3, #16
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	ffe1f7fd 	.word	0xffe1f7fd
 8006b40:	ff1f0efe 	.word	0xff1f0efe

08006b44 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a64      	ldr	r2, [pc, #400]	; (8006cec <HAL_ADC_Start_DMA+0x1a8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d004      	beq.n	8006b68 <HAL_ADC_Start_DMA+0x24>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a63      	ldr	r2, [pc, #396]	; (8006cf0 <HAL_ADC_Start_DMA+0x1ac>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d106      	bne.n	8006b76 <HAL_ADC_Start_DMA+0x32>
 8006b68:	4b60      	ldr	r3, [pc, #384]	; (8006cec <HAL_ADC_Start_DMA+0x1a8>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f040 80b3 	bne.w	8006cdc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d101      	bne.n	8006b84 <HAL_ADC_Start_DMA+0x40>
 8006b80:	2302      	movs	r3, #2
 8006b82:	e0ae      	b.n	8006ce2 <HAL_ADC_Start_DMA+0x19e>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 f9cb 	bl	8006f28 <ADC_Enable>
 8006b92:	4603      	mov	r3, r0
 8006b94:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f040 809a 	bne.w	8006cd2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ba6:	f023 0301 	bic.w	r3, r3, #1
 8006baa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a4e      	ldr	r2, [pc, #312]	; (8006cf0 <HAL_ADC_Start_DMA+0x1ac>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d105      	bne.n	8006bc8 <HAL_ADC_Start_DMA+0x84>
 8006bbc:	4b4b      	ldr	r3, [pc, #300]	; (8006cec <HAL_ADC_Start_DMA+0x1a8>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d115      	bne.n	8006bf4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bcc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d026      	beq.n	8006c30 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006bea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006bf2:	e01d      	b.n	8006c30 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a39      	ldr	r2, [pc, #228]	; (8006cec <HAL_ADC_Start_DMA+0x1a8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d004      	beq.n	8006c14 <HAL_ADC_Start_DMA+0xd0>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a38      	ldr	r2, [pc, #224]	; (8006cf0 <HAL_ADC_Start_DMA+0x1ac>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d10d      	bne.n	8006c30 <HAL_ADC_Start_DMA+0xec>
 8006c14:	4b35      	ldr	r3, [pc, #212]	; (8006cec <HAL_ADC_Start_DMA+0x1a8>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d007      	beq.n	8006c30 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d006      	beq.n	8006c4a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	f023 0206 	bic.w	r2, r3, #6
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c48:	e002      	b.n	8006c50 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	4a25      	ldr	r2, [pc, #148]	; (8006cf4 <HAL_ADC_Start_DMA+0x1b0>)
 8006c5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	4a24      	ldr	r2, [pc, #144]	; (8006cf8 <HAL_ADC_Start_DMA+0x1b4>)
 8006c66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	4a23      	ldr	r2, [pc, #140]	; (8006cfc <HAL_ADC_Start_DMA+0x1b8>)
 8006c6e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f06f 0202 	mvn.w	r2, #2
 8006c78:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c88:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a18      	ldr	r0, [r3, #32]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	334c      	adds	r3, #76	; 0x4c
 8006c94:	4619      	mov	r1, r3
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f001 fa4d 	bl	8008138 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006ca8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006cac:	d108      	bne.n	8006cc0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006cbc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8006cbe:	e00f      	b.n	8006ce0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006cce:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8006cd0:	e006      	b.n	8006ce0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8006cda:	e001      	b.n	8006ce0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	40012400 	.word	0x40012400
 8006cf0:	40012800 	.word	0x40012800
 8006cf4:	08007041 	.word	0x08007041
 8006cf8:	080070bd 	.word	0x080070bd
 8006cfc:	080070d9 	.word	0x080070d9

08006d00 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr

08006d12 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr

08006d24 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr
	...

08006d38 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d101      	bne.n	8006d58 <HAL_ADC_ConfigChannel+0x20>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e0dc      	b.n	8006f12 <HAL_ADC_ConfigChannel+0x1da>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	2b06      	cmp	r3, #6
 8006d66:	d81c      	bhi.n	8006da2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	3b05      	subs	r3, #5
 8006d7a:	221f      	movs	r2, #31
 8006d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d80:	43db      	mvns	r3, r3
 8006d82:	4019      	ands	r1, r3
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	3b05      	subs	r3, #5
 8006d94:	fa00 f203 	lsl.w	r2, r0, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	635a      	str	r2, [r3, #52]	; 0x34
 8006da0:	e03c      	b.n	8006e1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2b0c      	cmp	r3, #12
 8006da8:	d81c      	bhi.n	8006de4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	4613      	mov	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	3b23      	subs	r3, #35	; 0x23
 8006dbc:	221f      	movs	r2, #31
 8006dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc2:	43db      	mvns	r3, r3
 8006dc4:	4019      	ands	r1, r3
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	3b23      	subs	r3, #35	; 0x23
 8006dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	631a      	str	r2, [r3, #48]	; 0x30
 8006de2:	e01b      	b.n	8006e1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	4613      	mov	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	3b41      	subs	r3, #65	; 0x41
 8006df6:	221f      	movs	r2, #31
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	43db      	mvns	r3, r3
 8006dfe:	4019      	ands	r1, r3
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	3b41      	subs	r3, #65	; 0x41
 8006e10:	fa00 f203 	lsl.w	r2, r0, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b09      	cmp	r3, #9
 8006e22:	d91c      	bls.n	8006e5e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68d9      	ldr	r1, [r3, #12]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	4413      	add	r3, r2
 8006e34:	3b1e      	subs	r3, #30
 8006e36:	2207      	movs	r2, #7
 8006e38:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3c:	43db      	mvns	r3, r3
 8006e3e:	4019      	ands	r1, r3
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	6898      	ldr	r0, [r3, #8]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	4413      	add	r3, r2
 8006e4e:	3b1e      	subs	r3, #30
 8006e50:	fa00 f203 	lsl.w	r2, r0, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	60da      	str	r2, [r3, #12]
 8006e5c:	e019      	b.n	8006e92 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6919      	ldr	r1, [r3, #16]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	4413      	add	r3, r2
 8006e6e:	2207      	movs	r2, #7
 8006e70:	fa02 f303 	lsl.w	r3, r2, r3
 8006e74:	43db      	mvns	r3, r3
 8006e76:	4019      	ands	r1, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	6898      	ldr	r0, [r3, #8]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	4613      	mov	r3, r2
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	4413      	add	r3, r2
 8006e86:	fa00 f203 	lsl.w	r2, r0, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b10      	cmp	r3, #16
 8006e98:	d003      	beq.n	8006ea2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006e9e:	2b11      	cmp	r3, #17
 8006ea0:	d132      	bne.n	8006f08 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a1d      	ldr	r2, [pc, #116]	; (8006f1c <HAL_ADC_ConfigChannel+0x1e4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d125      	bne.n	8006ef8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d126      	bne.n	8006f08 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006ec8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b10      	cmp	r3, #16
 8006ed0:	d11a      	bne.n	8006f08 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006ed2:	4b13      	ldr	r3, [pc, #76]	; (8006f20 <HAL_ADC_ConfigChannel+0x1e8>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a13      	ldr	r2, [pc, #76]	; (8006f24 <HAL_ADC_ConfigChannel+0x1ec>)
 8006ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8006edc:	0c9a      	lsrs	r2, r3, #18
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006ee8:	e002      	b.n	8006ef0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1f9      	bne.n	8006eea <HAL_ADC_ConfigChannel+0x1b2>
 8006ef6:	e007      	b.n	8006f08 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efc:	f043 0220 	orr.w	r2, r3, #32
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr
 8006f1c:	40012400 	.word	0x40012400
 8006f20:	20000084 	.word	0x20000084
 8006f24:	431bde83 	.word	0x431bde83

08006f28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d039      	beq.n	8006fba <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0201 	orr.w	r2, r2, #1
 8006f54:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006f56:	4b1b      	ldr	r3, [pc, #108]	; (8006fc4 <ADC_Enable+0x9c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1b      	ldr	r2, [pc, #108]	; (8006fc8 <ADC_Enable+0xa0>)
 8006f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f60:	0c9b      	lsrs	r3, r3, #18
 8006f62:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006f64:	e002      	b.n	8006f6c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f9      	bne.n	8006f66 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006f72:	f7ff fce3 	bl	800693c <HAL_GetTick>
 8006f76:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006f78:	e018      	b.n	8006fac <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006f7a:	f7ff fcdf 	bl	800693c <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d911      	bls.n	8006fac <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8c:	f043 0210 	orr.w	r2, r3, #16
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	f043 0201 	orr.w	r2, r3, #1
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e007      	b.n	8006fbc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d1df      	bne.n	8006f7a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	20000084 	.word	0x20000084
 8006fc8:	431bde83 	.word	0x431bde83

08006fcc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d127      	bne.n	8007036 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0201 	bic.w	r2, r2, #1
 8006ff4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006ff6:	f7ff fca1 	bl	800693c <HAL_GetTick>
 8006ffa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006ffc:	e014      	b.n	8007028 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006ffe:	f7ff fc9d 	bl	800693c <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d90d      	bls.n	8007028 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007010:	f043 0210 	orr.w	r2, r3, #16
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	f043 0201 	orr.w	r2, r3, #1
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e007      	b.n	8007038 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b01      	cmp	r3, #1
 8007034:	d0e3      	beq.n	8006ffe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007052:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007056:	2b00      	cmp	r3, #0
 8007058:	d127      	bne.n	80070aa <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007070:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007074:	d115      	bne.n	80070a2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800707a:	2b00      	cmp	r3, #0
 800707c:	d111      	bne.n	80070a2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007082:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d105      	bne.n	80070a2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709a:	f043 0201 	orr.w	r2, r3, #1
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f7ff fe2c 	bl	8006d00 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80070a8:	e004      	b.n	80070b4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	4798      	blx	r3
}
 80070b4:	bf00      	nop
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f7ff fe21 	bl	8006d12 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80070d0:	bf00      	nop
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f6:	f043 0204 	orr.w	r2, r3, #4
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7ff fe10 	bl	8006d24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007104:	bf00      	nop
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e0ed      	b.n	80072fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d102      	bne.n	8007130 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7fa ff9e 	bl	800206c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0202 	bic.w	r2, r2, #2
 800713e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007140:	f7ff fbfc 	bl	800693c <HAL_GetTick>
 8007144:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007146:	e012      	b.n	800716e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007148:	f7ff fbf8 	bl	800693c <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b0a      	cmp	r3, #10
 8007154:	d90b      	bls.n	800716e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2205      	movs	r2, #5
 8007166:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e0c5      	b.n	80072fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e5      	bne.n	8007148 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0201 	orr.w	r2, r2, #1
 800718a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800718c:	f7ff fbd6 	bl	800693c <HAL_GetTick>
 8007190:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007192:	e012      	b.n	80071ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007194:	f7ff fbd2 	bl	800693c <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b0a      	cmp	r3, #10
 80071a0:	d90b      	bls.n	80071ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2205      	movs	r2, #5
 80071b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e09f      	b.n	80072fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0e5      	beq.n	8007194 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	7e1b      	ldrb	r3, [r3, #24]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d108      	bne.n	80071e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	e007      	b.n	80071f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	7e5b      	ldrb	r3, [r3, #25]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d108      	bne.n	800720c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	e007      	b.n	800721c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800721a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	7e9b      	ldrb	r3, [r3, #26]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d108      	bne.n	8007236 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0220 	orr.w	r2, r2, #32
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	e007      	b.n	8007246 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 0220 	bic.w	r2, r2, #32
 8007244:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	7edb      	ldrb	r3, [r3, #27]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d108      	bne.n	8007260 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0210 	bic.w	r2, r2, #16
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	e007      	b.n	8007270 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0210 	orr.w	r2, r2, #16
 800726e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7f1b      	ldrb	r3, [r3, #28]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d108      	bne.n	800728a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f042 0208 	orr.w	r2, r2, #8
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	e007      	b.n	800729a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0208 	bic.w	r2, r2, #8
 8007298:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	7f5b      	ldrb	r3, [r3, #29]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d108      	bne.n	80072b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0204 	orr.w	r2, r2, #4
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	e007      	b.n	80072c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0204 	bic.w	r2, r2, #4
 80072c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	431a      	orrs	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	431a      	orrs	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	ea42 0103 	orr.w	r1, r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	1e5a      	subs	r2, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007302:	b480      	push	{r7}
 8007304:	b087      	sub	sp, #28
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007318:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800731a:	7cfb      	ldrb	r3, [r7, #19]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d003      	beq.n	8007328 <HAL_CAN_ConfigFilter+0x26>
 8007320:	7cfb      	ldrb	r3, [r7, #19]
 8007322:	2b02      	cmp	r3, #2
 8007324:	f040 80aa 	bne.w	800747c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800732e:	f043 0201 	orr.w	r2, r3, #1
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	f003 031f 	and.w	r3, r3, #31
 8007340:	2201      	movs	r2, #1
 8007342:	fa02 f303 	lsl.w	r3, r2, r3
 8007346:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	43db      	mvns	r3, r3
 8007352:	401a      	ands	r2, r3
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d123      	bne.n	80073aa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	43db      	mvns	r3, r3
 800736c:	401a      	ands	r2, r3
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007384:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	3248      	adds	r2, #72	; 0x48
 800738a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800739e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80073a0:	6979      	ldr	r1, [r7, #20]
 80073a2:	3348      	adds	r3, #72	; 0x48
 80073a4:	00db      	lsls	r3, r3, #3
 80073a6:	440b      	add	r3, r1
 80073a8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d122      	bne.n	80073f8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80073d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	3248      	adds	r2, #72	; 0x48
 80073d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80073ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80073ee:	6979      	ldr	r1, [r7, #20]
 80073f0:	3348      	adds	r3, #72	; 0x48
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	440b      	add	r3, r1
 80073f6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d109      	bne.n	8007414 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	43db      	mvns	r3, r3
 800740a:	401a      	ands	r2, r3
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007412:	e007      	b.n	8007424 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	431a      	orrs	r2, r3
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d109      	bne.n	8007440 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	43db      	mvns	r3, r3
 8007436:	401a      	ands	r2, r3
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800743e:	e007      	b.n	8007450 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	431a      	orrs	r2, r3
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	6a1b      	ldr	r3, [r3, #32]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d107      	bne.n	8007468 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	431a      	orrs	r2, r3
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800746e:	f023 0201 	bic.w	r2, r3, #1
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	e006      	b.n	800748a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
  }
}
 800748a:	4618      	mov	r0, r3
 800748c:	371c      	adds	r7, #28
 800748e:	46bd      	mov	sp, r7
 8007490:	bc80      	pop	{r7}
 8007492:	4770      	bx	lr

08007494 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d12e      	bne.n	8007506 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 0201 	bic.w	r2, r2, #1
 80074be:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074c0:	f7ff fa3c 	bl	800693c <HAL_GetTick>
 80074c4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80074c6:	e012      	b.n	80074ee <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80074c8:	f7ff fa38 	bl	800693c <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	2b0a      	cmp	r3, #10
 80074d4:	d90b      	bls.n	80074ee <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2205      	movs	r2, #5
 80074e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e012      	b.n	8007514 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e5      	bne.n	80074c8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	e006      	b.n	8007514 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
  }
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800751c:	b480      	push	{r7}
 800751e:	b089      	sub	sp, #36	; 0x24
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007530:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800753a:	7ffb      	ldrb	r3, [r7, #31]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d003      	beq.n	8007548 <HAL_CAN_AddTxMessage+0x2c>
 8007540:	7ffb      	ldrb	r3, [r7, #31]
 8007542:	2b02      	cmp	r3, #2
 8007544:	f040 80b8 	bne.w	80076b8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007558:	2b00      	cmp	r3, #0
 800755a:	d105      	bne.n	8007568 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 80a0 	beq.w	80076a8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	0e1b      	lsrs	r3, r3, #24
 800756c:	f003 0303 	and.w	r3, r3, #3
 8007570:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b02      	cmp	r3, #2
 8007576:	d907      	bls.n	8007588 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e09e      	b.n	80076c6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007588:	2201      	movs	r2, #1
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	409a      	lsls	r2, r3
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10d      	bne.n	80075b6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80075a4:	68f9      	ldr	r1, [r7, #12]
 80075a6:	6809      	ldr	r1, [r1, #0]
 80075a8:	431a      	orrs	r2, r3
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	3318      	adds	r3, #24
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	440b      	add	r3, r1
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	e00f      	b.n	80075d6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80075c0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80075c6:	68f9      	ldr	r1, [r7, #12]
 80075c8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80075ca:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	3318      	adds	r3, #24
 80075d0:	011b      	lsls	r3, r3, #4
 80075d2:	440b      	add	r3, r1
 80075d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6819      	ldr	r1, [r3, #0]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	691a      	ldr	r2, [r3, #16]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	3318      	adds	r3, #24
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	440b      	add	r3, r1
 80075e6:	3304      	adds	r3, #4
 80075e8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	7d1b      	ldrb	r3, [r3, #20]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d111      	bne.n	8007616 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	3318      	adds	r3, #24
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	4413      	add	r3, r2
 80075fe:	3304      	adds	r3, #4
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	6811      	ldr	r1, [r2, #0]
 8007606:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	3318      	adds	r3, #24
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	440b      	add	r3, r1
 8007612:	3304      	adds	r3, #4
 8007614:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3307      	adds	r3, #7
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	061a      	lsls	r2, r3, #24
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3306      	adds	r3, #6
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	041b      	lsls	r3, r3, #16
 8007626:	431a      	orrs	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3305      	adds	r3, #5
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	021b      	lsls	r3, r3, #8
 8007630:	4313      	orrs	r3, r2
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	3204      	adds	r2, #4
 8007636:	7812      	ldrb	r2, [r2, #0]
 8007638:	4610      	mov	r0, r2
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	6811      	ldr	r1, [r2, #0]
 800763e:	ea43 0200 	orr.w	r2, r3, r0
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	440b      	add	r3, r1
 8007648:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800764c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	3303      	adds	r3, #3
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	061a      	lsls	r2, r3, #24
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	3302      	adds	r3, #2
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	041b      	lsls	r3, r3, #16
 800765e:	431a      	orrs	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3301      	adds	r3, #1
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	021b      	lsls	r3, r3, #8
 8007668:	4313      	orrs	r3, r2
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	7812      	ldrb	r2, [r2, #0]
 800766e:	4610      	mov	r0, r2
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	6811      	ldr	r1, [r2, #0]
 8007674:	ea43 0200 	orr.w	r2, r3, r0
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	011b      	lsls	r3, r3, #4
 800767c:	440b      	add	r3, r1
 800767e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007682:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	3318      	adds	r3, #24
 800768c:	011b      	lsls	r3, r3, #4
 800768e:	4413      	add	r3, r2
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	6811      	ldr	r1, [r2, #0]
 8007696:	f043 0201 	orr.w	r2, r3, #1
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	3318      	adds	r3, #24
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	440b      	add	r3, r1
 80076a2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	e00e      	b.n	80076c6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e006      	b.n	80076c6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
  }
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3724      	adds	r7, #36	; 0x24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bc80      	pop	{r7}
 80076ce:	4770      	bx	lr

080076d0 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076e0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d002      	beq.n	80076ee <HAL_CAN_AbortTxRequest+0x1e>
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d128      	bne.n	8007740 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d007      	beq.n	8007708 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007706:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d007      	beq.n	8007722 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007720:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689a      	ldr	r2, [r3, #8]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800773a:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	e006      	b.n	800774e <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
  }
}
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800776a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800776c:	7afb      	ldrb	r3, [r7, #11]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d002      	beq.n	8007778 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007772:	7afb      	ldrb	r3, [r7, #11]
 8007774:	2b02      	cmp	r3, #2
 8007776:	d11d      	bne.n	80077b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3301      	adds	r3, #1
 800778a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3301      	adds	r3, #1
 800779e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3301      	adds	r3, #1
 80077b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80077b4:	68fb      	ldr	r3, [r7, #12]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr

080077c0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
 80077cc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077d4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d003      	beq.n	80077e4 <HAL_CAN_GetRxMessage+0x24>
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	f040 80f3 	bne.w	80079ca <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10e      	bne.n	8007808 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f003 0303 	and.w	r3, r3, #3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d116      	bne.n	8007826 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e0e7      	b.n	80079d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f003 0303 	and.w	r3, r3, #3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d107      	bne.n	8007826 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e0d8      	b.n	80079d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	331b      	adds	r3, #27
 800782e:	011b      	lsls	r3, r3, #4
 8007830:	4413      	add	r3, r2
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0204 	and.w	r2, r3, #4
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10c      	bne.n	800785e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	331b      	adds	r3, #27
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	4413      	add	r3, r2
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	0d5b      	lsrs	r3, r3, #21
 8007854:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	e00b      	b.n	8007876 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	331b      	adds	r3, #27
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	4413      	add	r3, r2
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	08db      	lsrs	r3, r3, #3
 800786e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	331b      	adds	r3, #27
 800787e:	011b      	lsls	r3, r3, #4
 8007880:	4413      	add	r3, r2
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0202 	and.w	r2, r3, #2
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	331b      	adds	r3, #27
 8007894:	011b      	lsls	r3, r3, #4
 8007896:	4413      	add	r3, r2
 8007898:	3304      	adds	r3, #4
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 020f 	and.w	r2, r3, #15
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	331b      	adds	r3, #27
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	4413      	add	r3, r2
 80078b0:	3304      	adds	r3, #4
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	0a1b      	lsrs	r3, r3, #8
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	331b      	adds	r3, #27
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	4413      	add	r3, r2
 80078c8:	3304      	adds	r3, #4
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	0c1b      	lsrs	r3, r3, #16
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	011b      	lsls	r3, r3, #4
 80078dc:	4413      	add	r3, r2
 80078de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	0a1a      	lsrs	r2, r3, #8
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	3301      	adds	r3, #1
 8007900:	b2d2      	uxtb	r2, r2
 8007902:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	4413      	add	r3, r2
 800790e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	0c1a      	lsrs	r2, r3, #16
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	3302      	adds	r3, #2
 800791a:	b2d2      	uxtb	r2, r2
 800791c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	011b      	lsls	r3, r3, #4
 8007926:	4413      	add	r3, r2
 8007928:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	0e1a      	lsrs	r2, r3, #24
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	3303      	adds	r3, #3
 8007934:	b2d2      	uxtb	r2, r2
 8007936:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	4413      	add	r3, r2
 8007942:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	3304      	adds	r3, #4
 800794c:	b2d2      	uxtb	r2, r2
 800794e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	4413      	add	r3, r2
 800795a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	0a1a      	lsrs	r2, r3, #8
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	3305      	adds	r3, #5
 8007966:	b2d2      	uxtb	r2, r2
 8007968:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	011b      	lsls	r3, r3, #4
 8007972:	4413      	add	r3, r2
 8007974:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	0c1a      	lsrs	r2, r3, #16
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	3306      	adds	r3, #6
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	4413      	add	r3, r2
 800798e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	0e1a      	lsrs	r2, r3, #24
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	3307      	adds	r3, #7
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d108      	bne.n	80079b6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68da      	ldr	r2, [r3, #12]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0220 	orr.w	r2, r2, #32
 80079b2:	60da      	str	r2, [r3, #12]
 80079b4:	e007      	b.n	80079c6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0220 	orr.w	r2, r2, #32
 80079c4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	e006      	b.n	80079d8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
  }
}
 80079d8:	4618      	mov	r0, r3
 80079da:	371c      	adds	r7, #28
 80079dc:	46bd      	mov	sp, r7
 80079de:	bc80      	pop	{r7}
 80079e0:	4770      	bx	lr

080079e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b085      	sub	sp, #20
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d002      	beq.n	8007a00 <HAL_CAN_ActivateNotification+0x1e>
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d109      	bne.n	8007a14 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6959      	ldr	r1, [r3, #20]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	e006      	b.n	8007a22 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
  }
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bc80      	pop	{r7}
 8007a2a:	4770      	bx	lr

08007a2c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08a      	sub	sp, #40	; 0x28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007a34:	2300      	movs	r3, #0
 8007a36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d07c      	beq.n	8007b6c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d023      	beq.n	8007ac4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2201      	movs	r2, #1
 8007a82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f97d 	bl	8007d8e <HAL_CAN_TxMailbox0CompleteCallback>
 8007a94:	e016      	b.n	8007ac4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d004      	beq.n	8007aaa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8007aa8:	e00c      	b.n	8007ac4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	f003 0308 	and.w	r3, r3, #8
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d004      	beq.n	8007abe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007aba:	627b      	str	r3, [r7, #36]	; 0x24
 8007abc:	e002      	b.n	8007ac4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f980 	bl	8007dc4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d024      	beq.n	8007b18 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ad6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f95c 	bl	8007da0 <HAL_CAN_TxMailbox1CompleteCallback>
 8007ae8:	e016      	b.n	8007b18 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d004      	beq.n	8007afe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
 8007afc:	e00c      	b.n	8007b18 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d004      	beq.n	8007b12 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b10:	e002      	b.n	8007b18 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f95f 	bl	8007dd6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d024      	beq.n	8007b6c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007b2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f93b 	bl	8007db2 <HAL_CAN_TxMailbox2CompleteCallback>
 8007b3c:	e016      	b.n	8007b6c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d004      	beq.n	8007b52 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b50:	e00c      	b.n	8007b6c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d004      	beq.n	8007b66 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b62:	627b      	str	r3, [r7, #36]	; 0x24
 8007b64:	e002      	b.n	8007b6c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f93e 	bl	8007de8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	f003 0308 	and.w	r3, r3, #8
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00c      	beq.n	8007b90 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f003 0310 	and.w	r3, r3, #16
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d007      	beq.n	8007b90 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2210      	movs	r2, #16
 8007b8e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00b      	beq.n	8007bb2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d006      	beq.n	8007bb2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2208      	movs	r2, #8
 8007baa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f924 	bl	8007dfa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d009      	beq.n	8007bd0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7f9 ff9e 	bl	8001b0c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00c      	beq.n	8007bf4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f003 0310 	and.w	r3, r3, #16
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d007      	beq.n	8007bf4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2210      	movs	r2, #16
 8007bf2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	f003 0320 	and.w	r3, r3, #32
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00b      	beq.n	8007c16 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f003 0308 	and.w	r3, r3, #8
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d006      	beq.n	8007c16 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2208      	movs	r2, #8
 8007c0e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f904 	bl	8007e1e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	f003 0310 	and.w	r3, r3, #16
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d009      	beq.n	8007c34 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f8ec 	bl	8007e0c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00b      	beq.n	8007c56 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d006      	beq.n	8007c56 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2210      	movs	r2, #16
 8007c4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f8ed 	bl	8007e30 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00b      	beq.n	8007c78 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	f003 0308 	and.w	r3, r3, #8
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d006      	beq.n	8007c78 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2208      	movs	r2, #8
 8007c70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f8e5 	bl	8007e42 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d075      	beq.n	8007d6e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d06c      	beq.n	8007d66 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d008      	beq.n	8007ca8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	f043 0301 	orr.w	r3, r3, #1
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d008      	beq.n	8007cc4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d003      	beq.n	8007cc4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	f043 0302 	orr.w	r3, r3, #2
 8007cc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d008      	beq.n	8007ce0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	f043 0304 	orr.w	r3, r3, #4
 8007cde:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d03d      	beq.n	8007d66 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d038      	beq.n	8007d66 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cfa:	2b30      	cmp	r3, #48	; 0x30
 8007cfc:	d017      	beq.n	8007d2e <HAL_CAN_IRQHandler+0x302>
 8007cfe:	2b30      	cmp	r3, #48	; 0x30
 8007d00:	d804      	bhi.n	8007d0c <HAL_CAN_IRQHandler+0x2e0>
 8007d02:	2b10      	cmp	r3, #16
 8007d04:	d009      	beq.n	8007d1a <HAL_CAN_IRQHandler+0x2ee>
 8007d06:	2b20      	cmp	r3, #32
 8007d08:	d00c      	beq.n	8007d24 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007d0a:	e024      	b.n	8007d56 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8007d0c:	2b50      	cmp	r3, #80	; 0x50
 8007d0e:	d018      	beq.n	8007d42 <HAL_CAN_IRQHandler+0x316>
 8007d10:	2b60      	cmp	r3, #96	; 0x60
 8007d12:	d01b      	beq.n	8007d4c <HAL_CAN_IRQHandler+0x320>
 8007d14:	2b40      	cmp	r3, #64	; 0x40
 8007d16:	d00f      	beq.n	8007d38 <HAL_CAN_IRQHandler+0x30c>
            break;
 8007d18:	e01d      	b.n	8007d56 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	f043 0308 	orr.w	r3, r3, #8
 8007d20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007d22:	e018      	b.n	8007d56 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	f043 0310 	orr.w	r3, r3, #16
 8007d2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007d2c:	e013      	b.n	8007d56 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	f043 0320 	orr.w	r3, r3, #32
 8007d34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007d36:	e00e      	b.n	8007d56 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007d40:	e009      	b.n	8007d56 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8007d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007d4a:	e004      	b.n	8007d56 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007d54:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	699a      	ldr	r2, [r3, #24]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007d64:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2204      	movs	r2, #4
 8007d6c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d008      	beq.n	8007d86 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f867 	bl	8007e54 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007d86:	bf00      	nop
 8007d88:	3728      	adds	r7, #40	; 0x28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bc80      	pop	{r7}
 8007d9e:	4770      	bx	lr

08007da0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bc80      	pop	{r7}
 8007db0:	4770      	bx	lr

08007db2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bc80      	pop	{r7}
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bc80      	pop	{r7}
 8007dd4:	4770      	bx	lr

08007dd6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bc80      	pop	{r7}
 8007de6:	4770      	bx	lr

08007de8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bc80      	pop	{r7}
 8007df8:	4770      	bx	lr

08007dfa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bc80      	pop	{r7}
 8007e0a:	4770      	bx	lr

08007e0c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bc80      	pop	{r7}
 8007e1c:	4770      	bx	lr

08007e1e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b083      	sub	sp, #12
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bc80      	pop	{r7}
 8007e2e:	4770      	bx	lr

08007e30 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bc80      	pop	{r7}
 8007e40:	4770      	bx	lr

08007e42 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr

08007e54 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bc80      	pop	{r7}
 8007e64:	4770      	bx	lr
	...

08007e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e78:	4b0c      	ldr	r3, [pc, #48]	; (8007eac <__NVIC_SetPriorityGrouping+0x44>)
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e84:	4013      	ands	r3, r2
 8007e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e9a:	4a04      	ldr	r2, [pc, #16]	; (8007eac <__NVIC_SetPriorityGrouping+0x44>)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	60d3      	str	r3, [r2, #12]
}
 8007ea0:	bf00      	nop
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bc80      	pop	{r7}
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	e000ed00 	.word	0xe000ed00

08007eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007eb4:	4b04      	ldr	r3, [pc, #16]	; (8007ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	0a1b      	lsrs	r3, r3, #8
 8007eba:	f003 0307 	and.w	r3, r3, #7
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bc80      	pop	{r7}
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	e000ed00 	.word	0xe000ed00

08007ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	db0b      	blt.n	8007ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	f003 021f 	and.w	r2, r3, #31
 8007ee4:	4906      	ldr	r1, [pc, #24]	; (8007f00 <__NVIC_EnableIRQ+0x34>)
 8007ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eea:	095b      	lsrs	r3, r3, #5
 8007eec:	2001      	movs	r0, #1
 8007eee:	fa00 f202 	lsl.w	r2, r0, r2
 8007ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007ef6:	bf00      	nop
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bc80      	pop	{r7}
 8007efe:	4770      	bx	lr
 8007f00:	e000e100 	.word	0xe000e100

08007f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	6039      	str	r1, [r7, #0]
 8007f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	db0a      	blt.n	8007f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	490c      	ldr	r1, [pc, #48]	; (8007f50 <__NVIC_SetPriority+0x4c>)
 8007f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f22:	0112      	lsls	r2, r2, #4
 8007f24:	b2d2      	uxtb	r2, r2
 8007f26:	440b      	add	r3, r1
 8007f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f2c:	e00a      	b.n	8007f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	4908      	ldr	r1, [pc, #32]	; (8007f54 <__NVIC_SetPriority+0x50>)
 8007f34:	79fb      	ldrb	r3, [r7, #7]
 8007f36:	f003 030f 	and.w	r3, r3, #15
 8007f3a:	3b04      	subs	r3, #4
 8007f3c:	0112      	lsls	r2, r2, #4
 8007f3e:	b2d2      	uxtb	r2, r2
 8007f40:	440b      	add	r3, r1
 8007f42:	761a      	strb	r2, [r3, #24]
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bc80      	pop	{r7}
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	e000e100 	.word	0xe000e100
 8007f54:	e000ed00 	.word	0xe000ed00

08007f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b089      	sub	sp, #36	; 0x24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f003 0307 	and.w	r3, r3, #7
 8007f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	f1c3 0307 	rsb	r3, r3, #7
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	bf28      	it	cs
 8007f76:	2304      	movcs	r3, #4
 8007f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	2b06      	cmp	r3, #6
 8007f80:	d902      	bls.n	8007f88 <NVIC_EncodePriority+0x30>
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	3b03      	subs	r3, #3
 8007f86:	e000      	b.n	8007f8a <NVIC_EncodePriority+0x32>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	fa02 f303 	lsl.w	r3, r2, r3
 8007f96:	43da      	mvns	r2, r3
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	401a      	ands	r2, r3
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8007faa:	43d9      	mvns	r1, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fb0:	4313      	orrs	r3, r2
         );
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3724      	adds	r7, #36	; 0x24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bc80      	pop	{r7}
 8007fba:	4770      	bx	lr

08007fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fcc:	d301      	bcc.n	8007fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e00f      	b.n	8007ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007fd2:	4a0a      	ldr	r2, [pc, #40]	; (8007ffc <SysTick_Config+0x40>)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fda:	210f      	movs	r1, #15
 8007fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe0:	f7ff ff90 	bl	8007f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fe4:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <SysTick_Config+0x40>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fea:	4b04      	ldr	r3, [pc, #16]	; (8007ffc <SysTick_Config+0x40>)
 8007fec:	2207      	movs	r2, #7
 8007fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	e000e010 	.word	0xe000e010

08008000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7ff ff2d 	bl	8007e68 <__NVIC_SetPriorityGrouping>
}
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008016:	b580      	push	{r7, lr}
 8008018:	b086      	sub	sp, #24
 800801a:	af00      	add	r7, sp, #0
 800801c:	4603      	mov	r3, r0
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	607a      	str	r2, [r7, #4]
 8008022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008024:	2300      	movs	r3, #0
 8008026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008028:	f7ff ff42 	bl	8007eb0 <__NVIC_GetPriorityGrouping>
 800802c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	68b9      	ldr	r1, [r7, #8]
 8008032:	6978      	ldr	r0, [r7, #20]
 8008034:	f7ff ff90 	bl	8007f58 <NVIC_EncodePriority>
 8008038:	4602      	mov	r2, r0
 800803a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800803e:	4611      	mov	r1, r2
 8008040:	4618      	mov	r0, r3
 8008042:	f7ff ff5f 	bl	8007f04 <__NVIC_SetPriority>
}
 8008046:	bf00      	nop
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	4603      	mov	r3, r0
 8008056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800805c:	4618      	mov	r0, r3
 800805e:	f7ff ff35 	bl	8007ecc <__NVIC_EnableIRQ>
}
 8008062:	bf00      	nop
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7ff ffa2 	bl	8007fbc <SysTick_Config>
 8008078:	4603      	mov	r3, r0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800808c:	2300      	movs	r3, #0
 800808e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e043      	b.n	8008122 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	4b22      	ldr	r3, [pc, #136]	; (800812c <HAL_DMA_Init+0xa8>)
 80080a2:	4413      	add	r3, r2
 80080a4:	4a22      	ldr	r2, [pc, #136]	; (8008130 <HAL_DMA_Init+0xac>)
 80080a6:	fba2 2303 	umull	r2, r3, r2, r3
 80080aa:	091b      	lsrs	r3, r3, #4
 80080ac:	009a      	lsls	r2, r3, #2
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a1f      	ldr	r2, [pc, #124]	; (8008134 <HAL_DMA_Init+0xb0>)
 80080b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80080ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80080d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80080dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	bc80      	pop	{r7}
 800812a:	4770      	bx	lr
 800812c:	bffdfff8 	.word	0xbffdfff8
 8008130:	cccccccd 	.word	0xcccccccd
 8008134:	40020000 	.word	0x40020000

08008138 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_DMA_Start_IT+0x20>
 8008154:	2302      	movs	r3, #2
 8008156:	e04a      	b.n	80081ee <HAL_DMA_Start_IT+0xb6>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008166:	2b01      	cmp	r3, #1
 8008168:	d13a      	bne.n	80081e0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2202      	movs	r2, #2
 800816e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f022 0201 	bic.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	68b9      	ldr	r1, [r7, #8]
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 f938 	bl	8008404 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	2b00      	cmp	r3, #0
 800819a:	d008      	beq.n	80081ae <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f042 020e 	orr.w	r2, r2, #14
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	e00f      	b.n	80081ce <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f022 0204 	bic.w	r2, r2, #4
 80081bc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f042 020a 	orr.w	r2, r2, #10
 80081cc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f042 0201 	orr.w	r2, r2, #1
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	e005      	b.n	80081ec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80081e8:	2302      	movs	r3, #2
 80081ea:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	2204      	movs	r2, #4
 8008216:	409a      	lsls	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4013      	ands	r3, r2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d04f      	beq.n	80082c0 <HAL_DMA_IRQHandler+0xc8>
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f003 0304 	and.w	r3, r3, #4
 8008226:	2b00      	cmp	r3, #0
 8008228:	d04a      	beq.n	80082c0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0320 	and.w	r3, r3, #32
 8008234:	2b00      	cmp	r3, #0
 8008236:	d107      	bne.n	8008248 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f022 0204 	bic.w	r2, r2, #4
 8008246:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a66      	ldr	r2, [pc, #408]	; (80083e8 <HAL_DMA_IRQHandler+0x1f0>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d029      	beq.n	80082a6 <HAL_DMA_IRQHandler+0xae>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a65      	ldr	r2, [pc, #404]	; (80083ec <HAL_DMA_IRQHandler+0x1f4>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d022      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xaa>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a63      	ldr	r2, [pc, #396]	; (80083f0 <HAL_DMA_IRQHandler+0x1f8>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d01a      	beq.n	800829c <HAL_DMA_IRQHandler+0xa4>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a62      	ldr	r2, [pc, #392]	; (80083f4 <HAL_DMA_IRQHandler+0x1fc>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d012      	beq.n	8008296 <HAL_DMA_IRQHandler+0x9e>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a60      	ldr	r2, [pc, #384]	; (80083f8 <HAL_DMA_IRQHandler+0x200>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d00a      	beq.n	8008290 <HAL_DMA_IRQHandler+0x98>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a5f      	ldr	r2, [pc, #380]	; (80083fc <HAL_DMA_IRQHandler+0x204>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d102      	bne.n	800828a <HAL_DMA_IRQHandler+0x92>
 8008284:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008288:	e00e      	b.n	80082a8 <HAL_DMA_IRQHandler+0xb0>
 800828a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800828e:	e00b      	b.n	80082a8 <HAL_DMA_IRQHandler+0xb0>
 8008290:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008294:	e008      	b.n	80082a8 <HAL_DMA_IRQHandler+0xb0>
 8008296:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800829a:	e005      	b.n	80082a8 <HAL_DMA_IRQHandler+0xb0>
 800829c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082a0:	e002      	b.n	80082a8 <HAL_DMA_IRQHandler+0xb0>
 80082a2:	2340      	movs	r3, #64	; 0x40
 80082a4:	e000      	b.n	80082a8 <HAL_DMA_IRQHandler+0xb0>
 80082a6:	2304      	movs	r3, #4
 80082a8:	4a55      	ldr	r2, [pc, #340]	; (8008400 <HAL_DMA_IRQHandler+0x208>)
 80082aa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 8094 	beq.w	80083de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80082be:	e08e      	b.n	80083de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c4:	2202      	movs	r2, #2
 80082c6:	409a      	lsls	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4013      	ands	r3, r2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d056      	beq.n	800837e <HAL_DMA_IRQHandler+0x186>
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d051      	beq.n	800837e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0320 	and.w	r3, r3, #32
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10b      	bne.n	8008300 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f022 020a 	bic.w	r2, r2, #10
 80082f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a38      	ldr	r2, [pc, #224]	; (80083e8 <HAL_DMA_IRQHandler+0x1f0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d029      	beq.n	800835e <HAL_DMA_IRQHandler+0x166>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a37      	ldr	r2, [pc, #220]	; (80083ec <HAL_DMA_IRQHandler+0x1f4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d022      	beq.n	800835a <HAL_DMA_IRQHandler+0x162>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a35      	ldr	r2, [pc, #212]	; (80083f0 <HAL_DMA_IRQHandler+0x1f8>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d01a      	beq.n	8008354 <HAL_DMA_IRQHandler+0x15c>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a34      	ldr	r2, [pc, #208]	; (80083f4 <HAL_DMA_IRQHandler+0x1fc>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d012      	beq.n	800834e <HAL_DMA_IRQHandler+0x156>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a32      	ldr	r2, [pc, #200]	; (80083f8 <HAL_DMA_IRQHandler+0x200>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d00a      	beq.n	8008348 <HAL_DMA_IRQHandler+0x150>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a31      	ldr	r2, [pc, #196]	; (80083fc <HAL_DMA_IRQHandler+0x204>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d102      	bne.n	8008342 <HAL_DMA_IRQHandler+0x14a>
 800833c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008340:	e00e      	b.n	8008360 <HAL_DMA_IRQHandler+0x168>
 8008342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008346:	e00b      	b.n	8008360 <HAL_DMA_IRQHandler+0x168>
 8008348:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800834c:	e008      	b.n	8008360 <HAL_DMA_IRQHandler+0x168>
 800834e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008352:	e005      	b.n	8008360 <HAL_DMA_IRQHandler+0x168>
 8008354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008358:	e002      	b.n	8008360 <HAL_DMA_IRQHandler+0x168>
 800835a:	2320      	movs	r3, #32
 800835c:	e000      	b.n	8008360 <HAL_DMA_IRQHandler+0x168>
 800835e:	2302      	movs	r3, #2
 8008360:	4a27      	ldr	r2, [pc, #156]	; (8008400 <HAL_DMA_IRQHandler+0x208>)
 8008362:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008370:	2b00      	cmp	r3, #0
 8008372:	d034      	beq.n	80083de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800837c:	e02f      	b.n	80083de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	2208      	movs	r2, #8
 8008384:	409a      	lsls	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4013      	ands	r3, r2
 800838a:	2b00      	cmp	r3, #0
 800838c:	d028      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x1e8>
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f003 0308 	and.w	r3, r3, #8
 8008394:	2b00      	cmp	r3, #0
 8008396:	d023      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 020e 	bic.w	r2, r2, #14
 80083a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b0:	2101      	movs	r1, #1
 80083b2:	fa01 f202 	lsl.w	r2, r1, r2
 80083b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d004      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	4798      	blx	r3
    }
  }
  return;
 80083de:	bf00      	nop
 80083e0:	bf00      	nop
}
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	40020008 	.word	0x40020008
 80083ec:	4002001c 	.word	0x4002001c
 80083f0:	40020030 	.word	0x40020030
 80083f4:	40020044 	.word	0x40020044
 80083f8:	40020058 	.word	0x40020058
 80083fc:	4002006c 	.word	0x4002006c
 8008400:	40020000 	.word	0x40020000

08008404 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
 8008410:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841a:	2101      	movs	r1, #1
 800841c:	fa01 f202 	lsl.w	r2, r1, r2
 8008420:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	2b10      	cmp	r3, #16
 8008430:	d108      	bne.n	8008444 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008442:	e007      	b.n	8008454 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	60da      	str	r2, [r3, #12]
}
 8008454:	bf00      	nop
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	bc80      	pop	{r7}
 800845c:	4770      	bx	lr
	...

08008460 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800846a:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <HAL_FLASH_Unlock+0x40>)
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00d      	beq.n	8008492 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008476:	4b0a      	ldr	r3, [pc, #40]	; (80084a0 <HAL_FLASH_Unlock+0x40>)
 8008478:	4a0a      	ldr	r2, [pc, #40]	; (80084a4 <HAL_FLASH_Unlock+0x44>)
 800847a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800847c:	4b08      	ldr	r3, [pc, #32]	; (80084a0 <HAL_FLASH_Unlock+0x40>)
 800847e:	4a0a      	ldr	r2, [pc, #40]	; (80084a8 <HAL_FLASH_Unlock+0x48>)
 8008480:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008482:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <HAL_FLASH_Unlock+0x40>)
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8008492:	79fb      	ldrb	r3, [r7, #7]
}
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	bc80      	pop	{r7}
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	40022000 	.word	0x40022000
 80084a4:	45670123 	.word	0x45670123
 80084a8:	cdef89ab 	.word	0xcdef89ab

080084ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b08b      	sub	sp, #44	; 0x2c
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80084b6:	2300      	movs	r3, #0
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80084ba:	2300      	movs	r3, #0
 80084bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80084be:	e127      	b.n	8008710 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80084c0:	2201      	movs	r2, #1
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	fa02 f303 	lsl.w	r3, r2, r3
 80084c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69fa      	ldr	r2, [r7, #28]
 80084d0:	4013      	ands	r3, r2
 80084d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80084d4:	69ba      	ldr	r2, [r7, #24]
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	429a      	cmp	r2, r3
 80084da:	f040 8116 	bne.w	800870a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	2b12      	cmp	r3, #18
 80084e4:	d034      	beq.n	8008550 <HAL_GPIO_Init+0xa4>
 80084e6:	2b12      	cmp	r3, #18
 80084e8:	d80d      	bhi.n	8008506 <HAL_GPIO_Init+0x5a>
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d02b      	beq.n	8008546 <HAL_GPIO_Init+0x9a>
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d804      	bhi.n	80084fc <HAL_GPIO_Init+0x50>
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d031      	beq.n	800855a <HAL_GPIO_Init+0xae>
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d01c      	beq.n	8008534 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80084fa:	e048      	b.n	800858e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d043      	beq.n	8008588 <HAL_GPIO_Init+0xdc>
 8008500:	2b11      	cmp	r3, #17
 8008502:	d01b      	beq.n	800853c <HAL_GPIO_Init+0x90>
          break;
 8008504:	e043      	b.n	800858e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008506:	4a89      	ldr	r2, [pc, #548]	; (800872c <HAL_GPIO_Init+0x280>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d026      	beq.n	800855a <HAL_GPIO_Init+0xae>
 800850c:	4a87      	ldr	r2, [pc, #540]	; (800872c <HAL_GPIO_Init+0x280>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d806      	bhi.n	8008520 <HAL_GPIO_Init+0x74>
 8008512:	4a87      	ldr	r2, [pc, #540]	; (8008730 <HAL_GPIO_Init+0x284>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d020      	beq.n	800855a <HAL_GPIO_Init+0xae>
 8008518:	4a86      	ldr	r2, [pc, #536]	; (8008734 <HAL_GPIO_Init+0x288>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d01d      	beq.n	800855a <HAL_GPIO_Init+0xae>
          break;
 800851e:	e036      	b.n	800858e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008520:	4a85      	ldr	r2, [pc, #532]	; (8008738 <HAL_GPIO_Init+0x28c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d019      	beq.n	800855a <HAL_GPIO_Init+0xae>
 8008526:	4a85      	ldr	r2, [pc, #532]	; (800873c <HAL_GPIO_Init+0x290>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d016      	beq.n	800855a <HAL_GPIO_Init+0xae>
 800852c:	4a84      	ldr	r2, [pc, #528]	; (8008740 <HAL_GPIO_Init+0x294>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d013      	beq.n	800855a <HAL_GPIO_Init+0xae>
          break;
 8008532:	e02c      	b.n	800858e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	623b      	str	r3, [r7, #32]
          break;
 800853a:	e028      	b.n	800858e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	3304      	adds	r3, #4
 8008542:	623b      	str	r3, [r7, #32]
          break;
 8008544:	e023      	b.n	800858e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	3308      	adds	r3, #8
 800854c:	623b      	str	r3, [r7, #32]
          break;
 800854e:	e01e      	b.n	800858e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	330c      	adds	r3, #12
 8008556:	623b      	str	r3, [r7, #32]
          break;
 8008558:	e019      	b.n	800858e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d102      	bne.n	8008568 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008562:	2304      	movs	r3, #4
 8008564:	623b      	str	r3, [r7, #32]
          break;
 8008566:	e012      	b.n	800858e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d105      	bne.n	800857c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008570:	2308      	movs	r3, #8
 8008572:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	611a      	str	r2, [r3, #16]
          break;
 800857a:	e008      	b.n	800858e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800857c:	2308      	movs	r3, #8
 800857e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	69fa      	ldr	r2, [r7, #28]
 8008584:	615a      	str	r2, [r3, #20]
          break;
 8008586:	e002      	b.n	800858e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008588:	2300      	movs	r3, #0
 800858a:	623b      	str	r3, [r7, #32]
          break;
 800858c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	2bff      	cmp	r3, #255	; 0xff
 8008592:	d801      	bhi.n	8008598 <HAL_GPIO_Init+0xec>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	e001      	b.n	800859c <HAL_GPIO_Init+0xf0>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	3304      	adds	r3, #4
 800859c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	2bff      	cmp	r3, #255	; 0xff
 80085a2:	d802      	bhi.n	80085aa <HAL_GPIO_Init+0xfe>
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	e002      	b.n	80085b0 <HAL_GPIO_Init+0x104>
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	3b08      	subs	r3, #8
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	210f      	movs	r1, #15
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	fa01 f303 	lsl.w	r3, r1, r3
 80085be:	43db      	mvns	r3, r3
 80085c0:	401a      	ands	r2, r3
 80085c2:	6a39      	ldr	r1, [r7, #32]
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	fa01 f303 	lsl.w	r3, r1, r3
 80085ca:	431a      	orrs	r2, r3
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 8096 	beq.w	800870a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80085de:	4b59      	ldr	r3, [pc, #356]	; (8008744 <HAL_GPIO_Init+0x298>)
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	4a58      	ldr	r2, [pc, #352]	; (8008744 <HAL_GPIO_Init+0x298>)
 80085e4:	f043 0301 	orr.w	r3, r3, #1
 80085e8:	6193      	str	r3, [r2, #24]
 80085ea:	4b56      	ldr	r3, [pc, #344]	; (8008744 <HAL_GPIO_Init+0x298>)
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	60bb      	str	r3, [r7, #8]
 80085f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80085f6:	4a54      	ldr	r2, [pc, #336]	; (8008748 <HAL_GPIO_Init+0x29c>)
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	089b      	lsrs	r3, r3, #2
 80085fc:	3302      	adds	r3, #2
 80085fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008602:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	220f      	movs	r2, #15
 800860e:	fa02 f303 	lsl.w	r3, r2, r3
 8008612:	43db      	mvns	r3, r3
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	4013      	ands	r3, r2
 8008618:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a4b      	ldr	r2, [pc, #300]	; (800874c <HAL_GPIO_Init+0x2a0>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d013      	beq.n	800864a <HAL_GPIO_Init+0x19e>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a4a      	ldr	r2, [pc, #296]	; (8008750 <HAL_GPIO_Init+0x2a4>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d00d      	beq.n	8008646 <HAL_GPIO_Init+0x19a>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a49      	ldr	r2, [pc, #292]	; (8008754 <HAL_GPIO_Init+0x2a8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d007      	beq.n	8008642 <HAL_GPIO_Init+0x196>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a48      	ldr	r2, [pc, #288]	; (8008758 <HAL_GPIO_Init+0x2ac>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d101      	bne.n	800863e <HAL_GPIO_Init+0x192>
 800863a:	2303      	movs	r3, #3
 800863c:	e006      	b.n	800864c <HAL_GPIO_Init+0x1a0>
 800863e:	2304      	movs	r3, #4
 8008640:	e004      	b.n	800864c <HAL_GPIO_Init+0x1a0>
 8008642:	2302      	movs	r3, #2
 8008644:	e002      	b.n	800864c <HAL_GPIO_Init+0x1a0>
 8008646:	2301      	movs	r3, #1
 8008648:	e000      	b.n	800864c <HAL_GPIO_Init+0x1a0>
 800864a:	2300      	movs	r3, #0
 800864c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800864e:	f002 0203 	and.w	r2, r2, #3
 8008652:	0092      	lsls	r2, r2, #2
 8008654:	4093      	lsls	r3, r2
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	4313      	orrs	r3, r2
 800865a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800865c:	493a      	ldr	r1, [pc, #232]	; (8008748 <HAL_GPIO_Init+0x29c>)
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	089b      	lsrs	r3, r3, #2
 8008662:	3302      	adds	r3, #2
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d006      	beq.n	8008684 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008676:	4b39      	ldr	r3, [pc, #228]	; (800875c <HAL_GPIO_Init+0x2b0>)
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	4938      	ldr	r1, [pc, #224]	; (800875c <HAL_GPIO_Init+0x2b0>)
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	4313      	orrs	r3, r2
 8008680:	600b      	str	r3, [r1, #0]
 8008682:	e006      	b.n	8008692 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008684:	4b35      	ldr	r3, [pc, #212]	; (800875c <HAL_GPIO_Init+0x2b0>)
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	43db      	mvns	r3, r3
 800868c:	4933      	ldr	r1, [pc, #204]	; (800875c <HAL_GPIO_Init+0x2b0>)
 800868e:	4013      	ands	r3, r2
 8008690:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d006      	beq.n	80086ac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800869e:	4b2f      	ldr	r3, [pc, #188]	; (800875c <HAL_GPIO_Init+0x2b0>)
 80086a0:	685a      	ldr	r2, [r3, #4]
 80086a2:	492e      	ldr	r1, [pc, #184]	; (800875c <HAL_GPIO_Init+0x2b0>)
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	604b      	str	r3, [r1, #4]
 80086aa:	e006      	b.n	80086ba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80086ac:	4b2b      	ldr	r3, [pc, #172]	; (800875c <HAL_GPIO_Init+0x2b0>)
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	43db      	mvns	r3, r3
 80086b4:	4929      	ldr	r1, [pc, #164]	; (800875c <HAL_GPIO_Init+0x2b0>)
 80086b6:	4013      	ands	r3, r2
 80086b8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d006      	beq.n	80086d4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80086c6:	4b25      	ldr	r3, [pc, #148]	; (800875c <HAL_GPIO_Init+0x2b0>)
 80086c8:	689a      	ldr	r2, [r3, #8]
 80086ca:	4924      	ldr	r1, [pc, #144]	; (800875c <HAL_GPIO_Init+0x2b0>)
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	608b      	str	r3, [r1, #8]
 80086d2:	e006      	b.n	80086e2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80086d4:	4b21      	ldr	r3, [pc, #132]	; (800875c <HAL_GPIO_Init+0x2b0>)
 80086d6:	689a      	ldr	r2, [r3, #8]
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	43db      	mvns	r3, r3
 80086dc:	491f      	ldr	r1, [pc, #124]	; (800875c <HAL_GPIO_Init+0x2b0>)
 80086de:	4013      	ands	r3, r2
 80086e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d006      	beq.n	80086fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80086ee:	4b1b      	ldr	r3, [pc, #108]	; (800875c <HAL_GPIO_Init+0x2b0>)
 80086f0:	68da      	ldr	r2, [r3, #12]
 80086f2:	491a      	ldr	r1, [pc, #104]	; (800875c <HAL_GPIO_Init+0x2b0>)
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60cb      	str	r3, [r1, #12]
 80086fa:	e006      	b.n	800870a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80086fc:	4b17      	ldr	r3, [pc, #92]	; (800875c <HAL_GPIO_Init+0x2b0>)
 80086fe:	68da      	ldr	r2, [r3, #12]
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	43db      	mvns	r3, r3
 8008704:	4915      	ldr	r1, [pc, #84]	; (800875c <HAL_GPIO_Init+0x2b0>)
 8008706:	4013      	ands	r3, r2
 8008708:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	3301      	adds	r3, #1
 800870e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	fa22 f303 	lsr.w	r3, r2, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	f47f aed0 	bne.w	80084c0 <HAL_GPIO_Init+0x14>
  }
}
 8008720:	bf00      	nop
 8008722:	372c      	adds	r7, #44	; 0x2c
 8008724:	46bd      	mov	sp, r7
 8008726:	bc80      	pop	{r7}
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	10210000 	.word	0x10210000
 8008730:	10110000 	.word	0x10110000
 8008734:	10120000 	.word	0x10120000
 8008738:	10310000 	.word	0x10310000
 800873c:	10320000 	.word	0x10320000
 8008740:	10220000 	.word	0x10220000
 8008744:	40021000 	.word	0x40021000
 8008748:	40010000 	.word	0x40010000
 800874c:	40010800 	.word	0x40010800
 8008750:	40010c00 	.word	0x40010c00
 8008754:	40011000 	.word	0x40011000
 8008758:	40011400 	.word	0x40011400
 800875c:	40010400 	.word	0x40010400

08008760 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	460b      	mov	r3, r1
 800876a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	887b      	ldrh	r3, [r7, #2]
 8008772:	4013      	ands	r3, r2
 8008774:	2b00      	cmp	r3, #0
 8008776:	d002      	beq.n	800877e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008778:	2301      	movs	r3, #1
 800877a:	73fb      	strb	r3, [r7, #15]
 800877c:	e001      	b.n	8008782 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800877e:	2300      	movs	r3, #0
 8008780:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008782:	7bfb      	ldrb	r3, [r7, #15]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	bc80      	pop	{r7}
 800878c:	4770      	bx	lr

0800878e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800878e:	b480      	push	{r7}
 8008790:	b083      	sub	sp, #12
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	460b      	mov	r3, r1
 8008798:	807b      	strh	r3, [r7, #2]
 800879a:	4613      	mov	r3, r2
 800879c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800879e:	787b      	ldrb	r3, [r7, #1]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d003      	beq.n	80087ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087a4:	887a      	ldrh	r2, [r7, #2]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80087aa:	e003      	b.n	80087b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80087ac:	887b      	ldrh	r3, [r7, #2]
 80087ae:	041a      	lsls	r2, r3, #16
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	611a      	str	r2, [r3, #16]
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bc80      	pop	{r7}
 80087bc:	4770      	bx	lr

080087be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	460b      	mov	r3, r1
 80087c8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	887b      	ldrh	r3, [r7, #2]
 80087d0:	4013      	ands	r3, r2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80087d6:	887a      	ldrh	r2, [r7, #2]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80087dc:	e002      	b.n	80087e4 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80087de:	887a      	ldrh	r2, [r7, #2]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	611a      	str	r2, [r3, #16]
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bc80      	pop	{r7}
 80087ec:	4770      	bx	lr
	...

080087f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e10f      	b.n	8008a22 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d106      	bne.n	800881c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7f9 fd9c 	bl	8002354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2224      	movs	r2, #36	; 0x24
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f022 0201 	bic.w	r2, r2, #1
 8008832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008834:	f001 f93e 	bl	8009ab4 <HAL_RCC_GetPCLK1Freq>
 8008838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	4a7b      	ldr	r2, [pc, #492]	; (8008a2c <HAL_I2C_Init+0x23c>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d807      	bhi.n	8008854 <HAL_I2C_Init+0x64>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4a7a      	ldr	r2, [pc, #488]	; (8008a30 <HAL_I2C_Init+0x240>)
 8008848:	4293      	cmp	r3, r2
 800884a:	bf94      	ite	ls
 800884c:	2301      	movls	r3, #1
 800884e:	2300      	movhi	r3, #0
 8008850:	b2db      	uxtb	r3, r3
 8008852:	e006      	b.n	8008862 <HAL_I2C_Init+0x72>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4a77      	ldr	r2, [pc, #476]	; (8008a34 <HAL_I2C_Init+0x244>)
 8008858:	4293      	cmp	r3, r2
 800885a:	bf94      	ite	ls
 800885c:	2301      	movls	r3, #1
 800885e:	2300      	movhi	r3, #0
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e0db      	b.n	8008a22 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	4a72      	ldr	r2, [pc, #456]	; (8008a38 <HAL_I2C_Init+0x248>)
 800886e:	fba2 2303 	umull	r2, r3, r2, r3
 8008872:	0c9b      	lsrs	r3, r3, #18
 8008874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	430a      	orrs	r2, r1
 8008888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6a1b      	ldr	r3, [r3, #32]
 8008890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	4a64      	ldr	r2, [pc, #400]	; (8008a2c <HAL_I2C_Init+0x23c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d802      	bhi.n	80088a4 <HAL_I2C_Init+0xb4>
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	3301      	adds	r3, #1
 80088a2:	e009      	b.n	80088b8 <HAL_I2C_Init+0xc8>
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80088aa:	fb02 f303 	mul.w	r3, r2, r3
 80088ae:	4a63      	ldr	r2, [pc, #396]	; (8008a3c <HAL_I2C_Init+0x24c>)
 80088b0:	fba2 2303 	umull	r2, r3, r2, r3
 80088b4:	099b      	lsrs	r3, r3, #6
 80088b6:	3301      	adds	r3, #1
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	6812      	ldr	r2, [r2, #0]
 80088bc:	430b      	orrs	r3, r1
 80088be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	69db      	ldr	r3, [r3, #28]
 80088c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80088ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	4956      	ldr	r1, [pc, #344]	; (8008a2c <HAL_I2C_Init+0x23c>)
 80088d4:	428b      	cmp	r3, r1
 80088d6:	d80d      	bhi.n	80088f4 <HAL_I2C_Init+0x104>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	1e59      	subs	r1, r3, #1
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80088e6:	3301      	adds	r3, #1
 80088e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088ec:	2b04      	cmp	r3, #4
 80088ee:	bf38      	it	cc
 80088f0:	2304      	movcc	r3, #4
 80088f2:	e04f      	b.n	8008994 <HAL_I2C_Init+0x1a4>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d111      	bne.n	8008920 <HAL_I2C_Init+0x130>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	1e58      	subs	r0, r3, #1
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6859      	ldr	r1, [r3, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	440b      	add	r3, r1
 800890a:	fbb0 f3f3 	udiv	r3, r0, r3
 800890e:	3301      	adds	r3, #1
 8008910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008914:	2b00      	cmp	r3, #0
 8008916:	bf0c      	ite	eq
 8008918:	2301      	moveq	r3, #1
 800891a:	2300      	movne	r3, #0
 800891c:	b2db      	uxtb	r3, r3
 800891e:	e012      	b.n	8008946 <HAL_I2C_Init+0x156>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	1e58      	subs	r0, r3, #1
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6859      	ldr	r1, [r3, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	440b      	add	r3, r1
 800892e:	0099      	lsls	r1, r3, #2
 8008930:	440b      	add	r3, r1
 8008932:	fbb0 f3f3 	udiv	r3, r0, r3
 8008936:	3301      	adds	r3, #1
 8008938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800893c:	2b00      	cmp	r3, #0
 800893e:	bf0c      	ite	eq
 8008940:	2301      	moveq	r3, #1
 8008942:	2300      	movne	r3, #0
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <HAL_I2C_Init+0x15e>
 800894a:	2301      	movs	r3, #1
 800894c:	e022      	b.n	8008994 <HAL_I2C_Init+0x1a4>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10e      	bne.n	8008974 <HAL_I2C_Init+0x184>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	1e58      	subs	r0, r3, #1
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6859      	ldr	r1, [r3, #4]
 800895e:	460b      	mov	r3, r1
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	440b      	add	r3, r1
 8008964:	fbb0 f3f3 	udiv	r3, r0, r3
 8008968:	3301      	adds	r3, #1
 800896a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800896e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008972:	e00f      	b.n	8008994 <HAL_I2C_Init+0x1a4>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	1e58      	subs	r0, r3, #1
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6859      	ldr	r1, [r3, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	440b      	add	r3, r1
 8008982:	0099      	lsls	r1, r3, #2
 8008984:	440b      	add	r3, r1
 8008986:	fbb0 f3f3 	udiv	r3, r0, r3
 800898a:	3301      	adds	r3, #1
 800898c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008994:	6879      	ldr	r1, [r7, #4]
 8008996:	6809      	ldr	r1, [r1, #0]
 8008998:	4313      	orrs	r3, r2
 800899a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	69da      	ldr	r2, [r3, #28]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	431a      	orrs	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80089c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	6911      	ldr	r1, [r2, #16]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	68d2      	ldr	r2, [r2, #12]
 80089ce:	4311      	orrs	r1, r2
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	6812      	ldr	r2, [r2, #0]
 80089d4:	430b      	orrs	r3, r1
 80089d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	695a      	ldr	r2, [r3, #20]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	431a      	orrs	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f042 0201 	orr.w	r2, r2, #1
 8008a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	000186a0 	.word	0x000186a0
 8008a30:	001e847f 	.word	0x001e847f
 8008a34:	003d08ff 	.word	0x003d08ff
 8008a38:	431bde83 	.word	0x431bde83
 8008a3c:	10624dd3 	.word	0x10624dd3

08008a40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af02      	add	r7, sp, #8
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	817b      	strh	r3, [r7, #10]
 8008a50:	4613      	mov	r3, r2
 8008a52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a54:	f7fd ff72 	bl	800693c <HAL_GetTick>
 8008a58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b20      	cmp	r3, #32
 8008a64:	f040 80e0 	bne.w	8008c28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	2319      	movs	r3, #25
 8008a6e:	2201      	movs	r2, #1
 8008a70:	4970      	ldr	r1, [pc, #448]	; (8008c34 <HAL_I2C_Master_Transmit+0x1f4>)
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 fa7a 	bl	8008f6c <I2C_WaitOnFlagUntilTimeout>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008a7e:	2302      	movs	r3, #2
 8008a80:	e0d3      	b.n	8008c2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d101      	bne.n	8008a90 <HAL_I2C_Master_Transmit+0x50>
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	e0cc      	b.n	8008c2a <HAL_I2C_Master_Transmit+0x1ea>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d007      	beq.n	8008ab6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f042 0201 	orr.w	r2, r2, #1
 8008ab4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ac4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2221      	movs	r2, #33	; 0x21
 8008aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2210      	movs	r2, #16
 8008ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	893a      	ldrh	r2, [r7, #8]
 8008ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	4a50      	ldr	r2, [pc, #320]	; (8008c38 <HAL_I2C_Master_Transmit+0x1f8>)
 8008af6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008af8:	8979      	ldrh	r1, [r7, #10]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	6a3a      	ldr	r2, [r7, #32]
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f000 f9be 	bl	8008e80 <I2C_MasterRequestWrite>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e08d      	b.n	8008c2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b0e:	2300      	movs	r3, #0
 8008b10:	613b      	str	r3, [r7, #16]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	613b      	str	r3, [r7, #16]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	613b      	str	r3, [r7, #16]
 8008b22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008b24:	e066      	b.n	8008bf4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	6a39      	ldr	r1, [r7, #32]
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 faf4 	bl	8009118 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00d      	beq.n	8008b52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3a:	2b04      	cmp	r3, #4
 8008b3c:	d107      	bne.n	8008b4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e06b      	b.n	8008c2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	781a      	ldrb	r2, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	695b      	ldr	r3, [r3, #20]
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b04      	cmp	r3, #4
 8008b8e:	d11b      	bne.n	8008bc8 <HAL_I2C_Master_Transmit+0x188>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d017      	beq.n	8008bc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9c:	781a      	ldrb	r2, [r3, #0]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	6a39      	ldr	r1, [r7, #32]
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 fae4 	bl	800919a <I2C_WaitOnBTFFlagUntilTimeout>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00d      	beq.n	8008bf4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	d107      	bne.n	8008bf0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e01a      	b.n	8008c2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d194      	bne.n	8008b26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	e000      	b.n	8008c2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008c28:	2302      	movs	r3, #2
  }
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	00100002 	.word	0x00100002
 8008c38:	ffff0000 	.word	0xffff0000

08008c3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08a      	sub	sp, #40	; 0x28
 8008c40:	af02      	add	r7, sp, #8
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	607a      	str	r2, [r7, #4]
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008c4c:	f7fd fe76 	bl	800693c <HAL_GetTick>
 8008c50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8008c52:	2301      	movs	r3, #1
 8008c54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b20      	cmp	r3, #32
 8008c60:	f040 8105 	bne.w	8008e6e <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	2319      	movs	r3, #25
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	4982      	ldr	r1, [pc, #520]	; (8008e78 <HAL_I2C_IsDeviceReady+0x23c>)
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 f97c 	bl	8008f6c <I2C_WaitOnFlagUntilTimeout>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	e0f8      	b.n	8008e70 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d101      	bne.n	8008c8c <HAL_I2C_IsDeviceReady+0x50>
 8008c88:	2302      	movs	r3, #2
 8008c8a:	e0f1      	b.n	8008e70 <HAL_I2C_IsDeviceReady+0x234>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d007      	beq.n	8008cb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f042 0201 	orr.w	r2, r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2224      	movs	r2, #36	; 0x24
 8008cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4a6a      	ldr	r2, [pc, #424]	; (8008e7c <HAL_I2C_IsDeviceReady+0x240>)
 8008cd4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ce4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 f93a 	bl	8008f6c <I2C_WaitOnFlagUntilTimeout>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e0b6      	b.n	8008e70 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008d02:	897b      	ldrh	r3, [r7, #10]
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	461a      	mov	r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008d10:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008d12:	f7fd fe13 	bl	800693c <HAL_GetTick>
 8008d16:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	bf0c      	ite	eq
 8008d26:	2301      	moveq	r3, #1
 8008d28:	2300      	movne	r3, #0
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d3c:	bf0c      	ite	eq
 8008d3e:	2301      	moveq	r3, #1
 8008d40:	2300      	movne	r3, #0
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008d46:	e025      	b.n	8008d94 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d48:	f7fd fdf8 	bl	800693c <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d302      	bcc.n	8008d5e <HAL_I2C_IsDeviceReady+0x122>
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d103      	bne.n	8008d66 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	22a0      	movs	r2, #160	; 0xa0
 8008d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	bf0c      	ite	eq
 8008d74:	2301      	moveq	r3, #1
 8008d76:	2300      	movne	r3, #0
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d8a:	bf0c      	ite	eq
 8008d8c:	2301      	moveq	r3, #1
 8008d8e:	2300      	movne	r3, #0
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2ba0      	cmp	r3, #160	; 0xa0
 8008d9e:	d005      	beq.n	8008dac <HAL_I2C_IsDeviceReady+0x170>
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d102      	bne.n	8008dac <HAL_I2C_IsDeviceReady+0x170>
 8008da6:	7dbb      	ldrb	r3, [r7, #22]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d0cd      	beq.n	8008d48 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	f003 0302 	and.w	r3, r3, #2
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d129      	bne.n	8008e16 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dd0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	613b      	str	r3, [r7, #16]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	613b      	str	r3, [r7, #16]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	613b      	str	r3, [r7, #16]
 8008de6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	2319      	movs	r3, #25
 8008dee:	2201      	movs	r2, #1
 8008df0:	4921      	ldr	r1, [pc, #132]	; (8008e78 <HAL_I2C_IsDeviceReady+0x23c>)
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f000 f8ba 	bl	8008f6c <I2C_WaitOnFlagUntilTimeout>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d001      	beq.n	8008e02 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e036      	b.n	8008e70 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	e02c      	b.n	8008e70 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e24:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e2e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	2319      	movs	r3, #25
 8008e36:	2201      	movs	r2, #1
 8008e38:	490f      	ldr	r1, [pc, #60]	; (8008e78 <HAL_I2C_IsDeviceReady+0x23c>)
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 f896 	bl	8008f6c <I2C_WaitOnFlagUntilTimeout>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e012      	b.n	8008e70 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	f4ff af3e 	bcc.w	8008cd6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e000      	b.n	8008e70 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8008e6e:	2302      	movs	r3, #2
  }
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3720      	adds	r7, #32
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	00100002 	.word	0x00100002
 8008e7c:	ffff0000 	.word	0xffff0000

08008e80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b088      	sub	sp, #32
 8008e84:	af02      	add	r7, sp, #8
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	607a      	str	r2, [r7, #4]
 8008e8a:	603b      	str	r3, [r7, #0]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	d006      	beq.n	8008eaa <I2C_MasterRequestWrite+0x2a>
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d003      	beq.n	8008eaa <I2C_MasterRequestWrite+0x2a>
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ea8:	d108      	bne.n	8008ebc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	e00b      	b.n	8008ed4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec0:	2b12      	cmp	r3, #18
 8008ec2:	d107      	bne.n	8008ed4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ed2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 f843 	bl	8008f6c <I2C_WaitOnFlagUntilTimeout>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e035      	b.n	8008f5c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ef8:	d108      	bne.n	8008f0c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008efa:	897b      	ldrh	r3, [r7, #10]
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	461a      	mov	r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f08:	611a      	str	r2, [r3, #16]
 8008f0a:	e01b      	b.n	8008f44 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008f0c:	897b      	ldrh	r3, [r7, #10]
 8008f0e:	11db      	asrs	r3, r3, #7
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	f003 0306 	and.w	r3, r3, #6
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	f063 030f 	orn	r3, r3, #15
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	490e      	ldr	r1, [pc, #56]	; (8008f64 <I2C_MasterRequestWrite+0xe4>)
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 f875 	bl	800901a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e010      	b.n	8008f5c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008f3a:	897b      	ldrh	r3, [r7, #10]
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	4907      	ldr	r1, [pc, #28]	; (8008f68 <I2C_MasterRequestWrite+0xe8>)
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f000 f865 	bl	800901a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e000      	b.n	8008f5c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	00010008 	.word	0x00010008
 8008f68:	00010002 	.word	0x00010002

08008f6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	603b      	str	r3, [r7, #0]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f7c:	e025      	b.n	8008fca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f84:	d021      	beq.n	8008fca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f86:	f7fd fcd9 	bl	800693c <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d302      	bcc.n	8008f9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d116      	bne.n	8008fca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2220      	movs	r2, #32
 8008fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	f043 0220 	orr.w	r2, r3, #32
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e023      	b.n	8009012 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	0c1b      	lsrs	r3, r3, #16
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d10d      	bne.n	8008ff0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	43da      	mvns	r2, r3
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	4013      	ands	r3, r2
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	bf0c      	ite	eq
 8008fe6:	2301      	moveq	r3, #1
 8008fe8:	2300      	movne	r3, #0
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	461a      	mov	r2, r3
 8008fee:	e00c      	b.n	800900a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	43da      	mvns	r2, r3
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bf0c      	ite	eq
 8009002:	2301      	moveq	r3, #1
 8009004:	2300      	movne	r3, #0
 8009006:	b2db      	uxtb	r3, r3
 8009008:	461a      	mov	r2, r3
 800900a:	79fb      	ldrb	r3, [r7, #7]
 800900c:	429a      	cmp	r2, r3
 800900e:	d0b6      	beq.n	8008f7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b084      	sub	sp, #16
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	607a      	str	r2, [r7, #4]
 8009026:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009028:	e051      	b.n	80090ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	695b      	ldr	r3, [r3, #20]
 8009030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009038:	d123      	bne.n	8009082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009048:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009052:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2220      	movs	r2, #32
 800905e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906e:	f043 0204 	orr.w	r2, r3, #4
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e046      	b.n	8009110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009088:	d021      	beq.n	80090ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800908a:	f7fd fc57 	bl	800693c <HAL_GetTick>
 800908e:	4602      	mov	r2, r0
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	429a      	cmp	r2, r3
 8009098:	d302      	bcc.n	80090a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d116      	bne.n	80090ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2220      	movs	r2, #32
 80090aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ba:	f043 0220 	orr.w	r2, r3, #32
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e020      	b.n	8009110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	0c1b      	lsrs	r3, r3, #16
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d10c      	bne.n	80090f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	43da      	mvns	r2, r3
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	4013      	ands	r3, r2
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	bf14      	ite	ne
 80090ea:	2301      	movne	r3, #1
 80090ec:	2300      	moveq	r3, #0
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	e00b      	b.n	800910a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	43da      	mvns	r2, r3
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	4013      	ands	r3, r2
 80090fe:	b29b      	uxth	r3, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	bf14      	ite	ne
 8009104:	2301      	movne	r3, #1
 8009106:	2300      	moveq	r3, #0
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d18d      	bne.n	800902a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009124:	e02d      	b.n	8009182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 f878 	bl	800921c <I2C_IsAcknowledgeFailed>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e02d      	b.n	8009192 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913c:	d021      	beq.n	8009182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800913e:	f7fd fbfd 	bl	800693c <HAL_GetTick>
 8009142:	4602      	mov	r2, r0
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	429a      	cmp	r2, r3
 800914c:	d302      	bcc.n	8009154 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d116      	bne.n	8009182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2220      	movs	r2, #32
 800915e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916e:	f043 0220 	orr.w	r2, r3, #32
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e007      	b.n	8009192 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	695b      	ldr	r3, [r3, #20]
 8009188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800918c:	2b80      	cmp	r3, #128	; 0x80
 800918e:	d1ca      	bne.n	8009126 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	60f8      	str	r0, [r7, #12]
 80091a2:	60b9      	str	r1, [r7, #8]
 80091a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80091a6:	e02d      	b.n	8009204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f000 f837 	bl	800921c <I2C_IsAcknowledgeFailed>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d001      	beq.n	80091b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	e02d      	b.n	8009214 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091be:	d021      	beq.n	8009204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091c0:	f7fd fbbc 	bl	800693c <HAL_GetTick>
 80091c4:	4602      	mov	r2, r0
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d302      	bcc.n	80091d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d116      	bne.n	8009204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2220      	movs	r2, #32
 80091e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f0:	f043 0220 	orr.w	r2, r3, #32
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e007      	b.n	8009214 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	f003 0304 	and.w	r3, r3, #4
 800920e:	2b04      	cmp	r3, #4
 8009210:	d1ca      	bne.n	80091a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800922e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009232:	d11b      	bne.n	800926c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800923c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2220      	movs	r2, #32
 8009248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009258:	f043 0204 	orr.w	r2, r3, #4
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e000      	b.n	800926e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	bc80      	pop	{r7}
 8009276:	4770      	bx	lr

08009278 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e02b      	b.n	80092e2 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009292:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f245 5255 	movw	r2, #21845	; 0x5555
 800929c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	6852      	ldr	r2, [r2, #4]
 80092a6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6892      	ldr	r2, [r2, #8]
 80092b0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80092b2:	f7fd fb43 	bl	800693c <HAL_GetTick>
 80092b6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 80092b8:	e008      	b.n	80092cc <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80092ba:	f7fd fb3f 	bl	800693c <HAL_GetTick>
 80092be:	4602      	mov	r2, r0
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	2b30      	cmp	r3, #48	; 0x30
 80092c6:	d901      	bls.n	80092cc <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e00a      	b.n	80092e2 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != RESET)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1f1      	bne.n	80092ba <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80092de:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b083      	sub	sp, #12
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80092fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	370c      	adds	r7, #12
 8009302:	46bd      	mov	sp, r7
 8009304:	bc80      	pop	{r7}
 8009306:	4770      	bx	lr

08009308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d101      	bne.n	800931a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e26c      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b00      	cmp	r3, #0
 8009324:	f000 8087 	beq.w	8009436 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009328:	4b92      	ldr	r3, [pc, #584]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	f003 030c 	and.w	r3, r3, #12
 8009330:	2b04      	cmp	r3, #4
 8009332:	d00c      	beq.n	800934e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009334:	4b8f      	ldr	r3, [pc, #572]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f003 030c 	and.w	r3, r3, #12
 800933c:	2b08      	cmp	r3, #8
 800933e:	d112      	bne.n	8009366 <HAL_RCC_OscConfig+0x5e>
 8009340:	4b8c      	ldr	r3, [pc, #560]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800934c:	d10b      	bne.n	8009366 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800934e:	4b89      	ldr	r3, [pc, #548]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009356:	2b00      	cmp	r3, #0
 8009358:	d06c      	beq.n	8009434 <HAL_RCC_OscConfig+0x12c>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d168      	bne.n	8009434 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e246      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800936e:	d106      	bne.n	800937e <HAL_RCC_OscConfig+0x76>
 8009370:	4b80      	ldr	r3, [pc, #512]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a7f      	ldr	r2, [pc, #508]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800937a:	6013      	str	r3, [r2, #0]
 800937c:	e02e      	b.n	80093dc <HAL_RCC_OscConfig+0xd4>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10c      	bne.n	80093a0 <HAL_RCC_OscConfig+0x98>
 8009386:	4b7b      	ldr	r3, [pc, #492]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a7a      	ldr	r2, [pc, #488]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 800938c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009390:	6013      	str	r3, [r2, #0]
 8009392:	4b78      	ldr	r3, [pc, #480]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a77      	ldr	r2, [pc, #476]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	e01d      	b.n	80093dc <HAL_RCC_OscConfig+0xd4>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093a8:	d10c      	bne.n	80093c4 <HAL_RCC_OscConfig+0xbc>
 80093aa:	4b72      	ldr	r3, [pc, #456]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a71      	ldr	r2, [pc, #452]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 80093b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	4b6f      	ldr	r3, [pc, #444]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a6e      	ldr	r2, [pc, #440]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 80093bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	e00b      	b.n	80093dc <HAL_RCC_OscConfig+0xd4>
 80093c4:	4b6b      	ldr	r3, [pc, #428]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a6a      	ldr	r2, [pc, #424]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 80093ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093ce:	6013      	str	r3, [r2, #0]
 80093d0:	4b68      	ldr	r3, [pc, #416]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a67      	ldr	r2, [pc, #412]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 80093d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d013      	beq.n	800940c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093e4:	f7fd faaa 	bl	800693c <HAL_GetTick>
 80093e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093ea:	e008      	b.n	80093fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093ec:	f7fd faa6 	bl	800693c <HAL_GetTick>
 80093f0:	4602      	mov	r2, r0
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	2b64      	cmp	r3, #100	; 0x64
 80093f8:	d901      	bls.n	80093fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e1fa      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093fe:	4b5d      	ldr	r3, [pc, #372]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009406:	2b00      	cmp	r3, #0
 8009408:	d0f0      	beq.n	80093ec <HAL_RCC_OscConfig+0xe4>
 800940a:	e014      	b.n	8009436 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800940c:	f7fd fa96 	bl	800693c <HAL_GetTick>
 8009410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009412:	e008      	b.n	8009426 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009414:	f7fd fa92 	bl	800693c <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	2b64      	cmp	r3, #100	; 0x64
 8009420:	d901      	bls.n	8009426 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	e1e6      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009426:	4b53      	ldr	r3, [pc, #332]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1f0      	bne.n	8009414 <HAL_RCC_OscConfig+0x10c>
 8009432:	e000      	b.n	8009436 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 0302 	and.w	r3, r3, #2
 800943e:	2b00      	cmp	r3, #0
 8009440:	d063      	beq.n	800950a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009442:	4b4c      	ldr	r3, [pc, #304]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	f003 030c 	and.w	r3, r3, #12
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00b      	beq.n	8009466 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800944e:	4b49      	ldr	r3, [pc, #292]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f003 030c 	and.w	r3, r3, #12
 8009456:	2b08      	cmp	r3, #8
 8009458:	d11c      	bne.n	8009494 <HAL_RCC_OscConfig+0x18c>
 800945a:	4b46      	ldr	r3, [pc, #280]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d116      	bne.n	8009494 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009466:	4b43      	ldr	r3, [pc, #268]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0302 	and.w	r3, r3, #2
 800946e:	2b00      	cmp	r3, #0
 8009470:	d005      	beq.n	800947e <HAL_RCC_OscConfig+0x176>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d001      	beq.n	800947e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e1ba      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800947e:	4b3d      	ldr	r3, [pc, #244]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	4939      	ldr	r1, [pc, #228]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 800948e:	4313      	orrs	r3, r2
 8009490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009492:	e03a      	b.n	800950a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d020      	beq.n	80094de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800949c:	4b36      	ldr	r3, [pc, #216]	; (8009578 <HAL_RCC_OscConfig+0x270>)
 800949e:	2201      	movs	r2, #1
 80094a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094a2:	f7fd fa4b 	bl	800693c <HAL_GetTick>
 80094a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094a8:	e008      	b.n	80094bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094aa:	f7fd fa47 	bl	800693c <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d901      	bls.n	80094bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e19b      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094bc:	4b2d      	ldr	r3, [pc, #180]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0302 	and.w	r3, r3, #2
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d0f0      	beq.n	80094aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094c8:	4b2a      	ldr	r3, [pc, #168]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	00db      	lsls	r3, r3, #3
 80094d6:	4927      	ldr	r1, [pc, #156]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	600b      	str	r3, [r1, #0]
 80094dc:	e015      	b.n	800950a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094de:	4b26      	ldr	r3, [pc, #152]	; (8009578 <HAL_RCC_OscConfig+0x270>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094e4:	f7fd fa2a 	bl	800693c <HAL_GetTick>
 80094e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094ea:	e008      	b.n	80094fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094ec:	f7fd fa26 	bl	800693c <HAL_GetTick>
 80094f0:	4602      	mov	r2, r0
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d901      	bls.n	80094fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e17a      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094fe:	4b1d      	ldr	r3, [pc, #116]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 0302 	and.w	r3, r3, #2
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1f0      	bne.n	80094ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0308 	and.w	r3, r3, #8
 8009512:	2b00      	cmp	r3, #0
 8009514:	d03a      	beq.n	800958c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d019      	beq.n	8009552 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800951e:	4b17      	ldr	r3, [pc, #92]	; (800957c <HAL_RCC_OscConfig+0x274>)
 8009520:	2201      	movs	r2, #1
 8009522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009524:	f7fd fa0a 	bl	800693c <HAL_GetTick>
 8009528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800952a:	e008      	b.n	800953e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800952c:	f7fd fa06 	bl	800693c <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	2b02      	cmp	r3, #2
 8009538:	d901      	bls.n	800953e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e15a      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800953e:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <HAL_RCC_OscConfig+0x26c>)
 8009540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009542:	f003 0302 	and.w	r3, r3, #2
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0f0      	beq.n	800952c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800954a:	2001      	movs	r0, #1
 800954c:	f000 fada 	bl	8009b04 <RCC_Delay>
 8009550:	e01c      	b.n	800958c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009552:	4b0a      	ldr	r3, [pc, #40]	; (800957c <HAL_RCC_OscConfig+0x274>)
 8009554:	2200      	movs	r2, #0
 8009556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009558:	f7fd f9f0 	bl	800693c <HAL_GetTick>
 800955c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800955e:	e00f      	b.n	8009580 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009560:	f7fd f9ec 	bl	800693c <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	2b02      	cmp	r3, #2
 800956c:	d908      	bls.n	8009580 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e140      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
 8009572:	bf00      	nop
 8009574:	40021000 	.word	0x40021000
 8009578:	42420000 	.word	0x42420000
 800957c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009580:	4b9e      	ldr	r3, [pc, #632]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009584:	f003 0302 	and.w	r3, r3, #2
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e9      	bne.n	8009560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 0304 	and.w	r3, r3, #4
 8009594:	2b00      	cmp	r3, #0
 8009596:	f000 80a6 	beq.w	80096e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800959a:	2300      	movs	r3, #0
 800959c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800959e:	4b97      	ldr	r3, [pc, #604]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10d      	bne.n	80095c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095aa:	4b94      	ldr	r3, [pc, #592]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	4a93      	ldr	r2, [pc, #588]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 80095b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b4:	61d3      	str	r3, [r2, #28]
 80095b6:	4b91      	ldr	r3, [pc, #580]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095be:	60bb      	str	r3, [r7, #8]
 80095c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095c2:	2301      	movs	r3, #1
 80095c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095c6:	4b8e      	ldr	r3, [pc, #568]	; (8009800 <HAL_RCC_OscConfig+0x4f8>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d118      	bne.n	8009604 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80095d2:	4b8b      	ldr	r3, [pc, #556]	; (8009800 <HAL_RCC_OscConfig+0x4f8>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a8a      	ldr	r2, [pc, #552]	; (8009800 <HAL_RCC_OscConfig+0x4f8>)
 80095d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80095de:	f7fd f9ad 	bl	800693c <HAL_GetTick>
 80095e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095e4:	e008      	b.n	80095f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095e6:	f7fd f9a9 	bl	800693c <HAL_GetTick>
 80095ea:	4602      	mov	r2, r0
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	2b64      	cmp	r3, #100	; 0x64
 80095f2:	d901      	bls.n	80095f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80095f4:	2303      	movs	r3, #3
 80095f6:	e0fd      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095f8:	4b81      	ldr	r3, [pc, #516]	; (8009800 <HAL_RCC_OscConfig+0x4f8>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009600:	2b00      	cmp	r3, #0
 8009602:	d0f0      	beq.n	80095e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d106      	bne.n	800961a <HAL_RCC_OscConfig+0x312>
 800960c:	4b7b      	ldr	r3, [pc, #492]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 800960e:	6a1b      	ldr	r3, [r3, #32]
 8009610:	4a7a      	ldr	r2, [pc, #488]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009612:	f043 0301 	orr.w	r3, r3, #1
 8009616:	6213      	str	r3, [r2, #32]
 8009618:	e02d      	b.n	8009676 <HAL_RCC_OscConfig+0x36e>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10c      	bne.n	800963c <HAL_RCC_OscConfig+0x334>
 8009622:	4b76      	ldr	r3, [pc, #472]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	4a75      	ldr	r2, [pc, #468]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009628:	f023 0301 	bic.w	r3, r3, #1
 800962c:	6213      	str	r3, [r2, #32]
 800962e:	4b73      	ldr	r3, [pc, #460]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	4a72      	ldr	r2, [pc, #456]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009634:	f023 0304 	bic.w	r3, r3, #4
 8009638:	6213      	str	r3, [r2, #32]
 800963a:	e01c      	b.n	8009676 <HAL_RCC_OscConfig+0x36e>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	2b05      	cmp	r3, #5
 8009642:	d10c      	bne.n	800965e <HAL_RCC_OscConfig+0x356>
 8009644:	4b6d      	ldr	r3, [pc, #436]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	4a6c      	ldr	r2, [pc, #432]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 800964a:	f043 0304 	orr.w	r3, r3, #4
 800964e:	6213      	str	r3, [r2, #32]
 8009650:	4b6a      	ldr	r3, [pc, #424]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	4a69      	ldr	r2, [pc, #420]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009656:	f043 0301 	orr.w	r3, r3, #1
 800965a:	6213      	str	r3, [r2, #32]
 800965c:	e00b      	b.n	8009676 <HAL_RCC_OscConfig+0x36e>
 800965e:	4b67      	ldr	r3, [pc, #412]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	4a66      	ldr	r2, [pc, #408]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009664:	f023 0301 	bic.w	r3, r3, #1
 8009668:	6213      	str	r3, [r2, #32]
 800966a:	4b64      	ldr	r3, [pc, #400]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	4a63      	ldr	r2, [pc, #396]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009670:	f023 0304 	bic.w	r3, r3, #4
 8009674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d015      	beq.n	80096aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800967e:	f7fd f95d 	bl	800693c <HAL_GetTick>
 8009682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009684:	e00a      	b.n	800969c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009686:	f7fd f959 	bl	800693c <HAL_GetTick>
 800968a:	4602      	mov	r2, r0
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	f241 3288 	movw	r2, #5000	; 0x1388
 8009694:	4293      	cmp	r3, r2
 8009696:	d901      	bls.n	800969c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e0ab      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800969c:	4b57      	ldr	r3, [pc, #348]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	f003 0302 	and.w	r3, r3, #2
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d0ee      	beq.n	8009686 <HAL_RCC_OscConfig+0x37e>
 80096a8:	e014      	b.n	80096d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096aa:	f7fd f947 	bl	800693c <HAL_GetTick>
 80096ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80096b0:	e00a      	b.n	80096c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096b2:	f7fd f943 	bl	800693c <HAL_GetTick>
 80096b6:	4602      	mov	r2, r0
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d901      	bls.n	80096c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e095      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80096c8:	4b4c      	ldr	r3, [pc, #304]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	f003 0302 	and.w	r3, r3, #2
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1ee      	bne.n	80096b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80096d4:	7dfb      	ldrb	r3, [r7, #23]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d105      	bne.n	80096e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096da:	4b48      	ldr	r3, [pc, #288]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	4a47      	ldr	r2, [pc, #284]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 80096e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	69db      	ldr	r3, [r3, #28]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f000 8081 	beq.w	80097f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80096f0:	4b42      	ldr	r3, [pc, #264]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f003 030c 	and.w	r3, r3, #12
 80096f8:	2b08      	cmp	r3, #8
 80096fa:	d061      	beq.n	80097c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	69db      	ldr	r3, [r3, #28]
 8009700:	2b02      	cmp	r3, #2
 8009702:	d146      	bne.n	8009792 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009704:	4b3f      	ldr	r3, [pc, #252]	; (8009804 <HAL_RCC_OscConfig+0x4fc>)
 8009706:	2200      	movs	r2, #0
 8009708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800970a:	f7fd f917 	bl	800693c <HAL_GetTick>
 800970e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009710:	e008      	b.n	8009724 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009712:	f7fd f913 	bl	800693c <HAL_GetTick>
 8009716:	4602      	mov	r2, r0
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	2b02      	cmp	r3, #2
 800971e:	d901      	bls.n	8009724 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e067      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009724:	4b35      	ldr	r3, [pc, #212]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1f0      	bne.n	8009712 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009738:	d108      	bne.n	800974c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800973a:	4b30      	ldr	r3, [pc, #192]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	492d      	ldr	r1, [pc, #180]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009748:	4313      	orrs	r3, r2
 800974a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800974c:	4b2b      	ldr	r3, [pc, #172]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a19      	ldr	r1, [r3, #32]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975c:	430b      	orrs	r3, r1
 800975e:	4927      	ldr	r1, [pc, #156]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009760:	4313      	orrs	r3, r2
 8009762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009764:	4b27      	ldr	r3, [pc, #156]	; (8009804 <HAL_RCC_OscConfig+0x4fc>)
 8009766:	2201      	movs	r2, #1
 8009768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800976a:	f7fd f8e7 	bl	800693c <HAL_GetTick>
 800976e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009770:	e008      	b.n	8009784 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009772:	f7fd f8e3 	bl	800693c <HAL_GetTick>
 8009776:	4602      	mov	r2, r0
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	2b02      	cmp	r3, #2
 800977e:	d901      	bls.n	8009784 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009780:	2303      	movs	r3, #3
 8009782:	e037      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009784:	4b1d      	ldr	r3, [pc, #116]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d0f0      	beq.n	8009772 <HAL_RCC_OscConfig+0x46a>
 8009790:	e02f      	b.n	80097f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009792:	4b1c      	ldr	r3, [pc, #112]	; (8009804 <HAL_RCC_OscConfig+0x4fc>)
 8009794:	2200      	movs	r2, #0
 8009796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009798:	f7fd f8d0 	bl	800693c <HAL_GetTick>
 800979c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800979e:	e008      	b.n	80097b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097a0:	f7fd f8cc 	bl	800693c <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d901      	bls.n	80097b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e020      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80097b2:	4b12      	ldr	r3, [pc, #72]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1f0      	bne.n	80097a0 <HAL_RCC_OscConfig+0x498>
 80097be:	e018      	b.n	80097f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d101      	bne.n	80097cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e013      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80097cc:	4b0b      	ldr	r3, [pc, #44]	; (80097fc <HAL_RCC_OscConfig+0x4f4>)
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a1b      	ldr	r3, [r3, #32]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d106      	bne.n	80097ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d001      	beq.n	80097f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e000      	b.n	80097f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3718      	adds	r7, #24
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	40021000 	.word	0x40021000
 8009800:	40007000 	.word	0x40007000
 8009804:	42420060 	.word	0x42420060

08009808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e0d0      	b.n	80099be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800981c:	4b6a      	ldr	r3, [pc, #424]	; (80099c8 <HAL_RCC_ClockConfig+0x1c0>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0307 	and.w	r3, r3, #7
 8009824:	683a      	ldr	r2, [r7, #0]
 8009826:	429a      	cmp	r2, r3
 8009828:	d910      	bls.n	800984c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800982a:	4b67      	ldr	r3, [pc, #412]	; (80099c8 <HAL_RCC_ClockConfig+0x1c0>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f023 0207 	bic.w	r2, r3, #7
 8009832:	4965      	ldr	r1, [pc, #404]	; (80099c8 <HAL_RCC_ClockConfig+0x1c0>)
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	4313      	orrs	r3, r2
 8009838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800983a:	4b63      	ldr	r3, [pc, #396]	; (80099c8 <HAL_RCC_ClockConfig+0x1c0>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0307 	and.w	r3, r3, #7
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	429a      	cmp	r2, r3
 8009846:	d001      	beq.n	800984c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e0b8      	b.n	80099be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 0302 	and.w	r3, r3, #2
 8009854:	2b00      	cmp	r3, #0
 8009856:	d020      	beq.n	800989a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 0304 	and.w	r3, r3, #4
 8009860:	2b00      	cmp	r3, #0
 8009862:	d005      	beq.n	8009870 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009864:	4b59      	ldr	r3, [pc, #356]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	4a58      	ldr	r2, [pc, #352]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 800986a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800986e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0308 	and.w	r3, r3, #8
 8009878:	2b00      	cmp	r3, #0
 800987a:	d005      	beq.n	8009888 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800987c:	4b53      	ldr	r3, [pc, #332]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	4a52      	ldr	r2, [pc, #328]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 8009882:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009886:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009888:	4b50      	ldr	r3, [pc, #320]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	494d      	ldr	r1, [pc, #308]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 8009896:	4313      	orrs	r3, r2
 8009898:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d040      	beq.n	8009928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d107      	bne.n	80098be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098ae:	4b47      	ldr	r3, [pc, #284]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d115      	bne.n	80098e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e07f      	b.n	80099be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d107      	bne.n	80098d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098c6:	4b41      	ldr	r3, [pc, #260]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d109      	bne.n	80098e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e073      	b.n	80099be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098d6:	4b3d      	ldr	r3, [pc, #244]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0302 	and.w	r3, r3, #2
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d101      	bne.n	80098e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e06b      	b.n	80099be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80098e6:	4b39      	ldr	r3, [pc, #228]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f023 0203 	bic.w	r2, r3, #3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	4936      	ldr	r1, [pc, #216]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 80098f4:	4313      	orrs	r3, r2
 80098f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80098f8:	f7fd f820 	bl	800693c <HAL_GetTick>
 80098fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098fe:	e00a      	b.n	8009916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009900:	f7fd f81c 	bl	800693c <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	f241 3288 	movw	r2, #5000	; 0x1388
 800990e:	4293      	cmp	r3, r2
 8009910:	d901      	bls.n	8009916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e053      	b.n	80099be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009916:	4b2d      	ldr	r3, [pc, #180]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f003 020c 	and.w	r2, r3, #12
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	429a      	cmp	r2, r3
 8009926:	d1eb      	bne.n	8009900 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009928:	4b27      	ldr	r3, [pc, #156]	; (80099c8 <HAL_RCC_ClockConfig+0x1c0>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 0307 	and.w	r3, r3, #7
 8009930:	683a      	ldr	r2, [r7, #0]
 8009932:	429a      	cmp	r2, r3
 8009934:	d210      	bcs.n	8009958 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009936:	4b24      	ldr	r3, [pc, #144]	; (80099c8 <HAL_RCC_ClockConfig+0x1c0>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f023 0207 	bic.w	r2, r3, #7
 800993e:	4922      	ldr	r1, [pc, #136]	; (80099c8 <HAL_RCC_ClockConfig+0x1c0>)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	4313      	orrs	r3, r2
 8009944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009946:	4b20      	ldr	r3, [pc, #128]	; (80099c8 <HAL_RCC_ClockConfig+0x1c0>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 0307 	and.w	r3, r3, #7
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	429a      	cmp	r2, r3
 8009952:	d001      	beq.n	8009958 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e032      	b.n	80099be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0304 	and.w	r3, r3, #4
 8009960:	2b00      	cmp	r3, #0
 8009962:	d008      	beq.n	8009976 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009964:	4b19      	ldr	r3, [pc, #100]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	4916      	ldr	r1, [pc, #88]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 8009972:	4313      	orrs	r3, r2
 8009974:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0308 	and.w	r3, r3, #8
 800997e:	2b00      	cmp	r3, #0
 8009980:	d009      	beq.n	8009996 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009982:	4b12      	ldr	r3, [pc, #72]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	00db      	lsls	r3, r3, #3
 8009990:	490e      	ldr	r1, [pc, #56]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 8009992:	4313      	orrs	r3, r2
 8009994:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009996:	f000 f821 	bl	80099dc <HAL_RCC_GetSysClockFreq>
 800999a:	4601      	mov	r1, r0
 800999c:	4b0b      	ldr	r3, [pc, #44]	; (80099cc <HAL_RCC_ClockConfig+0x1c4>)
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	091b      	lsrs	r3, r3, #4
 80099a2:	f003 030f 	and.w	r3, r3, #15
 80099a6:	4a0a      	ldr	r2, [pc, #40]	; (80099d0 <HAL_RCC_ClockConfig+0x1c8>)
 80099a8:	5cd3      	ldrb	r3, [r2, r3]
 80099aa:	fa21 f303 	lsr.w	r3, r1, r3
 80099ae:	4a09      	ldr	r2, [pc, #36]	; (80099d4 <HAL_RCC_ClockConfig+0x1cc>)
 80099b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80099b2:	4b09      	ldr	r3, [pc, #36]	; (80099d8 <HAL_RCC_ClockConfig+0x1d0>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fc ff7e 	bl	80068b8 <HAL_InitTick>

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	40022000 	.word	0x40022000
 80099cc:	40021000 	.word	0x40021000
 80099d0:	0800d794 	.word	0x0800d794
 80099d4:	20000084 	.word	0x20000084
 80099d8:	20000088 	.word	0x20000088

080099dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099dc:	b490      	push	{r4, r7}
 80099de:	b08a      	sub	sp, #40	; 0x28
 80099e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80099e2:	4b2a      	ldr	r3, [pc, #168]	; (8009a8c <HAL_RCC_GetSysClockFreq+0xb0>)
 80099e4:	1d3c      	adds	r4, r7, #4
 80099e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80099e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80099ec:	4b28      	ldr	r3, [pc, #160]	; (8009a90 <HAL_RCC_GetSysClockFreq+0xb4>)
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	61fb      	str	r3, [r7, #28]
 80099f6:	2300      	movs	r3, #0
 80099f8:	61bb      	str	r3, [r7, #24]
 80099fa:	2300      	movs	r3, #0
 80099fc:	627b      	str	r3, [r7, #36]	; 0x24
 80099fe:	2300      	movs	r3, #0
 8009a00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009a02:	2300      	movs	r3, #0
 8009a04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009a06:	4b23      	ldr	r3, [pc, #140]	; (8009a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	f003 030c 	and.w	r3, r3, #12
 8009a12:	2b04      	cmp	r3, #4
 8009a14:	d002      	beq.n	8009a1c <HAL_RCC_GetSysClockFreq+0x40>
 8009a16:	2b08      	cmp	r3, #8
 8009a18:	d003      	beq.n	8009a22 <HAL_RCC_GetSysClockFreq+0x46>
 8009a1a:	e02d      	b.n	8009a78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009a1c:	4b1e      	ldr	r3, [pc, #120]	; (8009a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009a1e:	623b      	str	r3, [r7, #32]
      break;
 8009a20:	e02d      	b.n	8009a7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	0c9b      	lsrs	r3, r3, #18
 8009a26:	f003 030f 	and.w	r3, r3, #15
 8009a2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009a2e:	4413      	add	r3, r2
 8009a30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009a34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d013      	beq.n	8009a68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009a40:	4b14      	ldr	r3, [pc, #80]	; (8009a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	0c5b      	lsrs	r3, r3, #17
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009a4e:	4413      	add	r3, r2
 8009a50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009a54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	4a0f      	ldr	r2, [pc, #60]	; (8009a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009a5a:	fb02 f203 	mul.w	r2, r2, r3
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a64:	627b      	str	r3, [r7, #36]	; 0x24
 8009a66:	e004      	b.n	8009a72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	4a0c      	ldr	r2, [pc, #48]	; (8009a9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009a6c:	fb02 f303 	mul.w	r3, r2, r3
 8009a70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a74:	623b      	str	r3, [r7, #32]
      break;
 8009a76:	e002      	b.n	8009a7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009a78:	4b07      	ldr	r3, [pc, #28]	; (8009a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009a7a:	623b      	str	r3, [r7, #32]
      break;
 8009a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3728      	adds	r7, #40	; 0x28
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bc90      	pop	{r4, r7}
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	0800ce14 	.word	0x0800ce14
 8009a90:	0800ce24 	.word	0x0800ce24
 8009a94:	40021000 	.word	0x40021000
 8009a98:	007a1200 	.word	0x007a1200
 8009a9c:	003d0900 	.word	0x003d0900

08009aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009aa4:	4b02      	ldr	r3, [pc, #8]	; (8009ab0 <HAL_RCC_GetHCLKFreq+0x10>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bc80      	pop	{r7}
 8009aae:	4770      	bx	lr
 8009ab0:	20000084 	.word	0x20000084

08009ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009ab8:	f7ff fff2 	bl	8009aa0 <HAL_RCC_GetHCLKFreq>
 8009abc:	4601      	mov	r1, r0
 8009abe:	4b05      	ldr	r3, [pc, #20]	; (8009ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	0a1b      	lsrs	r3, r3, #8
 8009ac4:	f003 0307 	and.w	r3, r3, #7
 8009ac8:	4a03      	ldr	r2, [pc, #12]	; (8009ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009aca:	5cd3      	ldrb	r3, [r2, r3]
 8009acc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	40021000 	.word	0x40021000
 8009ad8:	0800d7a4 	.word	0x0800d7a4

08009adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009ae0:	f7ff ffde 	bl	8009aa0 <HAL_RCC_GetHCLKFreq>
 8009ae4:	4601      	mov	r1, r0
 8009ae6:	4b05      	ldr	r3, [pc, #20]	; (8009afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	0adb      	lsrs	r3, r3, #11
 8009aec:	f003 0307 	and.w	r3, r3, #7
 8009af0:	4a03      	ldr	r2, [pc, #12]	; (8009b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009af2:	5cd3      	ldrb	r3, [r2, r3]
 8009af4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	40021000 	.word	0x40021000
 8009b00:	0800d7a4 	.word	0x0800d7a4

08009b04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009b0c:	4b0a      	ldr	r3, [pc, #40]	; (8009b38 <RCC_Delay+0x34>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a0a      	ldr	r2, [pc, #40]	; (8009b3c <RCC_Delay+0x38>)
 8009b12:	fba2 2303 	umull	r2, r3, r2, r3
 8009b16:	0a5b      	lsrs	r3, r3, #9
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	fb02 f303 	mul.w	r3, r2, r3
 8009b1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009b20:	bf00      	nop
  }
  while (Delay --);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	1e5a      	subs	r2, r3, #1
 8009b26:	60fa      	str	r2, [r7, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1f9      	bne.n	8009b20 <RCC_Delay+0x1c>
}
 8009b2c:	bf00      	nop
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bc80      	pop	{r7}
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	20000084 	.word	0x20000084
 8009b3c:	10624dd3 	.word	0x10624dd3

08009b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	613b      	str	r3, [r7, #16]
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d07d      	beq.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b60:	4b4f      	ldr	r3, [pc, #316]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b62:	69db      	ldr	r3, [r3, #28]
 8009b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10d      	bne.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b6c:	4b4c      	ldr	r3, [pc, #304]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b6e:	69db      	ldr	r3, [r3, #28]
 8009b70:	4a4b      	ldr	r2, [pc, #300]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b76:	61d3      	str	r3, [r2, #28]
 8009b78:	4b49      	ldr	r3, [pc, #292]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b7a:	69db      	ldr	r3, [r3, #28]
 8009b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b80:	60bb      	str	r3, [r7, #8]
 8009b82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b84:	2301      	movs	r3, #1
 8009b86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b88:	4b46      	ldr	r3, [pc, #280]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d118      	bne.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009b94:	4b43      	ldr	r3, [pc, #268]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a42      	ldr	r2, [pc, #264]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ba0:	f7fc fecc 	bl	800693c <HAL_GetTick>
 8009ba4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ba6:	e008      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ba8:	f7fc fec8 	bl	800693c <HAL_GetTick>
 8009bac:	4602      	mov	r2, r0
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	2b64      	cmp	r3, #100	; 0x64
 8009bb4:	d901      	bls.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e06d      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bba:	4b3a      	ldr	r3, [pc, #232]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d0f0      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009bc6:	4b36      	ldr	r3, [pc, #216]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d02e      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d027      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009be4:	4b2e      	ldr	r3, [pc, #184]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009be6:	6a1b      	ldr	r3, [r3, #32]
 8009be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009bee:	4b2e      	ldr	r3, [pc, #184]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009bf4:	4b2c      	ldr	r3, [pc, #176]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009bfa:	4a29      	ldr	r2, [pc, #164]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d014      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c0a:	f7fc fe97 	bl	800693c <HAL_GetTick>
 8009c0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c10:	e00a      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c12:	f7fc fe93 	bl	800693c <HAL_GetTick>
 8009c16:	4602      	mov	r2, r0
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d901      	bls.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e036      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c28:	4b1d      	ldr	r3, [pc, #116]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c2a:	6a1b      	ldr	r3, [r3, #32]
 8009c2c:	f003 0302 	and.w	r3, r3, #2
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d0ee      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c34:	4b1a      	ldr	r3, [pc, #104]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c36:	6a1b      	ldr	r3, [r3, #32]
 8009c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	4917      	ldr	r1, [pc, #92]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009c46:	7dfb      	ldrb	r3, [r7, #23]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d105      	bne.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c4c:	4b14      	ldr	r3, [pc, #80]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c4e:	69db      	ldr	r3, [r3, #28]
 8009c50:	4a13      	ldr	r2, [pc, #76]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 0302 	and.w	r3, r3, #2
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d008      	beq.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c64:	4b0e      	ldr	r3, [pc, #56]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	490b      	ldr	r1, [pc, #44]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f003 0310 	and.w	r3, r3, #16
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d008      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c82:	4b07      	ldr	r3, [pc, #28]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	4904      	ldr	r1, [pc, #16]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c90:	4313      	orrs	r3, r2
 8009c92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3718      	adds	r7, #24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	40021000 	.word	0x40021000
 8009ca4:	40007000 	.word	0x40007000
 8009ca8:	42420440 	.word	0x42420440

08009cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d101      	bne.n	8009cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e053      	b.n	8009d66 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7fa fa07 	bl	80040ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cf4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685a      	ldr	r2, [r3, #4]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	431a      	orrs	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	431a      	orrs	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d1a:	431a      	orrs	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	69db      	ldr	r3, [r3, #28]
 8009d20:	431a      	orrs	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	ea42 0103 	orr.w	r1, r2, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	430a      	orrs	r2, r1
 8009d34:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	0c1a      	lsrs	r2, r3, #16
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f002 0204 	and.w	r2, r2, #4
 8009d44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	69da      	ldr	r2, [r3, #28]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b082      	sub	sp, #8
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e01d      	b.n	8009dbc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d106      	bne.n	8009d9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7fc fc23 	bl	80065e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	3304      	adds	r3, #4
 8009daa:	4619      	mov	r1, r3
 8009dac:	4610      	mov	r0, r2
 8009dae:	f000 fa19 	bl	800a1e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68da      	ldr	r2, [r3, #12]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f042 0201 	orr.w	r2, r2, #1
 8009dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	f003 0307 	and.w	r3, r3, #7
 8009de6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2b06      	cmp	r3, #6
 8009dec:	d007      	beq.n	8009dfe <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f042 0201 	orr.w	r2, r2, #1
 8009dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bc80      	pop	{r7}
 8009e08:	4770      	bx	lr

08009e0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b082      	sub	sp, #8
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	f003 0302 	and.w	r3, r3, #2
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d122      	bne.n	8009e66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	f003 0302 	and.w	r3, r3, #2
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d11b      	bne.n	8009e66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f06f 0202 	mvn.w	r2, #2
 8009e36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	f003 0303 	and.w	r3, r3, #3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d003      	beq.n	8009e54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f9ad 	bl	800a1ac <HAL_TIM_IC_CaptureCallback>
 8009e52:	e005      	b.n	8009e60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f9a0 	bl	800a19a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f9af 	bl	800a1be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	f003 0304 	and.w	r3, r3, #4
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d122      	bne.n	8009eba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	f003 0304 	and.w	r3, r3, #4
 8009e7e:	2b04      	cmp	r3, #4
 8009e80:	d11b      	bne.n	8009eba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f06f 0204 	mvn.w	r2, #4
 8009e8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d003      	beq.n	8009ea8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f983 	bl	800a1ac <HAL_TIM_IC_CaptureCallback>
 8009ea6:	e005      	b.n	8009eb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f976 	bl	800a19a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f985 	bl	800a1be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	f003 0308 	and.w	r3, r3, #8
 8009ec4:	2b08      	cmp	r3, #8
 8009ec6:	d122      	bne.n	8009f0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	f003 0308 	and.w	r3, r3, #8
 8009ed2:	2b08      	cmp	r3, #8
 8009ed4:	d11b      	bne.n	8009f0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f06f 0208 	mvn.w	r2, #8
 8009ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2204      	movs	r2, #4
 8009ee4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	69db      	ldr	r3, [r3, #28]
 8009eec:	f003 0303 	and.w	r3, r3, #3
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d003      	beq.n	8009efc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f959 	bl	800a1ac <HAL_TIM_IC_CaptureCallback>
 8009efa:	e005      	b.n	8009f08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f94c 	bl	800a19a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f95b 	bl	800a1be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	f003 0310 	and.w	r3, r3, #16
 8009f18:	2b10      	cmp	r3, #16
 8009f1a:	d122      	bne.n	8009f62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	f003 0310 	and.w	r3, r3, #16
 8009f26:	2b10      	cmp	r3, #16
 8009f28:	d11b      	bne.n	8009f62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f06f 0210 	mvn.w	r2, #16
 8009f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2208      	movs	r2, #8
 8009f38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	69db      	ldr	r3, [r3, #28]
 8009f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d003      	beq.n	8009f50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f92f 	bl	800a1ac <HAL_TIM_IC_CaptureCallback>
 8009f4e:	e005      	b.n	8009f5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f922 	bl	800a19a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f931 	bl	800a1be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d10e      	bne.n	8009f8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d107      	bne.n	8009f8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f06f 0201 	mvn.w	r2, #1
 8009f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f8fd 	bl	800a188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f98:	2b80      	cmp	r3, #128	; 0x80
 8009f9a:	d10e      	bne.n	8009fba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa6:	2b80      	cmp	r3, #128	; 0x80
 8009fa8:	d107      	bne.n	8009fba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fa5a 	bl	800a46e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc4:	2b40      	cmp	r3, #64	; 0x40
 8009fc6:	d10e      	bne.n	8009fe6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd2:	2b40      	cmp	r3, #64	; 0x40
 8009fd4:	d107      	bne.n	8009fe6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 f8f5 	bl	800a1d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	f003 0320 	and.w	r3, r3, #32
 8009ff0:	2b20      	cmp	r3, #32
 8009ff2:	d10e      	bne.n	800a012 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	f003 0320 	and.w	r3, r3, #32
 8009ffe:	2b20      	cmp	r3, #32
 800a000:	d107      	bne.n	800a012 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f06f 0220 	mvn.w	r2, #32
 800a00a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fa25 	bl	800a45c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a012:	bf00      	nop
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d101      	bne.n	800a032 <HAL_TIM_ConfigClockSource+0x18>
 800a02e:	2302      	movs	r3, #2
 800a030:	e0a6      	b.n	800a180 <HAL_TIM_ConfigClockSource+0x166>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2202      	movs	r2, #2
 800a03e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a050:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a058:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b40      	cmp	r3, #64	; 0x40
 800a068:	d067      	beq.n	800a13a <HAL_TIM_ConfigClockSource+0x120>
 800a06a:	2b40      	cmp	r3, #64	; 0x40
 800a06c:	d80b      	bhi.n	800a086 <HAL_TIM_ConfigClockSource+0x6c>
 800a06e:	2b10      	cmp	r3, #16
 800a070:	d073      	beq.n	800a15a <HAL_TIM_ConfigClockSource+0x140>
 800a072:	2b10      	cmp	r3, #16
 800a074:	d802      	bhi.n	800a07c <HAL_TIM_ConfigClockSource+0x62>
 800a076:	2b00      	cmp	r3, #0
 800a078:	d06f      	beq.n	800a15a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a07a:	e078      	b.n	800a16e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a07c:	2b20      	cmp	r3, #32
 800a07e:	d06c      	beq.n	800a15a <HAL_TIM_ConfigClockSource+0x140>
 800a080:	2b30      	cmp	r3, #48	; 0x30
 800a082:	d06a      	beq.n	800a15a <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a084:	e073      	b.n	800a16e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a086:	2b70      	cmp	r3, #112	; 0x70
 800a088:	d00d      	beq.n	800a0a6 <HAL_TIM_ConfigClockSource+0x8c>
 800a08a:	2b70      	cmp	r3, #112	; 0x70
 800a08c:	d804      	bhi.n	800a098 <HAL_TIM_ConfigClockSource+0x7e>
 800a08e:	2b50      	cmp	r3, #80	; 0x50
 800a090:	d033      	beq.n	800a0fa <HAL_TIM_ConfigClockSource+0xe0>
 800a092:	2b60      	cmp	r3, #96	; 0x60
 800a094:	d041      	beq.n	800a11a <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a096:	e06a      	b.n	800a16e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a09c:	d066      	beq.n	800a16c <HAL_TIM_ConfigClockSource+0x152>
 800a09e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0a2:	d017      	beq.n	800a0d4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a0a4:	e063      	b.n	800a16e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6818      	ldr	r0, [r3, #0]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	6899      	ldr	r1, [r3, #8]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	f000 f96e 	bl	800a396 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a0c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	609a      	str	r2, [r3, #8]
      break;
 800a0d2:	e04c      	b.n	800a16e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6818      	ldr	r0, [r3, #0]
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	6899      	ldr	r1, [r3, #8]
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	f000 f957 	bl	800a396 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	689a      	ldr	r2, [r3, #8]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0f6:	609a      	str	r2, [r3, #8]
      break;
 800a0f8:	e039      	b.n	800a16e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6818      	ldr	r0, [r3, #0]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	6859      	ldr	r1, [r3, #4]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	461a      	mov	r2, r3
 800a108:	f000 f8ce 	bl	800a2a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2150      	movs	r1, #80	; 0x50
 800a112:	4618      	mov	r0, r3
 800a114:	f000 f925 	bl	800a362 <TIM_ITRx_SetConfig>
      break;
 800a118:	e029      	b.n	800a16e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6818      	ldr	r0, [r3, #0]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	6859      	ldr	r1, [r3, #4]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	461a      	mov	r2, r3
 800a128:	f000 f8ec 	bl	800a304 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2160      	movs	r1, #96	; 0x60
 800a132:	4618      	mov	r0, r3
 800a134:	f000 f915 	bl	800a362 <TIM_ITRx_SetConfig>
      break;
 800a138:	e019      	b.n	800a16e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6818      	ldr	r0, [r3, #0]
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	6859      	ldr	r1, [r3, #4]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	461a      	mov	r2, r3
 800a148:	f000 f8ae 	bl	800a2a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2140      	movs	r1, #64	; 0x40
 800a152:	4618      	mov	r0, r3
 800a154:	f000 f905 	bl	800a362 <TIM_ITRx_SetConfig>
      break;
 800a158:	e009      	b.n	800a16e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4619      	mov	r1, r3
 800a164:	4610      	mov	r0, r2
 800a166:	f000 f8fc 	bl	800a362 <TIM_ITRx_SetConfig>
      break;
 800a16a:	e000      	b.n	800a16e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a16c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2201      	movs	r2, #1
 800a172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	bc80      	pop	{r7}
 800a198:	4770      	bx	lr

0800a19a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b083      	sub	sp, #12
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a1a2:	bf00      	nop
 800a1a4:	370c      	adds	r7, #12
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bc80      	pop	{r7}
 800a1aa:	4770      	bx	lr

0800a1ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bc80      	pop	{r7}
 800a1bc:	4770      	bx	lr

0800a1be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	b083      	sub	sp, #12
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a1c6:	bf00      	nop
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bc80      	pop	{r7}
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bc80      	pop	{r7}
 800a1e0:	4770      	bx	lr
	...

0800a1e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a29      	ldr	r2, [pc, #164]	; (800a29c <TIM_Base_SetConfig+0xb8>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d00b      	beq.n	800a214 <TIM_Base_SetConfig+0x30>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a202:	d007      	beq.n	800a214 <TIM_Base_SetConfig+0x30>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a26      	ldr	r2, [pc, #152]	; (800a2a0 <TIM_Base_SetConfig+0xbc>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d003      	beq.n	800a214 <TIM_Base_SetConfig+0x30>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a25      	ldr	r2, [pc, #148]	; (800a2a4 <TIM_Base_SetConfig+0xc0>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d108      	bne.n	800a226 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a21a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	4313      	orrs	r3, r2
 800a224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a1c      	ldr	r2, [pc, #112]	; (800a29c <TIM_Base_SetConfig+0xb8>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d00b      	beq.n	800a246 <TIM_Base_SetConfig+0x62>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a234:	d007      	beq.n	800a246 <TIM_Base_SetConfig+0x62>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a19      	ldr	r2, [pc, #100]	; (800a2a0 <TIM_Base_SetConfig+0xbc>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d003      	beq.n	800a246 <TIM_Base_SetConfig+0x62>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a18      	ldr	r2, [pc, #96]	; (800a2a4 <TIM_Base_SetConfig+0xc0>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d108      	bne.n	800a258 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a24c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	4313      	orrs	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	4313      	orrs	r3, r2
 800a264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a07      	ldr	r2, [pc, #28]	; (800a29c <TIM_Base_SetConfig+0xb8>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d103      	bne.n	800a28c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	691a      	ldr	r2, [r3, #16]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	615a      	str	r2, [r3, #20]
}
 800a292:	bf00      	nop
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	bc80      	pop	{r7}
 800a29a:	4770      	bx	lr
 800a29c:	40012c00 	.word	0x40012c00
 800a2a0:	40000400 	.word	0x40000400
 800a2a4:	40000800 	.word	0x40000800

0800a2a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	f023 0201 	bic.w	r2, r3, #1
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	699b      	ldr	r3, [r3, #24]
 800a2ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	011b      	lsls	r3, r3, #4
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f023 030a 	bic.w	r3, r3, #10
 800a2e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	621a      	str	r2, [r3, #32]
}
 800a2fa:	bf00      	nop
 800a2fc:	371c      	adds	r7, #28
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bc80      	pop	{r7}
 800a302:	4770      	bx	lr

0800a304 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6a1b      	ldr	r3, [r3, #32]
 800a314:	f023 0210 	bic.w	r2, r3, #16
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a32e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	031b      	lsls	r3, r3, #12
 800a334:	697a      	ldr	r2, [r7, #20]
 800a336:	4313      	orrs	r3, r2
 800a338:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a340:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	011b      	lsls	r3, r3, #4
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	4313      	orrs	r3, r2
 800a34a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	621a      	str	r2, [r3, #32]
}
 800a358:	bf00      	nop
 800a35a:	371c      	adds	r7, #28
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bc80      	pop	{r7}
 800a360:	4770      	bx	lr

0800a362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a362:	b480      	push	{r7}
 800a364:	b085      	sub	sp, #20
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	4313      	orrs	r3, r2
 800a380:	f043 0307 	orr.w	r3, r3, #7
 800a384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	609a      	str	r2, [r3, #8]
}
 800a38c:	bf00      	nop
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	bc80      	pop	{r7}
 800a394:	4770      	bx	lr

0800a396 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a396:	b480      	push	{r7}
 800a398:	b087      	sub	sp, #28
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	60b9      	str	r1, [r7, #8]
 800a3a0:	607a      	str	r2, [r7, #4]
 800a3a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	021a      	lsls	r2, r3, #8
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	431a      	orrs	r2, r3
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	697a      	ldr	r2, [r7, #20]
 800a3c8:	609a      	str	r2, [r3, #8]
}
 800a3ca:	bf00      	nop
 800a3cc:	371c      	adds	r7, #28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bc80      	pop	{r7}
 800a3d2:	4770      	bx	lr

0800a3d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d101      	bne.n	800a3ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	e032      	b.n	800a452 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a424:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	bc80      	pop	{r7}
 800a45a:	4770      	bx	lr

0800a45c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	bc80      	pop	{r7}
 800a46c:	4770      	bx	lr

0800a46e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a46e:	b480      	push	{r7}
 800a470:	b083      	sub	sp, #12
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a476:	bf00      	nop
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bc80      	pop	{r7}
 800a47e:	4770      	bx	lr

0800a480 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d101      	bne.n	800a492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e03f      	b.n	800a512 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d106      	bne.n	800a4ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7fc f92e 	bl	8006708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2224      	movs	r2, #36	; 0x24
 800a4b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68da      	ldr	r2, [r3, #12]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f829 	bl	800a51c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	691a      	ldr	r2, [r3, #16]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	695a      	ldr	r2, [r3, #20]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68da      	ldr	r2, [r3, #12]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2220      	movs	r2, #32
 800a504:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2220      	movs	r2, #32
 800a50c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
	...

0800a51c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68da      	ldr	r2, [r3, #12]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	430a      	orrs	r2, r1
 800a538:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	689a      	ldr	r2, [r3, #8]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	431a      	orrs	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	4313      	orrs	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a556:	f023 030c 	bic.w	r3, r3, #12
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	6812      	ldr	r2, [r2, #0]
 800a55e:	68f9      	ldr	r1, [r7, #12]
 800a560:	430b      	orrs	r3, r1
 800a562:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	699a      	ldr	r2, [r3, #24]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a52      	ldr	r2, [pc, #328]	; (800a6c8 <UART_SetConfig+0x1ac>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d14e      	bne.n	800a622 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a584:	f7ff faaa 	bl	8009adc <HAL_RCC_GetPCLK2Freq>
 800a588:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	4613      	mov	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	009a      	lsls	r2, r3, #2
 800a594:	441a      	add	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a0:	4a4a      	ldr	r2, [pc, #296]	; (800a6cc <UART_SetConfig+0x1b0>)
 800a5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5a6:	095b      	lsrs	r3, r3, #5
 800a5a8:	0119      	lsls	r1, r3, #4
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4413      	add	r3, r2
 800a5b2:	009a      	lsls	r2, r3, #2
 800a5b4:	441a      	add	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	fbb2 f2f3 	udiv	r2, r2, r3
 800a5c0:	4b42      	ldr	r3, [pc, #264]	; (800a6cc <UART_SetConfig+0x1b0>)
 800a5c2:	fba3 0302 	umull	r0, r3, r3, r2
 800a5c6:	095b      	lsrs	r3, r3, #5
 800a5c8:	2064      	movs	r0, #100	; 0x64
 800a5ca:	fb00 f303 	mul.w	r3, r0, r3
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	011b      	lsls	r3, r3, #4
 800a5d2:	3332      	adds	r3, #50	; 0x32
 800a5d4:	4a3d      	ldr	r2, [pc, #244]	; (800a6cc <UART_SetConfig+0x1b0>)
 800a5d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5da:	095b      	lsrs	r3, r3, #5
 800a5dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5e0:	4419      	add	r1, r3
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	009a      	lsls	r2, r3, #2
 800a5ec:	441a      	add	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a5f8:	4b34      	ldr	r3, [pc, #208]	; (800a6cc <UART_SetConfig+0x1b0>)
 800a5fa:	fba3 0302 	umull	r0, r3, r3, r2
 800a5fe:	095b      	lsrs	r3, r3, #5
 800a600:	2064      	movs	r0, #100	; 0x64
 800a602:	fb00 f303 	mul.w	r3, r0, r3
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	011b      	lsls	r3, r3, #4
 800a60a:	3332      	adds	r3, #50	; 0x32
 800a60c:	4a2f      	ldr	r2, [pc, #188]	; (800a6cc <UART_SetConfig+0x1b0>)
 800a60e:	fba2 2303 	umull	r2, r3, r2, r3
 800a612:	095b      	lsrs	r3, r3, #5
 800a614:	f003 020f 	and.w	r2, r3, #15
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	440a      	add	r2, r1
 800a61e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800a620:	e04d      	b.n	800a6be <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800a622:	f7ff fa47 	bl	8009ab4 <HAL_RCC_GetPCLK1Freq>
 800a626:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	4613      	mov	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4413      	add	r3, r2
 800a630:	009a      	lsls	r2, r3, #2
 800a632:	441a      	add	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a63e:	4a23      	ldr	r2, [pc, #140]	; (800a6cc <UART_SetConfig+0x1b0>)
 800a640:	fba2 2303 	umull	r2, r3, r2, r3
 800a644:	095b      	lsrs	r3, r3, #5
 800a646:	0119      	lsls	r1, r3, #4
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	4613      	mov	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	009a      	lsls	r2, r3, #2
 800a652:	441a      	add	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a65e:	4b1b      	ldr	r3, [pc, #108]	; (800a6cc <UART_SetConfig+0x1b0>)
 800a660:	fba3 0302 	umull	r0, r3, r3, r2
 800a664:	095b      	lsrs	r3, r3, #5
 800a666:	2064      	movs	r0, #100	; 0x64
 800a668:	fb00 f303 	mul.w	r3, r0, r3
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	011b      	lsls	r3, r3, #4
 800a670:	3332      	adds	r3, #50	; 0x32
 800a672:	4a16      	ldr	r2, [pc, #88]	; (800a6cc <UART_SetConfig+0x1b0>)
 800a674:	fba2 2303 	umull	r2, r3, r2, r3
 800a678:	095b      	lsrs	r3, r3, #5
 800a67a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a67e:	4419      	add	r1, r3
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	009a      	lsls	r2, r3, #2
 800a68a:	441a      	add	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	fbb2 f2f3 	udiv	r2, r2, r3
 800a696:	4b0d      	ldr	r3, [pc, #52]	; (800a6cc <UART_SetConfig+0x1b0>)
 800a698:	fba3 0302 	umull	r0, r3, r3, r2
 800a69c:	095b      	lsrs	r3, r3, #5
 800a69e:	2064      	movs	r0, #100	; 0x64
 800a6a0:	fb00 f303 	mul.w	r3, r0, r3
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	011b      	lsls	r3, r3, #4
 800a6a8:	3332      	adds	r3, #50	; 0x32
 800a6aa:	4a08      	ldr	r2, [pc, #32]	; (800a6cc <UART_SetConfig+0x1b0>)
 800a6ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b0:	095b      	lsrs	r3, r3, #5
 800a6b2:	f003 020f 	and.w	r2, r3, #15
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	440a      	add	r2, r1
 800a6bc:	609a      	str	r2, [r3, #8]
}
 800a6be:	bf00      	nop
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	40013800 	.word	0x40013800
 800a6cc:	51eb851f 	.word	0x51eb851f

0800a6d0 <__errno>:
 800a6d0:	4b01      	ldr	r3, [pc, #4]	; (800a6d8 <__errno+0x8>)
 800a6d2:	6818      	ldr	r0, [r3, #0]
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	20000090 	.word	0x20000090

0800a6dc <__libc_init_array>:
 800a6dc:	b570      	push	{r4, r5, r6, lr}
 800a6de:	2500      	movs	r5, #0
 800a6e0:	4e0c      	ldr	r6, [pc, #48]	; (800a714 <__libc_init_array+0x38>)
 800a6e2:	4c0d      	ldr	r4, [pc, #52]	; (800a718 <__libc_init_array+0x3c>)
 800a6e4:	1ba4      	subs	r4, r4, r6
 800a6e6:	10a4      	asrs	r4, r4, #2
 800a6e8:	42a5      	cmp	r5, r4
 800a6ea:	d109      	bne.n	800a700 <__libc_init_array+0x24>
 800a6ec:	f002 fafe 	bl	800ccec <_init>
 800a6f0:	2500      	movs	r5, #0
 800a6f2:	4e0a      	ldr	r6, [pc, #40]	; (800a71c <__libc_init_array+0x40>)
 800a6f4:	4c0a      	ldr	r4, [pc, #40]	; (800a720 <__libc_init_array+0x44>)
 800a6f6:	1ba4      	subs	r4, r4, r6
 800a6f8:	10a4      	asrs	r4, r4, #2
 800a6fa:	42a5      	cmp	r5, r4
 800a6fc:	d105      	bne.n	800a70a <__libc_init_array+0x2e>
 800a6fe:	bd70      	pop	{r4, r5, r6, pc}
 800a700:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a704:	4798      	blx	r3
 800a706:	3501      	adds	r5, #1
 800a708:	e7ee      	b.n	800a6e8 <__libc_init_array+0xc>
 800a70a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a70e:	4798      	blx	r3
 800a710:	3501      	adds	r5, #1
 800a712:	e7f2      	b.n	800a6fa <__libc_init_array+0x1e>
 800a714:	0800da34 	.word	0x0800da34
 800a718:	0800da34 	.word	0x0800da34
 800a71c:	0800da34 	.word	0x0800da34
 800a720:	0800da38 	.word	0x0800da38

0800a724 <__itoa>:
 800a724:	1e93      	subs	r3, r2, #2
 800a726:	2b22      	cmp	r3, #34	; 0x22
 800a728:	b510      	push	{r4, lr}
 800a72a:	460c      	mov	r4, r1
 800a72c:	d904      	bls.n	800a738 <__itoa+0x14>
 800a72e:	2300      	movs	r3, #0
 800a730:	461c      	mov	r4, r3
 800a732:	700b      	strb	r3, [r1, #0]
 800a734:	4620      	mov	r0, r4
 800a736:	bd10      	pop	{r4, pc}
 800a738:	2a0a      	cmp	r2, #10
 800a73a:	d109      	bne.n	800a750 <__itoa+0x2c>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	da07      	bge.n	800a750 <__itoa+0x2c>
 800a740:	232d      	movs	r3, #45	; 0x2d
 800a742:	700b      	strb	r3, [r1, #0]
 800a744:	2101      	movs	r1, #1
 800a746:	4240      	negs	r0, r0
 800a748:	4421      	add	r1, r4
 800a74a:	f000 fc9d 	bl	800b088 <__utoa>
 800a74e:	e7f1      	b.n	800a734 <__itoa+0x10>
 800a750:	2100      	movs	r1, #0
 800a752:	e7f9      	b.n	800a748 <__itoa+0x24>

0800a754 <itoa>:
 800a754:	f7ff bfe6 	b.w	800a724 <__itoa>

0800a758 <__locale_ctype_ptr>:
 800a758:	4b04      	ldr	r3, [pc, #16]	; (800a76c <__locale_ctype_ptr+0x14>)
 800a75a:	4a05      	ldr	r2, [pc, #20]	; (800a770 <__locale_ctype_ptr+0x18>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	6a1b      	ldr	r3, [r3, #32]
 800a760:	2b00      	cmp	r3, #0
 800a762:	bf08      	it	eq
 800a764:	4613      	moveq	r3, r2
 800a766:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800a76a:	4770      	bx	lr
 800a76c:	20000090 	.word	0x20000090
 800a770:	200000f4 	.word	0x200000f4

0800a774 <__ascii_mbtowc>:
 800a774:	b082      	sub	sp, #8
 800a776:	b901      	cbnz	r1, 800a77a <__ascii_mbtowc+0x6>
 800a778:	a901      	add	r1, sp, #4
 800a77a:	b142      	cbz	r2, 800a78e <__ascii_mbtowc+0x1a>
 800a77c:	b14b      	cbz	r3, 800a792 <__ascii_mbtowc+0x1e>
 800a77e:	7813      	ldrb	r3, [r2, #0]
 800a780:	600b      	str	r3, [r1, #0]
 800a782:	7812      	ldrb	r2, [r2, #0]
 800a784:	1c10      	adds	r0, r2, #0
 800a786:	bf18      	it	ne
 800a788:	2001      	movne	r0, #1
 800a78a:	b002      	add	sp, #8
 800a78c:	4770      	bx	lr
 800a78e:	4610      	mov	r0, r2
 800a790:	e7fb      	b.n	800a78a <__ascii_mbtowc+0x16>
 800a792:	f06f 0001 	mvn.w	r0, #1
 800a796:	e7f8      	b.n	800a78a <__ascii_mbtowc+0x16>

0800a798 <memset>:
 800a798:	4603      	mov	r3, r0
 800a79a:	4402      	add	r2, r0
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d100      	bne.n	800a7a2 <memset+0xa>
 800a7a0:	4770      	bx	lr
 800a7a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7a6:	e7f9      	b.n	800a79c <memset+0x4>

0800a7a8 <__cvt>:
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ae:	461e      	mov	r6, r3
 800a7b0:	bfbb      	ittet	lt
 800a7b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a7b6:	461e      	movlt	r6, r3
 800a7b8:	2300      	movge	r3, #0
 800a7ba:	232d      	movlt	r3, #45	; 0x2d
 800a7bc:	b088      	sub	sp, #32
 800a7be:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a7c0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800a7c4:	f027 0720 	bic.w	r7, r7, #32
 800a7c8:	2f46      	cmp	r7, #70	; 0x46
 800a7ca:	4614      	mov	r4, r2
 800a7cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a7ce:	700b      	strb	r3, [r1, #0]
 800a7d0:	d004      	beq.n	800a7dc <__cvt+0x34>
 800a7d2:	2f45      	cmp	r7, #69	; 0x45
 800a7d4:	d100      	bne.n	800a7d8 <__cvt+0x30>
 800a7d6:	3501      	adds	r5, #1
 800a7d8:	2302      	movs	r3, #2
 800a7da:	e000      	b.n	800a7de <__cvt+0x36>
 800a7dc:	2303      	movs	r3, #3
 800a7de:	aa07      	add	r2, sp, #28
 800a7e0:	9204      	str	r2, [sp, #16]
 800a7e2:	aa06      	add	r2, sp, #24
 800a7e4:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a7e8:	e9cd 3500 	strd	r3, r5, [sp]
 800a7ec:	4622      	mov	r2, r4
 800a7ee:	4633      	mov	r3, r6
 800a7f0:	f000 fd26 	bl	800b240 <_dtoa_r>
 800a7f4:	2f47      	cmp	r7, #71	; 0x47
 800a7f6:	4680      	mov	r8, r0
 800a7f8:	d102      	bne.n	800a800 <__cvt+0x58>
 800a7fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7fc:	07db      	lsls	r3, r3, #31
 800a7fe:	d526      	bpl.n	800a84e <__cvt+0xa6>
 800a800:	2f46      	cmp	r7, #70	; 0x46
 800a802:	eb08 0905 	add.w	r9, r8, r5
 800a806:	d111      	bne.n	800a82c <__cvt+0x84>
 800a808:	f898 3000 	ldrb.w	r3, [r8]
 800a80c:	2b30      	cmp	r3, #48	; 0x30
 800a80e:	d10a      	bne.n	800a826 <__cvt+0x7e>
 800a810:	2200      	movs	r2, #0
 800a812:	2300      	movs	r3, #0
 800a814:	4620      	mov	r0, r4
 800a816:	4631      	mov	r1, r6
 800a818:	f7f6 f8c6 	bl	80009a8 <__aeabi_dcmpeq>
 800a81c:	b918      	cbnz	r0, 800a826 <__cvt+0x7e>
 800a81e:	f1c5 0501 	rsb	r5, r5, #1
 800a822:	f8ca 5000 	str.w	r5, [sl]
 800a826:	f8da 3000 	ldr.w	r3, [sl]
 800a82a:	4499      	add	r9, r3
 800a82c:	2200      	movs	r2, #0
 800a82e:	2300      	movs	r3, #0
 800a830:	4620      	mov	r0, r4
 800a832:	4631      	mov	r1, r6
 800a834:	f7f6 f8b8 	bl	80009a8 <__aeabi_dcmpeq>
 800a838:	b938      	cbnz	r0, 800a84a <__cvt+0xa2>
 800a83a:	2230      	movs	r2, #48	; 0x30
 800a83c:	9b07      	ldr	r3, [sp, #28]
 800a83e:	454b      	cmp	r3, r9
 800a840:	d205      	bcs.n	800a84e <__cvt+0xa6>
 800a842:	1c59      	adds	r1, r3, #1
 800a844:	9107      	str	r1, [sp, #28]
 800a846:	701a      	strb	r2, [r3, #0]
 800a848:	e7f8      	b.n	800a83c <__cvt+0x94>
 800a84a:	f8cd 901c 	str.w	r9, [sp, #28]
 800a84e:	4640      	mov	r0, r8
 800a850:	9b07      	ldr	r3, [sp, #28]
 800a852:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a854:	eba3 0308 	sub.w	r3, r3, r8
 800a858:	6013      	str	r3, [r2, #0]
 800a85a:	b008      	add	sp, #32
 800a85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a860 <__exponent>:
 800a860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a862:	2900      	cmp	r1, #0
 800a864:	bfb4      	ite	lt
 800a866:	232d      	movlt	r3, #45	; 0x2d
 800a868:	232b      	movge	r3, #43	; 0x2b
 800a86a:	4604      	mov	r4, r0
 800a86c:	bfb8      	it	lt
 800a86e:	4249      	neglt	r1, r1
 800a870:	2909      	cmp	r1, #9
 800a872:	f804 2b02 	strb.w	r2, [r4], #2
 800a876:	7043      	strb	r3, [r0, #1]
 800a878:	dd21      	ble.n	800a8be <__exponent+0x5e>
 800a87a:	f10d 0307 	add.w	r3, sp, #7
 800a87e:	461f      	mov	r7, r3
 800a880:	260a      	movs	r6, #10
 800a882:	fb91 f5f6 	sdiv	r5, r1, r6
 800a886:	fb06 1115 	mls	r1, r6, r5, r1
 800a88a:	2d09      	cmp	r5, #9
 800a88c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800a890:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a894:	f103 32ff 	add.w	r2, r3, #4294967295
 800a898:	4629      	mov	r1, r5
 800a89a:	dc09      	bgt.n	800a8b0 <__exponent+0x50>
 800a89c:	3130      	adds	r1, #48	; 0x30
 800a89e:	3b02      	subs	r3, #2
 800a8a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a8a4:	42bb      	cmp	r3, r7
 800a8a6:	4622      	mov	r2, r4
 800a8a8:	d304      	bcc.n	800a8b4 <__exponent+0x54>
 800a8aa:	1a10      	subs	r0, r2, r0
 800a8ac:	b003      	add	sp, #12
 800a8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	e7e6      	b.n	800a882 <__exponent+0x22>
 800a8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8b8:	f804 2b01 	strb.w	r2, [r4], #1
 800a8bc:	e7f2      	b.n	800a8a4 <__exponent+0x44>
 800a8be:	2330      	movs	r3, #48	; 0x30
 800a8c0:	4419      	add	r1, r3
 800a8c2:	7083      	strb	r3, [r0, #2]
 800a8c4:	1d02      	adds	r2, r0, #4
 800a8c6:	70c1      	strb	r1, [r0, #3]
 800a8c8:	e7ef      	b.n	800a8aa <__exponent+0x4a>
	...

0800a8cc <_printf_float>:
 800a8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d0:	b091      	sub	sp, #68	; 0x44
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a8d6:	4693      	mov	fp, r2
 800a8d8:	461e      	mov	r6, r3
 800a8da:	4605      	mov	r5, r0
 800a8dc:	f001 fa64 	bl	800bda8 <_localeconv_r>
 800a8e0:	6803      	ldr	r3, [r0, #0]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e6:	f7f5 fc33 	bl	8000150 <strlen>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	930e      	str	r3, [sp, #56]	; 0x38
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	900a      	str	r0, [sp, #40]	; 0x28
 800a8f2:	3307      	adds	r3, #7
 800a8f4:	f023 0307 	bic.w	r3, r3, #7
 800a8f8:	f103 0208 	add.w	r2, r3, #8
 800a8fc:	f894 8018 	ldrb.w	r8, [r4, #24]
 800a900:	f8d4 a000 	ldr.w	sl, [r4]
 800a904:	603a      	str	r2, [r7, #0]
 800a906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a90e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800a912:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a916:	930b      	str	r3, [sp, #44]	; 0x2c
 800a918:	f04f 32ff 	mov.w	r2, #4294967295
 800a91c:	4ba6      	ldr	r3, [pc, #664]	; (800abb8 <_printf_float+0x2ec>)
 800a91e:	4638      	mov	r0, r7
 800a920:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a922:	f7f6 f873 	bl	8000a0c <__aeabi_dcmpun>
 800a926:	bb68      	cbnz	r0, 800a984 <_printf_float+0xb8>
 800a928:	f04f 32ff 	mov.w	r2, #4294967295
 800a92c:	4ba2      	ldr	r3, [pc, #648]	; (800abb8 <_printf_float+0x2ec>)
 800a92e:	4638      	mov	r0, r7
 800a930:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a932:	f7f6 f84d 	bl	80009d0 <__aeabi_dcmple>
 800a936:	bb28      	cbnz	r0, 800a984 <_printf_float+0xb8>
 800a938:	2200      	movs	r2, #0
 800a93a:	2300      	movs	r3, #0
 800a93c:	4638      	mov	r0, r7
 800a93e:	4649      	mov	r1, r9
 800a940:	f7f6 f83c 	bl	80009bc <__aeabi_dcmplt>
 800a944:	b110      	cbz	r0, 800a94c <_printf_float+0x80>
 800a946:	232d      	movs	r3, #45	; 0x2d
 800a948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a94c:	4f9b      	ldr	r7, [pc, #620]	; (800abbc <_printf_float+0x2f0>)
 800a94e:	4b9c      	ldr	r3, [pc, #624]	; (800abc0 <_printf_float+0x2f4>)
 800a950:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a954:	bf98      	it	ls
 800a956:	461f      	movls	r7, r3
 800a958:	2303      	movs	r3, #3
 800a95a:	f04f 0900 	mov.w	r9, #0
 800a95e:	6123      	str	r3, [r4, #16]
 800a960:	f02a 0304 	bic.w	r3, sl, #4
 800a964:	6023      	str	r3, [r4, #0]
 800a966:	9600      	str	r6, [sp, #0]
 800a968:	465b      	mov	r3, fp
 800a96a:	aa0f      	add	r2, sp, #60	; 0x3c
 800a96c:	4621      	mov	r1, r4
 800a96e:	4628      	mov	r0, r5
 800a970:	f000 f9e2 	bl	800ad38 <_printf_common>
 800a974:	3001      	adds	r0, #1
 800a976:	f040 8090 	bne.w	800aa9a <_printf_float+0x1ce>
 800a97a:	f04f 30ff 	mov.w	r0, #4294967295
 800a97e:	b011      	add	sp, #68	; 0x44
 800a980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a984:	463a      	mov	r2, r7
 800a986:	464b      	mov	r3, r9
 800a988:	4638      	mov	r0, r7
 800a98a:	4649      	mov	r1, r9
 800a98c:	f7f6 f83e 	bl	8000a0c <__aeabi_dcmpun>
 800a990:	b110      	cbz	r0, 800a998 <_printf_float+0xcc>
 800a992:	4f8c      	ldr	r7, [pc, #560]	; (800abc4 <_printf_float+0x2f8>)
 800a994:	4b8c      	ldr	r3, [pc, #560]	; (800abc8 <_printf_float+0x2fc>)
 800a996:	e7db      	b.n	800a950 <_printf_float+0x84>
 800a998:	6863      	ldr	r3, [r4, #4]
 800a99a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800a99e:	1c59      	adds	r1, r3, #1
 800a9a0:	a80d      	add	r0, sp, #52	; 0x34
 800a9a2:	a90e      	add	r1, sp, #56	; 0x38
 800a9a4:	d140      	bne.n	800aa28 <_printf_float+0x15c>
 800a9a6:	2306      	movs	r3, #6
 800a9a8:	6063      	str	r3, [r4, #4]
 800a9aa:	f04f 0c00 	mov.w	ip, #0
 800a9ae:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800a9b2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800a9b6:	6863      	ldr	r3, [r4, #4]
 800a9b8:	6022      	str	r2, [r4, #0]
 800a9ba:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800a9be:	9300      	str	r3, [sp, #0]
 800a9c0:	463a      	mov	r2, r7
 800a9c2:	464b      	mov	r3, r9
 800a9c4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	f7ff feed 	bl	800a7a8 <__cvt>
 800a9ce:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800a9d2:	2b47      	cmp	r3, #71	; 0x47
 800a9d4:	4607      	mov	r7, r0
 800a9d6:	d109      	bne.n	800a9ec <_printf_float+0x120>
 800a9d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9da:	1cd8      	adds	r0, r3, #3
 800a9dc:	db02      	blt.n	800a9e4 <_printf_float+0x118>
 800a9de:	6862      	ldr	r2, [r4, #4]
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	dd47      	ble.n	800aa74 <_printf_float+0x1a8>
 800a9e4:	f1a8 0802 	sub.w	r8, r8, #2
 800a9e8:	fa5f f888 	uxtb.w	r8, r8
 800a9ec:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800a9f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a9f2:	d824      	bhi.n	800aa3e <_printf_float+0x172>
 800a9f4:	3901      	subs	r1, #1
 800a9f6:	4642      	mov	r2, r8
 800a9f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a9fc:	910d      	str	r1, [sp, #52]	; 0x34
 800a9fe:	f7ff ff2f 	bl	800a860 <__exponent>
 800aa02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa04:	4681      	mov	r9, r0
 800aa06:	1813      	adds	r3, r2, r0
 800aa08:	2a01      	cmp	r2, #1
 800aa0a:	6123      	str	r3, [r4, #16]
 800aa0c:	dc02      	bgt.n	800aa14 <_printf_float+0x148>
 800aa0e:	6822      	ldr	r2, [r4, #0]
 800aa10:	07d1      	lsls	r1, r2, #31
 800aa12:	d501      	bpl.n	800aa18 <_printf_float+0x14c>
 800aa14:	3301      	adds	r3, #1
 800aa16:	6123      	str	r3, [r4, #16]
 800aa18:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d0a2      	beq.n	800a966 <_printf_float+0x9a>
 800aa20:	232d      	movs	r3, #45	; 0x2d
 800aa22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa26:	e79e      	b.n	800a966 <_printf_float+0x9a>
 800aa28:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800aa2c:	f000 816e 	beq.w	800ad0c <_printf_float+0x440>
 800aa30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aa34:	d1b9      	bne.n	800a9aa <_printf_float+0xde>
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1b7      	bne.n	800a9aa <_printf_float+0xde>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e7b4      	b.n	800a9a8 <_printf_float+0xdc>
 800aa3e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800aa42:	d119      	bne.n	800aa78 <_printf_float+0x1ac>
 800aa44:	2900      	cmp	r1, #0
 800aa46:	6863      	ldr	r3, [r4, #4]
 800aa48:	dd0c      	ble.n	800aa64 <_printf_float+0x198>
 800aa4a:	6121      	str	r1, [r4, #16]
 800aa4c:	b913      	cbnz	r3, 800aa54 <_printf_float+0x188>
 800aa4e:	6822      	ldr	r2, [r4, #0]
 800aa50:	07d2      	lsls	r2, r2, #31
 800aa52:	d502      	bpl.n	800aa5a <_printf_float+0x18e>
 800aa54:	3301      	adds	r3, #1
 800aa56:	440b      	add	r3, r1
 800aa58:	6123      	str	r3, [r4, #16]
 800aa5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa5c:	f04f 0900 	mov.w	r9, #0
 800aa60:	65a3      	str	r3, [r4, #88]	; 0x58
 800aa62:	e7d9      	b.n	800aa18 <_printf_float+0x14c>
 800aa64:	b913      	cbnz	r3, 800aa6c <_printf_float+0x1a0>
 800aa66:	6822      	ldr	r2, [r4, #0]
 800aa68:	07d0      	lsls	r0, r2, #31
 800aa6a:	d501      	bpl.n	800aa70 <_printf_float+0x1a4>
 800aa6c:	3302      	adds	r3, #2
 800aa6e:	e7f3      	b.n	800aa58 <_printf_float+0x18c>
 800aa70:	2301      	movs	r3, #1
 800aa72:	e7f1      	b.n	800aa58 <_printf_float+0x18c>
 800aa74:	f04f 0867 	mov.w	r8, #103	; 0x67
 800aa78:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	db05      	blt.n	800aa8c <_printf_float+0x1c0>
 800aa80:	6822      	ldr	r2, [r4, #0]
 800aa82:	6123      	str	r3, [r4, #16]
 800aa84:	07d1      	lsls	r1, r2, #31
 800aa86:	d5e8      	bpl.n	800aa5a <_printf_float+0x18e>
 800aa88:	3301      	adds	r3, #1
 800aa8a:	e7e5      	b.n	800aa58 <_printf_float+0x18c>
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	bfcc      	ite	gt
 800aa90:	2301      	movgt	r3, #1
 800aa92:	f1c3 0302 	rsble	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	e7de      	b.n	800aa58 <_printf_float+0x18c>
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	055a      	lsls	r2, r3, #21
 800aa9e:	d407      	bmi.n	800aab0 <_printf_float+0x1e4>
 800aaa0:	6923      	ldr	r3, [r4, #16]
 800aaa2:	463a      	mov	r2, r7
 800aaa4:	4659      	mov	r1, fp
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	47b0      	blx	r6
 800aaaa:	3001      	adds	r0, #1
 800aaac:	d129      	bne.n	800ab02 <_printf_float+0x236>
 800aaae:	e764      	b.n	800a97a <_printf_float+0xae>
 800aab0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800aab4:	f240 80d7 	bls.w	800ac66 <_printf_float+0x39a>
 800aab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aabc:	2200      	movs	r2, #0
 800aabe:	2300      	movs	r3, #0
 800aac0:	f7f5 ff72 	bl	80009a8 <__aeabi_dcmpeq>
 800aac4:	b388      	cbz	r0, 800ab2a <_printf_float+0x25e>
 800aac6:	2301      	movs	r3, #1
 800aac8:	4a40      	ldr	r2, [pc, #256]	; (800abcc <_printf_float+0x300>)
 800aaca:	4659      	mov	r1, fp
 800aacc:	4628      	mov	r0, r5
 800aace:	47b0      	blx	r6
 800aad0:	3001      	adds	r0, #1
 800aad2:	f43f af52 	beq.w	800a97a <_printf_float+0xae>
 800aad6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800aada:	429a      	cmp	r2, r3
 800aadc:	db02      	blt.n	800aae4 <_printf_float+0x218>
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	07d8      	lsls	r0, r3, #31
 800aae2:	d50e      	bpl.n	800ab02 <_printf_float+0x236>
 800aae4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aae8:	4659      	mov	r1, fp
 800aaea:	4628      	mov	r0, r5
 800aaec:	47b0      	blx	r6
 800aaee:	3001      	adds	r0, #1
 800aaf0:	f43f af43 	beq.w	800a97a <_printf_float+0xae>
 800aaf4:	2700      	movs	r7, #0
 800aaf6:	f104 081a 	add.w	r8, r4, #26
 800aafa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aafc:	3b01      	subs	r3, #1
 800aafe:	42bb      	cmp	r3, r7
 800ab00:	dc09      	bgt.n	800ab16 <_printf_float+0x24a>
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	079f      	lsls	r7, r3, #30
 800ab06:	f100 80fd 	bmi.w	800ad04 <_printf_float+0x438>
 800ab0a:	68e0      	ldr	r0, [r4, #12]
 800ab0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab0e:	4298      	cmp	r0, r3
 800ab10:	bfb8      	it	lt
 800ab12:	4618      	movlt	r0, r3
 800ab14:	e733      	b.n	800a97e <_printf_float+0xb2>
 800ab16:	2301      	movs	r3, #1
 800ab18:	4642      	mov	r2, r8
 800ab1a:	4659      	mov	r1, fp
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	47b0      	blx	r6
 800ab20:	3001      	adds	r0, #1
 800ab22:	f43f af2a 	beq.w	800a97a <_printf_float+0xae>
 800ab26:	3701      	adds	r7, #1
 800ab28:	e7e7      	b.n	800aafa <_printf_float+0x22e>
 800ab2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	dc2b      	bgt.n	800ab88 <_printf_float+0x2bc>
 800ab30:	2301      	movs	r3, #1
 800ab32:	4a26      	ldr	r2, [pc, #152]	; (800abcc <_printf_float+0x300>)
 800ab34:	4659      	mov	r1, fp
 800ab36:	4628      	mov	r0, r5
 800ab38:	47b0      	blx	r6
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	f43f af1d 	beq.w	800a97a <_printf_float+0xae>
 800ab40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab42:	b923      	cbnz	r3, 800ab4e <_printf_float+0x282>
 800ab44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab46:	b913      	cbnz	r3, 800ab4e <_printf_float+0x282>
 800ab48:	6823      	ldr	r3, [r4, #0]
 800ab4a:	07d9      	lsls	r1, r3, #31
 800ab4c:	d5d9      	bpl.n	800ab02 <_printf_float+0x236>
 800ab4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab52:	4659      	mov	r1, fp
 800ab54:	4628      	mov	r0, r5
 800ab56:	47b0      	blx	r6
 800ab58:	3001      	adds	r0, #1
 800ab5a:	f43f af0e 	beq.w	800a97a <_printf_float+0xae>
 800ab5e:	f04f 0800 	mov.w	r8, #0
 800ab62:	f104 091a 	add.w	r9, r4, #26
 800ab66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab68:	425b      	negs	r3, r3
 800ab6a:	4543      	cmp	r3, r8
 800ab6c:	dc01      	bgt.n	800ab72 <_printf_float+0x2a6>
 800ab6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab70:	e797      	b.n	800aaa2 <_printf_float+0x1d6>
 800ab72:	2301      	movs	r3, #1
 800ab74:	464a      	mov	r2, r9
 800ab76:	4659      	mov	r1, fp
 800ab78:	4628      	mov	r0, r5
 800ab7a:	47b0      	blx	r6
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	f43f aefc 	beq.w	800a97a <_printf_float+0xae>
 800ab82:	f108 0801 	add.w	r8, r8, #1
 800ab86:	e7ee      	b.n	800ab66 <_printf_float+0x29a>
 800ab88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	bfa8      	it	ge
 800ab90:	461a      	movge	r2, r3
 800ab92:	2a00      	cmp	r2, #0
 800ab94:	4690      	mov	r8, r2
 800ab96:	dd07      	ble.n	800aba8 <_printf_float+0x2dc>
 800ab98:	4613      	mov	r3, r2
 800ab9a:	4659      	mov	r1, fp
 800ab9c:	463a      	mov	r2, r7
 800ab9e:	4628      	mov	r0, r5
 800aba0:	47b0      	blx	r6
 800aba2:	3001      	adds	r0, #1
 800aba4:	f43f aee9 	beq.w	800a97a <_printf_float+0xae>
 800aba8:	f104 031a 	add.w	r3, r4, #26
 800abac:	f04f 0a00 	mov.w	sl, #0
 800abb0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800abb4:	930b      	str	r3, [sp, #44]	; 0x2c
 800abb6:	e015      	b.n	800abe4 <_printf_float+0x318>
 800abb8:	7fefffff 	.word	0x7fefffff
 800abbc:	0800d7ba 	.word	0x0800d7ba
 800abc0:	0800d7b6 	.word	0x0800d7b6
 800abc4:	0800d7c2 	.word	0x0800d7c2
 800abc8:	0800d7be 	.word	0x0800d7be
 800abcc:	0800d7c6 	.word	0x0800d7c6
 800abd0:	2301      	movs	r3, #1
 800abd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800abd4:	4659      	mov	r1, fp
 800abd6:	4628      	mov	r0, r5
 800abd8:	47b0      	blx	r6
 800abda:	3001      	adds	r0, #1
 800abdc:	f43f aecd 	beq.w	800a97a <_printf_float+0xae>
 800abe0:	f10a 0a01 	add.w	sl, sl, #1
 800abe4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800abe8:	eba9 0308 	sub.w	r3, r9, r8
 800abec:	4553      	cmp	r3, sl
 800abee:	dcef      	bgt.n	800abd0 <_printf_float+0x304>
 800abf0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800abf4:	429a      	cmp	r2, r3
 800abf6:	444f      	add	r7, r9
 800abf8:	db14      	blt.n	800ac24 <_printf_float+0x358>
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	07da      	lsls	r2, r3, #31
 800abfe:	d411      	bmi.n	800ac24 <_printf_float+0x358>
 800ac00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac02:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ac04:	eba3 0209 	sub.w	r2, r3, r9
 800ac08:	eba3 0901 	sub.w	r9, r3, r1
 800ac0c:	4591      	cmp	r9, r2
 800ac0e:	bfa8      	it	ge
 800ac10:	4691      	movge	r9, r2
 800ac12:	f1b9 0f00 	cmp.w	r9, #0
 800ac16:	dc0d      	bgt.n	800ac34 <_printf_float+0x368>
 800ac18:	2700      	movs	r7, #0
 800ac1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac1e:	f104 081a 	add.w	r8, r4, #26
 800ac22:	e018      	b.n	800ac56 <_printf_float+0x38a>
 800ac24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac28:	4659      	mov	r1, fp
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	47b0      	blx	r6
 800ac2e:	3001      	adds	r0, #1
 800ac30:	d1e6      	bne.n	800ac00 <_printf_float+0x334>
 800ac32:	e6a2      	b.n	800a97a <_printf_float+0xae>
 800ac34:	464b      	mov	r3, r9
 800ac36:	463a      	mov	r2, r7
 800ac38:	4659      	mov	r1, fp
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	47b0      	blx	r6
 800ac3e:	3001      	adds	r0, #1
 800ac40:	d1ea      	bne.n	800ac18 <_printf_float+0x34c>
 800ac42:	e69a      	b.n	800a97a <_printf_float+0xae>
 800ac44:	2301      	movs	r3, #1
 800ac46:	4642      	mov	r2, r8
 800ac48:	4659      	mov	r1, fp
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	47b0      	blx	r6
 800ac4e:	3001      	adds	r0, #1
 800ac50:	f43f ae93 	beq.w	800a97a <_printf_float+0xae>
 800ac54:	3701      	adds	r7, #1
 800ac56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ac5a:	1a9b      	subs	r3, r3, r2
 800ac5c:	eba3 0309 	sub.w	r3, r3, r9
 800ac60:	42bb      	cmp	r3, r7
 800ac62:	dcef      	bgt.n	800ac44 <_printf_float+0x378>
 800ac64:	e74d      	b.n	800ab02 <_printf_float+0x236>
 800ac66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac68:	2a01      	cmp	r2, #1
 800ac6a:	dc01      	bgt.n	800ac70 <_printf_float+0x3a4>
 800ac6c:	07db      	lsls	r3, r3, #31
 800ac6e:	d538      	bpl.n	800ace2 <_printf_float+0x416>
 800ac70:	2301      	movs	r3, #1
 800ac72:	463a      	mov	r2, r7
 800ac74:	4659      	mov	r1, fp
 800ac76:	4628      	mov	r0, r5
 800ac78:	47b0      	blx	r6
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	f43f ae7d 	beq.w	800a97a <_printf_float+0xae>
 800ac80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac84:	4659      	mov	r1, fp
 800ac86:	4628      	mov	r0, r5
 800ac88:	47b0      	blx	r6
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	f107 0701 	add.w	r7, r7, #1
 800ac90:	f43f ae73 	beq.w	800a97a <_printf_float+0xae>
 800ac94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f103 38ff 	add.w	r8, r3, #4294967295
 800aca0:	2300      	movs	r3, #0
 800aca2:	f7f5 fe81 	bl	80009a8 <__aeabi_dcmpeq>
 800aca6:	b9c0      	cbnz	r0, 800acda <_printf_float+0x40e>
 800aca8:	4643      	mov	r3, r8
 800acaa:	463a      	mov	r2, r7
 800acac:	4659      	mov	r1, fp
 800acae:	4628      	mov	r0, r5
 800acb0:	47b0      	blx	r6
 800acb2:	3001      	adds	r0, #1
 800acb4:	d10d      	bne.n	800acd2 <_printf_float+0x406>
 800acb6:	e660      	b.n	800a97a <_printf_float+0xae>
 800acb8:	2301      	movs	r3, #1
 800acba:	4642      	mov	r2, r8
 800acbc:	4659      	mov	r1, fp
 800acbe:	4628      	mov	r0, r5
 800acc0:	47b0      	blx	r6
 800acc2:	3001      	adds	r0, #1
 800acc4:	f43f ae59 	beq.w	800a97a <_printf_float+0xae>
 800acc8:	3701      	adds	r7, #1
 800acca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800accc:	3b01      	subs	r3, #1
 800acce:	42bb      	cmp	r3, r7
 800acd0:	dcf2      	bgt.n	800acb8 <_printf_float+0x3ec>
 800acd2:	464b      	mov	r3, r9
 800acd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800acd8:	e6e4      	b.n	800aaa4 <_printf_float+0x1d8>
 800acda:	2700      	movs	r7, #0
 800acdc:	f104 081a 	add.w	r8, r4, #26
 800ace0:	e7f3      	b.n	800acca <_printf_float+0x3fe>
 800ace2:	2301      	movs	r3, #1
 800ace4:	e7e1      	b.n	800acaa <_printf_float+0x3de>
 800ace6:	2301      	movs	r3, #1
 800ace8:	4642      	mov	r2, r8
 800acea:	4659      	mov	r1, fp
 800acec:	4628      	mov	r0, r5
 800acee:	47b0      	blx	r6
 800acf0:	3001      	adds	r0, #1
 800acf2:	f43f ae42 	beq.w	800a97a <_printf_float+0xae>
 800acf6:	3701      	adds	r7, #1
 800acf8:	68e3      	ldr	r3, [r4, #12]
 800acfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acfc:	1a9b      	subs	r3, r3, r2
 800acfe:	42bb      	cmp	r3, r7
 800ad00:	dcf1      	bgt.n	800ace6 <_printf_float+0x41a>
 800ad02:	e702      	b.n	800ab0a <_printf_float+0x23e>
 800ad04:	2700      	movs	r7, #0
 800ad06:	f104 0819 	add.w	r8, r4, #25
 800ad0a:	e7f5      	b.n	800acf8 <_printf_float+0x42c>
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f43f ae94 	beq.w	800aa3a <_printf_float+0x16e>
 800ad12:	f04f 0c00 	mov.w	ip, #0
 800ad16:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800ad1a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800ad1e:	6022      	str	r2, [r4, #0]
 800ad20:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800ad24:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	463a      	mov	r2, r7
 800ad2c:	464b      	mov	r3, r9
 800ad2e:	4628      	mov	r0, r5
 800ad30:	f7ff fd3a 	bl	800a7a8 <__cvt>
 800ad34:	4607      	mov	r7, r0
 800ad36:	e64f      	b.n	800a9d8 <_printf_float+0x10c>

0800ad38 <_printf_common>:
 800ad38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad3c:	4691      	mov	r9, r2
 800ad3e:	461f      	mov	r7, r3
 800ad40:	688a      	ldr	r2, [r1, #8]
 800ad42:	690b      	ldr	r3, [r1, #16]
 800ad44:	4606      	mov	r6, r0
 800ad46:	4293      	cmp	r3, r2
 800ad48:	bfb8      	it	lt
 800ad4a:	4613      	movlt	r3, r2
 800ad4c:	f8c9 3000 	str.w	r3, [r9]
 800ad50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad54:	460c      	mov	r4, r1
 800ad56:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad5a:	b112      	cbz	r2, 800ad62 <_printf_common+0x2a>
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	f8c9 3000 	str.w	r3, [r9]
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	0699      	lsls	r1, r3, #26
 800ad66:	bf42      	ittt	mi
 800ad68:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ad6c:	3302      	addmi	r3, #2
 800ad6e:	f8c9 3000 	strmi.w	r3, [r9]
 800ad72:	6825      	ldr	r5, [r4, #0]
 800ad74:	f015 0506 	ands.w	r5, r5, #6
 800ad78:	d107      	bne.n	800ad8a <_printf_common+0x52>
 800ad7a:	f104 0a19 	add.w	sl, r4, #25
 800ad7e:	68e3      	ldr	r3, [r4, #12]
 800ad80:	f8d9 2000 	ldr.w	r2, [r9]
 800ad84:	1a9b      	subs	r3, r3, r2
 800ad86:	42ab      	cmp	r3, r5
 800ad88:	dc29      	bgt.n	800adde <_printf_common+0xa6>
 800ad8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ad8e:	6822      	ldr	r2, [r4, #0]
 800ad90:	3300      	adds	r3, #0
 800ad92:	bf18      	it	ne
 800ad94:	2301      	movne	r3, #1
 800ad96:	0692      	lsls	r2, r2, #26
 800ad98:	d42e      	bmi.n	800adf8 <_printf_common+0xc0>
 800ad9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad9e:	4639      	mov	r1, r7
 800ada0:	4630      	mov	r0, r6
 800ada2:	47c0      	blx	r8
 800ada4:	3001      	adds	r0, #1
 800ada6:	d021      	beq.n	800adec <_printf_common+0xb4>
 800ada8:	6823      	ldr	r3, [r4, #0]
 800adaa:	68e5      	ldr	r5, [r4, #12]
 800adac:	f003 0306 	and.w	r3, r3, #6
 800adb0:	2b04      	cmp	r3, #4
 800adb2:	bf18      	it	ne
 800adb4:	2500      	movne	r5, #0
 800adb6:	f8d9 2000 	ldr.w	r2, [r9]
 800adba:	f04f 0900 	mov.w	r9, #0
 800adbe:	bf08      	it	eq
 800adc0:	1aad      	subeq	r5, r5, r2
 800adc2:	68a3      	ldr	r3, [r4, #8]
 800adc4:	6922      	ldr	r2, [r4, #16]
 800adc6:	bf08      	it	eq
 800adc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800adcc:	4293      	cmp	r3, r2
 800adce:	bfc4      	itt	gt
 800add0:	1a9b      	subgt	r3, r3, r2
 800add2:	18ed      	addgt	r5, r5, r3
 800add4:	341a      	adds	r4, #26
 800add6:	454d      	cmp	r5, r9
 800add8:	d11a      	bne.n	800ae10 <_printf_common+0xd8>
 800adda:	2000      	movs	r0, #0
 800addc:	e008      	b.n	800adf0 <_printf_common+0xb8>
 800adde:	2301      	movs	r3, #1
 800ade0:	4652      	mov	r2, sl
 800ade2:	4639      	mov	r1, r7
 800ade4:	4630      	mov	r0, r6
 800ade6:	47c0      	blx	r8
 800ade8:	3001      	adds	r0, #1
 800adea:	d103      	bne.n	800adf4 <_printf_common+0xbc>
 800adec:	f04f 30ff 	mov.w	r0, #4294967295
 800adf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf4:	3501      	adds	r5, #1
 800adf6:	e7c2      	b.n	800ad7e <_printf_common+0x46>
 800adf8:	2030      	movs	r0, #48	; 0x30
 800adfa:	18e1      	adds	r1, r4, r3
 800adfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae00:	1c5a      	adds	r2, r3, #1
 800ae02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae06:	4422      	add	r2, r4
 800ae08:	3302      	adds	r3, #2
 800ae0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae0e:	e7c4      	b.n	800ad9a <_printf_common+0x62>
 800ae10:	2301      	movs	r3, #1
 800ae12:	4622      	mov	r2, r4
 800ae14:	4639      	mov	r1, r7
 800ae16:	4630      	mov	r0, r6
 800ae18:	47c0      	blx	r8
 800ae1a:	3001      	adds	r0, #1
 800ae1c:	d0e6      	beq.n	800adec <_printf_common+0xb4>
 800ae1e:	f109 0901 	add.w	r9, r9, #1
 800ae22:	e7d8      	b.n	800add6 <_printf_common+0x9e>

0800ae24 <_printf_i>:
 800ae24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ae2c:	460c      	mov	r4, r1
 800ae2e:	7e09      	ldrb	r1, [r1, #24]
 800ae30:	b085      	sub	sp, #20
 800ae32:	296e      	cmp	r1, #110	; 0x6e
 800ae34:	4617      	mov	r7, r2
 800ae36:	4606      	mov	r6, r0
 800ae38:	4698      	mov	r8, r3
 800ae3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae3c:	f000 80b3 	beq.w	800afa6 <_printf_i+0x182>
 800ae40:	d822      	bhi.n	800ae88 <_printf_i+0x64>
 800ae42:	2963      	cmp	r1, #99	; 0x63
 800ae44:	d036      	beq.n	800aeb4 <_printf_i+0x90>
 800ae46:	d80a      	bhi.n	800ae5e <_printf_i+0x3a>
 800ae48:	2900      	cmp	r1, #0
 800ae4a:	f000 80b9 	beq.w	800afc0 <_printf_i+0x19c>
 800ae4e:	2958      	cmp	r1, #88	; 0x58
 800ae50:	f000 8083 	beq.w	800af5a <_printf_i+0x136>
 800ae54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ae5c:	e032      	b.n	800aec4 <_printf_i+0xa0>
 800ae5e:	2964      	cmp	r1, #100	; 0x64
 800ae60:	d001      	beq.n	800ae66 <_printf_i+0x42>
 800ae62:	2969      	cmp	r1, #105	; 0x69
 800ae64:	d1f6      	bne.n	800ae54 <_printf_i+0x30>
 800ae66:	6820      	ldr	r0, [r4, #0]
 800ae68:	6813      	ldr	r3, [r2, #0]
 800ae6a:	0605      	lsls	r5, r0, #24
 800ae6c:	f103 0104 	add.w	r1, r3, #4
 800ae70:	d52a      	bpl.n	800aec8 <_printf_i+0xa4>
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6011      	str	r1, [r2, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	da03      	bge.n	800ae82 <_printf_i+0x5e>
 800ae7a:	222d      	movs	r2, #45	; 0x2d
 800ae7c:	425b      	negs	r3, r3
 800ae7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ae82:	486f      	ldr	r0, [pc, #444]	; (800b040 <_printf_i+0x21c>)
 800ae84:	220a      	movs	r2, #10
 800ae86:	e039      	b.n	800aefc <_printf_i+0xd8>
 800ae88:	2973      	cmp	r1, #115	; 0x73
 800ae8a:	f000 809d 	beq.w	800afc8 <_printf_i+0x1a4>
 800ae8e:	d808      	bhi.n	800aea2 <_printf_i+0x7e>
 800ae90:	296f      	cmp	r1, #111	; 0x6f
 800ae92:	d020      	beq.n	800aed6 <_printf_i+0xb2>
 800ae94:	2970      	cmp	r1, #112	; 0x70
 800ae96:	d1dd      	bne.n	800ae54 <_printf_i+0x30>
 800ae98:	6823      	ldr	r3, [r4, #0]
 800ae9a:	f043 0320 	orr.w	r3, r3, #32
 800ae9e:	6023      	str	r3, [r4, #0]
 800aea0:	e003      	b.n	800aeaa <_printf_i+0x86>
 800aea2:	2975      	cmp	r1, #117	; 0x75
 800aea4:	d017      	beq.n	800aed6 <_printf_i+0xb2>
 800aea6:	2978      	cmp	r1, #120	; 0x78
 800aea8:	d1d4      	bne.n	800ae54 <_printf_i+0x30>
 800aeaa:	2378      	movs	r3, #120	; 0x78
 800aeac:	4865      	ldr	r0, [pc, #404]	; (800b044 <_printf_i+0x220>)
 800aeae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aeb2:	e055      	b.n	800af60 <_printf_i+0x13c>
 800aeb4:	6813      	ldr	r3, [r2, #0]
 800aeb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aeba:	1d19      	adds	r1, r3, #4
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	6011      	str	r1, [r2, #0]
 800aec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aec4:	2301      	movs	r3, #1
 800aec6:	e08c      	b.n	800afe2 <_printf_i+0x1be>
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aece:	6011      	str	r1, [r2, #0]
 800aed0:	bf18      	it	ne
 800aed2:	b21b      	sxthne	r3, r3
 800aed4:	e7cf      	b.n	800ae76 <_printf_i+0x52>
 800aed6:	6813      	ldr	r3, [r2, #0]
 800aed8:	6825      	ldr	r5, [r4, #0]
 800aeda:	1d18      	adds	r0, r3, #4
 800aedc:	6010      	str	r0, [r2, #0]
 800aede:	0628      	lsls	r0, r5, #24
 800aee0:	d501      	bpl.n	800aee6 <_printf_i+0xc2>
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	e002      	b.n	800aeec <_printf_i+0xc8>
 800aee6:	0668      	lsls	r0, r5, #25
 800aee8:	d5fb      	bpl.n	800aee2 <_printf_i+0xbe>
 800aeea:	881b      	ldrh	r3, [r3, #0]
 800aeec:	296f      	cmp	r1, #111	; 0x6f
 800aeee:	bf14      	ite	ne
 800aef0:	220a      	movne	r2, #10
 800aef2:	2208      	moveq	r2, #8
 800aef4:	4852      	ldr	r0, [pc, #328]	; (800b040 <_printf_i+0x21c>)
 800aef6:	2100      	movs	r1, #0
 800aef8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aefc:	6865      	ldr	r5, [r4, #4]
 800aefe:	2d00      	cmp	r5, #0
 800af00:	60a5      	str	r5, [r4, #8]
 800af02:	f2c0 8095 	blt.w	800b030 <_printf_i+0x20c>
 800af06:	6821      	ldr	r1, [r4, #0]
 800af08:	f021 0104 	bic.w	r1, r1, #4
 800af0c:	6021      	str	r1, [r4, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d13d      	bne.n	800af8e <_printf_i+0x16a>
 800af12:	2d00      	cmp	r5, #0
 800af14:	f040 808e 	bne.w	800b034 <_printf_i+0x210>
 800af18:	4665      	mov	r5, ip
 800af1a:	2a08      	cmp	r2, #8
 800af1c:	d10b      	bne.n	800af36 <_printf_i+0x112>
 800af1e:	6823      	ldr	r3, [r4, #0]
 800af20:	07db      	lsls	r3, r3, #31
 800af22:	d508      	bpl.n	800af36 <_printf_i+0x112>
 800af24:	6923      	ldr	r3, [r4, #16]
 800af26:	6862      	ldr	r2, [r4, #4]
 800af28:	429a      	cmp	r2, r3
 800af2a:	bfde      	ittt	le
 800af2c:	2330      	movle	r3, #48	; 0x30
 800af2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800af32:	f105 35ff 	addle.w	r5, r5, #4294967295
 800af36:	ebac 0305 	sub.w	r3, ip, r5
 800af3a:	6123      	str	r3, [r4, #16]
 800af3c:	f8cd 8000 	str.w	r8, [sp]
 800af40:	463b      	mov	r3, r7
 800af42:	aa03      	add	r2, sp, #12
 800af44:	4621      	mov	r1, r4
 800af46:	4630      	mov	r0, r6
 800af48:	f7ff fef6 	bl	800ad38 <_printf_common>
 800af4c:	3001      	adds	r0, #1
 800af4e:	d14d      	bne.n	800afec <_printf_i+0x1c8>
 800af50:	f04f 30ff 	mov.w	r0, #4294967295
 800af54:	b005      	add	sp, #20
 800af56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af5a:	4839      	ldr	r0, [pc, #228]	; (800b040 <_printf_i+0x21c>)
 800af5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800af60:	6813      	ldr	r3, [r2, #0]
 800af62:	6821      	ldr	r1, [r4, #0]
 800af64:	1d1d      	adds	r5, r3, #4
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6015      	str	r5, [r2, #0]
 800af6a:	060a      	lsls	r2, r1, #24
 800af6c:	d50b      	bpl.n	800af86 <_printf_i+0x162>
 800af6e:	07ca      	lsls	r2, r1, #31
 800af70:	bf44      	itt	mi
 800af72:	f041 0120 	orrmi.w	r1, r1, #32
 800af76:	6021      	strmi	r1, [r4, #0]
 800af78:	b91b      	cbnz	r3, 800af82 <_printf_i+0x15e>
 800af7a:	6822      	ldr	r2, [r4, #0]
 800af7c:	f022 0220 	bic.w	r2, r2, #32
 800af80:	6022      	str	r2, [r4, #0]
 800af82:	2210      	movs	r2, #16
 800af84:	e7b7      	b.n	800aef6 <_printf_i+0xd2>
 800af86:	064d      	lsls	r5, r1, #25
 800af88:	bf48      	it	mi
 800af8a:	b29b      	uxthmi	r3, r3
 800af8c:	e7ef      	b.n	800af6e <_printf_i+0x14a>
 800af8e:	4665      	mov	r5, ip
 800af90:	fbb3 f1f2 	udiv	r1, r3, r2
 800af94:	fb02 3311 	mls	r3, r2, r1, r3
 800af98:	5cc3      	ldrb	r3, [r0, r3]
 800af9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800af9e:	460b      	mov	r3, r1
 800afa0:	2900      	cmp	r1, #0
 800afa2:	d1f5      	bne.n	800af90 <_printf_i+0x16c>
 800afa4:	e7b9      	b.n	800af1a <_printf_i+0xf6>
 800afa6:	6813      	ldr	r3, [r2, #0]
 800afa8:	6825      	ldr	r5, [r4, #0]
 800afaa:	1d18      	adds	r0, r3, #4
 800afac:	6961      	ldr	r1, [r4, #20]
 800afae:	6010      	str	r0, [r2, #0]
 800afb0:	0628      	lsls	r0, r5, #24
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	d501      	bpl.n	800afba <_printf_i+0x196>
 800afb6:	6019      	str	r1, [r3, #0]
 800afb8:	e002      	b.n	800afc0 <_printf_i+0x19c>
 800afba:	066a      	lsls	r2, r5, #25
 800afbc:	d5fb      	bpl.n	800afb6 <_printf_i+0x192>
 800afbe:	8019      	strh	r1, [r3, #0]
 800afc0:	2300      	movs	r3, #0
 800afc2:	4665      	mov	r5, ip
 800afc4:	6123      	str	r3, [r4, #16]
 800afc6:	e7b9      	b.n	800af3c <_printf_i+0x118>
 800afc8:	6813      	ldr	r3, [r2, #0]
 800afca:	1d19      	adds	r1, r3, #4
 800afcc:	6011      	str	r1, [r2, #0]
 800afce:	681d      	ldr	r5, [r3, #0]
 800afd0:	6862      	ldr	r2, [r4, #4]
 800afd2:	2100      	movs	r1, #0
 800afd4:	4628      	mov	r0, r5
 800afd6:	f000 fefd 	bl	800bdd4 <memchr>
 800afda:	b108      	cbz	r0, 800afe0 <_printf_i+0x1bc>
 800afdc:	1b40      	subs	r0, r0, r5
 800afde:	6060      	str	r0, [r4, #4]
 800afe0:	6863      	ldr	r3, [r4, #4]
 800afe2:	6123      	str	r3, [r4, #16]
 800afe4:	2300      	movs	r3, #0
 800afe6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afea:	e7a7      	b.n	800af3c <_printf_i+0x118>
 800afec:	6923      	ldr	r3, [r4, #16]
 800afee:	462a      	mov	r2, r5
 800aff0:	4639      	mov	r1, r7
 800aff2:	4630      	mov	r0, r6
 800aff4:	47c0      	blx	r8
 800aff6:	3001      	adds	r0, #1
 800aff8:	d0aa      	beq.n	800af50 <_printf_i+0x12c>
 800affa:	6823      	ldr	r3, [r4, #0]
 800affc:	079b      	lsls	r3, r3, #30
 800affe:	d413      	bmi.n	800b028 <_printf_i+0x204>
 800b000:	68e0      	ldr	r0, [r4, #12]
 800b002:	9b03      	ldr	r3, [sp, #12]
 800b004:	4298      	cmp	r0, r3
 800b006:	bfb8      	it	lt
 800b008:	4618      	movlt	r0, r3
 800b00a:	e7a3      	b.n	800af54 <_printf_i+0x130>
 800b00c:	2301      	movs	r3, #1
 800b00e:	464a      	mov	r2, r9
 800b010:	4639      	mov	r1, r7
 800b012:	4630      	mov	r0, r6
 800b014:	47c0      	blx	r8
 800b016:	3001      	adds	r0, #1
 800b018:	d09a      	beq.n	800af50 <_printf_i+0x12c>
 800b01a:	3501      	adds	r5, #1
 800b01c:	68e3      	ldr	r3, [r4, #12]
 800b01e:	9a03      	ldr	r2, [sp, #12]
 800b020:	1a9b      	subs	r3, r3, r2
 800b022:	42ab      	cmp	r3, r5
 800b024:	dcf2      	bgt.n	800b00c <_printf_i+0x1e8>
 800b026:	e7eb      	b.n	800b000 <_printf_i+0x1dc>
 800b028:	2500      	movs	r5, #0
 800b02a:	f104 0919 	add.w	r9, r4, #25
 800b02e:	e7f5      	b.n	800b01c <_printf_i+0x1f8>
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1ac      	bne.n	800af8e <_printf_i+0x16a>
 800b034:	7803      	ldrb	r3, [r0, #0]
 800b036:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b03a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b03e:	e76c      	b.n	800af1a <_printf_i+0xf6>
 800b040:	0800d7c8 	.word	0x0800d7c8
 800b044:	0800d7d9 	.word	0x0800d7d9

0800b048 <siprintf>:
 800b048:	b40e      	push	{r1, r2, r3}
 800b04a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b04e:	b500      	push	{lr}
 800b050:	b09c      	sub	sp, #112	; 0x70
 800b052:	ab1d      	add	r3, sp, #116	; 0x74
 800b054:	9002      	str	r0, [sp, #8]
 800b056:	9006      	str	r0, [sp, #24]
 800b058:	9107      	str	r1, [sp, #28]
 800b05a:	9104      	str	r1, [sp, #16]
 800b05c:	4808      	ldr	r0, [pc, #32]	; (800b080 <siprintf+0x38>)
 800b05e:	4909      	ldr	r1, [pc, #36]	; (800b084 <siprintf+0x3c>)
 800b060:	f853 2b04 	ldr.w	r2, [r3], #4
 800b064:	9105      	str	r1, [sp, #20]
 800b066:	6800      	ldr	r0, [r0, #0]
 800b068:	a902      	add	r1, sp, #8
 800b06a:	9301      	str	r3, [sp, #4]
 800b06c:	f001 fab6 	bl	800c5dc <_svfiprintf_r>
 800b070:	2200      	movs	r2, #0
 800b072:	9b02      	ldr	r3, [sp, #8]
 800b074:	701a      	strb	r2, [r3, #0]
 800b076:	b01c      	add	sp, #112	; 0x70
 800b078:	f85d eb04 	ldr.w	lr, [sp], #4
 800b07c:	b003      	add	sp, #12
 800b07e:	4770      	bx	lr
 800b080:	20000090 	.word	0x20000090
 800b084:	ffff0208 	.word	0xffff0208

0800b088 <__utoa>:
 800b088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b08a:	b08b      	sub	sp, #44	; 0x2c
 800b08c:	4605      	mov	r5, r0
 800b08e:	460c      	mov	r4, r1
 800b090:	466e      	mov	r6, sp
 800b092:	4b1b      	ldr	r3, [pc, #108]	; (800b100 <__utoa+0x78>)
 800b094:	f103 0c20 	add.w	ip, r3, #32
 800b098:	4637      	mov	r7, r6
 800b09a:	6818      	ldr	r0, [r3, #0]
 800b09c:	6859      	ldr	r1, [r3, #4]
 800b09e:	3308      	adds	r3, #8
 800b0a0:	c703      	stmia	r7!, {r0, r1}
 800b0a2:	4563      	cmp	r3, ip
 800b0a4:	463e      	mov	r6, r7
 800b0a6:	d1f7      	bne.n	800b098 <__utoa+0x10>
 800b0a8:	6818      	ldr	r0, [r3, #0]
 800b0aa:	791b      	ldrb	r3, [r3, #4]
 800b0ac:	6038      	str	r0, [r7, #0]
 800b0ae:	713b      	strb	r3, [r7, #4]
 800b0b0:	1e93      	subs	r3, r2, #2
 800b0b2:	2b22      	cmp	r3, #34	; 0x22
 800b0b4:	f04f 0300 	mov.w	r3, #0
 800b0b8:	d904      	bls.n	800b0c4 <__utoa+0x3c>
 800b0ba:	7023      	strb	r3, [r4, #0]
 800b0bc:	461c      	mov	r4, r3
 800b0be:	4620      	mov	r0, r4
 800b0c0:	b00b      	add	sp, #44	; 0x2c
 800b0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0c4:	1e66      	subs	r6, r4, #1
 800b0c6:	fbb5 f0f2 	udiv	r0, r5, r2
 800b0ca:	fb02 5510 	mls	r5, r2, r0, r5
 800b0ce:	af0a      	add	r7, sp, #40	; 0x28
 800b0d0:	443d      	add	r5, r7
 800b0d2:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800b0d6:	1c59      	adds	r1, r3, #1
 800b0d8:	f806 5f01 	strb.w	r5, [r6, #1]!
 800b0dc:	4605      	mov	r5, r0
 800b0de:	b968      	cbnz	r0, 800b0fc <__utoa+0x74>
 800b0e0:	4622      	mov	r2, r4
 800b0e2:	5460      	strb	r0, [r4, r1]
 800b0e4:	4423      	add	r3, r4
 800b0e6:	1b19      	subs	r1, r3, r4
 800b0e8:	1b10      	subs	r0, r2, r4
 800b0ea:	4281      	cmp	r1, r0
 800b0ec:	dde7      	ble.n	800b0be <__utoa+0x36>
 800b0ee:	7811      	ldrb	r1, [r2, #0]
 800b0f0:	7818      	ldrb	r0, [r3, #0]
 800b0f2:	f802 0b01 	strb.w	r0, [r2], #1
 800b0f6:	f803 1901 	strb.w	r1, [r3], #-1
 800b0fa:	e7f4      	b.n	800b0e6 <__utoa+0x5e>
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	e7e2      	b.n	800b0c6 <__utoa+0x3e>
 800b100:	0800d7ea 	.word	0x0800d7ea

0800b104 <__ascii_wctomb>:
 800b104:	b149      	cbz	r1, 800b11a <__ascii_wctomb+0x16>
 800b106:	2aff      	cmp	r2, #255	; 0xff
 800b108:	bf8b      	itete	hi
 800b10a:	238a      	movhi	r3, #138	; 0x8a
 800b10c:	700a      	strbls	r2, [r1, #0]
 800b10e:	6003      	strhi	r3, [r0, #0]
 800b110:	2001      	movls	r0, #1
 800b112:	bf88      	it	hi
 800b114:	f04f 30ff 	movhi.w	r0, #4294967295
 800b118:	4770      	bx	lr
 800b11a:	4608      	mov	r0, r1
 800b11c:	4770      	bx	lr

0800b11e <quorem>:
 800b11e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b122:	6903      	ldr	r3, [r0, #16]
 800b124:	690c      	ldr	r4, [r1, #16]
 800b126:	4680      	mov	r8, r0
 800b128:	42a3      	cmp	r3, r4
 800b12a:	f2c0 8084 	blt.w	800b236 <quorem+0x118>
 800b12e:	3c01      	subs	r4, #1
 800b130:	f101 0714 	add.w	r7, r1, #20
 800b134:	f100 0614 	add.w	r6, r0, #20
 800b138:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b13c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b140:	3501      	adds	r5, #1
 800b142:	fbb0 f5f5 	udiv	r5, r0, r5
 800b146:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b14a:	eb06 030c 	add.w	r3, r6, ip
 800b14e:	eb07 090c 	add.w	r9, r7, ip
 800b152:	9301      	str	r3, [sp, #4]
 800b154:	b39d      	cbz	r5, 800b1be <quorem+0xa0>
 800b156:	f04f 0a00 	mov.w	sl, #0
 800b15a:	4638      	mov	r0, r7
 800b15c:	46b6      	mov	lr, r6
 800b15e:	46d3      	mov	fp, sl
 800b160:	f850 2b04 	ldr.w	r2, [r0], #4
 800b164:	b293      	uxth	r3, r2
 800b166:	fb05 a303 	mla	r3, r5, r3, sl
 800b16a:	0c12      	lsrs	r2, r2, #16
 800b16c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b170:	fb05 a202 	mla	r2, r5, r2, sl
 800b174:	b29b      	uxth	r3, r3
 800b176:	ebab 0303 	sub.w	r3, fp, r3
 800b17a:	f8de b000 	ldr.w	fp, [lr]
 800b17e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b182:	fa1f fb8b 	uxth.w	fp, fp
 800b186:	445b      	add	r3, fp
 800b188:	fa1f fb82 	uxth.w	fp, r2
 800b18c:	f8de 2000 	ldr.w	r2, [lr]
 800b190:	4581      	cmp	r9, r0
 800b192:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b196:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1a0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b1a4:	f84e 3b04 	str.w	r3, [lr], #4
 800b1a8:	d2da      	bcs.n	800b160 <quorem+0x42>
 800b1aa:	f856 300c 	ldr.w	r3, [r6, ip]
 800b1ae:	b933      	cbnz	r3, 800b1be <quorem+0xa0>
 800b1b0:	9b01      	ldr	r3, [sp, #4]
 800b1b2:	3b04      	subs	r3, #4
 800b1b4:	429e      	cmp	r6, r3
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	d331      	bcc.n	800b21e <quorem+0x100>
 800b1ba:	f8c8 4010 	str.w	r4, [r8, #16]
 800b1be:	4640      	mov	r0, r8
 800b1c0:	f001 f836 	bl	800c230 <__mcmp>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	db26      	blt.n	800b216 <quorem+0xf8>
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	f04f 0c00 	mov.w	ip, #0
 800b1ce:	3501      	adds	r5, #1
 800b1d0:	f857 1b04 	ldr.w	r1, [r7], #4
 800b1d4:	f8d0 e000 	ldr.w	lr, [r0]
 800b1d8:	b28b      	uxth	r3, r1
 800b1da:	ebac 0303 	sub.w	r3, ip, r3
 800b1de:	fa1f f28e 	uxth.w	r2, lr
 800b1e2:	4413      	add	r3, r2
 800b1e4:	0c0a      	lsrs	r2, r1, #16
 800b1e6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b1ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1f4:	45b9      	cmp	r9, r7
 800b1f6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b1fa:	f840 3b04 	str.w	r3, [r0], #4
 800b1fe:	d2e7      	bcs.n	800b1d0 <quorem+0xb2>
 800b200:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b204:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b208:	b92a      	cbnz	r2, 800b216 <quorem+0xf8>
 800b20a:	3b04      	subs	r3, #4
 800b20c:	429e      	cmp	r6, r3
 800b20e:	461a      	mov	r2, r3
 800b210:	d30b      	bcc.n	800b22a <quorem+0x10c>
 800b212:	f8c8 4010 	str.w	r4, [r8, #16]
 800b216:	4628      	mov	r0, r5
 800b218:	b003      	add	sp, #12
 800b21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21e:	6812      	ldr	r2, [r2, #0]
 800b220:	3b04      	subs	r3, #4
 800b222:	2a00      	cmp	r2, #0
 800b224:	d1c9      	bne.n	800b1ba <quorem+0x9c>
 800b226:	3c01      	subs	r4, #1
 800b228:	e7c4      	b.n	800b1b4 <quorem+0x96>
 800b22a:	6812      	ldr	r2, [r2, #0]
 800b22c:	3b04      	subs	r3, #4
 800b22e:	2a00      	cmp	r2, #0
 800b230:	d1ef      	bne.n	800b212 <quorem+0xf4>
 800b232:	3c01      	subs	r4, #1
 800b234:	e7ea      	b.n	800b20c <quorem+0xee>
 800b236:	2000      	movs	r0, #0
 800b238:	e7ee      	b.n	800b218 <quorem+0xfa>
 800b23a:	0000      	movs	r0, r0
 800b23c:	0000      	movs	r0, r0
	...

0800b240 <_dtoa_r>:
 800b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b244:	4616      	mov	r6, r2
 800b246:	461f      	mov	r7, r3
 800b248:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b24a:	b095      	sub	sp, #84	; 0x54
 800b24c:	4604      	mov	r4, r0
 800b24e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800b252:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b256:	b93d      	cbnz	r5, 800b268 <_dtoa_r+0x28>
 800b258:	2010      	movs	r0, #16
 800b25a:	f000 fdb3 	bl	800bdc4 <malloc>
 800b25e:	6260      	str	r0, [r4, #36]	; 0x24
 800b260:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b264:	6005      	str	r5, [r0, #0]
 800b266:	60c5      	str	r5, [r0, #12]
 800b268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b26a:	6819      	ldr	r1, [r3, #0]
 800b26c:	b151      	cbz	r1, 800b284 <_dtoa_r+0x44>
 800b26e:	685a      	ldr	r2, [r3, #4]
 800b270:	2301      	movs	r3, #1
 800b272:	4093      	lsls	r3, r2
 800b274:	604a      	str	r2, [r1, #4]
 800b276:	608b      	str	r3, [r1, #8]
 800b278:	4620      	mov	r0, r4
 800b27a:	f000 fdf8 	bl	800be6e <_Bfree>
 800b27e:	2200      	movs	r2, #0
 800b280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b282:	601a      	str	r2, [r3, #0]
 800b284:	1e3b      	subs	r3, r7, #0
 800b286:	bfaf      	iteee	ge
 800b288:	2300      	movge	r3, #0
 800b28a:	2201      	movlt	r2, #1
 800b28c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b290:	9303      	strlt	r3, [sp, #12]
 800b292:	bfac      	ite	ge
 800b294:	f8c8 3000 	strge.w	r3, [r8]
 800b298:	f8c8 2000 	strlt.w	r2, [r8]
 800b29c:	4bae      	ldr	r3, [pc, #696]	; (800b558 <_dtoa_r+0x318>)
 800b29e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b2a2:	ea33 0308 	bics.w	r3, r3, r8
 800b2a6:	d11b      	bne.n	800b2e0 <_dtoa_r+0xa0>
 800b2a8:	f242 730f 	movw	r3, #9999	; 0x270f
 800b2ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b2ae:	6013      	str	r3, [r2, #0]
 800b2b0:	9b02      	ldr	r3, [sp, #8]
 800b2b2:	b923      	cbnz	r3, 800b2be <_dtoa_r+0x7e>
 800b2b4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	f000 8545 	beq.w	800bd48 <_dtoa_r+0xb08>
 800b2be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2c0:	b953      	cbnz	r3, 800b2d8 <_dtoa_r+0x98>
 800b2c2:	4ba6      	ldr	r3, [pc, #664]	; (800b55c <_dtoa_r+0x31c>)
 800b2c4:	e021      	b.n	800b30a <_dtoa_r+0xca>
 800b2c6:	4ba6      	ldr	r3, [pc, #664]	; (800b560 <_dtoa_r+0x320>)
 800b2c8:	9306      	str	r3, [sp, #24]
 800b2ca:	3308      	adds	r3, #8
 800b2cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b2ce:	6013      	str	r3, [r2, #0]
 800b2d0:	9806      	ldr	r0, [sp, #24]
 800b2d2:	b015      	add	sp, #84	; 0x54
 800b2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d8:	4ba0      	ldr	r3, [pc, #640]	; (800b55c <_dtoa_r+0x31c>)
 800b2da:	9306      	str	r3, [sp, #24]
 800b2dc:	3303      	adds	r3, #3
 800b2de:	e7f5      	b.n	800b2cc <_dtoa_r+0x8c>
 800b2e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	f7f5 fb5c 	bl	80009a8 <__aeabi_dcmpeq>
 800b2f0:	4682      	mov	sl, r0
 800b2f2:	b160      	cbz	r0, 800b30e <_dtoa_r+0xce>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b2f8:	6013      	str	r3, [r2, #0]
 800b2fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f000 8520 	beq.w	800bd42 <_dtoa_r+0xb02>
 800b302:	4b98      	ldr	r3, [pc, #608]	; (800b564 <_dtoa_r+0x324>)
 800b304:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	3b01      	subs	r3, #1
 800b30a:	9306      	str	r3, [sp, #24]
 800b30c:	e7e0      	b.n	800b2d0 <_dtoa_r+0x90>
 800b30e:	ab12      	add	r3, sp, #72	; 0x48
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	ab13      	add	r3, sp, #76	; 0x4c
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	4632      	mov	r2, r6
 800b318:	463b      	mov	r3, r7
 800b31a:	4620      	mov	r0, r4
 800b31c:	f001 f800 	bl	800c320 <__d2b>
 800b320:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b324:	4683      	mov	fp, r0
 800b326:	2d00      	cmp	r5, #0
 800b328:	d07d      	beq.n	800b426 <_dtoa_r+0x1e6>
 800b32a:	46b0      	mov	r8, r6
 800b32c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b330:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800b334:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800b338:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b33c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800b340:	2200      	movs	r2, #0
 800b342:	4b89      	ldr	r3, [pc, #548]	; (800b568 <_dtoa_r+0x328>)
 800b344:	4640      	mov	r0, r8
 800b346:	4649      	mov	r1, r9
 800b348:	f7f4 ff0e 	bl	8000168 <__aeabi_dsub>
 800b34c:	a37c      	add	r3, pc, #496	; (adr r3, 800b540 <_dtoa_r+0x300>)
 800b34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b352:	f7f5 f8c1 	bl	80004d8 <__aeabi_dmul>
 800b356:	a37c      	add	r3, pc, #496	; (adr r3, 800b548 <_dtoa_r+0x308>)
 800b358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35c:	f7f4 ff06 	bl	800016c <__adddf3>
 800b360:	4606      	mov	r6, r0
 800b362:	4628      	mov	r0, r5
 800b364:	460f      	mov	r7, r1
 800b366:	f7f5 f84d 	bl	8000404 <__aeabi_i2d>
 800b36a:	a379      	add	r3, pc, #484	; (adr r3, 800b550 <_dtoa_r+0x310>)
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	f7f5 f8b2 	bl	80004d8 <__aeabi_dmul>
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	4630      	mov	r0, r6
 800b37a:	4639      	mov	r1, r7
 800b37c:	f7f4 fef6 	bl	800016c <__adddf3>
 800b380:	4606      	mov	r6, r0
 800b382:	460f      	mov	r7, r1
 800b384:	f7f5 fb58 	bl	8000a38 <__aeabi_d2iz>
 800b388:	2200      	movs	r2, #0
 800b38a:	4682      	mov	sl, r0
 800b38c:	2300      	movs	r3, #0
 800b38e:	4630      	mov	r0, r6
 800b390:	4639      	mov	r1, r7
 800b392:	f7f5 fb13 	bl	80009bc <__aeabi_dcmplt>
 800b396:	b148      	cbz	r0, 800b3ac <_dtoa_r+0x16c>
 800b398:	4650      	mov	r0, sl
 800b39a:	f7f5 f833 	bl	8000404 <__aeabi_i2d>
 800b39e:	4632      	mov	r2, r6
 800b3a0:	463b      	mov	r3, r7
 800b3a2:	f7f5 fb01 	bl	80009a8 <__aeabi_dcmpeq>
 800b3a6:	b908      	cbnz	r0, 800b3ac <_dtoa_r+0x16c>
 800b3a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3ac:	f1ba 0f16 	cmp.w	sl, #22
 800b3b0:	d85a      	bhi.n	800b468 <_dtoa_r+0x228>
 800b3b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3b6:	496d      	ldr	r1, [pc, #436]	; (800b56c <_dtoa_r+0x32c>)
 800b3b8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b3bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3c0:	f7f5 fb1a 	bl	80009f8 <__aeabi_dcmpgt>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d051      	beq.n	800b46c <_dtoa_r+0x22c>
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3ce:	930d      	str	r3, [sp, #52]	; 0x34
 800b3d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b3d2:	1b5d      	subs	r5, r3, r5
 800b3d4:	1e6b      	subs	r3, r5, #1
 800b3d6:	9307      	str	r3, [sp, #28]
 800b3d8:	bf43      	ittte	mi
 800b3da:	2300      	movmi	r3, #0
 800b3dc:	f1c5 0901 	rsbmi	r9, r5, #1
 800b3e0:	9307      	strmi	r3, [sp, #28]
 800b3e2:	f04f 0900 	movpl.w	r9, #0
 800b3e6:	f1ba 0f00 	cmp.w	sl, #0
 800b3ea:	db41      	blt.n	800b470 <_dtoa_r+0x230>
 800b3ec:	9b07      	ldr	r3, [sp, #28]
 800b3ee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800b3f2:	4453      	add	r3, sl
 800b3f4:	9307      	str	r3, [sp, #28]
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	9308      	str	r3, [sp, #32]
 800b3fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b3fc:	2b09      	cmp	r3, #9
 800b3fe:	f200 808f 	bhi.w	800b520 <_dtoa_r+0x2e0>
 800b402:	2b05      	cmp	r3, #5
 800b404:	bfc4      	itt	gt
 800b406:	3b04      	subgt	r3, #4
 800b408:	931e      	strgt	r3, [sp, #120]	; 0x78
 800b40a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b40c:	bfc8      	it	gt
 800b40e:	2500      	movgt	r5, #0
 800b410:	f1a3 0302 	sub.w	r3, r3, #2
 800b414:	bfd8      	it	le
 800b416:	2501      	movle	r5, #1
 800b418:	2b03      	cmp	r3, #3
 800b41a:	f200 808d 	bhi.w	800b538 <_dtoa_r+0x2f8>
 800b41e:	e8df f003 	tbb	[pc, r3]
 800b422:	7d7b      	.short	0x7d7b
 800b424:	6f2f      	.short	0x6f2f
 800b426:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b42a:	441d      	add	r5, r3
 800b42c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b430:	2820      	cmp	r0, #32
 800b432:	dd13      	ble.n	800b45c <_dtoa_r+0x21c>
 800b434:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b438:	9b02      	ldr	r3, [sp, #8]
 800b43a:	fa08 f800 	lsl.w	r8, r8, r0
 800b43e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b442:	fa23 f000 	lsr.w	r0, r3, r0
 800b446:	ea48 0000 	orr.w	r0, r8, r0
 800b44a:	f7f4 ffcb 	bl	80003e4 <__aeabi_ui2d>
 800b44e:	2301      	movs	r3, #1
 800b450:	4680      	mov	r8, r0
 800b452:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800b456:	3d01      	subs	r5, #1
 800b458:	9310      	str	r3, [sp, #64]	; 0x40
 800b45a:	e771      	b.n	800b340 <_dtoa_r+0x100>
 800b45c:	9b02      	ldr	r3, [sp, #8]
 800b45e:	f1c0 0020 	rsb	r0, r0, #32
 800b462:	fa03 f000 	lsl.w	r0, r3, r0
 800b466:	e7f0      	b.n	800b44a <_dtoa_r+0x20a>
 800b468:	2301      	movs	r3, #1
 800b46a:	e7b0      	b.n	800b3ce <_dtoa_r+0x18e>
 800b46c:	900d      	str	r0, [sp, #52]	; 0x34
 800b46e:	e7af      	b.n	800b3d0 <_dtoa_r+0x190>
 800b470:	f1ca 0300 	rsb	r3, sl, #0
 800b474:	9308      	str	r3, [sp, #32]
 800b476:	2300      	movs	r3, #0
 800b478:	eba9 090a 	sub.w	r9, r9, sl
 800b47c:	930c      	str	r3, [sp, #48]	; 0x30
 800b47e:	e7bc      	b.n	800b3fa <_dtoa_r+0x1ba>
 800b480:	2301      	movs	r3, #1
 800b482:	9309      	str	r3, [sp, #36]	; 0x24
 800b484:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b486:	2b00      	cmp	r3, #0
 800b488:	dd74      	ble.n	800b574 <_dtoa_r+0x334>
 800b48a:	4698      	mov	r8, r3
 800b48c:	9304      	str	r3, [sp, #16]
 800b48e:	2200      	movs	r2, #0
 800b490:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b492:	6072      	str	r2, [r6, #4]
 800b494:	2204      	movs	r2, #4
 800b496:	f102 0014 	add.w	r0, r2, #20
 800b49a:	4298      	cmp	r0, r3
 800b49c:	6871      	ldr	r1, [r6, #4]
 800b49e:	d96e      	bls.n	800b57e <_dtoa_r+0x33e>
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f000 fcb0 	bl	800be06 <_Balloc>
 800b4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4a8:	6030      	str	r0, [r6, #0]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f1b8 0f0e 	cmp.w	r8, #14
 800b4b0:	9306      	str	r3, [sp, #24]
 800b4b2:	f200 80ed 	bhi.w	800b690 <_dtoa_r+0x450>
 800b4b6:	2d00      	cmp	r5, #0
 800b4b8:	f000 80ea 	beq.w	800b690 <_dtoa_r+0x450>
 800b4bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4c0:	f1ba 0f00 	cmp.w	sl, #0
 800b4c4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b4c8:	dd77      	ble.n	800b5ba <_dtoa_r+0x37a>
 800b4ca:	4a28      	ldr	r2, [pc, #160]	; (800b56c <_dtoa_r+0x32c>)
 800b4cc:	f00a 030f 	and.w	r3, sl, #15
 800b4d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b4d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b4d8:	06f0      	lsls	r0, r6, #27
 800b4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b4e2:	d568      	bpl.n	800b5b6 <_dtoa_r+0x376>
 800b4e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b4e8:	4b21      	ldr	r3, [pc, #132]	; (800b570 <_dtoa_r+0x330>)
 800b4ea:	2503      	movs	r5, #3
 800b4ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b4f0:	f7f5 f91c 	bl	800072c <__aeabi_ddiv>
 800b4f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4f8:	f006 060f 	and.w	r6, r6, #15
 800b4fc:	4f1c      	ldr	r7, [pc, #112]	; (800b570 <_dtoa_r+0x330>)
 800b4fe:	e04f      	b.n	800b5a0 <_dtoa_r+0x360>
 800b500:	2301      	movs	r3, #1
 800b502:	9309      	str	r3, [sp, #36]	; 0x24
 800b504:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b506:	4453      	add	r3, sl
 800b508:	f103 0801 	add.w	r8, r3, #1
 800b50c:	9304      	str	r3, [sp, #16]
 800b50e:	4643      	mov	r3, r8
 800b510:	2b01      	cmp	r3, #1
 800b512:	bfb8      	it	lt
 800b514:	2301      	movlt	r3, #1
 800b516:	e7ba      	b.n	800b48e <_dtoa_r+0x24e>
 800b518:	2300      	movs	r3, #0
 800b51a:	e7b2      	b.n	800b482 <_dtoa_r+0x242>
 800b51c:	2300      	movs	r3, #0
 800b51e:	e7f0      	b.n	800b502 <_dtoa_r+0x2c2>
 800b520:	2501      	movs	r5, #1
 800b522:	2300      	movs	r3, #0
 800b524:	9509      	str	r5, [sp, #36]	; 0x24
 800b526:	931e      	str	r3, [sp, #120]	; 0x78
 800b528:	f04f 33ff 	mov.w	r3, #4294967295
 800b52c:	2200      	movs	r2, #0
 800b52e:	9304      	str	r3, [sp, #16]
 800b530:	4698      	mov	r8, r3
 800b532:	2312      	movs	r3, #18
 800b534:	921f      	str	r2, [sp, #124]	; 0x7c
 800b536:	e7aa      	b.n	800b48e <_dtoa_r+0x24e>
 800b538:	2301      	movs	r3, #1
 800b53a:	9309      	str	r3, [sp, #36]	; 0x24
 800b53c:	e7f4      	b.n	800b528 <_dtoa_r+0x2e8>
 800b53e:	bf00      	nop
 800b540:	636f4361 	.word	0x636f4361
 800b544:	3fd287a7 	.word	0x3fd287a7
 800b548:	8b60c8b3 	.word	0x8b60c8b3
 800b54c:	3fc68a28 	.word	0x3fc68a28
 800b550:	509f79fb 	.word	0x509f79fb
 800b554:	3fd34413 	.word	0x3fd34413
 800b558:	7ff00000 	.word	0x7ff00000
 800b55c:	0800d919 	.word	0x0800d919
 800b560:	0800d910 	.word	0x0800d910
 800b564:	0800d7c7 	.word	0x0800d7c7
 800b568:	3ff80000 	.word	0x3ff80000
 800b56c:	0800d948 	.word	0x0800d948
 800b570:	0800d920 	.word	0x0800d920
 800b574:	2301      	movs	r3, #1
 800b576:	9304      	str	r3, [sp, #16]
 800b578:	4698      	mov	r8, r3
 800b57a:	461a      	mov	r2, r3
 800b57c:	e7da      	b.n	800b534 <_dtoa_r+0x2f4>
 800b57e:	3101      	adds	r1, #1
 800b580:	6071      	str	r1, [r6, #4]
 800b582:	0052      	lsls	r2, r2, #1
 800b584:	e787      	b.n	800b496 <_dtoa_r+0x256>
 800b586:	07f1      	lsls	r1, r6, #31
 800b588:	d508      	bpl.n	800b59c <_dtoa_r+0x35c>
 800b58a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b58e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b592:	f7f4 ffa1 	bl	80004d8 <__aeabi_dmul>
 800b596:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b59a:	3501      	adds	r5, #1
 800b59c:	1076      	asrs	r6, r6, #1
 800b59e:	3708      	adds	r7, #8
 800b5a0:	2e00      	cmp	r6, #0
 800b5a2:	d1f0      	bne.n	800b586 <_dtoa_r+0x346>
 800b5a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b5a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5ac:	f7f5 f8be 	bl	800072c <__aeabi_ddiv>
 800b5b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5b4:	e01b      	b.n	800b5ee <_dtoa_r+0x3ae>
 800b5b6:	2502      	movs	r5, #2
 800b5b8:	e7a0      	b.n	800b4fc <_dtoa_r+0x2bc>
 800b5ba:	f000 80a4 	beq.w	800b706 <_dtoa_r+0x4c6>
 800b5be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b5c2:	f1ca 0600 	rsb	r6, sl, #0
 800b5c6:	4ba0      	ldr	r3, [pc, #640]	; (800b848 <_dtoa_r+0x608>)
 800b5c8:	f006 020f 	and.w	r2, r6, #15
 800b5cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	f7f4 ff80 	bl	80004d8 <__aeabi_dmul>
 800b5d8:	2502      	movs	r5, #2
 800b5da:	2300      	movs	r3, #0
 800b5dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5e0:	4f9a      	ldr	r7, [pc, #616]	; (800b84c <_dtoa_r+0x60c>)
 800b5e2:	1136      	asrs	r6, r6, #4
 800b5e4:	2e00      	cmp	r6, #0
 800b5e6:	f040 8083 	bne.w	800b6f0 <_dtoa_r+0x4b0>
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d1e0      	bne.n	800b5b0 <_dtoa_r+0x370>
 800b5ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f000 808a 	beq.w	800b70a <_dtoa_r+0x4ca>
 800b5f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b5fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b602:	2200      	movs	r2, #0
 800b604:	4b92      	ldr	r3, [pc, #584]	; (800b850 <_dtoa_r+0x610>)
 800b606:	f7f5 f9d9 	bl	80009bc <__aeabi_dcmplt>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	d07d      	beq.n	800b70a <_dtoa_r+0x4ca>
 800b60e:	f1b8 0f00 	cmp.w	r8, #0
 800b612:	d07a      	beq.n	800b70a <_dtoa_r+0x4ca>
 800b614:	9b04      	ldr	r3, [sp, #16]
 800b616:	2b00      	cmp	r3, #0
 800b618:	dd36      	ble.n	800b688 <_dtoa_r+0x448>
 800b61a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b61e:	2200      	movs	r2, #0
 800b620:	4b8c      	ldr	r3, [pc, #560]	; (800b854 <_dtoa_r+0x614>)
 800b622:	f7f4 ff59 	bl	80004d8 <__aeabi_dmul>
 800b626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b62a:	9e04      	ldr	r6, [sp, #16]
 800b62c:	f10a 37ff 	add.w	r7, sl, #4294967295
 800b630:	3501      	adds	r5, #1
 800b632:	4628      	mov	r0, r5
 800b634:	f7f4 fee6 	bl	8000404 <__aeabi_i2d>
 800b638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b63c:	f7f4 ff4c 	bl	80004d8 <__aeabi_dmul>
 800b640:	2200      	movs	r2, #0
 800b642:	4b85      	ldr	r3, [pc, #532]	; (800b858 <_dtoa_r+0x618>)
 800b644:	f7f4 fd92 	bl	800016c <__adddf3>
 800b648:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800b64c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b650:	950b      	str	r5, [sp, #44]	; 0x2c
 800b652:	2e00      	cmp	r6, #0
 800b654:	d15c      	bne.n	800b710 <_dtoa_r+0x4d0>
 800b656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b65a:	2200      	movs	r2, #0
 800b65c:	4b7f      	ldr	r3, [pc, #508]	; (800b85c <_dtoa_r+0x61c>)
 800b65e:	f7f4 fd83 	bl	8000168 <__aeabi_dsub>
 800b662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b664:	462b      	mov	r3, r5
 800b666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b66a:	f7f5 f9c5 	bl	80009f8 <__aeabi_dcmpgt>
 800b66e:	2800      	cmp	r0, #0
 800b670:	f040 8281 	bne.w	800bb76 <_dtoa_r+0x936>
 800b674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b67a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b67e:	f7f5 f99d 	bl	80009bc <__aeabi_dcmplt>
 800b682:	2800      	cmp	r0, #0
 800b684:	f040 8275 	bne.w	800bb72 <_dtoa_r+0x932>
 800b688:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b68c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b690:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b692:	2b00      	cmp	r3, #0
 800b694:	f2c0 814b 	blt.w	800b92e <_dtoa_r+0x6ee>
 800b698:	f1ba 0f0e 	cmp.w	sl, #14
 800b69c:	f300 8147 	bgt.w	800b92e <_dtoa_r+0x6ee>
 800b6a0:	4b69      	ldr	r3, [pc, #420]	; (800b848 <_dtoa_r+0x608>)
 800b6a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b6ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f280 80d7 	bge.w	800b864 <_dtoa_r+0x624>
 800b6b6:	f1b8 0f00 	cmp.w	r8, #0
 800b6ba:	f300 80d3 	bgt.w	800b864 <_dtoa_r+0x624>
 800b6be:	f040 8257 	bne.w	800bb70 <_dtoa_r+0x930>
 800b6c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	4b64      	ldr	r3, [pc, #400]	; (800b85c <_dtoa_r+0x61c>)
 800b6ca:	f7f4 ff05 	bl	80004d8 <__aeabi_dmul>
 800b6ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6d2:	f7f5 f987 	bl	80009e4 <__aeabi_dcmpge>
 800b6d6:	4646      	mov	r6, r8
 800b6d8:	4647      	mov	r7, r8
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	f040 822d 	bne.w	800bb3a <_dtoa_r+0x8fa>
 800b6e0:	9b06      	ldr	r3, [sp, #24]
 800b6e2:	9a06      	ldr	r2, [sp, #24]
 800b6e4:	1c5d      	adds	r5, r3, #1
 800b6e6:	2331      	movs	r3, #49	; 0x31
 800b6e8:	f10a 0a01 	add.w	sl, sl, #1
 800b6ec:	7013      	strb	r3, [r2, #0]
 800b6ee:	e228      	b.n	800bb42 <_dtoa_r+0x902>
 800b6f0:	07f2      	lsls	r2, r6, #31
 800b6f2:	d505      	bpl.n	800b700 <_dtoa_r+0x4c0>
 800b6f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6f8:	f7f4 feee 	bl	80004d8 <__aeabi_dmul>
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	3501      	adds	r5, #1
 800b700:	1076      	asrs	r6, r6, #1
 800b702:	3708      	adds	r7, #8
 800b704:	e76e      	b.n	800b5e4 <_dtoa_r+0x3a4>
 800b706:	2502      	movs	r5, #2
 800b708:	e771      	b.n	800b5ee <_dtoa_r+0x3ae>
 800b70a:	4657      	mov	r7, sl
 800b70c:	4646      	mov	r6, r8
 800b70e:	e790      	b.n	800b632 <_dtoa_r+0x3f2>
 800b710:	4b4d      	ldr	r3, [pc, #308]	; (800b848 <_dtoa_r+0x608>)
 800b712:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b716:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d048      	beq.n	800b7b2 <_dtoa_r+0x572>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	2000      	movs	r0, #0
 800b726:	494e      	ldr	r1, [pc, #312]	; (800b860 <_dtoa_r+0x620>)
 800b728:	f7f5 f800 	bl	800072c <__aeabi_ddiv>
 800b72c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b730:	f7f4 fd1a 	bl	8000168 <__aeabi_dsub>
 800b734:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b738:	9d06      	ldr	r5, [sp, #24]
 800b73a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b73e:	f7f5 f97b 	bl	8000a38 <__aeabi_d2iz>
 800b742:	9011      	str	r0, [sp, #68]	; 0x44
 800b744:	f7f4 fe5e 	bl	8000404 <__aeabi_i2d>
 800b748:	4602      	mov	r2, r0
 800b74a:	460b      	mov	r3, r1
 800b74c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b750:	f7f4 fd0a 	bl	8000168 <__aeabi_dsub>
 800b754:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b756:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b75a:	3330      	adds	r3, #48	; 0x30
 800b75c:	f805 3b01 	strb.w	r3, [r5], #1
 800b760:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b764:	f7f5 f92a 	bl	80009bc <__aeabi_dcmplt>
 800b768:	2800      	cmp	r0, #0
 800b76a:	d163      	bne.n	800b834 <_dtoa_r+0x5f4>
 800b76c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b770:	2000      	movs	r0, #0
 800b772:	4937      	ldr	r1, [pc, #220]	; (800b850 <_dtoa_r+0x610>)
 800b774:	f7f4 fcf8 	bl	8000168 <__aeabi_dsub>
 800b778:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b77c:	f7f5 f91e 	bl	80009bc <__aeabi_dcmplt>
 800b780:	2800      	cmp	r0, #0
 800b782:	f040 80b5 	bne.w	800b8f0 <_dtoa_r+0x6b0>
 800b786:	9b06      	ldr	r3, [sp, #24]
 800b788:	1aeb      	subs	r3, r5, r3
 800b78a:	429e      	cmp	r6, r3
 800b78c:	f77f af7c 	ble.w	800b688 <_dtoa_r+0x448>
 800b790:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b794:	2200      	movs	r2, #0
 800b796:	4b2f      	ldr	r3, [pc, #188]	; (800b854 <_dtoa_r+0x614>)
 800b798:	f7f4 fe9e 	bl	80004d8 <__aeabi_dmul>
 800b79c:	2200      	movs	r2, #0
 800b79e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b7a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7a6:	4b2b      	ldr	r3, [pc, #172]	; (800b854 <_dtoa_r+0x614>)
 800b7a8:	f7f4 fe96 	bl	80004d8 <__aeabi_dmul>
 800b7ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7b0:	e7c3      	b.n	800b73a <_dtoa_r+0x4fa>
 800b7b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b7b6:	f7f4 fe8f 	bl	80004d8 <__aeabi_dmul>
 800b7ba:	9b06      	ldr	r3, [sp, #24]
 800b7bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b7c0:	199d      	adds	r5, r3, r6
 800b7c2:	461e      	mov	r6, r3
 800b7c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7c8:	f7f5 f936 	bl	8000a38 <__aeabi_d2iz>
 800b7cc:	9011      	str	r0, [sp, #68]	; 0x44
 800b7ce:	f7f4 fe19 	bl	8000404 <__aeabi_i2d>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7da:	f7f4 fcc5 	bl	8000168 <__aeabi_dsub>
 800b7de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b7e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7e4:	3330      	adds	r3, #48	; 0x30
 800b7e6:	f806 3b01 	strb.w	r3, [r6], #1
 800b7ea:	42ae      	cmp	r6, r5
 800b7ec:	f04f 0200 	mov.w	r2, #0
 800b7f0:	d124      	bne.n	800b83c <_dtoa_r+0x5fc>
 800b7f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b7f6:	4b1a      	ldr	r3, [pc, #104]	; (800b860 <_dtoa_r+0x620>)
 800b7f8:	f7f4 fcb8 	bl	800016c <__adddf3>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b804:	f7f5 f8f8 	bl	80009f8 <__aeabi_dcmpgt>
 800b808:	2800      	cmp	r0, #0
 800b80a:	d171      	bne.n	800b8f0 <_dtoa_r+0x6b0>
 800b80c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b810:	2000      	movs	r0, #0
 800b812:	4913      	ldr	r1, [pc, #76]	; (800b860 <_dtoa_r+0x620>)
 800b814:	f7f4 fca8 	bl	8000168 <__aeabi_dsub>
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b820:	f7f5 f8cc 	bl	80009bc <__aeabi_dcmplt>
 800b824:	2800      	cmp	r0, #0
 800b826:	f43f af2f 	beq.w	800b688 <_dtoa_r+0x448>
 800b82a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b82e:	1e6a      	subs	r2, r5, #1
 800b830:	2b30      	cmp	r3, #48	; 0x30
 800b832:	d001      	beq.n	800b838 <_dtoa_r+0x5f8>
 800b834:	46ba      	mov	sl, r7
 800b836:	e04a      	b.n	800b8ce <_dtoa_r+0x68e>
 800b838:	4615      	mov	r5, r2
 800b83a:	e7f6      	b.n	800b82a <_dtoa_r+0x5ea>
 800b83c:	4b05      	ldr	r3, [pc, #20]	; (800b854 <_dtoa_r+0x614>)
 800b83e:	f7f4 fe4b 	bl	80004d8 <__aeabi_dmul>
 800b842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b846:	e7bd      	b.n	800b7c4 <_dtoa_r+0x584>
 800b848:	0800d948 	.word	0x0800d948
 800b84c:	0800d920 	.word	0x0800d920
 800b850:	3ff00000 	.word	0x3ff00000
 800b854:	40240000 	.word	0x40240000
 800b858:	401c0000 	.word	0x401c0000
 800b85c:	40140000 	.word	0x40140000
 800b860:	3fe00000 	.word	0x3fe00000
 800b864:	9d06      	ldr	r5, [sp, #24]
 800b866:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b86a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b86e:	4630      	mov	r0, r6
 800b870:	4639      	mov	r1, r7
 800b872:	f7f4 ff5b 	bl	800072c <__aeabi_ddiv>
 800b876:	f7f5 f8df 	bl	8000a38 <__aeabi_d2iz>
 800b87a:	4681      	mov	r9, r0
 800b87c:	f7f4 fdc2 	bl	8000404 <__aeabi_i2d>
 800b880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b884:	f7f4 fe28 	bl	80004d8 <__aeabi_dmul>
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	4630      	mov	r0, r6
 800b88e:	4639      	mov	r1, r7
 800b890:	f7f4 fc6a 	bl	8000168 <__aeabi_dsub>
 800b894:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800b898:	f805 6b01 	strb.w	r6, [r5], #1
 800b89c:	9e06      	ldr	r6, [sp, #24]
 800b89e:	4602      	mov	r2, r0
 800b8a0:	1bae      	subs	r6, r5, r6
 800b8a2:	45b0      	cmp	r8, r6
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	d135      	bne.n	800b914 <_dtoa_r+0x6d4>
 800b8a8:	f7f4 fc60 	bl	800016c <__adddf3>
 800b8ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8b0:	4606      	mov	r6, r0
 800b8b2:	460f      	mov	r7, r1
 800b8b4:	f7f5 f8a0 	bl	80009f8 <__aeabi_dcmpgt>
 800b8b8:	b9c8      	cbnz	r0, 800b8ee <_dtoa_r+0x6ae>
 800b8ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8be:	4630      	mov	r0, r6
 800b8c0:	4639      	mov	r1, r7
 800b8c2:	f7f5 f871 	bl	80009a8 <__aeabi_dcmpeq>
 800b8c6:	b110      	cbz	r0, 800b8ce <_dtoa_r+0x68e>
 800b8c8:	f019 0f01 	tst.w	r9, #1
 800b8cc:	d10f      	bne.n	800b8ee <_dtoa_r+0x6ae>
 800b8ce:	4659      	mov	r1, fp
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f000 facc 	bl	800be6e <_Bfree>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b8da:	702b      	strb	r3, [r5, #0]
 800b8dc:	f10a 0301 	add.w	r3, sl, #1
 800b8e0:	6013      	str	r3, [r2, #0]
 800b8e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f43f acf3 	beq.w	800b2d0 <_dtoa_r+0x90>
 800b8ea:	601d      	str	r5, [r3, #0]
 800b8ec:	e4f0      	b.n	800b2d0 <_dtoa_r+0x90>
 800b8ee:	4657      	mov	r7, sl
 800b8f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b8f4:	1e6b      	subs	r3, r5, #1
 800b8f6:	2a39      	cmp	r2, #57	; 0x39
 800b8f8:	d106      	bne.n	800b908 <_dtoa_r+0x6c8>
 800b8fa:	9a06      	ldr	r2, [sp, #24]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d107      	bne.n	800b910 <_dtoa_r+0x6d0>
 800b900:	2330      	movs	r3, #48	; 0x30
 800b902:	7013      	strb	r3, [r2, #0]
 800b904:	4613      	mov	r3, r2
 800b906:	3701      	adds	r7, #1
 800b908:	781a      	ldrb	r2, [r3, #0]
 800b90a:	3201      	adds	r2, #1
 800b90c:	701a      	strb	r2, [r3, #0]
 800b90e:	e791      	b.n	800b834 <_dtoa_r+0x5f4>
 800b910:	461d      	mov	r5, r3
 800b912:	e7ed      	b.n	800b8f0 <_dtoa_r+0x6b0>
 800b914:	2200      	movs	r2, #0
 800b916:	4b99      	ldr	r3, [pc, #612]	; (800bb7c <_dtoa_r+0x93c>)
 800b918:	f7f4 fdde 	bl	80004d8 <__aeabi_dmul>
 800b91c:	2200      	movs	r2, #0
 800b91e:	2300      	movs	r3, #0
 800b920:	4606      	mov	r6, r0
 800b922:	460f      	mov	r7, r1
 800b924:	f7f5 f840 	bl	80009a8 <__aeabi_dcmpeq>
 800b928:	2800      	cmp	r0, #0
 800b92a:	d09e      	beq.n	800b86a <_dtoa_r+0x62a>
 800b92c:	e7cf      	b.n	800b8ce <_dtoa_r+0x68e>
 800b92e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b930:	2a00      	cmp	r2, #0
 800b932:	f000 8088 	beq.w	800ba46 <_dtoa_r+0x806>
 800b936:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b938:	2a01      	cmp	r2, #1
 800b93a:	dc6d      	bgt.n	800ba18 <_dtoa_r+0x7d8>
 800b93c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b93e:	2a00      	cmp	r2, #0
 800b940:	d066      	beq.n	800ba10 <_dtoa_r+0x7d0>
 800b942:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b946:	464d      	mov	r5, r9
 800b948:	9e08      	ldr	r6, [sp, #32]
 800b94a:	9a07      	ldr	r2, [sp, #28]
 800b94c:	2101      	movs	r1, #1
 800b94e:	441a      	add	r2, r3
 800b950:	4620      	mov	r0, r4
 800b952:	4499      	add	r9, r3
 800b954:	9207      	str	r2, [sp, #28]
 800b956:	f000 fb2a 	bl	800bfae <__i2b>
 800b95a:	4607      	mov	r7, r0
 800b95c:	2d00      	cmp	r5, #0
 800b95e:	dd0b      	ble.n	800b978 <_dtoa_r+0x738>
 800b960:	9b07      	ldr	r3, [sp, #28]
 800b962:	2b00      	cmp	r3, #0
 800b964:	dd08      	ble.n	800b978 <_dtoa_r+0x738>
 800b966:	42ab      	cmp	r3, r5
 800b968:	bfa8      	it	ge
 800b96a:	462b      	movge	r3, r5
 800b96c:	9a07      	ldr	r2, [sp, #28]
 800b96e:	eba9 0903 	sub.w	r9, r9, r3
 800b972:	1aed      	subs	r5, r5, r3
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	9307      	str	r3, [sp, #28]
 800b978:	9b08      	ldr	r3, [sp, #32]
 800b97a:	b1eb      	cbz	r3, 800b9b8 <_dtoa_r+0x778>
 800b97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d065      	beq.n	800ba4e <_dtoa_r+0x80e>
 800b982:	b18e      	cbz	r6, 800b9a8 <_dtoa_r+0x768>
 800b984:	4639      	mov	r1, r7
 800b986:	4632      	mov	r2, r6
 800b988:	4620      	mov	r0, r4
 800b98a:	f000 fbaf 	bl	800c0ec <__pow5mult>
 800b98e:	465a      	mov	r2, fp
 800b990:	4601      	mov	r1, r0
 800b992:	4607      	mov	r7, r0
 800b994:	4620      	mov	r0, r4
 800b996:	f000 fb13 	bl	800bfc0 <__multiply>
 800b99a:	4659      	mov	r1, fp
 800b99c:	900a      	str	r0, [sp, #40]	; 0x28
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f000 fa65 	bl	800be6e <_Bfree>
 800b9a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9a6:	469b      	mov	fp, r3
 800b9a8:	9b08      	ldr	r3, [sp, #32]
 800b9aa:	1b9a      	subs	r2, r3, r6
 800b9ac:	d004      	beq.n	800b9b8 <_dtoa_r+0x778>
 800b9ae:	4659      	mov	r1, fp
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f000 fb9b 	bl	800c0ec <__pow5mult>
 800b9b6:	4683      	mov	fp, r0
 800b9b8:	2101      	movs	r1, #1
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 faf7 	bl	800bfae <__i2b>
 800b9c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9c2:	4606      	mov	r6, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f000 81c6 	beq.w	800bd56 <_dtoa_r+0xb16>
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	4601      	mov	r1, r0
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f000 fb8c 	bl	800c0ec <__pow5mult>
 800b9d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b9d6:	4606      	mov	r6, r0
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	dc3e      	bgt.n	800ba5a <_dtoa_r+0x81a>
 800b9dc:	9b02      	ldr	r3, [sp, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d137      	bne.n	800ba52 <_dtoa_r+0x812>
 800b9e2:	9b03      	ldr	r3, [sp, #12]
 800b9e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d134      	bne.n	800ba56 <_dtoa_r+0x816>
 800b9ec:	9b03      	ldr	r3, [sp, #12]
 800b9ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b9f2:	0d1b      	lsrs	r3, r3, #20
 800b9f4:	051b      	lsls	r3, r3, #20
 800b9f6:	b12b      	cbz	r3, 800ba04 <_dtoa_r+0x7c4>
 800b9f8:	9b07      	ldr	r3, [sp, #28]
 800b9fa:	f109 0901 	add.w	r9, r9, #1
 800b9fe:	3301      	adds	r3, #1
 800ba00:	9307      	str	r3, [sp, #28]
 800ba02:	2301      	movs	r3, #1
 800ba04:	9308      	str	r3, [sp, #32]
 800ba06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d128      	bne.n	800ba5e <_dtoa_r+0x81e>
 800ba0c:	2001      	movs	r0, #1
 800ba0e:	e02e      	b.n	800ba6e <_dtoa_r+0x82e>
 800ba10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba16:	e796      	b.n	800b946 <_dtoa_r+0x706>
 800ba18:	9b08      	ldr	r3, [sp, #32]
 800ba1a:	f108 36ff 	add.w	r6, r8, #4294967295
 800ba1e:	42b3      	cmp	r3, r6
 800ba20:	bfb7      	itett	lt
 800ba22:	9b08      	ldrlt	r3, [sp, #32]
 800ba24:	1b9e      	subge	r6, r3, r6
 800ba26:	1af2      	sublt	r2, r6, r3
 800ba28:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800ba2a:	bfbf      	itttt	lt
 800ba2c:	9608      	strlt	r6, [sp, #32]
 800ba2e:	189b      	addlt	r3, r3, r2
 800ba30:	930c      	strlt	r3, [sp, #48]	; 0x30
 800ba32:	2600      	movlt	r6, #0
 800ba34:	f1b8 0f00 	cmp.w	r8, #0
 800ba38:	bfb9      	ittee	lt
 800ba3a:	eba9 0508 	sublt.w	r5, r9, r8
 800ba3e:	2300      	movlt	r3, #0
 800ba40:	464d      	movge	r5, r9
 800ba42:	4643      	movge	r3, r8
 800ba44:	e781      	b.n	800b94a <_dtoa_r+0x70a>
 800ba46:	9e08      	ldr	r6, [sp, #32]
 800ba48:	464d      	mov	r5, r9
 800ba4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ba4c:	e786      	b.n	800b95c <_dtoa_r+0x71c>
 800ba4e:	9a08      	ldr	r2, [sp, #32]
 800ba50:	e7ad      	b.n	800b9ae <_dtoa_r+0x76e>
 800ba52:	2300      	movs	r3, #0
 800ba54:	e7d6      	b.n	800ba04 <_dtoa_r+0x7c4>
 800ba56:	9b02      	ldr	r3, [sp, #8]
 800ba58:	e7d4      	b.n	800ba04 <_dtoa_r+0x7c4>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	9308      	str	r3, [sp, #32]
 800ba5e:	6933      	ldr	r3, [r6, #16]
 800ba60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ba64:	6918      	ldr	r0, [r3, #16]
 800ba66:	f000 fa54 	bl	800bf12 <__hi0bits>
 800ba6a:	f1c0 0020 	rsb	r0, r0, #32
 800ba6e:	9b07      	ldr	r3, [sp, #28]
 800ba70:	4418      	add	r0, r3
 800ba72:	f010 001f 	ands.w	r0, r0, #31
 800ba76:	d047      	beq.n	800bb08 <_dtoa_r+0x8c8>
 800ba78:	f1c0 0320 	rsb	r3, r0, #32
 800ba7c:	2b04      	cmp	r3, #4
 800ba7e:	dd3b      	ble.n	800baf8 <_dtoa_r+0x8b8>
 800ba80:	9b07      	ldr	r3, [sp, #28]
 800ba82:	f1c0 001c 	rsb	r0, r0, #28
 800ba86:	4481      	add	r9, r0
 800ba88:	4405      	add	r5, r0
 800ba8a:	4403      	add	r3, r0
 800ba8c:	9307      	str	r3, [sp, #28]
 800ba8e:	f1b9 0f00 	cmp.w	r9, #0
 800ba92:	dd05      	ble.n	800baa0 <_dtoa_r+0x860>
 800ba94:	4659      	mov	r1, fp
 800ba96:	464a      	mov	r2, r9
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f000 fb75 	bl	800c188 <__lshift>
 800ba9e:	4683      	mov	fp, r0
 800baa0:	9b07      	ldr	r3, [sp, #28]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	dd05      	ble.n	800bab2 <_dtoa_r+0x872>
 800baa6:	4631      	mov	r1, r6
 800baa8:	461a      	mov	r2, r3
 800baaa:	4620      	mov	r0, r4
 800baac:	f000 fb6c 	bl	800c188 <__lshift>
 800bab0:	4606      	mov	r6, r0
 800bab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bab4:	b353      	cbz	r3, 800bb0c <_dtoa_r+0x8cc>
 800bab6:	4631      	mov	r1, r6
 800bab8:	4658      	mov	r0, fp
 800baba:	f000 fbb9 	bl	800c230 <__mcmp>
 800babe:	2800      	cmp	r0, #0
 800bac0:	da24      	bge.n	800bb0c <_dtoa_r+0x8cc>
 800bac2:	2300      	movs	r3, #0
 800bac4:	4659      	mov	r1, fp
 800bac6:	220a      	movs	r2, #10
 800bac8:	4620      	mov	r0, r4
 800baca:	f000 f9e7 	bl	800be9c <__multadd>
 800bace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bad0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bad4:	4683      	mov	fp, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f000 8144 	beq.w	800bd64 <_dtoa_r+0xb24>
 800badc:	2300      	movs	r3, #0
 800bade:	4639      	mov	r1, r7
 800bae0:	220a      	movs	r2, #10
 800bae2:	4620      	mov	r0, r4
 800bae4:	f000 f9da 	bl	800be9c <__multadd>
 800bae8:	9b04      	ldr	r3, [sp, #16]
 800baea:	4607      	mov	r7, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	dc4d      	bgt.n	800bb8c <_dtoa_r+0x94c>
 800baf0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	dd4a      	ble.n	800bb8c <_dtoa_r+0x94c>
 800baf6:	e011      	b.n	800bb1c <_dtoa_r+0x8dc>
 800baf8:	d0c9      	beq.n	800ba8e <_dtoa_r+0x84e>
 800bafa:	9a07      	ldr	r2, [sp, #28]
 800bafc:	331c      	adds	r3, #28
 800bafe:	441a      	add	r2, r3
 800bb00:	4499      	add	r9, r3
 800bb02:	441d      	add	r5, r3
 800bb04:	4613      	mov	r3, r2
 800bb06:	e7c1      	b.n	800ba8c <_dtoa_r+0x84c>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	e7f6      	b.n	800bafa <_dtoa_r+0x8ba>
 800bb0c:	f1b8 0f00 	cmp.w	r8, #0
 800bb10:	dc36      	bgt.n	800bb80 <_dtoa_r+0x940>
 800bb12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	dd33      	ble.n	800bb80 <_dtoa_r+0x940>
 800bb18:	f8cd 8010 	str.w	r8, [sp, #16]
 800bb1c:	9b04      	ldr	r3, [sp, #16]
 800bb1e:	b963      	cbnz	r3, 800bb3a <_dtoa_r+0x8fa>
 800bb20:	4631      	mov	r1, r6
 800bb22:	2205      	movs	r2, #5
 800bb24:	4620      	mov	r0, r4
 800bb26:	f000 f9b9 	bl	800be9c <__multadd>
 800bb2a:	4601      	mov	r1, r0
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	4658      	mov	r0, fp
 800bb30:	f000 fb7e 	bl	800c230 <__mcmp>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	f73f add3 	bgt.w	800b6e0 <_dtoa_r+0x4a0>
 800bb3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bb3c:	9d06      	ldr	r5, [sp, #24]
 800bb3e:	ea6f 0a03 	mvn.w	sl, r3
 800bb42:	f04f 0900 	mov.w	r9, #0
 800bb46:	4631      	mov	r1, r6
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f000 f990 	bl	800be6e <_Bfree>
 800bb4e:	2f00      	cmp	r7, #0
 800bb50:	f43f aebd 	beq.w	800b8ce <_dtoa_r+0x68e>
 800bb54:	f1b9 0f00 	cmp.w	r9, #0
 800bb58:	d005      	beq.n	800bb66 <_dtoa_r+0x926>
 800bb5a:	45b9      	cmp	r9, r7
 800bb5c:	d003      	beq.n	800bb66 <_dtoa_r+0x926>
 800bb5e:	4649      	mov	r1, r9
 800bb60:	4620      	mov	r0, r4
 800bb62:	f000 f984 	bl	800be6e <_Bfree>
 800bb66:	4639      	mov	r1, r7
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f000 f980 	bl	800be6e <_Bfree>
 800bb6e:	e6ae      	b.n	800b8ce <_dtoa_r+0x68e>
 800bb70:	2600      	movs	r6, #0
 800bb72:	4637      	mov	r7, r6
 800bb74:	e7e1      	b.n	800bb3a <_dtoa_r+0x8fa>
 800bb76:	46ba      	mov	sl, r7
 800bb78:	4637      	mov	r7, r6
 800bb7a:	e5b1      	b.n	800b6e0 <_dtoa_r+0x4a0>
 800bb7c:	40240000 	.word	0x40240000
 800bb80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb82:	f8cd 8010 	str.w	r8, [sp, #16]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f000 80f3 	beq.w	800bd72 <_dtoa_r+0xb32>
 800bb8c:	2d00      	cmp	r5, #0
 800bb8e:	dd05      	ble.n	800bb9c <_dtoa_r+0x95c>
 800bb90:	4639      	mov	r1, r7
 800bb92:	462a      	mov	r2, r5
 800bb94:	4620      	mov	r0, r4
 800bb96:	f000 faf7 	bl	800c188 <__lshift>
 800bb9a:	4607      	mov	r7, r0
 800bb9c:	9b08      	ldr	r3, [sp, #32]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d04c      	beq.n	800bc3c <_dtoa_r+0x9fc>
 800bba2:	6879      	ldr	r1, [r7, #4]
 800bba4:	4620      	mov	r0, r4
 800bba6:	f000 f92e 	bl	800be06 <_Balloc>
 800bbaa:	4605      	mov	r5, r0
 800bbac:	693a      	ldr	r2, [r7, #16]
 800bbae:	f107 010c 	add.w	r1, r7, #12
 800bbb2:	3202      	adds	r2, #2
 800bbb4:	0092      	lsls	r2, r2, #2
 800bbb6:	300c      	adds	r0, #12
 800bbb8:	f000 f91a 	bl	800bdf0 <memcpy>
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	4629      	mov	r1, r5
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f000 fae1 	bl	800c188 <__lshift>
 800bbc6:	46b9      	mov	r9, r7
 800bbc8:	4607      	mov	r7, r0
 800bbca:	9b06      	ldr	r3, [sp, #24]
 800bbcc:	9307      	str	r3, [sp, #28]
 800bbce:	9b02      	ldr	r3, [sp, #8]
 800bbd0:	f003 0301 	and.w	r3, r3, #1
 800bbd4:	9308      	str	r3, [sp, #32]
 800bbd6:	4631      	mov	r1, r6
 800bbd8:	4658      	mov	r0, fp
 800bbda:	f7ff faa0 	bl	800b11e <quorem>
 800bbde:	4649      	mov	r1, r9
 800bbe0:	4605      	mov	r5, r0
 800bbe2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bbe6:	4658      	mov	r0, fp
 800bbe8:	f000 fb22 	bl	800c230 <__mcmp>
 800bbec:	463a      	mov	r2, r7
 800bbee:	9002      	str	r0, [sp, #8]
 800bbf0:	4631      	mov	r1, r6
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f000 fb36 	bl	800c264 <__mdiff>
 800bbf8:	68c3      	ldr	r3, [r0, #12]
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	bb03      	cbnz	r3, 800bc40 <_dtoa_r+0xa00>
 800bbfe:	4601      	mov	r1, r0
 800bc00:	9009      	str	r0, [sp, #36]	; 0x24
 800bc02:	4658      	mov	r0, fp
 800bc04:	f000 fb14 	bl	800c230 <__mcmp>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc0c:	4611      	mov	r1, r2
 800bc0e:	4620      	mov	r0, r4
 800bc10:	9309      	str	r3, [sp, #36]	; 0x24
 800bc12:	f000 f92c 	bl	800be6e <_Bfree>
 800bc16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc18:	b9a3      	cbnz	r3, 800bc44 <_dtoa_r+0xa04>
 800bc1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bc1c:	b992      	cbnz	r2, 800bc44 <_dtoa_r+0xa04>
 800bc1e:	9a08      	ldr	r2, [sp, #32]
 800bc20:	b982      	cbnz	r2, 800bc44 <_dtoa_r+0xa04>
 800bc22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bc26:	d029      	beq.n	800bc7c <_dtoa_r+0xa3c>
 800bc28:	9b02      	ldr	r3, [sp, #8]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	dd01      	ble.n	800bc32 <_dtoa_r+0x9f2>
 800bc2e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800bc32:	9b07      	ldr	r3, [sp, #28]
 800bc34:	1c5d      	adds	r5, r3, #1
 800bc36:	f883 8000 	strb.w	r8, [r3]
 800bc3a:	e784      	b.n	800bb46 <_dtoa_r+0x906>
 800bc3c:	4638      	mov	r0, r7
 800bc3e:	e7c2      	b.n	800bbc6 <_dtoa_r+0x986>
 800bc40:	2301      	movs	r3, #1
 800bc42:	e7e3      	b.n	800bc0c <_dtoa_r+0x9cc>
 800bc44:	9a02      	ldr	r2, [sp, #8]
 800bc46:	2a00      	cmp	r2, #0
 800bc48:	db04      	blt.n	800bc54 <_dtoa_r+0xa14>
 800bc4a:	d123      	bne.n	800bc94 <_dtoa_r+0xa54>
 800bc4c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bc4e:	bb0a      	cbnz	r2, 800bc94 <_dtoa_r+0xa54>
 800bc50:	9a08      	ldr	r2, [sp, #32]
 800bc52:	b9fa      	cbnz	r2, 800bc94 <_dtoa_r+0xa54>
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	ddec      	ble.n	800bc32 <_dtoa_r+0x9f2>
 800bc58:	4659      	mov	r1, fp
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f000 fa93 	bl	800c188 <__lshift>
 800bc62:	4631      	mov	r1, r6
 800bc64:	4683      	mov	fp, r0
 800bc66:	f000 fae3 	bl	800c230 <__mcmp>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	dc03      	bgt.n	800bc76 <_dtoa_r+0xa36>
 800bc6e:	d1e0      	bne.n	800bc32 <_dtoa_r+0x9f2>
 800bc70:	f018 0f01 	tst.w	r8, #1
 800bc74:	d0dd      	beq.n	800bc32 <_dtoa_r+0x9f2>
 800bc76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bc7a:	d1d8      	bne.n	800bc2e <_dtoa_r+0x9ee>
 800bc7c:	9b07      	ldr	r3, [sp, #28]
 800bc7e:	9a07      	ldr	r2, [sp, #28]
 800bc80:	1c5d      	adds	r5, r3, #1
 800bc82:	2339      	movs	r3, #57	; 0x39
 800bc84:	7013      	strb	r3, [r2, #0]
 800bc86:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc8a:	1e6a      	subs	r2, r5, #1
 800bc8c:	2b39      	cmp	r3, #57	; 0x39
 800bc8e:	d04d      	beq.n	800bd2c <_dtoa_r+0xaec>
 800bc90:	3301      	adds	r3, #1
 800bc92:	e052      	b.n	800bd3a <_dtoa_r+0xafa>
 800bc94:	9a07      	ldr	r2, [sp, #28]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f102 0501 	add.w	r5, r2, #1
 800bc9c:	dd06      	ble.n	800bcac <_dtoa_r+0xa6c>
 800bc9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bca2:	d0eb      	beq.n	800bc7c <_dtoa_r+0xa3c>
 800bca4:	f108 0801 	add.w	r8, r8, #1
 800bca8:	9b07      	ldr	r3, [sp, #28]
 800bcaa:	e7c4      	b.n	800bc36 <_dtoa_r+0x9f6>
 800bcac:	9b06      	ldr	r3, [sp, #24]
 800bcae:	9a04      	ldr	r2, [sp, #16]
 800bcb0:	1aeb      	subs	r3, r5, r3
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bcb8:	d021      	beq.n	800bcfe <_dtoa_r+0xabe>
 800bcba:	4659      	mov	r1, fp
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	220a      	movs	r2, #10
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f000 f8eb 	bl	800be9c <__multadd>
 800bcc6:	45b9      	cmp	r9, r7
 800bcc8:	4683      	mov	fp, r0
 800bcca:	f04f 0300 	mov.w	r3, #0
 800bcce:	f04f 020a 	mov.w	r2, #10
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	d105      	bne.n	800bce4 <_dtoa_r+0xaa4>
 800bcd8:	f000 f8e0 	bl	800be9c <__multadd>
 800bcdc:	4681      	mov	r9, r0
 800bcde:	4607      	mov	r7, r0
 800bce0:	9507      	str	r5, [sp, #28]
 800bce2:	e778      	b.n	800bbd6 <_dtoa_r+0x996>
 800bce4:	f000 f8da 	bl	800be9c <__multadd>
 800bce8:	4639      	mov	r1, r7
 800bcea:	4681      	mov	r9, r0
 800bcec:	2300      	movs	r3, #0
 800bcee:	220a      	movs	r2, #10
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f000 f8d3 	bl	800be9c <__multadd>
 800bcf6:	4607      	mov	r7, r0
 800bcf8:	e7f2      	b.n	800bce0 <_dtoa_r+0xaa0>
 800bcfa:	f04f 0900 	mov.w	r9, #0
 800bcfe:	4659      	mov	r1, fp
 800bd00:	2201      	movs	r2, #1
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 fa40 	bl	800c188 <__lshift>
 800bd08:	4631      	mov	r1, r6
 800bd0a:	4683      	mov	fp, r0
 800bd0c:	f000 fa90 	bl	800c230 <__mcmp>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	dcb8      	bgt.n	800bc86 <_dtoa_r+0xa46>
 800bd14:	d102      	bne.n	800bd1c <_dtoa_r+0xadc>
 800bd16:	f018 0f01 	tst.w	r8, #1
 800bd1a:	d1b4      	bne.n	800bc86 <_dtoa_r+0xa46>
 800bd1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd20:	1e6a      	subs	r2, r5, #1
 800bd22:	2b30      	cmp	r3, #48	; 0x30
 800bd24:	f47f af0f 	bne.w	800bb46 <_dtoa_r+0x906>
 800bd28:	4615      	mov	r5, r2
 800bd2a:	e7f7      	b.n	800bd1c <_dtoa_r+0xadc>
 800bd2c:	9b06      	ldr	r3, [sp, #24]
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d105      	bne.n	800bd3e <_dtoa_r+0xafe>
 800bd32:	2331      	movs	r3, #49	; 0x31
 800bd34:	9a06      	ldr	r2, [sp, #24]
 800bd36:	f10a 0a01 	add.w	sl, sl, #1
 800bd3a:	7013      	strb	r3, [r2, #0]
 800bd3c:	e703      	b.n	800bb46 <_dtoa_r+0x906>
 800bd3e:	4615      	mov	r5, r2
 800bd40:	e7a1      	b.n	800bc86 <_dtoa_r+0xa46>
 800bd42:	4b17      	ldr	r3, [pc, #92]	; (800bda0 <_dtoa_r+0xb60>)
 800bd44:	f7ff bae1 	b.w	800b30a <_dtoa_r+0xca>
 800bd48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f47f aabb 	bne.w	800b2c6 <_dtoa_r+0x86>
 800bd50:	4b14      	ldr	r3, [pc, #80]	; (800bda4 <_dtoa_r+0xb64>)
 800bd52:	f7ff bada 	b.w	800b30a <_dtoa_r+0xca>
 800bd56:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	f77f ae3f 	ble.w	800b9dc <_dtoa_r+0x79c>
 800bd5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd60:	9308      	str	r3, [sp, #32]
 800bd62:	e653      	b.n	800ba0c <_dtoa_r+0x7cc>
 800bd64:	9b04      	ldr	r3, [sp, #16]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	dc03      	bgt.n	800bd72 <_dtoa_r+0xb32>
 800bd6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	f73f aed5 	bgt.w	800bb1c <_dtoa_r+0x8dc>
 800bd72:	9d06      	ldr	r5, [sp, #24]
 800bd74:	4631      	mov	r1, r6
 800bd76:	4658      	mov	r0, fp
 800bd78:	f7ff f9d1 	bl	800b11e <quorem>
 800bd7c:	9b06      	ldr	r3, [sp, #24]
 800bd7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bd82:	f805 8b01 	strb.w	r8, [r5], #1
 800bd86:	9a04      	ldr	r2, [sp, #16]
 800bd88:	1aeb      	subs	r3, r5, r3
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	ddb5      	ble.n	800bcfa <_dtoa_r+0xaba>
 800bd8e:	4659      	mov	r1, fp
 800bd90:	2300      	movs	r3, #0
 800bd92:	220a      	movs	r2, #10
 800bd94:	4620      	mov	r0, r4
 800bd96:	f000 f881 	bl	800be9c <__multadd>
 800bd9a:	4683      	mov	fp, r0
 800bd9c:	e7ea      	b.n	800bd74 <_dtoa_r+0xb34>
 800bd9e:	bf00      	nop
 800bda0:	0800d7c6 	.word	0x0800d7c6
 800bda4:	0800d910 	.word	0x0800d910

0800bda8 <_localeconv_r>:
 800bda8:	4b04      	ldr	r3, [pc, #16]	; (800bdbc <_localeconv_r+0x14>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	6a18      	ldr	r0, [r3, #32]
 800bdae:	4b04      	ldr	r3, [pc, #16]	; (800bdc0 <_localeconv_r+0x18>)
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	bf08      	it	eq
 800bdb4:	4618      	moveq	r0, r3
 800bdb6:	30f0      	adds	r0, #240	; 0xf0
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	20000090 	.word	0x20000090
 800bdc0:	200000f4 	.word	0x200000f4

0800bdc4 <malloc>:
 800bdc4:	4b02      	ldr	r3, [pc, #8]	; (800bdd0 <malloc+0xc>)
 800bdc6:	4601      	mov	r1, r0
 800bdc8:	6818      	ldr	r0, [r3, #0]
 800bdca:	f000 bb53 	b.w	800c474 <_malloc_r>
 800bdce:	bf00      	nop
 800bdd0:	20000090 	.word	0x20000090

0800bdd4 <memchr>:
 800bdd4:	b510      	push	{r4, lr}
 800bdd6:	b2c9      	uxtb	r1, r1
 800bdd8:	4402      	add	r2, r0
 800bdda:	4290      	cmp	r0, r2
 800bddc:	4603      	mov	r3, r0
 800bdde:	d101      	bne.n	800bde4 <memchr+0x10>
 800bde0:	2300      	movs	r3, #0
 800bde2:	e003      	b.n	800bdec <memchr+0x18>
 800bde4:	781c      	ldrb	r4, [r3, #0]
 800bde6:	3001      	adds	r0, #1
 800bde8:	428c      	cmp	r4, r1
 800bdea:	d1f6      	bne.n	800bdda <memchr+0x6>
 800bdec:	4618      	mov	r0, r3
 800bdee:	bd10      	pop	{r4, pc}

0800bdf0 <memcpy>:
 800bdf0:	b510      	push	{r4, lr}
 800bdf2:	1e43      	subs	r3, r0, #1
 800bdf4:	440a      	add	r2, r1
 800bdf6:	4291      	cmp	r1, r2
 800bdf8:	d100      	bne.n	800bdfc <memcpy+0xc>
 800bdfa:	bd10      	pop	{r4, pc}
 800bdfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be00:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be04:	e7f7      	b.n	800bdf6 <memcpy+0x6>

0800be06 <_Balloc>:
 800be06:	b570      	push	{r4, r5, r6, lr}
 800be08:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800be0a:	4604      	mov	r4, r0
 800be0c:	460e      	mov	r6, r1
 800be0e:	b93d      	cbnz	r5, 800be20 <_Balloc+0x1a>
 800be10:	2010      	movs	r0, #16
 800be12:	f7ff ffd7 	bl	800bdc4 <malloc>
 800be16:	6260      	str	r0, [r4, #36]	; 0x24
 800be18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800be1c:	6005      	str	r5, [r0, #0]
 800be1e:	60c5      	str	r5, [r0, #12]
 800be20:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800be22:	68eb      	ldr	r3, [r5, #12]
 800be24:	b183      	cbz	r3, 800be48 <_Balloc+0x42>
 800be26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800be2e:	b9b8      	cbnz	r0, 800be60 <_Balloc+0x5a>
 800be30:	2101      	movs	r1, #1
 800be32:	fa01 f506 	lsl.w	r5, r1, r6
 800be36:	1d6a      	adds	r2, r5, #5
 800be38:	0092      	lsls	r2, r2, #2
 800be3a:	4620      	mov	r0, r4
 800be3c:	f000 fabf 	bl	800c3be <_calloc_r>
 800be40:	b160      	cbz	r0, 800be5c <_Balloc+0x56>
 800be42:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800be46:	e00e      	b.n	800be66 <_Balloc+0x60>
 800be48:	2221      	movs	r2, #33	; 0x21
 800be4a:	2104      	movs	r1, #4
 800be4c:	4620      	mov	r0, r4
 800be4e:	f000 fab6 	bl	800c3be <_calloc_r>
 800be52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be54:	60e8      	str	r0, [r5, #12]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1e4      	bne.n	800be26 <_Balloc+0x20>
 800be5c:	2000      	movs	r0, #0
 800be5e:	bd70      	pop	{r4, r5, r6, pc}
 800be60:	6802      	ldr	r2, [r0, #0]
 800be62:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800be66:	2300      	movs	r3, #0
 800be68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be6c:	e7f7      	b.n	800be5e <_Balloc+0x58>

0800be6e <_Bfree>:
 800be6e:	b570      	push	{r4, r5, r6, lr}
 800be70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800be72:	4606      	mov	r6, r0
 800be74:	460d      	mov	r5, r1
 800be76:	b93c      	cbnz	r4, 800be88 <_Bfree+0x1a>
 800be78:	2010      	movs	r0, #16
 800be7a:	f7ff ffa3 	bl	800bdc4 <malloc>
 800be7e:	6270      	str	r0, [r6, #36]	; 0x24
 800be80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be84:	6004      	str	r4, [r0, #0]
 800be86:	60c4      	str	r4, [r0, #12]
 800be88:	b13d      	cbz	r5, 800be9a <_Bfree+0x2c>
 800be8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800be8c:	686a      	ldr	r2, [r5, #4]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be94:	6029      	str	r1, [r5, #0]
 800be96:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800be9a:	bd70      	pop	{r4, r5, r6, pc}

0800be9c <__multadd>:
 800be9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea0:	461f      	mov	r7, r3
 800bea2:	4606      	mov	r6, r0
 800bea4:	460c      	mov	r4, r1
 800bea6:	2300      	movs	r3, #0
 800bea8:	690d      	ldr	r5, [r1, #16]
 800beaa:	f101 0c14 	add.w	ip, r1, #20
 800beae:	f8dc 0000 	ldr.w	r0, [ip]
 800beb2:	3301      	adds	r3, #1
 800beb4:	b281      	uxth	r1, r0
 800beb6:	fb02 7101 	mla	r1, r2, r1, r7
 800beba:	0c00      	lsrs	r0, r0, #16
 800bebc:	0c0f      	lsrs	r7, r1, #16
 800bebe:	fb02 7000 	mla	r0, r2, r0, r7
 800bec2:	b289      	uxth	r1, r1
 800bec4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bec8:	429d      	cmp	r5, r3
 800beca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bece:	f84c 1b04 	str.w	r1, [ip], #4
 800bed2:	dcec      	bgt.n	800beae <__multadd+0x12>
 800bed4:	b1d7      	cbz	r7, 800bf0c <__multadd+0x70>
 800bed6:	68a3      	ldr	r3, [r4, #8]
 800bed8:	42ab      	cmp	r3, r5
 800beda:	dc12      	bgt.n	800bf02 <__multadd+0x66>
 800bedc:	6861      	ldr	r1, [r4, #4]
 800bede:	4630      	mov	r0, r6
 800bee0:	3101      	adds	r1, #1
 800bee2:	f7ff ff90 	bl	800be06 <_Balloc>
 800bee6:	4680      	mov	r8, r0
 800bee8:	6922      	ldr	r2, [r4, #16]
 800beea:	f104 010c 	add.w	r1, r4, #12
 800beee:	3202      	adds	r2, #2
 800bef0:	0092      	lsls	r2, r2, #2
 800bef2:	300c      	adds	r0, #12
 800bef4:	f7ff ff7c 	bl	800bdf0 <memcpy>
 800bef8:	4621      	mov	r1, r4
 800befa:	4630      	mov	r0, r6
 800befc:	f7ff ffb7 	bl	800be6e <_Bfree>
 800bf00:	4644      	mov	r4, r8
 800bf02:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf06:	3501      	adds	r5, #1
 800bf08:	615f      	str	r7, [r3, #20]
 800bf0a:	6125      	str	r5, [r4, #16]
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf12 <__hi0bits>:
 800bf12:	0c02      	lsrs	r2, r0, #16
 800bf14:	0412      	lsls	r2, r2, #16
 800bf16:	4603      	mov	r3, r0
 800bf18:	b9b2      	cbnz	r2, 800bf48 <__hi0bits+0x36>
 800bf1a:	0403      	lsls	r3, r0, #16
 800bf1c:	2010      	movs	r0, #16
 800bf1e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bf22:	bf04      	itt	eq
 800bf24:	021b      	lsleq	r3, r3, #8
 800bf26:	3008      	addeq	r0, #8
 800bf28:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bf2c:	bf04      	itt	eq
 800bf2e:	011b      	lsleq	r3, r3, #4
 800bf30:	3004      	addeq	r0, #4
 800bf32:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bf36:	bf04      	itt	eq
 800bf38:	009b      	lsleq	r3, r3, #2
 800bf3a:	3002      	addeq	r0, #2
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	db06      	blt.n	800bf4e <__hi0bits+0x3c>
 800bf40:	005b      	lsls	r3, r3, #1
 800bf42:	d503      	bpl.n	800bf4c <__hi0bits+0x3a>
 800bf44:	3001      	adds	r0, #1
 800bf46:	4770      	bx	lr
 800bf48:	2000      	movs	r0, #0
 800bf4a:	e7e8      	b.n	800bf1e <__hi0bits+0xc>
 800bf4c:	2020      	movs	r0, #32
 800bf4e:	4770      	bx	lr

0800bf50 <__lo0bits>:
 800bf50:	6803      	ldr	r3, [r0, #0]
 800bf52:	4601      	mov	r1, r0
 800bf54:	f013 0207 	ands.w	r2, r3, #7
 800bf58:	d00b      	beq.n	800bf72 <__lo0bits+0x22>
 800bf5a:	07da      	lsls	r2, r3, #31
 800bf5c:	d423      	bmi.n	800bfa6 <__lo0bits+0x56>
 800bf5e:	0798      	lsls	r0, r3, #30
 800bf60:	bf49      	itett	mi
 800bf62:	085b      	lsrmi	r3, r3, #1
 800bf64:	089b      	lsrpl	r3, r3, #2
 800bf66:	2001      	movmi	r0, #1
 800bf68:	600b      	strmi	r3, [r1, #0]
 800bf6a:	bf5c      	itt	pl
 800bf6c:	600b      	strpl	r3, [r1, #0]
 800bf6e:	2002      	movpl	r0, #2
 800bf70:	4770      	bx	lr
 800bf72:	b298      	uxth	r0, r3
 800bf74:	b9a8      	cbnz	r0, 800bfa2 <__lo0bits+0x52>
 800bf76:	2010      	movs	r0, #16
 800bf78:	0c1b      	lsrs	r3, r3, #16
 800bf7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bf7e:	bf04      	itt	eq
 800bf80:	0a1b      	lsreq	r3, r3, #8
 800bf82:	3008      	addeq	r0, #8
 800bf84:	071a      	lsls	r2, r3, #28
 800bf86:	bf04      	itt	eq
 800bf88:	091b      	lsreq	r3, r3, #4
 800bf8a:	3004      	addeq	r0, #4
 800bf8c:	079a      	lsls	r2, r3, #30
 800bf8e:	bf04      	itt	eq
 800bf90:	089b      	lsreq	r3, r3, #2
 800bf92:	3002      	addeq	r0, #2
 800bf94:	07da      	lsls	r2, r3, #31
 800bf96:	d402      	bmi.n	800bf9e <__lo0bits+0x4e>
 800bf98:	085b      	lsrs	r3, r3, #1
 800bf9a:	d006      	beq.n	800bfaa <__lo0bits+0x5a>
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	600b      	str	r3, [r1, #0]
 800bfa0:	4770      	bx	lr
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	e7e9      	b.n	800bf7a <__lo0bits+0x2a>
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	4770      	bx	lr
 800bfaa:	2020      	movs	r0, #32
 800bfac:	4770      	bx	lr

0800bfae <__i2b>:
 800bfae:	b510      	push	{r4, lr}
 800bfb0:	460c      	mov	r4, r1
 800bfb2:	2101      	movs	r1, #1
 800bfb4:	f7ff ff27 	bl	800be06 <_Balloc>
 800bfb8:	2201      	movs	r2, #1
 800bfba:	6144      	str	r4, [r0, #20]
 800bfbc:	6102      	str	r2, [r0, #16]
 800bfbe:	bd10      	pop	{r4, pc}

0800bfc0 <__multiply>:
 800bfc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	4614      	mov	r4, r2
 800bfc6:	690a      	ldr	r2, [r1, #16]
 800bfc8:	6923      	ldr	r3, [r4, #16]
 800bfca:	4688      	mov	r8, r1
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	bfbe      	ittt	lt
 800bfd0:	460b      	movlt	r3, r1
 800bfd2:	46a0      	movlt	r8, r4
 800bfd4:	461c      	movlt	r4, r3
 800bfd6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bfda:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bfde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bfe2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bfe6:	eb07 0609 	add.w	r6, r7, r9
 800bfea:	42b3      	cmp	r3, r6
 800bfec:	bfb8      	it	lt
 800bfee:	3101      	addlt	r1, #1
 800bff0:	f7ff ff09 	bl	800be06 <_Balloc>
 800bff4:	f100 0514 	add.w	r5, r0, #20
 800bff8:	462b      	mov	r3, r5
 800bffa:	2200      	movs	r2, #0
 800bffc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c000:	4573      	cmp	r3, lr
 800c002:	d316      	bcc.n	800c032 <__multiply+0x72>
 800c004:	f104 0214 	add.w	r2, r4, #20
 800c008:	f108 0114 	add.w	r1, r8, #20
 800c00c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c010:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	9b00      	ldr	r3, [sp, #0]
 800c018:	9201      	str	r2, [sp, #4]
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d80c      	bhi.n	800c038 <__multiply+0x78>
 800c01e:	2e00      	cmp	r6, #0
 800c020:	dd03      	ble.n	800c02a <__multiply+0x6a>
 800c022:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c026:	2b00      	cmp	r3, #0
 800c028:	d05d      	beq.n	800c0e6 <__multiply+0x126>
 800c02a:	6106      	str	r6, [r0, #16]
 800c02c:	b003      	add	sp, #12
 800c02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c032:	f843 2b04 	str.w	r2, [r3], #4
 800c036:	e7e3      	b.n	800c000 <__multiply+0x40>
 800c038:	f8b2 b000 	ldrh.w	fp, [r2]
 800c03c:	f1bb 0f00 	cmp.w	fp, #0
 800c040:	d023      	beq.n	800c08a <__multiply+0xca>
 800c042:	4689      	mov	r9, r1
 800c044:	46ac      	mov	ip, r5
 800c046:	f04f 0800 	mov.w	r8, #0
 800c04a:	f859 4b04 	ldr.w	r4, [r9], #4
 800c04e:	f8dc a000 	ldr.w	sl, [ip]
 800c052:	b2a3      	uxth	r3, r4
 800c054:	fa1f fa8a 	uxth.w	sl, sl
 800c058:	fb0b a303 	mla	r3, fp, r3, sl
 800c05c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c060:	f8dc 4000 	ldr.w	r4, [ip]
 800c064:	4443      	add	r3, r8
 800c066:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c06a:	fb0b 840a 	mla	r4, fp, sl, r8
 800c06e:	46e2      	mov	sl, ip
 800c070:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c074:	b29b      	uxth	r3, r3
 800c076:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c07a:	454f      	cmp	r7, r9
 800c07c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c080:	f84a 3b04 	str.w	r3, [sl], #4
 800c084:	d82b      	bhi.n	800c0de <__multiply+0x11e>
 800c086:	f8cc 8004 	str.w	r8, [ip, #4]
 800c08a:	9b01      	ldr	r3, [sp, #4]
 800c08c:	3204      	adds	r2, #4
 800c08e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c092:	f1ba 0f00 	cmp.w	sl, #0
 800c096:	d020      	beq.n	800c0da <__multiply+0x11a>
 800c098:	4689      	mov	r9, r1
 800c09a:	46a8      	mov	r8, r5
 800c09c:	f04f 0b00 	mov.w	fp, #0
 800c0a0:	682b      	ldr	r3, [r5, #0]
 800c0a2:	f8b9 c000 	ldrh.w	ip, [r9]
 800c0a6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	fb0a 440c 	mla	r4, sl, ip, r4
 800c0b0:	46c4      	mov	ip, r8
 800c0b2:	445c      	add	r4, fp
 800c0b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c0b8:	f84c 3b04 	str.w	r3, [ip], #4
 800c0bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0c0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c0c4:	0c1b      	lsrs	r3, r3, #16
 800c0c6:	fb0a b303 	mla	r3, sl, r3, fp
 800c0ca:	454f      	cmp	r7, r9
 800c0cc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c0d0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c0d4:	d805      	bhi.n	800c0e2 <__multiply+0x122>
 800c0d6:	f8c8 3004 	str.w	r3, [r8, #4]
 800c0da:	3504      	adds	r5, #4
 800c0dc:	e79b      	b.n	800c016 <__multiply+0x56>
 800c0de:	46d4      	mov	ip, sl
 800c0e0:	e7b3      	b.n	800c04a <__multiply+0x8a>
 800c0e2:	46e0      	mov	r8, ip
 800c0e4:	e7dd      	b.n	800c0a2 <__multiply+0xe2>
 800c0e6:	3e01      	subs	r6, #1
 800c0e8:	e799      	b.n	800c01e <__multiply+0x5e>
	...

0800c0ec <__pow5mult>:
 800c0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0f0:	4615      	mov	r5, r2
 800c0f2:	f012 0203 	ands.w	r2, r2, #3
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	460f      	mov	r7, r1
 800c0fa:	d007      	beq.n	800c10c <__pow5mult+0x20>
 800c0fc:	4c21      	ldr	r4, [pc, #132]	; (800c184 <__pow5mult+0x98>)
 800c0fe:	3a01      	subs	r2, #1
 800c100:	2300      	movs	r3, #0
 800c102:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c106:	f7ff fec9 	bl	800be9c <__multadd>
 800c10a:	4607      	mov	r7, r0
 800c10c:	10ad      	asrs	r5, r5, #2
 800c10e:	d035      	beq.n	800c17c <__pow5mult+0x90>
 800c110:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c112:	b93c      	cbnz	r4, 800c124 <__pow5mult+0x38>
 800c114:	2010      	movs	r0, #16
 800c116:	f7ff fe55 	bl	800bdc4 <malloc>
 800c11a:	6270      	str	r0, [r6, #36]	; 0x24
 800c11c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c120:	6004      	str	r4, [r0, #0]
 800c122:	60c4      	str	r4, [r0, #12]
 800c124:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c128:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c12c:	b94c      	cbnz	r4, 800c142 <__pow5mult+0x56>
 800c12e:	f240 2171 	movw	r1, #625	; 0x271
 800c132:	4630      	mov	r0, r6
 800c134:	f7ff ff3b 	bl	800bfae <__i2b>
 800c138:	2300      	movs	r3, #0
 800c13a:	4604      	mov	r4, r0
 800c13c:	f8c8 0008 	str.w	r0, [r8, #8]
 800c140:	6003      	str	r3, [r0, #0]
 800c142:	f04f 0800 	mov.w	r8, #0
 800c146:	07eb      	lsls	r3, r5, #31
 800c148:	d50a      	bpl.n	800c160 <__pow5mult+0x74>
 800c14a:	4639      	mov	r1, r7
 800c14c:	4622      	mov	r2, r4
 800c14e:	4630      	mov	r0, r6
 800c150:	f7ff ff36 	bl	800bfc0 <__multiply>
 800c154:	4681      	mov	r9, r0
 800c156:	4639      	mov	r1, r7
 800c158:	4630      	mov	r0, r6
 800c15a:	f7ff fe88 	bl	800be6e <_Bfree>
 800c15e:	464f      	mov	r7, r9
 800c160:	106d      	asrs	r5, r5, #1
 800c162:	d00b      	beq.n	800c17c <__pow5mult+0x90>
 800c164:	6820      	ldr	r0, [r4, #0]
 800c166:	b938      	cbnz	r0, 800c178 <__pow5mult+0x8c>
 800c168:	4622      	mov	r2, r4
 800c16a:	4621      	mov	r1, r4
 800c16c:	4630      	mov	r0, r6
 800c16e:	f7ff ff27 	bl	800bfc0 <__multiply>
 800c172:	6020      	str	r0, [r4, #0]
 800c174:	f8c0 8000 	str.w	r8, [r0]
 800c178:	4604      	mov	r4, r0
 800c17a:	e7e4      	b.n	800c146 <__pow5mult+0x5a>
 800c17c:	4638      	mov	r0, r7
 800c17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c182:	bf00      	nop
 800c184:	0800da10 	.word	0x0800da10

0800c188 <__lshift>:
 800c188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c18c:	460c      	mov	r4, r1
 800c18e:	4607      	mov	r7, r0
 800c190:	4616      	mov	r6, r2
 800c192:	6923      	ldr	r3, [r4, #16]
 800c194:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c198:	eb0a 0903 	add.w	r9, sl, r3
 800c19c:	6849      	ldr	r1, [r1, #4]
 800c19e:	68a3      	ldr	r3, [r4, #8]
 800c1a0:	f109 0501 	add.w	r5, r9, #1
 800c1a4:	42ab      	cmp	r3, r5
 800c1a6:	db32      	blt.n	800c20e <__lshift+0x86>
 800c1a8:	4638      	mov	r0, r7
 800c1aa:	f7ff fe2c 	bl	800be06 <_Balloc>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	4680      	mov	r8, r0
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	f100 0114 	add.w	r1, r0, #20
 800c1b8:	4553      	cmp	r3, sl
 800c1ba:	db2b      	blt.n	800c214 <__lshift+0x8c>
 800c1bc:	6920      	ldr	r0, [r4, #16]
 800c1be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1c2:	f104 0314 	add.w	r3, r4, #20
 800c1c6:	f016 021f 	ands.w	r2, r6, #31
 800c1ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1d2:	d025      	beq.n	800c220 <__lshift+0x98>
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	f1c2 0e20 	rsb	lr, r2, #32
 800c1da:	468a      	mov	sl, r1
 800c1dc:	681e      	ldr	r6, [r3, #0]
 800c1de:	4096      	lsls	r6, r2
 800c1e0:	4330      	orrs	r0, r6
 800c1e2:	f84a 0b04 	str.w	r0, [sl], #4
 800c1e6:	f853 0b04 	ldr.w	r0, [r3], #4
 800c1ea:	459c      	cmp	ip, r3
 800c1ec:	fa20 f00e 	lsr.w	r0, r0, lr
 800c1f0:	d814      	bhi.n	800c21c <__lshift+0x94>
 800c1f2:	6048      	str	r0, [r1, #4]
 800c1f4:	b108      	cbz	r0, 800c1fa <__lshift+0x72>
 800c1f6:	f109 0502 	add.w	r5, r9, #2
 800c1fa:	3d01      	subs	r5, #1
 800c1fc:	4638      	mov	r0, r7
 800c1fe:	f8c8 5010 	str.w	r5, [r8, #16]
 800c202:	4621      	mov	r1, r4
 800c204:	f7ff fe33 	bl	800be6e <_Bfree>
 800c208:	4640      	mov	r0, r8
 800c20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c20e:	3101      	adds	r1, #1
 800c210:	005b      	lsls	r3, r3, #1
 800c212:	e7c7      	b.n	800c1a4 <__lshift+0x1c>
 800c214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c218:	3301      	adds	r3, #1
 800c21a:	e7cd      	b.n	800c1b8 <__lshift+0x30>
 800c21c:	4651      	mov	r1, sl
 800c21e:	e7dc      	b.n	800c1da <__lshift+0x52>
 800c220:	3904      	subs	r1, #4
 800c222:	f853 2b04 	ldr.w	r2, [r3], #4
 800c226:	459c      	cmp	ip, r3
 800c228:	f841 2f04 	str.w	r2, [r1, #4]!
 800c22c:	d8f9      	bhi.n	800c222 <__lshift+0x9a>
 800c22e:	e7e4      	b.n	800c1fa <__lshift+0x72>

0800c230 <__mcmp>:
 800c230:	6903      	ldr	r3, [r0, #16]
 800c232:	690a      	ldr	r2, [r1, #16]
 800c234:	b530      	push	{r4, r5, lr}
 800c236:	1a9b      	subs	r3, r3, r2
 800c238:	d10c      	bne.n	800c254 <__mcmp+0x24>
 800c23a:	0092      	lsls	r2, r2, #2
 800c23c:	3014      	adds	r0, #20
 800c23e:	3114      	adds	r1, #20
 800c240:	1884      	adds	r4, r0, r2
 800c242:	4411      	add	r1, r2
 800c244:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c248:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c24c:	4295      	cmp	r5, r2
 800c24e:	d003      	beq.n	800c258 <__mcmp+0x28>
 800c250:	d305      	bcc.n	800c25e <__mcmp+0x2e>
 800c252:	2301      	movs	r3, #1
 800c254:	4618      	mov	r0, r3
 800c256:	bd30      	pop	{r4, r5, pc}
 800c258:	42a0      	cmp	r0, r4
 800c25a:	d3f3      	bcc.n	800c244 <__mcmp+0x14>
 800c25c:	e7fa      	b.n	800c254 <__mcmp+0x24>
 800c25e:	f04f 33ff 	mov.w	r3, #4294967295
 800c262:	e7f7      	b.n	800c254 <__mcmp+0x24>

0800c264 <__mdiff>:
 800c264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c268:	460d      	mov	r5, r1
 800c26a:	4607      	mov	r7, r0
 800c26c:	4611      	mov	r1, r2
 800c26e:	4628      	mov	r0, r5
 800c270:	4614      	mov	r4, r2
 800c272:	f7ff ffdd 	bl	800c230 <__mcmp>
 800c276:	1e06      	subs	r6, r0, #0
 800c278:	d108      	bne.n	800c28c <__mdiff+0x28>
 800c27a:	4631      	mov	r1, r6
 800c27c:	4638      	mov	r0, r7
 800c27e:	f7ff fdc2 	bl	800be06 <_Balloc>
 800c282:	2301      	movs	r3, #1
 800c284:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c28c:	bfa4      	itt	ge
 800c28e:	4623      	movge	r3, r4
 800c290:	462c      	movge	r4, r5
 800c292:	4638      	mov	r0, r7
 800c294:	6861      	ldr	r1, [r4, #4]
 800c296:	bfa6      	itte	ge
 800c298:	461d      	movge	r5, r3
 800c29a:	2600      	movge	r6, #0
 800c29c:	2601      	movlt	r6, #1
 800c29e:	f7ff fdb2 	bl	800be06 <_Balloc>
 800c2a2:	f04f 0e00 	mov.w	lr, #0
 800c2a6:	60c6      	str	r6, [r0, #12]
 800c2a8:	692b      	ldr	r3, [r5, #16]
 800c2aa:	6926      	ldr	r6, [r4, #16]
 800c2ac:	f104 0214 	add.w	r2, r4, #20
 800c2b0:	f105 0914 	add.w	r9, r5, #20
 800c2b4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c2b8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c2bc:	f100 0114 	add.w	r1, r0, #20
 800c2c0:	f852 ab04 	ldr.w	sl, [r2], #4
 800c2c4:	f859 5b04 	ldr.w	r5, [r9], #4
 800c2c8:	fa1f f38a 	uxth.w	r3, sl
 800c2cc:	4473      	add	r3, lr
 800c2ce:	b2ac      	uxth	r4, r5
 800c2d0:	1b1b      	subs	r3, r3, r4
 800c2d2:	0c2c      	lsrs	r4, r5, #16
 800c2d4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800c2d8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800c2e2:	45c8      	cmp	r8, r9
 800c2e4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800c2e8:	4694      	mov	ip, r2
 800c2ea:	f841 4b04 	str.w	r4, [r1], #4
 800c2ee:	d8e7      	bhi.n	800c2c0 <__mdiff+0x5c>
 800c2f0:	45bc      	cmp	ip, r7
 800c2f2:	d304      	bcc.n	800c2fe <__mdiff+0x9a>
 800c2f4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c2f8:	b183      	cbz	r3, 800c31c <__mdiff+0xb8>
 800c2fa:	6106      	str	r6, [r0, #16]
 800c2fc:	e7c4      	b.n	800c288 <__mdiff+0x24>
 800c2fe:	f85c 4b04 	ldr.w	r4, [ip], #4
 800c302:	b2a2      	uxth	r2, r4
 800c304:	4472      	add	r2, lr
 800c306:	1413      	asrs	r3, r2, #16
 800c308:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c30c:	b292      	uxth	r2, r2
 800c30e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c312:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c316:	f841 2b04 	str.w	r2, [r1], #4
 800c31a:	e7e9      	b.n	800c2f0 <__mdiff+0x8c>
 800c31c:	3e01      	subs	r6, #1
 800c31e:	e7e9      	b.n	800c2f4 <__mdiff+0x90>

0800c320 <__d2b>:
 800c320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c324:	461c      	mov	r4, r3
 800c326:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800c32a:	2101      	movs	r1, #1
 800c32c:	4690      	mov	r8, r2
 800c32e:	f7ff fd6a 	bl	800be06 <_Balloc>
 800c332:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800c336:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800c33a:	4607      	mov	r7, r0
 800c33c:	bb34      	cbnz	r4, 800c38c <__d2b+0x6c>
 800c33e:	9201      	str	r2, [sp, #4]
 800c340:	f1b8 0200 	subs.w	r2, r8, #0
 800c344:	d027      	beq.n	800c396 <__d2b+0x76>
 800c346:	a802      	add	r0, sp, #8
 800c348:	f840 2d08 	str.w	r2, [r0, #-8]!
 800c34c:	f7ff fe00 	bl	800bf50 <__lo0bits>
 800c350:	9900      	ldr	r1, [sp, #0]
 800c352:	b1f0      	cbz	r0, 800c392 <__d2b+0x72>
 800c354:	9a01      	ldr	r2, [sp, #4]
 800c356:	f1c0 0320 	rsb	r3, r0, #32
 800c35a:	fa02 f303 	lsl.w	r3, r2, r3
 800c35e:	430b      	orrs	r3, r1
 800c360:	40c2      	lsrs	r2, r0
 800c362:	617b      	str	r3, [r7, #20]
 800c364:	9201      	str	r2, [sp, #4]
 800c366:	9b01      	ldr	r3, [sp, #4]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	bf14      	ite	ne
 800c36c:	2102      	movne	r1, #2
 800c36e:	2101      	moveq	r1, #1
 800c370:	61bb      	str	r3, [r7, #24]
 800c372:	6139      	str	r1, [r7, #16]
 800c374:	b1c4      	cbz	r4, 800c3a8 <__d2b+0x88>
 800c376:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c37a:	4404      	add	r4, r0
 800c37c:	6034      	str	r4, [r6, #0]
 800c37e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c382:	6028      	str	r0, [r5, #0]
 800c384:	4638      	mov	r0, r7
 800c386:	b002      	add	sp, #8
 800c388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c38c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c390:	e7d5      	b.n	800c33e <__d2b+0x1e>
 800c392:	6179      	str	r1, [r7, #20]
 800c394:	e7e7      	b.n	800c366 <__d2b+0x46>
 800c396:	a801      	add	r0, sp, #4
 800c398:	f7ff fdda 	bl	800bf50 <__lo0bits>
 800c39c:	2101      	movs	r1, #1
 800c39e:	9b01      	ldr	r3, [sp, #4]
 800c3a0:	6139      	str	r1, [r7, #16]
 800c3a2:	617b      	str	r3, [r7, #20]
 800c3a4:	3020      	adds	r0, #32
 800c3a6:	e7e5      	b.n	800c374 <__d2b+0x54>
 800c3a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c3ac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c3b0:	6030      	str	r0, [r6, #0]
 800c3b2:	6918      	ldr	r0, [r3, #16]
 800c3b4:	f7ff fdad 	bl	800bf12 <__hi0bits>
 800c3b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c3bc:	e7e1      	b.n	800c382 <__d2b+0x62>

0800c3be <_calloc_r>:
 800c3be:	b538      	push	{r3, r4, r5, lr}
 800c3c0:	fb02 f401 	mul.w	r4, r2, r1
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	f000 f855 	bl	800c474 <_malloc_r>
 800c3ca:	4605      	mov	r5, r0
 800c3cc:	b118      	cbz	r0, 800c3d6 <_calloc_r+0x18>
 800c3ce:	4622      	mov	r2, r4
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	f7fe f9e1 	bl	800a798 <memset>
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c3dc <_free_r>:
 800c3dc:	b538      	push	{r3, r4, r5, lr}
 800c3de:	4605      	mov	r5, r0
 800c3e0:	2900      	cmp	r1, #0
 800c3e2:	d043      	beq.n	800c46c <_free_r+0x90>
 800c3e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3e8:	1f0c      	subs	r4, r1, #4
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	bfb8      	it	lt
 800c3ee:	18e4      	addlt	r4, r4, r3
 800c3f0:	f000 fa15 	bl	800c81e <__malloc_lock>
 800c3f4:	4a1e      	ldr	r2, [pc, #120]	; (800c470 <_free_r+0x94>)
 800c3f6:	6813      	ldr	r3, [r2, #0]
 800c3f8:	4610      	mov	r0, r2
 800c3fa:	b933      	cbnz	r3, 800c40a <_free_r+0x2e>
 800c3fc:	6063      	str	r3, [r4, #4]
 800c3fe:	6014      	str	r4, [r2, #0]
 800c400:	4628      	mov	r0, r5
 800c402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c406:	f000 ba0b 	b.w	800c820 <__malloc_unlock>
 800c40a:	42a3      	cmp	r3, r4
 800c40c:	d90b      	bls.n	800c426 <_free_r+0x4a>
 800c40e:	6821      	ldr	r1, [r4, #0]
 800c410:	1862      	adds	r2, r4, r1
 800c412:	4293      	cmp	r3, r2
 800c414:	bf01      	itttt	eq
 800c416:	681a      	ldreq	r2, [r3, #0]
 800c418:	685b      	ldreq	r3, [r3, #4]
 800c41a:	1852      	addeq	r2, r2, r1
 800c41c:	6022      	streq	r2, [r4, #0]
 800c41e:	6063      	str	r3, [r4, #4]
 800c420:	6004      	str	r4, [r0, #0]
 800c422:	e7ed      	b.n	800c400 <_free_r+0x24>
 800c424:	4613      	mov	r3, r2
 800c426:	685a      	ldr	r2, [r3, #4]
 800c428:	b10a      	cbz	r2, 800c42e <_free_r+0x52>
 800c42a:	42a2      	cmp	r2, r4
 800c42c:	d9fa      	bls.n	800c424 <_free_r+0x48>
 800c42e:	6819      	ldr	r1, [r3, #0]
 800c430:	1858      	adds	r0, r3, r1
 800c432:	42a0      	cmp	r0, r4
 800c434:	d10b      	bne.n	800c44e <_free_r+0x72>
 800c436:	6820      	ldr	r0, [r4, #0]
 800c438:	4401      	add	r1, r0
 800c43a:	1858      	adds	r0, r3, r1
 800c43c:	4282      	cmp	r2, r0
 800c43e:	6019      	str	r1, [r3, #0]
 800c440:	d1de      	bne.n	800c400 <_free_r+0x24>
 800c442:	6810      	ldr	r0, [r2, #0]
 800c444:	6852      	ldr	r2, [r2, #4]
 800c446:	4401      	add	r1, r0
 800c448:	6019      	str	r1, [r3, #0]
 800c44a:	605a      	str	r2, [r3, #4]
 800c44c:	e7d8      	b.n	800c400 <_free_r+0x24>
 800c44e:	d902      	bls.n	800c456 <_free_r+0x7a>
 800c450:	230c      	movs	r3, #12
 800c452:	602b      	str	r3, [r5, #0]
 800c454:	e7d4      	b.n	800c400 <_free_r+0x24>
 800c456:	6820      	ldr	r0, [r4, #0]
 800c458:	1821      	adds	r1, r4, r0
 800c45a:	428a      	cmp	r2, r1
 800c45c:	bf01      	itttt	eq
 800c45e:	6811      	ldreq	r1, [r2, #0]
 800c460:	6852      	ldreq	r2, [r2, #4]
 800c462:	1809      	addeq	r1, r1, r0
 800c464:	6021      	streq	r1, [r4, #0]
 800c466:	6062      	str	r2, [r4, #4]
 800c468:	605c      	str	r4, [r3, #4]
 800c46a:	e7c9      	b.n	800c400 <_free_r+0x24>
 800c46c:	bd38      	pop	{r3, r4, r5, pc}
 800c46e:	bf00      	nop
 800c470:	200006a4 	.word	0x200006a4

0800c474 <_malloc_r>:
 800c474:	b570      	push	{r4, r5, r6, lr}
 800c476:	1ccd      	adds	r5, r1, #3
 800c478:	f025 0503 	bic.w	r5, r5, #3
 800c47c:	3508      	adds	r5, #8
 800c47e:	2d0c      	cmp	r5, #12
 800c480:	bf38      	it	cc
 800c482:	250c      	movcc	r5, #12
 800c484:	2d00      	cmp	r5, #0
 800c486:	4606      	mov	r6, r0
 800c488:	db01      	blt.n	800c48e <_malloc_r+0x1a>
 800c48a:	42a9      	cmp	r1, r5
 800c48c:	d903      	bls.n	800c496 <_malloc_r+0x22>
 800c48e:	230c      	movs	r3, #12
 800c490:	6033      	str	r3, [r6, #0]
 800c492:	2000      	movs	r0, #0
 800c494:	bd70      	pop	{r4, r5, r6, pc}
 800c496:	f000 f9c2 	bl	800c81e <__malloc_lock>
 800c49a:	4a21      	ldr	r2, [pc, #132]	; (800c520 <_malloc_r+0xac>)
 800c49c:	6814      	ldr	r4, [r2, #0]
 800c49e:	4621      	mov	r1, r4
 800c4a0:	b991      	cbnz	r1, 800c4c8 <_malloc_r+0x54>
 800c4a2:	4c20      	ldr	r4, [pc, #128]	; (800c524 <_malloc_r+0xb0>)
 800c4a4:	6823      	ldr	r3, [r4, #0]
 800c4a6:	b91b      	cbnz	r3, 800c4b0 <_malloc_r+0x3c>
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	f000 f98f 	bl	800c7cc <_sbrk_r>
 800c4ae:	6020      	str	r0, [r4, #0]
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	f000 f98a 	bl	800c7cc <_sbrk_r>
 800c4b8:	1c43      	adds	r3, r0, #1
 800c4ba:	d124      	bne.n	800c506 <_malloc_r+0x92>
 800c4bc:	230c      	movs	r3, #12
 800c4be:	4630      	mov	r0, r6
 800c4c0:	6033      	str	r3, [r6, #0]
 800c4c2:	f000 f9ad 	bl	800c820 <__malloc_unlock>
 800c4c6:	e7e4      	b.n	800c492 <_malloc_r+0x1e>
 800c4c8:	680b      	ldr	r3, [r1, #0]
 800c4ca:	1b5b      	subs	r3, r3, r5
 800c4cc:	d418      	bmi.n	800c500 <_malloc_r+0x8c>
 800c4ce:	2b0b      	cmp	r3, #11
 800c4d0:	d90f      	bls.n	800c4f2 <_malloc_r+0x7e>
 800c4d2:	600b      	str	r3, [r1, #0]
 800c4d4:	18cc      	adds	r4, r1, r3
 800c4d6:	50cd      	str	r5, [r1, r3]
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f000 f9a1 	bl	800c820 <__malloc_unlock>
 800c4de:	f104 000b 	add.w	r0, r4, #11
 800c4e2:	1d23      	adds	r3, r4, #4
 800c4e4:	f020 0007 	bic.w	r0, r0, #7
 800c4e8:	1ac3      	subs	r3, r0, r3
 800c4ea:	d0d3      	beq.n	800c494 <_malloc_r+0x20>
 800c4ec:	425a      	negs	r2, r3
 800c4ee:	50e2      	str	r2, [r4, r3]
 800c4f0:	e7d0      	b.n	800c494 <_malloc_r+0x20>
 800c4f2:	684b      	ldr	r3, [r1, #4]
 800c4f4:	428c      	cmp	r4, r1
 800c4f6:	bf16      	itet	ne
 800c4f8:	6063      	strne	r3, [r4, #4]
 800c4fa:	6013      	streq	r3, [r2, #0]
 800c4fc:	460c      	movne	r4, r1
 800c4fe:	e7eb      	b.n	800c4d8 <_malloc_r+0x64>
 800c500:	460c      	mov	r4, r1
 800c502:	6849      	ldr	r1, [r1, #4]
 800c504:	e7cc      	b.n	800c4a0 <_malloc_r+0x2c>
 800c506:	1cc4      	adds	r4, r0, #3
 800c508:	f024 0403 	bic.w	r4, r4, #3
 800c50c:	42a0      	cmp	r0, r4
 800c50e:	d005      	beq.n	800c51c <_malloc_r+0xa8>
 800c510:	1a21      	subs	r1, r4, r0
 800c512:	4630      	mov	r0, r6
 800c514:	f000 f95a 	bl	800c7cc <_sbrk_r>
 800c518:	3001      	adds	r0, #1
 800c51a:	d0cf      	beq.n	800c4bc <_malloc_r+0x48>
 800c51c:	6025      	str	r5, [r4, #0]
 800c51e:	e7db      	b.n	800c4d8 <_malloc_r+0x64>
 800c520:	200006a4 	.word	0x200006a4
 800c524:	200006a8 	.word	0x200006a8

0800c528 <__ssputs_r>:
 800c528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c52c:	688e      	ldr	r6, [r1, #8]
 800c52e:	4682      	mov	sl, r0
 800c530:	429e      	cmp	r6, r3
 800c532:	460c      	mov	r4, r1
 800c534:	4690      	mov	r8, r2
 800c536:	4699      	mov	r9, r3
 800c538:	d837      	bhi.n	800c5aa <__ssputs_r+0x82>
 800c53a:	898a      	ldrh	r2, [r1, #12]
 800c53c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c540:	d031      	beq.n	800c5a6 <__ssputs_r+0x7e>
 800c542:	2302      	movs	r3, #2
 800c544:	6825      	ldr	r5, [r4, #0]
 800c546:	6909      	ldr	r1, [r1, #16]
 800c548:	1a6f      	subs	r7, r5, r1
 800c54a:	6965      	ldr	r5, [r4, #20]
 800c54c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c550:	fb95 f5f3 	sdiv	r5, r5, r3
 800c554:	f109 0301 	add.w	r3, r9, #1
 800c558:	443b      	add	r3, r7
 800c55a:	429d      	cmp	r5, r3
 800c55c:	bf38      	it	cc
 800c55e:	461d      	movcc	r5, r3
 800c560:	0553      	lsls	r3, r2, #21
 800c562:	d530      	bpl.n	800c5c6 <__ssputs_r+0x9e>
 800c564:	4629      	mov	r1, r5
 800c566:	f7ff ff85 	bl	800c474 <_malloc_r>
 800c56a:	4606      	mov	r6, r0
 800c56c:	b950      	cbnz	r0, 800c584 <__ssputs_r+0x5c>
 800c56e:	230c      	movs	r3, #12
 800c570:	f04f 30ff 	mov.w	r0, #4294967295
 800c574:	f8ca 3000 	str.w	r3, [sl]
 800c578:	89a3      	ldrh	r3, [r4, #12]
 800c57a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c57e:	81a3      	strh	r3, [r4, #12]
 800c580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c584:	463a      	mov	r2, r7
 800c586:	6921      	ldr	r1, [r4, #16]
 800c588:	f7ff fc32 	bl	800bdf0 <memcpy>
 800c58c:	89a3      	ldrh	r3, [r4, #12]
 800c58e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c596:	81a3      	strh	r3, [r4, #12]
 800c598:	6126      	str	r6, [r4, #16]
 800c59a:	443e      	add	r6, r7
 800c59c:	6026      	str	r6, [r4, #0]
 800c59e:	464e      	mov	r6, r9
 800c5a0:	6165      	str	r5, [r4, #20]
 800c5a2:	1bed      	subs	r5, r5, r7
 800c5a4:	60a5      	str	r5, [r4, #8]
 800c5a6:	454e      	cmp	r6, r9
 800c5a8:	d900      	bls.n	800c5ac <__ssputs_r+0x84>
 800c5aa:	464e      	mov	r6, r9
 800c5ac:	4632      	mov	r2, r6
 800c5ae:	4641      	mov	r1, r8
 800c5b0:	6820      	ldr	r0, [r4, #0]
 800c5b2:	f000 f91b 	bl	800c7ec <memmove>
 800c5b6:	68a3      	ldr	r3, [r4, #8]
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	1b9b      	subs	r3, r3, r6
 800c5bc:	60a3      	str	r3, [r4, #8]
 800c5be:	6823      	ldr	r3, [r4, #0]
 800c5c0:	441e      	add	r6, r3
 800c5c2:	6026      	str	r6, [r4, #0]
 800c5c4:	e7dc      	b.n	800c580 <__ssputs_r+0x58>
 800c5c6:	462a      	mov	r2, r5
 800c5c8:	f000 f92b 	bl	800c822 <_realloc_r>
 800c5cc:	4606      	mov	r6, r0
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d1e2      	bne.n	800c598 <__ssputs_r+0x70>
 800c5d2:	6921      	ldr	r1, [r4, #16]
 800c5d4:	4650      	mov	r0, sl
 800c5d6:	f7ff ff01 	bl	800c3dc <_free_r>
 800c5da:	e7c8      	b.n	800c56e <__ssputs_r+0x46>

0800c5dc <_svfiprintf_r>:
 800c5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e0:	461d      	mov	r5, r3
 800c5e2:	898b      	ldrh	r3, [r1, #12]
 800c5e4:	b09d      	sub	sp, #116	; 0x74
 800c5e6:	061f      	lsls	r7, r3, #24
 800c5e8:	4680      	mov	r8, r0
 800c5ea:	460c      	mov	r4, r1
 800c5ec:	4616      	mov	r6, r2
 800c5ee:	d50f      	bpl.n	800c610 <_svfiprintf_r+0x34>
 800c5f0:	690b      	ldr	r3, [r1, #16]
 800c5f2:	b96b      	cbnz	r3, 800c610 <_svfiprintf_r+0x34>
 800c5f4:	2140      	movs	r1, #64	; 0x40
 800c5f6:	f7ff ff3d 	bl	800c474 <_malloc_r>
 800c5fa:	6020      	str	r0, [r4, #0]
 800c5fc:	6120      	str	r0, [r4, #16]
 800c5fe:	b928      	cbnz	r0, 800c60c <_svfiprintf_r+0x30>
 800c600:	230c      	movs	r3, #12
 800c602:	f8c8 3000 	str.w	r3, [r8]
 800c606:	f04f 30ff 	mov.w	r0, #4294967295
 800c60a:	e0c8      	b.n	800c79e <_svfiprintf_r+0x1c2>
 800c60c:	2340      	movs	r3, #64	; 0x40
 800c60e:	6163      	str	r3, [r4, #20]
 800c610:	2300      	movs	r3, #0
 800c612:	9309      	str	r3, [sp, #36]	; 0x24
 800c614:	2320      	movs	r3, #32
 800c616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c61a:	2330      	movs	r3, #48	; 0x30
 800c61c:	f04f 0b01 	mov.w	fp, #1
 800c620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c624:	9503      	str	r5, [sp, #12]
 800c626:	4637      	mov	r7, r6
 800c628:	463d      	mov	r5, r7
 800c62a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c62e:	b10b      	cbz	r3, 800c634 <_svfiprintf_r+0x58>
 800c630:	2b25      	cmp	r3, #37	; 0x25
 800c632:	d13e      	bne.n	800c6b2 <_svfiprintf_r+0xd6>
 800c634:	ebb7 0a06 	subs.w	sl, r7, r6
 800c638:	d00b      	beq.n	800c652 <_svfiprintf_r+0x76>
 800c63a:	4653      	mov	r3, sl
 800c63c:	4632      	mov	r2, r6
 800c63e:	4621      	mov	r1, r4
 800c640:	4640      	mov	r0, r8
 800c642:	f7ff ff71 	bl	800c528 <__ssputs_r>
 800c646:	3001      	adds	r0, #1
 800c648:	f000 80a4 	beq.w	800c794 <_svfiprintf_r+0x1b8>
 800c64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c64e:	4453      	add	r3, sl
 800c650:	9309      	str	r3, [sp, #36]	; 0x24
 800c652:	783b      	ldrb	r3, [r7, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	f000 809d 	beq.w	800c794 <_svfiprintf_r+0x1b8>
 800c65a:	2300      	movs	r3, #0
 800c65c:	f04f 32ff 	mov.w	r2, #4294967295
 800c660:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c664:	9304      	str	r3, [sp, #16]
 800c666:	9307      	str	r3, [sp, #28]
 800c668:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c66c:	931a      	str	r3, [sp, #104]	; 0x68
 800c66e:	462f      	mov	r7, r5
 800c670:	2205      	movs	r2, #5
 800c672:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c676:	4850      	ldr	r0, [pc, #320]	; (800c7b8 <_svfiprintf_r+0x1dc>)
 800c678:	f7ff fbac 	bl	800bdd4 <memchr>
 800c67c:	9b04      	ldr	r3, [sp, #16]
 800c67e:	b9d0      	cbnz	r0, 800c6b6 <_svfiprintf_r+0xda>
 800c680:	06d9      	lsls	r1, r3, #27
 800c682:	bf44      	itt	mi
 800c684:	2220      	movmi	r2, #32
 800c686:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c68a:	071a      	lsls	r2, r3, #28
 800c68c:	bf44      	itt	mi
 800c68e:	222b      	movmi	r2, #43	; 0x2b
 800c690:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c694:	782a      	ldrb	r2, [r5, #0]
 800c696:	2a2a      	cmp	r2, #42	; 0x2a
 800c698:	d015      	beq.n	800c6c6 <_svfiprintf_r+0xea>
 800c69a:	462f      	mov	r7, r5
 800c69c:	2000      	movs	r0, #0
 800c69e:	250a      	movs	r5, #10
 800c6a0:	9a07      	ldr	r2, [sp, #28]
 800c6a2:	4639      	mov	r1, r7
 800c6a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6a8:	3b30      	subs	r3, #48	; 0x30
 800c6aa:	2b09      	cmp	r3, #9
 800c6ac:	d94d      	bls.n	800c74a <_svfiprintf_r+0x16e>
 800c6ae:	b1b8      	cbz	r0, 800c6e0 <_svfiprintf_r+0x104>
 800c6b0:	e00f      	b.n	800c6d2 <_svfiprintf_r+0xf6>
 800c6b2:	462f      	mov	r7, r5
 800c6b4:	e7b8      	b.n	800c628 <_svfiprintf_r+0x4c>
 800c6b6:	4a40      	ldr	r2, [pc, #256]	; (800c7b8 <_svfiprintf_r+0x1dc>)
 800c6b8:	463d      	mov	r5, r7
 800c6ba:	1a80      	subs	r0, r0, r2
 800c6bc:	fa0b f000 	lsl.w	r0, fp, r0
 800c6c0:	4318      	orrs	r0, r3
 800c6c2:	9004      	str	r0, [sp, #16]
 800c6c4:	e7d3      	b.n	800c66e <_svfiprintf_r+0x92>
 800c6c6:	9a03      	ldr	r2, [sp, #12]
 800c6c8:	1d11      	adds	r1, r2, #4
 800c6ca:	6812      	ldr	r2, [r2, #0]
 800c6cc:	9103      	str	r1, [sp, #12]
 800c6ce:	2a00      	cmp	r2, #0
 800c6d0:	db01      	blt.n	800c6d6 <_svfiprintf_r+0xfa>
 800c6d2:	9207      	str	r2, [sp, #28]
 800c6d4:	e004      	b.n	800c6e0 <_svfiprintf_r+0x104>
 800c6d6:	4252      	negs	r2, r2
 800c6d8:	f043 0302 	orr.w	r3, r3, #2
 800c6dc:	9207      	str	r2, [sp, #28]
 800c6de:	9304      	str	r3, [sp, #16]
 800c6e0:	783b      	ldrb	r3, [r7, #0]
 800c6e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c6e4:	d10c      	bne.n	800c700 <_svfiprintf_r+0x124>
 800c6e6:	787b      	ldrb	r3, [r7, #1]
 800c6e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6ea:	d133      	bne.n	800c754 <_svfiprintf_r+0x178>
 800c6ec:	9b03      	ldr	r3, [sp, #12]
 800c6ee:	3702      	adds	r7, #2
 800c6f0:	1d1a      	adds	r2, r3, #4
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	9203      	str	r2, [sp, #12]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	bfb8      	it	lt
 800c6fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6fe:	9305      	str	r3, [sp, #20]
 800c700:	4d2e      	ldr	r5, [pc, #184]	; (800c7bc <_svfiprintf_r+0x1e0>)
 800c702:	2203      	movs	r2, #3
 800c704:	7839      	ldrb	r1, [r7, #0]
 800c706:	4628      	mov	r0, r5
 800c708:	f7ff fb64 	bl	800bdd4 <memchr>
 800c70c:	b138      	cbz	r0, 800c71e <_svfiprintf_r+0x142>
 800c70e:	2340      	movs	r3, #64	; 0x40
 800c710:	1b40      	subs	r0, r0, r5
 800c712:	fa03 f000 	lsl.w	r0, r3, r0
 800c716:	9b04      	ldr	r3, [sp, #16]
 800c718:	3701      	adds	r7, #1
 800c71a:	4303      	orrs	r3, r0
 800c71c:	9304      	str	r3, [sp, #16]
 800c71e:	7839      	ldrb	r1, [r7, #0]
 800c720:	2206      	movs	r2, #6
 800c722:	4827      	ldr	r0, [pc, #156]	; (800c7c0 <_svfiprintf_r+0x1e4>)
 800c724:	1c7e      	adds	r6, r7, #1
 800c726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c72a:	f7ff fb53 	bl	800bdd4 <memchr>
 800c72e:	2800      	cmp	r0, #0
 800c730:	d038      	beq.n	800c7a4 <_svfiprintf_r+0x1c8>
 800c732:	4b24      	ldr	r3, [pc, #144]	; (800c7c4 <_svfiprintf_r+0x1e8>)
 800c734:	bb13      	cbnz	r3, 800c77c <_svfiprintf_r+0x1a0>
 800c736:	9b03      	ldr	r3, [sp, #12]
 800c738:	3307      	adds	r3, #7
 800c73a:	f023 0307 	bic.w	r3, r3, #7
 800c73e:	3308      	adds	r3, #8
 800c740:	9303      	str	r3, [sp, #12]
 800c742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c744:	444b      	add	r3, r9
 800c746:	9309      	str	r3, [sp, #36]	; 0x24
 800c748:	e76d      	b.n	800c626 <_svfiprintf_r+0x4a>
 800c74a:	fb05 3202 	mla	r2, r5, r2, r3
 800c74e:	2001      	movs	r0, #1
 800c750:	460f      	mov	r7, r1
 800c752:	e7a6      	b.n	800c6a2 <_svfiprintf_r+0xc6>
 800c754:	2300      	movs	r3, #0
 800c756:	250a      	movs	r5, #10
 800c758:	4619      	mov	r1, r3
 800c75a:	3701      	adds	r7, #1
 800c75c:	9305      	str	r3, [sp, #20]
 800c75e:	4638      	mov	r0, r7
 800c760:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c764:	3a30      	subs	r2, #48	; 0x30
 800c766:	2a09      	cmp	r2, #9
 800c768:	d903      	bls.n	800c772 <_svfiprintf_r+0x196>
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d0c8      	beq.n	800c700 <_svfiprintf_r+0x124>
 800c76e:	9105      	str	r1, [sp, #20]
 800c770:	e7c6      	b.n	800c700 <_svfiprintf_r+0x124>
 800c772:	fb05 2101 	mla	r1, r5, r1, r2
 800c776:	2301      	movs	r3, #1
 800c778:	4607      	mov	r7, r0
 800c77a:	e7f0      	b.n	800c75e <_svfiprintf_r+0x182>
 800c77c:	ab03      	add	r3, sp, #12
 800c77e:	9300      	str	r3, [sp, #0]
 800c780:	4622      	mov	r2, r4
 800c782:	4b11      	ldr	r3, [pc, #68]	; (800c7c8 <_svfiprintf_r+0x1ec>)
 800c784:	a904      	add	r1, sp, #16
 800c786:	4640      	mov	r0, r8
 800c788:	f7fe f8a0 	bl	800a8cc <_printf_float>
 800c78c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c790:	4681      	mov	r9, r0
 800c792:	d1d6      	bne.n	800c742 <_svfiprintf_r+0x166>
 800c794:	89a3      	ldrh	r3, [r4, #12]
 800c796:	065b      	lsls	r3, r3, #25
 800c798:	f53f af35 	bmi.w	800c606 <_svfiprintf_r+0x2a>
 800c79c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c79e:	b01d      	add	sp, #116	; 0x74
 800c7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a4:	ab03      	add	r3, sp, #12
 800c7a6:	9300      	str	r3, [sp, #0]
 800c7a8:	4622      	mov	r2, r4
 800c7aa:	4b07      	ldr	r3, [pc, #28]	; (800c7c8 <_svfiprintf_r+0x1ec>)
 800c7ac:	a904      	add	r1, sp, #16
 800c7ae:	4640      	mov	r0, r8
 800c7b0:	f7fe fb38 	bl	800ae24 <_printf_i>
 800c7b4:	e7ea      	b.n	800c78c <_svfiprintf_r+0x1b0>
 800c7b6:	bf00      	nop
 800c7b8:	0800da1c 	.word	0x0800da1c
 800c7bc:	0800da22 	.word	0x0800da22
 800c7c0:	0800da26 	.word	0x0800da26
 800c7c4:	0800a8cd 	.word	0x0800a8cd
 800c7c8:	0800c529 	.word	0x0800c529

0800c7cc <_sbrk_r>:
 800c7cc:	b538      	push	{r3, r4, r5, lr}
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	4c05      	ldr	r4, [pc, #20]	; (800c7e8 <_sbrk_r+0x1c>)
 800c7d2:	4605      	mov	r5, r0
 800c7d4:	4608      	mov	r0, r1
 800c7d6:	6023      	str	r3, [r4, #0]
 800c7d8:	f7f9 fe08 	bl	80063ec <_sbrk>
 800c7dc:	1c43      	adds	r3, r0, #1
 800c7de:	d102      	bne.n	800c7e6 <_sbrk_r+0x1a>
 800c7e0:	6823      	ldr	r3, [r4, #0]
 800c7e2:	b103      	cbz	r3, 800c7e6 <_sbrk_r+0x1a>
 800c7e4:	602b      	str	r3, [r5, #0]
 800c7e6:	bd38      	pop	{r3, r4, r5, pc}
 800c7e8:	20001604 	.word	0x20001604

0800c7ec <memmove>:
 800c7ec:	4288      	cmp	r0, r1
 800c7ee:	b510      	push	{r4, lr}
 800c7f0:	eb01 0302 	add.w	r3, r1, r2
 800c7f4:	d807      	bhi.n	800c806 <memmove+0x1a>
 800c7f6:	1e42      	subs	r2, r0, #1
 800c7f8:	4299      	cmp	r1, r3
 800c7fa:	d00a      	beq.n	800c812 <memmove+0x26>
 800c7fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c800:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c804:	e7f8      	b.n	800c7f8 <memmove+0xc>
 800c806:	4283      	cmp	r3, r0
 800c808:	d9f5      	bls.n	800c7f6 <memmove+0xa>
 800c80a:	1881      	adds	r1, r0, r2
 800c80c:	1ad2      	subs	r2, r2, r3
 800c80e:	42d3      	cmn	r3, r2
 800c810:	d100      	bne.n	800c814 <memmove+0x28>
 800c812:	bd10      	pop	{r4, pc}
 800c814:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c818:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c81c:	e7f7      	b.n	800c80e <memmove+0x22>

0800c81e <__malloc_lock>:
 800c81e:	4770      	bx	lr

0800c820 <__malloc_unlock>:
 800c820:	4770      	bx	lr

0800c822 <_realloc_r>:
 800c822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c824:	4607      	mov	r7, r0
 800c826:	4614      	mov	r4, r2
 800c828:	460e      	mov	r6, r1
 800c82a:	b921      	cbnz	r1, 800c836 <_realloc_r+0x14>
 800c82c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c830:	4611      	mov	r1, r2
 800c832:	f7ff be1f 	b.w	800c474 <_malloc_r>
 800c836:	b922      	cbnz	r2, 800c842 <_realloc_r+0x20>
 800c838:	f7ff fdd0 	bl	800c3dc <_free_r>
 800c83c:	4625      	mov	r5, r4
 800c83e:	4628      	mov	r0, r5
 800c840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c842:	f000 f814 	bl	800c86e <_malloc_usable_size_r>
 800c846:	42a0      	cmp	r0, r4
 800c848:	d20f      	bcs.n	800c86a <_realloc_r+0x48>
 800c84a:	4621      	mov	r1, r4
 800c84c:	4638      	mov	r0, r7
 800c84e:	f7ff fe11 	bl	800c474 <_malloc_r>
 800c852:	4605      	mov	r5, r0
 800c854:	2800      	cmp	r0, #0
 800c856:	d0f2      	beq.n	800c83e <_realloc_r+0x1c>
 800c858:	4631      	mov	r1, r6
 800c85a:	4622      	mov	r2, r4
 800c85c:	f7ff fac8 	bl	800bdf0 <memcpy>
 800c860:	4631      	mov	r1, r6
 800c862:	4638      	mov	r0, r7
 800c864:	f7ff fdba 	bl	800c3dc <_free_r>
 800c868:	e7e9      	b.n	800c83e <_realloc_r+0x1c>
 800c86a:	4635      	mov	r5, r6
 800c86c:	e7e7      	b.n	800c83e <_realloc_r+0x1c>

0800c86e <_malloc_usable_size_r>:
 800c86e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c872:	1f18      	subs	r0, r3, #4
 800c874:	2b00      	cmp	r3, #0
 800c876:	bfbc      	itt	lt
 800c878:	580b      	ldrlt	r3, [r1, r0]
 800c87a:	18c0      	addlt	r0, r0, r3
 800c87c:	4770      	bx	lr
	...

0800c880 <log>:
 800c880:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c884:	b08a      	sub	sp, #40	; 0x28
 800c886:	4604      	mov	r4, r0
 800c888:	460d      	mov	r5, r1
 800c88a:	f000 f875 	bl	800c978 <__ieee754_log>
 800c88e:	4b34      	ldr	r3, [pc, #208]	; (800c960 <log+0xe0>)
 800c890:	4680      	mov	r8, r0
 800c892:	f993 6000 	ldrsb.w	r6, [r3]
 800c896:	4689      	mov	r9, r1
 800c898:	1c73      	adds	r3, r6, #1
 800c89a:	d05b      	beq.n	800c954 <log+0xd4>
 800c89c:	4622      	mov	r2, r4
 800c89e:	462b      	mov	r3, r5
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	f7f4 f8b2 	bl	8000a0c <__aeabi_dcmpun>
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d153      	bne.n	800c954 <log+0xd4>
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	f7f4 f8a0 	bl	80009f8 <__aeabi_dcmpgt>
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	d14b      	bne.n	800c954 <log+0xd4>
 800c8bc:	4b29      	ldr	r3, [pc, #164]	; (800c964 <log+0xe4>)
 800c8be:	9008      	str	r0, [sp, #32]
 800c8c0:	9301      	str	r3, [sp, #4]
 800c8c2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c8c6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c8ca:	b9a6      	cbnz	r6, 800c8f6 <log+0x76>
 800c8cc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c8d0:	4b25      	ldr	r3, [pc, #148]	; (800c968 <log+0xe8>)
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c8d8:	4629      	mov	r1, r5
 800c8da:	2200      	movs	r2, #0
 800c8dc:	2300      	movs	r3, #0
 800c8de:	f7f4 f863 	bl	80009a8 <__aeabi_dcmpeq>
 800c8e2:	bb40      	cbnz	r0, 800c936 <log+0xb6>
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	2e02      	cmp	r6, #2
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	d119      	bne.n	800c920 <log+0xa0>
 800c8ec:	f7fd fef0 	bl	800a6d0 <__errno>
 800c8f0:	2321      	movs	r3, #33	; 0x21
 800c8f2:	6003      	str	r3, [r0, #0]
 800c8f4:	e019      	b.n	800c92a <log+0xaa>
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	4b1c      	ldr	r3, [pc, #112]	; (800c96c <log+0xec>)
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c900:	4629      	mov	r1, r5
 800c902:	2200      	movs	r2, #0
 800c904:	2300      	movs	r3, #0
 800c906:	f7f4 f84f 	bl	80009a8 <__aeabi_dcmpeq>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	d0ea      	beq.n	800c8e4 <log+0x64>
 800c90e:	2302      	movs	r3, #2
 800c910:	429e      	cmp	r6, r3
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	d111      	bne.n	800c93a <log+0xba>
 800c916:	f7fd fedb 	bl	800a6d0 <__errno>
 800c91a:	2322      	movs	r3, #34	; 0x22
 800c91c:	6003      	str	r3, [r0, #0]
 800c91e:	e011      	b.n	800c944 <log+0xc4>
 800c920:	4668      	mov	r0, sp
 800c922:	f000 f9db 	bl	800ccdc <matherr>
 800c926:	2800      	cmp	r0, #0
 800c928:	d0e0      	beq.n	800c8ec <log+0x6c>
 800c92a:	4811      	ldr	r0, [pc, #68]	; (800c970 <log+0xf0>)
 800c92c:	f000 f9d8 	bl	800cce0 <nan>
 800c930:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c934:	e006      	b.n	800c944 <log+0xc4>
 800c936:	2302      	movs	r3, #2
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	4668      	mov	r0, sp
 800c93c:	f000 f9ce 	bl	800ccdc <matherr>
 800c940:	2800      	cmp	r0, #0
 800c942:	d0e8      	beq.n	800c916 <log+0x96>
 800c944:	9b08      	ldr	r3, [sp, #32]
 800c946:	b11b      	cbz	r3, 800c950 <log+0xd0>
 800c948:	f7fd fec2 	bl	800a6d0 <__errno>
 800c94c:	9b08      	ldr	r3, [sp, #32]
 800c94e:	6003      	str	r3, [r0, #0]
 800c950:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800c954:	4640      	mov	r0, r8
 800c956:	4649      	mov	r1, r9
 800c958:	b00a      	add	sp, #40	; 0x28
 800c95a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c95e:	bf00      	nop
 800c960:	20000260 	.word	0x20000260
 800c964:	0800da2d 	.word	0x0800da2d
 800c968:	c7efffff 	.word	0xc7efffff
 800c96c:	fff00000 	.word	0xfff00000
 800c970:	0800da21 	.word	0x0800da21
 800c974:	00000000 	.word	0x00000000

0800c978 <__ieee754_log>:
 800c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c980:	b087      	sub	sp, #28
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	460d      	mov	r5, r1
 800c988:	da24      	bge.n	800c9d4 <__ieee754_log+0x5c>
 800c98a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c98e:	4304      	orrs	r4, r0
 800c990:	d108      	bne.n	800c9a4 <__ieee754_log+0x2c>
 800c992:	2200      	movs	r2, #0
 800c994:	2300      	movs	r3, #0
 800c996:	2000      	movs	r0, #0
 800c998:	49cb      	ldr	r1, [pc, #812]	; (800ccc8 <__ieee754_log+0x350>)
 800c99a:	f7f3 fec7 	bl	800072c <__aeabi_ddiv>
 800c99e:	b007      	add	sp, #28
 800c9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a4:	2900      	cmp	r1, #0
 800c9a6:	da04      	bge.n	800c9b2 <__ieee754_log+0x3a>
 800c9a8:	f7f3 fbde 	bl	8000168 <__aeabi_dsub>
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	e7f3      	b.n	800c99a <__ieee754_log+0x22>
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	4bc5      	ldr	r3, [pc, #788]	; (800cccc <__ieee754_log+0x354>)
 800c9b6:	f7f3 fd8f 	bl	80004d8 <__aeabi_dmul>
 800c9ba:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800c9be:	4602      	mov	r2, r0
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	460d      	mov	r5, r1
 800c9c4:	49c2      	ldr	r1, [pc, #776]	; (800ccd0 <__ieee754_log+0x358>)
 800c9c6:	428d      	cmp	r5, r1
 800c9c8:	dd06      	ble.n	800c9d8 <__ieee754_log+0x60>
 800c9ca:	4610      	mov	r0, r2
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	f7f3 fbcd 	bl	800016c <__adddf3>
 800c9d2:	e7e4      	b.n	800c99e <__ieee754_log+0x26>
 800c9d4:	2600      	movs	r6, #0
 800c9d6:	e7f5      	b.n	800c9c4 <__ieee754_log+0x4c>
 800c9d8:	152c      	asrs	r4, r5, #20
 800c9da:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c9de:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800c9e2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c9e6:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800c9ea:	4426      	add	r6, r4
 800c9ec:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800c9f0:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800c9f4:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800c9f8:	ea41 0305 	orr.w	r3, r1, r5
 800c9fc:	4610      	mov	r0, r2
 800c9fe:	4619      	mov	r1, r3
 800ca00:	2200      	movs	r2, #0
 800ca02:	4bb4      	ldr	r3, [pc, #720]	; (800ccd4 <__ieee754_log+0x35c>)
 800ca04:	f7f3 fbb0 	bl	8000168 <__aeabi_dsub>
 800ca08:	1cab      	adds	r3, r5, #2
 800ca0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800ca14:	4682      	mov	sl, r0
 800ca16:	468b      	mov	fp, r1
 800ca18:	f04f 0200 	mov.w	r2, #0
 800ca1c:	dc53      	bgt.n	800cac6 <__ieee754_log+0x14e>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	f7f3 ffc2 	bl	80009a8 <__aeabi_dcmpeq>
 800ca24:	b1d0      	cbz	r0, 800ca5c <__ieee754_log+0xe4>
 800ca26:	2c00      	cmp	r4, #0
 800ca28:	f000 8120 	beq.w	800cc6c <__ieee754_log+0x2f4>
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f7f3 fce9 	bl	8000404 <__aeabi_i2d>
 800ca32:	a391      	add	r3, pc, #580	; (adr r3, 800cc78 <__ieee754_log+0x300>)
 800ca34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca38:	4606      	mov	r6, r0
 800ca3a:	460f      	mov	r7, r1
 800ca3c:	f7f3 fd4c 	bl	80004d8 <__aeabi_dmul>
 800ca40:	a38f      	add	r3, pc, #572	; (adr r3, 800cc80 <__ieee754_log+0x308>)
 800ca42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca46:	4604      	mov	r4, r0
 800ca48:	460d      	mov	r5, r1
 800ca4a:	4630      	mov	r0, r6
 800ca4c:	4639      	mov	r1, r7
 800ca4e:	f7f3 fd43 	bl	80004d8 <__aeabi_dmul>
 800ca52:	4602      	mov	r2, r0
 800ca54:	460b      	mov	r3, r1
 800ca56:	4620      	mov	r0, r4
 800ca58:	4629      	mov	r1, r5
 800ca5a:	e7b8      	b.n	800c9ce <__ieee754_log+0x56>
 800ca5c:	a38a      	add	r3, pc, #552	; (adr r3, 800cc88 <__ieee754_log+0x310>)
 800ca5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca62:	4650      	mov	r0, sl
 800ca64:	4659      	mov	r1, fp
 800ca66:	f7f3 fd37 	bl	80004d8 <__aeabi_dmul>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	2000      	movs	r0, #0
 800ca70:	4999      	ldr	r1, [pc, #612]	; (800ccd8 <__ieee754_log+0x360>)
 800ca72:	f7f3 fb79 	bl	8000168 <__aeabi_dsub>
 800ca76:	4652      	mov	r2, sl
 800ca78:	4606      	mov	r6, r0
 800ca7a:	460f      	mov	r7, r1
 800ca7c:	465b      	mov	r3, fp
 800ca7e:	4650      	mov	r0, sl
 800ca80:	4659      	mov	r1, fp
 800ca82:	f7f3 fd29 	bl	80004d8 <__aeabi_dmul>
 800ca86:	4602      	mov	r2, r0
 800ca88:	460b      	mov	r3, r1
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	4639      	mov	r1, r7
 800ca8e:	f7f3 fd23 	bl	80004d8 <__aeabi_dmul>
 800ca92:	4606      	mov	r6, r0
 800ca94:	460f      	mov	r7, r1
 800ca96:	b914      	cbnz	r4, 800ca9e <__ieee754_log+0x126>
 800ca98:	4632      	mov	r2, r6
 800ca9a:	463b      	mov	r3, r7
 800ca9c:	e0a0      	b.n	800cbe0 <__ieee754_log+0x268>
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f7f3 fcb0 	bl	8000404 <__aeabi_i2d>
 800caa4:	a374      	add	r3, pc, #464	; (adr r3, 800cc78 <__ieee754_log+0x300>)
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	4680      	mov	r8, r0
 800caac:	4689      	mov	r9, r1
 800caae:	f7f3 fd13 	bl	80004d8 <__aeabi_dmul>
 800cab2:	a373      	add	r3, pc, #460	; (adr r3, 800cc80 <__ieee754_log+0x308>)
 800cab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab8:	4604      	mov	r4, r0
 800caba:	460d      	mov	r5, r1
 800cabc:	4640      	mov	r0, r8
 800cabe:	4649      	mov	r1, r9
 800cac0:	f7f3 fd0a 	bl	80004d8 <__aeabi_dmul>
 800cac4:	e0a5      	b.n	800cc12 <__ieee754_log+0x29a>
 800cac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800caca:	f7f3 fb4f 	bl	800016c <__adddf3>
 800cace:	4602      	mov	r2, r0
 800cad0:	460b      	mov	r3, r1
 800cad2:	4650      	mov	r0, sl
 800cad4:	4659      	mov	r1, fp
 800cad6:	f7f3 fe29 	bl	800072c <__aeabi_ddiv>
 800cada:	e9cd 0100 	strd	r0, r1, [sp]
 800cade:	4620      	mov	r0, r4
 800cae0:	f7f3 fc90 	bl	8000404 <__aeabi_i2d>
 800cae4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800caec:	4610      	mov	r0, r2
 800caee:	4619      	mov	r1, r3
 800caf0:	f7f3 fcf2 	bl	80004d8 <__aeabi_dmul>
 800caf4:	4602      	mov	r2, r0
 800caf6:	460b      	mov	r3, r1
 800caf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cafc:	f7f3 fcec 	bl	80004d8 <__aeabi_dmul>
 800cb00:	a363      	add	r3, pc, #396	; (adr r3, 800cc90 <__ieee754_log+0x318>)
 800cb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb06:	4680      	mov	r8, r0
 800cb08:	4689      	mov	r9, r1
 800cb0a:	f7f3 fce5 	bl	80004d8 <__aeabi_dmul>
 800cb0e:	a362      	add	r3, pc, #392	; (adr r3, 800cc98 <__ieee754_log+0x320>)
 800cb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb14:	f7f3 fb2a 	bl	800016c <__adddf3>
 800cb18:	4642      	mov	r2, r8
 800cb1a:	464b      	mov	r3, r9
 800cb1c:	f7f3 fcdc 	bl	80004d8 <__aeabi_dmul>
 800cb20:	a35f      	add	r3, pc, #380	; (adr r3, 800cca0 <__ieee754_log+0x328>)
 800cb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb26:	f7f3 fb21 	bl	800016c <__adddf3>
 800cb2a:	4642      	mov	r2, r8
 800cb2c:	464b      	mov	r3, r9
 800cb2e:	f7f3 fcd3 	bl	80004d8 <__aeabi_dmul>
 800cb32:	a35d      	add	r3, pc, #372	; (adr r3, 800cca8 <__ieee754_log+0x330>)
 800cb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb38:	f7f3 fb18 	bl	800016c <__adddf3>
 800cb3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb40:	f7f3 fcca 	bl	80004d8 <__aeabi_dmul>
 800cb44:	a35a      	add	r3, pc, #360	; (adr r3, 800ccb0 <__ieee754_log+0x338>)
 800cb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb4e:	4640      	mov	r0, r8
 800cb50:	4649      	mov	r1, r9
 800cb52:	f7f3 fcc1 	bl	80004d8 <__aeabi_dmul>
 800cb56:	a358      	add	r3, pc, #352	; (adr r3, 800ccb8 <__ieee754_log+0x340>)
 800cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5c:	f7f3 fb06 	bl	800016c <__adddf3>
 800cb60:	4642      	mov	r2, r8
 800cb62:	464b      	mov	r3, r9
 800cb64:	f7f3 fcb8 	bl	80004d8 <__aeabi_dmul>
 800cb68:	a355      	add	r3, pc, #340	; (adr r3, 800ccc0 <__ieee754_log+0x348>)
 800cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6e:	f7f3 fafd 	bl	800016c <__adddf3>
 800cb72:	4642      	mov	r2, r8
 800cb74:	464b      	mov	r3, r9
 800cb76:	f7f3 fcaf 	bl	80004d8 <__aeabi_dmul>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb82:	f7f3 faf3 	bl	800016c <__adddf3>
 800cb86:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800cb8a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800cb8e:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800cb92:	3551      	adds	r5, #81	; 0x51
 800cb94:	4335      	orrs	r5, r6
 800cb96:	2d00      	cmp	r5, #0
 800cb98:	4680      	mov	r8, r0
 800cb9a:	4689      	mov	r9, r1
 800cb9c:	dd48      	ble.n	800cc30 <__ieee754_log+0x2b8>
 800cb9e:	2200      	movs	r2, #0
 800cba0:	4b4d      	ldr	r3, [pc, #308]	; (800ccd8 <__ieee754_log+0x360>)
 800cba2:	4650      	mov	r0, sl
 800cba4:	4659      	mov	r1, fp
 800cba6:	f7f3 fc97 	bl	80004d8 <__aeabi_dmul>
 800cbaa:	4652      	mov	r2, sl
 800cbac:	465b      	mov	r3, fp
 800cbae:	f7f3 fc93 	bl	80004d8 <__aeabi_dmul>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	460f      	mov	r7, r1
 800cbba:	4640      	mov	r0, r8
 800cbbc:	4649      	mov	r1, r9
 800cbbe:	f7f3 fad5 	bl	800016c <__adddf3>
 800cbc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbc6:	f7f3 fc87 	bl	80004d8 <__aeabi_dmul>
 800cbca:	4680      	mov	r8, r0
 800cbcc:	4689      	mov	r9, r1
 800cbce:	b964      	cbnz	r4, 800cbea <__ieee754_log+0x272>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	f7f3 fac6 	bl	8000168 <__aeabi_dsub>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	460b      	mov	r3, r1
 800cbe0:	4650      	mov	r0, sl
 800cbe2:	4659      	mov	r1, fp
 800cbe4:	f7f3 fac0 	bl	8000168 <__aeabi_dsub>
 800cbe8:	e6d9      	b.n	800c99e <__ieee754_log+0x26>
 800cbea:	a323      	add	r3, pc, #140	; (adr r3, 800cc78 <__ieee754_log+0x300>)
 800cbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbf4:	f7f3 fc70 	bl	80004d8 <__aeabi_dmul>
 800cbf8:	a321      	add	r3, pc, #132	; (adr r3, 800cc80 <__ieee754_log+0x308>)
 800cbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfe:	4604      	mov	r4, r0
 800cc00:	460d      	mov	r5, r1
 800cc02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc06:	f7f3 fc67 	bl	80004d8 <__aeabi_dmul>
 800cc0a:	4642      	mov	r2, r8
 800cc0c:	464b      	mov	r3, r9
 800cc0e:	f7f3 faad 	bl	800016c <__adddf3>
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	4630      	mov	r0, r6
 800cc18:	4639      	mov	r1, r7
 800cc1a:	f7f3 faa5 	bl	8000168 <__aeabi_dsub>
 800cc1e:	4652      	mov	r2, sl
 800cc20:	465b      	mov	r3, fp
 800cc22:	f7f3 faa1 	bl	8000168 <__aeabi_dsub>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	e7d9      	b.n	800cbe4 <__ieee754_log+0x26c>
 800cc30:	4602      	mov	r2, r0
 800cc32:	460b      	mov	r3, r1
 800cc34:	4650      	mov	r0, sl
 800cc36:	4659      	mov	r1, fp
 800cc38:	f7f3 fa96 	bl	8000168 <__aeabi_dsub>
 800cc3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc40:	f7f3 fc4a 	bl	80004d8 <__aeabi_dmul>
 800cc44:	4606      	mov	r6, r0
 800cc46:	460f      	mov	r7, r1
 800cc48:	2c00      	cmp	r4, #0
 800cc4a:	f43f af25 	beq.w	800ca98 <__ieee754_log+0x120>
 800cc4e:	a30a      	add	r3, pc, #40	; (adr r3, 800cc78 <__ieee754_log+0x300>)
 800cc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc58:	f7f3 fc3e 	bl	80004d8 <__aeabi_dmul>
 800cc5c:	a308      	add	r3, pc, #32	; (adr r3, 800cc80 <__ieee754_log+0x308>)
 800cc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc62:	4604      	mov	r4, r0
 800cc64:	460d      	mov	r5, r1
 800cc66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc6a:	e729      	b.n	800cac0 <__ieee754_log+0x148>
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	2100      	movs	r1, #0
 800cc70:	e695      	b.n	800c99e <__ieee754_log+0x26>
 800cc72:	bf00      	nop
 800cc74:	f3af 8000 	nop.w
 800cc78:	fee00000 	.word	0xfee00000
 800cc7c:	3fe62e42 	.word	0x3fe62e42
 800cc80:	35793c76 	.word	0x35793c76
 800cc84:	3dea39ef 	.word	0x3dea39ef
 800cc88:	55555555 	.word	0x55555555
 800cc8c:	3fd55555 	.word	0x3fd55555
 800cc90:	df3e5244 	.word	0xdf3e5244
 800cc94:	3fc2f112 	.word	0x3fc2f112
 800cc98:	96cb03de 	.word	0x96cb03de
 800cc9c:	3fc74664 	.word	0x3fc74664
 800cca0:	94229359 	.word	0x94229359
 800cca4:	3fd24924 	.word	0x3fd24924
 800cca8:	55555593 	.word	0x55555593
 800ccac:	3fe55555 	.word	0x3fe55555
 800ccb0:	d078c69f 	.word	0xd078c69f
 800ccb4:	3fc39a09 	.word	0x3fc39a09
 800ccb8:	1d8e78af 	.word	0x1d8e78af
 800ccbc:	3fcc71c5 	.word	0x3fcc71c5
 800ccc0:	9997fa04 	.word	0x9997fa04
 800ccc4:	3fd99999 	.word	0x3fd99999
 800ccc8:	c3500000 	.word	0xc3500000
 800cccc:	43500000 	.word	0x43500000
 800ccd0:	7fefffff 	.word	0x7fefffff
 800ccd4:	3ff00000 	.word	0x3ff00000
 800ccd8:	3fe00000 	.word	0x3fe00000

0800ccdc <matherr>:
 800ccdc:	2000      	movs	r0, #0
 800ccde:	4770      	bx	lr

0800cce0 <nan>:
 800cce0:	2000      	movs	r0, #0
 800cce2:	4901      	ldr	r1, [pc, #4]	; (800cce8 <nan+0x8>)
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	7ff80000 	.word	0x7ff80000

0800ccec <_init>:
 800ccec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccee:	bf00      	nop
 800ccf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccf2:	bc08      	pop	{r3}
 800ccf4:	469e      	mov	lr, r3
 800ccf6:	4770      	bx	lr

0800ccf8 <_fini>:
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	bf00      	nop
 800ccfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccfe:	bc08      	pop	{r3}
 800cd00:	469e      	mov	lr, r3
 800cd02:	4770      	bx	lr
